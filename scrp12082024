(function() {
	let AutoRespawnInterval;
	let innt = 0;
	let engineIndex = 0;
	let autoFeedIndex = 0;
	window.token = undefined;
	window.token_id = undefined;
	let autoIceIndex = 0;
	let autoCrownReady = true;
	let log = console.log;
	const JoinedPlayers = [];
	const KilledPlayers = [];
	const SandstormImage = new Image;
	SandstormImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/sandstorm.png";
	const BlizzardImage = new Image;
	BlizzardImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/blizzard.png";
	const Packets = {
		TakeChest: 8,
		TakeOven: 13,
		TakeWindmill: 4,
		TakeExtractor: 37,
		PutExtractor: 27,
		UnlockChest: 20,
		ChestPut: 1,
		Craft: 26,
		Recycle: 18,
		SendBuild: 22,
		GiveWheatWindmill: 30,
		GiveWoodOven: 14,
		GiveFlourOven: 25,
		DropAll: 31,
		Equip: 34,
		Resurrection: 35,
		JoinTeam: 17,
		SendAttack: 36,
		StopAttack: 16,
		Move: 11,
		Focus: 9
	};
	const Stamps = {
		AutoGreenCrown: Date.now(),
		AutoSteal: Date.now(),
		AutoBreadTake: Date.now(),
		AutoBreadPut: Date.now(),
		AutoExtractorTake: Date.now(),
		AutoExtractorPut: Date.now(),
		AutoCraft: Date.now(),
		AutoRecycle: Date.now(),
		AutoSpike: Date.now(),
		AutoWall: Date.now(),
		AutoRed: Date.now(),
		DropSword: Date.now(),
		AutoFire: Date.now(),
		AutoCrown: Date.now(),
		AutoTotem: Date.now(),
		AutoResurrection: Date.now(),
		AutoFarm: Date.now(),
		AutoBridge: Date.now(),
		AutoSeed: Date.now(),
		AutoBuild: Date.now()
	};
	const Timers = {
		HealTimer: 10,
		GaugeTimer: 5
	};
	const Settings = {
		Fly: {
			o: .6,
			e: false
		},
		PutInChest: 10,
		TokenJoiner: {
			enabled: false,
			token: null,
			token_id: null
		},
		PlayerTracers: {
			enabled: false,
			draw: false
		},
		KrakenTracers: {
			enabled: true,
			draw: false
		},
		SandwormTracers: {
			enabled: true,
			draw: false
		},
		PutReidite: {
			enabled: true,
			draw: false
		},
		ShowJoinLeaves: {
			enabled: true,
			draw: false
		},
		PlayerOnTop: {
			enabled: true,
			draw: false
		},
		BoxOnTop: {
			enabled: true,
			draw: false
		},
		Timers: {
			enabled: true,
			draw: false
		},
		ShowHP: {
			enabled: true,
			draw: false
		},
		AutoGreenCrown: {
			enabled: true,
			draw: true
		},
		ColoredSpikes: {
			enabled: true,
			draw: false,
			textures: "1"
		},
		ListEnabledHacks: {
			enabled: true,
			draw: false
		},
		Debugger: {
			enabled: false,
			draw: false
		},
		ExtractorInfo: {
			enabled: true,
			draw: false
		},
		WindmillInfo: {
			enabled: true,
			draw: false
		},
		OvenInfo: {
			enabled: true,
			draw: false
		},
		TotemInfo: {
			enabled: true,
			draw: false
		},
		FurnaceInfo: {
			enabled: true,
			draw: false
		},
		MachineInfo: {
			enabled: true,
			draw: false
		},
		BiggerZoom: {
			enabled: false
		},
		ChestInfo: {
			enabled: true,
			draw: false
		},
		BoxInfo: {
			enabled: true,
			draw: false
		},
		WeatherInfo: {
			enabled: true,
			draw: false
		},
		ShowHoodNames: {
			enabled: true,
			draw: false
		},
		NoFog: {
			enabled: true,
			draw: false
		},
		Roofs: {
			enabled: true,
			draw: false
		},
		Xray: {
			enabled: false,
			draw: true,
			key: "Semicolon",
			keyMode: "press",
			pushToBinds: true
		},
		AutoSteal: {
			enabled: false,
			draw: true,
			key: "KeyQ",
			keyMode: "hold"
		},
		AutoIce: {
			enabled: false,
			draw: false
		},
		AutoRespawn: {
			enabled: false,
			draw: false
		},
		AutoFire: {
			enabled: false,
			draw: true,
			key: "KeyV",
			keyMode: "hold",
			pushToBinds: true
		},
		AutoBuild: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			build: "Roofs",
			pushToBinds: true
		},
		AutoBridge: {
			enabled: false,
			draw: true,
			key: "KeyJ",
			keyMode: "press",
			pushToBinds: true
		},
		AimBot: {
			enabled: false,
			draw: true,
			key: "KeyT",
			keyMode: "press",
			pushToBinds: true,
			angle: null
		},
		AutoResurrection: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "hold",
			pushToBinds: true
		},
		AutoTotem: {
			enabled: false,
			draw: true,
			key: "KeyH",
			keyMode: "press",
			pushToBinds: true
		},
		DropSword: {
			enabled: false,
			draw: true,
			key: "ShiftLeft",
			keyMode: "hold",
			pushToBinds: true
		},
		AutoBook: {
			enabled: true,
			draw: false
		},
		AutoFeed: {
			enabled: true,
			draw: true
		},
		AutoSeed: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			seed: "Auto",
			pushToBinds: true
		},
		AutoCraft: {
			enabled: false,
			draw: true,
			key: "KeyK",
			keyMode: "press",
			last: null,
			pushToBinds: true
		},
		AutoRecycle: {
			enabled: false,
			draw: true,
			key: "KeyL",
			keyMode: "press",
			last: null,
			pushToBinds: true
		},
		AutoExtractorTake: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			pushToBinds: true
		},
		AutoExtractorPut: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			pushToBinds: true
		},
		AutoBreadTake: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			pushToBinds: true
		},
		AutoBreadPut: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			pushToBinds: true
		},
		AutoCrown: {
			enabled: false,
			draw: true,
			key: "KeyF",
			keyMode: "hold",
			pushToBinds: true
		},
		AutoWall: {
			enabled: false,
			draw: true,
			key: "KeyC",
			mode: true,
			keyMode: "hold"
		},
		AutoSpike: {
			enabled: false,
			draw: true,
			key: "Space",
			keyMode: "hold",
			mode: true,
			priority: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
		},
		SmartCraft: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			select: "REIDITE_SPIKE",
			hm: 255
		},
		Spectator: {
			enabled: false,
			draw: true,
			key: "KeyP",
			keyMode: "press",
			speed: .5
		},
		Autofarm: {
			enabled: false,
			draw: true,
			key: "KeyU",
			keyMode: "press",
			angle: null,
			water: false,
			x: null,
			xx: null,
			y: null,
			yy: null,
			sy: null,
			sx: null,
			pushToBinds: true
		},
		AutoSeedG: true,
		AutoUnlock: true,
		AutoExtractorPutMax: 255,
		BreadPutMax: 31,
		WindmillPutMax: 255,
		RoofsOpacity: .6,
		XrayOpacity: .6
	};
	for (const property in Settings) {
		const data = localStorage.getItem(property + "exclusivev3");
		if (data) Settings[property] = JSON.parse(data)
	}
	const ⵠΔΔⲆⲆⵠᐃᐃⵠ = window;
	var ⲆᐃᐃΔΔⵠⵠ = 79;
	if (ⲆᐃᐃΔΔⵠⵠ === 0) ⲆᐃᐃΔΔⵠⵠ = 210;
	var ⲆⵠᐃᐃⲆⲆⵠ = {};
	var ᐃⵠΔⵠⵠΔΔΔⵠ = 250;
	const ⵠᐃᐃΔΔᐃᐃ = 247;
	const ΔΔᐃᐃΔΔⵠᐃⲆ = Math.floor(ⵠᐃᐃΔΔᐃᐃ[ⵠᐃᐃΔΔᐃᐃ.ⵠᐃᐃΔΔᐃᐃ]);
	var ΔΔⵠᐃΔⵠⵠⵠⵠ = 123;
	if (ΔΔⵠᐃΔⵠⵠⵠⵠ > 6) ΔΔⵠᐃΔⵠⵠⵠⵠ = 50;
	var ⲆⲆΔⵠⵠⲆᐃ, ⲆⲆΔⲆᐃᐃΔΔⵠ;
	let ⲆΔΔᐃΔΔⵠ = 117;
	const ⵠᐃⲆΔⵠΔᐃ = 232;
	if (ⲆΔΔᐃΔΔⵠ === ⵠᐃⲆΔⵠΔᐃ) ᐃⵠΔⵠⵠΔΔΔⵠ = 169;
	let ⵠⵠΔΔᐃᐃⵠ = 23;
	ⵠⵠΔΔᐃᐃⵠ.ⵠΔᐃⲆⲆⲆᐃ = 8;
	ⲆⵠᐃᐃⲆⲆⵠ.ᐃⵠΔⵠΔⲆⵠΔⵠ = 7;
	const ⵠΔᐃⵠⲆⲆΔΔᐃ = 168;
	var ⵠΔⲆΔᐃⲆⲆⲆΔ = ⵠΔᐃⵠⲆⲆΔΔᐃ;
	let ⵠⵠⵠΔᐃΔᐃ = 6 + 123;
	let ⵠⲆⵠᐃⲆᐃΔ = 78 - 157;
	var ⵠⲆΔᐃⲆⲆⵠᐃᐃ = 185;
	if (ⵠⲆΔᐃⲆⲆⵠᐃᐃ === 4) ⵠⲆΔᐃⲆⲆⵠᐃᐃ = 95;
	var ΔᐃΔᐃᐃⲆΔ = 82;
	let ᐃᐃⲆⲆⵠᐃΔⲆⲆ = 206 + 76 << 2;
	ΔᐃΔᐃᐃⲆΔ.ΔᐃᐃⲆⲆΔⲆΔΔ = 2;
	var ᐃᐃΔΔΔΔⲆ = {};
	ᐃᐃΔΔΔΔⲆ.ⵠΔΔᐃΔ = 3;
	let ΔᐃᐃⲆΔΔⲆⵠⲆ = {};
	var ⵠⵠᐃⵠᐃⲆⲆΔΔ, ⵠⲆⲆΔⲆᐃΔ;
	ΔᐃᐃⲆΔΔⲆⵠⲆ.ⲆΔⲆᐃΔⵠⵠⵠⵠ = 6;
	var ΔΔⲆᐃΔΔⲆ;
	const ⵠⲆᐃⵠΔΔⲆ = 238;
	const ⵠⵠⲆⲆΔⲆΔ = 94 * 81;
	const ΔⲆΔⲆᐃΔⲆ = Math.floor(ⵠⲆᐃⵠΔΔⲆ[ⵠⲆᐃⵠΔΔⲆ.ⵠⲆᐃⵠΔΔⲆ]);
	var ΔΔᐃⵠΔⲆΔΔⵠ = 8;
	const ⲆⲆⲆΔΔⵠΔᐃⲆ = 157;
	let ⲆⵠⲆⲆⲆᐃⲆΔⲆ = 215;
	let ⲆⵠⲆⲆⲆᐃⲆΔⵠΔΔⲆ = "ffs";
	if (ⲆⲆⲆΔΔⵠΔᐃⲆ === ⲆⵠⲆⲆⲆᐃⲆΔⲆ) ΔΔᐃⵠΔⲆΔΔⵠ = 238;
	let ΔⵠΔΔΔΔⲆ = 131;
	var ΔᐃΔᐃⵠⵠⵠ, ⲆⵠΔᐃⵠΔᐃ, ᐃΔᐃᐃΔⵠΔⲆⲆ, ΔᐃᐃⵠⵠΔⲆ;
	var ⲆⵠⵠᐃⲆⲆⵠ = 203;
	let ᐃⵠΔⵠⲆΔᐃ = ⲆⵠⵠᐃⲆⲆⵠ;
	const ⲆΔⲆᐃⵠᐃΔᐃΔ = function(ΔΔᐃⵠᐃⵠⲆ) {
		let ΔⲆΔⵠⵠᐃΔ = "";
		for (let ΔΔⲆⵠᐃⵠᐃⲆΔ = 0; ΔΔⲆⵠᐃⵠᐃⲆΔ < ΔΔᐃⵠᐃⵠⲆ["length"]; ΔΔⲆⵠᐃⵠᐃⲆΔ++) ΔⲆΔⵠⵠᐃΔ += ⵠΔΔⲆⲆⵠᐃᐃⵠ["String"]["fromCharCode"](ΔΔᐃⵠᐃⵠⲆ[ΔΔⲆⵠᐃⵠᐃⲆΔ] ^ ΔⵠΔΔΔΔⲆ++ % 255);
		return ΔⲆΔⵠⵠᐃΔ
	};
	var ᐃⲆΔΔⲆᐃⵠ = 58;
	var ⲆΔⵠⵠⲆⵠᐃᐃᐃ = 61;
	var ΔⲆⵠⵠΔΔᐃ = 49 * 71;
	if (ⲆΔⵠⵠⲆⵠᐃᐃᐃ >= 2) ⲆΔⵠⵠⲆⵠᐃᐃᐃ = 254;
	let ⲆᐃⵠᐃΔΔΔ = 56;
	var ᐃΔᐃᐃΔⲆᐃⵠⵠ = 233;
	if (ᐃΔᐃᐃΔⲆᐃⵠⵠ === 13) ᐃΔᐃᐃΔⲆᐃⵠⵠ = 132;
	var ΔⲆⲆⵠⲆⵠⲆ = 83;
	var ΔΔΔⵠⲆⵠⵠ = {};
	ΔΔΔⵠⲆⵠⵠ.ⵠΔⵠᐃⵠⲆᐃ = 12;
	if (ΔⲆⲆⵠⲆⵠⲆ === 13) ΔⲆⲆⵠⲆⵠⲆ = 146;
	var ΔⵠΔⵠᐃᐃΔⲆⵠ, ⲆᐃⲆⲆⲆᐃⲆⲆΔ;
	var ΔⲆᐃᐃΔⵠΔ, ΔⵠᐃⲆⲆᐃΔ, ΔⵠⵠΔⵠⵠΔ, ΔΔⵠᐃᐃΔᐃ;
	var ⲆᐃᐃᐃⵠⲆΔ = {};
	ⲆᐃᐃᐃⵠⲆΔ.ᐃᐃᐃⵠⵠⲆᐃ = 14;
	let ⲆᐃⲆᐃᐃᐃⵠⲆⲆ = {};
	ⲆᐃⲆᐃᐃᐃⵠⲆⲆ.ΔⲆΔΔⲆᐃⵠ = 7;
	var ΔΔⵠⵠⲆΔⲆ, ΔΔⲆᐃΔⲆⵠ, ΔΔΔⵠᐃⵠⵠ, ⵠᐃⵠⲆΔⲆΔ;
	var ⲆᐃᐃⵠⵠΔⵠ, ΔⵠΔⲆⲆᐃᐃ, ⵠⵠⵠⲆⲆⲆⵠ;
	var ΔᐃⲆΔⵠΔⵠⲆᐃ = 250;
	if (ΔᐃⲆΔⵠΔⵠⲆᐃ == 1) ΔᐃⲆΔⵠΔⵠⲆᐃ = 80;
	let ΔΔΔⵠⲆΔⵠ = 210 + 184 << 12;
	const ⲆⲆⲆⵠΔⲆⵠⵠΔ = 113 + 119;
	const ⲆⲆΔΔᐃⵠᐃⲆⲆ = 229;
	let ᐃⲆΔⲆⵠⵠⲆ = 17 * 36;
	var ⵠΔᐃᐃΔᐃⵠΔⵠ = 101 + 31;
	var ΔⲆⲆⲆⵠᐃᐃⵠᐃ = 229;
	let ⲆⲆΔⲆΔΔⵠ = 68;
	var ΔⲆᐃⲆⲆᐃΔ = 116;
	var ⵠⵠⲆᐃΔΔΔ = 170;
	if (ⵠⵠⲆᐃΔΔΔ > 5) ⵠⵠⲆᐃΔΔΔ = 181;
	let ᐃΔΔⲆΔᐃΔ = 56 * 136;
	const ⵠⵠΔᐃⲆⲆⲆ = 80;
	var ΔⵠⵠⵠⵠΔΔᐃⲆ = 61;
	var ᐃᐃΔⲆⵠᐃⵠ = 166;
	ᐃᐃΔⲆⵠᐃⵠ.ᐃΔⵠΔⵠⵠΔ = 3;
	if (ⵠⵠΔᐃⲆⲆⲆ == ΔⵠⵠⵠⵠΔΔᐃⲆ) ΔⲆᐃⲆⲆᐃΔ = 118;
	const ΔⲆΔΔᐃⲆΔ = 243;
	if (ⲆⲆΔⲆΔΔⵠ === ΔⲆΔΔᐃⲆΔ) ΔⲆⲆⲆⵠᐃᐃⵠᐃ = 58;
	var ⲆΔⲆΔᐃⵠⲆΔⲆ = 103;
	const ⵠΔᐃᐃΔⵠΔᐃⵠ = 213;
	let ᐃᐃᐃᐃⲆᐃⲆᐃᐃ = 93;
	var ⲆⵠⲆΔⵠΔⵠ, ⲆⵠⵠⵠⵠΔΔ, ⲆΔⲆΔᐃΔᐃ, ⲆᐃⵠⲆᐃⲆⲆⵠⵠ;
	if (ⵠΔᐃᐃΔⵠΔᐃⵠ === ᐃᐃᐃᐃⲆᐃⲆᐃᐃ) ⲆΔⲆΔᐃⵠⲆΔⲆ = 69;
	const ᐃΔᐃΔΔΔᐃ = 89;
	let ⵠᐃΔⲆᐃⲆⲆ = ᐃΔᐃΔΔΔᐃ;
	const ⵠⲆᐃⲆⲆᐃⲆᐃᐃ = 232;
	var ⵠᐃⵠᐃᐃⵠΔ = 135;
	if (ⵠᐃⵠᐃᐃⵠΔ == 14) ⵠᐃⵠᐃᐃⵠΔ = 100;
	const ΔΔᐃᐃⲆⲆⲆ = {};
	ΔΔᐃᐃⲆⲆⲆ.ΔⲆⲆⲆΔⵠⲆ = 7;
	var ᐃⲆⵠⲆᐃΔⲆ;
	let ⵠΔΔΔΔᐃᐃ = ⵠⲆᐃⲆⲆᐃⲆᐃᐃ;
	if (ⲆᐃⵠᐃΔΔΔ > ⲆⲆΔΔᐃⵠᐃⲆⲆ) ᐃⲆΔΔⲆᐃⵠ = 83;
	const ΔⵠⲆⵠΔᐃΔ = 230;
	var ΔᐃⲆΔΔⵠΔ, ⲆⵠΔΔⵠᐃⵠⲆΔ, ᐃᐃⵠⲆⲆⵠⲆᐃⲆ;
	ᐃⲆᐃᐃᐃᐃⵠ = [
		[230, 213, 184, 187],
		[222, 186, 207, 255, 210, 190, 219, 253, 222, 199, 164, 226, 241, 195, 211, 166, 246, 207, 160, 239, 201, 242, 215, 246, 253, 247, 244, 159],
		[250, 151, 239, 202, 254, 240, 251, 198, 249, 251, 213, 194, 205, 231, 231, 199, 215, 245, 136, 139],
		[227, 214, 239, 206, 226, 209, 235, 199],
		[229, 242, 151, 242, 146, 169, 252, 247, 165, 165, 155, 186, 169, 161, 169, 138, 173, 151, 189, 190, 177, 186, 135, 133, 141, 143, 151, 234],
		[184, 187, 224, 227],
		[188, 210, 183, 210, 182, 137, 179, 158, 131, 191, 191, 144, 143, 169, 133, 130, 182, 167, 163, 158, 144, 147, 200, 203],
		[146, 188, 188, 199],
		[152, 206, 196, 135, 100, 64, 63, 62],
		[93, 82, 84, 108, 89, 59, 114, 99, 111, 62, 67, 50],
		[113, 70, 39, 105, 112, 82, 80, 98, 65, 43, 79, 38],
		[69, 112, 72, 47, 121, 112, 31, 30],
		[126, 98, 31, 20, 74, 78, 23, 22],
		[72, 106, 66, 91, 106, 96, 15, 14],
		[86, 88, 15, 4],
		[98, 97, 96, 87, 94, 83, 111, 2],
		[26, 44, 123, 41, 32, 29, 11, 122],
		[18, 36, 38, 56, 46, 11, 28, 35, 53, 25, 3, 110],
		[14, 18, 111, 35, 1, 14, 54, 46],
		[6, 48, 24, 52, 58, 48, 95, 94],
		[62, 34, 48, 14, 12, 62, 9, 86],
		[54, 95, 56, 95, 33, 67, 75, 6, 16, 50, 32, 67, 28, 56, 71, 70],
		[37, 19, 40, 22, 217, 236, 250, 239, 231, 242, 187, 186],
		[234, 187, 191, 242, 214, 213, 192, 255, 245, 252, 199, 174],
		[247, 167, 192, 228, 194, 206, 212, 171, 198, 202, 204, 213, 194, 204, 240, 207, 193, 228, 155, 154],
		[203, 154, 248, 158, 206, 234, 251, 146],
		[212, 198, 143, 142],
		[208, 242, 143, 227, 220, 241, 240, 203, 222, 208, 221, 130],
		[162, 134, 174, 185, 160, 132, 251, 250],
		[146, 158, 255, 161, 174, 255, 156, 163, 134, 135, 152, 153, 133, 231, 239, 163, 187, 158, 227, 174, 134, 138, 235, 239],
		[185, 140, 219, 136, 129, 180, 219, 218],
		[177, 190, 146, 152],
		[136, 128, 168, 156, 148, 166, 167, 206],
		[150, 178, 176, 158, 162, 174, 141, 198],
		[165, 207, 134, 112, 91, 85, 54, 52, 82, 71, 58, 53],
		[91, 103, 115, 122, 84, 86, 94, 106, 92, 121, 85, 109, 118, 123, 81, 45],
		[125, 82, 81, 108, 127, 79, 34, 29],
		[120, 16, 26, 81, 65, 110, 109, 94, 75, 107, 22, 17],
		[119, 111, 18, 13],
		[104, 0, 75, 88, 108, 110, 125, 109, 88, 109, 10, 80, 95, 13, 105, 112],
		[37, 5, 47, 48, 31, 19, 17, 61, 19, 11, 118, 113],
		[20, 124, 55, 60, 8, 10, 25, 7, 15, 1, 25, 104],
		[58, 104, 51, 44, 7, 48, 13, 44, 59, 58, 8, 89],
		[52, 62, 45, 17, 48, 50, 0, 81],
		[9, 41, 3, 4, 43, 37, 74, 69, 17, 55, 74, 69],
		[26, 50, 45, 6, 28, 63, 66, 189],
		[229, 197, 186, 180, 220, 209, 240, 181],
		[232, 221, 190, 246, 233, 201, 201, 229, 245, 213, 255, 252, 241, 209, 194, 165],
		[192, 194, 209, 246, 203, 217, 167, 157],
		[248, 144, 219, 210, 198, 148, 242, 149],
		[240, 152, 146, 214],
		[244, 192, 249, 128, 213, 245, 138, 193, 214, 193, 138, 133],
		[227, 215, 215, 201, 231, 255, 130, 253],
		[152, 240, 187, 180, 159, 145, 242, 248, 158, 155, 246, 241],
		[174, 163, 153, 168, 181, 133, 133, 174, 177, 147, 145, 173, 184, 141, 234, 180, 185, 153, 179, 150, 131, 137, 185, 157, 188, 177, 214, 132],
		[138, 173, 147, 132, 180, 220, 185, 159, 147, 192, 139, 159, 175, 174, 190, 197],
		[160, 200, 194, 137, 158, 204, 57, 114, 88, 82, 57, 56],
		[92, 106, 100, 122, 104, 77, 70, 97, 87, 60, 65, 44],
		[113, 33, 66, 37, 69, 64, 45, 41, 64, 67, 86, 47, 71, 72, 87, 28],
		[123, 116, 106, 21, 71, 127, 114, 69],
		[72, 124, 106, 90],
		[119, 29, 88, 89, 81, 88, 122, 67, 108, 112, 110, 123, 94, 122, 1, 0],
		[93, 13, 44, 52],
		[38, 11, 14, 45, 36, 41, 6, 58, 19, 19, 30, 33],
		[22, 126, 105, 36, 8, 11, 55, 104],
		[50, 0, 109, 50, 0, 12, 6, 45, 60, 50, 54, 10],
		[48, 13, 50, 16, 63, 84, 58, 25, 8, 89, 88, 80],
		[13, 92, 34, 8, 16, 65, 0, 25, 35, 68, 42, 76, 24, 60, 41, 64],
		[29, 76, 194, 242, 227, 219, 213, 184],
		[223, 223, 202, 254, 232, 195, 231, 176],
		[234, 200, 169, 255, 200, 161, 236, 249, 199, 165, 224, 241, 249, 168, 209, 160],
		[205, 200, 149, 145, 237, 230, 226, 220, 197, 202, 238, 156],
		[240, 198, 192, 222, 204, 233, 254, 129, 215, 228, 204, 217],
		[210, 133, 208, 201, 227, 137, 219, 128],
		[220, 248, 150, 180, 152, 240, 150, 170],
		[162, 159, 134, 165, 169, 160, 180, 165, 172, 162, 180, 224, 139, 132, 176, 185],
		[181, 186, 158, 172, 128, 156, 229, 169],
		[189, 237, 182, 209],
		[129, 208, 182, 141, 130, 160, 189, 212],
		[176, 134, 213, 152, 138, 174, 205, 204],
		[145, 158, 162, 130, 148, 176, 190, 147, 160, 170, 193, 192],
		[156, 71, 109, 119, 89, 81, 75, 110, 100, 73, 52, 55],
		[104, 75, 75, 62, 110, 81, 44, 47],
		[114, 67, 32, 99, 77, 64, 83, 83, 77, 89, 44, 83],
		[74, 101, 74, 31],
		[122, 74, 115, 75, 125, 69, 127, 83],
		[72, 107, 85, 70, 74, 97, 12, 15],
		[81, 115, 12, 88],
		[85, 10, 12, 67, 97, 107, 123, 85, 90, 24, 15, 114, 26, 28, 23, 42, 30, 122, 33, 34, 41, 33, 41, 34],
		[45, 7, 23, 102],
		[48, 57, 3, 44, 51, 31, 96, 35, 1, 13, 96, 99],
		[60, 13, 55, 22, 1, 87, 63, 10],
		[62, 63, 39, 90, 10, 59, 84, 27],
		[13, 66, 68, 1, 17, 70, 51, 29],
		[19, 48, 51, 18, 34, 78, 40, 67],
		[38, 178, 184, 247, 225, 233, 211, 236, 227, 201, 180, 183],
		[239, 191, 199, 254, 235, 215, 196, 175],
		[242, 195, 160, 236, 205, 192, 211, 170, 202, 241, 203, 243, 253, 147, 235, 206],
		[193, 227, 243, 203, 195, 233, 148, 151],
		[242, 251, 213, 194, 204, 222, 224, 143],
		[233, 134, 205, 192, 238, 213, 255, 201, 234, 142, 132, 202, 220, 135, 248, 184, 162, 156, 151, 170, 147, 251, 139, 166, 168, 161, 139, 254, 174, 135, 232, 167],
		[138, 230, 236, 160, 182, 234, 181, 182],
		[130, 238, 165, 174, 133, 183, 212, 210, 176, 163, 179, 150, 189, 218, 129, 218],
		[136, 222, 187, 222, 185, 183, 157, 134, 169, 163, 204, 199, 147, 185, 196, 199],
		[161, 187, 187, 206, 89, 80, 63, 62],
		[96, 66, 63, 66, 81, 81, 88, 99, 90, 91, 68, 66],
		[115, 127, 117, 46],
		[117, 39, 64, 34, 123, 81, 80, 119, 127, 46, 83, 34],
		[68, 19, 78, 72, 64, 98, 65, 26],
		[113, 113, 120, 67, 78, 71, 103, 18],
		[82, 3, 6, 14],
		[110, 88, 90, 68, 90, 120, 7, 6],
		[95, 122, 120, 70, 35, 115, 20, 9, 38, 43, 23, 122],
		[18, 46, 119, 118],
		[21, 21, 28, 127, 9, 6, 28, 33],
		[54, 2, 58, 103, 2, 1, 16, 22, 61, 10, 111, 47, 4, 32, 95, 94],
		[61, 87, 14, 15, 11, 2, 36, 29, 54, 42, 59, 82],
		[41, 38, 32, 24, 38, 45, 44, 27, 26, 23, 40, 54, 29, 37, 48, 79, 218, 214, 183, 239, 231, 226, 187, 186],
		[210, 209, 196, 225, 213, 213, 204, 227],
		[243, 163, 254, 165, 206, 196, 171, 170],
		[251, 244, 204, 225, 255, 218, 167, 234, 195, 147, 244, 246, 254, 253, 206, 151],
		[202, 238, 147, 193, 205, 159, 248, 196],
		[212, 246, 139, 196],
		[215, 135, 206, 199, 225, 139, 239, 134],
		[221, 208, 135, 207, 162, 166, 255, 254],
		[158, 247, 144, 247, 158, 142, 166, 191, 150, 149, 190, 185, 178, 188, 132, 131, 142, 184, 140, 173, 130, 129, 139, 230],
		[190, 154, 231, 236],
		[129, 166, 142, 150, 128, 164, 219, 218],
		[140, 174, 211, 189, 186, 168, 160, 187, 148, 185, 184, 131, 150, 152, 149, 202],
		[162, 151, 176, 141, 158, 168, 176, 111, 88, 90, 73, 64, 103, 52, 85, 100],
		[95, 56, 93, 101, 88, 60, 54, 122, 112, 32, 69, 36],
		[119, 81, 46, 112, 67, 93, 77, 119],
		[68, 70, 81, 80, 67, 69, 30, 25],
		[127, 20, 95, 94, 112, 71, 109, 95, 124, 121, 87, 71, 80, 117, 118, 9],
		[86, 91, 97, 66, 99, 98, 106, 1],
		[89, 102, 126, 125],
		[27, 26, 43, 40, 28, 118, 9, 62, 43, 29, 122, 36, 47, 35, 30, 109],
		[53, 10, 29, 56, 54, 61, 17, 54, 3, 13, 110, 108],
		[4, 108, 55, 12, 56, 80, 16, 89],
		[7, 49, 11, 29],
		[60, 34, 33, 26, 15, 57, 3, 10, 43, 35, 78, 73],
		[35, 68, 33, 17, 40, 34, 53, 6, 39, 41, 78, 233, 227, 202, 232, 185],
		[231, 193, 209, 186, 211, 221, 252, 177],
		[239, 201, 227, 229, 203, 199, 227, 226, 244, 193, 163, 165],
		[192, 168, 162, 239, 255, 173, 214, 157],
		[192, 245, 146, 204, 255, 148, 241, 251, 243, 253, 158, 199, 247, 246, 229, 192, 211, 223, 208, 137],
		[214, 241, 241, 193, 227, 237, 142, 140, 233, 211, 134, 171, 155, 147, 254, 249],
		[160, 146, 130, 245],
		[170, 249, 153, 160, 174, 143, 242, 237],
		[139, 133, 230, 191],
		[143, 228, 129, 232, 141, 141, 183, 175, 191, 153, 179, 154, 187, 181, 173, 146, 135, 139, 181, 146],
		[186, 189, 222, 220, 160, 148, 165, 178, 146, 156, 185, 156, 144, 167, 202, 197],
		[160, 173, 169, 151],
		[158, 204, 78, 105, 96, 68, 81, 56],
		[95, 112, 53, 52],
		[105, 57, 66, 116, 84, 88, 70, 100],
		[118, 84, 66, 33, 114, 82, 82, 113, 121, 41, 74, 110, 127, 72, 21, 77],
		[120, 17, 114, 21, 116, 112, 80, 69, 72, 124, 122, 88, 74, 106, 122, 4, 97, 100, 101, 8],
		[100, 90, 64, 79, 99, 99, 109, 15, 112, 122, 6, 56, 33, 46, 2, 112],
		[19, 116, 26, 48, 43, 28, 121, 35],
		[45, 34, 6, 57, 8, 18, 105, 104],
		[3, 18, 97, 19, 14, 55, 14, 9],
		[61, 108, 50, 24, 0, 81, 16, 9],
		[5, 10, 62, 3, 8, 89, 89, 24, 52, 56, 62, 65],
		[43, 30, 34, 27, 23, 32, 77, 40, 35, 35, 46, 18],
		[39, 18, 198, 235, 227, 177, 224, 252, 228, 180, 222, 252, 208, 206, 194, 251, 236, 200, 169, 232],
		[193, 196, 165, 253, 204, 165, 205, 164],
		[203, 195, 214, 228, 199, 199, 204, 226, 198, 244, 254, 200, 252, 255, 225, 148],
		[243, 197, 250, 157, 202, 232, 137, 196],
		[209, 244, 216, 192, 236, 192, 133, 132],
		[222, 243, 246, 213, 220, 209, 142, 177, 166, 132, 168, 179, 164, 160, 245, 244],
		[168, 156, 245, 166, 148, 158, 237, 236],
		[177, 155, 158, 163, 178, 144, 225, 233, 191, 131, 158, 177],
		[191, 152, 140, 143, 131, 162, 217, 216],
		[132, 138, 174, 157, 176, 186, 209, 208],
		[141, 221, 182, 133, 145, 180, 140, 153],
		[172, 176, 148, 131, 153, 188, 132, 149, 155, 81, 60, 63],
		[96, 55, 79, 108],
		[100, 79, 79, 115, 104, 62, 88, 51],
		[85, 125, 40, 103, 119, 92, 88, 43],
		[117, 43, 91, 118, 121, 123, 32, 35],
		[72, 101, 16, 111, 112, 108, 119, 22, 68, 110, 99, 70, 72, 116, 123, 66, 76, 3, 96, 15],
		[82, 108, 103, 90, 85, 105, 4, 7],
		[89, 15, 127, 14, 94, 23, 120, 55, 32, 51, 120, 123],
		[37, 122, 124, 35, 17, 27, 23, 56, 44, 61, 7, 99, 49, 57, 45, 32, 14, 15, 8, 103],
		[57, 11, 100, 53, 62, 55, 59, 87],
		[1, 87, 39, 14, 62, 90, 5, 90, 14, 61, 80, 83],
		[13, 66, 68, 24, 17, 70, 64, 70, 45, 32, 17, 74, 25, 43, 43, 11, 27, 209, 188, 191],
		[224, 233, 211, 242, 229, 187, 211, 230, 218, 190, 245, 230, 236, 163, 220, 175],
		[242, 195, 160, 227, 205, 192, 211, 207, 193, 196, 245, 174],
		[253, 231, 231, 215, 249, 151, 243, 206, 253, 154, 252, 151],
		[201, 193, 235, 156, 206, 231, 213, 218, 215, 243, 140, 207],
		[212, 139, 239, 211, 226, 228, 247, 199, 230, 152, 170, 255],
		[161, 246, 240, 176, 164, 143, 159, 191],
		[169, 139, 244, 164, 150, 136, 131, 162, 177, 230, 225, 235],
		[141, 128, 177, 182, 130, 171, 224, 227],
		[189, 167, 216, 136, 130, 147, 216, 219],
		[191, 217, 208, 219, 137, 130, 175, 158, 141, 151, 204, 207],
		[151, 153, 153, 154, 147, 143, 196, 199],
		[162, 173, 192, 195],
		[90, 51, 84, 51],
		[93, 98, 59, 58],
		[107, 65, 64, 103, 86, 96, 98, 59],
		[114, 70, 43, 33, 78, 67, 68, 97],
		[65, 43, 98, 45, 81, 103, 87, 34],
		[67, 76, 78, 77, 69, 109, 119, 26],
		[123, 124, 120, 102, 126, 124, 19, 18],
		[84, 3, 116, 74, 86, 82, 11, 10],
		[98, 11, 108, 11, 105, 80, 104, 69, 35, 6, 123, 54, 39, 119, 16, 14, 18, 30, 12, 32, 22, 21, 7, 114],
		[50, 6, 4, 59, 55, 102, 0, 46, 2, 15, 8, 55, 57, 21, 15, 98],
		[4, 41, 14, 20, 62, 52, 91, 90],
		[59, 5, 36, 59, 56, 10, 83, 82],
		[41, 67, 75, 6, 22, 24, 32, 29, 28, 62, 44, 16],
		[38, 16, 18, 12, 228, 198, 212, 250],
		[229, 194, 208, 247, 210, 187, 226, 187],
		[237, 218, 187, 250, 202, 201, 216, 218, 206, 194, 250, 249, 249, 209, 203, 166],
		[253, 213, 212, 243, 250, 198, 159, 158],
		[253, 253, 244, 209, 241, 206, 151, 150],
		[205, 245, 224, 224, 233, 228, 134, 142],
		[214, 242, 218, 194, 226, 239, 222, 203, 230, 245, 236, 208],
		[165, 128, 255, 254],
		[167, 246, 148, 175, 172, 129, 156, 177],
		[175, 255, 166, 191, 138, 191, 131, 238],
		[141, 141, 156, 189],
		[129, 234, 140, 162, 191, 239, 231, 166],
		[186, 176, 223, 222],
		[178, 178, 138, 146, 140, 173, 130, 169, 143, 131, 164, 135, 149, 160, 207, 206],
		[151, 199, 154, 153, 154, 158, 199, 198],
		[159, 144, 168, 106, 101, 67, 62, 57],
		[103, 65, 62, 102, 68, 94, 74, 49],
		[110, 60, 73, 34, 75, 67, 46, 41],
		[113, 81, 65, 98, 125, 91, 38, 33],
		[71, 44, 73, 16, 119, 101, 79, 80, 127, 119, 26, 21],
		[74, 109, 18, 86, 76, 118, 125, 64, 83, 0, 7, 9],
		[111, 88, 125, 78, 91, 107, 6, 1],
		[108, 83, 83, 46, 23, 21, 47, 49, 33, 2, 30, 120, 24, 18, 1, 53, 20, 22, 36, 109],
		[8, 10, 17, 35, 15, 1, 98, 51, 8, 104, 51, 44, 63, 25, 14, 93],
		[2, 81, 33, 23, 4, 49, 41, 4],
		[49, 91, 82, 6, 15, 92, 23, 3, 43, 37, 61, 68],
		[22, 68, 78, 73, 26, 23, 53, 16],
		[39, 19, 7, 246, 227, 177, 202, 185],
		[221, 183, 190, 241, 237, 194, 217, 252, 213, 188, 197, 248, 242, 160, 198, 169],
		[240, 210, 222, 165],
		[250, 247, 162, 172, 196, 198, 205, 204],
		[243, 229, 229, 148, 255, 247, 154, 149],
		[251, 255, 154, 253, 251, 232, 196, 141],
		[232, 128, 203, 220, 212, 225, 134, 212, 227, 251, 134, 129],
		[231, 249, 233, 170, 163, 240, 145, 168, 147, 144, 141, 130, 152, 248, 242, 184, 174, 137, 246, 165, 139, 133, 230, 228],
		[182, 145, 238, 235],
		[186, 180, 176, 225],
		[190, 237, 137, 137, 130, 209, 177, 157, 132, 177, 210, 134],
		[179, 216, 189, 220, 191, 185, 151, 156, 147, 165, 165, 129, 145, 190, 185, 187, 156, 172, 169, 148, 167, 206, 53, 105, 96, 84, 81, 56],
		[103, 80, 61, 126, 110, 83, 93, 48],
		[109, 60, 66, 104, 115, 68, 33, 123, 119, 64, 66, 44],
		[75, 118, 112, 115, 77, 72, 21, 17, 108, 73, 118, 103, 69, 73, 98, 65, 79, 122, 17, 16],
		[77, 29, 102, 1, 102, 100, 88, 70, 84, 112, 84, 67, 96, 108, 114, 75, 92, 82, 18, 59],
		[27, 20, 60, 50, 39, 0, 13, 116],
		[41, 121, 26, 33, 20, 14, 109, 108],
		[49, 96, 6, 44, 52, 101, 44, 53, 12, 28, 10, 105, 58, 30, 93, 92],
		[1, 81, 50, 22, 60, 48, 38, 89],
		[9, 6, 58, 30, 52, 56, 54, 11, 40, 34, 73, 72],
		[23, 32, 77, 12, 32, 35, 54, 37, 31, 40, 210, 177, 227, 194, 185, 184],
		[223, 208, 189, 231, 232, 204, 217, 176],
		[236, 189, 165, 250, 241, 254, 173, 226],
		[242, 165, 222, 233, 254, 218, 161, 160],
		[196, 199, 200, 214, 192, 144, 238, 149, 197, 208, 149, 148],
		[240, 252, 153, 197, 247, 194, 200, 221, 232, 242, 137, 136],
		[213, 132, 234, 209, 217, 213, 237, 128],
		[221, 141, 150, 180, 152, 130, 249, 248],
		[159, 170, 158, 255, 171, 156, 154, 180, 159, 252, 134, 168, 182, 190, 130, 128, 180, 160, 229, 228],
		[128, 147, 150, 181, 186, 239, 140, 149, 187, 180, 128, 137],
		[132, 213, 221, 157, 176, 179, 162, 151, 183, 184, 148, 157],
		[161, 164, 193, 197, 187, 163, 162, 187, 153, 149, 182, 149, 155, 81, 60, 63],
		[96, 105, 83, 114, 101, 59, 83, 102, 90, 62, 101, 126, 109, 87, 64, 47],
		[114, 38, 67, 35, 116, 111, 36, 39],
		[120, 113, 36, 47, 125, 77, 112, 31],
		[66, 115, 20, 78, 125, 26, 127, 126, 73, 123, 20, 88, 75, 119, 89, 66, 81, 89, 81, 112, 85, 85, 127, 83, 89, 123, 107, 85],
		[102, 45, 45, 55, 25, 5, 120, 123],
		[30, 31, 7, 60, 40, 59, 112, 115],
		[22, 7, 27, 40],
		[49, 3, 3, 34, 53, 107, 19, 111],
		[63, 110, 27, 46, 59, 39, 13, 23, 57, 19, 88, 91],
		[62, 90, 47, 25, 9, 45, 80, 83],
		[12, 67, 55, 11, 23, 53, 72, 75],
		[20, 21, 47, 14, 25, 79, 39, 18, 45, 216, 219, 238, 225, 234, 215, 203, 230, 208, 199, 186, 209, 219, 184, 226, 236, 247, 172, 175],
		[197, 195, 249, 227, 243, 220, 220, 168, 202, 196, 215, 231, 198, 248, 202, 159],
		[251, 149, 156, 209, 198, 255, 157, 151],
		[200, 159, 255, 216, 204, 241, 140, 143],
		[233, 243, 227, 132, 214, 239, 247, 214, 238, 251, 209, 138, 229, 151, 185, 145, 154, 156, 151, 182, 165, 191, 244, 247],
		[170, 254, 155, 251, 158, 226, 232, 185, 137, 133, 232, 235],
		[178, 140, 144, 231],
		[184, 148, 151, 178, 187, 141, 183, 151, 135, 161, 183, 138, 189, 133, 175, 219, 137, 164, 188, 211],
		[141, 194, 196, 158, 144, 154, 191, 128, 148, 159, 196, 199],
		[154, 206, 171, 203],
		[99, 108, 84, 107, 94, 77, 106, 83, 108, 78, 76, 59, 86, 92, 51, 50],
		[74, 127, 88, 127, 78, 77, 102, 123],
		[65, 43, 114, 115, 127, 118, 88, 47],
		[66, 19, 23, 72, 71, 72, 96, 73, 75, 26, 120, 67, 79, 67, 127, 18],
		[81, 102, 7, 94, 86, 66, 11, 10],
		[109, 84, 108, 85, 110, 101, 86, 72],
		[26, 25, 8, 58, 38, 118, 15, 122],
		[17, 123, 50, 61, 47, 127, 24, 30, 9, 9, 0, 60],
		[53, 2, 99, 60, 2, 1, 50, 11, 6, 58, 99, 98],
		[1, 57, 48, 15, 6, 61, 43, 90],
		[12, 62, 95, 24, 14, 95, 32, 29],
		[42, 41, 26, 4, 21, 45, 60, 27, 27, 14, 71, 70],
		[30, 42, 56, 8, 227, 198, 238, 246, 222, 242, 187, 186],
		[236, 206, 220, 191, 232, 200, 200, 252, 241, 198, 246, 230],
		[192, 167, 220, 230, 194, 206, 212, 171],
		[253, 202, 207, 162],
		[250, 230, 155, 201, 192, 242, 151, 203, 202, 199, 251, 150],
		[206, 234, 194, 218, 234, 231, 224, 197],
		[226, 226, 218, 194, 220, 253, 247, 194, 237, 229, 244, 198, 153, 153, 169, 254],
		[166, 146, 144, 189, 171, 251, 140, 165, 150, 156, 243, 242],
		[132, 134, 148, 227, 181, 148, 235, 234]
	];
	var ⵠᐃⲆΔΔ, ΔⲆΔΔᐃᐃΔ, ΔⲆᐃΔⲆⲆⵠΔΔ;
	var ᐃᐃᐃΔᐃⵠⵠ = 235 * 133;
	var ΔᐃⲆᐃΔⵠⲆ = 38;
	let ᐃⵠᐃΔⵠᐃΔ = 140;
	const ⵠⵠⵠᐃⲆⲆᐃ = 60;
	if (ᐃⵠᐃΔⵠᐃΔ == ⵠⵠⵠᐃⲆⲆᐃ) ΔᐃⲆᐃΔⵠⲆ = 100;
	let ⲆᐃΔⵠⲆⲆᐃᐃⲆ = {};
	ⲆᐃΔⵠⲆⲆᐃᐃⲆ.ΔᐃΔᐃΔᐃⵠ = 10;
	var ⲆⵠⵠⲆᐃΔᐃᐃᐃ = 80 + 181;
	let ΔΔᐃΔΔᐃⵠⵠⲆ = 40 + 76 << 2;
	let ᐃⵠᐃⵠᐃΔΔ = 52;
	const ᐃⲆΔᐃΔⲆΔ = 154 + 137 << 14;
	var ⲆⵠᐃⲆᐃᐃᐃ;
	for (let ΔΔⲆⵠᐃⵠᐃⲆΔ = 0; ΔΔⲆⵠᐃⵠᐃⲆΔ < ᐃⲆᐃᐃᐃᐃⵠ["length"]; ΔΔⲆⵠᐃⵠᐃⲆΔ++) ᐃⲆᐃᐃᐃᐃⵠ[ΔΔⲆⵠᐃⵠᐃⲆΔ] = ⵠΔΔⲆⲆⵠᐃᐃⵠ["atob"](ⲆΔⲆᐃⵠᐃΔᐃΔ(ᐃⲆᐃᐃᐃᐃⵠ[ΔΔⲆⵠᐃⵠᐃⲆΔ]));
	var ΔⲆᐃⵠᐃΔⲆⵠΔ = 21;
	var ⵠᐃⲆⲆΔΔⲆ = 183 - 241;
	if (ΔⲆᐃⵠᐃΔⲆⵠΔ == 6) ΔⲆᐃⵠᐃΔⲆⵠΔ = 182;
	var ⵠΔⵠᐃᐃᐃΔ = 208 - 174;
	const Δ = ["#816511", "Grab herum um Dreck, Eis und Sand zu bekommen", "Building method: Grid. Press G to change", "px", "#67766F", "#86d4e0", "score", "MADBalgouthi", "gw", "#281A49", "#c3be9a", "#141414", "#ac222a", "000_010_000", "#4C3B19", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "#bfb360", "#523e26", "#123b3f", "claim_reward_", "#2b7c57", "Chapka", "Building Damage: 4", " BACK TO THE GAME", "#041c21", "You are the king of crabs!", "gm", " Collect 1 dragon heart", "Daño para estructuras: 1", "Food: 10", "#B6222A", "Peut aussi récupérer des minéraux", "black", "#347f93", " Open 5 treasure chests", "Durability: 1000", "#25c5d6", "#1678a2", "010_110_000", "nickname_input", "Bueno para destruir estructuras", "#f9efeb", "#44301b", "application/x-www-form-urlencoded", "Uuunnnggg...", "serverAddressInput", "Продолжительность: 8 дней", "#242330", "opacity", "inv_shop", " Be peaceful", "#3A2A0D", "#adbcb5", "#107746", "#3dc4c0", "#83ddd4", "Pomocny w niszczeniu budowli", "Essen: 100", "Wytrzymałość: 1000", "Easter Egg", "#BB0000", "playing", "cave o chão para pegar terra, areia e gelo", "#C98435", "#313041", "#123d38", "de", "spectator", "#53A4D5", "#7f6d52", "Anyone want to play?", "#8359d3", "Możesz także zdobyć minerały", "Wytrzymałość: 2000", "#89d1d4", "#5cccc4", "#c27add", "#63c9d6", "#2b6664", "account_nickname_input", "Защищает от холода вне воды.", "#B26F31", "white", "#A89F67", "black", "#485e66", "#113f3c", "black", "Lifetime: 8 days", "qwerty_ing", "#564021", "#136167", "#432516", "#FFFFFF", "You can not attack when you use it", "starve_quality", "&userid=", "Relax in this confortable bed", "#1f5453", "middle", "rgba(255, 255, 255, 0)", "011_111_011", "Uuunnnggg", "#C6AF81", "#83827e", "011_011_011", "fo", "Урон по строениям: 1", "Starve.io", "#07393d", "#7d5234", "dano: 2", "Damage: 2", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16", "Haltbarkeit: 700", "#328587", "#29aaa1", "Starve.io ", "_number", "#57442a", "000_111_011", "#1d051e", "010_011_000", "typequest", "input_ratio", "110_111_011", "#214C4B", "#042b30", "nickname_block", "#0a2f2b", "#163A3A", "010_111_110", "#efd435", "time_finished_", "bread_6", "Durabilité: 2000", " Constraints", "#2b9390", "pos", "px Baloo Paaji", "Animals Defense: 13", "starve_quests", "shop_starterkit", "#1b170c", "#D8DC74", "#2b280a", " you can only hit people who are flying too", "#785f4c", "#e0f2f6", "#09373F", "#1f4948", "inline-block", "#3f332a", "#ffffff", "010_010_010", "Food: 20", "re", "#9b2b25", "claim_rewards", "_trad_number", "2d", "000_110_000", "white", "gapi", "#c4a23a", "#1d1d22", "Прочность: 1000", "They can't hit you and you can't hit them", "110_111_111", "#674C2A", "#262114", "getAuthResponse", "Players Defense: 4, Animals Defense: 16", "#764eb5", "Haltbarkeit: 2000", "#5f6061", "010_111_010", "#092b29", "Damage: 30", "Nützlich um Gebäude zu zerstören", "canvas", "Oh, yeah? Is there crab in the crab sticks?", "#fff", "survive20min_3", "starve_info_box", "You will be cured faster", " : ", "Allow you to calm crabs, and heal them", "#f4efc6", "starve_cancel", "011_111_110", "#3d2a6e", "Content-Type", "black", ".md-languages label button", "Lebenszeit: 8 Tage", "servselect", "Damage: 20", "Utile pour détruire les bâtiments", "111_111_010", "#2a2938", "#8a938e", "Building method: Free. Press G to change", "On-Hit Damage: 3", "#030d14", "010_011_011", "#120202", "#394841", "#8c29aa", "timeremain_", "#ee593d", "Widget", "Pixelbitie", "#1f773d", "Dig the ground to gather dirt, ice, and sand", "#75827D", "#74ede6", "#7C5A29", "plm", "Score", "011_111_010", "útil para destruir construções", "Durability: 2000", "home_craft", "#46554D", "Cactus", "También puedes conseguir minerales", "111_111_011", "#77371f", "000_110_110", "#124949", "init", "Durabilité: 1000", "Comida: 100", "darkred", "id", "black", "round", "treasure_chest_4", "#083326", "You feel a great power emanating from this orb", "LAVA", "&region=", "iblk", "#d45ce5", "#0c0c0d", "#614627", "#043c37", "upfiz", "Sushui", "#263947", "Damage: 24", "#174a51", "killdragon_1", "#d7990c", "XPayStationWidget", " Claim rewards", "play", "000_111_110", "cursor", "#163a3a", "Durability: 400", "#e9dad9", "Obrażenia do budowli: 1", "Haltbarkeit: 1000", "#a08f47", "#1a7961", "You are less cold, less thirsty, and less hungry", "dw", "#afac98", "cancel_sure_delete", "Прочность: 2000", "#B56D18", "Daño: 2", "#462966", "011_011_010", "#58645F", "#c4bc51", "cs", "Communist", "Damage: 3", "#dfd1cb", "#e6636a", "010_111_011", "Survive without losing life", "#574122", "#184747", "#000", "#EBF2F0", "destination-out", "amethyst_2", "#b29e4d", "#747471", "#877d36", "#665329", "#0e3838", "#86d0d1", "#e8e8e8", "#a33e2b", "010_110_110", "Défense: 4, Défense contre animaux: 16", "#493e26", "time", "rewardquest", "#200333", "#382e19", "event", "#939995", "Crab Claw", "#555555", "Crabs follow you", "fod", "#73dde5", "#554139", "white", "#24878f", "#5E3C10", "#133a2b", "#939393", "Dégâts: 2", "#0F3A24", "#b864d6", "Emerald Machine", "durabilidade: 2000", "#af59cd", "#4c3a15", "#115E60", " Share on Facebook", "Players Defense: 4", "#596560", "comida: 100", "#5cc5ce", "Totem", "000_110_010", "#0a4049", "Sandwich", "#95d5d8", "111_111_110", "Réchauffe en dehors de l'eau et dans l'hiver", "#a7983c", "#252525", "auth2", "#A9D6D3", "#d2c77b", "WINTER", "audio/ambience.mp3", "Time Remaining", "stop", "000_111_000", "#fef4f4", "#58452b", "#be8d50", "#1a4935", "000_011_000", "110_110_110", "Czas życia: 8 dni", "high_ing", "#092813", "pizza wa", "quit_chronoquest", "#8255b5", "isl", "#EFE4B4", "_blank", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16", "You can buy items on the shop in the next game with your points", " Reward", "#3fc9c9", "Crab Spear", "none", "#2E85A0", "Chrono Quests", "000_011_011", "#C1C0C0", " Collect 100 bread in deep winter", "starve_mapping", "Du kannst auch Mineralien bekommen", "Damage: 1", "active", "Wytrzymałość: 700", "mousedown", "011_011_000", "Durabilidad: 700", "FOREST", "#7d6144", "You can also gather minerals", "#031619", "GET", "#0F464C", "#e2cf27", "você também pode pegar minerais", "#000000", "#1F343F", "#187484", "source-over", "#87d2e6", "#EAEAEA", "starve_safe", "volume", "durabilidade: 1000", "#bbbbbb", "name", "#252B28", "#e45936", "Так же вы можете получить ресурсы", "#654320", "#111316", "#032428", "111_111_000", "#3e3c25", "Creuse la terre, le sable et la neige", "111_111_111", "defesa de jogadores: 4, defesa de animais: 16", "#280e09", "#0b3432", "110_110_000", "FB", "#1e2021", "#b3e0e3", "eject_member", "011_111_000", "#0a2728", "#388AC7", "110_111_010", "010_010_000", "Hält dich warm außerhalb von Wasser und Winter", "#73583e", "#b29c32", "string", "#ddcf8a", "lock_team", "Копайте землю, чтобы получить грязь, лед и песок", "black", "#1a4545", "#077b49", "#43aa82", "110_110_010", "DESERT", "#4c3b19", "#34255d", "#b7252c", "#322413", "object", "timeremainingquest", "#c7a726", "team_box", "#c26de0", "#454545", "#032b23", "points", "buy_kit", "dano em construções: 1", "#54a4ba", "#68622D", "#47341d", " Share on Twitter", "#9baaa3", "000_111_010", "mouseup", "fade", "#c67933", "#C09D6F", "Game", "eogito", "#2A8B9B", "010_111_111", "Durée de vie: 8 jours", "Durability: 700", "Защита от игроков: 4, Защита от животных: 16", "#d588f1", "Damage: 5", "#0d2e33", "000_011_010", "#342C7C", "#29997c", "Building Damage: 1", "low_ing", "#a9e4ed", "recipe_craft", "Crab sticks", "When you are flying,", "kit", "#21112D", "sw", "#082b22", "Damage: 4", "#43b5af", "#1f343f", "Урон: 2", "dont_hit_5", "</div>", "CLAIM REWARD!", "#0b2326", "winter_7", "Cava para conseguir tierra, arena y hielo", "#072824", "110_111_000", "Прочность: 700", "forest", "#15514f", "#c1b06b", "Schaden an Gebäuden: 1", "#b15ecf", "#EDCE4F", "Jedzenie: 100", "Winter", "Useful to destroy buildings", "click", "Crab claws can also be eaten", "010_110_010", "#e7dc8f", "aloner", "Birth: 4min", "Taco4Life", "Bed", " Gather 1 amethyst", "Используется для разрушения зданий", "send", " After 1 day, survive in winter", "#0a2d18", "#281C08", "Warm outside water and in winter", " QUIT", "starve_aliasing", "Durabilidad: 2000", "Days survived", "la", "#660000", "#232828", "#0e3022", "Durabilité: 700", "#634828", "#b2d4d1", "CrysTal", "#211108", "010_111_000", "110_111_110", "#183f3f", "durabilidade: 700", "#171a19", "#182935", "Te calienta en invierno y fuera del agua", "img/avatar-player14.png", "#096d41", "wtb", "constraintquest", "#083b3a", "#eda80d", "nu", "000_111_111", "Crab Helmet", "#c04933", "#A37943", "#073030", "000_010_010", "#0a0b0c", "#123335", "mousemove", "#4d4a2e", "#0B6A84", "#FFF", "010_011_010", "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.", "game_body", "#e4efe8", "#C0BF55", "011_111_111", "#6a7570", "Durabilidad: 1000", "Ciepło w i poza zimą", "#A5A244", "'Baloo Paaji', sans-serif", "Schaden: 2", "#4d2d14", "#9E8456", "#59c9c0", "Kill", "#cd98e5", "#ff0000", "Damage: 14", "azerty_ing"];
	const ᐃⵠΔΔⵠ = 273 - 15 - 1 - 2;
	const ⵠᐃΔⵠⲆ = 1223 - 662 - 535 - 6 - 1;
	const ⵠⲆΔⲆΔ = -2436 + 50 + 782 + 721 + 185 + 413 + 152 + 127 + 12 + 3 + 2 + 7;
	const ΔᐃⲆⲆⲆ = 15;
	const Δⵠᐃᐃ = 2;
	const ᐃⲆᐃΔⵠⲆΔ = -8;
	const ⲆⵠᐃⵠⲆ = true;
	const ⲆⲆΔᐃⵠ = undefined;
	const ᐃⵠⵠᐃⵠⲆᐃ = -2408 + 79 + 1697 + 2367 + 126 + 5 + 10 + 32 + 7 + 5;
	const ⲆⲆᐃᐃⵠ = ⲆⵠᐃⵠⲆ;
	const ⲆⵠⲆΔᐃ = false;
	const ᐃᐃΔⲆⲆⵠⵠ = -4;
	const ⵠΔᐃⲆⲆⵠⵠ = 18 - 1;
	const ΔᐃΔⲆⵠΔΔ = 1142 - 42 - 5 - 14 - 1;
	const ᐃⵠⲆⵠⲆΔΔ = 1;
	const ᐃΔᐃⵠⵠⲆᐃ = 0;
	const ⵠⲆⵠᐃⲆΔΔ = 292 - 2 - 14 - 11 - 9;
	const ΔᐃⲆΔᐃΔⵠⵠⵠ = 1 << 0;
	const ⲆⲆᐃᐃᐃ = -2175 + 1651 + 248 + 162 + 101 + 26 + 3 + 4;
	const ⲆΔⵠⵠᐃⵠΔ = 1 << 1;
	const ΔΔⲆΔΔ = 14;
	var ΔⲆΔᐃⵠᐃⲆ = ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].acos;
	ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].acos = ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].asin;
	ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].asin = ΔⲆΔᐃⵠᐃⲆ;
	var ΔⵠΔᐃΔᐃⲆ = ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].cos;
	ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].cos = ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].sin;
	ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].sin = ΔⵠΔᐃΔᐃⲆ;
	const ΔⵠᐃΔΔⲆᐃ = 1 << Δⵠᐃᐃ;
	const ΔⲆᐃⵠⵠ = 100;
	const Ⲇᐃᐃⵠⵠ = 9;
	const ⲆΔⲆᐃⵠ = 10;
	const ⲆⵠᐃΔᐃ = 6;
	const ΔⲆΔᐃΔ = -2674 + 1767 + 436 + 337 + 82 + 63 + 1;
	const ΔⵠⲆ = 1;
	const ᐃⲆⲆᐃΔ = 16;
	const ⲆᐃⲆⵠⲆ = -1848 + 1763 + 36 + 19 + 15 + 13 + 5 + 1 + 3 + 1;
	const ΔⵠⵠΔᐃ = 14 - 1;
	const ᐃⵠⲆⵠ = 3;
	const ⵠΔΔΔ = 6 - 1;
	const ᐃⲆΔⲆᐃⵠΔ = ⲆⵠᐃΔᐃ;
	const ⵠΔⵠᐃⲆᐃΔ = ΔⵠⲆ * 2048;
	const ⵠⵠᐃΔΔ = -1355 + 277 + 2 + 537 + 81 + 307 + 37 + 80 + 16 + 17 + 10 + 2;
	const ΔᐃΔΔ = -509 + 126 + 240 + 142 + 5;
	const ⵠᐃᐃⲆⵠ = -2456 + 995 + 235 + 521 + 29 + 344 + 154 + 184 + 1;
	const ᐃⲆᐃⵠΔ = ⲆⵠᐃⵠⲆ;
	const ΔᐃΔ = 0;
	const ⲆⲆⲆⲆⲆⵠᐃ = ΔⵠⲆ << ΔⲆΔᐃΔ;
	const ⵠΔⲆⲆⲆⵠⲆ = 16384 * 1;
	const ΔⵠⲆΔⵠΔΔ = ΔᐃΔ;
	const ⵠᐃΔ = ΔᐃΔ;
	const ⵠΔΔ = ΔⵠⲆ;
	const ΔⵠΔΔΔ = ⵠᐃΔⵠⲆ;
	const ⲆΔⲆᐃᐃΔΔ = ⲆᐃⲆⵠⲆ;
	const ΔᐃⵠΔⲆⵠⵠ = {};
	const ᐃᐃⲆᐃᐃᐃᐃ = {};
	ΔᐃⵠΔⲆⵠⵠ["get"] = function(ⲆΔΔⲆᐃᐃᐃ, ΔⲆᐃΔΔΔⲆ) {
		if (ΔⲆᐃΔΔΔⲆ !== "ΔᐃⵠΔⲆⵠⵠ") {
			const ΔᐃⵠΔⲆⵠⵠ = function() {
				ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]]("mousemove", (function() {
					ΔᐃⵠΔⲆⵠⵠ()
				}))
			};
			ΔᐃⵠΔⲆⵠⵠ()
		}
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ["Reflect"]["get"](...arguments)
	};
	const ⵠⵠⵠᐃⲆⵠΔΔΔ = new ⵠΔΔⲆⲆⵠᐃᐃⵠ["Proxy"](ᐃᐃⲆᐃᐃᐃᐃ, ΔᐃⵠΔⲆⵠⵠ);
	const ⵠⲆᐃᐃᐃΔΔ = ⵠⵠⵠᐃⲆⵠΔΔΔ.ΔᐃⵠΔⲆⵠⵠ;
	const ⵠⲆᐃᐃⲆᐃⲆ = ΔᐃΔΔ;
	const ⵠᐃΔⵠᐃ = ΔⲆΔᐃΔ;
	const ΔⲆΔⵠⵠΔᐃ = 12;
	const ᐃⵠⲆᐃⵠᐃᐃ = ᐃⲆⲆᐃΔ;
	const ᐃⲆⲆⵠΔΔⵠ = ΔⲆΔᐃΔ;
	const ⵠΔⲆ = ΔⵠⲆ;
	let ΔΔⲆⲆᐃⵠᐃ = ⲆⲆΔᐃⵠ;
	let ⲆᐃᐃⲆⲆΔⵠ = ⲆⲆΔᐃⵠ;
	let ΔᐃΔᐃⵠΔᐃ = undefined;
	let ⵠΔᐃⵠᐃ = undefined;
	let ⲆΔⲆⵠⲆⲆⲆ = ⲆⲆΔᐃⵠ;
	const ⲆⵠⵠⵠⲆ = ⲆⵠᐃΔᐃ;
	const ⵠⵠᐃᐃⲆ = ΔᐃⲆⲆⲆ;
	let ⵠⵠⵠⲆⲆᐃΔ = undefined;
	let ᐃⵠᐃΔᐃᐃᐃ = undefined;
	let ᐃⵠⲆⵠⲆΔⲆ = ⲆⲆΔᐃⵠ;
	const ⲆⵠΔΔᐃ = ⵠⵠᐃΔΔ;
	const ⲆΔΔΔᐃᐃᐃ = ΔᐃΔⲆⵠΔΔ;
	let ᐃΔΔⲆᐃⵠⲆ = "_";
	let ΔΔⲆᐃᐃ = [];
	const ΔᐃᐃⲆΔ = ΔΔⲆΔΔ;
	let ᐃᐃᐃᐃΔⲆⵠ = undefined;
	const ⵠΔⲆᐃⲆ = Ⲇᐃᐃⵠⵠ;
	let ΔⲆᐃᐃΔⲆΔ = ⲆⲆΔᐃⵠ;
	let ᐃᐃⲆⲆΔᐃᐃ = undefined;
	let ΔᐃⵠⲆᐃΔⵠ = undefined;
	let ΔⵠᐃΔᐃ = ⲆⲆΔᐃⵠ;
	const ⵠΔⵠⲆᐃΔᐃ = ⵠⲆⵠᐃⲆΔΔ;
	let ⲆⵠᐃⲆᐃⲆᐃ = ⲆⲆΔᐃⵠ;
	let ⵠΔΔΔᐃⲆᐃ = undefined;
	const ⲆΔⵠΔᐃ = ⵠⲆΔⲆΔ;
	let ⵠⵠᐃⲆᐃⲆⵠ = ⲆⲆΔᐃⵠ;
	let ⵠᐃᐃᐃⵠΔⵠ = undefined;
	let ⲆΔΔΔⲆᐃᐃ = undefined;
	let ⲆⵠⲆⲆⵠᐃⵠ = ⲆⲆΔᐃⵠ;
	const ⵠᐃΔⲆⲆ = ΔⵠⵠΔᐃ;
	const ⲆⲆΔᐃⲆ = Ⲇᐃᐃⵠⵠ;
	const ᐃⲆΔⵠΔ = ⲆⲆᐃᐃⵠ;
	const ᐃΔᐃⲆ = ᐃⵠⲆⵠ;
	const ᐃΔⵠⵠΔ = ⵠΔᐃⲆⲆⵠⵠ;
	let ⲆⵠᐃⲆⲆᐃᐃ = undefined;
	const ΔΔΔⲆΔ = ⵠᐃΔⵠᐃ;
	const ⲆΔᐃⵠᐃ = ⲆⵠⲆΔᐃ;
	const ᐃᐃⵠᐃⵠ = ⵠⵠᐃᐃⲆ;
	let ⵠⵠⵠⲆⵠⲆᐃ = undefined;
	const ⲆΔⲆΔⵠ = ⲆⲆᐃᐃᐃ;
	const ⲆⲆⲆΔᐃ = ⲆΔᐃⵠᐃ;
	let ΔᐃⵠⵠΔΔΔ = ⲆⲆΔᐃⵠ;
	const ᐃⲆⲆⲆΔ = ᐃⲆᐃⵠΔ;
	const ΔⵠΔᐃΔᐃᐃ = ⵠⵠᐃᐃⲆ;
	const ᐃΔᐃⲆᐃ = ⵠᐃᐃⲆⵠ;
	const ᐃΔⵠⲆΔⲆⵠ = ᐃⵠⵠᐃⵠⲆᐃ;
	let ⲆΔΔΔⲆΔⵠ = undefined;
	const ΔΔⵠᐃⲆ = ᐃⲆⲆᐃΔ;
	let ⲆᐃⲆⵠⵠⲆᐃ = ⲆⲆΔᐃⵠ;
	const ⵠΔᐃᐃⵠ = ⲆⲆΔᐃⵠ;
	let ⵠⲆΔΔᐃⲆΔ = undefined;
	let ⵠᐃΔⲆΔΔΔ = ⵠΔᐃᐃⵠ;
	const ⵠⵠⵠⲆⵠ = ⵠΔᐃᐃⵠ;
	let ΔᐃΔᐃᐃΔⵠ = ⵠΔᐃᐃⵠ;
	let ΔⵠΔⵠΔⲆΔ = ⲆⲆΔᐃⵠ;
	const ⲆⲆΔⵠⲆ = ᐃⵠΔΔⵠ;
	let ΔΔΔᐃⲆⵠⲆ = ⲆⲆΔᐃⵠ;
	let ⲆⵠⵠⲆᐃᐃⵠ = ⲆⲆΔᐃⵠ;
	const Δᐃⵠⵠⵠ = ΔⲆᐃⵠⵠ;
	const ΔΔⲆⵠⵠ = ⲆᐃⲆⵠⲆ;
	let ᐃⲆⲆΔΔᐃΔ = ⵠⵠⵠⲆⵠ;
	let ⲆᐃⲆᐃᐃᐃᐃ = undefined;
	let ⵠⵠⲆⵠᐃⵠⲆ = undefined;
	let ΔⵠⲆᐃΔᐃⲆ = undefined;
	const ᐃᐃΔⵠⵠ = ⲆΔⲆᐃⵠ;
	const ⵠᐃΔΔΔΔⲆΔⲆ = ΔᐃΔⲆⵠΔΔ;
	const ⵠΔΔⵠ = ΔᐃΔΔ;
	let ⵠΔΔΔⵠⵠⲆ = undefined;
	const ⲆⵠᐃΔΔΔᐃ = ΔᐃᐃⲆΔ;
	const ⵠΔⵠΔΔ = ᐃⵠΔΔⵠ;
	const ⲆⵠΔΔΔᐃΔ = ΔᐃΔⲆⵠΔΔ;
	let ⲆᐃⵠⲆΔⵠΔ = ⲆⲆΔᐃⵠ;
	const ⵠⵠⵠⵠⵠ = ⵠⵠᐃΔΔ;
	const ⵠΔⵠΔᐃ = ⵠᐃᐃⲆⵠ;
	let ΔⲆⲆⵠⲆᐃⲆ = ⵠⵠⵠⲆⵠ;
	let ⵠⵠΔⵠᐃⲆᐃ = ⵠⵠⵠⲆⵠ;
	const ⲆᐃᐃΔ = Δⵠᐃᐃ;
	let ΔⲆΔⵠᐃᐃΔ = ⵠⵠⵠⲆⵠ;
	const ⲆⲆⵠᐃΔ = ΔΔⵠᐃⲆ;
	const ΔⲆᐃⲆ = ⲆᐃᐃΔ;
	const ⵠᐃⲆᐃ = ᐃⵠⲆⵠ;
	let ΔΔΔⵠⲆⵠⲆ = ⲆⲆΔᐃⵠ;
	const ᐃΔΔᐃᐃ = ᐃᐃⵠᐃⵠ;
	let ⲆᐃᐃᐃΔⲆⵠ = ⲆⲆΔᐃⵠ;
	let ⲆΔᐃΔⵠΔⲆ = ⵠΔᐃᐃⵠ;
	let ⲆⲆⵠⲆΔⵠᐃ = ⵠΔᐃᐃⵠ;
	let ⲆⲆΔᐃⲆΔⵠ = ⵠⵠⵠⲆⵠ;
	let ⵠΔᐃⲆⲆⲆⵠ = ⵠΔᐃᐃⵠ;
	let ᐃⵠᐃᐃᐃⵠⵠ = undefined;
	let ⲆⲆᐃⲆᐃⵠⵠ = ⲆⲆΔᐃⵠ;
	const ⵠⵠⲆⵠ = ⵠΔΔΔ;
	let ᐃᐃⵠΔⲆΔᐃ = ⲆⲆΔᐃⵠ;
	const ⲆΔᐃΔⲆ = ΔⵠΔΔΔ;
	let ΔΔΔᐃⲆᐃⵠ = ⵠⵠⵠⲆⵠ;
	const ⵠᐃΔΔⲆ = Ⲇᐃᐃⵠⵠ;
	let ⵠⵠΔΔⵠⲆⵠ = undefined;
	let ⵠⲆΔⵠᐃⵠⲆ = ⵠⵠⵠⲆⵠ;
	const ΔᐃⵠⲆᐃⵠᐃ = ΔᐃᐃⲆΔ;
	let ᐃᐃᐃΔⲆⲆΔ = ⵠᐃΔ;
	const ᐃΔⲆⵠⵠΔⲆ = ΔᐃΔⲆⵠΔΔ;
	const ᐃⵠⵠ = ⵠΔΔ;
	const ᐃΔᐃⵠᐃ = ᐃⲆΔⵠΔ;
	(!ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[141]] || !ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[141]].instantiate) && ⲆⲆᐃᐃΔⲆΔⲆⵠ();
	const ⵠⲆⵠᐃᐃ = ⲆⵠⲆΔᐃ;
	const ⵠⲆᐃⵠᐃⲆⵠ = ⵠΔⵠⲆᐃΔᐃ;
	const ᐃⲆⵠⲆⵠᐃΔ = {
		Date: Date
	};
	const ⵠᐃⵠᐃⵠ = ΔΔⲆⵠⵠ;
	const ⵠᐃⲆᐃᐃ = ΔⵠΔᐃΔᐃᐃ;
	ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[141]].instantiate(Uint8Array.from(ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[217]](""), (function(ⵠⵠⵠΔⵠΔΔ) {
		return ⵠⵠⵠΔⵠΔΔ.charCodeAt(0)
	})), ᐃⲆⵠⲆⵠᐃΔ).then((function(ᐃΔⵠΔΔⲆᐃ) {
		ⲆᐃᐃⲆⲆΔⵠ = ᐃΔⵠΔΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[10]];
		ΔΔⲆⲆᐃⵠᐃ = ⲆᐃᐃⲆⲆΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[265]];
		ΔᐃΔᐃⵠΔᐃ = ΔΔⲆⲆᐃⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[280]];
		ⵠΔᐃⵠᐃ = ΔᐃΔᐃⵠΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[85]];
		ⲆΔⲆⵠⲆⲆⲆ = ΔΔⲆⲆᐃⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[286]];
		ⵠⵠⵠⲆⲆᐃΔ = ΔΔⲆⲆᐃⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[197]];
		ᐃⵠᐃΔᐃᐃᐃ = ΔΔⲆⲆᐃⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[64]];
		ᐃⵠⲆⵠⲆΔⲆ = ΔΔⲆⲆᐃⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[238]];
		ᐃΔΔⲆᐃⵠⲆ = "_";
		for (let Δᐃ = 0; 31 > Δᐃ; Δᐃ++) ΔΔⲆᐃᐃ[Δᐃ] = ΔΔⲆⲆᐃⵠᐃ[ᐃΔΔⲆᐃⵠⲆ + Δᐃ];
		ᐃᐃᐃᐃΔⲆⵠ = ΔΔⲆⲆᐃⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[241]];
		ΔⲆᐃᐃΔⲆΔ = new Float32Array(ⵠΔᐃⵠᐃ);
		ᐃᐃⲆⲆΔᐃᐃ = new Float64Array(ⵠΔᐃⵠᐃ);
		ΔᐃⵠⲆᐃΔⵠ = new BigUint64Array(ⵠΔᐃⵠᐃ);
		ΔⵠᐃΔᐃ = new Uint32Array(ⵠΔᐃⵠᐃ);
		ⲆⵠᐃⲆᐃⲆᐃ = new Uint16Array(ⵠΔᐃⵠᐃ);
		ⵠΔΔΔᐃⲆᐃ = new Uint8Array(ⵠΔᐃⵠᐃ);
		ⵠⵠᐃⲆᐃⲆⵠ = new BigInt64Array(ⵠΔᐃⵠᐃ);
		ⵠᐃᐃᐃⵠΔⵠ = new Int32Array(ⵠΔᐃⵠᐃ);
		ⲆΔΔΔⲆᐃᐃ = new Int16Array(ⵠΔᐃⵠᐃ);
		ⲆⵠⲆⲆⵠᐃⵠ = new Int8Array(ⵠΔᐃⵠᐃ);
		ⲆⲆᐃⲆᐃⵠⵠ = ΔΔⲆᐃᐃ[4];
		ᐃⵠᐃᐃᐃⵠⵠ = ΔΔⲆᐃᐃ[6];
		ⵠⵠΔΔⵠⲆⵠ = ΔΔⲆᐃᐃ[20];
		ΔⵠⲆᐃΔᐃⲆ = ΔΔⲆᐃᐃ[Ⲇᐃᐃⵠⵠ];
		ⵠΔΔΔⵠⵠⲆ = ΔΔⲆᐃᐃ[ⵠᐃΔⲆⲆ];
		ΔᐃⵠⵠΔΔΔ = ΔΔⲆᐃᐃ[18];
		ΔΔΔᐃⲆⵠⲆ = ΔΔⲆᐃᐃ[ⵠᐃⲆᐃ];
		ⵠⵠⵠⲆⵠⲆᐃ = ΔΔⲆᐃᐃ[5];
		ⵠⲆΔΔᐃⲆΔ = ΔΔⲆᐃᐃ[0];
		ⵠⵠΔⵠᐃⲆᐃ = ΔΔⲆᐃᐃ[27];
		ᐃⲆⲆΔΔᐃΔ = ΔΔⲆᐃᐃ[ⵠᐃⲆᐃᐃ];
		ΔᐃΔᐃᐃΔⵠ = ΔΔⲆᐃᐃ[30];
		ⲆⵠⵠⲆᐃᐃⵠ = ΔΔⲆᐃᐃ[29];
		ⲆⲆⵠⲆΔⵠᐃ = ΔΔⲆᐃᐃ[1];
		ⵠᐃΔⲆΔΔΔ = ΔΔⲆᐃᐃ[ᐃΔᐃⲆᐃ];
		ⵠΔᐃⲆⲆⲆⵠ = ΔΔⲆᐃᐃ[ᐃⲆⲆᐃΔ];
		ΔⲆⲆⵠⲆᐃⲆ = ΔΔⲆᐃᐃ[24];
		ⲆᐃᐃᐃΔⲆⵠ = ΔΔⲆᐃᐃ[2];
		ΔΔΔⵠⲆⵠⲆ = ΔΔⲆᐃᐃ[17];
		ⵠⵠⲆⵠᐃⵠⲆ = ΔΔⲆᐃᐃ[8];
		ⲆᐃⲆⵠⵠⲆᐃ = ΔΔⲆᐃᐃ[25];
		ΔⲆΔⵠᐃᐃΔ = ΔΔⲆᐃᐃ[11];
		ⲆᐃⵠⲆΔⵠΔ = ΔΔⲆᐃᐃ[14];
		ⲆⵠᐃⲆⲆᐃᐃ = ΔΔⲆᐃᐃ[22];
		ΔⵠΔⵠΔⲆΔ = ΔΔⲆᐃᐃ[28];
		ⲆⲆΔᐃⲆΔⵠ = ΔΔⲆᐃᐃ[ⲆΔⲆᐃⵠ];
		ⲆΔΔΔⲆΔⵠ = ΔΔⲆᐃᐃ[ⵠᐃΔⵠᐃ];
		ᐃᐃⵠΔⲆΔᐃ = ΔΔⲆᐃᐃ[19];
		ΔΔΔᐃⲆᐃⵠ = ΔΔⲆᐃᐃ[23];
		ⲆΔᐃΔⵠΔⲆ = ΔΔⲆᐃᐃ[21];
		ⲆᐃⲆᐃᐃᐃᐃ = ΔΔⲆᐃᐃ[26];
		ᐃᐃᐃΔⲆⲆΔ = ᐃⵠⵠ;
		if (ⵠⲆΔⵠᐃⵠⲆ) ⵠⲆΔⵠᐃⵠⲆ()
	}));

	function ⵠⵠΔⲆΔΔⵠᐃⲆ(ᐃⲆΔⲆᐃᐃⵠ) {
		return ᐃⲆΔⲆᐃᐃⵠ[ᐃᐃᐃᐃΔⲆⵠ >>> Δⵠᐃᐃ]
	}

	function ΔⲆⵠⲆΔᐃΔ(ᐃⵠⵠΔⲆ) {
		return ΔⵠᐃΔᐃ[(ᐃᐃᐃᐃΔⲆⵠ + 4 >>> 2) + (ᐃⵠⵠΔⲆ << 1)]
	}
	const ᐃΔⵠᐃⵠ = ⵠⵠⵠⲆⵠ;
	const ΔᐃⲆⲆⵠᐃⵠ = ΔⲆⵠⲆΔᐃΔ;
	const ΔⵠⲆⲆᐃⵠᐃ = ⲆΔΔΔᐃᐃᐃ;

	function ⵠΔⵠΔⵠⲆⲆ(ⲆⵠᐃⲆᐃ) {
		return 31 - Math.clz32(ⲆⵠᐃⲆᐃ >>> ᐃⲆΔⲆᐃⵠΔ & 31)
	}
	const ᐃΔΔ = ΔᐃΔ;

	function ᐃΔΔⵠⲆⲆᐃΔᐃ(ⲆΔᐃᐃΔ) {
		const ⲆᐃⲆⲆᐃⲆⵠ = new Uint8Array(ⲆΔᐃᐃΔ);
		const ⵠᐃᐃΔⲆ = ᐃⵠᐃΔᐃᐃᐃ(ⲆᐃⲆⲆᐃⲆⵠ.length, ᐃΔᐃⵠⵠⲆᐃ);
		ⵠΔΔΔᐃⲆᐃ.set(ⲆᐃⲆⲆᐃⲆⵠ, ⵠᐃᐃΔⲆ);
		return ⵠᐃᐃΔⲆ
	}

	function ΔⲆᐃⵠⵠΔᐃΔⲆ(ᐃⵠⵠΔⲆ, ⲆⲆΔᐃᐃΔⲆ) {
		ⲆⲆΔᐃᐃΔⲆ = ⲆⲆΔᐃᐃΔⲆ || ⵠᐃΔ;
		const ᐃΔⲆⵠⵠΔΔ = ⲆⲆΔᐃᐃΔⲆ;
		const ⲆⵠᐃⲆᐃ = ΔᐃⲆⲆⵠᐃⵠ(ᐃⵠⵠΔⲆ);
		const ⵠΔⲆᐃᐃⲆⵠ = ⵠΔⵠΔⵠⲆⲆ(ⲆⵠᐃⲆᐃ);
		const ⲆΔΔⲆⲆⲆⵠ = "number" !== typeof ᐃΔⲆⵠⵠΔΔ;
		const ᐃⵠⲆⵠⵠ = ⲆΔΔⲆⲆⲆⵠ ? ᐃΔⲆⵠⵠΔΔ.length : ᐃΔⲆⵠⵠΔΔ;
		const ⲆΔᐃᐃΔ = ᐃⵠᐃΔᐃᐃᐃ(ᐃⵠⲆⵠⵠ << ⵠΔⲆᐃᐃⲆⵠ, ⲆⵠᐃⲆᐃ & ΔⵠᐃΔΔⲆᐃ ? ᐃⵠⵠΔⲆ : ᐃΔᐃⵠⵠⲆᐃ);
		let ᐃⲆⲆⲆⲆΔᐃ;
		if (ⲆⵠᐃⲆᐃ & ΔⵠᐃΔΔⲆᐃ) {
			ᐃⲆⲆⲆⲆΔᐃ = ⲆΔᐃᐃΔ
		} else {
			ⲆΔⲆⵠⲆⲆⲆ(ⲆΔᐃᐃΔ);
			const ⲆΔᐃΔⵠ = ᐃⵠᐃΔᐃᐃᐃ(ⲆⵠᐃⲆᐃ & ⲆΔⵠⵠᐃⵠΔ ? ᐃⵠⲆᐃⵠᐃᐃ : ᐃⲆⲆⵠΔΔⵠ, ᐃⵠⵠΔⲆ);
			ⵠⵠⵠⲆⲆᐃΔ(ⲆΔᐃᐃΔ);
			ΔⵠᐃΔᐃ[ⲆΔᐃΔⵠ + ΔⵠⲆΔⵠΔΔ >>> 2] = ⲆΔᐃᐃΔ;
			ΔⵠᐃΔᐃ[ⲆΔᐃΔⵠ + ⵠⲆᐃᐃⲆᐃⲆ >>> 2] = ⲆΔᐃᐃΔ;
			ΔⵠᐃΔᐃ[ⲆΔᐃΔⵠ + ⲆΔⲆᐃᐃΔΔ >>> ΔⲆᐃⲆ] = ᐃⵠⲆⵠⵠ << ⵠΔⲆᐃᐃⲆⵠ;
			ⲆⵠᐃⲆᐃ & ⲆΔⵠⵠᐃⵠΔ && (ΔⵠᐃΔᐃ[ⲆΔᐃΔⵠ + ΔⲆΔⵠⵠΔᐃ >>> 2] = ᐃⵠⲆⵠⵠ);
			ᐃⲆⲆⲆⲆΔᐃ = ⲆΔᐃΔⵠ
		}
		if (ⲆΔΔⲆⲆⲆⵠ) {
			const ⲆⲆⲆⲆⵠΔⲆ = ⲆⵠᐃΔᐃⵠΔ(ⵠΔⲆᐃᐃⲆⵠ, ⲆⵠᐃⲆᐃ & ⵠΔⵠᐃⲆᐃΔ, ⲆⵠᐃⲆᐃ & ⲆⲆⲆⲆⲆⵠᐃ);
			const ᐃⵠⵠᐃᐃⲆᐃ = ⲆΔᐃᐃΔ >>> ⵠΔⲆᐃᐃⲆⵠ;
			if (ⲆⵠᐃⲆᐃ & ⵠΔⲆⲆⲆⵠⲆ) {
				for (let Δᐃ = ΔᐃΔ; ᐃⵠⲆⵠⵠ > Δᐃ; ++Δᐃ) {
					ⲆⲆⲆⲆⵠΔⲆ[ᐃⵠⵠᐃᐃⲆᐃ + Δᐃ] = ᐃΔⲆⵠⵠΔΔ[Δᐃ]
				}
			} else {
				ⲆⲆⲆⲆⵠΔⲆ.set(ᐃΔⲆⵠⵠΔΔ, ᐃⵠⵠᐃᐃⲆᐃ)
			}
		}
		return ᐃⲆⲆⲆⲆΔᐃ
	}

	function ⲆⵠᐃΔᐃⵠΔ(ⵠᐃⲆᐃⵠᐃΔ, ⵠᐃⲆⵠᐃⵠⲆ, ⲆⲆΔⲆⲆᐃΔ) {
		if (ⲆⲆΔⲆⲆᐃΔ) {
			switch (ⵠᐃⲆᐃⵠᐃΔ) {
				case ΔⲆᐃⲆ:
					return ΔⲆᐃᐃΔⲆΔ;
				case 3:
					return ᐃᐃⲆⲆΔᐃᐃ
			}
		} else {
			switch (ⵠᐃⲆᐃⵠᐃΔ) {
				case ΔᐃΔ:
					return ⵠᐃⲆⵠᐃⵠⲆ ? ⲆⵠⲆⲆⵠᐃⵠ : ⵠΔΔΔᐃⲆᐃ;
				case 1:
					return ⵠᐃⲆⵠᐃⵠⲆ ? ⲆΔΔΔⲆᐃᐃ : ⲆⵠᐃⲆᐃⲆᐃ;
				case 2:
					return ⵠᐃⲆⵠᐃⵠⲆ ? ⵠᐃᐃᐃⵠΔⵠ : ΔⵠᐃΔᐃ;
				case ᐃΔᐃⲆ:
					return ⵠᐃⲆⵠᐃⵠⲆ ? ⵠⵠᐃⲆᐃⲆⵠ : ΔᐃⵠⲆᐃΔⵠ
			}
		}
	}

	function ⵠⲆⵠⵠΔⵠⵠᐃⲆ(Ⲇⵠᐃⵠᐃⵠⵠ) {
		const ᐃⵠⲆⵠⵠ = Ⲇⵠᐃⵠᐃⵠⵠ.length;
		const ⵠᐃᐃΔⲆ = ⵠΔⲆΔᐃΔᐃ(ᐃⵠⲆⵠⵠ << 1, ᐃⵠⲆⵠⲆΔΔ);
		const ⵠᐃⵠᐃᐃⲆΔ = new Uint16Array(ⵠΔᐃⵠᐃ);
		for (var Δᐃ = 0, ΔⵠΔ = ⵠᐃᐃΔⲆ >>> ⵠΔⲆ; ᐃⵠⲆⵠⵠ > Δᐃ; ++Δᐃ) ⵠᐃⵠᐃᐃⲆΔ[ΔⵠΔ + Δᐃ] = Ⲇⵠᐃⵠᐃⵠⵠ.charCodeAt(Δᐃ);
		return ⵠᐃᐃΔⲆ
	}

	function ⵠΔⲆᐃⲆᐃⵠⲆᐃ(ⵠᐃᐃΔⲆ) {
		let ΔᐃᐃΔⵠΔᐃ = "";
		ⵠᐃᐃΔⲆ /= 2;
		const ΔΔᐃΔᐃ = ΔⵠᐃΔᐃ[ⵠᐃᐃΔⲆ / 2 - ⵠΔΔ] / ⲆᐃᐃΔ;
		for (let Δᐃ = 0; Δᐃ < ΔΔᐃΔᐃ; Δᐃ++) ΔᐃᐃΔⵠΔᐃ += String.fromCharCode(ⲆⵠᐃⲆᐃⲆᐃ[ⵠᐃᐃΔⲆ++]);
		return ΔᐃᐃΔⵠΔᐃ
	}
	const ⲆⵠΔⲆⵠ = ᐃΔᐃⲆᐃ;

	function ΔⲆΔΔⵠⲆᐃΔᐃ(ⲆΔᐃΔⵠ) {
		const ᐃΔⲆⵠⵠΔΔ = ΔⵠⵠⲆΔᐃᐃ(ⲆΔᐃΔⵠ);
		const ΔΔᐃΔᐃ = ᐃΔⲆⵠⵠΔΔ.length;
		const ⲆᐃⵠⲆΔΔⲆ = new Array(ΔΔᐃΔᐃ);
		for (let Δᐃ = 0; ΔΔᐃΔᐃ > Δᐃ; Δᐃ++) ⲆᐃⵠⲆΔΔⲆ[Δᐃ] = ᐃΔⲆⵠⵠΔΔ[Δᐃ];
		return ⲆᐃⵠⲆΔΔⲆ
	}

	function ΔⵠⵠⲆΔᐃᐃ(ⲆΔᐃΔⵠ) {
		const ᐃⵠⵠΔⲆ = ΔⵠᐃΔᐃ[ⲆΔᐃΔⵠ + ᐃⲆᐃΔⵠⲆΔ >>> 2];
		const ⲆⵠᐃⲆᐃ = ΔᐃⲆⲆⵠᐃⵠ(ᐃⵠⵠΔⲆ);
		const ⵠΔⲆᐃᐃⲆⵠ = ⵠΔⵠΔⵠⲆⲆ(ⲆⵠᐃⲆᐃ);
		let ⲆΔᐃᐃΔ = ⲆⵠᐃⲆᐃ & ΔⵠᐃΔΔⲆᐃ ? ⲆΔᐃΔⵠ : ΔⵠᐃΔᐃ[ⲆΔᐃΔⵠ + ⵠⲆᐃᐃⲆᐃⲆ >>> 2];
		const ᐃⵠⲆⵠⵠ = ⲆⵠᐃⲆᐃ & ⲆΔⵠⵠᐃⵠΔ ? ΔⵠᐃΔᐃ[ⲆΔᐃΔⵠ + ΔⲆΔⵠⵠΔᐃ >>> 2] : ΔⵠᐃΔᐃ[ⲆΔᐃᐃΔ + ᐃᐃΔⲆⲆⵠⵠ >>> ⲆᐃᐃΔ] >>> ⵠΔⲆᐃᐃⲆⵠ;
		return ⲆⵠᐃΔᐃⵠΔ(ⵠΔⲆᐃᐃⲆⵠ, ⲆⵠᐃⲆᐃ & ⵠΔⵠᐃⲆᐃΔ, ⲆⵠᐃⲆᐃ & ⲆⲆⲆⲆⲆⵠᐃ).subarray(ⲆΔᐃᐃΔ >>>= ⵠΔⲆᐃᐃⲆⵠ, ⲆΔᐃᐃΔ + ᐃⵠⲆⵠⵠ)
	}

	function ⵠⵠⵠᐃᐃⲆΔΔⵠ(ⵠᐃᐃΔⲆ) {
		const ᐃⵠⲆⵠⵠ = ΔⵠᐃΔᐃ[ⵠᐃᐃΔⲆ + ᐃᐃΔⲆⲆⵠⵠ >>> Δⵠᐃᐃ];
		return ⵠΔᐃⵠᐃ.slice(ⵠᐃᐃΔⲆ, ⵠᐃᐃΔⲆ + ᐃⵠⲆⵠⵠ)
	}
	const ΔΔⵠⵠⵠ = ⵠᐃⵠᐃⵠ;

	function ᐃⵠⵠⵠⵠⲆΔ(ⲆⵠⵠⲆΔⲆⲆ, ⲆᐃᐃⲆᐃᐃⵠ, ⲆᐃⵠⲆΔⵠⵠ, ⲆⵠⲆⲆΔ) {
		const ⲆᐃⵠⵠⲆⲆΔ = 23775 ^ ⲆⵠⵠⲆΔⲆⲆ;
		const ⵠⵠᐃⵠᐃⲆΔ = ⲆᐃᐃⲆᐃᐃⵠ ^ 5408;
		const ⵠᐃᐃⵠⵠⵠⲆ = (8 << (ⲆᐃⵠⲆΔⵠⵠ >> 16 & 255)) + (16 << (ⲆᐃⵠⲆΔⵠⵠ >> 8 & 255)) + (24 << (ⲆᐃⵠⲆΔⵠⵠ >> 0 & 255)) + (0 << (ⲆᐃⵠⲆΔⵠⵠ >> 24 & 255));
		const ⵠⲆᐃΔⵠᐃΔ = ~(ⲆⵠⲆⲆΔ & 42745) & 42745 | ~(42745 & ⲆⵠⲆⲆΔ) & ⲆⵠⲆⲆΔ;
		const ⵠⵠⲆΔΔᐃⲆ = ⲆᐃⵠⲆⲆΔⲆ(ⲆᐃⵠⵠⲆⲆΔ, ⵠⵠᐃⵠᐃⲆΔ);
		const ⵠⵠΔᐃⵠⲆⲆⵠᐃ = ⲆΔᐃⲆΔⲆᐃ(ⵠᐃᐃⵠⵠⵠⲆ, ⵠⲆᐃΔⵠᐃΔ, ⲆᐃⵠⵠⲆⲆΔ);
		const ⵠⲆᐃΔⲆⵠⵠ = ⵠⵠⲆΔΔᐃⲆ ^ 30918;
		return ⵠⲆᐃΔⲆⵠⵠ
	}
	const ᐃⵠᐃⵠⵠ = ΔΔΔⲆΔ;
	const ⲆⲆᐃⵠⲆ = ⲆΔⲆΔⵠ;
	const ⲆᐃΔΔⵠ = ⵠⲆΔⲆΔ;
	const ⲆᐃⵠΔⵠΔᐃ = () => new Promise(((ⲆΔᐃⲆΔᐃⵠ, ΔᐃᐃᐃⵠⲆⲆ) => {
		ⵠΔΔⲆⲆⵠᐃᐃⵠ["grecaptcha"]["ready"]((function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ["grecaptcha"]["execute"]("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
				action: "validate_recaptcha"
			}).then((function(ⲆΔΔⲆΔ) {
				ⲆΔᐃⲆΔᐃⵠ(ⲆΔΔⲆΔ)
			})).catch((ⲆΔᐃⲆⲆⲆΔ => {
				if (ⲆΔⵠⲆⲆ) {
					ⲆΔᐃⲆΔᐃⵠ(0);
					return
				}
				console.log(ⵠⵠⵠⲆⵠ);
				ΔᐃᐃᐃⵠⲆⲆ(ⲆΔᐃⲆⲆⲆΔ)
			}))
		}))
	}));
	const ᐃⵠⲆⲆᐃ = ⲆⲆΔᐃⲆ;
	const ΔⲆⲆⲆⵠ = ᐃΔⵠⵠΔ;
	const ΔᐃᐃᐃⲆᐃΔ = ⵠⲆⵠᐃⲆΔΔ;
	const ᐃΔⵠⲆⲆ = ⲆΔᐃΔⲆ;
	const ⲆᐃΔᐃⵠⵠⵠ = {
		"ᐃΔⵠᐃⵠⵠⵠ": "development",
		"ΔⲆⲆᐃΔᐃᐃ": "production"
	};
	const ⲆΔⲆⵠᐃ = ⵠΔᐃⲆⲆⵠⵠ;
	const ⲆⵠΔΔΔᐃᐃ = ⵠᐃΔⲆⲆ;
	const ΔⲆⵠΔΔ = ⲆⵠᐃΔᐃ;
	const ⲆΔΔⵠⲆⵠᐃ = ⲆᐃΔᐃⵠⵠⵠ.ΔⲆⲆᐃΔᐃᐃ;
	const ᐃΔⲆⵠΔ = ᐃⵠⲆⲆᐃ;
	const ΔⵠⲆⲆ = ⵠᐃⲆᐃ;
	const ᐃⵠⲆⲆⲆ = Δᐃⵠⵠⵠ;

	function ᐃⲆΔⵠⵠⲆⵠ(ΔΔⲆⵠΔⵠᐃ, ⲆⲆᐃᐃⲆ) {
		const ΔΔᐃᐃΔⵠⲆ = 47063 ^ ΔΔⲆⵠΔⵠᐃ;
		const ⵠⲆΔᐃⲆⵠΔ = ~(62821 & ⲆⲆᐃᐃⲆ) & 62821 | ~(62821 & ⲆⲆᐃᐃⲆ) & ⲆⲆᐃᐃⲆ;
		const ⲆᐃΔΔᐃⲆⵠ = ⲆⵠⲆΔⲆⲆΔ(ΔΔᐃᐃΔⵠⲆ, ⵠⲆΔᐃⲆⵠΔ, ΔΔᐃᐃΔⵠⲆ, ⵠⲆΔᐃⲆⵠΔ, ΔΔᐃᐃΔⵠⲆ);
		const ⵠⵠΔΔᐃⲆⵠ = ᐃⵠΔⵠⲆⵠⲆ(ⵠⲆΔᐃⲆⵠΔ, ΔΔᐃᐃΔⵠⲆ, ⵠⲆΔᐃⲆⵠΔ, ΔΔᐃᐃΔⵠⲆ);
		const ⵠΔⵠΔΔⲆⵠ = (0 << ((ⲆᐃΔΔᐃⲆⵠ ^ ⵠⵠΔΔᐃⲆⵠ) >> 0 & 255)) + (8 << ((ⲆᐃΔΔᐃⲆⵠ ^ ⵠⵠΔΔᐃⲆⵠ) >> 16 & 255)) + (24 << ((ⲆᐃΔΔᐃⲆⵠ ^ ⵠⵠΔΔᐃⲆⵠ) >> ⲆᐃⲆⵠⲆ & ⵠΔⵠΔΔ)) + (16 << ((ⲆᐃΔΔᐃⲆⵠ ^ ⵠⵠΔΔᐃⲆⵠ) >> 24 & 255));
		return ⵠΔⵠΔΔⲆⵠ
	}
	const ⲆⵠⵠⵠΔᐃΔ = ᐃⵠⵠᐃⵠⲆᐃ;

	function ᐃΔⵠⵠⲆⲆΔ(ⲆⲆⲆᐃⲆⵠΔ, ᐃⵠⲆⲆⲆΔⵠ, ⵠᐃΔᐃᐃᐃᐃ, ⵠⲆΔᐃⵠᐃⵠ, ⵠᐃᐃᐃⵠⲆⲆ, ΔᐃᐃΔⲆΔⵠ) {
		const ΔΔⵠᐃΔⲆⲆ = (38932 | ⲆⲆⲆᐃⲆⵠΔ) & ~(38932 & ⲆⲆⲆᐃⲆⵠΔ);
		const ⲆⲆᐃΔΔΔᐃ = ~(ᐃⵠⲆⲆⲆΔⵠ & 41006) & ᐃⵠⲆⲆⲆΔⵠ | ~(ᐃⵠⲆⲆⲆΔⵠ & 41006) & 41006;
		const ⲆⲆΔΔᐃΔΔ = ~(9748 & ⵠᐃΔᐃᐃᐃᐃ) & ⵠᐃΔᐃᐃᐃᐃ | ~(ⵠᐃΔᐃᐃᐃᐃ & 9748) & 9748;
		const ΔΔⲆΔⵠΔᐃ = (ⵠⲆΔᐃⵠᐃⵠ + 35871) % 65432;
		const ᐃᐃΔᐃⵠⵠΔ = ~(32769 & ⵠᐃᐃᐃⵠⲆⲆ) & ⵠᐃᐃᐃⵠⲆⲆ | ~(ⵠᐃᐃᐃⵠⲆⲆ & 32769) & 32769;
		const ΔᐃⲆΔΔⵠⵠ = 60071 ^ ΔᐃᐃΔⲆΔⵠ;
		const ᐃⲆⵠⵠⵠᐃⲆ = ⲆΔⵠⵠⵠᐃᐃ(ΔΔⵠᐃΔⲆⲆ, ⲆⲆᐃΔΔΔᐃ, ⲆⲆΔΔᐃΔΔ, ΔΔⲆΔⵠΔᐃ);
		const ⲆⵠⵠΔΔⲆⲆⵠⵠ = ᐃⵠⵠΔᐃᐃᐃ(ᐃᐃΔᐃⵠⵠΔ, ΔᐃⲆΔΔⵠⵠ, ΔΔⵠᐃΔⲆⲆ);
		const ⲆⲆᐃⲆⵠΔⲆ = (34570 | ᐃⲆⵠⵠⵠᐃⲆ) & ~(ᐃⲆⵠⵠⵠᐃⲆ & 34570);
		return ⲆⲆᐃⲆⵠΔⲆ
	}
	const ᐃΔᐃⵠΔ = ⲆⲆΔⵠⲆ;

	function ⵠᐃⵠΔⵠ(ⵠⲆⵠⲆᐃ) {
		this.ⵠΔᐃᐃ = 2147483648;
		this.a = 1103515245;
		this.c = 12345;
		this.state = ⵠⲆⵠⲆᐃ ? ⵠⲆⵠⲆᐃ : Math.floor(Math.random() * (this.ⵠΔᐃᐃ - ⵠΔⲆ))
	}
	const ᐃⵠᐃᐃᐃ = ⲆΔⲆᐃⵠ;
	ⵠᐃⵠΔⵠ.prototype.random = function() {
		this.state = (this.a * this.state + this.c) % this.ⵠΔᐃᐃ;
		return this.state / this.ⵠΔᐃᐃ
	};
	const ⲆⵠᐃⲆⵠ = ⵠⵠᐃΔΔ;
	ⵠᐃⵠΔⵠ.prototype.ΔᐃⲆⲆⲆΔⲆ = function(ⵠⲆⵠⲆᐃ) {
		this.state = ⵠⲆⵠⲆᐃ
	};
	ⵠⵠᐃⵠⵠᐃᐃ = 1e4;
	const ⵠⲆΔⵠⲆΔⵠΔΔ = ⵠΔⵠⲆᐃΔᐃ;
	const ᐃⵠⲆᐃⲆ = ᐃΔᐃⵠΔ;
	const ΔⵠΔΔᐃ = ΔΔⵠᐃⲆ;
	const ᐃᐃΔᐃⲆ = ⵠᐃΔⵠᐃ;
	ⲆⲆᐃⲆΔⲆⲆ = [];
	const ᐃⲆᐃⲆ = ΔⵠⲆⲆ;
	const ⲆⲆᐃⵠΔ = ⵠⵠᐃᐃⲆ;
	var ⵠᐃΔⲆᐃᐃΔ = new ⵠᐃⵠΔⵠ;
	const ⲆΔᐃⵠⵠ = ⲆⲆᐃᐃⵠ;
	ⵠᐃΔⲆᐃᐃΔ.ΔᐃⲆⲆⲆΔⲆ((new Date).getTime());
	for (var ΔΔᐃΔ = ΔᐃΔ; ⵠⵠᐃⵠⵠᐃᐃ > ΔΔᐃΔ; ΔΔᐃΔ++) ⲆⲆᐃⲆΔⲆⲆ.push(ⵠᐃΔⲆᐃᐃΔ.random());
	const Δⵠⵠ = ⵠᐃΔ;

	function ᐃΔᐃⵠΔᐃⲆ(ᐃⲆΔⲆΔⵠᐃ, ᐃⲆᐃⲆᐃⲆⵠ, ᐃⲆⵠⲆⵠⲆⵠ, ΔΔⲆᐃⲆⲆᐃ) {
		const ⵠᐃᐃᐃⲆⵠⲆ = ~(59259 & ᐃⲆΔⲆΔⵠᐃ) & ᐃⲆΔⲆΔⵠᐃ | ~(ᐃⲆΔⲆΔⵠᐃ & 59259) & 59259;
		const ⵠⵠᐃⵠᐃⵠⲆ = ~(ᐃⲆᐃⲆᐃⲆⵠ & 56097) & ᐃⲆᐃⲆᐃⲆⵠ | ~(ᐃⲆᐃⲆᐃⲆⵠ & 56097) & 56097;
		const ⵠⵠᐃⵠⵠⲆᐃ = (1664525 * (43315 + ᐃⲆⵠⲆⵠⲆⵠ) + 1013904223) % 4294967296;
		const ᐃⲆᐃⲆᐃⲆᐃ = (8 << (ΔΔⲆᐃⲆⲆᐃ >> 24 & ⲆⲆΔⵠⲆ)) + (32 << (ΔΔⲆᐃⲆⲆᐃ >> 32 & 255)) + (24 << (ΔΔⲆᐃⲆⲆᐃ >> 8 & 255)) + (16 << (ΔΔⲆᐃⲆⲆᐃ >> 16 & 255));
		const ᐃᐃⲆᐃⵠⵠⲆ = ΔᐃᐃΔΔᐃᐃ(ⵠᐃᐃᐃⲆⵠⲆ, ⵠⵠᐃⵠᐃⵠⲆ, ⵠⵠᐃⵠⵠⲆᐃ, ᐃⲆᐃⲆᐃⲆᐃ, ⵠᐃᐃᐃⲆⵠⲆ, ⵠⵠᐃⵠᐃⵠⲆ);
		const ᐃΔⵠⲆⵠᐃⲆ = ᐃⵠΔᐃᐃΔΔ(ⵠⵠᐃⵠⵠⲆᐃ, ᐃⲆᐃⲆᐃⲆᐃ, ⵠᐃᐃᐃⲆⵠⲆ, ⵠⵠᐃⵠᐃⵠⲆ, ⵠⵠᐃⵠⵠⲆᐃ);
		const ΔᐃΔᐃⵠⵠΔᐃᐃ = ΔᐃⵠⵠⲆⲆⵠ(ᐃⲆᐃⲆᐃⲆᐃ, ⵠᐃᐃᐃⲆⵠⲆ, ⵠⵠᐃⵠᐃⵠⲆ, ⵠⵠᐃⵠⵠⲆᐃ, ᐃⲆᐃⲆᐃⲆᐃ, ⵠᐃᐃᐃⲆⵠⲆ);
		const ⵠⵠΔⵠΔΔΔ = (1013904223 + ((ᐃᐃⲆᐃⵠⵠⲆ ^ ᐃΔⵠⲆⵠᐃⲆ) + 26191) * 1664525) % 4294967296;
		const ⵠᐃⵠΔⵠⲆᐃ = (ⵠⵠΔⵠΔΔΔ | 38630) & ~(38630 & ⵠⵠΔⵠΔΔΔ);
		return ⵠᐃⵠΔⵠⲆᐃ
	}

	function ⲆⲆⲆⵠᐃⵠⲆ(ⵠⲆᐃΔⵠⲆⵠ, ΔⲆᐃⲆΔᐃΔ) {
		const ᐃΔᐃⲆⵠᐃⵠ = ~(41406 & ⵠⲆᐃΔⵠⲆⵠ) & ⵠⲆᐃΔⵠⲆⵠ | ~(ⵠⲆᐃΔⵠⲆⵠ & 41406) & 41406;
		const ᐃᐃΔⲆⲆᐃⲆ = ((ΔⲆᐃⲆΔᐃΔ + 17922) * 1103515245 + 12345) % 2147483648;
		const ⲆᐃΔᐃᐃⲆᐃ = ᐃⲆΔⵠᐃᐃᐃ(ᐃΔᐃⲆⵠᐃⵠ, ᐃᐃΔⲆⲆᐃⲆ, ᐃΔᐃⲆⵠᐃⵠ);
		const ⵠⲆΔⲆΔΔᐃᐃᐃ = ᐃⵠΔⵠⵠΔᐃ(ᐃᐃΔⲆⲆᐃⲆ, ᐃΔᐃⲆⵠᐃⵠ, ᐃᐃΔⲆⲆᐃⲆ, ᐃΔᐃⲆⵠᐃⵠ);
		const ⵠⵠⵠΔⲆⲆᐃ = ᐃᐃⲆΔⵠᐃⲆ(ᐃᐃΔⲆⲆᐃⲆ, ᐃΔᐃⲆⵠᐃⵠ, ᐃᐃΔⲆⲆᐃⲆ, ᐃΔᐃⲆⵠᐃⵠ, ᐃᐃΔⲆⲆᐃⲆ);
		const ⲆⵠⲆⲆⵠΔⵠ = ⲆᐃΔᐃᐃⲆᐃ ^ 18573;
		const ΔᐃⲆΔᐃᐃⵠ = (2147483629 * (42346 + (ⲆⵠⲆⲆⵠΔⵠ ^ ⵠⵠⵠΔⲆⲆᐃ)) + 2147483587) % 2147483647;
		return ΔᐃⲆΔᐃᐃⵠ
	}

	function ⵠⲆⵠᐃΔΔⲆ(ᐃΔⵠΔⵠΔΔ, ΔΔⵠᐃᐃΔⲆ, ⵠΔᐃⵠΔᐃᐃ, ᐃⵠⲆᐃΔᐃⵠ, ⲆᐃᐃⲆᐃᐃΔ, ΔⵠⲆⵠⲆᐃⲆ) {
		const ᐃⵠᐃᐃⵠΔⵠ = (214013 * (39488 + ᐃΔⵠΔⵠΔΔ) + 2531011) % 4294967296;
		const ⲆΔΔⵠᐃΔⲆ = ~(49976 & ΔΔⵠᐃᐃΔⲆ) & ΔΔⵠᐃᐃΔⲆ | ~(ΔΔⵠᐃᐃΔⲆ & 49976) & 49976;
		const ⵠᐃᐃⲆΔⲆᐃ = ~(ⵠΔᐃⵠΔᐃᐃ & 35856) & ⵠΔᐃⵠΔᐃᐃ | ~(ⵠΔᐃⵠΔᐃᐃ & 35856) & 35856;
		const ᐃⵠᐃⵠⵠᐃⵠ = 52219 ^ ᐃⵠⲆᐃΔᐃⵠ;
		const ᐃᐃΔⲆᐃΔᐃ = (ⲆᐃᐃⲆᐃᐃΔ + 3575) % 65503;
		const ⵠⲆΔⵠⲆᐃΔ = ~(6932 & ΔⵠⲆⵠⲆᐃⲆ) & ΔⵠⲆⵠⲆᐃⲆ | ~(ΔⵠⲆⵠⲆᐃⲆ & 6932) & 6932;
		const ⲆⵠᐃΔΔΔⵠ = ⲆⵠⵠΔΔⲆΔ(ᐃⵠᐃᐃⵠΔⵠ, ⲆΔΔⵠᐃΔⲆ, ⵠᐃᐃⲆΔⲆᐃ, ᐃⵠᐃⵠⵠᐃⵠ, ᐃᐃΔⲆᐃΔᐃ);
		const ⵠΔⵠᐃⵠⲆⲆ = ⵠⲆΔᐃⲆⵠᐃ(ⵠⲆΔⵠⲆᐃΔ, ᐃⵠᐃᐃⵠΔⵠ, ⲆΔΔⵠᐃΔⲆ, ⵠᐃᐃⲆΔⲆᐃ, ᐃⵠᐃⵠⵠᐃⵠ, ᐃᐃΔⲆᐃΔᐃ);
		const ΔᐃᐃᐃᐃᐃⵠΔⲆ = ᐃᐃⵠⲆᐃᐃΔ(ⵠⲆΔⵠⲆᐃΔ, ᐃⵠᐃᐃⵠΔⵠ, ⲆΔΔⵠᐃΔⲆ, ⵠᐃᐃⲆΔⲆᐃ, ᐃⵠᐃⵠⵠᐃⵠ, ᐃᐃΔⲆᐃΔᐃ);
		const ⵠᐃΔΔΔⵠⵠ = (1013904223 + ((ⲆⵠᐃΔΔΔⵠ ^ ⵠΔⵠᐃⵠⲆⲆ) + 60709) * 1664525) % 4294967296;
		const ΔᐃⲆΔⲆⵠⲆ = ~(ⵠᐃΔΔΔⵠⵠ & 42138) & ⵠᐃΔΔΔⵠⵠ | ~(ⵠᐃΔΔΔⵠⵠ & 42138) & 42138;
		return ΔᐃⲆΔⲆⵠⲆ
	}

	function ⲆⵠⵠⵠⲆᐃⵠ(ⲆⵠⵠⲆΔⲆⲆ, ⲆᐃᐃⲆᐃᐃⵠ, ⲆᐃⵠⲆΔⵠⵠ, ⲆⵠⲆⲆΔ, ⲆⵠᐃⵠⲆΔᐃ) {
		const ΔᐃΔᐃᐃⵠᐃ = (2147483629 * (ⲆⵠⵠⲆΔⲆⲆ + 14772) + 2147483587) % 2147483647;
		const ⵠΔᐃⵠⲆⵠᐃ = 63080 ^ ⲆᐃᐃⲆᐃᐃⵠ;
		const ⵠΔΔᐃᐃᐃΔ = (22695477 * (ⲆᐃⵠⲆΔⵠⵠ + 60304) + 1) % 4294967296;
		const ⵠΔΔᐃΔⲆΔ = ~(5467 & ⲆⵠⲆⲆΔ) & 5467 | ~(5467 & ⲆⵠⲆⲆΔ) & ⲆⵠⲆⲆΔ;
		const ⵠᐃΔⲆᐃⵠⵠ = (ⲆⵠᐃⵠⲆΔᐃ | 40165) & ~(40165 & ⲆⵠᐃⵠⲆΔᐃ);
		const ⲆⲆΔⵠΔΔⲆ = ⵠᐃⵠᐃⲆⲆⵠ(ΔᐃΔᐃᐃⵠᐃ, ⵠΔᐃⵠⲆⵠᐃ, ⵠΔΔᐃᐃᐃΔ, ⵠΔΔᐃΔⲆΔ);
		const ΔᐃⲆⵠᐃᐃΔ = ᐃⵠΔᐃᐃΔΔ(ⵠᐃΔⲆᐃⵠⵠ, ΔᐃΔᐃᐃⵠᐃ, ⵠΔᐃⵠⲆⵠᐃ, ⵠΔΔᐃᐃᐃΔ, ⵠΔΔᐃΔⲆΔ);
		const ΔⲆΔΔⵠⲆⲆ = ᐃᐃΔⵠΔΔΔ(ⵠᐃΔⲆᐃⵠⵠ, ΔᐃΔᐃᐃⵠᐃ, ⵠΔᐃⵠⲆⵠᐃ, ⵠΔΔᐃᐃᐃΔ, ⵠΔΔᐃΔⲆΔ, ⵠᐃΔⲆᐃⵠⵠ);
		const ᐃΔⵠᐃⵠᐃⲆ = (16 << ((ⲆⲆΔⵠΔΔⲆ ^ ΔᐃⲆⵠᐃᐃΔ) >> 24 & 255)) + (8 << ((ⲆⲆΔⵠΔΔⲆ ^ ΔᐃⲆⵠᐃᐃΔ) >> 16 & 255)) + (24 << ((ⲆⲆΔⵠΔΔⲆ ^ ΔᐃⲆⵠᐃᐃΔ) >> 32 & 255)) + (32 << ((ⲆⲆΔⵠΔΔⲆ ^ ΔᐃⲆⵠᐃᐃΔ) >> 8 & 255));
		const ⲆᐃⲆΔΔΔⵠ = ((28765 + (ᐃΔⵠᐃⵠᐃⲆ ^ ΔⲆΔΔⵠⲆⲆ)) * 1664525 + 1013904223) % 4294967296;
		return ⲆᐃⲆΔΔΔⵠ
	}
	const ⲆⵠⵠⲆⲆ = ᐃᐃΔᐃⲆ;
	const ᐃᐃΔΔ = ΔᐃΔΔ;

	function ᐃᐃΔΔᐃΔΔ(ⲆⵠΔⲆⲆⲆΔ, ΔΔΔⵠᐃᐃᐃ, ᐃΔΔΔΔΔᐃ, ⵠᐃⵠⲆᐃΔᐃ, ⵠᐃᐃᐃⵠ) {
		const ⲆΔⲆᐃᐃΔᐃ = (12345 + (23101 + ⲆⵠΔⲆⲆⲆΔ) * 1103515245) % 2147483648;
		const ⵠᐃᐃⲆⲆⵠⵠ = 58614 ^ ΔΔΔⵠᐃᐃᐃ;
		const ⲆᐃΔⵠⲆⵠⲆ = (214013 * (ᐃΔΔΔΔΔᐃ + 45267) + 2531011) % 4294967296;
		const ⲆΔⵠΔⵠⵠᐃ = ⵠᐃⵠⲆᐃΔᐃ ^ 40810;
		const ᐃⵠⲆⵠᐃΔᐃ = (24 << (ⵠᐃᐃᐃⵠ >> 24 & 255)) + (8 << (ⵠᐃᐃᐃⵠ >> 32 & 255)) + (32 << (ⵠᐃᐃᐃⵠ >> 8 & 255)) + (16 << (ⵠᐃᐃᐃⵠ >> 16 & 255));
		const ⵠⲆΔΔᐃⵠⲆ = ᐃΔΔⵠᐃⵠⲆ(ⲆΔⲆᐃᐃΔᐃ, ⵠᐃᐃⲆⲆⵠⵠ);
		const ⵠⲆⲆΔΔᐃᐃ = ᐃΔᐃⵠΔᐃⲆ(ⲆᐃΔⵠⲆⵠⲆ, ⲆΔⵠΔⵠⵠᐃ, ᐃⵠⲆⵠᐃΔᐃ, ⲆΔⲆᐃᐃΔᐃ);
		const ᐃΔⵠᐃΔⵠⲆᐃᐃ = ⲆⲆⵠⲆⲆⵠⲆ(ⵠᐃᐃⲆⲆⵠⵠ, ⲆᐃΔⵠⲆⵠⲆ, ⲆΔⵠΔⵠⵠᐃ, ᐃⵠⲆⵠᐃΔᐃ);
		const ⲆᐃΔⲆᐃⵠⲆ = (24 << ((ⵠⲆΔΔᐃⵠⲆ ^ ⵠⲆⲆΔΔᐃᐃ) >> 24 & 255)) + (32 << ((ⵠⲆΔΔᐃⵠⲆ ^ ⵠⲆⲆΔΔᐃᐃ) >> 16 & 255)) + (8 << ((ⵠⲆΔΔᐃⵠⲆ ^ ⵠⲆⲆΔΔᐃᐃ) >> 32 & 255)) + (16 << ((ⵠⲆΔΔᐃⵠⲆ ^ ⵠⲆⲆΔΔᐃᐃ) >> ΔΔⲆⵠⵠ & 255));
		const ⲆⲆᐃⵠᐃⲆⲆ = ~(13644 & ⲆᐃΔⲆᐃⵠⲆ) & ⲆᐃΔⲆᐃⵠⲆ | ~(ⲆᐃΔⲆᐃⵠⲆ & 13644) & 13644;
		return ⲆⲆᐃⵠᐃⲆⲆ
	}

	function ⵠΔⲆⵠΔ(ΔⲆⲆᐃᐃᐃᐃ, ⵠΔᐃⵠᐃⲆⲆ, ⲆⲆⵠⵠᐃᐃΔ, ⵠΔⵠⵠᐃⵠΔ) {
		const ⵠΔⲆⲆΔⵠΔ = 11762 ^ ΔⲆⲆᐃᐃᐃᐃ;
		const ⲆᐃᐃᐃⲆⵠⵠ = ~(ⵠΔᐃⵠᐃⲆⲆ & 19425) & 19425 | ~(19425 & ⵠΔᐃⵠᐃⲆⲆ) & ⵠΔᐃⵠᐃⲆⲆ;
		const ᐃᐃⲆΔⵠⲆΔ = (32 << (ⲆⲆⵠⵠᐃᐃΔ >> 16 & 255)) + (8 << (ⲆⲆⵠⵠᐃᐃΔ >> 32 & 255)) + (24 << (ⲆⲆⵠⵠᐃᐃΔ >> 24 & 255)) + (16 << (ⲆⲆⵠⵠᐃᐃΔ >> ΔΔⲆⵠⵠ & ⲆⲆΔⵠⲆ));
		const ᐃⲆⵠᐃᐃᐃΔ = ~(259 & ⵠΔⵠⵠᐃⵠΔ) & 259 | ~(259 & ⵠΔⵠⵠᐃⵠΔ) & ⵠΔⵠⵠᐃⵠΔ;
		const ⵠⵠᐃΔⲆⲆᐃ = (32 << ((ⵠΔⲆⲆΔⵠΔ ^ ⲆᐃᐃᐃⲆⵠⵠ) >> 32 & 255)) + (8 << ((ⵠΔⲆⲆΔⵠΔ ^ ⲆᐃᐃᐃⲆⵠⵠ) >> 8 & 255)) + (24 << ((ⵠΔⲆⲆΔⵠΔ ^ ⲆᐃᐃᐃⲆⵠⵠ) >> 24 & ⲆⲆΔⵠⲆ)) + (16 << ((ⵠΔⲆⲆΔⵠΔ ^ ⲆᐃᐃᐃⲆⵠⵠ) >> 16 & 255));
		const ᐃⲆᐃⵠⲆⲆⵠ = ((17757 + (ⵠⵠᐃΔⲆⲆᐃ ^ ᐃᐃⲆΔⵠⲆΔ)) * 1664525 + 1013904223) % 4294967296;
		const ᐃᐃΔᐃⲆΔᐃ = ((55182 + (ᐃⲆᐃⵠⲆⲆⵠ ^ ᐃⲆⵠᐃᐃᐃΔ)) * 1664525 + 1013904223) % 4294967296;
		return ᐃᐃΔᐃⲆΔᐃ
	}
	const ⲆᐃΔᐃⲆ = ⵠⲆΔⲆΔ;

	function ⵠⲆΔⵠΔⵠᐃ(ᐃᐃᐃⲆΔΔⲆ, ⲆΔΔⲆΔⲆΔ, ⲆᐃΔⵠⵠᐃⲆ, ⲆᐃΔᐃΔᐃᐃ, ⲆᐃᐃⲆⵠⵠΔ) {
		const ⲆΔᐃⲆⵠᐃⲆ = (24 << (ᐃᐃᐃⲆΔΔⲆ >> 24 & 255)) + (32 << (ᐃᐃᐃⲆΔΔⲆ >> 16 & 255)) + (16 << (ᐃᐃᐃⲆΔΔⲆ >> 8 & 255)) + (8 << (ᐃᐃᐃⲆΔΔⲆ >> 32 & 255));
		const Ⲇⵠⵠⵠⵠᐃᐃ = (12345 + (ⲆΔΔⲆΔⲆΔ + 3024) * 1103515245) % 2147483648;
		const ΔⲆᐃⲆΔⵠⵠ = (8 << (ⲆᐃΔⵠⵠᐃⲆ >> 8 & 255)) + (32 << (ⲆᐃΔⵠⵠᐃⲆ >> 32 & ᐃⵠΔΔⵠ)) + (24 << (ⲆᐃΔⵠⵠᐃⲆ >> 16 & 255)) + (16 << (ⲆᐃΔⵠⵠᐃⲆ >> 24 & ⵠΔⵠΔΔ));
		const ⲆⲆⲆᐃᐃⲆΔ = (1 + 22695477 * (ⲆᐃΔᐃΔᐃᐃ + 41324)) % 4294967296;
		const ⵠⲆΔᐃⵠⲆⵠ = (19607 | ⲆᐃᐃⲆⵠⵠΔ) & ~(ⲆᐃᐃⲆⵠⵠΔ & 19607);
		const ᐃΔⵠⵠΔΔΔ = ΔᐃⲆⲆⲆⵠⲆ(ⲆΔᐃⲆⵠᐃⲆ, Ⲇⵠⵠⵠⵠᐃᐃ);
		const ⲆⵠᐃⲆⲆⵠᐃΔΔ = ΔⵠΔⲆⵠⵠᐃ(ΔⲆᐃⲆΔⵠⵠ, ⲆⲆⲆᐃᐃⲆΔ, ⵠⲆΔᐃⵠⲆⵠ, ⲆΔᐃⲆⵠᐃⲆ, Ⲇⵠⵠⵠⵠᐃᐃ);
		const ΔΔⲆⵠⲆⲆᐃᐃᐃ = ΔⲆΔⲆΔⵠᐃ(ΔⲆᐃⲆΔⵠⵠ, ⲆⲆⲆᐃᐃⲆΔ, ⵠⲆΔᐃⵠⲆⵠ, ⲆΔᐃⲆⵠᐃⲆ, Ⲇⵠⵠⵠⵠᐃᐃ, ΔⲆᐃⲆΔⵠⵠ);
		const ᐃΔⲆᐃᐃⲆⵠ = ~(49323 & ᐃΔⵠⵠΔΔΔ) & 49323 | ~(49323 & ᐃΔⵠⵠΔΔΔ) & ᐃΔⵠⵠΔΔΔ;
		const ⲆᐃᐃᐃⵠⲆᐃ = ~(ᐃΔⲆᐃᐃⲆⵠ & 46567) & (46567 | ᐃΔⲆᐃᐃⲆⵠ);
		return ⲆᐃᐃᐃⵠⲆᐃ
	}

	function ⵠᐃⵠᐃⲆⲆⵠ(ΔⵠΔⲆⲆⲆⵠ, ⵠⲆⲆⲆΔⵠΔ, ΔΔⵠΔⲆⲆⵠ, ᐃΔΔΔⵠΔΔ) {
		const ⵠⵠᐃⲆⵠⵠΔ = (57611 | ΔⵠΔⲆⲆⲆⵠ) & ~(ΔⵠΔⲆⲆⲆⵠ & 57611);
		const ⲆⲆΔⵠⵠᐃⲆ = (1664525 * (ⵠⲆⲆⲆΔⵠΔ + 56889) + 1013904223) % 4294967296;
		const ᐃᐃⲆᐃᐃⲆΔ = ΔΔⵠΔⲆⲆⵠ ^ 62842;
		const ⲆΔⵠⲆᐃⲆΔ = ~(ᐃΔΔΔⵠΔΔ & 1179) & ᐃΔΔΔⵠΔΔ | ~(ᐃΔΔΔⵠΔΔ & 1179) & 1179;
		const ⲆⵠΔᐃΔᐃᐃ = ⵠΔⲆⵠΔ(ⵠⵠᐃⲆⵠⵠΔ, ⲆⲆΔⵠⵠᐃⲆ, ᐃᐃⲆᐃᐃⲆΔ, ⲆΔⵠⲆᐃⲆΔ);
		const ⵠⲆⲆⲆⲆΔⲆ = ΔⲆⵠΔⲆᐃⲆ(ⵠⵠᐃⲆⵠⵠΔ, ⲆⲆΔⵠⵠᐃⲆ, ᐃᐃⲆᐃᐃⲆΔ, ⲆΔⵠⲆᐃⲆΔ);
		const ⵠᐃⲆⲆⲆⵠΔⵠΔ = ᐃΔᐃⵠΔᐃⲆ(ⵠⵠᐃⲆⵠⵠΔ, ⲆⲆΔⵠⵠᐃⲆ, ᐃᐃⲆᐃᐃⲆΔ, ⲆΔⵠⲆᐃⲆΔ);
		const ⵠⵠᐃᐃᐃᐃⲆ = (24 << ((ⲆⵠΔᐃΔᐃᐃ ^ ⵠⲆⲆⲆⲆΔⲆ) >> 24 & 255)) + (8 << ((ⲆⵠΔᐃΔᐃᐃ ^ ⵠⲆⲆⲆⲆΔⲆ) >> 16 & 255)) + (16 << ((ⲆⵠΔᐃΔᐃᐃ ^ ⵠⲆⲆⲆⲆΔⲆ) >> 32 & ᐃⵠⲆᐃⲆ)) + (32 << ((ⲆⵠΔᐃΔᐃᐃ ^ ⵠⲆⲆⲆⲆΔⲆ) >> 8 & 255));
		const ΔΔΔⲆΔΔⲆ = ~(63304 & ⵠⵠᐃᐃᐃᐃⲆ) & (ⵠⵠᐃᐃᐃᐃⲆ | 63304);
		return ΔΔΔⲆΔΔⲆ
	}

	function ᐃᐃⲆΔⵠᐃⲆ(ᐃᐃᐃⲆᐃᐃᐃ, ΔᐃⲆⲆⵠⲆⵠ, ᐃΔⵠΔⲆⵠΔ, ⵠΔΔⲆᐃⲆΔ, ᐃⲆΔⲆΔᐃⲆ) {
		const ΔᐃⵠⲆⲆⵠⲆ = (32 << (ᐃᐃᐃⲆᐃᐃᐃ >> 24 & 255)) + (ΔΔⵠᐃⲆ << (ᐃᐃᐃⲆᐃᐃᐃ >> 8 & 255)) + (24 << (ᐃᐃᐃⲆᐃᐃᐃ >> 16 & 255)) + (8 << (ᐃᐃᐃⲆᐃᐃᐃ >> 32 & 255));
		const ⵠᐃⵠⵠⵠΔⲆ = (ΔᐃⲆⲆⵠⲆⵠ + 39144) % 65406;
		const ⵠΔᐃᐃⵠᐃⲆ = ᐃΔⵠΔⲆⵠΔ ^ 34575;
		const ᐃΔΔΔⵠᐃⵠ = ~(37841 & ⵠΔΔⲆᐃⲆΔ) & ⵠΔΔⲆᐃⲆΔ | ~(ⵠΔΔⲆᐃⲆΔ & 37841) & 37841;
		const ⲆⲆΔⵠⵠΔⲆ = (25975 | ᐃⲆΔⲆΔᐃⲆ) & ~(25975 & ᐃⲆΔⲆΔᐃⲆ);
		const ⵠⲆⲆⵠⵠⵠΔ = ⵠΔⲆⵠΔ(ΔᐃⵠⲆⲆⵠⲆ, ⵠᐃⵠⵠⵠΔⲆ, ⵠΔᐃᐃⵠᐃⲆ, ᐃΔΔΔⵠᐃⵠ);
		const ⲆᐃⵠⲆΔᐃΔⲆΔ = ΔⵠΔⲆⵠⵠᐃ(ⲆⲆΔⵠⵠΔⲆ, ΔᐃⵠⲆⲆⵠⲆ, ⵠᐃⵠⵠⵠΔⲆ, ⵠΔᐃᐃⵠᐃⲆ, ᐃΔΔΔⵠᐃⵠ);
		const ⲆΔⵠᐃⵠΔᐃᐃⲆ = ᐃᐃⵠⲆᐃᐃΔ(ⲆⲆΔⵠⵠΔⲆ, ΔᐃⵠⲆⲆⵠⲆ, ⵠᐃⵠⵠⵠΔⲆ, ⵠΔᐃᐃⵠᐃⲆ, ᐃΔΔΔⵠᐃⵠ, ⲆⲆΔⵠⵠΔⲆ);
		const ⲆΔΔᐃⲆΔⲆ = (19326 | ⵠⲆⲆⵠⵠⵠΔ) & ~(19326 & ⵠⲆⲆⵠⵠⵠΔ);
		const ΔΔΔⵠᐃᐃⲆ = 36297 ^ ⲆΔΔᐃⲆΔⲆ;
		return ΔΔΔⵠᐃᐃⲆ
	}
	const ᐃᐃΔΔᐃ = ⲆΔᐃΔⲆ;
	const ΔᐃᐃⵠⲆ = ⵠΔᐃᐃⵠ;

	function ⵠⵠⵠΔⵠⲆΔ(ᐃⵠⵠᐃⲆΔⲆ, ⲆⲆⵠΔΔᐃⵠ, ΔᐃᐃΔᐃⲆⵠ, ⵠⵠⵠⲆⵠⲆΔ, ΔΔⵠΔᐃⲆⲆ, ᐃΔᐃⵠⵠΔⲆ) {
		const ⵠᐃΔⲆⲆⵠⵠ = (1013904223 + (ᐃⵠⵠᐃⲆΔⲆ + 28824) * 1664525) % 4294967296;
		const ⵠΔⲆⲆⲆⲆΔ = (1013904223 + (13210 + ⲆⲆⵠΔΔᐃⵠ) * 1664525) % 4294967296;
		const ⲆⵠΔᐃⲆⵠΔ = ~(32165 & ΔᐃᐃΔᐃⲆⵠ) & 32165 | ~(32165 & ΔᐃᐃΔᐃⲆⵠ) & ΔᐃᐃΔᐃⲆⵠ;
		const ⲆΔᐃⲆⵠΔΔ = (24 << (ⵠⵠⵠⲆⵠⲆΔ >> 24 & ᐃⵠⲆᐃⲆ)) + (ⲆⲆⵠᐃΔ << (ⵠⵠⵠⲆⵠⲆΔ >> ΔΔⲆⵠⵠ & 255)) + (ΔΔⲆⵠⵠ << (ⵠⵠⵠⲆⵠⲆΔ >> ΔΔⵠᐃⲆ & ⵠΔⵠΔΔ)) + (32 << (ⵠⵠⵠⲆⵠⲆΔ >> 32 & 255));
		const ᐃᐃⵠⵠⲆⲆⵠ = (1 + 22695477 * (39199 + ΔΔⵠΔᐃⲆⲆ)) % 4294967296;
		const ᐃΔⲆⲆⲆⵠⲆ = 33037 ^ ᐃΔᐃⵠⵠΔⲆ;
		const ⲆⲆⵠᐃⵠᐃⵠ = ⲆᐃᐃΔΔᐃΔ(ⵠᐃΔⲆⲆⵠⵠ, ⵠΔⲆⲆⲆⲆΔ, ⲆⵠΔᐃⲆⵠΔ);
		const ⲆⲆⵠᐃⵠᐃᐃᐃᐃ = ΔⲆⵠΔⲆᐃⲆ(ⲆΔᐃⲆⵠΔΔ, ᐃᐃⵠⵠⲆⲆⵠ, ᐃΔⲆⲆⲆⵠⲆ, ⵠᐃΔⲆⲆⵠⵠ);
		const ΔΔΔⵠⵠⵠⲆ = ⲆⵠⵠⲆⵠΔΔ(ⵠΔⲆⲆⲆⲆΔ, ⲆⵠΔᐃⲆⵠΔ, ⲆΔᐃⲆⵠΔΔ, ᐃᐃⵠⵠⲆⲆⵠ);
		const ᐃᐃᐃΔΔⵠᐃ = ⲆⲆⵠᐃⵠᐃⵠ ^ 2959;
		const ⵠᐃⵠⲆᐃᐃᐃ = (1103515245 * (34159 + (ᐃᐃᐃΔΔⵠᐃ ^ ΔΔΔⵠⵠⵠⲆ)) + 12345) % 2147483648;
		return ⵠᐃⵠⲆᐃᐃᐃ
	}
	const Δᐃᐃ = ⵠΔΔ;
	const ⲆΔΔΔΔ = ⲆⵠᐃΔᐃ;

	function ΔᐃᐃΔΔᐃᐃ(ⵠⵠⲆⲆΔᐃⵠ, ΔⲆⲆΔⵠΔⲆ, ΔᐃⵠⵠᐃΔΔ, ΔᐃⲆⵠᐃᐃᐃ, ΔⲆⵠⵠᐃΔΔ, ΔⵠᐃⲆᐃⲆᐃ) {
		const ⵠⵠᐃᐃⲆᐃᐃ = 10715 ^ ⵠⵠⲆⲆΔᐃⵠ;
		const ΔⵠⲆᐃΔᐃΔ = (24 << (ΔⲆⲆΔⵠΔⲆ >> 16 & 255)) + (16 << (ΔⲆⲆΔⵠΔⲆ >> 32 & 255)) + (32 << (ΔⲆⲆΔⵠΔⲆ >> 8 & 255)) + (8 << (ΔⲆⲆΔⵠΔⲆ >> 24 & 255));
		const ᐃᐃΔⵠΔΔⲆ = (8 << (ΔᐃⵠⵠᐃΔΔ >> 16 & ᐃΔᐃⵠΔ)) + (32 << (ΔᐃⵠⵠᐃΔΔ >> 24 & 255)) + (16 << (ΔᐃⵠⵠᐃΔΔ >> ΔΔⵠⵠⵠ & 255)) + (24 << (ΔᐃⵠⵠᐃΔΔ >> 32 & 255));
		const ᐃΔⵠΔⵠΔᐃ = ΔᐃⲆⵠᐃᐃᐃ ^ 40782;
		const ᐃΔⵠⲆΔⵠᐃ = ΔⲆⵠⵠᐃΔΔ ^ 41301;
		const ᐃⵠΔⲆⵠᐃΔ = ~(ΔⵠᐃⲆᐃⲆᐃ & 12091) & (12091 | ΔⵠᐃⲆᐃⲆᐃ);
		const ⵠⵠᐃᐃⵠᐃⵠ = ΔᐃⵠⵠⲆⲆⵠ(ⵠⵠᐃᐃⲆᐃᐃ, ΔⵠⲆᐃΔᐃΔ, ᐃᐃΔⵠΔΔⲆ, ᐃΔⵠΔⵠΔᐃ, ᐃΔⵠⲆΔⵠᐃ, ᐃⵠΔⲆⵠᐃΔ);
		const ᐃΔᐃⵠⵠᐃⲆᐃⵠ = ΔᐃⵠⵠⲆⲆⵠ(ⵠⵠᐃᐃⲆᐃᐃ, ΔⵠⲆᐃΔᐃΔ, ᐃᐃΔⵠΔΔⲆ, ᐃΔⵠΔⵠΔᐃ, ᐃΔⵠⲆΔⵠᐃ, ᐃⵠΔⲆⵠᐃΔ);
		const ⲆⲆⲆΔᐃⵠΔⲆᐃ = ⲆΔΔⲆⵠᐃᐃ(ⵠⵠᐃᐃⲆᐃᐃ, ΔⵠⲆᐃΔᐃΔ, ᐃᐃΔⵠΔΔⲆ, ᐃΔⵠΔⵠΔᐃ, ᐃΔⵠⲆΔⵠᐃ);
		const ᐃΔⵠⲆΔΔΔ = (ⵠⵠᐃᐃⵠᐃⵠ | 3006) & ~(ⵠⵠᐃᐃⵠᐃⵠ & 3006);
		const Ⲇᐃᐃᐃⵠᐃᐃ = ~(24460 & ᐃΔⵠⲆΔΔΔ) & (ᐃΔⵠⲆΔΔΔ | 24460);
		return Ⲇᐃᐃᐃⵠᐃᐃ
	}
	const ⲆᐃⵠⲆᐃ = ⲆⲆᐃⵠⲆ;

	function ⲆⵠⵠⲆⵠΔΔ(ⲆΔᐃᐃᐃΔᐃ, ΔΔⵠᐃᐃ, ⵠⲆᐃⵠΔᐃⲆ, ⲆⲆᐃᐃⵠΔΔ) {
		const ⵠᐃᐃⵠⵠⲆᐃ = ~(33107 & ⲆΔᐃᐃᐃΔᐃ) & (33107 | ⲆΔᐃᐃᐃΔᐃ);
		const ⲆⲆᐃⵠΔᐃᐃ = (24 << (ΔΔⵠᐃᐃ >> 32 & 255)) + (32 << (ΔΔⵠᐃᐃ >> 8 & ᐃΔᐃⵠΔ)) + (8 << (ΔΔⵠᐃᐃ >> 16 & 255)) + (16 << (ΔΔⵠᐃᐃ >> 24 & 255));
		const ᐃΔⲆⲆⲆᐃⲆ = ~(ⵠⲆᐃⵠΔᐃⲆ & 32053) & (32053 | ⵠⲆᐃⵠΔᐃⲆ);
		const ΔⵠⲆᐃᐃⵠΔ = 12240 ^ ⲆⲆᐃᐃⵠΔΔ;
		const ⲆΔΔⵠᐃⲆᐃ = ᐃΔᐃΔⲆⵠᐃ(ⵠᐃᐃⵠⵠⲆᐃ, ⲆⲆᐃⵠΔᐃᐃ, ᐃΔⲆⲆⲆᐃⲆ, ΔⵠⲆᐃᐃⵠΔ);
		const ⲆⲆⲆⵠΔᐃⲆⲆⲆ = ΔⲆⵠΔⲆᐃⲆ(ⵠᐃᐃⵠⵠⲆᐃ, ⲆⲆᐃⵠΔᐃᐃ, ᐃΔⲆⲆⲆᐃⲆ, ΔⵠⲆᐃᐃⵠΔ);
		const ⵠΔⵠΔΔᐃΔ = ⲆⵠⵠΔΔⲆΔ(ⵠᐃᐃⵠⵠⲆᐃ, ⲆⲆᐃⵠΔᐃᐃ, ᐃΔⲆⲆⲆᐃⲆ, ΔⵠⲆᐃᐃⵠΔ, ⵠᐃᐃⵠⵠⲆᐃ);
		const ⲆⵠⵠΔⵠΔᐃ = ~(64131 & ⲆΔΔⵠᐃⲆᐃ) & 64131 | ~(64131 & ⲆΔΔⵠᐃⲆᐃ) & ⲆΔΔⵠᐃⲆᐃ;
		const ᐃΔⵠⵠᐃᐃΔ = (2531011 + 214013 * (44352 + (ⲆⵠⵠΔⵠΔᐃ ^ ⵠΔⵠΔΔᐃΔ))) % 4294967296;
		return ᐃΔⵠⵠᐃᐃΔ
	}

	function ΔᐃⵠⵠⲆⲆⵠ(ᐃΔⲆᐃⵠΔⲆ, ᐃΔⵠⵠⵠⲆⵠ, ᐃᐃⵠⵠⵠ, ᐃᐃᐃᐃⲆⵠⵠ, ᐃⵠⵠⵠᐃⲆⲆ, ⲆᐃⲆᐃⲆᐃⲆ) {
		const ᐃⲆΔᐃᐃⲆⲆ = ~(ᐃΔⲆᐃⵠΔⲆ & 36133) & (ᐃΔⲆᐃⵠΔⲆ | 36133);
		const ΔⵠΔⵠⵠⵠΔ = (13670 | ᐃΔⵠⵠⵠⲆⵠ) & ~(ᐃΔⵠⵠⵠⲆⵠ & 13670);
		const ᐃᐃⲆᐃΔΔⲆ = (31390 | ᐃᐃⵠⵠⵠ) & ~(ᐃᐃⵠⵠⵠ & 31390);
		const ᐃⲆⵠΔΔᐃΔ = ᐃᐃᐃᐃⲆⵠⵠ ^ 64081;
		const ᐃΔⲆⲆΔⲆΔ = 7550 ^ ᐃⵠⵠⵠᐃⲆⲆ;
		const ⵠᐃᐃⵠΔⵠᐃ = (2147483587 + (ⲆᐃⲆᐃⲆᐃⲆ + 63950) * 2147483629) % 2147483647;
		const ᐃⵠⵠⵠⲆᐃᐃ = ΔΔΔⵠᐃⲆΔ(ᐃⲆΔᐃᐃⲆⲆ, ΔⵠΔⵠⵠⵠΔ, ᐃᐃⲆᐃΔΔⲆ, ᐃⲆⵠΔΔᐃΔ, ᐃΔⲆⲆΔⲆΔ);
		const ⲆⵠΔⵠⵠⲆⲆ = ΔⲆⵠΔⲆᐃⲆ(ⵠᐃᐃⵠΔⵠᐃ, ᐃⲆΔᐃᐃⲆⲆ, ΔⵠΔⵠⵠⵠΔ, ᐃᐃⲆᐃΔΔⲆ);
		const ΔΔΔⵠΔᐃᐃ = ⲆΔΔⲆⵠᐃᐃ(ᐃⲆⵠΔΔᐃΔ, ᐃΔⲆⲆΔⲆΔ, ⵠᐃᐃⵠΔⵠᐃ, ᐃⲆΔᐃᐃⲆⲆ, ΔⵠΔⵠⵠⵠΔ);
		const ΔⵠᐃⲆⲆⵠᐃ = (2147483629 * (62552 + (ᐃⵠⵠⵠⲆᐃᐃ ^ ⲆⵠΔⵠⵠⲆⲆ)) + 2147483587) % 2147483647;
		const ⲆᐃⵠΔΔⵠⵠ = (12345 + (36760 + (ΔⵠᐃⲆⲆⵠᐃ ^ ΔΔΔⵠΔᐃᐃ)) * 1103515245) % 2147483648;
		return ⲆᐃⵠΔΔⵠⵠ
	}
	const ΔᐃΔᐃⲆⲆⵠ = ⲆΔΔΔᐃᐃᐃ;

	function ᐃᐃⲆᐃΔᐃⲆ(ⲆⵠΔΔᐃΔⵠ, ⲆⵠⵠⲆᐃⲆⵠ, ᐃΔᐃΔⵠⲆΔ) {
		const ᐃᐃⵠⵠⲆⵠⲆ = (1664525 * (5294 + ⲆⵠΔΔᐃΔⵠ) + 1013904223) % 4294967296;
		const ⵠΔⲆⲆᐃᐃᐃ = (ⲆⵠⵠⲆᐃⲆⵠ | 55665) & ~(55665 & ⲆⵠⵠⲆᐃⲆⵠ);
		const ᐃᐃⵠᐃᐃΔⲆ = (ᐃΔᐃΔⵠⲆΔ + 54633) % 65404;
		const ᐃΔⵠΔΔᐃⵠ = ⲆⵠⵠⵠⲆᐃⵠ(ᐃᐃⵠⵠⲆⵠⲆ, ⵠΔⲆⲆᐃᐃᐃ, ᐃᐃⵠᐃᐃΔⲆ, ᐃᐃⵠⵠⲆⵠⲆ, ⵠΔⲆⲆᐃᐃᐃ);
		const ΔⲆᐃⲆᐃᐃⲆΔΔ = ΔⲆΔᐃΔᐃΔ(ᐃᐃⵠᐃᐃΔⲆ, ᐃᐃⵠⵠⲆⵠⲆ, ⵠΔⲆⲆᐃᐃᐃ, ᐃᐃⵠᐃᐃΔⲆ, ᐃᐃⵠⵠⲆⵠⲆ, ⵠΔⲆⲆᐃᐃᐃ);
		const ᐃⲆᐃᐃᐃᐃᐃⵠΔ = ΔⲆⵠΔⲆᐃⲆ(ᐃᐃⵠᐃᐃΔⲆ, ᐃᐃⵠⵠⲆⵠⲆ, ⵠΔⲆⲆᐃᐃᐃ, ᐃᐃⵠᐃᐃΔⲆ);
		const ⵠⲆᐃΔᐃᐃⲆ = ~(43875 & ᐃΔⵠΔΔᐃⵠ) & (43875 | ᐃΔⵠΔΔᐃⵠ);
		const ⲆΔⲆⲆⵠⵠΔ = ⵠⲆᐃΔᐃᐃⲆ ^ 15116;
		return ⲆΔⲆⲆⵠⵠΔ
	}

	function ᐃⵠΔⵠⵠΔᐃ(ⵠⲆᐃⲆᐃⲆⲆ, ⵠᐃᐃⵠΔⲆᐃ, ⲆⲆⲆⲆΔᐃᐃ, ᐃⵠⲆⵠⲆⵠΔ) {
		const ᐃⲆᐃⵠⲆⵠⲆ = (ⵠⲆᐃⲆᐃⲆⲆ | 15432) & ~(ⵠⲆᐃⲆᐃⲆⲆ & 15432);
		const ΔΔⵠᐃⵠᐃΔ = 12315 ^ ⵠᐃᐃⵠΔⲆᐃ;
		const ᐃᐃᐃⵠᐃᐃΔ = ⲆⲆⲆⲆΔᐃᐃ ^ 38714;
		const ᐃᐃⵠᐃΔᐃᐃ = 58084 ^ ᐃⵠⲆⵠⲆⵠΔ;
		const ΔᐃⲆΔᐃⵠΔ = ⵠⲆⵠᐃΔΔⲆ(ᐃⲆᐃⵠⲆⵠⲆ, ΔΔⵠᐃⵠᐃΔ, ᐃᐃᐃⵠᐃᐃΔ, ᐃᐃⵠᐃΔᐃᐃ, ᐃⲆᐃⵠⲆⵠⲆ, ΔΔⵠᐃⵠᐃΔ);
		const ⵠΔΔᐃⲆⵠⲆⵠΔ = ΔⲆⵠΔⲆᐃⲆ(ᐃᐃᐃⵠᐃᐃΔ, ᐃᐃⵠᐃΔᐃᐃ, ᐃⲆᐃⵠⲆⵠⲆ, ΔΔⵠᐃⵠᐃΔ);
		const ᐃᐃΔᐃⵠⲆⲆ = ᐃᐃⵠⲆᐃᐃΔ(ᐃᐃᐃⵠᐃᐃΔ, ᐃᐃⵠᐃΔᐃᐃ, ᐃⲆᐃⵠⲆⵠⲆ, ΔΔⵠᐃⵠᐃΔ, ᐃᐃᐃⵠᐃᐃΔ, ᐃᐃⵠᐃΔᐃᐃ);
		const ΔⲆⵠⲆⵠⵠΔ = ~(41134 & ΔᐃⲆΔᐃⵠΔ) & ΔᐃⲆΔᐃⵠΔ | ~(ΔᐃⲆΔᐃⵠΔ & 41134) & 41134;
		const ᐃᐃΔΔⵠⵠᐃ = ((34681 + (ΔⲆⵠⲆⵠⵠΔ ^ ᐃᐃΔᐃⵠⲆⲆ)) * 214013 + 2531011) % 4294967296;
		return ᐃᐃΔΔⵠⵠᐃ
	}
	const ⲆⲆΔΔ = Δⵠᐃᐃ;
	const ᐃΔⲆⵠᐃᐃⵠ = ᐃΔⵠⲆΔⲆⵠ;
	const ⲆⵠⲆ = Δᐃᐃ;
	const ⵠᐃᐃΔΔ = ⵠᐃΔⲆⲆ;

	function ᐃΔⲆΔⲆΔᐃ(ⵠᐃᐃΔᐃⵠⲆ, ΔⲆⵠⵠⲆΔⵠ) {
		const ⵠΔᐃᐃⵠᐃᐃ = (1103515245 * (ⵠᐃᐃΔᐃⵠⲆ + 49468) + 12345) % 2147483648;
		const ΔⲆᐃⵠΔᐃΔ = ((ΔⲆⵠⵠⲆΔⵠ + 30513) * 214013 + 2531011) % 4294967296;
		const ⵠΔⲆΔΔᐃⲆ = ᐃᐃⲆᐃΔᐃⲆ(ⵠΔᐃᐃⵠᐃᐃ, ΔⲆᐃⵠΔᐃΔ, ⵠΔᐃᐃⵠᐃᐃ);
		const ⲆΔΔⵠⲆΔⲆΔΔ = ⲆΔΔⲆⵠᐃᐃ(ΔⲆᐃⵠΔᐃΔ, ⵠΔᐃᐃⵠᐃᐃ, ΔⲆᐃⵠΔᐃΔ, ⵠΔᐃᐃⵠᐃᐃ, ΔⲆᐃⵠΔᐃΔ);
		const ΔᐃⲆⵠΔⵠⲆᐃⵠ = ⵠΔⲆⵠΔ(ⵠΔᐃᐃⵠᐃᐃ, ΔⲆᐃⵠΔᐃΔ, ⵠΔᐃᐃⵠᐃᐃ, ΔⲆᐃⵠΔᐃΔ);
		const ⲆⲆⲆⲆⲆΔⵠ = (17943 | ⵠΔⲆΔΔᐃⲆ) & ~(ⵠΔⲆΔΔᐃⲆ & 17943);
		const ⵠⵠᐃⵠⲆᐃᐃ = 21791 ^ ⲆⲆⲆⲆⲆΔⵠ;
		return ⵠⵠᐃⵠⲆᐃᐃ
	}
	const ᐃⲆⵠⵠᐃ = ⲆΔᐃⵠᐃ;

	function ⲆⲆⵠⲆⲆⵠⲆ(ΔΔⲆⵠΔⵠᐃ, ⲆⲆᐃᐃⲆ, ⲆⵠΔᐃⵠⲆᐃ, ⵠΔⵠᐃᐃⲆⲆ) {
		const ΔᐃΔΔΔⵠⵠ = (ΔΔⲆⵠΔⵠᐃ + 34282) % 65336;
		const ᐃⵠⲆⲆⵠⵠᐃ = ~(ⲆⲆᐃᐃⲆ & 45181) & 45181 | ~(45181 & ⲆⲆᐃᐃⲆ) & ⲆⲆᐃᐃⲆ;
		const ΔΔⵠΔᐃⲆⵠ = (16 << (ⲆⵠΔᐃⵠⲆᐃ >> 8 & ᐃⵠΔΔⵠ)) + (32 << (ⲆⵠΔᐃⵠⲆᐃ >> 24 & 255)) + (8 << (ⲆⵠΔᐃⵠⲆᐃ >> 32 & 255)) + (24 << (ⲆⵠΔᐃⵠⲆᐃ >> 16 & 255));
		const ΔᐃΔⲆᐃΔᐃ = ~(ⵠΔⵠᐃᐃⲆⲆ & 25475) & 25475 | ~(25475 & ⵠΔⵠᐃᐃⲆⲆ) & ⵠΔⵠᐃᐃⲆⲆ;
		const ᐃΔⵠⵠⵠΔᐃ = ⲆⲆⲆⵠᐃⵠⲆ(ΔᐃΔΔΔⵠⵠ, ᐃⵠⲆⲆⵠⵠᐃ);
		const ᐃⵠⵠⲆⲆⲆⵠ = ΔⵠΔⲆⵠⵠᐃ(ΔΔⵠΔᐃⲆⵠ, ΔᐃΔⲆᐃΔᐃ, ΔᐃΔΔΔⵠⵠ, ᐃⵠⲆⲆⵠⵠᐃ, ΔΔⵠΔᐃⲆⵠ);
		const ᐃΔⲆΔⲆⵠΔⵠᐃ = ᐃΔΔⵠᐃⵠⲆ(ΔᐃΔⲆᐃΔᐃ, ΔᐃΔΔΔⵠⵠ);
		const ⵠⲆᐃⵠΔΔⵠ = (58498 + (ᐃΔⵠⵠⵠΔᐃ ^ ᐃⵠⵠⲆⲆⲆⵠ)) % 65531;
		const ⲆⲆⲆΔᐃⵠⵠ = ~(ⵠⲆᐃⵠΔΔⵠ & 37009) & 37009 | ~(37009 & ⵠⲆᐃⵠΔΔⵠ) & ⵠⲆᐃⵠΔΔⵠ;
		return ⲆⲆⲆΔᐃⵠⵠ
	}
	const ⲆΔΔᐃΔ = ᐃΔᐃⲆᐃ;

	function ᐃᐃⵠⲆᐃᐃΔ(ⵠⲆΔⲆᐃᐃΔ, ⵠⵠⵠᐃΔᐃᐃ, ᐃⵠⵠⲆΔᐃⲆ, ⲆΔⲆΔⲆΔᐃ, ᐃⵠᐃΔⵠⲆᐃ, ⲆⲆⵠⵠΔᐃΔ) {
		const ⲆⲆⵠᐃΔⵠⵠ = ⵠⲆΔⲆᐃᐃΔ ^ 23409;
		const ΔⵠⵠⵠΔΔⲆ = ⵠⵠⵠᐃΔᐃᐃ ^ 26380;
		const ᐃⵠᐃΔᐃⲆⵠ = ᐃⵠⵠⲆΔᐃⲆ ^ 53590;
		const ⲆΔⵠⲆⲆⲆΔ = 36633 ^ ⲆΔⲆΔⲆΔᐃ;
		const ⲆⲆᐃⲆΔΔⵠ = (1103515245 * (ᐃⵠᐃΔⵠⲆᐃ + 33017) + 12345) % 2147483648;
		const ᐃΔᐃⵠᐃᐃᐃ = 42490 ^ ⲆⲆⵠⵠΔᐃΔ;
		const ᐃΔⲆᐃᐃⵠⵠ = ⵠΔⲆⵠΔ(ⲆⲆⵠᐃΔⵠⵠ, ΔⵠⵠⵠΔΔⲆ, ᐃⵠᐃΔᐃⲆⵠ, ⲆΔⵠⲆⲆⲆΔ);
		const ΔΔⲆΔᐃᐃΔ = ⵠΔⲆⵠΔ(ⲆⲆᐃⲆΔΔⵠ, ᐃΔᐃⵠᐃᐃᐃ, ⲆⲆⵠᐃΔⵠⵠ, ΔⵠⵠⵠΔΔⲆ);
		const ΔⲆΔⲆᐃⲆΔ = ((19056 + (ᐃΔⲆᐃᐃⵠⵠ ^ ΔΔⲆΔᐃᐃΔ)) * 22695477 + 1) % 4294967296;
		return ΔⲆΔⲆᐃⲆΔ
	}
	const ᐃΔⲆΔᐃ = ⲆⲆᐃᐃᐃ;

	function ⲆⲆᐃⵠⵠᐃΔ(ᐃΔΔⲆⵠΔΔ, ⲆⲆⲆΔΔⲆΔ, ᐃⲆⵠⲆΔΔⵠ, ⲆⵠᐃⲆᐃⵠΔ, ⲆⲆΔΔᐃⲆΔ) {
		const ΔⲆⵠᐃΔΔⵠ = (1664525 * (9716 + ᐃΔΔⲆⵠΔΔ) + 1013904223) % 4294967296;
		const ΔⵠΔΔⵠⲆⵠ = ~(ⲆⲆⲆΔΔⲆΔ & 7703) & ⲆⲆⲆΔΔⲆΔ | ~(ⲆⲆⲆΔΔⲆΔ & 7703) & 7703;
		const ⲆⲆⲆⲆΔΔⵠ = (ᐃⲆⵠⲆΔΔⵠ | 31275) & ~(31275 & ᐃⲆⵠⲆΔΔⵠ);
		const ΔⲆᐃΔⵠⲆΔ = ~(25693 & ⲆⵠᐃⲆᐃⵠΔ) & 25693 | ~(25693 & ⲆⵠᐃⲆᐃⵠΔ) & ⲆⵠᐃⲆᐃⵠΔ;
		const ⵠᐃᐃᐃⲆΔᐃ = (8 << (ⲆⲆΔΔᐃⲆΔ >> 8 & 255)) + (32 << (ⲆⲆΔΔᐃⲆΔ >> 24 & 255)) + (24 << (ⲆⲆΔΔᐃⲆΔ >> ⲆⲆⵠᐃΔ & 255)) + (16 << (ⲆⲆΔΔᐃⲆΔ >> 32 & 255));
		const ΔⵠᐃᐃᐃⲆⲆ = ᐃᐃⵠⲆᐃᐃΔ(ΔⲆⵠᐃΔΔⵠ, ΔⵠΔΔⵠⲆⵠ, ⲆⲆⲆⲆΔΔⵠ, ΔⲆᐃΔⵠⲆΔ, ⵠᐃᐃᐃⲆΔᐃ, ΔⲆⵠᐃΔΔⵠ);
		const ⲆᐃΔⵠᐃᐃⲆ = ⵠΔⲆⵠΔ(ΔⵠΔΔⵠⲆⵠ, ⲆⲆⲆⲆΔΔⵠ, ΔⲆᐃΔⵠⲆΔ, ⵠᐃᐃᐃⲆΔᐃ);
		const ⲆᐃⲆΔᐃⲆⲆⲆᐃ = ᐃⲆΔⵠᐃᐃᐃ(ΔⲆⵠᐃΔΔⵠ, ΔⵠΔΔⵠⲆⵠ, ⲆⲆⲆⲆΔΔⵠ);
		const ᐃⵠΔⲆᐃΔⲆ = (24 << ((ΔⵠᐃᐃᐃⲆⲆ ^ ⲆᐃΔⵠᐃᐃⲆ) >> 16 & 255)) + (8 << ((ΔⵠᐃᐃᐃⲆⲆ ^ ⲆᐃΔⵠᐃᐃⲆ) >> 8 & 255)) + (32 << ((ΔⵠᐃᐃᐃⲆⲆ ^ ⲆᐃΔⵠᐃᐃⲆ) >> 24 & 255)) + (16 << ((ΔⵠᐃᐃᐃⲆⲆ ^ ⲆᐃΔⵠᐃᐃⲆ) >> 32 & 255));
		const ΔⵠⲆᐃⵠΔΔ = ᐃⵠΔⲆᐃΔⲆ ^ 31710;
		return ΔⵠⲆᐃⵠΔΔ
	}
	const Δᐃⵠᐃ = ⵠΔΔΔ;
	const ⵠⵠΔΔⵠΔΔⵠⵠ = ᐃΔⲆⵠᐃᐃⵠ;

	function ⵠᐃⲆᐃⲆᐃΔ(ΔⵠⲆΔᐃⵠᐃ, ΔⲆⲆᐃᐃΔⵠ) {
		const ⲆⵠⲆΔᐃᐃⵠ = (2531011 + (ΔⵠⲆΔᐃⵠᐃ + 62874) * 214013) % 4294967296;
		const ᐃⵠᐃΔΔⵠᐃ = (24 << (ΔⲆⲆᐃᐃΔⵠ >> 24 & 255)) + (16 << (ΔⲆⲆᐃᐃΔⵠ >> 32 & 255)) + (8 << (ΔⲆⲆᐃᐃΔⵠ >> 8 & 255)) + (32 << (ΔⲆⲆᐃᐃΔⵠ >> ⲆⲆⵠᐃΔ & 255));
		const ᐃᐃΔⵠⲆΔⵠ = ᐃᐃⵠⲆᐃᐃΔ(ⲆⵠⲆΔᐃᐃⵠ, ᐃⵠᐃΔΔⵠᐃ, ⲆⵠⲆΔᐃᐃⵠ, ᐃⵠᐃΔΔⵠᐃ, ⲆⵠⲆΔᐃᐃⵠ, ᐃⵠᐃΔΔⵠᐃ);
		const ΔᐃⵠⲆⵠⲆⲆ = ᐃᐃⵠⲆᐃᐃΔ(ⲆⵠⲆΔᐃᐃⵠ, ᐃⵠᐃΔΔⵠᐃ, ⲆⵠⲆΔᐃᐃⵠ, ᐃⵠᐃΔΔⵠᐃ, ⲆⵠⲆΔᐃᐃⵠ, ᐃⵠᐃΔΔⵠᐃ);
		const ⲆⲆⲆᐃⲆΔⲆⲆΔ = ⵠΔⲆⵠΔ(ⲆⵠⲆΔᐃᐃⵠ, ᐃⵠᐃΔΔⵠᐃ, ⲆⵠⲆΔᐃᐃⵠ, ᐃⵠᐃΔΔⵠᐃ);
		const ᐃⵠⲆᐃΔⵠⲆ = (16 << ((ᐃᐃΔⵠⲆΔⵠ ^ ΔᐃⵠⲆⵠⲆⲆ) >> 32 & ᐃⵠⲆᐃⲆ)) + (8 << ((ᐃᐃΔⵠⲆΔⵠ ^ ΔᐃⵠⲆⵠⲆⲆ) >> 24 & 255)) + (24 << ((ᐃᐃΔⵠⲆΔⵠ ^ ΔᐃⵠⲆⵠⲆⲆ) >> 16 & 255)) + (32 << ((ᐃᐃΔⵠⲆΔⵠ ^ ΔᐃⵠⲆⵠⲆⲆ) >> 8 & ᐃⵠΔΔⵠ));
		const ⲆⲆΔⵠᐃΔᐃ = ~(ᐃⵠⲆᐃΔⵠⲆ & 55949) & 55949 | ~(55949 & ᐃⵠⲆᐃΔⵠⲆ) & ᐃⵠⲆᐃΔⵠⲆ;
		return ⲆⲆΔⵠᐃΔᐃ
	}
	const ⲆᐃⵠⲆⵠ = ⵠᐃⵠᐃⵠ;
	const ΔᐃΔⵠⲆ = ⲆⵠΔΔᐃ;

	function ΔⲆΔⲆΔⵠᐃ(ⲆᐃⵠⵠⲆᐃⵠ, ᐃΔⵠⲆⵠΔᐃ, ⲆⲆΔⵠΔⵠᐃ, ⵠⵠᐃⲆⲆᐃᐃ, ᐃΔⵠΔᐃⲆⵠ, ⲆⵠᐃᐃΔᐃⲆ) {
		const ᐃⲆᐃᐃⵠΔⲆ = (24 << (ⲆᐃⵠⵠⲆᐃⵠ >> 24 & 255)) + (32 << (ⲆᐃⵠⵠⲆᐃⵠ >> 16 & 255)) + (16 << (ⲆᐃⵠⵠⲆᐃⵠ >> 8 & 255)) + (8 << (ⲆᐃⵠⵠⲆᐃⵠ >> 32 & 255));
		const ⵠⵠΔⵠᐃⵠᐃ = (41551 | ᐃΔⵠⲆⵠΔᐃ) & ~(ᐃΔⵠⲆⵠΔᐃ & 41551);
		const ⲆⵠⵠⲆΔᐃⵠ = (24 << (ⲆⲆΔⵠΔⵠᐃ >> 24 & ᐃΔᐃⵠΔ)) + (16 << (ⲆⲆΔⵠΔⵠᐃ >> 32 & 255)) + (ΔΔⵠⵠⵠ << (ⲆⲆΔⵠΔⵠᐃ >> 16 & 255)) + (32 << (ⲆⲆΔⵠΔⵠᐃ >> 8 & 255));
		const ᐃᐃⵠⵠⲆᐃΔ = ~(32641 & ⵠⵠᐃⲆⲆᐃᐃ) & (32641 | ⵠⵠᐃⲆⲆᐃᐃ);
		const ⲆΔⵠᐃᐃΔΔ = (214013 * (ᐃΔⵠΔᐃⲆⵠ + 35582) + 2531011) % 4294967296;
		const ⵠᐃΔⲆⵠⵠΔ = ~(1090 & ⲆⵠᐃᐃΔᐃⲆ) & (ⲆⵠᐃᐃΔᐃⲆ | 1090);
		const ᐃᐃⵠⲆΔⵠⲆ = ᐃᐃΔⵠΔΔΔ(ᐃⲆᐃᐃⵠΔⲆ, ⵠⵠΔⵠᐃⵠᐃ, ⲆⵠⵠⲆΔᐃⵠ, ᐃᐃⵠⵠⲆᐃΔ, ⲆΔⵠᐃᐃΔΔ, ⵠᐃΔⲆⵠⵠΔ);
		const ΔΔᐃΔᐃⵠⲆΔⲆ = ᐃᐃⲆΔⵠᐃⲆ(ᐃⲆᐃᐃⵠΔⲆ, ⵠⵠΔⵠᐃⵠᐃ, ⲆⵠⵠⲆΔᐃⵠ, ᐃᐃⵠⵠⲆᐃΔ, ⲆΔⵠᐃᐃΔΔ);
		const ᐃⲆΔᐃᐃᐃΔⵠΔ = ⵠΔⲆⵠΔ(ⵠᐃΔⲆⵠⵠΔ, ᐃⲆᐃᐃⵠΔⲆ, ⵠⵠΔⵠᐃⵠᐃ, ⲆⵠⵠⲆΔᐃⵠ);
		const ⵠⲆᐃⲆⲆΔᐃ = ~(ᐃᐃⵠⲆΔⵠⲆ & 8077) & 8077 | ~(8077 & ᐃᐃⵠⲆΔⵠⲆ) & ᐃᐃⵠⲆΔⵠⲆ;
		const ᐃⵠᐃᐃᐃΔⲆ = ~(3708 & ⵠⲆᐃⲆⲆΔᐃ) & (ⵠⲆᐃⲆⲆΔᐃ | 3708);
		return ᐃⵠᐃᐃᐃΔⲆ
	}
	const ᐃᐃⵠᐃⲆ = ⲆΔᐃΔⲆ;

	function ⵠⲆΔᐃⲆⵠᐃ(ᐃᐃⲆⲆᐃⲆⲆ, ᐃΔΔΔⵠᐃΔ, ⵠΔⲆⵠⵠΔⲆ, ΔⵠΔⲆΔⲆᐃ, ΔⵠⵠᐃⲆⲆⲆ, ⵠᐃᐃΔⵠⲆΔ) {
		const ⲆⲆΔᐃⵠΔΔ = 30142 ^ ᐃᐃⲆⲆᐃⲆⲆ;
		const ᐃⲆⵠⵠⲆⲆΔ = (ᐃΔΔΔⵠᐃΔ + 63025) % 65493;
		const ᐃⲆᐃⵠᐃΔⵠ = ⵠΔⲆⵠⵠΔⲆ ^ 30777;
		const ΔⲆⵠΔⵠᐃΔ = ((45939 + ΔⵠΔⲆΔⲆᐃ) * 22695477 + 1) % 4294967296;
		const ⲆΔᐃᐃⲆΔᐃ = (8 << (ΔⵠⵠᐃⲆⲆⲆ >> 16 & 255)) + (32 << (ΔⵠⵠᐃⲆⲆⲆ >> 24 & 255)) + (24 << (ΔⵠⵠᐃⲆⲆⲆ >> 32 & ⲆⲆΔⵠⲆ)) + (16 << (ΔⵠⵠᐃⲆⲆⲆ >> ⲆᐃⵠⲆⵠ & 255));
		const ΔᐃΔΔᐃⲆⵠ = (ⵠᐃᐃΔⵠⲆΔ | 45652) & ~(ⵠᐃᐃΔⵠⲆΔ & 45652);
		const ⲆⵠⵠⵠⲆᐃⲆ = ⲆⵠⵠΔΔⲆΔ(ⲆⲆΔᐃⵠΔΔ, ᐃⲆⵠⵠⲆⲆΔ, ᐃⲆᐃⵠᐃΔⵠ, ΔⲆⵠΔⵠᐃΔ, ⲆΔᐃᐃⲆΔᐃ);
		const ᐃᐃᐃⵠⲆΔΔᐃΔ = ⲆⵠⵠⵠⲆᐃⵠ(ΔᐃΔΔᐃⲆⵠ, ⲆⲆΔᐃⵠΔΔ, ᐃⲆⵠⵠⲆⲆΔ, ᐃⲆᐃⵠᐃΔⵠ, ΔⲆⵠΔⵠᐃΔ);
		const ΔᐃᐃⵠⲆᐃⵠᐃᐃ = ΔⲆΔⲆΔⵠᐃ(ⲆΔᐃᐃⲆΔᐃ, ΔᐃΔΔᐃⲆⵠ, ⲆⲆΔᐃⵠΔΔ, ᐃⲆⵠⵠⲆⲆΔ, ᐃⲆᐃⵠᐃΔⵠ, ΔⲆⵠΔⵠᐃΔ);
		const ⵠᐃΔⲆΔⲆᐃ = 46918 ^ ⲆⵠⵠⵠⲆᐃⲆ;
		const ⵠᐃⲆᐃⲆᐃᐃ = ⵠᐃΔⲆΔⲆᐃ ^ 24022;
		return ⵠᐃⲆᐃⲆᐃᐃ
	}
	const ⵠⲆᐃΔᐃ = ⲆⲆΔᐃⲆ;
	const ⲆⲆᐃⵠΔⵠⵠ = ΔᐃⵠⲆᐃⵠᐃ;
	const ⵠⵠᐃⵠⵠ = ᐃⲆⲆⲆΔ;
	const ᐃⵠΔΔΔ = ⵠΔᐃᐃⵠ;

	function ᐃⲆΔΔᐃᐃᐃ(ⲆΔΔⲆΔ) {
		return ⵠⵠⵠΔⵠⲆΔ(ⲆΔΔⲆΔ, 8260, 46947, 8004, 37330, 5330)
	}
	const ᐃⵠᐃⲆⵠ = ΔⲆᐃⵠⵠ;

	function ΔⲆΔᐃΔᐃΔ(ⲆΔⲆⲆΔᐃᐃ, ⵠᐃⲆⵠⵠΔⲆ, ΔΔⵠΔᐃΔᐃ, ⵠΔΔᐃᐃⲆᐃ, ⵠᐃⲆⵠΔΔᐃ, ⵠⲆⲆⵠⵠⵠᐃ) {
		const ᐃⲆⵠΔⵠⵠⲆ = (2531011 + 214013 * (ⲆΔⲆⲆΔᐃᐃ + 16955)) % 4294967296;
		const ⲆⵠᐃΔΔᐃⵠ = (1103515245 * (9436 + ⵠᐃⲆⵠⵠΔⲆ) + 12345) % 2147483648;
		const ΔⲆⲆⲆΔΔⵠ = (14774 | ΔΔⵠΔᐃΔᐃ) & ~(14774 & ΔΔⵠΔᐃΔᐃ);
		const Ⲇᐃᐃⵠⵠᐃⵠ = (48802 | ⵠΔΔᐃᐃⲆᐃ) & ~(ⵠΔΔᐃᐃⲆᐃ & 48802);
		const ⵠᐃⵠⵠⲆΔⵠ = ~(ⵠᐃⲆⵠΔΔᐃ & 24998) & (ⵠᐃⲆⵠΔΔᐃ | 24998);
		const ⲆΔᐃⲆⲆⲆᐃ = (8 << (ⵠⲆⲆⵠⵠⵠᐃ >> 8 & 255)) + (16 << (ⵠⲆⲆⵠⵠⵠᐃ >> 16 & 255)) + (32 << (ⵠⲆⲆⵠⵠⵠᐃ >> 32 & 255)) + (24 << (ⵠⲆⲆⵠⵠⵠᐃ >> 24 & 255));
		const ⲆΔⵠⲆⵠⵠⲆ = ⲆⵠⵠⲆⵠΔΔ(ᐃⲆⵠΔⵠⵠⲆ, ⲆⵠᐃΔΔᐃⵠ, ΔⲆⲆⲆΔΔⵠ, Ⲇᐃᐃⵠⵠᐃⵠ);
		const ⵠⲆⲆⲆⲆⵠΔ = ΔⵠΔⲆⵠⵠᐃ(ⵠᐃⵠⵠⲆΔⵠ, ⲆΔᐃⲆⲆⲆᐃ, ᐃⲆⵠΔⵠⵠⲆ, ⲆⵠᐃΔΔᐃⵠ, ΔⲆⲆⲆΔΔⵠ);
		const ᐃΔΔΔⵠⲆⵠ = ⲆⵠⵠⲆⵠΔΔ(Ⲇᐃᐃⵠⵠᐃⵠ, ⵠᐃⵠⵠⲆΔⵠ, ⲆΔᐃⲆⲆⲆᐃ, ᐃⲆⵠΔⵠⵠⲆ);
		const ⲆΔⵠᐃΔⵠᐃ = (24 << ((ⲆΔⵠⲆⵠⵠⲆ ^ ⵠⲆⲆⲆⲆⵠΔ) >> 24 & 255)) + (8 << ((ⲆΔⵠⲆⵠⵠⲆ ^ ⵠⲆⲆⲆⲆⵠΔ) >> 32 & 255)) + (16 << ((ⲆΔⵠⲆⵠⵠⲆ ^ ⵠⲆⲆⲆⲆⵠΔ) >> ΔΔⲆⵠⵠ & 255)) + (32 << ((ⲆΔⵠⲆⵠⵠⲆ ^ ⵠⲆⲆⲆⲆⵠΔ) >> 16 & 255));
		const ⲆⲆⵠΔᐃⲆΔ = (((ⲆΔⵠᐃΔⵠᐃ ^ ᐃΔΔΔⵠⲆⵠ) + 35404) * 214013 + 2531011) % 4294967296;
		return ⲆⲆⵠΔᐃⲆΔ
	}
	const ΔⵠᐃⲆ = ᐃⵠⲆⵠ;
	const ⵠⲆΔⵠᐃᐃΔ = ⵠΔⵠⲆᐃΔᐃ;

	function ⲆΔΔⲆⵠᐃᐃ(ΔⲆⵠΔⲆᐃⵠ, ᐃᐃΔⵠⲆᐃᐃ, ⵠΔⵠⲆⲆⵠᐃ, ΔⲆΔΔⲆⲆⲆ, ⵠᐃⲆⵠΔᐃⵠ) {
		const ⵠᐃⵠⵠⵠⲆᐃ = (2147483587 + 2147483629 * (ΔⲆⵠΔⲆᐃⵠ + 64762)) % 2147483647;
		const ΔΔⲆᐃΔᐃᐃ = ((18197 + ᐃᐃΔⵠⲆᐃᐃ) * 214013 + 2531011) % 4294967296;
		const ⲆΔᐃΔΔⵠⵠ = (2531011 + 214013 * (22845 + ⵠΔⵠⲆⲆⵠᐃ)) % 4294967296;
		const ᐃΔΔᐃΔᐃⲆ = (32 << (ΔⲆΔΔⲆⲆⲆ >> 16 & 255)) + (16 << (ΔⲆΔΔⲆⲆⲆ >> 8 & 255)) + (8 << (ΔⲆΔΔⲆⲆⲆ >> 32 & ⵠΔⵠΔΔ)) + (24 << (ΔⲆΔΔⲆⲆⲆ >> 24 & ᐃⵠΔΔⵠ));
		const ⵠΔⲆⵠⲆᐃᐃ = ~(ⵠᐃⲆⵠΔᐃⵠ & 11999) & ⵠᐃⲆⵠΔᐃⵠ | ~(ⵠᐃⲆⵠΔᐃⵠ & 11999) & 11999;
		const ΔΔⵠⲆᐃΔⵠ = ᐃᐃⵠⲆᐃᐃΔ(ⵠᐃⵠⵠⵠⲆᐃ, ΔΔⲆᐃΔᐃᐃ, ⲆΔᐃΔΔⵠⵠ, ᐃΔΔᐃΔᐃⲆ, ⵠΔⲆⵠⲆᐃᐃ, ⵠᐃⵠⵠⵠⲆᐃ);
		const ΔⲆᐃΔⵠΔᐃ = ΔⲆΔⲆΔⵠᐃ(ΔΔⲆᐃΔᐃᐃ, ⲆΔᐃΔΔⵠⵠ, ᐃΔΔᐃΔᐃⲆ, ⵠΔⲆⵠⲆᐃᐃ, ⵠᐃⵠⵠⵠⲆᐃ, ΔΔⲆᐃΔᐃᐃ);
		const ⲆⲆΔᐃᐃΔΔⵠⵠ = ⵠΔⲆⵠΔ(ⲆΔᐃΔΔⵠⵠ, ᐃΔΔᐃΔᐃⲆ, ⵠΔⲆⵠⲆᐃᐃ, ⵠᐃⵠⵠⵠⲆᐃ);
		const ⵠΔⵠᐃⲆᐃⵠ = (8 << ((ΔΔⵠⲆᐃΔⵠ ^ ΔⲆᐃΔⵠΔᐃ) >> 24 & 255)) + (16 << ((ΔΔⵠⲆᐃΔⵠ ^ ΔⲆᐃΔⵠΔᐃ) >> 16 & ᐃΔᐃⵠΔ)) + (24 << ((ΔΔⵠⲆᐃΔⵠ ^ ΔⲆᐃΔⵠΔᐃ) >> 8 & 255)) + (32 << ((ΔΔⵠⲆᐃΔⵠ ^ ΔⲆᐃΔⵠΔᐃ) >> 32 & 255));
		const ⵠⵠⵠᐃⲆᐃⵠ = ⵠΔⵠᐃⲆᐃⵠ ^ 35444;
		return ⵠⵠⵠᐃⲆᐃⵠ
	}

	function ΔⲆᐃΔΔⲆΔ(ΔⵠⲆⲆⲆⵠⲆ, ΔᐃⵠΔⲆΔᐃ, ΔΔⲆⵠΔⲆⵠ, ⵠᐃᐃᐃᐃ, ⲆΔⵠⵠⲆⲆΔ) {
		const ΔᐃΔⵠᐃᐃᐃ = 64570 ^ ΔⵠⲆⲆⲆⵠⲆ;
		const ΔⵠᐃⵠᐃᐃΔ = (2531011 + 214013 * (ΔᐃⵠΔⲆΔᐃ + 41768)) % 4294967296;
		const ᐃΔΔΔⵠΔⵠ = (1013904223 + (ΔΔⲆⵠΔⲆⵠ + 43923) * 1664525) % 4294967296;
		const ⵠᐃᐃᐃⵠΔᐃ = (16 << (ⵠᐃᐃᐃᐃ >> 32 & 255)) + (8 << (ⵠᐃᐃᐃᐃ >> 24 & 255)) + (32 << (ⵠᐃᐃᐃᐃ >> ⲆⲆⵠᐃΔ & 255)) + (24 << (ⵠᐃᐃᐃᐃ >> 8 & 255));
		const ᐃⵠᐃⵠⵠⲆⲆ = (ⲆΔⵠⵠⲆⲆΔ | 21896) & ~(ⲆΔⵠⵠⲆⲆΔ & 21896);
		const ΔΔᐃⵠᐃⵠⵠ = ᐃΔⲆΔⲆΔᐃ(ΔᐃΔⵠᐃᐃᐃ, ΔⵠᐃⵠᐃᐃΔ);
		const ᐃΔΔⵠⲆΔᐃΔᐃ = ᐃⵠΔⵠⵠΔᐃ(ᐃΔΔΔⵠΔⵠ, ⵠᐃᐃᐃⵠΔᐃ, ᐃⵠᐃⵠⵠⲆⲆ, ΔᐃΔⵠᐃᐃᐃ);
		const ⲆⵠⲆⵠⵠΔⲆ = ⵠⲆΔⵠΔⵠᐃ(ΔⵠᐃⵠᐃᐃΔ, ᐃΔΔΔⵠΔⵠ, ⵠᐃᐃᐃⵠΔᐃ, ᐃⵠᐃⵠⵠⲆⲆ, ΔᐃΔⵠᐃᐃᐃ);
		const ΔⵠΔᐃⵠΔᐃ = ~(52206 & ΔΔᐃⵠᐃⵠⵠ) & (ΔΔᐃⵠᐃⵠⵠ | 52206);
		const ΔΔⲆⲆΔⲆⲆ = (12345 + (7491 + (ΔⵠΔᐃⵠΔᐃ ^ ⲆⵠⲆⵠⵠΔⲆ)) * 1103515245) % 2147483648;
		return ΔΔⲆⲆΔⲆⲆ
	}
	const ᐃⵠᐃΔⲆ = ⲆⵠⵠⲆⲆ;

	function ᐃΔᐃΔⲆⵠᐃ(ΔⲆΔᐃⲆ, ⲆⵠⵠΔⲆᐃⵠ, ⲆᐃⲆⲆⲆⲆᐃ, ᐃⵠⵠΔᐃⵠΔ) {
		const ⲆⵠⲆⲆⵠΔᐃ = (32 << (ΔⲆΔᐃⲆ >> 32 & 255)) + (16 << (ΔⲆΔᐃⲆ >> ΔΔⵠᐃⲆ & 255)) + (24 << (ΔⲆΔᐃⲆ >> 24 & 255)) + (8 << (ΔⲆΔᐃⲆ >> 8 & 255));
		const ᐃⵠⵠⲆⲆΔⲆ = (ⵠΔΔ + (50595 + ⲆⵠⵠΔⲆᐃⵠ) * 22695477) % 4294967296;
		const ⵠΔⵠᐃᐃⵠⵠ = ~(40066 & ⲆᐃⲆⲆⲆⲆᐃ) & ⲆᐃⲆⲆⲆⲆᐃ | ~(ⲆᐃⲆⲆⲆⲆᐃ & 40066) & 40066;
		const ⵠⲆⲆΔⲆⲆⲆ = 18768 ^ ᐃⵠⵠΔᐃⵠΔ;
		const ᐃⲆⲆΔᐃΔⲆ = ⲆⵠⵠΔΔⲆΔ(ⲆⵠⲆⲆⵠΔᐃ, ᐃⵠⵠⲆⲆΔⲆ, ⵠΔⵠᐃᐃⵠⵠ, ⵠⲆⲆΔⲆⲆⲆ, ⲆⵠⲆⲆⵠΔᐃ);
		const ᐃᐃΔΔᐃⲆᐃ = ᐃᐃΔΔᐃΔΔ(ᐃⵠⵠⲆⲆΔⲆ, ⵠΔⵠᐃᐃⵠⵠ, ⵠⲆⲆΔⲆⲆⲆ, ⲆⵠⲆⲆⵠΔᐃ, ᐃⵠⵠⲆⲆΔⲆ);
		const ᐃΔⵠᐃⵠⲆⲆ = ⵠᐃⲆᐃⲆᐃΔ(ⵠΔⵠᐃᐃⵠⵠ, ⵠⲆⲆΔⲆⲆⲆ);
		const ᐃⲆⵠⵠᐃⵠΔ = (2531011 + 214013 * ((ᐃⲆⲆΔᐃΔⲆ ^ ᐃᐃΔΔᐃⲆᐃ) + 35287)) % 4294967296;
		const ᐃΔᐃⵠⲆᐃᐃ = (1664525 * ((ᐃⲆⵠⵠᐃⵠΔ ^ ᐃΔⵠᐃⵠⲆⲆ) + 16767) + 1013904223) % 4294967296;
		return ᐃΔᐃⵠⲆᐃᐃ
	}

	function ⲆⵠⵠΔΔⲆΔ(ΔᐃΔⲆᐃⲆⵠ, ⵠᐃᐃΔⲆΔⵠ, ⵠⵠⲆΔΔᐃΔ, ΔᐃΔΔΔΔⵠ, ΔⲆⵠⵠⵠⵠᐃ) {
		const ΔΔΔⵠⵠⲆⵠ = ΔᐃΔⲆᐃⲆⵠ ^ 62008;
		const ΔⲆⵠⲆⵠΔΔ = (24 << (ⵠᐃᐃΔⲆΔⵠ >> 32 & 255)) + (ⵠᐃⵠᐃⵠ << (ⵠᐃᐃΔⲆΔⵠ >> 16 & 255)) + (32 << (ⵠᐃᐃΔⲆΔⵠ >> 8 & ᐃⵠΔΔⵠ)) + (16 << (ⵠᐃᐃΔⲆΔⵠ >> 24 & 255));
		const ᐃΔⲆⵠΔΔⵠ = (22695477 * (ⵠⵠⲆΔΔᐃΔ + 46531) + 1) % 4294967296;
		const ⲆΔᐃⲆⵠᐃΔ = ~(ΔᐃΔΔΔΔⵠ & 1884) & 1884 | ~(1884 & ΔᐃΔΔΔΔⵠ) & ΔᐃΔΔΔΔⵠ;
		const ⲆᐃⵠⲆⵠⵠⲆ = ~(ΔⲆⵠⵠⵠⵠᐃ & 55588) & 55588 | ~(55588 & ΔⲆⵠⵠⵠⵠᐃ) & ΔⲆⵠⵠⵠⵠᐃ;
		const ᐃΔᐃⲆΔΔᐃ = ⲆⵠⵠⵠⲆᐃⵠ(ΔΔΔⵠⵠⲆⵠ, ΔⲆⵠⲆⵠΔΔ, ᐃΔⲆⵠΔΔⵠ, ⲆΔᐃⲆⵠᐃΔ, ⲆᐃⵠⲆⵠⵠⲆ);
		const ΔᐃᐃⲆΔΔᐃᐃⵠ = ᐃᐃΔⵠΔΔΔ(ΔΔΔⵠⵠⲆⵠ, ΔⲆⵠⲆⵠΔΔ, ᐃΔⲆⵠΔΔⵠ, ⲆΔᐃⲆⵠᐃΔ, ⲆᐃⵠⲆⵠⵠⲆ, ΔΔΔⵠⵠⲆⵠ);
		const ᐃᐃΔⲆⵠⲆΔ = ᐃⵠΔᐃᐃΔΔ(ΔⲆⵠⲆⵠΔΔ, ᐃΔⲆⵠΔΔⵠ, ⲆΔᐃⲆⵠᐃΔ, ⲆᐃⵠⲆⵠⵠⲆ, ΔΔΔⵠⵠⲆⵠ);
		const ΔᐃⵠⵠⲆΔΔ = ᐃΔᐃⲆΔΔᐃ ^ 57467;
		const ⵠΔⵠⲆⲆⵠΔ = (((ΔᐃⵠⵠⲆΔΔ ^ ᐃᐃΔⲆⵠⲆΔ) + 3037) * 1664525 + 1013904223) % 4294967296;
		return ⵠΔⵠⲆⲆⵠΔ
	}

	function ΔⲆⵠΔⲆᐃⲆ(ⵠΔⵠⲆⲆⵠⵠ, ⲆᐃᐃΔⵠᐃΔ, ⲆⲆΔΔⵠᐃⲆ, ᐃⲆⵠΔⲆᐃΔ) {
		const ⵠΔⲆⵠᐃⲆΔ = (2147483587 + 2147483629 * (37418 + ⵠΔⵠⲆⲆⵠⵠ)) % 2147483647;
		const ⲆᐃⲆⵠΔⲆⵠ = ⲆᐃᐃΔⵠᐃΔ ^ 57623;
		const ᐃⵠⵠΔᐃⵠᐃ = ~(ⲆⲆΔΔⵠᐃⲆ & 40280) & ⲆⲆΔΔⵠᐃⲆ | ~(ⲆⲆΔΔⵠᐃⲆ & 40280) & 40280;
		const ᐃⲆᐃᐃⵠΔᐃ = ~(ᐃⲆⵠΔⲆᐃΔ & 24601) & ᐃⲆⵠΔⲆᐃΔ | ~(ᐃⲆⵠΔⲆᐃΔ & 24601) & 24601;
		const ᐃⵠⵠΔᐃⲆⲆ = ΔᐃⲆⲆⲆⵠⲆ(ⵠΔⲆⵠᐃⲆΔ, ⲆᐃⲆⵠΔⲆⵠ);
		const ᐃⲆΔᐃⵠᐃⲆΔⵠ = ΔᐃⲆⲆⲆⵠⲆ(ᐃⵠⵠΔᐃⵠᐃ, ᐃⲆᐃᐃⵠΔᐃ);
		const ⲆⲆΔⵠΔⲆⲆⲆᐃ = ᐃⵠΔᐃᐃΔΔ(ⵠΔⲆⵠᐃⲆΔ, ⲆᐃⲆⵠΔⲆⵠ, ᐃⵠⵠΔᐃⵠᐃ, ᐃⲆᐃᐃⵠΔᐃ, ⵠΔⲆⵠᐃⲆΔ);
		const ΔᐃⵠⵠⲆⵠⲆ = ~(43902 & ᐃⵠⵠΔᐃⲆⲆ) & 43902 | ~(43902 & ᐃⵠⵠΔᐃⲆⲆ) & ᐃⵠⵠΔᐃⲆⲆ;
		const ᐃⲆⵠⲆΔⵠΔ = (8862 | ΔᐃⵠⵠⲆⵠⲆ) & ~(8862 & ΔᐃⵠⵠⲆⵠⲆ);
		return ᐃⲆⵠⲆΔⵠΔ
	}

	function ⲆᐃᐃΔΔᐃΔ(ΔᐃⵠⲆᐃⲆⵠ, ⲆΔⵠⲆΔⵠᐃ, ΔΔⲆΔⵠ) {
		const ΔᐃⲆΔⲆⵠΔ = (12345 + 1103515245 * (39051 + ΔᐃⵠⲆᐃⲆⵠ)) % 2147483648;
		const ⲆΔᐃⵠΔᐃⵠ = (44117 | ⲆΔⵠⲆΔⵠᐃ) & ~(ⲆΔⵠⲆΔⵠᐃ & 44117);
		const ΔⲆᐃⲆᐃΔⵠ = (24 << (ΔΔⲆΔⵠ >> 24 & 255)) + (8 << (ΔΔⲆΔⵠ >> 16 & ⵠΔⵠΔΔ)) + (16 << (ΔΔⲆΔⵠ >> 32 & ⲆⲆΔⵠⲆ)) + (32 << (ΔΔⲆΔⵠ >> 8 & ᐃΔᐃⵠΔ));
		const ᐃᐃᐃⲆⲆⵠⲆ = ⲆⲆᐃⵠⵠᐃΔ(ΔᐃⲆΔⲆⵠΔ, ⲆΔᐃⵠΔᐃⵠ, ΔⲆᐃⲆᐃΔⵠ, ΔᐃⲆΔⲆⵠΔ, ⲆΔᐃⵠΔᐃⵠ);
		const ⵠᐃⲆⵠΔᐃᐃ = ᐃᐃΔⵠΔΔΔ(ΔⲆᐃⲆᐃΔⵠ, ΔᐃⲆΔⲆⵠΔ, ⲆΔᐃⵠΔᐃⵠ, ΔⲆᐃⲆᐃΔⵠ, ΔᐃⲆΔⲆⵠΔ, ⲆΔᐃⵠΔᐃⵠ);
		const ⵠΔᐃΔⲆΔⲆ = ⲆΔᐃΔᐃⵠⵠ(ΔⲆᐃⲆᐃΔⵠ, ΔᐃⲆΔⲆⵠΔ);
		const ⵠⵠΔΔⵠⲆⲆ = (16 << ((ᐃᐃᐃⲆⲆⵠⲆ ^ ⵠᐃⲆⵠΔᐃᐃ) >> 32 & ⲆⲆΔⵠⲆ)) + (24 << ((ᐃᐃᐃⲆⲆⵠⲆ ^ ⵠᐃⲆⵠΔᐃᐃ) >> 24 & ᐃΔᐃⵠΔ)) + (32 << ((ᐃᐃᐃⲆⲆⵠⲆ ^ ⵠᐃⲆⵠΔᐃᐃ) >> 8 & 255)) + (ΔΔⵠⵠⵠ << ((ᐃᐃᐃⲆⲆⵠⲆ ^ ⵠᐃⲆⵠΔᐃᐃ) >> 16 & 255));
		const ⲆⲆⲆⵠⵠⲆⵠ = (ΔΔⲆⵠⵠ << ((ⵠⵠΔΔⵠⲆⲆ ^ ⵠΔᐃΔⲆΔⲆ) >> 32 & 255)) + (ᐃⲆⲆᐃΔ << ((ⵠⵠΔΔⵠⲆⲆ ^ ⵠΔᐃΔⲆΔⲆ) >> 8 & 255)) + (32 << ((ⵠⵠΔΔⵠⲆⲆ ^ ⵠΔᐃΔⲆΔⲆ) >> 16 & 255)) + (24 << ((ⵠⵠΔΔⵠⲆⲆ ^ ⵠΔᐃΔⲆΔⲆ) >> 24 & 255));
		return ⲆⲆⲆⵠⵠⲆⵠ
	}
	const ⲆⵠⲆᐃ = ᐃᐃΔΔ;
	const Ⲇᐃᐃᐃᐃ = ᐃᐃΔΔᐃ;

	function ΔᐃⲆⲆⲆⵠⲆ(ΔᐃⲆᐃᐃⵠΔ, ⲆⵠⲆⲆⲆᐃⵠ) {
		const ⵠΔᐃΔⲆᐃΔ = ((ΔᐃⲆᐃᐃⵠΔ + 44664) * 1664525 + 1013904223) % 4294967296;
		const ΔⵠᐃᐃⲆΔᐃ = ⲆⵠⲆⲆⲆᐃⵠ ^ 53080;
		const ⵠΔᐃΔⵠⲆⲆ = ΔΔΔⵠᐃⲆΔ(ⵠΔᐃΔⲆᐃΔ, ΔⵠᐃᐃⲆΔᐃ, ⵠΔᐃΔⲆᐃΔ, ΔⵠᐃᐃⲆΔᐃ, ⵠΔᐃΔⲆᐃΔ);
		const ΔᐃΔⵠᐃᐃΔ = ΔⵠΔⲆⵠⵠᐃ(ΔⵠᐃᐃⲆΔᐃ, ⵠΔᐃΔⲆᐃΔ, ΔⵠᐃᐃⲆΔᐃ, ⵠΔᐃΔⲆᐃΔ, ΔⵠᐃᐃⲆΔᐃ);
		const ⵠⲆΔⵠᐃᐃᐃ = ⵠΔⲆⵠΔ(ⵠΔᐃΔⲆᐃΔ, ΔⵠᐃᐃⲆΔᐃ, ⵠΔᐃΔⲆᐃΔ, ΔⵠᐃᐃⲆΔᐃ);
		const ⵠⵠᐃⵠⲆⵠⵠ = ((ⵠΔᐃΔⵠⲆⲆ ^ ΔᐃΔⵠᐃᐃΔ) + 17769) % 65357;
		const ⲆⲆⲆΔᐃᐃⲆ = (1 + ((ⵠⵠᐃⵠⲆⵠⵠ ^ ⵠⲆΔⵠᐃᐃᐃ) + 57525) * 22695477) % 4294967296;
		return ⲆⲆⲆΔᐃᐃⲆ
	}
	const ⵠᐃⵠΔΔ = ⵠᐃⲆᐃᐃ;
	const ⲆᐃᐃⵠⵠⲆⲆ = ⵠΔⵠΔΔ;
	const ᐃⲆⲆ = ⵠΔⲆ;

	function ΔⵠΔⲆⵠⵠᐃ(ⲆⲆⲆᐃⲆⵠΔ, ᐃⵠⲆⲆⲆΔⵠ, ⵠᐃΔᐃᐃᐃᐃ, ⵠⲆΔᐃⵠᐃⵠ, ⵠᐃᐃᐃⵠⲆⲆ) {
		const ᐃᐃⵠᐃⵠⵠⵠ = ~(42203 & ⲆⲆⲆᐃⲆⵠΔ) & ⲆⲆⲆᐃⲆⵠΔ | ~(ⲆⲆⲆᐃⲆⵠΔ & 42203) & 42203;
		const ⵠⲆΔⲆⲆⵠΔ = 50118 ^ ᐃⵠⲆⲆⲆΔⵠ;
		const ᐃⲆⲆᐃᐃΔΔ = ⵠᐃΔᐃᐃᐃᐃ ^ 41620;
		const ⲆᐃⲆⵠᐃᐃⲆ = ((ⵠⲆΔᐃⵠᐃⵠ + 34240) * 2147483629 + 2147483587) % 2147483647;
		const ⲆᐃⲆΔᐃΔⲆ = (32 << (ⵠᐃᐃᐃⵠⲆⲆ >> 16 & 255)) + (ΔΔⵠᐃⲆ << (ⵠᐃᐃᐃⵠⲆⲆ >> 8 & 255)) + (8 << (ⵠᐃᐃᐃⵠⲆⲆ >> 32 & 255)) + (24 << (ⵠᐃᐃᐃⵠⲆⲆ >> 24 & 255));
		const ⵠⵠᐃΔⲆⵠⲆ = ᐃᐃΔⵠΔΔΔ(ᐃᐃⵠᐃⵠⵠⵠ, ⵠⲆΔⲆⲆⵠΔ, ᐃⲆⲆᐃᐃΔΔ, ⲆᐃⲆⵠᐃᐃⲆ, ⲆᐃⲆΔᐃΔⲆ, ᐃᐃⵠᐃⵠⵠⵠ);
		const ᐃⵠⵠⲆΔᐃⵠᐃᐃ = ᐃᐃΔⵠΔΔΔ(ⵠⲆΔⲆⲆⵠΔ, ᐃⲆⲆᐃᐃΔΔ, ⲆᐃⲆⵠᐃᐃⲆ, ⲆᐃⲆΔᐃΔⲆ, ᐃᐃⵠᐃⵠⵠⵠ, ⵠⲆΔⲆⲆⵠΔ);
		const ⵠᐃⲆᐃᐃⵠᐃ = ⵠΔⲆⵠΔ(ᐃⲆⲆᐃᐃΔΔ, ⲆᐃⲆⵠᐃᐃⲆ, ⲆᐃⲆΔᐃΔⲆ, ᐃᐃⵠᐃⵠⵠⵠ);
		const ΔⲆⵠⵠⵠΔΔ = (43477 | ⵠⵠᐃΔⲆⵠⲆ) & ~(ⵠⵠᐃΔⲆⵠⲆ & 43477);
		const ⵠᐃⲆᐃᐃᐃⵠ = (2531011 + ((ΔⲆⵠⵠⵠΔΔ ^ ⵠᐃⲆᐃᐃⵠᐃ) + 53616) * 214013) % 4294967296;
		return ⵠᐃⲆᐃᐃᐃⵠ
	}
	const ⵠⵠᐃᐃΔ = ⵠᐃᐃΔΔ;
	const ⵠⲆⵠⲆΔᐃⵠ = ΔᐃⵠⲆᐃⵠᐃ;
	const Δᐃᐃⵠᐃ = ⲆⵠᐃΔᐃ;
	const ΔⲆᐃΔΔ = ΔΔⵠⵠⵠ;

	function ΔΔΔⵠᐃⲆΔ(ᐃΔⲆΔΔᐃⵠ, ⲆⲆⵠΔⵠⲆⵠ, ΔᐃⵠᐃᐃⵠⲆ, ᐃᐃⵠΔΔΔᐃ, ΔᐃΔΔᐃΔⵠ) {
		const ᐃⲆⲆⲆᐃΔᐃ = (16 << (ᐃΔⲆΔΔᐃⵠ >> 32 & 255)) + (24 << (ᐃΔⲆΔΔᐃⵠ >> 24 & 255)) + (8 << (ᐃΔⲆΔΔᐃⵠ >> 8 & 255)) + (32 << (ᐃΔⲆΔΔᐃⵠ >> 16 & 255));
		const ⵠΔᐃⵠᐃⲆΔ = ⲆⲆⵠΔⵠⲆⵠ ^ 55978;
		const ⵠⲆᐃᐃᐃⲆΔ = (1664525 * (ΔᐃⵠᐃᐃⵠⲆ + 2934) + 1013904223) % 4294967296;
		const ᐃⲆᐃⲆΔⲆᐃ = ~(ᐃᐃⵠΔΔΔᐃ & 30642) & (ᐃᐃⵠΔΔΔᐃ | 30642);
		const ⵠⲆⲆⲆⲆⲆᐃ = (8 << (ΔᐃΔΔᐃΔⵠ >> 8 & ⵠΔⵠΔΔ)) + (24 << (ΔᐃΔΔᐃΔⵠ >> 32 & ⲆⲆΔⵠⲆ)) + (16 << (ΔᐃΔΔᐃΔⵠ >> 24 & 255)) + (32 << (ΔᐃΔΔᐃΔⵠ >> 16 & 255));
		const ⲆⲆᐃᐃᐃⲆⵠ = ΔⵠΔⲆⵠⵠᐃ(ᐃⲆⲆⲆᐃΔᐃ, ⵠΔᐃⵠᐃⲆΔ, ⵠⲆᐃᐃᐃⲆΔ, ᐃⲆᐃⲆΔⲆᐃ, ⵠⲆⲆⲆⲆⲆᐃ);
		const ⵠⵠⵠΔⵠⲆⲆ = ⲆΔΔⲆⵠᐃᐃ(ᐃⲆⲆⲆᐃΔᐃ, ⵠΔᐃⵠᐃⲆΔ, ⵠⲆᐃᐃᐃⲆΔ, ᐃⲆᐃⲆΔⲆᐃ, ⵠⲆⲆⲆⲆⲆᐃ);
		const ᐃᐃΔΔᐃⲆⲆᐃΔ = ⵠΔⲆⵠΔ(ᐃⲆⲆⲆᐃΔᐃ, ⵠΔᐃⵠᐃⲆΔ, ⵠⲆᐃᐃᐃⲆΔ, ᐃⲆᐃⲆΔⲆᐃ);
		const ΔⵠᐃΔᐃⵠⲆ = (16 << ((ⲆⲆᐃᐃᐃⲆⵠ ^ ⵠⵠⵠΔⵠⲆⲆ) >> 32 & 255)) + (24 << ((ⲆⲆᐃᐃᐃⲆⵠ ^ ⵠⵠⵠΔⵠⲆⲆ) >> 8 & 255)) + (8 << ((ⲆⲆᐃᐃᐃⲆⵠ ^ ⵠⵠⵠΔⵠⲆⲆ) >> 24 & 255)) + (32 << ((ⲆⲆᐃᐃᐃⲆⵠ ^ ⵠⵠⵠΔⵠⲆⲆ) >> 16 & ᐃⵠⲆᐃⲆ));
		const ⵠᐃᐃΔΔᐃⵠ = ~(23686 & ΔⵠᐃΔᐃⵠⲆ) & (23686 | ΔⵠᐃΔᐃⵠⲆ);
		return ⵠᐃᐃΔΔᐃⵠ
	}
	const ⲆΔΔⵠⲆⲆᐃ = String.fromCharCode;
	const ⲆᐃΔⵠᐃᐃⵠ = 101;
	const ⵠᐃⵠᐃⲆᐃᐃ = 118;
	const ⵠⲆⲆⲆⲆⵠᐃ = "ᐃⲆⲆᐃΔⲆᐃ";
	const Ⲇᐃᐃᐃ = 97;
	const ⲆΔᐃΔⲆΔⵠ = 108;
	const ᐃΔⵠⵠᐃ = ⲆΔΔⵠⲆⲆᐃ(ⲆᐃΔⵠᐃᐃⵠ);
	const ΔⲆⵠⲆⵠⲆⵠ = ⲆΔΔⵠⲆⲆᐃ(ⵠᐃⵠᐃⲆᐃᐃ);

	function ᐃⲆⲆᐃΔⲆᐃ() {
		ᐃⵠⵠᐃΔᐃΔ = ᐃⲆⲆᐃΔⲆᐃ;
		return ᐃⲆⲆᐃΔⲆᐃ
	}
	const ᐃⵠᐃΔⲆⲆΔ = ⲆΔΔⵠⲆⲆᐃ(Ⲇᐃᐃᐃ);
	const ⵠΔⵠΔΔᐃᐃ = ⲆΔΔⵠⲆⲆᐃ(ⲆΔᐃΔⲆΔⵠ);
	const ⵠΔΔᐃⵠΔᐃ = ᐃΔⵠⵠᐃ + ΔⲆⵠⲆⵠⲆⵠ + ᐃⵠᐃΔⲆⲆΔ + ⵠΔⵠΔΔᐃᐃ;
	const ⲆⵠΔΔ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ⵠΔΔᐃⵠΔᐃ];
	const ⲆⲆΔⲆ = ⲆⵠΔΔ(ᐃⲆⲆᐃΔⲆᐃ + "try{" + ⵠⲆⲆⲆⲆⵠᐃ + "();0;}catch(ᐃⵠᐃΔⲆⲆΔ){1;}");
	if (ⲆⲆΔⲆ) {
		const ⲆΔΔⵠⲆⲆᐃ = function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]]("mousemove", (function() {
				ⲆΔΔⵠⲆⲆᐃ()
			}))
		};
		ⲆΔΔⵠⲆⲆᐃ()
	}
	const ⵠⲆⵠ = ᐃΔΔ;

	function ᐃⵠΔᐃᐃΔΔ(ᐃⵠΔⲆΔⵠΔ, ⵠΔΔⲆⲆⵠᐃ, ⵠⲆⵠᐃⵠⲆⵠ, ΔⲆᐃⵠⵠᐃΔ, ⵠΔᐃⲆᐃΔⲆ) {
		const ΔΔᐃΔΔⵠⲆ = (1103515245 * (ᐃⵠΔⲆΔⵠΔ + 49173) + 12345) % 2147483648;
		const ΔⵠΔⲆᐃᐃⵠ = (ⵠΔΔⲆⲆⵠᐃ + 52922) % 65337;
		const ⲆⵠⵠⵠⲆⵠⲆ = ⵠⲆⵠᐃⵠⲆⵠ ^ 25250;
		const ⲆⵠΔⲆΔΔⵠ = ~(ΔⲆᐃⵠⵠᐃΔ & 10903) & 10903 | ~(10903 & ΔⲆᐃⵠⵠᐃΔ) & ΔⲆᐃⵠⵠᐃΔ;
		const ⵠᐃⲆᐃⵠᐃⲆ = ~(ⵠΔᐃⲆᐃΔⲆ & 33814) & 33814 | ~(33814 & ⵠΔᐃⲆᐃΔⲆ) & ⵠΔᐃⲆᐃΔⲆ;
		const ΔᐃⲆΔᐃΔΔ = ᐃᐃⲆΔⵠᐃⲆ(ΔΔᐃΔΔⵠⲆ, ΔⵠΔⲆᐃᐃⵠ, ⲆⵠⵠⵠⲆⵠⲆ, ⲆⵠΔⲆΔΔⵠ, ⵠᐃⲆᐃⵠᐃⲆ);
		const ⲆΔᐃⵠⵠⵠⵠ = ᐃΔΔⵠᐃⵠⲆ(ΔΔᐃΔΔⵠⲆ, ΔⵠΔⲆᐃᐃⵠ);
		const ⵠΔᐃⵠⵠΔΔⲆⵠ = ᐃᐃⲆΔⵠᐃⲆ(ⲆⵠⵠⵠⲆⵠⲆ, ⲆⵠΔⲆΔΔⵠ, ⵠᐃⲆᐃⵠᐃⲆ, ΔΔᐃΔΔⵠⲆ, ΔⵠΔⲆᐃᐃⵠ);
		const ⵠⵠⲆᐃΔⲆΔ = (1 + 22695477 * ((ΔᐃⲆΔᐃΔΔ ^ ⲆΔᐃⵠⵠⵠⵠ) + 19675)) % 4294967296;
		const ΔⵠⵠᐃΔᐃⵠ = ~(7922 & ⵠⵠⲆᐃΔⲆΔ) & ⵠⵠⲆᐃΔⲆΔ | ~(ⵠⵠⲆᐃΔⲆΔ & 7922) & 7922;
		return ΔⵠⵠᐃΔᐃⵠ
	}
	const ᐃᐃᐃΔᐃ = ᐃΔⵠⵠΔ;

	function ᐃΔΔⵠᐃⵠⲆ(ⲆΔΔⵠⵠⲆΔ, ⲆΔⲆⲆⲆ) {
		const ⲆᐃⲆⵠⵠⵠᐃ = 24508 ^ ⲆΔΔⵠⵠⲆΔ;
		const ⲆⲆⵠΔⵠⵠᐃ = (16 << (ⲆΔⲆⲆⲆ >> 16 & ᐃⵠΔΔⵠ)) + (24 << (ⲆΔⲆⲆⲆ >> 8 & 255)) + (32 << (ⲆΔⲆⲆⲆ >> 32 & 255)) + (8 << (ⲆΔⲆⲆⲆ >> 24 & 255));
		const ᐃΔΔⵠⵠΔⲆ = ⵠⲆΔⵠΔⵠᐃ(ⲆᐃⲆⵠⵠⵠᐃ, ⲆⲆⵠΔⵠⵠᐃ, ⲆᐃⲆⵠⵠⵠᐃ, ⲆⲆⵠΔⵠⵠᐃ, ⲆᐃⲆⵠⵠⵠᐃ);
		const ⲆᐃⵠⲆⲆⵠᐃ = ΔΔΔⵠᐃⲆΔ(ⲆⲆⵠΔⵠⵠᐃ, ⲆᐃⲆⵠⵠⵠᐃ, ⲆⲆⵠΔⵠⵠᐃ, ⲆᐃⲆⵠⵠⵠᐃ, ⲆⲆⵠΔⵠⵠᐃ);
		const ΔᐃⲆⵠΔΔΔⲆⵠ = ⲆⲆᐃⵠⵠᐃΔ(ⲆᐃⲆⵠⵠⵠᐃ, ⲆⲆⵠΔⵠⵠᐃ, ⲆᐃⲆⵠⵠⵠᐃ, ⲆⲆⵠΔⵠⵠᐃ, ⲆᐃⲆⵠⵠⵠᐃ);
		const ΔᐃⵠⵠΔᐃΔ = (((ᐃΔΔⵠⵠΔⲆ ^ ⲆᐃⵠⲆⲆⵠᐃ) + 11269) * 2147483629 + 2147483587) % 2147483647;
		const ᐃᐃΔᐃᐃᐃⲆ = ~(ΔᐃⵠⵠΔᐃΔ & 40927) & 40927 | ~(40927 & ΔᐃⵠⵠΔᐃΔ) & ΔᐃⵠⵠΔᐃΔ;
		return ᐃᐃΔᐃᐃᐃⲆ
	}

	function ᐃⲆΔⵠᐃᐃᐃ(ⵠΔᐃΔᐃᐃⲆ, ᐃΔⵠᐃⵠΔⲆ, ᐃⵠⵠᐃᐃΔⵠ) {
		const ⲆΔⲆΔⵠⲆᐃ = 23323 ^ ⵠΔᐃΔᐃᐃⲆ;
		const ΔⵠᐃΔⵠΔⵠ = (2531011 + (61713 + ᐃΔⵠᐃⵠΔⲆ) * 214013) % 4294967296;
		const ΔᐃᐃΔΔⵠⵠ = (ᐃⵠⵠᐃᐃΔⵠ | 24198) & ~(ᐃⵠⵠᐃᐃΔⵠ & 24198);
		const ⵠᐃΔⵠΔⵠⲆ = ⵠⲆΔⵠΔⵠᐃ(ⲆΔⲆΔⵠⲆᐃ, ΔⵠᐃΔⵠΔⵠ, ΔᐃᐃΔΔⵠⵠ, ⲆΔⲆΔⵠⲆᐃ, ΔⵠᐃΔⵠΔⵠ);
		const ΔⲆΔⵠⲆⲆᐃ = ⵠⲆΔⵠΔⵠᐃ(ΔᐃᐃΔΔⵠⵠ, ⲆΔⲆΔⵠⲆᐃ, ΔⵠᐃΔⵠΔⵠ, ΔᐃᐃΔΔⵠⵠ, ⲆΔⲆΔⵠⲆᐃ);
		const ΔᐃⵠᐃⲆⵠⲆΔᐃ = ⵠⲆΔⵠΔⵠᐃ(ΔⵠᐃΔⵠΔⵠ, ΔᐃᐃΔΔⵠⵠ, ⲆΔⲆΔⵠⲆᐃ, ΔⵠᐃΔⵠΔⵠ, ΔᐃᐃΔΔⵠⵠ);
		const ⲆᐃⲆΔⵠⲆᐃ = (16 << ((ⵠᐃΔⵠΔⵠⲆ ^ ΔⲆΔⵠⲆⲆᐃ) >> 32 & 255)) + (8 << ((ⵠᐃΔⵠΔⵠⲆ ^ ΔⲆΔⵠⲆⲆᐃ) >> 8 & 255)) + (24 << ((ⵠᐃΔⵠΔⵠⲆ ^ ΔⲆΔⵠⲆⲆᐃ) >> 24 & 255)) + (32 << ((ⵠᐃΔⵠΔⵠⲆ ^ ΔⲆΔⵠⲆⲆᐃ) >> 16 & ᐃⵠΔΔⵠ));
		const ⲆΔⲆᐃⵠΔⵠ = ⲆᐃⲆΔⵠⲆᐃ ^ 31181;
		return ⲆΔⲆᐃⵠΔⵠ
	}
	const ⲆⵠⵠⲆ = ᐃᐃΔΔ;
	const ⵠⲆΔΔⲆ = ᐃⲆᐃⵠΔ;

	function ᐃᐃΔⵠΔΔΔ(ᐃΔⲆᐃⲆⲆⲆ, ᐃⵠΔΔᐃⲆΔ, ⵠⲆⵠⵠᐃⵠᐃ, ᐃΔᐃᐃⵠⵠᐃ, ᐃⲆⵠⲆⵠⵠⵠ, ⵠⲆΔᐃΔΔⵠ) {
		const ΔᐃᐃⲆⲆΔΔ = (ᐃΔⲆᐃⲆⲆⲆ + 52483) % 65496;
		const ⵠⲆΔΔⲆⵠⵠ = (ⲆⲆⵠᐃΔ << (ᐃⵠΔΔᐃⲆΔ >> 16 & 255)) + (24 << (ᐃⵠΔΔᐃⲆΔ >> ΔΔⵠⵠⵠ & 255)) + (32 << (ᐃⵠΔΔᐃⲆΔ >> 24 & 255)) + (8 << (ᐃⵠΔΔᐃⲆΔ >> 32 & 255));
		const ⲆᐃᐃᐃⲆΔⲆ = ⵠⲆⵠⵠᐃⵠᐃ ^ 8102;
		const ⵠⲆⲆᐃΔⲆᐃ = (24 << (ᐃΔᐃᐃⵠⵠᐃ >> ΔⵠΔΔᐃ & 255)) + (32 << (ᐃΔᐃᐃⵠⵠᐃ >> 32 & 255)) + (8 << (ᐃΔᐃᐃⵠⵠᐃ >> 24 & 255)) + (16 << (ᐃΔᐃᐃⵠⵠᐃ >> ⵠᐃⵠᐃⵠ & ⲆᐃᐃⵠⵠⲆⲆ));
		const ᐃⲆⵠⲆⵠΔΔ = ~(ᐃⲆⵠⲆⵠⵠⵠ & 29687) & 29687 | ~(29687 & ᐃⲆⵠⲆⵠⵠⵠ) & ᐃⲆⵠⲆⵠⵠⵠ;
		const ⵠⵠᐃⲆΔᐃⲆ = (1 + (62237 + ⵠⲆΔᐃΔΔⵠ) * 22695477) % 4294967296;
		const ⵠⵠⲆᐃⲆΔΔ = ⵠᐃⲆᐃⲆᐃΔ(ΔᐃᐃⲆⲆΔΔ, ⵠⲆΔΔⲆⵠⵠ);
		const ᐃⲆΔΔⲆΔΔ = ⵠᐃⲆᐃⲆᐃΔ(ⲆᐃᐃᐃⲆΔⲆ, ⵠⲆⲆᐃΔⲆᐃ);
		const ΔᐃΔⲆᐃⵠⲆᐃⵠ = ⵠᐃⲆᐃⲆᐃΔ(ᐃⲆⵠⲆⵠΔΔ, ⵠⵠᐃⲆΔᐃⲆ);
		const ΔᐃᐃⵠΔΔⲆ = (45290 + (ⵠⵠⲆᐃⲆΔΔ ^ ᐃⲆΔΔⲆΔΔ)) % 65334;
		const ⲆΔⲆᐃᐃΔⲆ = 55575 ^ ΔᐃᐃⵠΔΔⲆ;
		return ⲆΔⲆᐃᐃΔⲆ
	}
	const ⵠⲆΔᐃᐃ = ⲆᐃⵠⲆᐃ;

	function ⲆΔΔᐃⵠᐃᐃ(ΔⵠⲆⲆⲆⵠⲆ, ΔᐃⵠΔⲆΔᐃ, ΔΔⲆⵠΔⲆⵠ) {
		ᐃᐃⵠΔⲆΔᐃ(ᐃΔⲆⲆᐃ, ΔⵠⲆⲆⲆⵠⲆ, ΔᐃⵠΔⲆΔᐃ, ΔΔⲆⵠΔⲆⵠ);
		const ⲆᐃΔᐃⵠⵠⲆ = ΔΔⵠΔΔⲆⲆ(ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[2], ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[ΔⲆᐃⲆ]);
		const ⲆⵠⵠᐃⵠⵠⲆ = ᐃⲆᐃⲆΔⲆΔ(ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[2], ᐃⲆⵠᐃ[ⵠⲆⵠ], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[ⲆᐃᐃΔ]);
		const ⲆⲆⲆᐃⲆⲆⵠ = ((84 + (ⲆᐃΔᐃⵠⵠⲆ ^ ⲆⵠⵠᐃⵠⵠⲆ)) * 8121 + 28411) % 134456;
		return ⲆⲆⲆᐃⲆⲆⵠ
	}

	function ⲆΔᐃΔᐃⵠⵠ(ⲆⵠᐃΔⵠ, ᐃᐃΔΔΔ) {
		const ᐃᐃⵠᐃⵠⵠΔ = (16 << (ⲆⵠᐃΔⵠ >> 8 & ⵠΔⵠΔΔ)) + (32 << (ⲆⵠᐃΔⵠ >> 16 & 255)) + (8 << (ⲆⵠᐃΔⵠ >> 32 & 255)) + (24 << (ⲆⵠᐃΔⵠ >> 24 & 255));
		const ᐃᐃⵠⵠΔᐃΔ = (32 << (ᐃᐃΔΔΔ >> 32 & ᐃⵠⲆᐃⲆ)) + (24 << (ᐃᐃΔΔΔ >> 24 & 255)) + (8 << (ᐃᐃΔΔΔ >> 8 & 255)) + (16 << (ᐃᐃΔΔΔ >> 16 & 255));
		const ΔⲆⵠᐃⲆⵠᐃ = ΔⲆΔⲆΔⵠᐃ(ᐃᐃⵠᐃⵠⵠΔ, ᐃᐃⵠⵠΔᐃΔ, ᐃᐃⵠᐃⵠⵠΔ, ᐃᐃⵠⵠΔᐃΔ, ᐃᐃⵠᐃⵠⵠΔ, ᐃᐃⵠⵠΔᐃΔ);
		const ᐃⵠⲆⲆΔⲆᐃⵠⵠ = ΔⲆᐃΔΔⲆΔ(ᐃᐃⵠᐃⵠⵠΔ, ᐃᐃⵠⵠΔᐃΔ, ᐃᐃⵠᐃⵠⵠΔ, ᐃᐃⵠⵠΔᐃΔ, ᐃᐃⵠᐃⵠⵠΔ);
		const ⵠⲆΔΔᐃⲆΔⵠΔ = ΔᐃⲆⲆⲆⵠⲆ(ᐃᐃⵠⵠΔᐃΔ, ᐃᐃⵠᐃⵠⵠΔ);
		const ⵠⲆᐃΔᐃⵠΔ = (ΔⲆⵠᐃⲆⵠᐃ | 58283) & ~(58283 & ΔⲆⵠᐃⲆⵠᐃ);
		const ⲆΔΔⲆΔᐃⵠ = 8337 ^ ⵠⲆᐃΔᐃⵠΔ;
		return ⲆΔΔⲆΔᐃⵠ
	}
	ⵠᐃΔᐃ = {
		"ⲆᐃⵠΔⵠΔᐃ": ⲆᐃⵠΔⵠΔᐃ,
		"ⲆᐃⲆⵠⵠⲆΔᐃⵠ": function(ⵠⲆⵠⲆΔⲆⲆ) {
			var ΔΔΔⲆⲆⵠΔ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]](ⵠⲆⵠⲆΔⲆⲆ, Δ[363]);
			ΔΔΔⲆⲆⵠΔ.focus()
		},
		"ⲆⲆᐃᐃⵠᐃᐃ": function(ⵠⲆⵠⲆΔⲆⲆ) {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]](ⵠⲆⵠⲆΔⲆⲆ, Δ[363], "location=yes,height=570,width=520,scrollbars=yes,status=yes")
		},
		"ⵠᐃΔΔᐃⵠⵠ": function(ᐃᐃᐃⵠ, ⵠⵠᐃⵠ) {
			for (var Δᐃ in ᐃᐃᐃⵠ) {
				if (ᐃᐃᐃⵠ[Δᐃ] != ⵠⵠᐃⵠ[Δᐃ]) return ⲆΔᐃⵠᐃ
			}
			return ⵠⲆΔΔⲆ
		},
		"ᐃᐃΔⵠⲆⵠⵠⵠⲆ": function(ᐃᐃᐃⵠ, ⵠⵠᐃⵠ) {
			if (ᐃᐃᐃⵠ.length != ⵠⵠᐃⵠ.length) return ⲆⲆⲆΔᐃ;
			for (var Δᐃ = 0; Δᐃ < ᐃᐃᐃⵠ.length; Δᐃ++) {
				if (typeof ᐃᐃᐃⵠ == Δ[442]) {
					if (!this.ⵠᐃΔΔᐃⵠⵠ(ᐃᐃᐃⵠ[Δᐃ], ⵠⵠᐃⵠ[Δᐃ])) return false
				} else if (ᐃᐃᐃⵠ[Δᐃ] != ⵠⵠᐃⵠ[Δᐃ]) return ⵠⲆⵠᐃᐃ
			}
			return ᐃⲆΔⵠΔ
		},
		"ⲆᐃᐃᐃⲆⲆΔ": function(ΔⵠⵠΔΔ, ᐃⵠΔᐃΔᐃᐃ) {
			ᐃⵠΔᐃΔᐃᐃ.x = ΔⵠⵠΔΔ.x;
			ᐃⵠΔᐃΔᐃᐃ.y = ΔⵠⵠΔΔ.y
		},
		"ᐃᐃⵠΔᐃⲆᐃ": function(ⵠᐃⲆⵠΔ, ᐃΔΔΔΔ) {
			return {
				x: ⵠᐃⲆⵠΔ.x - ᐃΔΔΔΔ.x,
				y: ⵠᐃⲆⵠΔ.y - ᐃΔΔΔΔ.y
			}
		},
		"ⵠΔⵠⵠᐃΔᐃᐃᐃ": function(ⲆᐃΔ, ⲆⲆΔΔΔⵠⲆ) {
			ⲆᐃΔ.x *= ⲆⲆΔΔΔⵠⲆ, ⲆᐃΔ.y *= ⲆⲆΔΔΔⵠⲆ
		},
		"ⵠΔΔΔⲆⲆⲆ": function(ⵠᐃⲆⵠΔ, ᐃΔΔΔΔ) {
			return ⵠᐃⲆⵠΔ.x * ᐃΔΔΔΔ.x + ⵠᐃⲆⵠΔ.y * ᐃΔΔΔΔ.y
		},
		"ⵠⲆⵠⵠΔΔᐃ": function(ⲆᐃΔ) {
			return Math.sqrt(ⲆᐃΔ.x * ⲆᐃΔ.x + ⲆᐃΔ.y * ⲆᐃΔ.y)
		},
		sign: function(ᐃᐃᐃⵠ) {
			if (ᐃᐃᐃⵠ < 0) return -ⵠΔⲆ;
			else return ⵠΔΔ
		},
		"ⲆΔΔᐃΔΔᐃ": function(ⵠᐃⲆⵠΔ, ᐃΔΔΔΔ) {
			return ⵠᐃⲆⵠΔ.x * ᐃΔΔΔΔ.y - ⵠᐃⲆⵠΔ.y * ᐃΔΔΔΔ.x
		},
		"ⵠᐃⵠΔⲆⵠⲆ": function(ᐃᐃⵠᐃⲆΔΔ, ΔⵠⲆⲆⵠⲆⲆ, ⵠⲆⵠⵠⲆ, ᐃⵠⵠᐃΔ) {
			var ᐃᐃᐃΔΔⵠⲆ = ᐃⵠⵠᐃΔ - ΔⵠⲆⲆⵠⲆⲆ;
			var ⵠⵠΔᐃΔΔΔ = ⵠⲆⵠⵠⲆ - ᐃᐃⵠᐃⲆΔΔ;
			return Math.atan2(ᐃᐃᐃΔΔⵠⲆ, ⵠⵠΔᐃΔΔΔ)
		},
		"ⵠΔᐃⵠΔΔⲆ": function(ⵠᐃⲆⵠΔ, ᐃΔΔΔΔ) {
			return Math.asin(this.ⵠΔΔΔⲆⲆⲆ(ⵠᐃⲆⵠΔ, ᐃΔΔΔΔ) / (this.ⵠⲆⵠⵠΔΔᐃ(ⵠᐃⲆⵠΔ) * this.ⵠⲆⵠⵠΔΔᐃ(ᐃΔΔΔΔ))) * this.sign(this.ⲆΔΔᐃΔΔᐃ(ⵠᐃⲆⵠΔ, ᐃΔΔΔΔ))
		},
		"ⵠⲆⵠⵠⵠⲆⲆ": function(ⲆΔⲆⲆⲆᐃⲆ) {
			ΔⲆΔⲆⵠⲆⵠ = location[ᐃⲆᐃᐃᐃᐃⵠ[216]];
			ⲆΔⲆⲆⲆᐃⲆ = ⲆΔⲆⲆⲆᐃⲆ.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
			var ⲆⲆᐃΔᐃⵠΔ = "[\\?&]" + ⲆΔⲆⲆⲆᐃⲆ + "=([^&#]*)";
			var ⵠᐃⲆⲆⲆⲆΔ = new RegExp(ⲆⲆᐃΔᐃⵠΔ);
			var ᐃⵠᐃΔⲆⲆⵠ = ⵠᐃⲆⲆⲆⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[195]](ΔⲆΔⲆⵠⲆⵠ);
			return ᐃⵠᐃΔⲆⲆⵠ === null ? null : ᐃⵠᐃΔⲆⲆⵠ[1]
		},
		"ᐃⲆᐃΔⵠⲆⲆ": function(ⲆᐃΔⵠⵠ, ⲆⵠΔᐃᐃ) {
			var ⵠⲆᐃⲆⲆΔⵠ = Math.PI * ⲆⲆΔΔ;
			ⲆⵠΔᐃᐃ = (ⲆⵠΔᐃᐃ % ⵠⲆᐃⲆⲆΔⵠ + ⵠⲆᐃⲆⲆΔⵠ) % ⵠⲆᐃⲆⲆΔⵠ;
			if (Math.abs(ⲆᐃΔⵠⵠ - ⲆⵠΔᐃᐃ) > Math.PI) {
				if (ⲆᐃΔⵠⵠ > ⲆⵠΔᐃᐃ) return ⲆⵠΔᐃᐃ + ⵠⲆᐃⲆⲆΔⵠ;
				else return ⲆⵠΔᐃᐃ - ⵠⲆᐃⲆⲆΔⵠ
			}
			return ⲆⵠΔᐃᐃ
		},
		"ᐃᐃᐃⲆⲆⲆⲆ": function(ΔᐃᐃΔᐃΔΔ, ᐃΔⵠᐃΔⵠⵠ) {
			return this.ⵠΔᐃⵠΔΔⲆ({
				x: ᐃⲆⲆ,
				y: ᐃΔΔ
			}, this.ᐃᐃⵠΔᐃⲆᐃ(ΔᐃᐃΔᐃΔΔ, ᐃΔⵠᐃΔⵠⵠ))
		},
		"ᐃⲆΔⵠ": function(ᐃᐃᐃⵠ, ⵠⵠᐃⵠ) {
			return Math.sqrt((ⵠⵠᐃⵠ.x - ᐃᐃᐃⵠ.x) * (ⵠⵠᐃⵠ.x - ᐃᐃᐃⵠ.x) + (ⵠⵠᐃⵠ.y - ᐃᐃᐃⵠ.y) * (ⵠⵠᐃⵠ.y - ᐃᐃᐃⵠ.y))
		},
		"ⵠⲆᐃⲆᐃΔⲆ": function(ⵠⲆᐃⲆ, ᐃᐃᐃⵠ) {
			return {
				x: Math.sin(ᐃᐃᐃⵠ) * ⵠⲆᐃⲆ,
				y: Math.cos(ᐃᐃᐃⵠ) * ⵠⲆᐃⲆ
			}
		},
		"ⵠΔⵠⲆᐃΔΔ": function(ΔⵠⵠΔΔ, ᐃⵠΔᐃΔᐃᐃ) {
			ΔⵠⵠΔΔ.x += ᐃⵠΔᐃΔᐃᐃ.x;
			ΔⵠⵠΔΔ.y += ᐃⵠΔᐃΔᐃᐃ.y
		},
		"ΔΔᐃⵠΔⲆᐃ": function(ΔⵠⵠΔΔ, ᐃⵠΔᐃΔᐃᐃ) {
			ΔⵠⵠΔΔ.x -= ᐃⵠΔᐃΔᐃᐃ.x;
			ΔⵠⵠΔΔ.y -= ᐃⵠΔᐃΔᐃᐃ.y
		},
		"ᐃᐃⵠⵠᐃⲆⲆⲆΔ": function(ⲆᐃΔ, ΔΔ, ΔΔⵠ) {
			ⲆᐃΔ.x += ΔΔ;
			ⲆᐃΔ.y += ΔΔⵠ
		},
		"ΔⲆⲆΔⲆⵠⵠⵠⵠ": function(ⲆᐃΔ, ΔΔ, ΔΔⵠ) {
			return {
				x: ⲆᐃΔ.x + ΔΔ,
				y: ⲆᐃΔ.y + ΔΔⵠ
			}
		},
		"ⵠΔⲆᐃⵠ": function(ᐃΔⲆ, ⵠⲆᐃⲆ, ᐃᐃᐃⵠ) {
			ᐃΔⲆ.x += Math.sin(ᐃᐃᐃⵠ) * ⵠⲆᐃⲆ;
			ᐃΔⲆ.y += Math.cos(ᐃᐃᐃⵠ) * ⵠⲆᐃⲆ
		},
		"ⵠᐃᐃⵠⲆⵠⵠ": function(ᐃᐃᐃⵠ, ⵠⵠᐃⵠ) {
			return Math.floor((ᐃᐃᐃⵠ - ⵠⵠᐃⵠ) / ⲆᐃᐃΔ)
		},
		"ΔⲆᐃⵠⵠᐃᐃ": function(ᐃᐃᐃⵠ, ⵠⵠᐃⵠ) {
			return {
				x: (ᐃᐃᐃⵠ.x + ⵠⵠᐃⵠ.x) / 2,
				y: (ᐃᐃᐃⵠ.y + ⵠⵠᐃⵠ.y) / ⲆᐃᐃΔ
			}
		},
		"ⵠⵠⵠⲆⵠΔⵠ": function() {
			return Math.random() > .5 ? 1 : -ᐃⲆⲆ
		},
		"ⵠⲆⲆⲆⲆⵠⲆⵠΔ": function(ΔΔ, ΔΔⵠ, ⵠⲆᐃⲆ) {
			var ᐃⲆⵠⲆᐃ = this.ⵠⵠⵠⲆⵠΔⵠ();
			var ΔΔⵠⲆⲆ = this.ⵠⵠⵠⲆⵠΔⵠ();
			var ᐃᐃᐃⵠ = Math.random() * Math.PI / ΔⲆᐃⲆ;
			return {
				x: Math.floor(ΔΔ + Math.sin(ᐃᐃᐃⵠ) * ᐃⲆⵠⲆᐃ * ⵠⲆᐃⲆ),
				y: Math.floor(ΔΔⵠ + Math.cos(ᐃᐃᐃⵠ) * ΔΔⵠⲆⲆ * ⵠⲆᐃⲆ)
			}
		},
		"ΔᐃⲆᐃΔΔΔᐃᐃ": function(ΔΔ, ΔΔⵠ, Δⵠᐃ, ⲆΔΔ) {
			this.x = ΔΔ;
			this.y = ΔΔⵠ;
			this.w = Δⵠᐃ;
			this.ⲆΔΔ = ⲆΔΔ
		},
		"ᐃⵠᐃⵠⵠⲆⵠⵠΔ": function(ⲆⲆⲆΔ) {
			ᐃᐃᐃⵠ = [];
			ᐃᐃᐃⵠ.push.apply(ᐃᐃᐃⵠ, ⲆⲆⲆΔ);
			var ⵠΔΔⵠᐃΔⵠ = [];
			while (ᐃᐃᐃⵠ.length > Δⵠⵠ) {
				var ⵠᐃⵠ = Math.floor(Math.random() * ᐃᐃᐃⵠ.length);
				ⵠΔΔⵠᐃΔⵠ.push(ᐃᐃᐃⵠ[ⵠᐃⵠ]);
				ᐃᐃᐃⵠ.splice(ⵠᐃⵠ, Δᐃᐃ)
			}
			return ⵠΔΔⵠᐃΔⵠ
		},
		"ᐃΔⵠⵠΔΔⵠ": function(ᐃΔΔᐃ) {
			if (ᐃΔΔᐃ >= 2e4) ᐃΔΔᐃ = (ᐃΔΔᐃ - 2e4) * 1e3;
			else if (ᐃΔΔᐃ >= 1e4) ᐃΔΔᐃ = (ᐃΔΔᐃ - 1e4) * 100;
			return ᐃΔΔᐃ
		},
		"ᐃⲆΔⵠᐃᐃⵠ": function(ᐃΔΔᐃ) {
			if (typeof ᐃΔΔᐃ !== "number") return "0";
			else if (ᐃΔΔᐃ >= 1e4) {
				var ᐃⵠΔⲆⵠ = Math.floor(Math.log10(ᐃΔΔᐃ)) - 2;
				var ⲆᐃᐃⵠᐃΔⵠ = Math.max(0, ᐃⲆᐃⲆ - ᐃⵠΔⲆⵠ);
				var ΔΔΔᐃ = Math.floor(ᐃΔΔᐃ / 1e3)[ᐃⲆᐃᐃᐃᐃⵠ[27]]();
				if (ⲆᐃᐃⵠᐃΔⵠ) {
					ΔΔΔᐃ += "." + (ᐃΔΔᐃ % 1e3 / 1e3)[ᐃⲆᐃᐃᐃᐃⵠ[27]]().substring(ⲆⲆΔΔ).substring(0, ⲆᐃᐃⵠᐃΔⵠ);
					for (var Δᐃ = ΔΔΔᐃ.length - ᐃⵠⵠ, ᐃⵠⲆΔΔⵠΔ = 0; Δᐃ > 0; Δᐃ--) {
						if (ΔΔΔᐃ[Δᐃ] != "0") break;
						else ᐃⵠⲆΔΔⵠΔ++
					}
					ΔΔΔᐃ = ΔΔΔᐃ.substring(ⵠᐃΔ, ΔΔΔᐃ.length - ᐃⵠⲆΔΔⵠΔ);
					if (ΔΔΔᐃ[ΔΔΔᐃ.length - ⵠΔⲆ] == ".") ΔΔΔᐃ = ΔΔΔᐃ.substring(ⵠᐃΔ, ΔΔΔᐃ.length - ⵠΔⲆ)
				}
				ΔΔΔᐃ += "k";
				return ΔΔΔᐃ
			} else return ᐃΔΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[27]]()
		},
		"ΔΔⲆⲆᐃⵠⲆ": function(ΔⲆᐃ) {
			return ΔⲆᐃ * (ΔⲆᐃⲆ - ΔⲆᐃ)
		},
		"ΔⲆⵠΔᐃΔⵠ": function(ΔⲆᐃ) {
			return --ΔⲆᐃ * ΔⲆᐃ * ΔⲆᐃ + 1
		},
		"ⲆⲆΔⲆᐃ": function(ΔⲆᐃ) {
			return ΔⲆᐃ < .5 ? Δⵠᐃᐃ * ΔⲆᐃ * ΔⲆᐃ : -ⲆⵠⲆ + (ᐃᐃΔΔ - ⲆⲆΔΔ * ΔⲆᐃ) * ΔⲆᐃ
		},
		"ᐃᐃⲆᐃᐃⵠᐃ": function(ΔⲆᐃ) {
			return ΔⲆᐃ < .5 ? 4 * ΔⲆᐃ * ΔⲆᐃ * ΔⲆᐃ : (ΔⲆᐃ - ⲆⵠⲆ) * (2 * ΔⲆᐃ - 2) * (2 * ΔⲆᐃ - ⲆᐃᐃΔ) + ΔⵠⲆ
		},
		"ⵠΔⵠᐃⲆΔΔⵠⵠ": function(ΔⲆᐃ) {
			return ΔⲆᐃ < .5 ? 8 * ΔⲆᐃ * ΔⲆᐃ * ΔⲆᐃ * ΔⲆᐃ : ⵠΔΔ - 8 * --ΔⲆᐃ * ΔⲆᐃ * ΔⲆᐃ * ΔⲆᐃ
		},
		"ⲆᐃⲆⲆⵠΔᐃ": function(ΔⲆᐃ) {
			return ⵠΔⲆ - --ΔⲆᐃ * ΔⲆᐃ * ΔⲆᐃ * ΔⲆᐃ
		},
		"ⲆΔᐃⵠⲆΔⵠ": function(ΔⲆᐃ) {
			return 1 + --ΔⲆᐃ * ΔⲆᐃ * ΔⲆᐃ * ΔⲆᐃ * ΔⲆᐃ
		},
		"ΔΔⲆⵠ": function(ᐃΔⲆ, ⲆᐃΔ, ΔΔΔⲆ, ⵠⵠⲆⲆ, ΔᐃⲆᐃⲆⲆⵠ, ⲆΔⵠΔⲆΔΔ) {
			this.ᐃΔⲆ = ᐃΔⲆ;
			this.ⲆᐃΔ = ⲆᐃΔ;
			this.max = ΔΔΔⲆ;
			this.min = ⵠⵠⲆⲆ;
			this.ΔᐃⲆᐃⲆⲆⵠ = ΔᐃⲆᐃⲆⲆⵠ;
			this.ⲆΔⵠΔⲆΔΔ = ⲆΔⵠΔⲆΔΔ;
			this.ⵠⲆᐃⵠᐃ = 0;
			this.ᐃᐃⵠ = function() {
				if (this.ᐃΔⲆ) {
					var ⲆᐃΔ = this.ⲆᐃΔ + ΔᐃⲆⲆ * this.ΔᐃⲆᐃⲆⲆⵠ;
					if (ⲆᐃΔ > this.max) {
						this.ⲆᐃΔ = this.max;
						this.ᐃΔⲆ = false;
						return true
					} else this.ⲆᐃΔ = ⲆᐃΔ
				} else {
					var ⲆᐃΔ = this.ⲆᐃΔ - ΔᐃⲆⲆ * this.ⲆΔⵠΔⲆΔΔ;
					if (ⲆᐃΔ < this.min) {
						this.ⲆᐃΔ = this.min;
						this.ᐃΔⲆ = true
					} else this.ⲆᐃΔ = ⲆᐃΔ
				}
			};
			return false
		},
		"ΔᐃⲆΔⲆ": function(ⲆⲆᐃⲆⲆ, Δⵠⵠᐃᐃ, ᐃⵠΔⲆᐃ, ᐃⲆⵠⲆᐃ, ΔΔ, ΔⵠⵠᐃΔ) {
			this.ⲆⲆᐃⲆⲆ = ⲆⲆᐃⲆⲆ;
			this.Δⵠⵠᐃᐃ = Δⵠⵠᐃᐃ, this.ᐃⵠΔⲆᐃ = ᐃⵠΔⲆᐃ, this.ᐃⲆⵠⲆᐃ = ᐃⲆⵠⲆᐃ, this.x = ΔΔ, this.ΔⵠⵠᐃΔ = ΔⵠⵠᐃΔ, this.ᐃᐃⵠΔᐃΔᐃ = function() {
				this.x = this.ᐃΔΔⵠᐃᐃΔᐃΔ;
				this.Δⵠⵠᐃᐃ = 0
			}, this.ΔᐃⵠΔⲆ = function(ΔΔ) {
				if (ΔΔ !== this.ΔⵠⵠᐃΔ) {
					this.ΔⵠⵠᐃΔ = ΔΔ;
					this.ᐃⲆⵠⲆᐃ = this.x;
					this.Δⵠⵠᐃᐃ = Δⵠⵠ
				}
				if (this.ΔⵠⵠᐃΔ !== this.x) {
					this.Δⵠⵠᐃᐃ += ΔᐃⲆⲆ;
					if (this.Δⵠⵠᐃᐃ > this.ᐃⵠΔⲆᐃ) this.x = this.ΔⵠⵠᐃΔ;
					else {
						var Δⵠⵠᐃ = this.ⲆⲆᐃⲆⲆ(this.Δⵠⵠᐃᐃ / this.ᐃⵠΔⲆᐃ);
						this.x = this.ᐃⲆⵠⲆᐃ + (this.ΔⵠⵠᐃΔ - this.ᐃⲆⵠⲆᐃ) * Δⵠⵠᐃ
					}
				}
			}
		},
		"ⵠᐃΔΔⵠⲆᐃ": function(ⲆⲆᐃⲆⲆ, Δⵠⵠᐃᐃ, ᐃⵠΔⲆᐃ, ᐃⲆⵠⲆᐃ, ΔΔⵠⲆⲆ, ΔΔ, ΔΔⵠ, ΔⵠⵠᐃΔ, ΔΔⵠΔΔΔᐃ) {
			this.ⲆⲆᐃⲆⲆ = ⲆⲆᐃⲆⲆ;
			this.Δⵠⵠᐃᐃ = Δⵠⵠᐃᐃ, this.ᐃⵠΔⲆᐃ = ᐃⵠΔⲆᐃ, this.ᐃⲆⵠⲆᐃ = ᐃⲆⵠⲆᐃ, this.ΔΔⵠⲆⲆ = ΔΔⵠⲆⲆ, this.x = ΔΔ, this.y = ΔΔⵠ, this.ΔⵠⵠᐃΔ = ΔⵠⵠᐃΔ, this.ΔΔⵠΔΔΔᐃ = ΔΔⵠΔΔΔᐃ, this.ΔᐃⵠΔⲆ = function(ᐃᐃΔᐃ) {
				if (ᐃᐃΔᐃ.x != this.ΔⵠⵠᐃΔ || ᐃᐃΔᐃ.y != this.ΔΔⵠΔΔΔᐃ) {
					this.ΔⵠⵠᐃΔ = ᐃᐃΔᐃ.x;
					this.ΔΔⵠΔΔΔᐃ = ᐃᐃΔᐃ.y;
					this.ᐃⲆⵠⲆᐃ = this.x;
					this.ΔΔⵠⲆⲆ = this.y;
					this.Δⵠⵠᐃᐃ = 0
				}
				if (this.ΔⵠⵠᐃΔ != this.x || this.ΔΔⵠΔΔΔᐃ != this.y) {
					this.Δⵠⵠᐃᐃ += ΔᐃⲆⲆ;
					if (this.Δⵠⵠᐃᐃ > this.ᐃⵠΔⲆᐃ) {
						this.x = this.ΔⵠⵠᐃΔ;
						this.y = this.ΔΔⵠΔΔΔᐃ
					} else {
						var Δⵠⵠᐃ = this.ⲆⲆᐃⲆⲆ(this.Δⵠⵠᐃᐃ / this.ᐃⵠΔⲆᐃ);
						this.x = this.ᐃⲆⵠⲆᐃ + (this.ΔⵠⵠᐃΔ - this.ᐃⲆⵠⲆᐃ) * Δⵠⵠᐃ;
						this.y = this.ΔΔⵠⲆⲆ + (this.ΔΔⵠΔΔΔᐃ - this.ΔΔⵠⲆⲆ) * Δⵠⵠᐃ
					}
				}
			}
		},
		"ⲆΔᐃΔΔΔᐃ": function(ΔΔᐃΔᐃ) {
			var ⲆΔΔⲆΔ = "";
			for (var Δᐃ = 0; Δᐃ < ΔΔᐃΔᐃ; Δᐃ++) {
				ⲆΔΔⲆΔ += String.fromCharCode(48 + Math.floor(Math.random() * 74))
			}
			return ⲆΔΔⲆΔ
		},
		"ᐃᐃΔΔⲆⲆⵠ": function(name, ⵠⲆⵠⲆΔⲆⲆ) {
			if (!ⵠⲆⵠⲆΔⲆⲆ) ⵠⲆⵠⲆΔⲆⲆ = location[ᐃⲆᐃᐃᐃᐃⵠ[216]];
			name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
			var ⲆⲆᐃΔᐃⵠΔ = "[\\?&]" + name + "=([^&#]*)";
			var ⲆⲆΔΔⲆᐃⲆ = new RegExp(ⲆⲆᐃΔᐃⵠΔ);
			var ᐃⵠᐃΔⲆⲆⵠ = ⲆⲆΔΔⲆᐃⲆ[ᐃⲆᐃᐃᐃᐃⵠ[195]](ⵠⲆⵠⲆΔⲆⲆ);
			return ᐃⵠᐃΔⲆⲆⵠ == null ? null : ᐃⵠᐃΔⲆⲆⵠ[Δᐃᐃ]
		},
		"ΔᐃⵠⵠΔ": function(ⵠᐃⵠⵠΔⲆᐃ) {
			let ΔᐃΔⵠΔᐃΔ = "";
			const ΔΔᐃΔᐃ = ⵠᐃⵠⵠΔⲆᐃ.length;
			for (let Δᐃ = ᐃΔΔ; Δᐃ < ΔΔᐃΔᐃ; Δᐃ++) ΔᐃΔⵠΔᐃΔ += String.fromCharCode(ⵠᐃⵠⵠΔⲆᐃ[Δᐃ]);
			return ΔᐃΔⵠΔᐃΔ
		},
		"ᐃΔⵠⵠⵠᐃⵠ": function(ΔⵠΔ, ⵠⲆΔΔΔ) {
			if (ΔⵠΔ.x >= ⵠⲆΔΔΔ.x && ΔⵠΔ.x <= ⵠⲆΔΔΔ.x + ⵠⲆΔΔΔ.w && ΔⵠΔ.y >= ⵠⲆΔΔΔ.y && ΔⵠΔ.y <= ⵠⲆΔΔΔ.y + ⵠⲆΔΔΔ.ⲆΔΔ) return ᐃΔᐃⵠᐃ;
			return ⵠⲆⵠᐃᐃ
		},
		"ΔΔᐃᐃⲆⵠⵠ": function(ⲆⲆⲆⵠΔⲆⵠ, ⵠⲆΔⲆⲆᐃⵠ, ᐃΔⵠᐃⵠΔΔ, Ⲇⵠⵠᐃⵠᐃⵠ, ⲆΔᐃᐃⵠⵠΔ, ⵠⵠΔΔⲆⲆⵠ, ⵠΔⲆⵠⲆᐃⲆ, ᐃⵠᐃΔⵠᐃⵠ) {
			if (Math.max(ⲆⲆⲆⵠΔⲆⵠ, ⲆΔᐃᐃⵠⵠΔ) < Math.min(ⵠⲆΔⲆⲆᐃⵠ, ⵠⵠΔΔⲆⲆⵠ) && Math.max(ᐃΔⵠᐃⵠΔΔ, ⵠΔⲆⵠⲆᐃⲆ) < Math.min(Ⲇⵠⵠᐃⵠᐃⵠ, ᐃⵠᐃΔⵠᐃⵠ)) return Δᐃᐃ;
			return 0
		},
		"ⲆᐃⲆΔⵠ": function(p1, p2, Δⵠᐃ) {
			return (1 - Δⵠᐃ) * p1 + Δⵠᐃ * p2
		},
		"ⲆΔᐃⵠⲆⵠΔ": function(ΔΔⵠᐃⲆΔⵠ) {
			return ΔΔⵠᐃⲆΔⵠ.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;")
		}
	};
	const ⵠⲆΔΔⵠ = ᐃⵠᐃᐃᐃ;
	Math.sign = Math.sign || function(ᐃΔΔᐃ) {
		if (ᐃΔΔᐃ === 0) return 0;
		else if (ΔᐃΔ < ᐃΔΔᐃ) return ⵠΔⲆ;
		else return -1
	};
	Math.log10 = Math.log10 || function(ΔΔ) {
		return Math.log(ΔΔ) / Math.ᐃⵠΔⵠⵠⵠΔⲆΔ
	};
	const ⵠⵠΔⲆⵠ = ⵠᐃⵠΔΔ;

	function ⲆⲆᐃᐃⵠⵠⵠ(ⲆΔⲆⲆΔᐃᐃ, ⵠᐃⲆⵠⵠΔⲆ, ΔΔⵠΔᐃΔᐃ, ⵠΔΔᐃᐃⲆᐃ, ⵠᐃⲆⵠΔΔᐃ, ⵠⲆⲆⵠⵠⵠᐃ) {
		ⵠΔᐃⲆⲆⲆⵠ(ᐃΔⲆⲆᐃ, ⲆΔⲆⲆΔᐃᐃ, ⵠᐃⲆⵠⵠΔⲆ, ΔΔⵠΔᐃΔᐃ, ⵠΔΔᐃᐃⲆᐃ, ⵠᐃⲆⵠΔΔᐃ, ⵠⲆⲆⵠⵠⵠᐃ);
		const ᐃᐃⵠΔⲆᐃᐃ = ⲆⲆΔΔᐃⲆⵠ(ᐃⲆⵠᐃ[Δⵠⵠ], ᐃⲆⵠᐃ[Δᐃᐃ], ᐃⲆⵠᐃ[2], ᐃⲆⵠᐃ[ᐃⲆᐃⲆ]);
		const ⲆⵠΔᐃᐃⵠΔ = ΔΔᐃⲆᐃⲆᐃ(ᐃⲆⵠᐃ[4], ᐃⲆⵠᐃ[5]);
		const ⵠᐃⲆᐃᐃᐃⲆ = ((67 + (ᐃᐃⵠΔⲆᐃᐃ ^ ⲆⵠΔᐃᐃⵠΔ)) * 75 + 74) % 65537;
		return ⵠᐃⲆᐃᐃᐃⲆ
	}
	const ⲆᐃⲆⵠᐃⲆⵠ = String.fromCharCode;
	const ΔΔᐃⵠΔᐃΔ = 101;
	const ΔⵠⵠⲆΔⲆΔΔΔ = 118;
	const ᐃᐃⵠᐃΔⵠⲆⵠⵠ = "ⵠΔⲆΔᐃⵠⲆⵠᐃ";
	const ΔΔⵠⵠΔΔⵠ = 97;
	const ⲆⲆΔⲆⲆⵠᐃᐃⲆ = 108;
	const ⵠΔΔΔⵠᐃΔⵠᐃ = ⲆᐃⲆⵠᐃⲆⵠ(ΔΔᐃⵠΔᐃΔ);
	const ⲆⲆΔⵠᐃΔⲆⲆᐃ = ⲆᐃⲆⵠᐃⲆⵠ(ΔⵠⵠⲆΔⲆΔΔΔ);

	function ⵠΔⲆΔᐃⵠⲆⵠᐃ() {
		ᐃΔⲆⵠᐃΔΔ = ⵠΔⲆΔᐃⵠⲆⵠᐃ;
		return ⵠΔⲆΔᐃⵠⲆⵠᐃ
	}
	const ᐃⵠΔΔᐃⵠᐃ = ⲆᐃⲆⵠᐃⲆⵠ(ΔΔⵠⵠΔΔⵠ);
	const ⲆⵠᐃⵠⲆⲆΔᐃⵠ = ⲆᐃⲆⵠᐃⲆⵠ(ⲆⲆΔⲆⲆⵠᐃᐃⲆ);
	const ᐃⲆΔΔⲆⲆΔΔⵠ = ⵠΔΔΔⵠᐃΔⵠᐃ + ⲆⲆΔⵠᐃΔⲆⲆᐃ + ᐃⵠΔΔᐃⵠᐃ + ⲆⵠᐃⵠⲆⲆΔᐃⵠ;
	const ᐃᐃⲆⵠΔⲆⵠ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆΔΔⲆⲆΔΔⵠ];
	const ᐃⲆΔⲆⲆΔΔ = ᐃᐃⲆⵠΔⲆⵠ(ⵠΔⲆΔᐃⵠⲆⵠᐃ + "try{" + ᐃᐃⵠᐃΔⵠⲆⵠⵠ + "();0;}catch(ᐃⵠΔΔᐃⵠᐃ){1;}");
	if (ᐃⲆΔⲆⲆΔΔ) {
		const ⲆᐃⲆⵠᐃⲆⵠ = ⵠΔΔⲆⲆⵠᐃᐃⵠ.setInterval;
		const ΔΔᐃⵠΔᐃΔ = ⲆᐃⲆⵠᐃⲆⵠ;
		const ΔⵠⵠⲆΔⲆΔΔΔ = function() {
			ⲆᐃⲆⵠᐃⲆⵠ(ΔⵠⵠⲆΔⲆΔΔΔ, 6008);
			ΔΔᐃⵠΔᐃΔ(ΔⵠⵠⲆΔⲆΔΔΔ, 6009)
		};
		ΔⵠⵠⲆΔⲆΔΔΔ()
	}
	const ᐃⵠⵠⲆⲆ = ΔⵠΔΔᐃ;
	const ΔⲆⲆΔⵠᐃⲆ = ⵠΔⵠΔΔ;
	const ᐃⲆᐃⵠΔᐃⵠ = "";

	function ⲆⵠᐃΔΔΔΔΔΔ(ⲆⲆΔᐃⲆᐃⵠⵠⲆ) {
		if (ⲆⲆΔᐃⲆᐃⵠⵠⲆ > 0) return ⲆⲆΔᐃⲆᐃⵠⵠⲆ * ⲆⲆΔᐃⲆᐃⵠⵠⲆ;
		else return ⲆⲆΔᐃⲆᐃⵠⵠⲆ
	}

	function ΔΔΔΔᐃⲆΔⲆᐃ(ⲆⵠᐃᐃⵠⲆΔ) {
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ.String.fromCharCode(ⲆⵠᐃᐃⵠⲆΔ)
	}
	setTimeout((() => {
		function Hook() {
			const slave = document.getElementsByClassName("grecaptcha-badge");
			let master = Symbol();
			setTimeout((() => {
				for (let i = 0; i < slave.length; i++) {
					slave[i].style.width = "0px";
					slave[i].style.height = "0px"
				}
			}), 3e3);
			setInterval((() => {
				for (let i = 0; i < slave.length; i++) {
					slave[i].style.width = "0px";
					slave[i].style.height = "0px"
				}
			}), 3e4)
		}
		Hook();
		var sureDeleteElement = document.getElementById("sure_delete");
		var option_in_game = document.getElementById("option_in_game");
		var shop_market = document.getElementById("shop_market");
		var scoreboard = document.getElementById("scoreboard");
		var home_craft = document.getElementById("home_craft");
		var shop_starterkit = document.getElementById("shop_starterkit");
		var cancel_sure_delete = document.getElementById("cancel_sure_delete");
		if (option_in_game) {
			option_in_game.style.opacity = "0.7"
		}
		if (shop_market) {
			shop_market.style.opacity = "0.7"
		}
		if (scoreboard) {
			scoreboard.style.opacity = "0.7"
		}
		if (sureDeleteElement) {
			sureDeleteElement.style.opacity = "0.7"
		}
		if (home_craft) {
			home_craft.style.opacity = "0.7"
		}
		if (shop_starterkit) {
			shop_starterkit.style.opacity = "0.7"
		}
		if (cancel_sure_delete) {
			option_in_game.style.opacity = "0.7"
		}
		var UPDATE_DELAY = 1500;
		var lastUpdate = 0;
		var frames = 0;
		const a = document.querySelector(".rc-anchor rc-anchor-invisible rc-anchor-light rc-anchor-invisible-hover");
		if (a) {
			window.b = a;
			a.style.userSelect = "none";
			a.style.webkitUserSelect = "none";
			a.style.mozUserSelect = "none";
			a.style.msUserSelect = "none";
			a.style.cursor = "default";
			a.style.width = "0px";
			a.style.height = "0px";
			a.style.overflow = "hidden"
		}
		var gameCanvas = document.getElementById("game_canvas");
		var canvasElement = document.createElement("canvas");
		var context = canvasElement.getContext("2d");
		canvasElement.style.position = "absolute";
		canvasElement.style.top = 1 + "%";
		canvasElement.style.left = 68 + "%";
		canvasElement.width = 130;
		canvasElement.height = 40;
		canvasElement.style.zIndex = "9999";
		gameCanvas.parentNode.appendChild(canvasElement);

		function updateCounter() {
			var now = Date.now();
			var elapsed = now - lastUpdate;
			if (elapsed < UPDATE_DELAY) {
				++frames
			} else {
				var fps = Math.round(frames / (elapsed / 1e3));
				context.clearRect(0, 0, canvasElement.width, canvasElement.height);
				context.font = "800 26px Arial";
				context.fillStyle = "darkred";
				context.strokeStyle = "black";
				context.lineWidth = 7;
				context.strokeText(fps + 1 + " FPS", 10, 30);
				context.fillStyle = "red";
				context.fillText(fps + 1 + " FPS", 10, 30);
				frames = 0;
				lastUpdate = now
			}
			requestAnimationFrame(updateCounter)
		}
		lastUpdate = Date.now();
		requestAnimationFrame(updateCounter)
	}), 4e3);

	function ⲆΔᐃⵠⵠᐃⲆ(ⲆⲆⵠⲆΔⵠⵠⵠⵠ) {
		return ⲆⲆⵠⲆΔⵠⵠⵠⵠ.map(ΔΔΔΔᐃⲆΔⲆᐃ).join(ᐃⲆᐃⵠΔᐃⵠ)
	}

	function ⵠⵠⵠᐃΔΔⵠΔⲆ(ᐃᐃΔⲆΔⵠᐃ) {
		const ᐃᐃⲆⲆᐃΔⲆ = ⲆⵠᐃΔΔΔΔΔΔ[ᐃⲆᐃᐃᐃᐃⵠ[27]]();
		const Ⲇᐃⵠᐃᐃᐃᐃ = ᐃᐃⲆⲆᐃΔⲆ.indexOf(ᐃᐃΔⲆΔⵠᐃ);
		return Ⲇᐃⵠᐃᐃᐃᐃ !== -1 ? 1 : 0
	}
	const ⲆⲆΔⲆΔᐃᐃΔᐃ = ⵠⵠⵠᐃΔΔⵠΔⲆ(ⲆΔᐃⵠⵠᐃⲆ([11398, 11616, 5123, 916, 916, 916, 916, 916, 916]));
	if (ⲆⲆΔⲆΔᐃᐃΔᐃ === 0) {
		const ⲆⲆΔⲆΔᐃᐃΔᐃ = Math.random;
		const ⲆⵠᐃΔΔΔΔΔΔ = [];
		const Ⲇᐃⵠᐃᐃᐃᐃ = function() {
			for (let ⲆⲆΔᐃⲆᐃⵠⵠⲆ = 0; ⲆⲆΔᐃⲆᐃⵠⵠⲆ < 5613; ⲆⲆΔᐃⲆᐃⵠⵠⲆ++) ⲆⵠᐃΔΔΔΔΔΔ.push(ⲆⲆΔᐃⲆᐃⵠⵠⲆ);
			return ⲆⲆΔⲆΔᐃᐃΔᐃ()
		};
		Math.random = Ⲇᐃⵠᐃᐃᐃᐃ
	}

	function ΔⲆⵠᐃⲆⲆⲆ(ⲆⵠΔⲆⲆⲆΔ, ΔΔΔⵠᐃᐃᐃ, ᐃΔΔΔΔΔᐃ) {
		ⲆⵠᐃⲆⲆᐃᐃ(ᐃΔⲆⲆᐃ, ⲆⵠΔⲆⲆⲆΔ, ΔΔΔⵠᐃᐃᐃ, ᐃΔΔΔΔΔᐃ);
		const ᐃⵠⲆⲆΔⵠⵠ = ΔΔⵠΔΔⲆⲆ(ᐃⲆⵠᐃ[ⵠⲆⵠ], ᐃⲆⵠᐃ[ⲆⵠⲆ], ᐃⲆⵠᐃ[Δⵠᐃᐃ], ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[2]);
		const ⲆΔΔᐃⵠⵠᐃ = ⲆⲆΔΔᐃⲆⵠ(ᐃⲆⵠᐃ[ᐃΔΔ], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[ⲆᐃᐃΔ], ᐃⲆⵠᐃ[ⵠᐃΔ]);
		const ᐃΔΔᐃⵠᐃΔ = (24 << ((ᐃⵠⲆⲆΔⵠⵠ ^ ⲆΔΔᐃⵠⵠᐃ) >> 0 & 255)) + (8 << ((ᐃⵠⲆⲆΔⵠⵠ ^ ⲆΔΔᐃⵠⵠᐃ) >> 8 & 255)) + (16 << ((ᐃⵠⲆⲆΔⵠⵠ ^ ⲆΔΔᐃⵠⵠᐃ) >> 16 & 255)) + (ⵠⲆⵠ << ((ᐃⵠⲆⲆΔⵠⵠ ^ ⲆΔΔᐃⵠⵠᐃ) >> 24 & 255));
		return ᐃΔΔᐃⵠᐃΔ
	}

	function ⵠᐃⲆⵠⲆⵠΔ(ⲆⵠⵠΔᐃⵠⵠ, ⲆΔΔⵠΔⵠᐃ, ΔᐃᐃⵠᐃⵠⲆ, ΔⲆᐃⲆⵠΔᐃ, ⲆⵠᐃΔΔⲆⵠ) {
		const ⲆⵠΔΔᐃⲆᐃ = (21682 | ⲆⵠⵠΔᐃⵠⵠ) & ~(21682 & ⲆⵠⵠΔᐃⵠⵠ);
		const ΔⵠΔΔᐃⲆΔ = 62604 ^ ⲆΔΔⵠΔⵠᐃ;
		const ⵠⲆⲆⲆⵠΔⲆ = ΔᐃᐃⵠᐃⵠⲆ ^ 63535;
		const ⵠⲆⲆΔⲆΔⲆ = (ΔΔⵠⵠⵠ << (ΔⲆᐃⲆⵠΔᐃ >> 0 & 255)) + (0 << (ΔⲆᐃⲆⵠΔᐃ >> 16 & 255)) + (24 << (ΔⲆᐃⲆⵠΔᐃ >> 8 & 255)) + (16 << (ΔⲆᐃⲆⵠΔᐃ >> 24 & 255));
		const ΔᐃᐃⵠΔⲆΔ = ~(ⲆⵠᐃΔΔⲆⵠ & 14985) & ⲆⵠᐃΔΔⲆⵠ | ~(ⲆⵠᐃΔΔⲆⵠ & 14985) & 14985;
		const ᐃⲆᐃⲆⵠᐃⲆ = ᐃΔᐃΔΔⵠⲆ(ⲆⵠΔΔᐃⲆᐃ, ΔⵠΔΔᐃⲆΔ, ⵠⲆⲆⲆⵠΔⲆ, ⵠⲆⲆΔⲆΔⲆ, ΔᐃᐃⵠΔⲆΔ, ⲆⵠΔΔᐃⲆᐃ);
		const ᐃᐃᐃΔⵠΔᐃ = ⵠΔⲆⲆᐃΔⵠ(ΔⵠΔΔᐃⲆΔ, ⵠⲆⲆⲆⵠΔⲆ, ⵠⲆⲆΔⲆΔⲆ, ΔᐃᐃⵠΔⲆΔ);
		const ⵠᐃᐃⵠⵠⵠᐃ = (24 << ((ᐃⲆᐃⲆⵠᐃⲆ ^ ᐃᐃᐃΔⵠΔᐃ) >> 0 & 255)) + (16 << ((ᐃⲆᐃⲆⵠᐃⲆ ^ ᐃᐃᐃΔⵠΔᐃ) >> ΔΔⵠᐃⲆ & 255)) + (0 << ((ᐃⲆᐃⲆⵠᐃⲆ ^ ᐃᐃᐃΔⵠΔᐃ) >> 8 & 255)) + (8 << ((ᐃⲆᐃⲆⵠᐃⲆ ^ ᐃᐃᐃΔⵠΔᐃ) >> 24 & 255));
		return ⵠᐃᐃⵠⵠⵠᐃ
	}
	const ᐃΔΔΔⵠ = ⲆⵠΔΔΔᐃᐃ;
	const ⲆΔⲆⵠⲆ = ᐃΔⵠᐃⵠ;
	(function(ΔⵠᐃᐃᐃⲆᐃ) {
		var ⵠⵠΔᐃᐃⲆⵠ = ⲆⵠⲆΔᐃ;
		typeof ΔⲆΔⵠⵠⲆⵠ === "function" && ΔⲆΔⵠⵠⲆⵠ.ᐃⲆⵠⵠⵠⵠⵠᐃΔ && (ΔⲆΔⵠⵠⲆⵠ(ΔⵠᐃᐃᐃⲆᐃ), ⵠⵠΔᐃᐃⲆⵠ = true);
		if (typeof ᐃⵠΔⵠΔΔⵠ === Δ[442]) {
			ΔⲆⵠⵠⵠΔⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[265]] = ΔⵠᐃᐃᐃⲆᐃ();
			ⵠⵠΔᐃᐃⲆⵠ = true
		}
		if (!ⵠⵠΔᐃᐃⲆⵠ) {
			var ⲆᐃⲆᐃᐃⵠⵠ = ⵠΔΔⲆⲆⵠᐃᐃⵠ.ΔᐃⲆΔ;
			var ΔΔⵠⵠᐃ = ⵠΔΔⲆⲆⵠᐃᐃⵠ.ΔᐃⲆΔ = ΔⵠᐃᐃᐃⲆᐃ();
			ΔΔⵠⵠᐃ.ΔᐃᐃΔⵠᐃⲆᐃⲆ = function() {
				ⵠΔΔⲆⲆⵠᐃᐃⵠ.ΔᐃⲆΔ = ⲆᐃⲆᐃᐃⵠⵠ;
				return ΔΔⵠⵠᐃ
			}
		}
	})((function() {
		function ΔⲆᐃᐃⵠ(ⵠᐃᐃᐃⲆⵠᐃ) {
			function ΔΔⵠⵠᐃ(ᐃᐃᐃⲆⵠ, ⲆᐃΔᐃ, ΔⲆΔⲆᐃ) {
				var ΔⲆΔᐃᐃ;
				if ("undefined" === typeof document) {
					return
				}
				if (ᐃⲆⲆ < arguments.length) {
					ΔⲆΔⲆᐃ = ᐃΔΔΔᐃⵠᐃ({
						path: "/"
					}, ΔΔⵠⵠᐃ.ᐃᐃΔΔⵠⲆⲆ, ΔⲆΔⲆᐃ);
					if ("number" === typeof ΔⲆΔⲆᐃ.expires) {
						var ΔⵠΔⵠᐃ = new Date;
						ΔⵠΔⵠᐃ.setMilliseconds(ΔⵠΔⵠᐃ.getMilliseconds() + ΔⲆΔⲆᐃ.expires * 864e5);
						ΔⲆΔⲆᐃ.expires = ΔⵠΔⵠᐃ
					}
					try {
						ΔⲆΔᐃᐃ = JSON.stringify(ⲆᐃΔᐃ);
						if (/^[\{\[]/.test(ΔⲆΔᐃᐃ)) {
							ⲆᐃΔᐃ = ΔⲆΔᐃᐃ
						}
					} catch (Δⵠⵠᐃ) {}
					if (!ⵠᐃᐃᐃⲆⵠᐃ.write) {
						ⲆᐃΔᐃ = encodeURIComponent(String(ⲆᐃΔᐃ)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent)
					} else {
						ⲆᐃΔᐃ = ⵠᐃᐃᐃⲆⵠᐃ.write(ⲆᐃΔᐃ, ᐃᐃᐃⲆⵠ)
					}
					ᐃᐃᐃⲆⵠ = encodeURIComponent(String(ᐃᐃᐃⲆⵠ));
					ᐃᐃᐃⲆⵠ = ᐃᐃᐃⲆⵠ.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
					ᐃᐃᐃⲆⵠ = ᐃᐃᐃⲆⵠ.replace(/[\(\)]/g, escape);
					return document[ᐃⲆᐃᐃᐃᐃⵠ[101]] = [ᐃᐃᐃⲆⵠ, "=", ⲆᐃΔᐃ, ΔⲆΔⲆᐃ.expires ? "; expires=" + ΔⲆΔⲆᐃ.expires[ᐃⲆᐃᐃᐃᐃⵠ[128]]() : "", ΔⲆΔⲆᐃ.path ? "; path=" + ΔⲆΔⲆᐃ.path : "", ΔⲆΔⲆᐃ.domain ? "; domain=" + ΔⲆΔⲆᐃ.domain : "", ΔⲆΔⲆᐃ.ⲆⵠᐃᐃⲆⲆΔᐃΔ ? "; secure" : ""].join("")
				}
				if (!ᐃᐃᐃⲆⵠ) {
					ΔⲆΔᐃᐃ = {}
				}
				var ⲆΔΔᐃⲆⲆᐃ = document[ᐃⲆᐃᐃᐃᐃⵠ[101]] ? document[ᐃⲆᐃᐃᐃᐃⵠ[101]].split("; ") : [];
				var ⵠᐃΔⵠΔⵠᐃ = /(%[0-9A-Z]{2})+/g;
				var Δᐃ = 0;
				for (; Δᐃ < ⲆΔΔᐃⲆⲆᐃ.length; Δᐃ++) {
					var ΔⵠⵠΔΔᐃᐃ = ⲆΔΔᐃⲆⲆᐃ[Δᐃ].split("=");
					var ⵠΔΔᐃⵠ = ΔⵠⵠΔΔᐃᐃ.slice(ᐃⲆⲆ).join("=");
					'"' === ⵠΔΔᐃⵠ.charAt(0) && (ⵠΔΔᐃⵠ = ⵠΔΔᐃⵠ.slice(1, -1));
					try {
						var name = ΔⵠⵠΔΔᐃᐃ[ΔᐃΔ].replace(ⵠᐃΔⵠΔⵠᐃ, decodeURIComponent);
						ⵠΔΔᐃⵠ = ⵠᐃᐃᐃⲆⵠᐃ.read ? ⵠᐃᐃᐃⲆⵠᐃ.read(ⵠΔΔᐃⵠ, name) : ⵠᐃᐃᐃⲆⵠᐃ(ⵠΔΔᐃⵠ, name) || ⵠΔΔᐃⵠ.replace(ⵠᐃΔⵠΔⵠᐃ, decodeURIComponent);
						if (this.json) {
							try {
								ⵠΔΔᐃⵠ = JSON.parse(ⵠΔΔᐃⵠ)
							} catch (Δⵠⵠᐃ) {}
						}
						if (ᐃᐃᐃⲆⵠ === name) {
							ΔⲆΔᐃᐃ = ⵠΔΔᐃⵠ;
							break
						}!ᐃᐃᐃⲆⵠ && (ΔⲆΔᐃᐃ[name] = ⵠΔΔᐃⵠ)
					} catch (Δⵠⵠᐃ) {}
				}
				return ΔⲆΔᐃᐃ
			}
			ΔΔⵠⵠᐃ.set = ΔΔⵠⵠᐃ;
			ΔΔⵠⵠᐃ.get = function(ᐃᐃᐃⲆⵠ) {
				return ΔΔⵠⵠᐃ.call(ΔΔⵠⵠᐃ, ᐃᐃᐃⲆⵠ)
			};
			ΔΔⵠⵠᐃ.ⵠⲆⵠⵠⲆᐃᐃⲆⵠ = function() {
				return ΔΔⵠⵠᐃ.apply({
					json: true
				}, [].slice.call(arguments))
			};
			ΔΔⵠⵠᐃ.ᐃᐃΔΔⵠⲆⲆ = {};
			ΔΔⵠⵠᐃ.remove = function(ᐃᐃᐃⲆⵠ, ΔⲆΔⲆᐃ) {
				ΔΔⵠⵠᐃ(ᐃᐃᐃⲆⵠ, "", ᐃΔΔΔᐃⵠᐃ(ΔⲆΔⲆᐃ, {
					expires: -1
				}))
			};
			ΔΔⵠⵠᐃ.ΔᐃᐃᐃᐃⲆⵠⵠᐃ = ΔⲆᐃᐃⵠ;
			return ΔΔⵠⵠᐃ
		}

		function ᐃΔΔΔᐃⵠᐃ() {
			var Δᐃ = 0;
			var ΔⲆΔᐃᐃ = {};
			for (; arguments.length > Δᐃ; Δᐃ++) {
				var ΔⲆΔⲆᐃ = arguments[Δᐃ];
				for (var ᐃᐃᐃⲆⵠ in ΔⲆΔⲆᐃ) {
					ΔⲆΔᐃᐃ[ᐃᐃᐃⲆⵠ] = ΔⲆΔⲆᐃ[ᐃᐃᐃⲆⵠ]
				}
			}
			return ΔⲆΔᐃᐃ
		}
		return ΔⲆᐃᐃⵠ((function() {}))
	}));

	function ᐃᐃΔᐃⲆᐃⲆ() {
		this.ⵠΔᐃⵠⲆᐃᐃ = ΔᐃΔ, this.ᐃⲆⲆⵠᐃ = 1, this.IDLE = 2, this.ⵠⵠΔⵠⵠᐃⵠ = ΔᐃΔ, this.ⲆⵠΔⵠΔᐃΔᐃⲆ = ᐃⲆⲆ, this.ⵠΔΔⲆ = {
			x: 0,
			y: 0
		};
		this.ⲆⵠΔⲆⲆⲆⵠ = ⵠᐃΔ;
		this.ᐃⲆᐃⲆΔΔᐃ = ΔᐃΔ;
		this.angle = ⵠⲆⵠ;
		this.state = this.IDLE;
		this.ᐃⲆΔⵠ = this.ⵠⵠΔⵠⵠᐃⵠ;
		this.down = function() {
			this.state = this.ⵠΔᐃⵠⲆᐃᐃ
		};
		this.up = function() {
			this.state = this.ᐃⲆⲆⵠᐃ
		};
		this.ᐃᐃⵠ = function() {
			if (this.ⲆⵠΔⲆⲆⲆⵠ != this.ⵠΔΔⲆ.x || this.ⵠΔΔⲆ.y != this.ᐃⲆᐃⲆΔΔᐃ) {
				this.ⲆⵠΔⲆⲆⲆⵠ = this.ⵠΔΔⲆ.x;
				this.ᐃⲆᐃⲆΔΔᐃ = this.ⵠΔΔⲆ.y;
				return ᐃⲆⲆⲆΔ
			}
			return ⵠⲆⵠᐃᐃ
		}
	}

	function ⵠⲆᐃⲆΔⵠⵠ() {
		this.ⵠΔⵠⵠᐃΔⲆ = function() {
			this.ⲆⵠΔⲆΔ = 81;
			this.ⲆᐃⵠΔᐃ = 68;
			this.ᐃΔᐃᐃᐃ = 90;
			this.ⵠΔᐃⵠⲆᐃᐃ = 83
		};
		this.ⵠⲆΔⵠⵠΔⲆ = function() {
			this.ⲆⵠΔⲆΔ = 65;
			this.ⲆᐃⵠΔᐃ = 68;
			this.ᐃΔᐃᐃᐃ = 87;
			this.ΔⲆᐃⲆᐃ = 83
		};
		this.ᐃⲆⲆⵠᐃ = ᐃΔΔ, this.ⵠΔᐃⵠⲆᐃᐃ = Δᐃᐃ, this.ᐃᐃⲆᐃᐃᐃⲆ = 49;
		this.ⵠᐃΔᐃⵠⵠΔ = 50;
		this.ⵠΔⲆⲆⵠΔΔ = 51;
		this.ΔⲆΔΔᐃΔΔ = 52;
		this.ⵠⲆⲆᐃᐃᐃⵠⵠΔ = 53;
		this.ᐃⲆᐃΔⲆⵠⲆ = ⵠΔᐃⲆⲆⵠⵠ;
		this.ⵠⵠⵠΔᐃΔΔ = 37;
		this.ᐃΔΔΔⲆᐃΔ = 39;
		this.ⵠᐃⵠⵠⵠⵠᐃ = 38;
		this.ⵠΔᐃΔⵠΔᐃ = 40;
		this.ᐃᐃⲆᐃⲆᐃᐃ = 32;
		this.ⵠΔᐃᐃᐃⲆⲆ = 82;
		this.ⵠⵠⲆⵠⲆⲆᐃ = 71;
		this.ΔⵠᐃΔⵠᐃΔ = 86;
		this.ⲆⵠΔΔⵠⲆⲆ = 66;
		this.ⵠⲆΔⵠⵠΔⲆ();
		this.keys = new Array(ⵠΔⵠΔΔ);
		for (var Δᐃ = ᐃΔΔ; Δᐃ < 255; Δᐃ++) this.keys[Δᐃ] = this.ᐃⲆⲆⵠᐃ;
		this.up = function(ᐃⲆΔᐃ) {
			var ΔΔᐃΔ = Math.min(ᐃⲆΔᐃ.charCode || ᐃⲆΔᐃ.keyCode, 255);
			this.keys[ΔΔᐃΔ] = this.ᐃⲆⲆⵠᐃ
		};
		this.down = function(ᐃⲆΔᐃ) {
			var ΔΔᐃΔ = Math.min(ᐃⲆΔᐃ.charCode || ᐃⲆΔᐃ.keyCode, ᐃⵠΔΔⵠ);
			if (this.ⲆⵠΔⲆΔ == ΔΔᐃΔ || this.ⵠⵠⵠΔᐃΔΔ == ΔΔᐃΔ) this.ᐃΔⵠⲆᐃⲆᐃ();
			else if (ΔΔᐃΔ == this.ᐃΔᐃᐃᐃ || this.ⵠᐃⵠⵠⵠⵠᐃ == ΔΔᐃΔ) this.ⲆᐃⲆᐃⵠᐃΔ();
			else if (ΔΔᐃΔ == this.ⵠΔᐃⵠⲆᐃᐃ || this.ᐃⲆΔⲆⲆⵠⲆΔⵠ == ΔΔᐃΔ) this.ᐃⵠⲆⵠᐃⵠᐃ();
			else if (ΔΔᐃΔ == this.ⲆᐃⵠΔᐃ || ΔΔᐃΔ == this.ᐃΔΔΔⲆᐃΔ) this.ΔⲆⲆᐃΔⲆΔ();
			this.keys[ΔΔᐃΔ] = this.ⵠΔᐃⵠⲆᐃᐃ;
			return ΔΔᐃΔ
		};
		this.ᐃΔⵠⲆᐃⲆᐃ = function() {
			this.keys[this.ⲆᐃⵠΔᐃ] = this.ᐃⲆⲆⵠᐃ;
			this.keys[this.ᐃΔΔΔⲆᐃΔ] = this.ᐃⲆⲆⵠᐃ
		};
		this.ΔⲆⲆᐃΔⲆΔ = function() {
			this.keys[this.ⲆⵠΔⲆΔ] = this.ᐃⲆⲆⵠᐃ;
			this.keys[this.ⵠⵠⵠΔᐃΔΔ] = this.ᐃⲆⲆⵠᐃ
		};
		this.ᐃⵠⲆⵠᐃⵠᐃ = function() {
			this.keys[this.ᐃΔᐃᐃᐃ] = this.ᐃⲆⲆⵠᐃ;
			this.keys[this.ⵠᐃⵠⵠⵠⵠᐃ] = this.ᐃⲆⲆⵠᐃ
		};
		this.ⲆᐃⲆᐃⵠᐃΔ = function() {
			this.keys[this.ΔⲆᐃⲆᐃ] = this.ᐃⲆⲆⵠᐃ;
			this.keys[this.ⵠΔᐃΔⵠΔᐃ] = this.ᐃⲆⲆⵠᐃ
		};
		this.ᐃᐃᐃⲆⵠΔⵠ = function() {
			this.keys[this.ⲆᐃⵠΔᐃ] = this.ᐃⲆⲆⵠᐃ;
			this.keys[this.ᐃΔΔΔⲆᐃΔ] = this.ᐃⲆⲆⵠᐃ;
			this.keys[this.ⲆⵠΔⲆΔ] = this.ᐃⲆⲆⵠᐃ;
			this.keys[this.ⵠⵠⵠΔᐃΔΔ] = this.ᐃⲆⲆⵠᐃ;
			this.keys[this.ᐃΔᐃᐃᐃ] = this.ᐃⲆⲆⵠᐃ;
			this.keys[this.ⵠᐃⵠⵠⵠⵠᐃ] = this.ᐃⲆⲆⵠᐃ;
			this.keys[this.ΔⲆᐃⲆᐃ] = this.ᐃⲆⲆⵠᐃ;
			this.keys[this.ⵠΔᐃΔⵠΔᐃ] = this.ᐃⲆⲆⵠᐃ
		};
		this.ΔᐃΔⵠᐃΔᐃ = function() {
			return this.keys[this.ⲆⵠΔⲆΔ] || this.keys[this.ⵠⵠⵠΔᐃΔΔ]
		};
		this.ᐃΔΔΔΔⲆᐃ = function() {
			return this.keys[this.ⲆᐃⵠΔᐃ] || this.keys[this.ᐃΔΔΔⲆᐃΔ]
		};
		this.ΔⵠⲆᐃΔⲆΔ = function() {
			return this.keys[this.ᐃΔᐃᐃᐃ] || this.keys[this.ⵠᐃⵠⵠⵠⵠᐃ]
		};
		this.ΔᐃⲆᐃⵠΔⲆ = function() {
			return this.keys[this.ΔⲆᐃⲆᐃ] || this.keys[this.ⵠΔᐃΔⵠΔᐃ]
		};
		this.ⲆΔᐃⵠⵠⲆᐃᐃⵠ = function() {
			return this.keys[this.ᐃⲆᐃΔⲆⵠⲆ]
		};
		this.ΔⵠⲆⲆⵠᐃⵠΔᐃ = function() {
			return this.keys[this.ᐃᐃⲆᐃᐃᐃⲆ]
		};
		this.ⲆⲆⵠᐃΔᐃΔⲆⲆ = function() {
			return this.keys[this.ⵠᐃΔᐃⵠⵠΔ]
		};
		this.ⵠΔΔⵠⲆⲆⲆΔΔ = function() {
			return this.keys[this.ⵠΔⲆⲆⵠΔΔ]
		};
		this.ΔΔⲆΔᐃΔΔⵠⵠ = function() {
			return this.keys[this.ΔⲆΔΔᐃΔΔ]
		};
		this.ⵠΔⵠᐃΔⲆΔΔᐃ = function() {
			return this.keys[this.ᐃᐃⲆᐃⲆᐃᐃ]
		};
		this.ᐃⵠΔⲆᐃⵠΔⵠⲆ = function() {
			return this.keys[this.ⵠΔᐃᐃᐃⲆⲆ]
		};
		this.ᐃΔⵠΔⵠⲆΔΔΔ = function() {
			return this.keys[this.ⵠⵠⲆⵠⲆⲆᐃ]
		};
		this.ᐃⵠⵠⵠᐃⵠⲆⵠᐃ = function() {
			return this.keys[this.ΔⵠᐃΔⵠᐃΔ]
		};
		this.ⵠΔⲆᐃⲆᐃᐃⵠⵠ = function() {
			return this.keys[this.ⲆⵠΔΔⵠⲆⲆ]
		}
	}

	function ⲆΔᐃΔᐃⲆⲆ(ᐃΔⵠΔⵠΔΔ, ΔΔⵠᐃᐃΔⲆ, ⵠΔᐃⵠΔᐃᐃ, ᐃⵠⲆᐃΔᐃⵠ) {
		const ΔΔᐃⵠⵠᐃⵠ = (ᐃΔⵠΔⵠΔΔ | 57773) & ~(ᐃΔⵠΔⵠΔΔ & 57773);
		const ⲆΔⵠⲆⲆⵠΔ = ((61597 + ΔΔⵠᐃᐃΔⲆ) * 22695477 + 1) % 4294967296;
		const ᐃᐃΔⵠⵠᐃᐃ = ((62742 + ⵠΔᐃⵠΔᐃᐃ) * 214013 + 2531011) % 4294967296;
		const ⵠⲆᐃⵠᐃΔᐃ = (8 << (ᐃⵠⲆᐃΔᐃⵠ >> 16 & 255)) + (24 << (ᐃⵠⲆᐃΔᐃⵠ >> 0 & 255)) + (0 << (ᐃⵠⲆᐃΔᐃⵠ >> 24 & 255)) + (16 << (ᐃⵠⲆᐃΔᐃⵠ >> 8 & 255));
		const ᐃⲆᐃⲆⵠⲆⵠ = ᐃⵠⵠΔᐃᐃᐃ(ΔΔᐃⵠⵠᐃⵠ, ⲆΔⵠⲆⲆⵠΔ, ᐃᐃΔⵠⵠᐃᐃ);
		const ᐃΔⵠⲆΔⲆᐃ = ⵠⲆᐃⲆᐃΔᐃ(ⵠⲆᐃⵠᐃΔᐃ, ΔΔᐃⵠⵠᐃⵠ, ⲆΔⵠⲆⲆⵠΔ, ᐃᐃΔⵠⵠᐃᐃ, ⵠⲆᐃⵠᐃΔᐃ, ΔΔᐃⵠⵠᐃⵠ);
		const ΔⵠⵠΔᐃⵠⵠ = (1013904223 + 1664525 * ((ᐃⲆᐃⲆⵠⲆⵠ ^ ᐃΔⵠⲆΔⲆᐃ) + 29281)) % 4294967296;
		return ΔⵠⵠΔᐃⵠⵠ
	}

	function ᐃⵠⵠΔᐃᐃᐃ(ᐃΔⲆᐃⲆⲆⲆ, ᐃⵠΔΔᐃⲆΔ, ⵠⲆⵠⵠᐃⵠᐃ) {
		const ⵠⵠⵠⵠⲆⵠΔ = ~(ᐃΔⲆᐃⲆⲆⲆ & 4482) & ᐃΔⲆᐃⲆⲆⲆ | ~(ᐃΔⲆᐃⲆⲆⲆ & 4482) & 4482;
		const ΔΔΔⵠⲆⵠΔ = (ᐃⵠΔΔᐃⲆΔ + 63222) % 65379;
		const ᐃⵠΔΔᐃΔⲆ = (57526 | ⵠⲆⵠⵠᐃⵠᐃ) & ~(57526 & ⵠⲆⵠⵠᐃⵠᐃ);
		const ᐃᐃᐃⵠⲆᐃⵠ = ⲆⲆΔⲆΔⵠⲆ(ⵠⵠⵠⵠⲆⵠΔ, ΔΔΔⵠⲆⵠΔ, ᐃⵠΔΔᐃΔⲆ, ⵠⵠⵠⵠⲆⵠΔ, ΔΔΔⵠⲆⵠΔ, ᐃⵠΔΔᐃΔⲆ);
		const ⵠⵠⲆⲆᐃᐃⲆⵠⲆ = ⲆⲆΔⲆΔⵠⲆ(ⵠⵠⵠⵠⲆⵠΔ, ΔΔΔⵠⲆⵠΔ, ᐃⵠΔΔᐃΔⲆ, ⵠⵠⵠⵠⲆⵠΔ, ΔΔΔⵠⲆⵠΔ, ᐃⵠΔΔᐃΔⲆ);
		const ⵠⵠⵠΔΔⲆⵠ = ~(63779 & ᐃᐃᐃⵠⲆᐃⵠ) & 63779 | ~(63779 & ᐃᐃᐃⵠⲆᐃⵠ) & ᐃᐃᐃⵠⲆᐃⵠ;
		return ⵠⵠⵠΔΔⲆⵠ
	}
	const ⵠΔᐃⲆⵠ = ᐃΔΔΔⵠ;

	function ⲆⲆΔΔⵠᐃᐃ(ΔᐃⲆᐃᐃⵠΔ, ⲆⵠⲆⲆⲆᐃⵠ, ⲆⲆⵠⵠⵠⵠⲆ) {
		const ΔⵠⵠᐃⲆᐃΔ = (12345 + 1103515245 * (ΔᐃⲆᐃᐃⵠΔ + 58781)) % 2147483648;
		const ⲆⲆᐃΔᐃⲆΔ = (ⲆⵠⲆⲆⲆᐃⵠ | 53227) & ~(ⲆⵠⲆⲆⲆᐃⵠ & 53227);
		const ᐃᐃΔⵠⲆⲆΔ = (2147483629 * (23631 + ⲆⲆⵠⵠⵠⵠⲆ) + 2147483587) % 2147483647;
		const ⲆΔⵠⵠⵠⵠΔ = ᐃᐃⵠⲆⲆⵠᐃ(ΔⵠⵠᐃⲆᐃΔ, ⲆⲆᐃΔᐃⲆΔ, ᐃᐃΔⵠⲆⲆΔ, ΔⵠⵠᐃⲆᐃΔ, ⲆⲆᐃΔᐃⲆΔ, ᐃᐃΔⵠⲆⲆΔ);
		const ⵠΔⵠⵠᐃⵠⵠΔⲆ = ⲆΔᐃⲆΔⲆᐃ(ΔⵠⵠᐃⲆᐃΔ, ⲆⲆᐃΔᐃⲆΔ, ᐃᐃΔⵠⲆⲆΔ);
		const ⵠⵠⵠⵠᐃᐃᐃ = ~(8336 & ⲆΔⵠⵠⵠⵠΔ) & 8336 | ~(8336 & ⲆΔⵠⵠⵠⵠΔ) & ⲆΔⵠⵠⵠⵠΔ;
		return ⵠⵠⵠⵠᐃᐃᐃ
	}
	var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("game_canvas");
	const ⲆΔⲆⲆ = ⵠΔΔΔ;
	const ⵠΔΔᐃᐃ = ᐃⲆⵠⵠᐃ;
	var ᐃ = ⲆⲆ.getContext(Δ[160]);
	var ⲆΔⲆᐃ = ⲆⲆ.width;
	const ⲆᐃΔⵠⵠⲆᐃ = ΔᐃᐃⲆΔ;
	var ΔⵠⲆΔ = ⲆⲆ.height;
	const ᐃⵠᐃⲆⵠⲆⲆ = ⲆᐃΔᐃⲆ;
	var ᐃᐃᐃΔ = ⲆⲆ.width / ⲆⲆΔΔ;
	const ΔⲆⲆΔΔ = ⵠⲆΔΔⵠ;
	const ⵠⲆΔᐃΔ = ΔⲆᐃⵠⵠ;
	var Δᐃᐃᐃ = ⲆⲆ.height / ⲆⲆΔΔ;
	const ᐃᐃᐃⲆⵠᐃⵠ = ᐃⵠΔΔⵠ;
	var ΔⲆᐃΔⵠⵠⲆ = {
		x: ᐃᐃᐃΔ,
		y: Δᐃᐃᐃ
	};
	var Ⲇ = Δᐃᐃ;
	var ⵠⲆᐃΔⲆᐃⲆ = 1;
	const ⲆⲆⲆᐃⲆⲆᐃ = ᐃΔⲆⵠⵠΔⲆ;
	var ᐃⵠⵠᐃⲆⵠᐃ = -ΔⵠⲆ;
	var ᐃΔⲆΔΔⵠⵠ;
	const ᐃᐃΔⲆⵠΔⲆ = ΔᐃΔᐃⲆⲆⵠ;
	const ᐃⲆⵠΔⵠ = ΔⲆΔᐃΔ;
	var ⲆᐃᐃΔⵠⲆⵠ = "J" + ΔⲆⵠᐃⵠⲆⵠ;
	const ᐃⵠⲆⲆ = ⲆⵠⲆᐃ;
	const ⲆᐃⲆᐃⲆ = ⵠⲆᐃΔᐃ;
	const ΔⵠⲆΔⲆ = ⵠⲆΔΔⲆ;
	var ᐃⲆΔᐃⵠⲆΔ = "S" + ᐃᐃΔⵠⲆ;
	var ᐃⵠΔΔᐃᐃⲆ = ⵠΔΔⲆⲆⵠᐃᐃⵠ;
	const ⵠⲆⵠⲆΔ = ⵠΔⵠΔᐃ;
	var ᐃᐃΔⵠⲆ;
	var ᐃᐃⲆⵠᐃ;
	const Δᐃᐃⵠ = ΔⲆᐃⲆ;
	var ᐃΔⲆΔᐃᐃⵠ = "O";
	var ⵠⵠᐃᐃⵠΔᐃ = ᐃΔⲆΔᐃᐃⵠ + "N";
	const ⵠⲆᐃⵠⲆⲆⲆⲆᐃ = ΔᐃΔⲆⵠΔΔ;
	var ΔⲆΔᐃⵠⵠΔ = "O";
	var ⲆᐃΔⲆⵠⵠⵠ = ⵠᐃΔ;
	const ᐃⲆⲆᐃΔⵠΔ = ᐃΔⲆⵠᐃᐃⵠ;
	var ΔⲆⵠᐃⵠⲆⵠ;
	var ΔⲆⲆΔⵠᐃᐃ = ᐃⵠΔΔᐃᐃⲆ;
	const Ⲇᐃⵠᐃᐃ = ⲆⲆⵠᐃΔ;
	const ⵠᐃⲆΔⲆᐃᐃ = ⵠⲆⵠᐃⲆΔΔ;
	const ΔΔᐃⵠᐃ = ⲆΔᐃⵠᐃ;
	var ᐃᐃΔⵠⲆ;
	const ⲆΔᐃ = ⵠΔⲆ;
	const ΔⲆᐃΔⲆ = ⲆΔᐃΔⲆ;
	var ᐃⵠΔⵠⲆΔⵠ;
	var ᐃⲆΔᐃⵠⲆΔ = "N";
	var ᐃⲆΔᐃⵠ = "J";
	const ⵠΔⵠᐃⵠ = ⵠᐃᐃΔΔ;
	const ᐃⵠᐃⲆ = ⵠᐃⲆᐃ;
	var ᐃΔⲆΔᐃᐃⵠ = "O" + ΔⲆⵠᐃⵠⲆⵠ;
	var ⲆᐃᐃΔⵠⲆⵠ;
	const ⵠⲆᐃⵠⵠ = ⵠᐃⵠΔΔ;
	const ᐃΔⲆΔΔ = ΔΔⵠⵠⵠ;
	var ΔⵠΔⲆᐃ = ΔⲆⲆΔⵠᐃᐃ;
	var ΔᐃⵠᐃⲆΔΔ;
	var ᐃΔⲆΔΔⵠⵠ;
	const Ⲇⵠᐃⵠⵠ = ΔᐃΔⵠⲆ;
	var ⲆⲆⵠᐃⲆⵠⲆ;
	const ΔⵠⵠⵠΔ = ΔⲆⵠΔΔ;
	var ⵠⲆΔⵠᐃⲆⲆ;
	const ⲆⵠΔᐃᐃᐃⲆ = ⵠΔⵠΔΔ;
	const ⲆⲆⵠⵠᐃⵠΔ = ⲆΔⲆⵠᐃ;
	const ΔΔⲆⲆⲆ = ⲆⵠΔⲆⵠ;
	const ⲆⵠⵠΔⵠ = ⲆΔⲆΔⵠ;
	const ΔⲆΔΔⵠⵠᐃ = ⵠⲆΔⵠᐃᐃΔ;
	var ᐃᐃΔⵠⲆ;
	var ΔⲆⵠᐃⵠⲆⵠ;
	const ᐃᐃᐃⵠⵠ = ΔⲆⲆΔΔ;
	const ⵠⲆⵠᐃⲆ = ᐃⲆⵠΔⵠ;
	const ΔᐃΔᐃⵠ = ᐃΔΔΔⵠ;
	var ⵠᐃΔⲆΔⵠᐃ = ΔⵠΔⲆᐃ;
	const ⲆᐃΔⲆᐃⲆⲆᐃⵠ = ⲆⵠΔΔΔᐃΔ;
	const Ⲇⵠᐃⵠᐃ = ⲆᐃⲆᐃⲆ;
	const ⲆⵠⲆⵠᐃᐃⲆⵠᐃ = ᐃΔⲆⵠᐃᐃⵠ;
	const ⲆⵠⲆⵠΔ = ᐃⲆⵠⵠᐃ;
	var ⵠⵠᐃᐃⵠΔᐃ = "N" + ⵠⲆΔⵠᐃⲆⲆ;
	const ⵠᐃΔᐃⵠ = ⵠⲆΔᐃΔ;
	var ⵠⵠᐃᐃⵠΔᐃ;
	var ⵠᐃΔᐃΔ = ⵠᐃΔⲆΔⵠᐃ;
	const ⵠⲆᐃ = ⵠⲆⵠ;
	var ΔΔᐃᐃⵠ;
	const ΔᐃΔΔΔΔΔ = ⵠⲆΔⵠᐃᐃΔ;
	var ᐃΔⲆΔᐃᐃⵠ;
	var ᐃΔⲆΔΔⵠⵠ;
	const ⲆⲆⲆⲆⲆ = ⵠΔᐃᐃⵠ;
	var ΔᐃⵠᐃⲆΔΔ = "";
	var ᐃⲆΔⵠᐃΔΔ;
	const ΔΔᐃⲆΔ = ⲆⵠⵠΔⵠ;
	const ᐃᐃⲆⵠΔ = ⵠⲆΔᐃΔ;
	const Δⵠᐃⵠⵠ = ⲆⵠⵠⵠⲆ;
	var ΔⲆᐃⵠᐃⵠⵠ = ⵠᐃΔᐃΔ;
	const ΔᐃⵠΔⵠ = Ⲇᐃⵠᐃᐃ;
	var ᐃᐃΔᐃⲆⲆᐃ;
	var ᐃᐃΔⵠⲆ;
	var ΔⲆⵠᐃⵠⲆⵠ;
	const ⲆⵠⵠΔΔⵠⵠⵠⲆ = ᐃⲆⲆᐃΔⵠΔ;
	const ᐃΔᐃⲆΔ = ⲆΔΔΔΔ;
	const ⲆᐃⲆⲆΔ = ⵠⲆⵠᐃᐃ;
	var ⵠⲆᐃⲆᐃᐃᐃ = ΔⲆᐃⵠᐃⵠⵠ;
	const ⲆⲆⵠⲆᐃ = ⲆⲆᐃᐃⵠ;
	const ⵠᐃΔᐃⲆ = ⲆⲆΔᐃⵠ;
	var ᐃΔⲆΔᐃᐃⵠ;
	var ⵠΔⵠⵠᐃⵠⲆ;
	var ⲆᐃᐃΔⵠⲆⵠ;
	var ⲆⵠΔⲆⵠΔⲆ = ⵠⲆᐃⲆᐃᐃᐃ;
	const ⲆⵠΔΔⵠ = ⲆΔⲆᐃⵠ;
	const ⲆⲆΔᐃΔ = ΔΔⵠⵠⵠ;
	var ᐃⲆΔᐃⵠ = "O";
	var ᐃΔⲆΔΔⵠⵠ = "J";
	var ᐃⲆΔᐃⵠⲆΔ;
	const ⲆⲆᐃⲆⵠ = ⲆΔΔᐃΔ;
	const ⵠⵠⵠⲆΔΔⵠ = ⵠⲆΔⵠᐃᐃΔ;
	const Ⲇⵠᐃᐃ = ᐃⵠⲆⵠ;
	const ⲆⵠⲆΔⵠ = ᐃΔΔᐃᐃ;
	var ΔⲆⲆⵠⵠⲆΔ;
	const ⲆΔᐃⲆⵠΔⲆⲆᐃ = ᐃᐃΔⲆⵠΔⲆ;
	var ᐃΔⲆΔΔⵠⵠ;
	var ⲆⵠΔⲆⵠΔⲆ = ⵠⲆᐃⲆᐃᐃᐃ;
	const ᐃⲆᐃⲆΔ = ΔᐃⵠⲆᐃⵠᐃ;
	var ΔⲆⲆⵠⵠⲆΔ = "S";
	const ⲆⲆⵠΔᐃ = ᐃΔΔΔⵠ;
	const ⲆΔᐃΔΔ = ⲆΔⵠΔᐃ;
	var ᐃΔΔᐃⲆⵠⵠ = ⲆⵠΔⲆⵠΔⲆ;
	const ⲆⲆⲆᐃⲆᐃⵠ = 14451935;

	function ⵠⵠΔⲆⵠΔⲆ(ᐃⲆᐃⲆᐃᐃᐃ) {
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ.String.fromCharCode(ᐃⲆᐃⲆᐃᐃᐃ)
	}

	function ⵠⵠⵠⵠⲆⲆΔ(ⲆΔⵠᐃᐃΔᐃ) {
		return ⲆΔⵠᐃᐃΔᐃ.map(ⵠⵠΔⲆⵠΔⲆ).join("")
	}
	const ⲆⵠⵠΔ = function() {
		const ΔⲆᐃⲆΔⲆΔ = ⵠⵠⵠⵠⲆⲆΔ([11398, 11398, 11398, 5123, 11398, 5123, 11616]);
		const ΔᐃᐃΔ = {
			"ⲆᐃⲆᐃ": 13902811,
			"ΔᐃΔᐃⲆⲆⲆ": 11679e3,
			"ⲆⲆⲆᐃⲆᐃⵠ": 3922246,
			"ΔⲆⲆⲆ": 12186959
		};
		if (ΔᐃᐃΔ[ΔⲆᐃⲆΔⲆΔ] !== ΔᐃᐃΔ.ⲆⲆⲆᐃⲆᐃⵠ) {
			const ⲆⲆⲆᐃⲆᐃⵠ = function() {
				ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]]("mousemove", (function() {
					ⲆⲆⲆᐃⲆᐃⵠ()
				}))
			};
			ⲆⲆⲆᐃⲆᐃⵠ()
		}
	};
	ⲆⵠⵠΔ();
	var ⵠⲆΔⵠᐃⲆⲆ;
	var ᐃᐃᐃⵠⲆⵠⲆ;
	var ⵠᐃᐃᐃΔᐃΔ = ᐃΔΔᐃⲆⵠⵠ;
	const ΔΔⵠⵠΔ = ⲆⵠᐃⲆⵠ;
	const ᐃΔΔⵠΔ = ΔⲆⵠΔΔ;
	var ᐃᐃΔⵠⲆ = ᐃΔⲆΔΔⵠⵠ + ΔⲆⲆⵠⵠⲆΔ;
	ⲆⲆ.oncontextmenu = function() {
		return ᐃⲆⵠⵠᐃ
	};
	const ΔᐃΔⵠ = ⲆⵠⵠⲆ;
	const ΔΔⵠΔ = Δᐃⵠᐃ;
	ⲆᐃᐃΔⵠⲆⵠ = ᐃΔⲆΔΔⵠⵠ;
	const ᐃⲆⵠⲆⲆ = ⲆⵠᐃΔᐃ;
	const ⲆᐃⲆΔⲆ = ΔⲆᐃΔΔ;
	ΔᐃⵠᐃⲆΔΔ = ⲆᐃᐃΔⵠⲆⵠ;

	function Δᐃⵠ(ⵠⵠⵠⲆ) {
		var ⵠΔ = new Image;
		ⵠΔ.src = ⵠⵠⵠⲆ.toDataURL("image/png");
		ⵠΔ.width = ⵠⵠⵠⲆ.width;
		ⵠΔ.height = ⵠⵠⵠⲆ.height;
		ⵠΔ.ⵠᐃᐃⲆᐃⵠⲆ = ΔⵠⲆ;
		return ⵠΔ
	}
	ⲆᐃᐃΔⵠⲆⵠ = ᐃⲆΔᐃⵠⲆΔ;
	const ⵠⵠΔⲆ = ⵠΔΔΔ;
	ᐃⲆΔᐃⵠ = ᐃⲆΔᐃⵠ + ⲆᐃᐃΔⵠⲆⵠ;
	const ΔΔᐃⵠΔ = ᐃΔⵠᐃⵠ;
	const ᐃⲆᐃⲆⲆ = ΔΔⲆⲆⲆ;
	const ᐃΔⲆⲆⲆ = ΔᐃⵠΔⵠ;
	ΔⲆΔᐃⵠⵠΔ = ᐃᐃΔⵠⲆ + ᐃⲆΔᐃⵠ;
	ᐃᐃⲆⵠᐃ = ΔⲆΔᐃⵠⵠΔ;
	const ΔⵠΔⵠⵠ = Ⲇᐃᐃᐃᐃ;
	ᐃΔⲆΔᐃᐃⵠ = ⵠⵠᐃᐃⵠΔᐃ;
	const ⵠΔᐃ = ΔⵠⲆ;
	ᐃⵠΔⵠⲆΔⵠ = ᐃᐃⲆⵠᐃ;
	const ⵠΔᐃⵠ = Δⵠᐃᐃ;
	ⵠⵠᐃᐃⵠΔᐃ = ΔⲆⵠᐃⵠⲆⵠ;
	const ΔⲆΔΔΔ = Δᐃⵠⵠⵠ;
	ΔⲆⵠᐃⵠⲆⵠ = ᐃᐃΔⵠⲆ;
	const ⵠⵠⲆⵠⲆ = ⲆⲆᐃⵠΔⵠⵠ;
	const ⲆⲆᐃⲆ = ⵠΔᐃⵠ;
	ΔΔᐃᐃⵠ = ᐃᐃΔⵠⲆ + ᐃⲆΔᐃⵠ;
	const ⵠᐃᐃⵠΔ = ⲆⵠⲆⵠΔ;
	ΔⲆⵠᐃⵠⲆⵠ = ᐃᐃΔⵠⲆ;
	const ⲆⲆΔⲆⵠ = ⵠⲆΔⲆΔ;
	const ΔⵠⲆᐃ = ᐃⵠⲆⲆ;
	ᐃΔⲆΔᐃᐃⵠ = ᐃᐃΔⵠⲆ;
	const ⲆΔⵠᐃⲆⵠⵠ = ⲆⵠΔᐃᐃᐃⲆ;
	ⲆⲆⵠᐃⲆⵠⲆ = ΔΔᐃᐃⵠ;
	ᐃⲆΔᐃⵠⲆΔ = ᐃⲆΔᐃⵠ + ⲆᐃᐃΔⵠⲆⵠ;
	const ⵠᐃᐃᐃⲆᐃⲆ = ᐃΔᐃⵠΔ;
	ᐃⲆΔⵠᐃΔΔ = ᐃᐃⲆⵠᐃ;
	const ᐃⲆⵠⵠΔⲆⲆ = ᐃⲆΔⵠΔ;
	ᐃΔⲆΔᐃᐃⵠ = ᐃᐃΔⵠⲆ + ᐃⲆΔᐃⵠ;
	ᐃᐃΔᐃⲆⲆᐃ = ΔⲆΔᐃⵠⵠΔ;
	ⵠⵠᐃᐃⵠΔᐃ = ᐃᐃΔⵠⲆ + ᐃⲆΔᐃⵠ;
	ⵠΔⵠⵠᐃⵠⲆ = ᐃⵠΔⵠⲆΔⵠ;
	const ΔⲆⲆⵠΔ = ᐃⵠⵠⲆⲆ;
	const ⵠᐃⲆⲆⲆ = ᐃᐃᐃΔᐃ;
	ᐃⲆΔᐃⵠ = ΔⲆⵠᐃⵠⲆⵠ;
	const ᐃⲆΔ = ᐃⵠⵠ;
	const ⲆΔⲆΔ = ΔⵠⲆⲆ;
	const ΔⲆⲆⲆⲆ = ⵠᐃΔΔⲆ;
	ΔⲆⲆⵠⵠⲆΔ = ΔⲆΔᐃⵠⵠΔ;
	ᐃᐃᐃⵠⲆⵠⲆ = ᐃᐃⲆⵠᐃ;
	const ⲆⵠΔⵠᐃ = ᐃⵠᐃΔⲆ;
	const ⵠΔΔΔⲆᐃΔ = ΔᐃⲆⲆⲆ;
	ⲆᐃᐃΔⵠⲆⵠ = ᐃΔⲆΔᐃᐃⵠ;
	var devicePixelRatio = ⵠΔΔⲆⲆⵠᐃᐃⵠ.devicePixelRatio || 1;
	var ⵠⵠΔΔᐃⲆⲆ = ᐃ.ᐃⵠᐃᐃΔΔⲆⲆΔ || ᐃ.ΔΔⲆᐃⲆⵠⲆᐃᐃ || ᐃ.ⵠᐃⲆⲆⲆΔΔⲆⲆ || ᐃ.ⲆᐃΔⵠⵠⲆΔᐃᐃ || ᐃ.ⵠΔᐃⲆΔᐃΔᐃΔ || 1;

	function ⲆⲆᐃᐃΔⲆᐃ() {
		if (ⲆⲆ.width != ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth) {
			ⲆⲆ.width = ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth;
			ⲆΔⲆᐃ = ⲆⲆ.width;
			ᐃᐃᐃΔ = ⲆⲆ.width / ΔⲆᐃⲆ
		}
		ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerHeight != ⲆⲆ.height && (ⲆⲆ.height = ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerHeight, ΔⵠⲆΔ = ⲆⲆ.height, Δᐃᐃᐃ = ⲆⲆ.height / 2);
		ΔⲆᐃΔⵠⵠⲆ = {
			x: ᐃᐃᐃΔ,
			y: Δᐃᐃᐃ
		};
		var ⵠᐃⲆⵠⵠⵠⵠ = ⲆⲆ.width;
		var ᐃⵠⵠᐃⵠᐃᐃ = ⲆⲆ.height;
		ᐃⵠⵠᐃⲆⵠᐃ === -ⵠΔⲆ ? ⵠⲆᐃΔⲆᐃⲆ = devicePixelRatio / ⵠⵠΔΔᐃⲆⲆ : ⵠⲆᐃΔⲆᐃⲆ = ᐃⵠⵠᐃⲆⵠᐃ;
		ⲆⲆ.width = ⵠᐃⲆⵠⵠⵠⵠ * ⵠⲆᐃΔⲆᐃⲆ;
		ⲆⲆ.height = ⵠⲆᐃΔⲆᐃⲆ * ᐃⵠⵠᐃⵠᐃᐃ;
		ⲆⲆ.style.width = ⵠᐃⲆⵠⵠⵠⵠ + Δ[ᐃⲆᐃⲆ];
		ⲆⲆ.style.height = ᐃⵠⵠᐃⵠᐃᐃ + Δ[ᐃΔᐃⲆ];
		ᐃ.scale(ⵠⲆᐃΔⲆᐃⲆ, ⵠⲆᐃΔⲆᐃⲆ);
		if (ⵠⵠⵠ) {
			ⵠⵠⵠ.ᐃⵠⲆ.ΔⵠΔⲆⵠᐃΔ = ⵠᐃⲆⵠⵠⵠⵠ;
			ⵠⵠⵠ.ᐃⵠⲆ.ⵠⵠᐃᐃΔΔΔ = ᐃⵠⵠᐃⵠᐃᐃ
		}
		if (ΔⲆΔⲆⲆΔⲆ.ΔⲆΔⵠⵠ) ΔⲆΔⲆⲆΔⲆ.ᐃᐃⵠ();
		else if (ⵠⵠΔⵠ.ΔⲆΔⵠⵠ) ⵠⵠΔⵠ.ᐃᐃⵠ();
		else if (ⲆΔᐃᐃ.ΔⲆΔⵠⵠ) ⲆΔᐃᐃ.ᐃᐃⵠ();
		else ᐃᐃΔⲆΔΔⵠ.ΔⲆΔⵠⵠ && ᐃᐃΔⲆΔΔⵠ.ᐃᐃⵠ()
	}
	var ᐃⲆⵠⵠⲆⲆᐃ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[563]);
	const ᐃⲆΔΔⲆ = ΔⲆⲆⲆⵠ;
	ᐃⲆⵠⵠⲆⲆᐃ.ondragstart = function() {
		return ⲆᐃⲆⲆΔ
	};
	const ⲆᐃⲆ = ⵠⲆᐃ;
	const ᐃⵠⲆᐃΔ = ⲆᐃⵠⲆᐃ;
	const ᐃⲆᐃⲆᐃ = ᐃᐃΔⵠⵠ;
	const ⵠⲆⲆΔᐃᐃⵠ = ΔᐃΔⲆⵠΔΔ;
	ᐃⲆⵠⵠⲆⲆᐃ.ondrop = function() {
		return false
	};
	const ⲆᐃⲆΔᐃⵠⲆ = ⲆⵠΔΔΔᐃΔ;
	ᐃⲆⵠⵠⲆⲆᐃ.onresize = ⲆⲆᐃᐃΔⲆᐃ;
	var ⵠΔⲆΔΔⵠΔ = 890;
	(function() {
		var ΔⲆⵠΔⵠⵠⲆ = ΔᐃΔ;
		var ΔᐃⲆΔᐃᐃΔ = ["ms", "moz", "webkit", "o"];
		for (var ΔΔ = Δⵠⵠ; ΔΔ < ΔᐃⲆΔᐃᐃΔ.length && !ⵠΔΔⲆⲆⵠᐃᐃⵠ.requestAnimationFrame; ++ΔΔ) {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ.requestAnimationFrame = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ΔᐃⲆΔᐃᐃΔ[ΔΔ] + "RequestAnimationFrame"];
			ⵠΔΔⲆⲆⵠᐃᐃⵠ.cancelAnimationFrame = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ΔᐃⲆΔᐃᐃΔ[ΔΔ] + "CancelAnimationFrame"] || ⵠΔΔⲆⲆⵠᐃᐃⵠ[ΔᐃⲆΔᐃᐃΔ[ΔΔ] + "CancelRequestAnimationFrame"]
		}!ⵠΔΔⲆⲆⵠᐃᐃⵠ.requestAnimationFrame && (ⵠΔΔⲆⲆⵠᐃᐃⵠ.requestAnimationFrame = function(callback, ⵠᐃⲆⵠⲆⲆⲆⲆΔ) {
			var ⲆⵠΔⵠᐃⵠⲆ = (new Date).getTime();
			var ΔⵠᐃⲆⵠᐃⵠ = Math.max(ᐃΔΔ, ΔⲆⲆⵠΔ - (ⲆⵠΔⵠᐃⵠⲆ - ΔⲆⵠΔⵠⵠⲆ));
			var ⵠᐃ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]]((function() {
				callback(ⲆⵠΔⵠᐃⵠⲆ + ΔⵠᐃⲆⵠᐃⵠ)
			}), ΔⵠᐃⲆⵠᐃⵠ);
			ΔⲆⵠΔⵠⵠⲆ = ⲆⵠΔⵠᐃⵠⲆ + ΔⵠᐃⲆⵠᐃⵠ;
			return ⵠᐃ
		});
		if (!ⵠΔΔⲆⲆⵠᐃᐃⵠ.cancelAnimationFrame) ⵠΔΔⲆⲆⵠᐃᐃⵠ.cancelAnimationFrame = function(ⵠᐃ) {
			clearTimeout(ⵠᐃ)
		}
	})();
	const ⲆᐃⵠⲆⲆ = ⵠΔᐃᐃⵠ;
	const ⵠᐃⲆΔᐃᐃⵠⲆⵠ = ᐃΔⲆⵠᐃᐃⵠ;

	function ᐃΔᐃΔΔⵠⲆ(ᐃΔᐃΔⵠⵠⵠ, ⵠΔᐃᐃⵠⲆⲆ, ⲆⲆⲆⲆⵠᐃᐃ, ᐃⲆᐃᐃⲆᐃᐃ, ΔΔⲆⵠⵠᐃᐃ, ⲆᐃᐃⲆⲆⲆΔ) {
		const ⵠⲆⲆⲆΔⲆΔ = (ᐃΔᐃΔⵠⵠⵠ + 50691) % 65506;
		const ⵠⲆⵠΔⲆΔᐃ = ((42387 + ⵠΔᐃᐃⵠⲆⲆ) * 214013 + 2531011) % 4294967296;
		const ⲆⲆᐃᐃᐃΔⲆ = ~(ⲆⲆⲆⲆⵠᐃᐃ & 9283) & 9283 | ~(9283 & ⲆⲆⲆⲆⵠᐃᐃ) & ⲆⲆⲆⲆⵠᐃᐃ;
		const ⵠⲆΔΔⲆΔᐃ = (1013904223 + 1664525 * (ᐃⲆᐃᐃⲆᐃᐃ + 42615)) % 4294967296;
		const ⵠⵠΔⲆΔᐃΔ = (2995 + ΔΔⲆⵠⵠᐃᐃ) % 65455;
		const ᐃⲆΔΔΔⲆⵠ = (24 << (ⲆᐃᐃⲆⲆⲆΔ >> 0 & ᐃⵠⲆᐃⲆ)) + (16 << (ⲆᐃᐃⲆⲆⲆΔ >> 8 & 255)) + (0 << (ⲆᐃᐃⲆⲆⲆΔ >> 24 & 255)) + (8 << (ⲆᐃᐃⲆⲆⲆΔ >> 16 & 255));
		const ⲆⵠⵠᐃᐃΔⵠ = ΔⲆᐃᐃᐃⵠᐃ(ⵠⲆⲆⲆΔⲆΔ, ⵠⲆⵠΔⲆΔᐃ, ⲆⲆᐃᐃᐃΔⲆ, ⵠⲆΔΔⲆΔᐃ, ⵠⵠΔⲆΔᐃΔ, ᐃⲆΔΔΔⲆⵠ);
		const ᐃⲆΔⲆⲆⲆⵠ = ΔⲆᐃᐃᐃⵠᐃ(ⵠⲆⲆⲆΔⲆΔ, ⵠⲆⵠΔⲆΔᐃ, ⲆⲆᐃᐃᐃΔⲆ, ⵠⲆΔΔⲆΔᐃ, ⵠⵠΔⲆΔᐃΔ, ᐃⲆΔΔΔⲆⵠ);
		const ΔᐃⵠⲆⲆⵠΔ = (((ⲆⵠⵠᐃᐃΔⵠ ^ ᐃⲆΔⲆⲆⲆⵠ) + 25631) * 1103515245 + 12345) % 2147483648;
		return ΔᐃⵠⲆⲆⵠΔ
	}

	function ΔΔᐃⲆᐃⲆᐃ(ⲆΔᐃᐃᐃΔᐃ, ΔΔⵠᐃᐃ) {
		ⲆⲆΔᐃⲆΔⵠ(ᐃΔⲆⲆᐃ, ⲆΔᐃᐃᐃΔᐃ, ΔΔⵠᐃᐃ);
		const ⲆⲆⲆⵠᐃⲆⵠ = ⵠⵠⵠΔᐃⵠΔ(ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[1]);
		const ⵠΔᐃΔΔⵠⲆⲆᐃ = ⵠΔᐃΔΔⲆΔ(ᐃⲆⵠᐃ[Δⵠⵠ], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[ⵠⲆⵠ], ᐃⲆⵠᐃ[1]);
		const ᐃⵠᐃᐃⲆⲆⲆ = ~(49114 & ⲆⲆⲆⵠᐃⲆⵠ) & 49114 | ~(49114 & ⲆⲆⲆⵠᐃⲆⵠ) & ⲆⲆⲆⵠᐃⲆⵠ;
		return ᐃⵠᐃᐃⲆⲆⲆ
	}

	function ΔⲆⵠⲆⲆⲆΔ(ⵠⵠⲆⲆΔᐃⵠ, ΔⲆⲆΔⵠΔⲆ) {
		ΔΔΔᐃⲆⵠⲆ(ᐃΔⲆⲆᐃ, ⵠⵠⲆⲆΔᐃⵠ, ΔⲆⲆΔⵠΔⲆ);
		const ΔⵠⲆᐃⲆⲆΔ = ΔⵠⵠΔⵠⲆⲆ(ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[ᐃⲆⲆ], ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[Δⵠⵠ]);
		const ⲆⲆᐃⵠⵠⵠⲆ = ΔⵠⵠΔⵠⲆⲆ(ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[ⵠΔᐃ], ᐃⲆⵠᐃ[ᐃΔΔ], ᐃⲆⵠᐃ[1]);
		const ⲆᐃⵠⲆᐃΔΔ = (16 << ((ΔⵠⲆᐃⲆⲆΔ ^ ⲆⲆᐃⵠⵠⵠⲆ) >> 8 & 255)) + (0 << ((ΔⵠⲆᐃⲆⲆΔ ^ ⲆⲆᐃⵠⵠⵠⲆ) >> ΔⵠΔΔᐃ & 255)) + (ᐃΔⲆΔΔ << ((ΔⵠⲆᐃⲆⲆΔ ^ ⲆⲆᐃⵠⵠⵠⲆ) >> 24 & 255)) + (24 << ((ΔⵠⲆᐃⲆⲆΔ ^ ⲆⲆᐃⵠⵠⵠⲆ) >> 0 & 255));
		return ⲆᐃⵠⲆᐃΔΔ
	}

	function ⲆⲆΔΔᐃⲆⵠ(ᐃⲆΔⲆΔⵠᐃ, ᐃⲆᐃⲆᐃⲆⵠ, ᐃⲆⵠⲆⵠⲆⵠ, ΔΔⲆᐃⲆⲆᐃ) {
		ⵠⵠΔⵠᐃⲆᐃ(ᐃΔⲆⲆᐃ, ᐃⲆΔⲆΔⵠᐃ, ᐃⲆᐃⲆᐃⲆⵠ, ᐃⲆⵠⲆⵠⲆⵠ, ΔΔⲆᐃⲆⲆᐃ);
		const ⵠᐃᐃⵠᐃⵠⲆ = ΔⲆⵠⲆⲆⲆΔ(ᐃⲆⵠᐃ[ⲆᐃⲆ], ᐃⲆⵠᐃ[1]);
		const ᐃΔΔⵠᐃΔⲆ = ΔⲆⵠⲆⲆⲆΔ(ᐃⲆⵠᐃ[2], ᐃⲆⵠᐃ[3]);
		const ᐃⵠⲆⲆᐃⵠΔ = (0 << ((ⵠᐃᐃⵠᐃⵠⲆ ^ ᐃΔΔⵠᐃΔⲆ) >> Δⵠⵠ & 255)) + (8 << ((ⵠᐃᐃⵠᐃⵠⲆ ^ ᐃΔΔⵠᐃΔⲆ) >> 16 & 255)) + (24 << ((ⵠᐃᐃⵠᐃⵠⲆ ^ ᐃΔΔⵠᐃΔⲆ) >> 8 & 255)) + (16 << ((ⵠᐃᐃⵠᐃⵠⲆ ^ ᐃΔΔⵠᐃΔⲆ) >> 24 & 255));
		return ᐃⵠⲆⲆᐃⵠΔ
	}
	const ⵠΔΔΔΔⵠⲆ = function() {
		let ⵠⵠⵠⲆΔⲆⵠ = ⵠᐃΔ;
		let ⵠΔΔᐃⵠᐃⲆ = 0;
		let ⲆᐃΔᐃⵠ = Δⵠⵠ;
		const ⲆⲆᐃⲆⲆⵠⵠ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([115, 116, 97, 99, 107]);
		const ⵠΔᐃⵠⲆⲆⲆ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([67, 97, 110, 118, 97, 115, 82, 101, 110, 100, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
		const ΔⲆⲆⵠⵠΔᐃ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
		const ⲆᐃⵠⲆⵠⵠᐃ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([100, 114, 97, 119, 73, 109, 97, 103, 101]);
		const ΔⵠᐃⲆΔᐃⲆⵠΔ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
		const ⵠΔⵠⲆΔΔⵠ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
		const ⲆΔΔΔⲆΔΔ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([105, 110, ᐃⵠᐃⲆⵠ, 101, 120, 79, 102]);
		const ᐃⵠᐃⵠⵠᐃΔ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([77, 97, 116, 104]);
		const ⲆⵠⵠⲆᐃᐃⲆⲆⲆ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([99, 101, 105, 108]);
		const ⵠⵠᐃⵠⲆⵠᐃ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([102, 108, 111, 111, 114]);
		const ⲆᐃᐃⲆΔⵠⵠ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
		const ⲆⵠΔΔΔΔⵠ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([115, 101, 110, ⵠⲆΔᐃΔ]);
		const ᐃⲆⲆⲆⵠΔΔ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([115, 105, 103, 110]);
		const ⲆⵠᐃᐃⲆⲆᐃ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([102, 105, 108, 108, 82, 101, 99, 116]);
		const ΔⵠⵠΔⵠⲆΔ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([103, 117, 105, 102, 121]);
		const ᐃΔⲆⵠᐃᐃΔ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([101, 118, 97, 108]);
		const ᐃⲆΔᐃᐃΔᐃ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 88, 114, 97, 121]);
		const ᐃΔΔⲆΔᐃᐃ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([10]);
		const ⲆᐃᐃⵠᐃΔᐃ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 67, 111, 108, 111, 114, 101, 100, 83, 112, 105, 107, 101, 115]);
		const ᐃⵠⵠΔΔᐃⲆ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 83, 112, 105, 107, 101]);
		const ΔᐃᐃⵠⵠᐃⲆ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 70, 101, 101, ΔⲆᐃⵠⵠ]);
		const ⵠᐃᐃΔᐃᐃΔ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 67, 114, 97, 102, 116]);
		const ΔᐃΔⵠⵠⲆΔ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 82, 101, 99, 121, 99, 108, 101]);
		const ᐃⵠᐃⵠⵠⵠΔ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 84, 111, 116, 101, 109]);
		const ⲆᐃΔᐃⵠⲆⵠⲆⲆ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 69, 120, 116, 114, 97, 99, 116, 111, 114, 73, 110, 102, 111]);
		const ΔΔⲆΔᐃΔᐃ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([83, 97, 110, 100, 115, 116, 111, 114, 109, 73, 109, 97, 103, 101]);
		const ᐃⵠΔⲆⵠΔⲆ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([116, 111, 83, 116, 114, 105, 110, 103]);
		const ᐃΔⲆⲆΔⲆᐃ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([66, 108, 105, 122, 122, 97, 114, 100, 73, 109, 97, 103, 101]);
		const ᐃⲆᐃⲆᐃΔⲆ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([67, 66, 79]);
		const ΔⵠΔᐃΔᐃⵠ = ⵠᐃΔᐃ.ΔᐃⵠⵠΔ([76, 69, 69, 84, 95, 83, 67, 82, 73, 80, 84, 95, 69, 88, 84, 69, 82, 78, 65, 76]);

		function ᐃΔᐃΔΔⵠⵠ(ⲆΔᐃΔᐃᐃⵠ) {
			if (ⲆΔᐃΔᐃᐃⵠ && ⲆΔᐃΔᐃᐃⵠ[ᐃⵠΔⲆⵠΔⲆ]) {
				const ⵠⲆᐃⲆᐃᐃⵠ = ⲆΔᐃΔᐃᐃⵠ[ᐃⵠΔⲆⵠΔⲆ]();
				if (-ᐃⲆΔ !== ⵠⲆᐃⲆᐃᐃⵠ[ⲆΔΔΔⲆΔΔ](ᐃΔΔⲆΔᐃᐃ)) return ⲆⵠⲆ
			}
			return 0
		}

		function ⲆᐃⲆⲆⵠ(ⲆⲆⵠΔⵠⵠΔ) {
			try {
				ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃΔⲆⵠᐃᐃΔ](ⲆⲆⵠΔⵠⵠΔ);
				return ⵠΔⲆ
			} catch (Δⵠⵠᐃ) {
				return Δⵠⵠ
			}
		}

		function ΔⵠΔⵠⲆΔⲆ(ⲆΔᐃΔᐃᐃⵠ) {
			try {
				ⲆΔᐃΔᐃᐃⵠ()
			} catch (ΔⵠΔⵠⲆⲆᐃ) {
				return ΔⵠΔⵠⲆⲆᐃ[ⲆⲆᐃⲆⲆⵠⵠ][ⲆΔΔΔⲆΔΔ](ⵠΔⵠⲆΔΔⵠ) !== -1 ? ᐃⲆΔ : 0
			}
			return Δⵠⵠ
		}

		function ⵠⲆΔⲆⵠᐃⵠ(ⲆΔᐃΔᐃᐃⵠ) {
			try {
				new ⲆΔᐃΔᐃᐃⵠ
			} catch (ΔⵠΔⵠⲆⲆᐃ) {
				return ΔⵠΔⵠⲆⲆᐃ[ⲆⲆᐃⲆⲆⵠⵠ][ⲆΔΔΔⲆΔΔ](ⵠΔⵠⲆΔΔⵠ) !== -1 ? 1 : ⲆᐃⲆ
			}
			return ΔᐃΔ
		}

		function ΔᐃΔΔⲆᐃⵠ() {
			return ⲆᐃΔᐃⵠ
		}
		return {
			"ΔᐃΔΔⲆᐃⵠ": ΔᐃΔΔⲆᐃⵠ
		}
	}();

	function ΔΔⵠΔΔⲆⲆ(ΔΔⲆⵠΔⵠᐃ, ⲆⲆᐃᐃⲆ, ⲆⵠΔᐃⵠⲆᐃ, ⵠΔⵠᐃᐃⲆⲆ, ⵠⲆΔΔΔΔΔ, ⲆⵠⲆΔᐃᐃΔ) {
		ⵠΔΔΔⵠⵠⲆ(ᐃΔⲆⲆᐃ, ΔΔⲆⵠΔⵠᐃ, ⲆⲆᐃᐃⲆ, ⲆⵠΔᐃⵠⲆᐃ, ⵠΔⵠᐃᐃⲆⲆ, ⵠⲆΔΔΔΔΔ, ⲆⵠⲆΔᐃᐃΔ);
		const ΔΔⵠⲆᐃⵠⵠ = ΔⵠⵠᐃΔⲆΔ(ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[ᐃⵠⵠ]);
		const Δᐃⵠⵠⵠᐃⵠ = ΔⵠⵠΔⵠⲆⲆ(ᐃⲆⵠᐃ[ⲆᐃᐃΔ], ᐃⲆⵠᐃ[ᐃⵠⲆⵠ], ᐃⲆⵠᐃ[ΔᐃΔΔ], ᐃⲆⵠᐃ[ⵠⵠⲆⵠ], ᐃⲆⵠᐃ[ⲆᐃⲆ]);
		const ⲆⲆᐃΔΔⵠⲆ = (52909 + (ΔΔⵠⲆᐃⵠⵠ ^ Δᐃⵠⵠⵠᐃⵠ)) % 65290;
		return ⲆⲆᐃΔΔⵠⲆ
	}
	const ᐃⵠᐃᐃⲆⵠΔⵠⲆ = String.fromCharCode;
	const ΔᐃⲆⲆᐃΔΔ = 101;
	const ΔΔⲆⵠΔⵠΔ = 118;
	const ⲆⵠⲆΔⲆᐃⲆ = "ΔⲆⵠⵠⵠΔᐃᐃΔ";
	const ⵠᐃΔⲆᐃΔΔᐃⵠ = 97;
	const ᐃⲆΔΔⲆΔⲆⵠΔ = 108;
	const ⲆᐃΔⲆⲆⵠᐃ = ᐃⵠᐃᐃⲆⵠΔⵠⲆ(ΔᐃⲆⲆᐃΔΔ);
	const ᐃΔⲆⲆΔⵠⵠΔΔ = ᐃⵠᐃᐃⲆⵠΔⵠⲆ(ΔΔⲆⵠΔⵠΔ);

	function ΔⲆⵠⵠⵠΔᐃᐃΔ() {
		ΔⲆᐃΔΔΔᐃᐃⲆ = ΔⲆⵠⵠⵠΔᐃᐃΔ;
		return ΔⲆⵠⵠⵠΔᐃᐃΔ
	}
	const ⲆⲆΔᐃᐃΔΔ = ᐃⵠᐃᐃⲆⵠΔⵠⲆ(ⵠᐃΔⲆᐃΔΔᐃⵠ);
	const ⲆⲆΔⵠᐃΔⵠ = ᐃⵠᐃᐃⲆⵠΔⵠⲆ(ᐃⲆΔΔⲆΔⲆⵠΔ);
	const ⲆⲆⵠΔᐃᐃΔ = ⲆᐃΔⲆⲆⵠᐃ + ᐃΔⲆⲆΔⵠⵠΔΔ + ⲆⲆΔᐃᐃΔΔ + ⲆⲆΔⵠᐃΔⵠ;
	const ⲆΔᐃᐃᐃᐃⵠ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ⲆⲆⵠΔᐃᐃΔ];
	const ⲆⵠⵠⲆⵠⲆⵠ = ⲆΔᐃᐃᐃᐃⵠ(ΔⲆⵠⵠⵠΔᐃᐃΔ + "try{" + ⲆⵠⲆΔⲆᐃⲆ + "();0;}catch(ⲆⲆΔᐃᐃΔΔ){1;}");
	if (ⲆⵠⵠⲆⵠⲆⵠ) {
		const ᐃⵠᐃᐃⲆⵠΔⵠⲆ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]];
		const ΔᐃⲆⲆᐃΔΔ = ᐃⵠᐃᐃⲆⵠΔⵠⲆ;
		const ΔΔⲆⵠΔⵠΔ = function() {
			ᐃⵠᐃᐃⲆⵠΔⵠⲆ(ΔΔⲆⵠΔⵠΔ, 3510);
			ΔᐃⲆⲆᐃΔΔ(ΔΔⲆⵠΔⵠΔ, 4237)
		};
		ΔΔⲆⵠΔⵠΔ()
	}
	const ⵠᐃⲆᐃΔΔᐃ = "";

	function ΔⵠᐃⲆⲆⲆᐃ(ᐃᐃⲆⲆⵠᐃᐃ) {
		if (ᐃᐃⲆⲆⵠᐃᐃ > 0) return ᐃᐃⲆⲆⵠᐃᐃ * ᐃᐃⲆⲆⵠᐃᐃ;
		else return ᐃᐃⲆⲆⵠᐃᐃ
	}

	function ⲆⵠᐃⲆᐃᐃΔⵠⲆ(ⲆⲆⵠⲆᐃΔⲆ) {
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ.String.fromCharCode(ⲆⲆⵠⲆᐃΔⲆ)
	}

	function ⲆⲆⵠᐃΔⲆⲆΔⲆ(ⲆⵠᐃᐃⵠᐃⵠΔΔ) {
		return ⲆⵠᐃᐃⵠᐃⵠΔΔ.map(ⲆⵠᐃⲆᐃᐃΔⵠⲆ).join(ⵠᐃⲆᐃΔΔᐃ)
	}

	function ΔⵠᐃⲆⵠΔⵠ(ΔᐃΔⵠⲆⵠⵠ) {
		const ΔᐃⵠᐃⲆΔᐃ = ΔⵠᐃⲆⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[27]]();
		const ᐃᐃᐃΔΔΔⵠ = ΔᐃⵠᐃⲆΔᐃ.indexOf(ΔᐃΔⵠⲆⵠⵠ);
		return ᐃᐃᐃΔΔΔⵠ !== -1 ? 1 : 0
	}
	const ⲆᐃⵠᐃⵠᐃⵠΔⵠ = ΔⵠᐃⲆⵠΔⵠ(ⲆⲆⵠᐃΔⲆⲆΔⲆ([916, 11616, 5123, 11398, 11398, 11398, 5123]));
	if (ⲆᐃⵠᐃⵠᐃⵠΔⵠ === 0) {
		const ⲆᐃⵠᐃⵠᐃⵠΔⵠ = Math.floor;
		let ᐃᐃⲆⲆⵠᐃᐃ = 0;
		const ᐃᐃᐃΔΔΔⵠ = function(ᐃᐃᐃΔΔΔⵠ) {
			for (let ΔⵠᐃⲆⲆⲆᐃ = 0; ΔⵠᐃⲆⲆⲆᐃ < 9752; ΔⵠᐃⲆⲆⲆᐃ++) ᐃᐃⲆⲆⵠᐃᐃ += ΔⵠᐃⲆⲆⲆᐃ;
			return ⲆᐃⵠᐃⵠᐃⵠΔⵠ(ᐃᐃᐃΔΔΔⵠ)
		};
		Math.floor = ᐃᐃᐃΔΔΔⵠ
	}

	function ⵠⲆᐃⲆᐃΔᐃ(ᐃᐃⲆⲆᐃⲆⲆ, ᐃΔΔΔⵠᐃΔ, ⵠΔⲆⵠⵠΔⲆ, ΔⵠΔⲆΔⲆᐃ, ΔⵠⵠᐃⲆⲆⲆ, ⵠᐃᐃΔⵠⲆΔ) {
		const ΔⲆᐃᐃⲆⲆΔ = ~(ᐃᐃⲆⲆᐃⲆⲆ & 44995) & (44995 | ᐃᐃⲆⲆᐃⲆⲆ);
		const ᐃⵠⵠⲆᐃΔⲆ = ᐃΔΔΔⵠᐃΔ ^ 64944;
		const ⵠⵠΔᐃⲆᐃⲆ = (ᐃⲆⲆ + (62202 + ⵠΔⲆⵠⵠΔⲆ) * 22695477) % 4294967296;
		const ⲆⲆⵠΔΔⲆⵠ = (ΔⵠΔⲆΔⲆᐃ | 60188) & ~(ΔⵠΔⲆΔⲆᐃ & 60188);
		const ⲆᐃΔⲆᐃⲆⲆ = 1768 ^ ΔⵠⵠᐃⲆⲆⲆ;
		const ΔⵠᐃⵠⵠⲆᐃ = (2531011 + 214013 * (ⵠᐃᐃΔⵠⲆΔ + 3623)) % 4294967296;
		const ΔⲆᐃⵠᐃΔⲆ = ⲆΔⵠⵠΔⵠⵠ(ΔⲆᐃᐃⲆⲆΔ, ᐃⵠⵠⲆᐃΔⲆ, ⵠⵠΔᐃⲆᐃⲆ, ⲆⲆⵠΔΔⲆⵠ);
		const ⲆΔⲆⵠΔᐃΔ = ᐃΔᐃᐃΔᐃΔ(ⲆᐃΔⲆᐃⲆⲆ, ΔⵠᐃⵠⵠⲆᐃ, ΔⲆᐃᐃⲆⲆΔ, ᐃⵠⵠⲆᐃΔⲆ, ⵠⵠΔᐃⲆᐃⲆ);
		const ⲆⲆΔᐃⲆⲆⲆ = (1 + 22695477 * ((ΔⲆᐃⵠᐃΔⲆ ^ ⲆΔⲆⵠΔᐃΔ) + 65193)) % 4294967296;
		return ⲆⲆΔᐃⲆⲆⲆ
	}
	const ⲆⲆΔᐃⵠᐃᐃ = ΔⲆΔΔⵠⵠᐃ;
	const ᐃΔⵠⲆⵠ = ⲆⵠⵠⵠⲆ;

	function ΔⲆᐃᐃᐃⵠᐃ(ΔⲆⲆᐃᐃᐃⲆ, ⵠⲆⵠⲆⵠᐃᐃ, ⲆᐃΔΔⲆΔΔ, ᐃᐃⲆⵠⵠⲆΔ, ⵠΔⵠⲆΔΔⲆ, ⵠⵠⲆΔΔⵠΔ) {
		const ΔᐃᐃⲆᐃᐃΔ = (ΔⲆⲆᐃᐃᐃⲆ | 59149) & ~(ΔⲆⲆᐃᐃᐃⲆ & 59149);
		const ΔⲆᐃᐃⵠΔⲆ = (16 << (ⵠⲆⵠⲆⵠᐃᐃ >> 8 & 255)) + (0 << (ⵠⲆⵠⲆⵠᐃᐃ >> 0 & 255)) + (24 << (ⵠⲆⵠⲆⵠᐃᐃ >> 24 & 255)) + (8 << (ⵠⲆⵠⲆⵠᐃᐃ >> 16 & 255));
		const ΔⵠⲆⵠⲆᐃΔ = ~(52801 & ⲆᐃΔΔⲆΔΔ) & 52801 | ~(52801 & ⲆᐃΔΔⲆΔΔ) & ⲆᐃΔΔⲆΔΔ;
		const ⲆⵠᐃΔΔⲆΔ = ((ᐃᐃⲆⵠⵠⲆΔ + 13431) * 1664525 + 1013904223) % 4294967296;
		const ΔⲆΔΔᐃΔⵠ = (2147483587 + (ⵠΔⵠⲆΔΔⲆ + 57231) * 2147483629) % 2147483647;
		const ΔΔⲆⲆᐃⲆⲆ = (ⵠⵠⲆΔΔⵠΔ + 30910) % 65322;
		const ⵠⲆΔⵠΔⲆⵠ = ⵠΔⲆⲆᐃΔⵠ(ΔᐃᐃⲆᐃᐃΔ, ΔⲆᐃᐃⵠΔⲆ, ΔⵠⲆⵠⲆᐃΔ, ⲆⵠᐃΔΔⲆΔ);
		const ⲆⵠᐃΔᐃⲆⲆ = ⵠΔⲆⲆᐃΔⵠ(ΔⲆΔΔᐃΔⵠ, ΔΔⲆⲆᐃⲆⲆ, ΔᐃᐃⲆᐃᐃΔ, ΔⲆᐃᐃⵠΔⲆ);
		const ᐃⵠΔⲆΔⵠᐃ = (24 << ((ⵠⲆΔⵠΔⲆⵠ ^ ⲆⵠᐃΔᐃⲆⲆ) >> 8 & 255)) + (16 << ((ⵠⲆΔⵠΔⲆⵠ ^ ⲆⵠᐃΔᐃⲆⲆ) >> 0 & 255)) + (8 << ((ⵠⲆΔⵠΔⲆⵠ ^ ⲆⵠᐃΔᐃⲆⲆ) >> 24 & 255)) + (ⵠᐃΔ << ((ⵠⲆΔⵠΔⲆⵠ ^ ⲆⵠᐃΔᐃⲆⲆ) >> 16 & 255));
		return ᐃⵠΔⲆΔⵠᐃ
	}
	var ΔⲆⵠⵠⲆ = navigator.language || navigator.userLanguage;
	const ΔⲆΔⲆⲆ = ΔΔⲆⵠⵠ;
	var ⵠⵠΔΔΔ = -((new Date).getTimezoneOffset() / 60);
	var ⲆΔⲆⵠⲆᐃΔ = "Europe";
	var ⵠⲆⵠⵠΔᐃⲆ = "Russia";
	const ⲆΔⵠⵠΔⵠᐃ = Ⲇⵠᐃⵠⵠ;
	const ᐃᐃⵠᐃΔ = ⲆⲆΔᐃⲆ;
	var ᐃⲆⵠᐃⵠⲆⵠ = "North America";
	const ⲆᐃⵠⵠⲆ = ᐃΔᐃⵠᐃ;
	const ᐃΔᐃⵠΔⲆᐃ = ᐃᐃᐃⲆⵠᐃⵠ;
	var ⵠᐃⲆᐃᐃⵠⲆ = "South America";
	var ⲆΔⵠᐃⵠⵠⵠ = "West America";
	const ⲆΔΔΔ = ⵠΔΔΔ;
	var ΔⲆΔⵠΔⵠᐃ = "Asia";
	var ΔⲆⵠΔΔᐃᐃ = "Australia";
	const ΔΔᐃⲆⲆⲆΔ = ⵠΔⵠᐃⵠ;
	var Ⲇᐃⵠᐃᐃⵠⵠ = ⲆΔⲆⵠⲆᐃΔ;
	const ⵠᐃᐃⵠⵠ = ᐃⲆᐃⲆᐃ;
	const ΔⲆΔⵠⲆ = ⵠᐃⲆᐃᐃ;
	if (-ⲆⲆᐃⲆ <= ⵠⵠΔΔΔ && ⵠⵠΔΔΔ <= ⵠΔᐃⵠ) Ⲇᐃⵠᐃᐃⵠⵠ = ⲆΔⲆⵠⲆᐃΔ;
	else if (ⵠⵠΔΔΔ > 2 && ⵠΔΔΔ >= ⵠⵠΔΔΔ) Ⲇᐃⵠᐃᐃⵠⵠ = ⵠⲆⵠⵠΔᐃⲆ;
	else if (5 < ⵠⵠΔΔΔ && 9 >= ⵠⵠΔΔΔ) Ⲇᐃⵠᐃᐃⵠⵠ = ΔⲆΔⵠΔⵠᐃ;
	else if (ⵠⵠΔΔΔ > 9) Ⲇᐃⵠᐃᐃⵠⵠ = ΔⲆⵠΔΔᐃᐃ;
	else if (ⵠⵠΔΔΔ >= -Δᐃⵠᐃ && -2 > ⵠⵠΔΔΔ) {
		if ("pt-BR" === ΔⲆⵠⵠⲆ || ΔⲆⵠⵠⲆ === "pt-br" || "pt" === ΔⲆⵠⵠⲆ || ΔⲆⵠⵠⲆ === "pt-pt") Ⲇᐃⵠᐃᐃⵠⵠ = ⵠᐃⲆᐃᐃⵠⲆ;
		else Ⲇᐃⵠᐃᐃⵠⵠ = ᐃⲆⵠᐃⵠⲆⵠ
	} else if (ⵠⵠΔΔΔ < -ⵠⵠⲆⵠ) {
		ΔⲆⵠⵠⲆ === "pt-BR" || "pt-br" === ΔⲆⵠⵠⲆ || ΔⲆⵠⵠⲆ === "pt" || ΔⲆⵠⵠⲆ === "pt-pt" ? Ⲇᐃⵠᐃᐃⵠⵠ = ⵠᐃⲆᐃᐃⵠⲆ : Ⲇᐃⵠᐃᐃⵠⵠ = ⲆΔⵠᐃⵠⵠⵠ
	}
	const ⲆΔⲆΔᐃ = ⲆⵠⵠΔⵠ;

	function ⲆⲆΔⲆΔⵠⲆ(ΔⵠⲆΔᐃⵠᐃ, ΔⲆⲆᐃᐃΔⵠ, ⵠⲆΔᐃΔⵠⵠ, ⲆΔᐃΔⵠΔᐃ, ⲆΔⵠᐃⲆΔⲆ, ⲆⲆΔΔᐃⵠᐃ) {
		const ⲆⵠⲆⵠᐃᐃᐃ = ~(ΔⵠⲆΔᐃⵠᐃ & 6022) & (ΔⵠⲆΔᐃⵠᐃ | 6022);
		const ΔⵠⵠⵠⲆᐃᐃ = (45709 + ΔⲆⲆᐃᐃΔⵠ) % 65445;
		const ΔᐃⵠᐃⵠⲆΔ = ((ⵠⲆΔᐃΔⵠⵠ + 48534) * 22695477 + 1) % 4294967296;
		const ⲆᐃⵠⲆᐃᐃᐃ = (0 << (ⲆΔᐃΔⵠΔᐃ >> 16 & 255)) + (24 << (ⲆΔᐃΔⵠΔᐃ >> 24 & ᐃΔᐃⵠΔ)) + (16 << (ⲆΔᐃΔⵠΔᐃ >> 0 & 255)) + (8 << (ⲆΔᐃΔⵠΔᐃ >> 8 & 255));
		const ⲆΔΔᐃΔᐃᐃ = (2531011 + 214013 * (ⲆΔⵠᐃⲆΔⲆ + 32944)) % 4294967296;
		const ⲆⵠᐃⵠᐃⵠΔ = (16 << (ⲆⲆΔΔᐃⵠᐃ >> 0 & 255)) + (0 << (ⲆⲆΔΔᐃⵠᐃ >> 8 & ΔⲆⲆΔⵠᐃⲆ)) + (24 << (ⲆⲆΔΔᐃⵠᐃ >> 24 & 255)) + (8 << (ⲆⲆΔΔᐃⵠᐃ >> 16 & ᐃⵠΔΔⵠ));
		const ΔᐃⵠⲆⲆᐃΔ = ᐃᐃⲆΔΔΔⲆ(ⲆⵠⲆⵠᐃᐃᐃ, ΔⵠⵠⵠⲆᐃᐃ, ΔᐃⵠᐃⵠⲆΔ);
		const ⵠᐃⵠⵠΔᐃᐃⲆΔ = ⵠᐃⲆⵠⲆⵠΔ(ⲆᐃⵠⲆᐃᐃᐃ, ⲆΔΔᐃΔᐃᐃ, ⲆⵠᐃⵠᐃⵠΔ, ⲆⵠⲆⵠᐃᐃᐃ, ΔⵠⵠⵠⲆᐃᐃ);
		const ᐃⲆⲆⵠⵠᐃⲆ = ΔᐃⵠⲆⲆᐃΔ ^ 6755;
		return ᐃⲆⲆⵠⵠᐃⲆ
	}
	const ⵠΔⵠᐃᐃ = ⲆⵠⲆⵠΔ;

	function ⲆⲆⲆΔΔⲆⲆ(ᐃⵠⵠᐃⲆΔⲆ, ⲆⲆⵠΔΔᐃⵠ) {
		ⲆΔᐃΔⵠΔⲆ(ᐃΔⲆⲆᐃ, ᐃⵠⵠᐃⲆΔⲆ, ⲆⲆⵠΔΔᐃⵠ);
		const ᐃⵠⲆΔⲆⵠⵠ = ΔⲆⵠᐃⲆⲆⲆ(ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[ⵠΔΔ], ᐃⲆⵠᐃ[0]);
		const ⵠᐃⲆⵠΔⵠΔᐃᐃ = ΔΔΔⵠⵠⲆᐃ(ᐃⲆⵠᐃ[ⵠΔΔ], ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[Δⵠⵠ]);
		const ᐃⵠΔΔΔⵠᐃ = (28898 | ᐃⵠⲆΔⲆⵠⵠ) & ~(ᐃⵠⲆΔⲆⵠⵠ & 28898);
		return ᐃⵠΔΔΔⵠᐃ
	}

	function ΔΔΔⵠⵠⲆᐃ(ΔᐃⵠⲆᐃⲆⵠ, ⲆΔⵠⲆΔⵠᐃ, ΔΔⲆΔⵠ, ΔⲆᐃΔⲆΔᐃ) {
		ΔⲆΔⵠᐃᐃΔ(ᐃΔⲆⲆᐃ, ΔᐃⵠⲆᐃⲆⵠ, ⲆΔⵠⲆΔⵠᐃ, ΔΔⲆΔⵠ, ΔⲆᐃΔⲆΔᐃ);
		const ΔⲆⲆᐃⲆⵠⵠ = ΔΔΔΔᐃΔⵠ(ᐃⲆⵠᐃ[ⲆᐃⲆ], ᐃⲆⵠᐃ[ⵠΔᐃ], ᐃⲆⵠᐃ[Δᐃᐃⵠ], ᐃⲆⵠᐃ[ᐃⵠⲆⵠ], ᐃⲆⵠᐃ[ⵠᐃΔ], ᐃⲆⵠᐃ[1]);
		const ⲆⵠΔᐃⲆⲆᐃΔⵠ = ΔⲆⵠᐃⲆⲆⲆ(ᐃⲆⵠᐃ[2], ᐃⲆⵠᐃ[ⲆΔⲆΔ], ᐃⲆⵠᐃ[Δⵠⵠ]);
		const ΔⵠᐃΔⵠⲆⲆ = ΔⲆⲆᐃⲆⵠⵠ ^ 12449;
		return ΔⵠᐃΔⵠⲆⲆ
	}
	const ⲆΔⵠᐃⲆ = ᐃᐃᐃⵠⵠ;
	const ᐃⵠΔⲆ = Δⵠᐃᐃ;

	function ᐃᐃⵠⲆⲆⵠᐃ(ᐃΔⲆΔΔᐃⵠ, ⲆⲆⵠΔⵠⲆⵠ, ΔᐃⵠᐃᐃⵠⲆ, ᐃᐃⵠΔΔΔᐃ, ΔᐃΔΔᐃΔⵠ, ⲆⵠᐃⵠᐃΔⵠ) {
		const ⵠᐃᐃⵠⲆᐃⲆ = ᐃΔⲆΔΔᐃⵠ ^ 45281;
		const ⵠᐃΔΔⲆΔᐃ = 64632 ^ ⲆⲆⵠΔⵠⲆⵠ;
		const ⲆΔⵠⲆᐃΔⲆ = 48645 ^ ΔᐃⵠᐃᐃⵠⲆ;
		const ᐃⵠᐃⲆⲆᐃⵠ = (1013904223 + 1664525 * (ᐃᐃⵠΔΔΔᐃ + 52944)) % 4294967296;
		const ᐃⵠⵠΔΔⵠᐃ = ~(ΔᐃΔΔᐃΔⵠ & 6621) & ΔᐃΔΔᐃΔⵠ | ~(ΔᐃΔΔᐃΔⵠ & 6621) & 6621;
		const ΔΔΔⵠΔⵠⲆ = (8 << (ⲆⵠᐃⵠᐃΔⵠ >> 24 & 255)) + (16 << (ⲆⵠᐃⵠᐃΔⵠ >> 8 & 255)) + (24 << (ⲆⵠᐃⵠᐃΔⵠ >> 0 & ⲆⲆΔⵠⲆ)) + (0 << (ⲆⵠᐃⵠᐃΔⵠ >> 16 & 255));
		const ΔⲆᐃΔΔⵠΔ = ⲆⵠᐃⵠⲆⵠΔ(ⵠᐃᐃⵠⲆᐃⲆ, ⵠᐃΔΔⲆΔᐃ, ⲆΔⵠⲆᐃΔⲆ);
		const ΔᐃⵠⵠΔⲆᐃΔᐃ = ⲆΔⵠⵠⵠᐃᐃ(ᐃⵠᐃⲆⲆᐃⵠ, ᐃⵠⵠΔΔⵠᐃ, ΔΔΔⵠΔⵠⲆ, ⵠᐃᐃⵠⲆᐃⲆ);
		const ⲆⲆⲆⵠⵠᐃⵠ = ~(18448 & ΔⲆᐃΔΔⵠΔ) & (ΔⲆᐃΔΔⵠΔ | 18448);
		return ⲆⲆⲆⵠⵠᐃⵠ
	}
	const ⵠⵠᐃ = ⵠΔⲆ;
	const ⵠᐃΔⲆᐃ = ΔⲆᐃⵠⵠ;

	function ⲆΔⵠⵠⵠᐃᐃ(ΔⲆⲆᐃᐃᐃᐃ, ⵠΔᐃⵠᐃⲆⲆ, ⲆⲆⵠⵠᐃᐃΔ, ⵠΔⵠⵠᐃⵠΔ) {
		const ᐃΔΔΔⵠⲆⲆ = ~(40102 & ΔⲆⲆᐃᐃᐃᐃ) & 40102 | ~(40102 & ΔⲆⲆᐃᐃᐃᐃ) & ΔⲆⲆᐃᐃᐃᐃ;
		const ⵠᐃⲆⵠᐃᐃᐃ = (24 << (ⵠΔᐃⵠᐃⲆⲆ >> 8 & 255)) + (16 << (ⵠΔᐃⵠᐃⲆⲆ >> 0 & 255)) + (0 << (ⵠΔᐃⵠᐃⲆⲆ >> 16 & 255)) + (ⵠᐃⵠᐃⵠ << (ⵠΔᐃⵠᐃⲆⲆ >> 24 & 255));
		const ΔΔΔᐃᐃΔⲆ = (ⲆⲆⵠⵠᐃᐃΔ | 33552) & ~(ⲆⲆⵠⵠᐃᐃΔ & 33552);
		const Δᐃᐃᐃᐃᐃⵠ = ~(ⵠΔⵠⵠᐃⵠΔ & 64818) & 64818 | ~(64818 & ⵠΔⵠⵠᐃⵠΔ) & ⵠΔⵠⵠᐃⵠΔ;
		const ΔᐃᐃᐃΔΔⲆ = ᐃΔᐃΔΔⵠⲆ(ᐃΔΔΔⵠⲆⲆ, ⵠᐃⲆⵠᐃᐃᐃ, ΔΔΔᐃᐃΔⲆ, Δᐃᐃᐃᐃᐃⵠ, ᐃΔΔΔⵠⲆⲆ, ⵠᐃⲆⵠᐃᐃᐃ);
		const ⲆⵠⵠΔⵠᐃⲆ = ⵠᐃⲆⵠⲆⵠΔ(ΔΔΔᐃᐃΔⲆ, Δᐃᐃᐃᐃᐃⵠ, ᐃΔΔΔⵠⲆⲆ, ⵠᐃⲆⵠᐃᐃᐃ, ΔΔΔᐃᐃΔⲆ);
		const ⲆΔⵠΔⵠΔⵠ = (24 << ((ΔᐃᐃᐃΔΔⲆ ^ ⲆⵠⵠΔⵠᐃⲆ) >> 16 & 255)) + (0 << ((ΔᐃᐃᐃΔΔⲆ ^ ⲆⵠⵠΔⵠᐃⲆ) >> 24 & ⲆⲆΔⵠⲆ)) + (ΔΔⵠᐃⲆ << ((ΔᐃᐃᐃΔΔⲆ ^ ⲆⵠⵠΔⵠᐃⲆ) >> 8 & 255)) + (ⲆᐃⲆΔⲆ << ((ΔᐃᐃᐃΔΔⲆ ^ ⲆⵠⵠΔⵠᐃⲆ) >> 0 & ⲆⵠΔᐃᐃᐃⲆ));
		return ⲆΔⵠΔⵠΔⵠ
	}
	var ⵠᐃⵠΔⵠ = function() {
		function ᐃΔᐃⲆΔᐃᐃ(ⵠⲆⵠⲆᐃ) {
			var ⵠΔᐃᐃ = 2147483648;
			var ᐃᐃᐃⵠ = 1103515245;
			var ⵠⵠⵠⲆ = 12345;
			var ⲆⵠⲆΔ = ⵠⲆⵠⲆᐃ ? ⵠⲆⵠⲆᐃ : Math.floor(Math.random() * (ⵠΔᐃᐃ - 1));
			this.ΔⲆᐃᐃⵠ = function(ⵠⲆⵠⲆᐃ) {
				ⲆⵠⲆΔ = ⵠⲆⵠⲆᐃ ? ⵠⲆⵠⲆᐃ : Math.floor((ⵠΔᐃᐃ - 1) * Math.random())
			};
			this.get = function() {
				ⲆⵠⲆΔ = (ⲆⵠⲆΔ * ᐃᐃᐃⵠ + ⵠⵠⵠⲆ) % ⵠΔᐃᐃ;
				return ⲆⵠⲆΔ / ⵠΔᐃᐃ
			}
		}
		return {
			"ᐃΔᐃⲆΔᐃᐃ": ᐃΔᐃⲆΔᐃᐃ
		}
	}();
	const ΔᐃΔⵠᐃ = ᐃⵠᐃⲆⵠⲆⲆ;
	const ΔⵠΔⲆⲆ = ⵠᐃΔᐃⲆ;
	const ⵠΔᐃⵠΔ = ᐃⲆΔⵠΔ;
	const ᐃⵠⲆⵠΔ = ⵠⲆⵠⲆΔᐃⵠ;
	const ΔᐃⲆⵠΔᐃᐃ = ᐃⲆΔΔⲆ;

	function ⲆΔⵠᐃΔᐃⲆ(ᐃΔⲆᐃⵠΔⲆ, ᐃΔⵠⵠⵠⲆⵠ, ᐃᐃⵠⵠⵠ, ᐃᐃᐃᐃⲆⵠⵠ) {
		const ⵠⲆᐃᐃΔⵠΔ = ~(641 & ᐃΔⲆᐃⵠΔⲆ) & 641 | ~(641 & ᐃΔⲆᐃⵠΔⲆ) & ᐃΔⲆᐃⵠΔⲆ;
		const ΔᐃⵠⵠⵠⵠⲆ = ~(16770 & ᐃΔⵠⵠⵠⲆⵠ) & 16770 | ~(16770 & ᐃΔⵠⵠⵠⲆⵠ) & ᐃΔⵠⵠⵠⲆⵠ;
		const ⲆΔⲆⵠΔᐃⵠ = (24 << (ᐃᐃⵠⵠⵠ >> 16 & 255)) + (16 << (ᐃᐃⵠⵠⵠ >> 24 & 255)) + (8 << (ᐃᐃⵠⵠⵠ >> 8 & 255)) + (0 << (ᐃᐃⵠⵠⵠ >> 0 & 255));
		const ᐃⵠᐃᐃᐃΔΔ = (8 << (ᐃᐃᐃᐃⲆⵠⵠ >> 0 & 255)) + (24 << (ᐃᐃᐃᐃⲆⵠⵠ >> 8 & 255)) + (16 << (ᐃᐃᐃᐃⲆⵠⵠ >> 24 & 255)) + (0 << (ᐃᐃᐃᐃⲆⵠⵠ >> 16 & 255));
		const ᐃⵠᐃΔᐃΔΔ = ⲆΔⵠⵠΔⵠⵠ(ⵠⲆᐃᐃΔⵠΔ, ΔᐃⵠⵠⵠⵠⲆ, ⲆΔⲆⵠΔᐃⵠ, ᐃⵠᐃᐃᐃΔΔ);
		const ⵠΔΔⵠᐃⵠⲆ = ΔΔⲆᐃΔᐃⵠ(ⵠⲆᐃᐃΔⵠΔ, ΔᐃⵠⵠⵠⵠⲆ);
		const ⲆⲆⵠᐃⲆᐃⲆ = (24 << ((ᐃⵠᐃΔᐃΔΔ ^ ⵠΔΔⵠᐃⵠⲆ) >> 0 & 255)) + (0 << ((ᐃⵠᐃΔᐃΔΔ ^ ⵠΔΔⵠᐃⵠⲆ) >> 24 & 255)) + (16 << ((ᐃⵠᐃΔᐃΔΔ ^ ⵠΔΔⵠᐃⵠⲆ) >> 8 & 255)) + (ΔⲆᐃΔΔ << ((ᐃⵠᐃΔᐃΔΔ ^ ⵠΔΔⵠᐃⵠⲆ) >> 16 & 255));
		return ⲆⲆⵠᐃⲆᐃⲆ
	}
	const ⵠⲆⵠⲆⵠ = ΔⲆᐃΔⲆ;

	function ⲆⵠᐃⵠⲆⵠΔ(ΔⲆⵠΔⲆᐃⵠ, ᐃᐃΔⵠⲆᐃᐃ, ⵠΔⵠⲆⲆⵠᐃ) {
		const ⵠⲆΔⲆⵠⲆⲆ = ~(ΔⲆⵠΔⲆᐃⵠ & 35305) & (ΔⲆⵠΔⲆᐃⵠ | 35305);
		const ᐃⵠⲆⵠⵠᐃⲆ = (0 << (ᐃᐃΔⵠⲆᐃᐃ >> 0 & 255)) + (8 << (ᐃᐃΔⵠⲆᐃᐃ >> 24 & 255)) + (16 << (ᐃᐃΔⵠⲆᐃᐃ >> 8 & 255)) + (24 << (ᐃᐃΔⵠⲆᐃᐃ >> 16 & 255));
		const ΔⲆᐃΔᐃᐃΔ = (0 << (ⵠΔⵠⲆⲆⵠᐃ >> 24 & 255)) + (24 << (ⵠΔⵠⲆⲆⵠᐃ >> 0 & 255)) + (8 << (ⵠΔⵠⲆⲆⵠᐃ >> 8 & 255)) + (16 << (ⵠΔⵠⲆⲆⵠᐃ >> ΔⲆⲆⵠΔ & 255));
		const ΔᐃᐃᐃΔⵠⵠ = ΔⲆᐃΔΔΔᐃ(ⵠⲆΔⲆⵠⲆⲆ, ᐃⵠⲆⵠⵠᐃⲆ, ΔⲆᐃΔᐃᐃΔ, ⵠⲆΔⲆⵠⲆⲆ, ᐃⵠⲆⵠⵠᐃⲆ);
		const ⵠⵠΔⵠΔΔᐃΔΔ = ⲆΔᐃⲆΔⲆᐃ(ΔⲆᐃΔᐃᐃΔ, ⵠⲆΔⲆⵠⲆⲆ, ᐃⵠⲆⵠⵠᐃⲆ);
		const ᐃⵠⵠⵠⲆⵠⲆ = ~(53588 & ΔᐃᐃᐃΔⵠⵠ) & 53588 | ~(53588 & ΔᐃᐃᐃΔⵠⵠ) & ΔᐃᐃᐃΔⵠⵠ;
		return ᐃⵠⵠⵠⲆⵠⲆ
	}
	const ΔᐃⲆⵠⵠ = ⲆⵠⲆΔᐃ;
	const ⲆΔⲆᐃⲆ = ᐃⲆᐃⲆⲆ;
	const ΔΔᐃⵠⵠ = ᐃⲆⵠⲆⲆ;
	const ΔⲆⵠⵠⵠ = ᐃΔⵠⲆⲆ;
	const ΔᐃΔΔᐃΔⲆ = ⲆᐃΔᐃⲆ;

	function ⵠⵠⵠΔᐃⵠΔ(ΔⲆΔᐃⲆ, ⲆⵠⵠΔⲆᐃⵠ) {
		ⲆᐃᐃᐃΔⲆⵠ(ᐃΔⲆⲆᐃ, ΔⲆΔᐃⲆ, ⲆⵠⵠΔⲆᐃⵠ);
		const ⲆᐃⵠⵠᐃᐃⲆ = ΔⲆⵠᐃⲆⲆⲆ(ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[ⵠΔⲆ], ᐃⲆⵠᐃ[ⵠⲆᐃ]);
		const ᐃΔⲆⵠⵠΔᐃ = ⵠΔᐃΔΔⲆΔ(ᐃⲆⵠᐃ[ᐃⲆΔ], ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[0]);
		const ΔΔⲆⵠⵠⲆΔ = (48271 * (152 + (ⲆᐃⵠⵠᐃᐃⲆ ^ ᐃΔⲆⵠⵠΔᐃ)) + ΔᐃΔ) % 2147483647;
		return ΔΔⲆⵠⵠⲆΔ
	}
	var ᐃⵠΔⲆᐃⲆⵠ = [
		[ⵠⲆᐃ, "DRAGON", 18, 6, 66, 35, 0],
		[0, Δ[344], 91, ΔᐃΔⵠᐃ, 5, 40, 8],
		[0, Δ[437], 135, 180, 89, 124, 5],
		[ⵠᐃΔ, Δ[241], 142, Δⵠᐃⵠⵠ, 82, 99, ⲆⵠᐃΔᐃ],
		[ⲆᐃⲆ, Δ[383], ΔⲆⵠΔΔ, 150, 90, 154, 8],
		[0, Δ[344], ΔⲆⵠΔΔ, 6, 90, 150, ⵠⲆᐃ],
		[1, "b", 0, ⲆΔΔΔ, 175, ⵠⲆⵠ],
		[1, "t", 2, ⲆΔΔΔ, 174, 0],
		[1, "t", 5, ⵠΔΔΔ, 173, ⵠⲆᐃ],
		[ⵠΔΔ, "b", 3, 5, 176, 0],
		[ΔⵠⲆ, "t", 0, ⲆΔⲆⲆ, 177, ⵠⲆᐃ],
		[ⵠΔⲆ, "t", 3, ⲆΔΔΔ, 178, 0],
		[ᐃⵠⵠ, "t", ΔᐃΔΔ, 5, 179, ᐃΔΔ],
		[1, "b", 0, Δᐃⵠᐃ, 180, 0],
		[ⵠΔᐃ, "t", 5, ⲆΔⲆⲆ, 181, 0],
		[1, "b", 2, 5, 182, ΔᐃΔ],
		[1, "b", ᐃⲆⲆ, ⵠⵠⲆⵠ, 183, Δⵠⵠ],
		[1, "b", ⵠΔᐃⵠ, 5, 184, ⵠⲆᐃ],
		[ᐃⲆΔ, "t", 5, 5, 185, 0],
		[1, "t", ⲆⲆᐃⲆ, 5, 186, 0],
		[ⲆⵠⲆ, "t", Δⵠⵠ, ⲆΔΔΔ, 187, ⵠᐃΔ],
		[1, "t", 5, 5, 188, 0],
		[1, "t", 1, ⲆΔⲆⲆ, 189, 0],
		[1, "b", 2, 5, 190, ⵠⲆᐃ],
		[ⲆΔᐃ, "t", 4, ⲆΔΔΔ, 191, ⵠⲆᐃ],
		[ᐃⵠⵠ, "b", ᐃⵠᐃⲆ, 5, 192, Δⵠⵠ],
		[1, "t", ⵠⵠΔⲆ, 5, 193, 0],
		[ᐃⲆⲆ, "t", 0, 5, 194, 0],
		[ⲆⵠⲆ, "t", ᐃⵠⲆⵠ, 5, 195, 0],
		[ⲆΔᐃ, "b", 0, 5, 196, ⵠⲆᐃ],
		[ⵠΔⲆ, "t", 5, 5, 197, 0],
		[ⲆⵠⲆ, "t", Δⵠᐃᐃ, ⵠⵠⲆⵠ, 198, 0],
		[ⲆⵠⲆ, "b", ΔⲆᐃⲆ, 5, 199, 0],
		[ⵠΔᐃ, "t", ⵠΔΔⵠ, 5, 200, ⲆᐃⲆ],
		[1, "t", ⵠΔⲆ, ΔΔⵠΔ, 201, Δⵠⵠ],
		[1, "b", ᐃⵠⵠ, 5, 202, 0],
		[1, "t", 5, 5, 203, ᐃΔΔ],
		[ᐃⲆⲆ, "t", 2, 5, 204, ΔᐃΔ],
		[1, "t", ΔᐃΔΔ, ⵠⵠΔⲆ, 205, ⲆᐃⲆ],
		[1, "b", ⲆⲆΔΔ, 5, 206, 0],
		[1, "t", ᐃⲆⲆ, 5, 207, ᐃΔΔ],
		[ⲆΔᐃ, "t", ⵠΔΔⵠ, 5, 208, 0],
		[ⵠΔⲆ, "t", 2, ⵠⵠⲆⵠ, 209, 0],
		[ⵠⵠᐃ, "b", 0, ⲆΔΔΔ, 210, ⵠⲆⵠ],
		[1, "t", ΔΔⵠΔ, 5, 211, 0],
		[1, "t", ΔⵠⲆ, ⲆΔΔΔ, 212, 0],
		[ᐃⲆΔ, "t", ⲆⲆΔΔ, ⲆΔⲆⲆ, 213, 0],
		[ⵠΔΔ, "b", ⵠᐃⲆᐃ, ⲆΔⲆⲆ, 214, 0],
		[ΔⵠⲆ, "t", 5, 5, 215, Δⵠⵠ],
		[ⲆⵠⲆ, "b", ⵠⲆᐃ, 5, 216, ⵠⲆᐃ],
		[ⵠⵠᐃ, "t", ᐃⵠⲆⲆ, ⵠⵠΔⲆ, 217, Δⵠⵠ],
		[ΔⵠⲆ, "t", ⵠΔᐃⵠ, 5, 218, ⵠⲆᐃ],
		[1, "t", 1, ΔΔⵠΔ, 219, 0],
		[1, "t", 3, ⵠⵠΔⲆ, 220, 0],
		[1, "t", 5, ⵠⵠΔⲆ, 221, 0],
		[ⵠΔᐃ, "t", 2, ⲆΔΔΔ, 222, 0],
		[Δᐃᐃ, "t", ΔᐃΔΔ, 5, 223, 0],
		[1, "b", 3, ⲆΔⲆⲆ, 224, 0],
		[1, "t", ⵠΔΔ, 5, 225, ᐃΔΔ],
		[1, "t", ⲆΔⲆΔ, 5, 226, ΔᐃΔ],
		[ⵠΔΔ, "b", ΔᐃΔ, ⵠⵠⲆⵠ, 227, ᐃΔΔ],
		[ⵠΔᐃ, "t", ΔⵠⲆⲆ, 5, 228, 0],
		[1, "t", 5, 5, 229, 0],
		[ⵠⵠᐃ, "t", 2, 5, 230, 0],
		[1, "t", 0, 5, 231, 0],
		[ⵠΔΔ, "b", 2, 5, 232, ΔᐃΔ],
		[1, "t", ⵠΔⲆ, ⵠΔΔΔ, 233, 0],
		[1, "t", ΔⵠⲆᐃ, ⲆΔΔΔ, 234, 0],
		[1, "b", 1, 5, 235, ΔᐃΔ],
		[1, "t", ΔⵠⲆᐃ, 5, 236, 0],
		[1, "t", ΔⲆᐃⲆ, 5, 237, 0],
		[1, "t", 0, ΔΔⵠΔ, 238, 0],
		[ᐃⵠⵠ, "t", ΔᐃΔΔ, ⲆΔΔΔ, 239, ⵠᐃΔ],
		[1, "b", 2, 5, 240, ⲆᐃⲆ],
		[1, "t", 5, Δᐃⵠᐃ, 241, Δⵠⵠ],
		[1, "b", ⵠΔⲆ, 5, 242, Δⵠⵠ],
		[1, "t", 4, 5, 243, 0],
		[1, "t", 2, Δᐃⵠᐃ, 244, ⵠᐃΔ],
		[ⵠΔΔ, "t", ᐃⵠⵠ, 5, 245, Δⵠⵠ],
		[1, "b", 1, 5, 246, 0],
		[1, "t", 3, ⵠⵠΔⲆ, 247, ⵠⲆⵠ],
		[1, "b", ⵠΔᐃⵠ, Δᐃⵠᐃ, 248, ⵠⲆⵠ],
		[1, "t", 5, ⵠΔΔΔ, 249, ⲆᐃⲆ],
		[1, "t", 2, ⵠΔΔΔ, 250, 0],
		[1, "t", 4, ΔΔⵠΔ, 251, 0],
		[1, "b", ᐃⲆⲆ, ΔΔⵠΔ, 252, Δⵠⵠ],
		[ⲆΔᐃ, "t", ᐃᐃΔΔ, 5, 253, Δⵠⵠ],
		[1, "t", 1, 5, 254, 0],
		[ⵠⵠᐃ, "t", ⲆΔⲆΔ, 5, 255, ΔᐃΔ],
		[ⲆΔᐃ, "t", ⵠⵠΔⲆ, 5, 256, 0],
		[ΔⵠⲆ, "b", ᐃⵠΔⲆ, 5, 257, Δⵠⵠ],
		[1, "t", 4, ⲆΔΔΔ, 258, ⵠᐃΔ],
		[1, "b", ᐃΔᐃⲆ, 5, 259, 0],
		[1, "t", 5, 5, 260, ⵠⲆⵠ],
		[ⵠⵠᐃ, "b", 0, ⲆΔΔΔ, 261, 0],
		[ⵠΔᐃ, "t", Ⲇⵠᐃᐃ, 5, 262, 0],
		[1, "t", 4, 5, 263, 0],
		[Δᐃᐃ, "t", 2, ⵠΔΔΔ, 264, ΔᐃΔ],
		[1, "b", 1, 5, 265, 0],
		[1, "b", Δᐃᐃⵠ, ⵠⵠΔⲆ, 266, ΔᐃΔ],
		[ⵠΔⲆ, "t", ᐃⵠᐃⲆ, 5, 267, ⵠⲆᐃ],
		[1, "t", 4, 5, 268, 0],
		[1, "t", Δⵠⵠ, Δᐃⵠᐃ, 269, ΔᐃΔ],
		[1, "t", ⵠⵠⲆⵠ, ⲆΔΔΔ, 270, Δⵠⵠ],
		[ⵠⵠᐃ, "t", ᐃⵠⲆⵠ, 5, 271, ⵠᐃΔ],
		[ᐃⲆΔ, "t", 4, ⲆΔΔΔ, 272, ΔᐃΔ],
		[ᐃⲆΔ, "t", ᐃⲆΔ, 5, 273, ΔᐃΔ],
		[Δᐃᐃ, "b", ⲆⲆᐃⲆ, Δᐃⵠᐃ, 274, 0],
		[1, "t", 1, ⵠⵠⲆⵠ, 275, 0],
		[ⵠⵠᐃ, "t", 4, ⲆΔⲆⲆ, 276, ⵠⲆⵠ],
		[ⵠΔⲆ, "b", 1, 5, 277, ⵠⲆᐃ],
		[1, "b", ⲆᐃᐃΔ, ΔΔⵠΔ, 278, 0],
		[1, "t", ⵠΔΔ, 5, 279, ⵠⲆᐃ],
		[ⲆΔᐃ, "t", 4, ⵠΔΔΔ, 280, 0],
		[1, "t", ⲆⲆΔΔ, ⲆΔⲆⲆ, 281, 0],
		[1, "t", Δᐃⵠᐃ, 5, 282, ⲆᐃⲆ],
		[ᐃⲆΔ, "b", ᐃⵠΔⲆ, Δᐃⵠᐃ, 283, ᐃΔΔ],
		[ⵠΔⲆ, "t", ᐃⲆΔ, 5, 284, 0],
		[1, "b", 3, ⲆΔΔΔ, 285, ⵠⲆⵠ],
		[1, "t", 4, ⲆΔⲆⲆ, 286, Δⵠⵠ],
		[1, "t", ⵠⲆⵠ, 5, 287, ⵠᐃΔ],
		[ⲆΔᐃ, "t", ⲆΔΔΔ, ⵠΔΔΔ, 288, ⵠⲆⵠ],
		[Δᐃᐃ, "t", Δᐃᐃⵠ, 5, 289, ᐃΔΔ],
		[1, "b", ⵠΔⲆ, 5, 290, ⵠᐃΔ],
		[1, "t", ⵠΔΔⵠ, 5, 292, ⵠᐃΔ],
		[ᐃⵠⵠ, "t", 2, 5, 291, 0],
		[1, "b", 2, ⵠⵠΔⲆ, 293, 0],
		[1, "t", 1, ⵠⵠΔⲆ, 294, ⲆᐃⲆ],
		[ⲆΔᐃ, "t", Ⲇⵠᐃᐃ, 5, 295, 0],
		[Δᐃᐃ, "t", 5, ⵠΔΔΔ, 296, 0],
		[1, "b", ΔᐃΔ, 5, 297, ⲆᐃⲆ],
		[1, "b", Ⲇⵠᐃᐃ, ⲆΔⲆⲆ, 298, ΔᐃΔ],
		[ⵠΔΔ, "t", ΔⵠⲆᐃ, 5, 299, ⵠⲆⵠ],
		[ⵠΔⲆ, "t", 2, 5, 300, 0],
		[ⵠⵠᐃ, "t", 4, 5, 301, ⵠⲆⵠ],
		[1, "b", ⵠᐃΔ, 5, 302, ᐃΔΔ],
		[1, "b", ⲆⲆΔΔ, ⵠΔΔΔ, 303, 0],
		[Δᐃᐃ, "t", ᐃⲆⲆ, ⲆⵠⵠⵠⲆ, 303, 0],
		[1, "t", 2, ⵠΔⵠΔᐃ, 303, ⵠⲆᐃ],
		[ⵠΔᐃ, "t", ⲆⵠⲆ, ⵠⵠΔⲆ, 304, 0],
		[1, "t", 3, 6, 304, 0],
		[1, "t", ᐃᐃΔΔ, ᐃΔᐃⲆᐃ, 304, ⵠⲆᐃ],
		[1, "t", ⵠⵠⲆⵠ, 8, 303, ᐃΔΔ],
		[1, "b", ⵠΔΔ, 8, 304, ⵠⲆᐃ],
		[1, "b", ⲆⲆΔΔ, 9, 304, 0],
		[ⲆΔᐃ, "b", 3, ΔΔΔⲆΔ, 303, 0],
		[ⵠΔΔ, "b", ᐃⵠⲆⵠ, ᐃᐃᐃΔᐃ, 304, ⵠⲆⵠ],
		[1, "t", 1, ⵠᐃΔΔⲆ, 303, Δⵠⵠ],
		[1, "t", ⵠΔⲆ, ⵠⵠΔⲆⵠ, 304, 0],
		[1, "t", ⵠⵠᐃ, ΔᐃΔᐃⵠ, 303, ΔᐃΔ],
		[1, "t", 3, ΔⲆⲆΔΔ, 303, ΔᐃΔ],
		[1, "t", 3, ⲆⵠᐃΔΔΔᐃ, 304, 0],
		[ⵠⵠᐃ, "t", ᐃⵠⲆⲆ, ᐃᐃΔⵠⵠ, 304, ΔᐃΔ],
		[1, "t", ΔΔⵠΔ, 11, 304, 0],
		[1, "t", 5, 14, 303, ⵠⲆⵠ],
		[ⲆⵠⲆ, "t", 5, 16, 304, 0],
		[ΔⵠⲆ, "t", Δᐃⵠᐃ, ⵠΔᐃⲆⵠ, 304, ⲆᐃⲆ],
		[1, "t", ⵠΔᐃⵠ, ᐃᐃΔᐃⲆ, 304, 0],
		[Δᐃᐃ, "t", ᐃⲆΔ, ΔΔⵠⵠΔ, 303, 0],
		[1, "b", Ⲇⵠᐃᐃ, ᐃᐃⵠᐃⵠ, 303, Δⵠⵠ],
		[1, "b", 0, ΔⵠΔΔᐃ, 303, 0],
		[ᐃⵠⵠ, "t", ⵠᐃⲆᐃ, ᐃⲆΔΔⲆ, 303, ᐃΔΔ],
		[1, "t", ΔᐃΔΔ, 18, 303, 0],
		[1, "t", ΔⲆᐃⲆ, 19, 303, 0],
		[1, "t", 1, ⲆΔⲆΔⵠ, 303, 0],
		[ⲆⵠⲆ, "b", 1, 21, 303, 0],
		[ᐃⲆⲆ, "t", ⲆⲆᐃⲆ, 22, 303, ᐃΔΔ],
		[ⲆΔᐃ, "t", 4, 23, 303, ΔᐃΔ],
		[1, "b", ⲆΔⲆΔ, 24, 303, ⲆᐃⲆ],
		[ⵠΔΔ, "t", 5, 25, 303, 0],
		[ⲆⵠⲆ, "t", 1, 26, 303, ⵠⲆⵠ],
		[1, "t", Δᐃᐃⵠ, 27, 303, ᐃΔΔ],
		[ⵠⵠᐃ, "t", ΔⵠⲆᐃ, 28, 303, 0],
		[1, "b", ⲆᐃⲆ, ⲆΔᐃΔΔ, 304, ⵠⲆⵠ],
		[1, "t", ΔⲆᐃⲆ, 19, 304, ⵠᐃΔ],
		[ⵠⵠᐃ, "t", 5, 20, 304, ΔᐃΔ],
		[1, "b", 2, 21, 304, 0],
		[ΔⵠⲆ, "t", 4, 22, 304, ΔᐃΔ],
		[1, "t", ⲆⲆΔΔ, 23, 304, ΔᐃΔ],
		[ᐃⲆⲆ, "t", Δᐃᐃ, 24, 304, ᐃΔΔ],
		[ᐃⲆⲆ, "t", 3, 25, 304, ⵠⲆᐃ],
		[ⵠΔⲆ, "t", 0, 27, 304, ΔᐃΔ],
		[1, "t", ⵠⵠΔⲆ, 26, 304, 0],
		[ᐃⲆⲆ, "b", 2, 28, 304, ⵠⲆᐃ],
		[1, "t", ᐃⲆΔ, 29, 304, ⵠᐃΔ],
		[ᐃⲆⲆ, "b", 1, 29, 303, ⵠⲆⵠ],
		[ⵠⵠᐃ, "b", 2, 30, 303, Δⵠⵠ],
		[ⵠΔⲆ, "t", ⲆⵠⲆᐃ, 31, 303, 0],
		[ⵠⵠᐃ, "t", 0, 32, 303, 0],
		[ⵠⵠᐃ, "t", 5, 33, 303, 0],
		[ᐃⲆⲆ, "t", 2, 34, 303, ΔᐃΔ],
		[ᐃⵠⵠ, "t", 4, 35, 303, 0],
		[1, "t", 1, 36, 303, ᐃΔΔ],
		[ⲆΔᐃ, "b", Ⲇⵠᐃᐃ, 37, 303, 0],
		[1, "t", ⲆⲆΔΔ, 32, 304, 0],
		[ᐃⲆⲆ, "t", 4, 30, 304, ⵠⲆⵠ],
		[1, "t", Δᐃᐃ, 31, 304, ⵠᐃΔ],
		[ⵠΔΔ, "b", 1, 33, 304, ΔᐃΔ],
		[ⲆΔᐃ, "t", ΔⲆᐃⲆ, 35, 304, 0],
		[ᐃⲆΔ, "t", 5, 34, 304, 0],
		[1, "b", 2, 36, 304, 0],
		[ⵠΔⲆ, "t", ΔΔⵠΔ, 37, 304, 0],
		[ⵠⵠᐃ, "t", 1, 38, 304, 0],
		[1, "b", ⵠⵠᐃ, 40, 303, 0],
		[ⲆΔᐃ, "t", ᐃΔᐃⲆ, 39, 303, Δⵠⵠ],
		[Δᐃᐃ, "t", ⵠᐃⲆᐃ, 42, 304, Δⵠⵠ],
		[1, "t", 5, 38, 303, ⲆᐃⲆ],
		[ᐃⲆΔ, "t", 5, 39, 304, 0],
		[1, "t", 5, 41, 303, ΔᐃΔ],
		[1, "t", 4, 41, 304, ΔᐃΔ],
		[ⵠΔΔ, "t", 4, 44, 303, 0],
		[1, "b", 2, 40, 304, 0],
		[ⲆⵠⲆ, "b", 2, 43, 303, 0],
		[1, "t", ΔⵠⲆ, 42, 303, 0],
		[1, "t", 1, 43, 304, ⵠⲆᐃ],
		[1, "t", 5, 44, 304, 0],
		[1, "b", 1, 45, 303, ⵠⲆⵠ],
		[1, "t", ᐃⵠΔⲆ, 45, 304, 0],
		[1, "t", ΔⲆᐃⲆ, 46, 303, 0],
		[ⵠΔΔ, "t", ⲆⵠⵠⲆ, 47, 303, 0],
		[1, "b", 0, 48, 303, 0],
		[ᐃⵠⵠ, "t", 5, 49, 303, ᐃΔΔ],
		[ⵠΔⲆ, "t", ⲆᐃᐃΔ, 50, 303, 0],
		[1, "t", ᐃⲆⲆ, 51, 303, 0],
		[1, "t", 4, 52, 303, ΔᐃΔ],
		[ⵠΔΔ, "t", 5, 46, 304, 0],
		[ⲆΔᐃ, "t", 2, 47, 304, 0],
		[1, "t", 5, 48, 304, ᐃΔΔ],
		[ᐃⵠⵠ, "t", 1, 49, 304, 0],
		[1, "t", 2, 50, 304, ⵠⲆᐃ],
		[ⵠΔᐃ, "b", Δᐃᐃ, 53, 303, ⲆᐃⲆ],
		[1, "b", ⲆⲆΔΔ, 51, 304, 0],
		[1, "t", ⵠⵠΔⲆ, 52, 304, ⵠⲆⵠ],
		[1, "t", Ⲇⵠᐃᐃ, 53, 304, 0],
		[ⲆΔᐃ, "b", 2, 54, 303, 0],
		[1, "t", ⵠΔΔΔ, 54, 304, ⵠⲆᐃ],
		[1, "t", ⵠⵠⲆⵠ, 55, 303, ⵠⲆᐃ],
		[ᐃⲆΔ, "t", 3, 56, 303, 0],
		[1, "t", ᐃⵠⲆⲆ, 57, 303, ΔᐃΔ],
		[1, "t", ⵠⵠⲆⵠ, 58, 303, 0],
		[ΔⵠⲆ, "b", 1, 55, 304, 0],
		[1, "t", ⲆⲆΔΔ, 56, 304, Δⵠⵠ],
		[1, "t", ⵠⲆᐃ, 57, 304, ᐃΔΔ],
		[1, "t", 3, 58, 304, Δⵠⵠ],
		[ᐃⲆΔ, "t", 3, 63, 304, 0],
		[ⵠΔⲆ, "t", 3, 59, 303, 0],
		[ΔⵠⲆ, "t", 4, 59, 304, 0],
		[1, "t", ⲆΔⲆⲆ, 60, 303, ⵠⲆⵠ],
		[ⲆΔᐃ, "t", ⵠᐃΔ, 60, 304, 0],
		[ⵠⵠᐃ, "t", ⵠᐃΔ, 66, 303, 0],
		[1, "t", 0, 70, 304, ⵠⲆⵠ],
		[ⲆΔᐃ, "t", Ⲇⵠᐃᐃ, 61, 304, ⵠⲆᐃ],
		[1, "t", 3, 67, 303, 0],
		[ᐃⲆΔ, "t", ᐃΔᐃⲆ, 73, 304, ⵠⲆᐃ],
		[1, "t", 3, 76, 303, ⵠⲆᐃ],
		[ᐃⲆⲆ, "t", 3, 78, 304, ⵠⲆⵠ],
		[ⵠΔΔ, "t", 1, 61, 303, ⵠᐃΔ],
		[1, "t", 1, 73, 303, 0],
		[1, "t", 1, 79, 303, 0],
		[1, "b", 2, 62, 304, ⵠᐃΔ],
		[1, "b", Δⵠᐃᐃ, 70, 303, 0],
		[ⲆΔᐃ, "t", 5, 62, 303, 0],
		[1, "t", 5, 68, 303, 0],
		[ⲆΔᐃ, "t", 5, 71, 304, ΔᐃΔ],
		[ᐃⲆⲆ, "t", 5, 77, 304, 0],
		[1, "t", ΔΔⵠΔ, 75, 303, 0],
		[ⵠΔᐃ, "t", 5, 64, 304, ⵠᐃΔ],
		[ⲆⵠⲆ, "t", ⵠⵠⲆⵠ, 65, 303, 0],
		[1, "t", ⵠⵠⲆⵠ, 80, 303, ΔᐃΔ],
		[1, "t", 1, 76, 304, Δⵠⵠ],
		[ⵠΔΔ, "t", 3, 63, 303, ΔᐃΔ],
		[1, "t", Δᐃⵠᐃ, 82, 304, 0],
		[1, "b", 2, 65, 304, 0],
		[1, "t", 1, 64, 303, ΔᐃΔ],
		[ᐃⲆΔ, "t", ΔⵠⲆ, 68, 304, ⵠⲆᐃ],
		[1, "t", ᐃⵠΔⲆ, 69, 304, ⵠⲆᐃ],
		[1, "t", 4, 69, 303, ΔᐃΔ],
		[1, "t", Δᐃⵠᐃ, 66, 304, ⵠᐃΔ],
		[1, "t", ⵠᐃΔ, 67, 304, 0],
		[1, "b", ⲆⲆΔΔ, 72, 304, 0],
		[ⵠΔΔ, "t", Δⵠⵠ, 71, 303, ⵠᐃΔ],
		[ΔⵠⲆ, "t", ΔⵠⲆᐃ, 72, 303, 0],
		[1, "t", 4, 74, 304, ΔᐃΔ],
		[1, "t", 2, 74, 303, 0],
		[ⲆΔᐃ, "t", ⲆΔⲆΔ, 75, 304, 0],
		[1, "t", ⵠΔⲆ, 77, 303, 0],
		[1, "t", 4, 78, 303, ⵠⲆⵠ],
		[1, "t", 4, 79, 304, ⵠⲆⵠ],
		[Δᐃᐃ, "t", Δⵠᐃᐃ, 80, 304, 0],
		[ⵠΔᐃ, "b", ᐃⵠⵠ, 81, 304, Δⵠⵠ],
		[1, "t", ⲆᐃᐃΔ, 81, 303, 0],
		[ⲆⵠⲆ, "t", Δᐃⵠᐃ, 82, 303, ⵠᐃΔ],
		[1, "t", 1, 83, 303, 0],
		[1, "b", ⲆᐃᐃΔ, 83, 304, ⵠⲆᐃ],
		[ⵠΔⲆ, "t", ⵠΔΔ, 84, 304, ⵠⲆⵠ],
		[1, "t", 4, 84, 303, ⲆᐃⲆ],
		[1, "t", ⵠⵠΔⲆ, 85, 304, 0],
		[ⵠΔⲆ, "t", ᐃⵠᐃⲆ, 85, 303, ΔᐃΔ],
		[ⵠΔⲆ, "b", ⲆⲆΔΔ, 86, 304, ⲆᐃⲆ],
		[1, "t", ⵠΔᐃ, 86, 303, 0],
		[1, "b", Ⲇⵠᐃᐃ, 87, 303, ⲆᐃⲆ],
		[1, "t", 4, 87, 304, 0],
		[Δᐃᐃ, "t", ᐃᐃΔΔ, 88, 303, 0],
		[1, "t", 0, 88, 304, ⵠᐃΔ],
		[ⵠⵠᐃ, "b", ⵠΔᐃ, 89, 303, 0],
		[1, "t", 3, 89, 304, 0],
		[1, "t", ᐃⵠⲆⵠ, 90, 303, ⵠᐃΔ],
		[ⵠΔΔ, "t", ΔᐃΔΔ, 90, 304, 0],
		[1, "t", ᐃⵠⲆⲆ, 91, 303, 0],
		[1, "t", ⵠᐃΔ, 91, 304, ᐃΔΔ],
		[1, "b", 2, 92, 303, 0],
		[ᐃⲆⲆ, "t", ⲆⵠⵠⲆ, 92, 304, ⲆᐃⲆ],
		[1, "t", ⲆΔⲆⲆ, 93, 303, ⵠⲆᐃ],
		[ΔⵠⲆ, "t", 0, 93, 304, ⵠᐃΔ],
		[ⲆⵠⲆ, "b", Ⲇⵠᐃᐃ, 94, 303, 0],
		[ⵠΔⲆ, "b", ⵠⲆⵠ, 94, 304, ⵠⲆᐃ],
		[ᐃⵠⵠ, "b", ⵠⲆⵠ, 95, 303, 0],
		[ⲆⵠⲆ, "t", Δⵠᐃᐃ, 95, 304, ⵠᐃΔ],
		[1, "f", 1, 5, 151, ᐃⲆⲆ],
		[ᐃⲆⲆ, "f", 2, ⲆΔΔΔ, 153, ⵠΔⲆ],
		[ᐃⵠⵠ, "f", ᐃΔΔ, ⵠⵠΔⲆ, 152, 1],
		[ⵠΔΔ, "f", 0, ⵠⵠⲆⵠ, 147, ⵠΔᐃ],
		[1, "f", 0, 5, 144, 1],
		[1, "f", 0, ⲆΔΔΔ, 140, 1],
		[ᐃⵠⵠ, "f", ᐃⵠⵠ, ⵠⵠⲆⵠ, 149, ΔⵠⲆ],
		[Δᐃᐃ, "f", 1, 5, 146, 1],
		[1, "f", 1, 5, 143, 1],
		[ᐃⵠⵠ, "f", 1, 5, 141, ⲆΔᐃ],
		[1, "f", 2, 5, 150, 1],
		[1, "f", 2, ⲆΔΔΔ, 148, ⲆⵠⲆ],
		[1, "f", ᐃⵠΔⲆ, ⲆΔΔΔ, 145, ΔⵠⲆ],
		[ⵠΔΔ, "f", ᐃⵠΔⲆ, ⵠΔΔΔ, 142, ΔⵠⲆ],
		[1, "f", ⲆⲆᐃⲆ, Δᐃⵠᐃ, 139, ᐃⲆⲆ],
		[1, "f", ᐃⵠΔⲆ, 5, 136, ΔⵠⲆ],
		[1, "f", ⲆⲆΔΔ, 5, 133, 1],
		[ᐃⵠⵠ, "f", Δⵠᐃᐃ, ⵠⵠⲆⵠ, 131, Δᐃᐃ],
		[ⵠΔⲆ, "f", 2, ⵠⵠⲆⵠ, 127, 1],
		[ⵠΔΔ, "f", ᐃⵠΔⲆ, 5, 125, 1],
		[1, "f", ΔⵠⲆ, ⵠⵠΔⲆ, 138, Δᐃᐃ],
		[ᐃⲆΔ, "f", 1, 5, 135, ⵠΔΔ],
		[ⵠΔⲆ, "f", 1, 5, 132, 1],
		[ᐃⲆⲆ, "f", 1, 5, 130, ⲆⵠⲆ],
		[1, "f", 1, 5, 128, ⵠⵠᐃ],
		[ⵠΔΔ, "f", 1, 5, 126, 1],
		[1, "f", ᐃⲆΔ, ⵠⵠΔⲆ, 124, 1],
		[1, "f", 0, 5, 129, 1],
		[1, "f", Δⵠⵠ, 5, 134, ⲆΔᐃ],
		[1, "f", ᐃΔΔ, 5, 137, 1],
		[ⵠΔᐃ, "f", 0, 5, 123, 1],
		[ⲆⵠⲆ, "f", 1, 5, 122, 1],
		[1, "f", 1, ⲆΔⲆⲆ, 120, 1],
		[1, "f", ⵠⵠᐃ, ⵠⵠΔⲆ, 117, ⲆΔᐃ],
		[ⲆΔᐃ, "f", 1, 5, 115, 1],
		[1, "f", Δᐃᐃ, ⵠⵠΔⲆ, 111, ΔⵠⲆ],
		[1, "f", ᐃⲆΔ, 5, 108, 1],
		[1, "f", 2, ⵠⵠⲆⵠ, 121, ⲆⵠⲆ],
		[ᐃⲆΔ, "f", 2, 5, 118, ᐃⲆⲆ],
		[ⵠΔΔ, "f", 2, 5, 116, ⵠⵠᐃ],
		[1, "f", 2, ⵠⵠⲆⵠ, 113, ⲆΔᐃ],
		[1, "f", Δⵠᐃᐃ, ⵠΔΔΔ, 110, 1],
		[Δᐃᐃ, "f", 0, 5, 119, 1],
		[1, "f", 0, ⵠⵠⲆⵠ, 114, ⵠΔᐃ],
		[1, "f", ⵠᐃΔ, 5, 112, 1],
		[1, "f", 0, 5, 109, 1],
		[ᐃⲆⲆ, "f", ⵠΔⲆ, Δᐃⵠᐃ, 106, ᐃⲆⲆ],
		[ᐃⵠⵠ, "f", 1, 5, 103, ⵠΔⲆ],
		[ⲆΔᐃ, "f", ⵠΔⲆ, ⵠⵠΔⲆ, 100, ⵠΔᐃ],
		[ᐃⲆΔ, "f", 1, 5, 97, ⲆⵠⲆ],
		[1, "f", 1, ΔΔⵠΔ, 95, ΔⵠⲆ],
		[1, "f", 2, 5, 107, 1],
		[1, "f", 2, 5, 105, ΔⵠⲆ],
		[1, "f", ΔⲆᐃⲆ, 5, 102, ᐃⲆΔ],
		[ᐃⵠⵠ, "f", 2, 5, 99, 1],
		[ᐃⲆⲆ, "f", 2, ⵠⵠⲆⵠ, 96, 1],
		[ΔⵠⲆ, "f", 2, 5, 94, ᐃⲆⲆ],
		[1, "f", ΔᐃΔ, 5, 104, 1],
		[1, "f", ⵠⲆᐃ, ⵠⵠⲆⵠ, 101, Δᐃᐃ],
		[ⵠⵠᐃ, "f", ⲆᐃⲆ, 5, 98, ⲆⵠⲆ],
		[ᐃⲆΔ, "f", ⵠⲆⵠ, ⵠΔΔΔ, 93, 1],
		[ᐃⵠⵠ, "f", ⵠΔⲆ, 5, 92, 1],
		[1, "f", 1, 5, 89, 1],
		[ⵠΔΔ, "f", 1, 5, 86, ᐃⵠⵠ],
		[1, "f", ⵠΔⲆ, Δᐃⵠᐃ, 83, Δᐃᐃ],
		[ⲆⵠⲆ, "f", ⵠΔⲆ, ⲆΔΔΔ, 80, ⵠΔΔ],
		[1, "f", 1, 5, 78, 1],
		[1, "f", ⲆⲆΔΔ, ⲆΔⲆⲆ, 90, ΔⵠⲆ],
		[1, "f", ⵠΔᐃⵠ, 5, 88, 1],
		[ᐃⵠⵠ, "f", 2, 5, 85, 1],
		[1, "f", 2, 5, 82, ⵠΔΔ],
		[1, "f", 2, 5, 79, 1],
		[1, "f", ⵠΔᐃⵠ, ⲆΔⲆⲆ, 77, 1],
		[1, "f", ΔⲆᐃⲆ, 5, 75, 1],
		[1, "f", 2, 5, 72, ⵠΔᐃ],
		[Δᐃᐃ, "f", ΔᐃΔ, 5, 91, 1],
		[1, "f", ⵠⲆᐃ, ⵠⵠⲆⵠ, 87, ᐃⵠⵠ],
		[Δᐃᐃ, "f", Δⵠⵠ, ⵠⵠΔⲆ, 84, 1],
		[ⲆⵠⲆ, "f", Δⵠⵠ, ⲆΔΔΔ, 81, ⲆⵠⲆ],
		[ᐃⲆⲆ, "f", 0, ⵠⵠΔⲆ, 76, 1],
		[ᐃⲆΔ, "f", ⲆᐃⲆ, Δᐃⵠᐃ, 74, ⲆΔᐃ],
		[1, "f", 1, 5, 73, 1],
		[ⵠΔΔ, "f", 1, ⲆΔΔΔ, 71, 1],
		[1, "f", Δᐃᐃ, ⲆΔΔΔ, 68, Δᐃᐃ],
		[1, "f", ⲆΔᐃ, ⲆΔⲆⲆ, 66, ⵠΔΔ],
		[1, "f", ᐃⲆⲆ, 5, 62, ⵠΔᐃ],
		[1, "f", 1, ⵠΔΔΔ, 59, 1],
		[ⵠⵠᐃ, "f", 1, ⵠⵠΔⲆ, 56, 1],
		[ᐃⵠⵠ, "f", 1, ⵠⵠⲆⵠ, 53, 1],
		[ⲆΔᐃ, "f", 1, 5, 50, 1],
		[1, "f", 2, ⵠΔΔΔ, 70, ⵠΔᐃ],
		[ⲆⵠⲆ, "f", 2, ΔΔⵠΔ, 67, ΔⵠⲆ],
		[ⵠΔⲆ, "f", ᐃⵠΔⲆ, 5, 65, ⵠⵠᐃ],
		[ⲆⵠⲆ, "f", Δⵠᐃᐃ, 5, 63, ᐃⵠⵠ],
		[1, "f", ⲆⲆΔΔ, Δᐃⵠᐃ, 60, ⵠΔⲆ],
		[1, "f", 2, 5, 57, ⲆΔᐃ],
		[1, "f", 2, Δᐃⵠᐃ, 54, 1],
		[1, "f", 2, ΔΔⵠΔ, 51, 1],
		[1, "f", ⵠⲆᐃ, 5, 69, 1],
		[ᐃⵠⵠ, "f", 0, 5, 64, 1],
		[1, "f", 0, 5, 61, Δᐃᐃ],
		[1, "f", ⵠᐃΔ, ⲆΔΔΔ, 58, ⲆΔᐃ],
		[1, "f", 0, 5, 55, ⵠΔΔ],
		[ᐃⵠⵠ, "f", ⵠᐃΔ, 5, 52, ᐃⲆⲆ],
		[ΔⵠⲆ, "f", 0, ⵠΔΔΔ, 49, ⵠΔⲆ],
		[ⵠΔΔ, "f", 0, 5, 45, 1],
		[1, "f", 0, 5, 42, 1],
		[ΔⵠⲆ, "f", 0, ⲆΔΔΔ, 38, ᐃⲆⲆ],
		[1, "f", Δⵠⵠ, 5, 34, ⵠΔⲆ],
		[1, "f", ΔᐃΔ, Δᐃⵠᐃ, 31, 1],
		[1, "f", ⲆΔᐃ, Δᐃⵠᐃ, 48, ⵠΔᐃ],
		[1, "f", ⲆΔᐃ, 5, 44, 1],
		[1, "f", 1, 5, 41, 1],
		[ⵠΔΔ, "f", ⵠⵠᐃ, 5, 37, 1],
		[1, "f", ⵠΔᐃ, ⵠⵠⲆⵠ, 33, 1],
		[ⵠΔᐃ, "f", 1, 5, 29, 1],
		[ᐃⵠⵠ, "f", 2, 5, 30, 1],
		[ⵠΔⲆ, "f", Δⵠᐃᐃ, ⲆΔⲆⲆ, 32, ⲆΔᐃ],
		[ΔⵠⲆ, "f", ⲆⲆᐃⲆ, 5, 35, 1],
		[1, "f", 2, 5, 39, 1],
		[ⲆΔᐃ, "f", ⲆⲆΔΔ, 5, 46, ⵠΔᐃ],
		[1, "f", Δⵠᐃᐃ, 5, 43, ᐃⵠⵠ],
		[ⵠΔΔ, "f", ⵠⵠᐃ, ⲆΔⲆⲆ, 47, 1],
		[ᐃⲆⲆ, "f", 0, 5, 40, ⵠΔⲆ],
		[1, "f", 0, 5, 36, ⵠΔⲆ],
		[ⵠⵠᐃ, "f", 0, 5, 28, 1],
		[1, "f", 1, 5, 25, ᐃⲆⲆ],
		[ΔⵠⲆ, "f", 1, 5, 22, ⲆΔᐃ],
		[ⵠΔⲆ, "f", 1, ⲆΔΔΔ, ⲆΔⲆΔᐃ, ᐃⵠⵠ],
		[1, "f", Δᐃᐃ, 5, ⲆⲆⵠᐃΔ, ⵠΔΔ],
		[ᐃⵠⵠ, "f", 1, ⵠⵠⲆⵠ, ΔⵠⵠΔᐃ, ΔⵠⲆ],
		[ⵠΔᐃ, "f", 1, 5, ⲆⵠΔΔⵠ, 1],
		[ᐃⲆⲆ, "f", 2, ⲆΔⲆⲆ, 27, 1],
		[1, "f", ⲆᐃᐃΔ, ⵠⵠⲆⵠ, 24, 1],
		[1, "f", 2, ΔΔⵠΔ, 21, 1],
		[1, "f", 2, Δᐃⵠᐃ, 19, 1],
		[ⲆⵠⲆ, "f", ΔⲆᐃⲆ, 5, ⵠᐃⵠΔΔ, 1],
		[1, "f", 2, 5, ⲆⵠΔⵠᐃ, ⵠⵠᐃ],
		[ⲆΔᐃ, "f", 2, 5, 9, 1],
		[ᐃⲆⲆ, "f", ᐃΔΔ, Δᐃⵠᐃ, 26, ⵠⵠᐃ],
		[1, "f", 0, ⵠⵠⲆⵠ, 23, ᐃⵠⵠ],
		[ᐃⵠⵠ, "f", 0, ΔΔⵠΔ, 14, 1],
		[ⵠⵠᐃ, "f", 0, 5, Ⲇⵠᐃⵠⵠ, ΔⵠⲆ],
		[1, "f", 0, 5, ᐃᐃᐃΔᐃ, ⵠΔΔ],
		[ⵠΔᐃ, "f", 1, 5, ᐃⵠᐃⲆⵠⲆⲆ, 1],
		[1, "f", 1, ⵠⵠΔⲆ, ⲆᐃⲆⵠⲆ, ᐃⵠⵠ],
		[1, "f", 0, ⵠΔΔΔ, ⵠΔⵠΔᐃ, 1],
		[Δᐃᐃ, "f", 1, 5, Δⵠᐃⵠⵠ, 1],
		[1, "f", ⵠⲆⵠ, 5, ⵠⵠΔⲆ, 1],
		[ⵠΔⲆ, "f", Δᐃᐃ, ⲆⵠᐃΔᐃ, Δᐃⵠᐃ, 1],
		[ⲆΔᐃ, "f", 2, 7, ⲆΔⲆⲆ, ⲆΔᐃ],
		[ᐃⲆⲆ, "f", 0, 8, 5, 1],
		[Δᐃᐃ, "f", 1, 9, ⲆΔⲆⲆ, 1],
		[1, "f", 1, ᐃⵠᐃⵠⵠ, Δᐃⵠᐃ, ᐃⵠⵠ],
		[ⵠΔⲆ, "f", 1, 15, ⵠΔΔΔ, ⵠΔⲆ],
		[1, "f", 1, ᐃᐃᐃΔᐃ, 5, 1],
		[ⲆⵠⲆ, "f", ⲆΔᐃ, 22, 5, 1],
		[ⵠⵠᐃ, "f", ⵠΔⲆ, 26, 5, ⵠⵠᐃ],
		[Δᐃᐃ, "f", ⲆⲆΔΔ, 10, 5, ᐃⲆⲆ],
		[1, "f", 2, ⵠᐃᐃΔΔ, ⵠΔΔΔ, 1],
		[1, "f", 2, ᐃⵠⵠⲆⲆ, 5, 1],
		[1, "f", Δⵠᐃᐃ, 18, 5, 1],
		[1, "f", ⲆᐃᐃΔ, 21, 5, 1],
		[ⵠⵠᐃ, "f", 2, 23, 5, ΔⵠⲆ],
		[1, "f", ⲆᐃᐃΔ, 25, 5, ⵠΔΔ],
		[1, "f", 2, 27, 5, 1],
		[1, "f", ⵠᐃΔ, 11, ⵠⵠΔⲆ, ⲆⵠⲆ],
		[1, "f", ΔᐃΔ, ⵠⲆⵠⲆΔᐃⵠ, 5, 1],
		[1, "f", ᐃΔΔ, 19, Δᐃⵠᐃ, 1],
		[ᐃⵠⵠ, "f", 0, 24, ⵠΔΔΔ, ⵠⵠᐃ],
		[1, "f", ⲆᐃⲆ, 28, Δᐃⵠᐃ, 1],
		[ⵠΔⲆ, "f", Δᐃᐃ, 20, 5, 1],
		[ⲆⵠⲆ, "f", 1, 29, 5, 1],
		[1, "f", 1, 32, ΔΔⵠΔ, ⵠΔᐃ],
		[1, "f", ᐃⲆⲆ, 35, 5, 1],
		[1, "f", ᐃⵠⵠ, 38, 5, ⲆⵠⲆ],
		[Δᐃᐃ, "f", 1, 41, ⲆΔⲆⲆ, 1],
		[ᐃⲆⲆ, "f", Δᐃᐃ, 45, 5, 1],
		[1, "f", 2, 30, 5, ᐃⲆΔ],
		[ⲆⵠⲆ, "f", 2, 33, 5, Δᐃᐃ],
		[1, "f", 2, 36, Δᐃⵠᐃ, ⵠΔΔ],
		[1, "f", 2, 39, 5, 1],
		[ⵠΔΔ, "f", 2, 42, ⵠⵠΔⲆ, ⲆⵠⲆ],
		[ᐃⲆΔ, "f", Δⵠᐃᐃ, 44, 5, 1],
		[ⵠΔᐃ, "f", 2, 46, 5, 1],
		[1, "f", 0, 43, 5, 1],
		[1, "f", 0, 40, 5, 1],
		[1, "f", 0, 37, ⵠⵠⲆⵠ, ⵠΔⲆ],
		[ᐃⲆⲆ, "f", ⵠᐃΔ, 34, 5, 1],
		[ΔⵠⲆ, "f", 0, 31, 5, 1],
		[ΔⵠⲆ, "f", ⲆᐃⲆ, 47, 5, Δᐃᐃ],
		[1, "f", ⵠΔⲆ, 48, 5, 1],
		[ⵠΔΔ, "f", ⵠΔⲆ, 51, ⵠⵠⲆⵠ, 1],
		[1, "f", ᐃⵠⵠ, 53, 5, ᐃⲆⲆ],
		[1, "f", Δᐃᐃ, 57, ⵠⵠΔⲆ, ⲆⵠⲆ],
		[ⵠΔΔ, "f", 1, 60, 5, Δᐃᐃ],
		[ⵠΔⲆ, "f", ΔⵠⲆ, 63, 5, 1],
		[ᐃⵠⵠ, "f", 1, 65, ΔΔⵠΔ, ⵠⵠᐃ],
		[1, "f", 2, 64, 5, 1],
		[1, "f", 2, 62, 5, ᐃⲆⲆ],
		[1, "f", ᐃⵠΔⲆ, 59, 5, ⲆⵠⲆ],
		[1, "f", ⲆⲆΔΔ, 56, ΔΔⵠΔ, ⵠΔᐃ],
		[ⲆΔᐃ, "f", ⵠΔᐃⵠ, 52, 5, 1],
		[ΔⵠⲆ, "f", 2, 49, ⲆΔⲆⲆ, 1],
		[1, "f", 2, 54, 5, 1],
		[ᐃⲆⲆ, "f", ⲆᐃⲆ, 50, 5, 1],
		[ⵠⵠᐃ, "f", ⲆᐃⲆ, 55, 5, 1],
		[ⵠⵠᐃ, "f", ⵠⲆⵠ, 58, 5, 1],
		[1, "f", Δⵠⵠ, 61, ⲆΔⲆⲆ, 1],
		[ⵠΔΔ, "f", 0, 66, 5, 1],
		[ⵠΔⲆ, "f", ⵠΔᐃ, 67, 5, ᐃⲆΔ],
		[ᐃⲆⲆ, "f", 1, 70, ⵠⵠΔⲆ, 1],
		[ⵠⵠᐃ, "f", ᐃⵠⵠ, 72, 5, 1],
		[ⵠΔΔ, "f", ᐃⵠⵠ, 75, ⵠⵠΔⲆ, 1],
		[ⲆΔᐃ, "f", 1, 79, Δᐃⵠᐃ, ⵠΔᐃ],
		[ⵠΔΔ, "f", ⲆᐃᐃΔ, 68, ⵠⵠΔⲆ, ᐃⲆΔ],
		[1, "f", ⲆᐃᐃΔ, 71, 5, 1],
		[ⵠΔΔ, "f", Δᐃᐃⵠ, 74, ⵠⵠΔⲆ, ΔⵠⲆ],
		[ᐃⲆΔ, "f", ⲆⲆᐃⲆ, 76, ⲆΔΔΔ, Δᐃᐃ],
		[1, "f", 2, 78, ⲆΔΔΔ, Δᐃᐃ],
		[1, "f", ⵠⲆⵠ, 69, ⲆΔΔΔ, 1],
		[ᐃⲆΔ, "f", 0, 73, ⵠⵠⲆⵠ, 1],
		[ΔⵠⲆ, "f", Δⵠⵠ, 77, 5, ᐃⲆΔ],
		[ΔⵠⲆ, "f", 0, 80, 5, 1],
		[1, "f", 1, 81, ⵠⵠΔⲆ, 1],
		[ᐃⲆΔ, "f", 1, 84, 5, 1],
		[1, "f", 1, 87, 5, Δᐃᐃ],
		[ᐃⲆⲆ, "f", ⵠΔᐃ, 89, ⵠⵠⲆⵠ, ⵠΔᐃ],
		[ⲆΔᐃ, "f", ᐃⲆⲆ, 92, 5, 1],
		[1, "f", 1, 94, 5, ⵠΔΔ],
		[1, "f", ⵠᐃΔ, 82, 5, 1],
		[1, "f", ⲆⲆΔΔ, 83, 5, 1],
		[1, "f", 2, 85, 5, 1],
		[1, "f", 2, 88, 5, ⵠⵠᐃ],
		[1, "f", ⲆⲆΔΔ, 90, ⵠⵠΔⲆ, ⵠΔΔ],
		[1, "f", 2, 93, 5, 1],
		[ᐃⵠⵠ, "f", ⲆᐃᐃΔ, 95, 5, ⵠⵠᐃ],
		[1, "f", 0, 86, ⲆΔⲆⲆ, 1],
		[Δᐃᐃ, "f", 0, 91, 5, 1],
		[ΔⵠⲆ, "f", ⲆⲆᐃⲆ, 6, 153, ΔⵠⲆ],
		[1, "f", 1, Δⵠᐃⵠⵠ, 152, ⵠΔᐃ],
		[Δᐃᐃ, "t", 1, 93, 301, ⵠⲆⵠ],
		[ⲆⵠⲆ, "t", 3, 94, 302, Δⵠⵠ],
		[1, "t", 5, 95, 302, 0],
		[1, "t", ⲆΔⲆⲆ, 93, 302, ΔᐃΔ],
		[1, "b", 3, 92, 302, 0],
		[1, "t", ⵠΔⲆ, 91, 302, ⵠᐃΔ],
		[ᐃⵠⵠ, "t", ⵠⵠΔⲆ, 90, 302, 0],
		[1, "b", ΔⲆᐃⲆ, 92, 301, Δⵠⵠ],
		[ᐃⵠⵠ, "t", ⲆΔᐃ, 91, 301, ⵠⲆᐃ],
		[1, "t", 2, 90, 301, ⵠⲆⵠ],
		[ᐃⵠⵠ, "b", 2, 89, 302, ⵠⲆⵠ],
		[1, "t", ᐃᐃΔΔ, 89, 301, ⲆᐃⲆ],
		[ⲆΔᐃ, "t", 1, 88, 302, ⵠⲆᐃ],
		[1, "t", ⲆᐃᐃΔ, 88, 301, ᐃΔΔ],
		[1, "t", ⵠᐃⲆᐃ, 87, 302, 0],
		[1, "t", 4, 87, 299, ᐃΔΔ],
		[1, "t", ΔᐃΔⵠ, 86, 302, ⲆᐃⲆ],
		[1, "t", 1, 85, 302, 0],
		[1, "t", ⵠⵠΔⲆ, 85, 301, Δⵠⵠ],
		[ⲆⵠⲆ, "b", 2, 84, 302, ⵠⲆⵠ],
		[1, "t", ⲆΔΔΔ, 83, 302, 0],
		[1, "t", 1, 82, 302, 0],
		[ⵠΔᐃ, "t", ⵠⵠΔⲆ, 81, 302, ⵠᐃΔ],
		[1, "t", 2, 80, 302, Δⵠⵠ],
		[ⵠⵠᐃ, "t", ⵠΔΔⵠ, 79, 302, ⲆᐃⲆ],
		[1, "t", ⲆᐃᐃΔ, 78, 302, ᐃΔΔ],
		[1, "b", 1, 77, 302, Δⵠⵠ],
		[1, "b", 2, 76, 302, 0],
		[1, "t", 2, 75, 302, Δⵠⵠ],
		[1, "t", ⲆⵠⵠⲆ, 74, 302, ᐃΔΔ],
		[ΔⵠⲆ, "b", ⲆΔᐃ, 73, 302, ⵠⲆⵠ],
		[Δᐃᐃ, "t", ⵠΔᐃⵠ, 72, 302, ⵠⲆᐃ],
		[ⵠⵠᐃ, "t", 4, 71, 302, ⵠⲆᐃ],
		[1, "b", 3, 70, 302, ᐃΔΔ],
		[ᐃⵠⵠ, "t", ⲆⵠⲆ, 69, 302, 0],
		[ᐃⲆΔ, "t", 2, 68, 302, ⲆᐃⲆ],
		[ⵠΔΔ, "t", 5, 67, 302, ⲆᐃⲆ],
		[ⲆΔᐃ, "b", 1, 66, 302, ᐃΔΔ],
		[1, "t", Δᐃᐃⵠ, 65, 302, 0],
		[1, "t", ΔᐃΔⵠ, 64, 302, 0],
		[1, "b", 3, 63, 302, 0],
		[1, "t", ⵠΔΔΔ, 62, 302, ⵠⲆⵠ],
		[1, "b", 1, 61, 302, ΔᐃΔ],
		[ⵠΔᐃ, "t", ᐃⲆᐃⲆ, 60, 302, 0],
		[Δᐃᐃ, "t", ᐃᐃΔΔ, 59, 302, 0],
		[1, "b", ᐃⵠΔⲆ, 58, 302, 0],
		[1, "t", 5, 57, 302, 0],
		[ᐃⵠⵠ, "t", 1, 56, 302, 0],
		[ⵠΔΔ, "t", 3, 55, 302, 0],
		[1, "t", 4, 54, 302, ΔᐃΔ],
		[1, "t", 1, 53, 302, 0],
		[1, "t", Δᐃⵠᐃ, 52, 302, ΔᐃΔ],
		[Δᐃᐃ, "t", ᐃⵠΔⲆ, 51, 302, 0],
		[1, "t", 4, 50, 302, 0],
		[1, "t", 2, 49, 302, 0],
		[1, "b", ᐃⵠⵠ, 48, 302, ⵠⲆᐃ],
		[ⵠΔᐃ, "t", ᐃⲆᐃⲆ, 47, 302, 0],
		[1, "t", 4, 46, 302, Δⵠⵠ],
		[ⵠΔΔ, "t", 1, 45, 302, 0],
		[1, "t", Δᐃᐃⵠ, 44, 302, ⲆᐃⲆ],
		[1, "t", ⵠⵠⲆⵠ, 43, 302, ΔᐃΔ],
		[ᐃⲆⲆ, "t", Δᐃᐃⵠ, 42, 302, 0],
		[ᐃⵠⵠ, "t", 1, 41, 302, 0],
		[ⵠΔΔ, "t", 4, 40, 302, 0],
		[1, "b", Δᐃᐃⵠ, 39, 302, Δⵠⵠ],
		[ⲆⵠⲆ, "t", 5, 38, 302, ΔᐃΔ],
		[1, "t", ᐃⵠⵠ, 37, 302, 0],
		[ΔⵠⲆ, "t", ΔⲆᐃⲆ, 36, 302, ⲆᐃⲆ],
		[1, "t", ⵠⵠⲆⵠ, 35, 302, ⵠᐃΔ],
		[ⵠΔⲆ, "t", 0, 34, 302, ⵠⲆᐃ],
		[1, "t", ΔⵠᐃⲆ, 33, 302, 0],
		[1, "t", ΔᐃΔⵠ, 32, 302, 0],
		[ⲆΔᐃ, "b", 1, 31, 302, 0],
		[ᐃⵠⵠ, "t", Δⵠᐃᐃ, 30, 302, ᐃΔΔ],
		[1, "t", ⲆⵠⲆᐃ, 29, 302, 0],
		[1, "t", ⵠΔᐃⵠ, 28, 302, ΔᐃΔ],
		[ⲆⵠⲆ, "t", ⲆΔΔΔ, 27, 302, 0],
		[ΔⵠⲆ, "b", ᐃⵠⲆⵠ, 26, 302, 0],
		[ⵠΔⲆ, "t", ⵠΔΔ, 25, 302, ⵠᐃΔ],
		[ᐃⲆΔ, "t", 4, 24, 302, 0],
		[ⵠΔΔ, "t", 2, 23, 302, 0],
		[1, "t", 1, 22, 302, ΔᐃΔ],
		[1, "t", 5, 21, 302, ⵠⲆᐃ],
		[Δᐃᐃ, "t", 2, 20, 302, 0],
		[1, "t", 4, 19, 302, ᐃΔΔ],
		[ⵠΔᐃ, "b", ⵠΔᐃ, ΔᐃΔⵠᐃ, 302, 0],
		[ⵠΔᐃ, "t", 5, 17, 302, 0],
		[1, "t", 3, Ⲇᐃⵠᐃᐃ, 302, ⵠᐃΔ],
		[ⲆⵠⲆ, "t", ⵠΔᐃ, ⵠⲆᐃⵠⵠ, 302, 0],
		[1, "t", ⲆΔΔΔ, ᐃⵠⲆⵠΔ, 302, 0],
		[1, "t", 3, 13, 302, ⵠⲆᐃ],
		[ᐃⲆⲆ, "t", ⲆⵠⵠⲆ, 12, 302, 0],
		[ΔⵠⲆ, "t", ΔⵠⲆ, ΔΔⵠⵠΔ, 302, ΔᐃΔ],
		[1, "t", 2, ΔⲆⲆΔΔ, 302, ᐃΔΔ],
		[1, "t", 4, ᐃᐃⵠᐃΔ, 302, ⵠᐃΔ],
		[1, "b", 3, ΔΔⲆⵠⵠ, 302, ᐃΔΔ],
		[1, "t", ⵠⵠⲆⵠ, 8, 302, ⲆᐃⲆ],
		[ᐃⲆΔ, "t", ⵠⵠⲆⵠ, ⲆⲆᐃⲆⵠ, 302, 0],
		[ⵠΔΔ, "b", 2, 6, 302, ⲆᐃⲆ],
		[Δᐃᐃ, "t", 1, ΔⵠⵠⵠΔ, 301, 0],
		[1, "t", ᐃⵠⲆⲆ, 6, 300, 0],
		[1, "t", 2, ᐃΔΔⵠΔ, 299, Δⵠⵠ],
		[1, "b", 0, ΔⵠⵠⵠΔ, 298, ΔᐃΔ],
		[1, "t", ⲆΔΔΔ, 6, 297, ΔᐃΔ],
		[1, "t", ⲆⲆΔΔ, 6, 296, ⵠᐃΔ],
		[ⵠΔΔ, "t", 0, 6, 295, 0],
		[ᐃⲆΔ, "b", 2, 6, 294, 0],
		[1, "t", Δᐃⵠᐃ, 6, 293, 0],
		[1, "t", 1, 6, 292, 0],
		[1, "b", 0, 6, 291, 0],
		[ΔⵠⲆ, "t", Δᐃᐃⵠ, 6, 290, 0],
		[ᐃⲆΔ, "t", 5, 6, 289, ΔᐃΔ],
		[ᐃⵠⵠ, "t", 1, ⲆⵠⵠⵠⲆ, 288, 0],
		[1, "t", 4, ᐃΔΔⵠΔ, 287, 0],
		[1, "t", ⵠΔᐃⵠ, 6, 286, Δⵠⵠ],
		[1, "t", 5, ΔΔᐃⵠⵠ, 285, ⲆᐃⲆ],
		[ⵠΔᐃ, "t", 2, ΔΔᐃⵠⵠ, 284, 0],
		[ᐃⵠⵠ, "b", 0, ᐃΔⵠⲆⵠ, 283, ΔᐃΔ],
		[ⲆⵠⲆ, "t", Δⵠᐃᐃ, 6, 282, 0],
		[ⵠΔⲆ, "t", 5, 6, 281, ⵠⲆⵠ],
		[1, "b", ⲆⲆᐃⲆ, 6, 280, ⵠⲆⵠ],
		[ⲆΔᐃ, "t", 5, 6, 279, 0],
		[ᐃⵠⵠ, "t", 1, 6, 278, Δⵠⵠ],
		[1, "t", ⲆⵠⲆᐃ, ᐃΔᐃⲆΔ, 277, 0],
		[ᐃⵠⵠ, "t", ΔⵠᐃⲆ, ᐃΔⵠⲆⵠ, 276, 0],
		[ᐃⲆΔ, "t", ⲆΔⲆⲆ, ⲆΔΔΔΔ, 275, ⵠᐃΔ],
		[1, "b", 0, 6, 274, 0],
		[ΔⵠⲆ, "t", 5, 6, 273, Δⵠⵠ],
		[Δᐃᐃ, "t", 1, 6, 272, 0],
		[1, "t", ᐃᐃΔΔ, ΔⵠⵠⵠΔ, 271, 0],
		[ⵠⵠᐃ, "b", 3, ᐃΔᐃⲆΔ, 270, 0],
		[1, "t", ⲆΔΔΔ, 6, 269, 0],
		[ⵠΔᐃ, "t", 1, 6, 268, ΔᐃΔ],
		[1, "t", ΔᐃΔΔ, 6, 267, 0],
		[1, "t", 1, Δⵠᐃⵠⵠ, 266, ⵠᐃΔ],
		[ᐃⲆⲆ, "t", 3, ⲆⵠⵠⵠⲆ, 265, 0],
		[Δᐃᐃ, "t", ᐃⵠⲆⲆ, ΔⲆⵠΔΔ, 264, 0],
		[1, "b", 2, ⲆⵠⵠⵠⲆ, 263, 0],
		[ᐃⲆΔ, "t", ΔΔⵠΔ, 6, 262, ⵠᐃΔ],
		[1, "t", Ⲇⵠᐃᐃ, 6, 261, ⵠᐃΔ],
		[1, "t", ⲆᐃⲆ, 6, 260, 0],
		[Δᐃᐃ, "t", 5, ΔΔᐃⵠⵠ, 259, 0],
		[1, "t", 1, ᐃⲆⵠⲆⲆ, 258, ⲆᐃⲆ],
		[ⲆΔᐃ, "t", 3, 6, 257, 0],
		[ⲆⵠⲆ, "t", 4, ⲆⵠᐃΔᐃ, ⵠᐃᐃᐃⲆᐃⲆ, 0],
		[ⵠΔⲆ, "t", ᐃΔᐃⲆ, ⲆΔΔΔΔ, 254, 0],
		[ⲆⵠⲆ, "t", ⵠⵠΔⲆ, ᐃⲆⵠⲆⲆ, 253, 0],
		[ᐃⲆΔ, "b", 2, 6, 252, ΔᐃΔ],
		[ΔⵠⲆ, "t", 5, 6, 251, ⵠᐃΔ],
		[ᐃⲆⲆ, "t", 1, 6, 250, ΔᐃΔ],
		[1, "t", 3, 6, 249, 0],
		[ᐃⲆΔ, "t", 4, ᐃⲆⵠⲆⲆ, 248, ⵠⲆᐃ],
		[1, "b", ⵠᐃⲆᐃ, ᐃΔΔⵠΔ, 247, ⵠⲆⵠ],
		[ᐃⲆΔ, "t", Δᐃⵠᐃ, ⲆⵠⵠⵠⲆ, 246, 0],
		[Δᐃᐃ, "t", 3, 6, 245, ⵠⲆⵠ],
		[1, "t", Δᐃⵠᐃ, ᐃΔⵠⲆⵠ, 244, 0],
		[1, "t", 0, Δⵠᐃⵠⵠ, 243, 0],
		[Δᐃᐃ, "t", 4, ΔⲆⵠΔΔ, 242, 0],
		[ᐃⲆⲆ, "t", ᐃⲆᐃⲆ, 6, 241, 0],
		[Δᐃᐃ, "t", 5, ᐃΔᐃⲆΔ, 240, 0],
		[ⵠΔⲆ, "b", 0, 6, 239, 0],
		[ⵠΔⲆ, "t", 3, 6, 238, 0],
		[ᐃⵠⵠ, "t", 4, 6, 237, ⵠⲆⵠ],
		[ⲆΔᐃ, "t", 1, ᐃΔⵠⲆⵠ, 236, ΔᐃΔ],
		[ᐃⵠⵠ, "t", ⲆΔⲆⲆ, 6, 235, 0],
		[ⲆΔᐃ, "b", 2, 6, 234, ⵠⲆⵠ],
		[1, "t", 2, ⲆⵠⵠⵠⲆ, 233, 0],
		[ΔⵠⲆ, "t", ΔᐃΔⵠ, 6, 232, Δⵠⵠ],
		[1, "b", ᐃⵠᐃⲆ, ᐃⲆⵠⲆⲆ, 231, 0],
		[ᐃⲆⲆ, "t", 5, 6, 230, Δⵠⵠ],
		[Δᐃᐃ, "t", ⵠⵠᐃ, 6, 229, ⲆᐃⲆ],
		[ᐃⲆⲆ, "t", ᐃⵠΔⲆ, ᐃΔΔⵠΔ, 228, ⲆᐃⲆ],
		[ⲆΔᐃ, "t", 5, ΔⲆⵠΔΔ, 227, 0],
		[ΔⵠⲆ, "b", ⲆᐃᐃΔ, 6, 226, 0],
		[ΔⵠⲆ, "t", 4, 6, 225, ΔᐃΔ],
		[ΔⵠⲆ, "t", 0, ᐃⲆⵠⲆⲆ, 224, 0],
		[ⵠⵠᐃ, "t", 2, 6, 223, Δⵠⵠ],
		[1, "t", 0, ᐃΔΔⵠΔ, 222, ⵠⲆⵠ],
		[1, "b", 2, ᐃⲆⵠⲆⲆ, 221, 0],
		[1, "t", ⵠΔΔⵠ, Δⵠᐃⵠⵠ, 220, ⲆᐃⲆ],
		[ⵠⵠᐃ, "b", ᐃⵠⲆⵠ, ᐃΔⵠⲆⵠ, 219, ᐃΔΔ],
		[ⵠΔⲆ, "t", ⵠⵠⲆⵠ, ᐃΔⵠⲆⵠ, 218, 0],
		[1, "t", ⵠᐃΔ, 6, 217, ⲆᐃⲆ],
		[ⵠΔᐃ, "t", ΔⵠⲆⲆ, 6, 216, 0],
		[ⵠⵠᐃ, "b", 0, ᐃΔᐃⲆΔ, 215, Δⵠⵠ],
		[ⵠΔᐃ, "t", ᐃⵠⲆⲆ, ΔΔᐃⵠⵠ, 214, 0],
		[ⲆΔᐃ, "t", ⲆᐃᐃΔ, ⲆΔΔΔΔ, 213, Δⵠⵠ],
		[ⵠΔᐃ, "t", 0, 6, 212, ⵠᐃΔ],
		[ᐃⲆΔ, "t", 2, 6, 211, 0],
		[1, "b", Ⲇⵠᐃᐃ, 6, 210, ⵠᐃΔ],
		[ⵠⵠᐃ, "t", 0, 6, 209, 0],
		[1, "t", 5, ΔⵠⵠⵠΔ, 207, 0],
		[ⵠΔΔ, "t", 2, Δⵠᐃⵠⵠ, 208, ⵠⲆⵠ],
		[ⵠΔⲆ, "t", ⵠⲆᐃ, ᐃΔᐃⲆΔ, 206, 0],
		[1, "t", ⲆⲆᐃⲆ, 6, 205, 0],
		[ᐃⵠⵠ, "t", 2, 6, 203, 0],
		[1, "b", ᐃΔΔ, 6, 202, 0],
		[ⵠΔᐃ, "t", ᐃⲆᐃⲆ, 6, 201, ⲆᐃⲆ],
		[1, "t", 4, Δⵠᐃⵠⵠ, 199, 0],
		[1, "t", 0, 6, 198, Δⵠⵠ],
		[ᐃⲆⲆ, "t", ⵠΔᐃⵠ, ΔⵠⵠⵠΔ, 197, 0],
		[ᐃⵠⵠ, "t", ΔᐃΔⵠ, ⲆⵠᐃΔᐃ, 196, 0],
		[ᐃⲆⲆ, "t", Δᐃᐃ, ⲆΔΔΔΔ, 195, ⵠᐃΔ],
		[ΔⵠⲆ, "t", 3, 6, 194, 0],
		[1, "t", 4, ΔⵠⵠⵠΔ, 192, 0],
		[1, "t", Δⵠᐃᐃ, 6, 191, ⲆᐃⲆ],
		[1, "b", 0, 6, 190, ᐃΔΔ],
		[ⲆⵠⲆ, "t", 3, ΔⵠⵠⵠΔ, 189, 0],
		[ⵠΔᐃ, "t", ΔⵠⲆᐃ, 6, 187, 0],
		[1, "b", ⵠᐃΔ, 6, 186, 0],
		[1, "t", ΔⲆᐃⲆ, 6, 185, 0],
		[1, "t", 4, ᐃΔᐃⲆΔ, 184, 0],
		[ⵠΔⲆ, "t", 2, ΔΔᐃⵠⵠ, 183, 0],
		[1, "t", ⵠⲆᐃ, ᐃΔᐃⲆΔ, 182, 0],
		[ⲆⵠⲆ, "b", 2, 6, 181, 0],
		[1, "t", 5, 6, 180, 0],
		[ⲆⵠⲆ, "t", 2, ᐃΔΔⵠΔ, 179, ⵠᐃΔ],
		[ΔⵠⲆ, "t", 0, ᐃΔᐃⲆΔ, 178, ΔᐃΔ],
		[1, "t", ⲆⲆΔΔ, Δᐃᐃⵠᐃ, 177, ⵠⲆᐃ],
		[1, "t", 4, Δⵠᐃⵠⵠ, 176, 0],
		[1, "b", ⲆᐃᐃΔ, 6, 175, ⵠⲆⵠ],
		[1, "t", 1, 6, 174, 0],
		[1, "t", 5, 6, 173, 0],
		[ⲆΔᐃ, "t", ᐃⵠΔⲆ, 6, 256, ⵠⲆⵠ],
		[ⵠΔΔ, "t", ᐃⵠⲆⲆ, ᐃΔᐃⲆΔ, 204, 0],
		[ⲆⵠⲆ, "t", 4, ⲆⵠⵠⵠⲆ, 200, 0],
		[1, "t", Δᐃᐃⵠ, Δⵠᐃⵠⵠ, 193, ⵠᐃΔ],
		[1, "t", 2, ᐃⲆⵠⲆⲆ, 188, 0],
		[ⲆΔᐃ, "f", 1, ΔⲆⵠΔΔ, 150, 1],
		[ⲆⵠⲆ, "f", 2, 6, 151, ᐃⵠⵠ],
		[ⵠΔᐃ, "f", Δⵠᐃᐃ, 6, 149, 1],
		[ⵠΔᐃ, "f", ⲆΔᐃ, 6, 148, ⵠⵠᐃ],
		[Δᐃᐃ, "f", ⲆᐃᐃΔ, 6, 147, ᐃⲆⲆ],
		[ⲆⵠⲆ, "f", Δᐃᐃⵠ, ⲆⵠᐃΔᐃ, 145, 1],
		[ΔⵠⲆ, "f", ΔⲆᐃⲆ, 6, 143, ⵠΔΔ],
		[ⵠΔⲆ, "f", 1, ΔⵠⵠⵠΔ, 146, ⵠΔⲆ],
		[ⵠΔᐃ, "f", 1, 6, 144, 1],
		[ⵠⵠᐃ, "f", 1, 6, 142, Δᐃᐃ],
		[ΔⵠⲆ, "f", ⲆⲆᐃⲆ, 6, 141, ⲆⵠⲆ],
		[1, "f", 2, Δⵠᐃⵠⵠ, 139, 1],
		[ⲆⵠⲆ, "f", 2, ᐃⲆⵠⲆⲆ, 137, ⲆⵠⲆ],
		[1, "f", 2, 6, 135, ⲆⵠⲆ],
		[1, "f", ΔⲆᐃⲆ, ᐃⲆⵠⲆⲆ, 133, 1],
		[1, "f", 1, 6, 140, 1],
		[1, "f", 1, 6, 138, 1],
		[ⲆⵠⲆ, "f", ⵠΔⲆ, ᐃΔΔⵠΔ, 136, ⵠΔᐃ],
		[1, "f", 1, ᐃΔΔⵠΔ, 134, ᐃⲆⲆ],
		[1, "f", ᐃⲆⲆ, Δᐃᐃⵠᐃ, 132, 1],
		[ᐃⵠⵠ, "f", 2, ᐃΔΔⵠΔ, 131, ᐃⵠⵠ],
		[ⵠΔΔ, "f", Δⵠᐃᐃ, ⲆⵠⵠⵠⲆ, 129, 1],
		[ᐃⲆΔ, "f", ⲆᐃᐃΔ, 6, 127, ⵠΔᐃ],
		[1, "f", ⲆⲆΔΔ, 6, 125, 1],
		[ⵠΔⲆ, "f", 2, 6, 123, 1],
		[ⵠⵠᐃ, "f", 2, 6, 121, ΔⵠⲆ],
		[ᐃⲆⲆ, "f", 1, ⲆⵠⵠⵠⲆ, 130, ⵠΔᐃ],
		[ᐃⲆΔ, "f", ᐃⲆΔ, ⲆⵠⵠⵠⲆ, 128, 1],
		[ⵠⵠᐃ, "f", 1, 6, 126, ΔⵠⲆ],
		[ᐃⲆⲆ, "f", ⲆⵠⲆ, 6, 124, ᐃⵠⵠ],
		[ΔⵠⲆ, "f", 1, 6, 122, ᐃⲆΔ],
		[ⵠΔⲆ, "f", ⲆⵠⲆ, 6, 120, ΔⵠⲆ],
		[1, "f", ΔⲆᐃⲆ, Δᐃᐃⵠᐃ, 119, ᐃⲆΔ],
		[ⵠΔⲆ, "f", Δᐃᐃⵠ, ᐃⲆⵠⲆⲆ, 117, ΔⵠⲆ],
		[ᐃⲆⲆ, "f", 2, 6, 115, ᐃⵠⵠ],
		[ⵠⵠᐃ, "f", 2, ᐃΔΔⵠΔ, 113, ⲆΔᐃ],
		[ΔⵠⲆ, "f", 2, 6, 111, ⵠⵠᐃ],
		[ᐃⵠⵠ, "f", ᐃⵠΔⲆ, ⲆⵠⵠⵠⲆ, 109, ⵠΔⲆ],
		[1, "f", 1, 6, 118, 1],
		[ΔⵠⲆ, "f", ⲆⵠⲆ, ᐃⲆⵠⲆⲆ, 116, 1],
		[ᐃⲆΔ, "f", ᐃⲆΔ, 6, 114, ᐃⲆΔ],
		[1, "f", 1, 6, 112, ⵠΔᐃ],
		[ᐃⲆΔ, "f", 1, Δⵠᐃⵠⵠ, 110, ⵠⵠᐃ],
		[ⵠΔΔ, "f", ᐃⲆΔ, ᐃΔᐃⲆΔ, 108, ΔⵠⲆ],
		[1, "f", 1, 6, 106, 1],
		[1, "f", 1, ⲆΔΔΔΔ, 104, ⵠⵠᐃ],
		[ⵠΔΔ, "f", ⲆⲆΔΔ, Δⵠᐃⵠⵠ, 107, 1],
		[1, "f", 2, 6, 105, ᐃⲆⲆ],
		[ᐃⲆΔ, "f", 2, 6, 103, ⲆⵠⲆ],
		[1, "f", ⲆⲆΔΔ, 6, 101, ᐃⲆΔ],
		[1, "f", ᐃⵠΔⲆ, 6, 99, 1],
		[1, "f", 2, 6, 97, ᐃⲆΔ],
		[ⵠⵠᐃ, "f", 2, ᐃΔⵠⲆⵠ, 95, 1],
		[ⵠΔᐃ, "f", ⵠΔᐃⵠ, ᐃΔΔⵠΔ, 93, 1],
		[ⵠⵠᐃ, "f", ΔⲆᐃⲆ, 6, 91, 1],
		[1, "f", 1, 6, 102, 1],
		[ⲆΔᐃ, "f", 1, ΔⲆⵠΔΔ, ᐃᐃⲆⵠΔ, ⲆΔᐃ],
		[Δᐃᐃ, "f", 1, ᐃΔᐃⲆΔ, 98, ⵠⵠᐃ],
		[1, "f", ⵠΔⲆ, 6, 96, 1],
		[ⵠΔΔ, "f", ᐃⲆⲆ, 6, 94, 1],
		[1, "f", ⲆΔᐃ, 6, 92, ᐃⲆⲆ],
		[ⵠΔΔ, "f", ΔⵠⲆ, 6, 90, ᐃⲆΔ],
		[1, "f", ⵠⵠᐃ, 6, 88, 1],
		[1, "f", ⲆΔᐃ, Δᐃᐃⵠᐃ, 86, 1],
		[Δᐃᐃ, "f", 2, 6, 89, 1],
		[ⲆⵠⲆ, "f", ⲆⲆᐃⲆ, ΔΔᐃⵠⵠ, 87, 1],
		[ᐃⵠⵠ, "f", ⲆᐃᐃΔ, 6, 85, ⲆⵠⲆ],
		[ⲆⵠⲆ, "f", Δᐃᐃⵠ, 6, 83, ΔⵠⲆ],
		[ⵠΔⲆ, "f", 2, ΔⲆⵠΔΔ, 81, ΔⵠⲆ],
		[1, "f", ᐃⵠΔⲆ, 6, 79, 1],
		[ⵠΔⲆ, "f", 2, ΔⲆⵠΔΔ, 77, 1],
		[1, "f", ⵠΔⲆ, 6, 84, ⵠΔΔ],
		[1, "f", ⵠⵠᐃ, 6, 82, 1],
		[1, "f", 1, Δⵠᐃⵠⵠ, 80, ᐃⵠⵠ],
		[1, "f", 1, ⲆⵠᐃΔᐃ, 78, 1],
		[1, "f", ΔⵠⲆ, 6, 76, ⵠΔⲆ],
		[ᐃⲆⲆ, "f", 2, 6, 75, ⲆΔᐃ],
		[1, "f", 2, ΔΔᐃⵠⵠ, 73, ᐃⲆⲆ],
		[ⵠΔΔ, "f", Δᐃᐃⵠ, ᐃΔΔⵠΔ, 71, 1],
		[1, "f", 2, 6, 69, ᐃⵠⵠ],
		[1, "f", ᐃⵠΔⲆ, 6, 67, ⵠΔⲆ],
		[ⵠΔᐃ, "f", Δᐃᐃⵠ, 6, 65, ⵠΔᐃ],
		[1, "f", ⵠΔⲆ, ΔⵠⵠⵠΔ, 74, Δᐃᐃ],
		[ᐃⲆΔ, "f", ᐃⲆΔ, 6, 72, 1],
		[1, "f", ⵠⵠᐃ, Δⵠᐃⵠⵠ, 70, 1],
		[1, "f", 1, 6, 68, ᐃⲆΔ],
		[1, "f", 1, Δᐃᐃⵠᐃ, 66, 1],
		[ⲆⵠⲆ, "f", 1, 6, 64, ⵠΔⲆ],
		[1, "f", 2, 6, 63, 1],
		[ⲆΔᐃ, "f", ⲆⲆᐃⲆ, 6, 61, 1],
		[ⵠΔᐃ, "f", 2, Δⵠᐃⵠⵠ, 59, 1],
		[ⲆΔᐃ, "f", 2, 6, 57, 1],
		[1, "f", ⲆⲆᐃⲆ, ΔⵠⵠⵠΔ, 55, ᐃⲆⲆ],
		[1, "f", ᐃⵠΔⲆ, ᐃΔΔⵠΔ, 53, 1],
		[1, "f", ᐃⵠΔⲆ, 6, 51, ᐃⵠⵠ],
		[ⵠⵠᐃ, "f", 1, ΔⲆⵠΔΔ, 62, ⲆΔᐃ],
		[1, "f", ⵠΔᐃ, 6, 60, ⵠⵠᐃ],
		[ⵠΔⲆ, "f", ᐃⵠⵠ, ᐃΔΔⵠΔ, 58, 1],
		[ΔⵠⲆ, "f", ᐃⲆΔ, ΔⲆⵠΔΔ, 56, ᐃⲆⲆ],
		[1, "f", ⵠΔⲆ, 6, 54, 1],
		[1, "f", Δᐃᐃ, 6, 52, 1],
		[ⵠⵠᐃ, "f", ⵠⵠᐃ, 6, 50, ᐃⲆⲆ],
		[ⵠⵠᐃ, "f", ⲆᐃᐃΔ, ⲆⵠⵠⵠⲆ, 49, 1],
		[1, "f", ΔⲆᐃⲆ, 6, 47, ᐃⵠⵠ],
		[1, "f", ⲆⲆΔΔ, ⲆΔΔΔΔ, 45, 1],
		[1, "f", 2, ᐃⲆⵠⲆⲆ, 43, 1],
		[1, "f", 2, ΔΔᐃⵠⵠ, 41, 1],
		[1, "f", ΔⲆᐃⲆ, 6, 39, 1],
		[1, "f", 1, 6, 48, 1],
		[ΔⵠⲆ, "f", ⵠΔⲆ, ᐃΔᐃⲆΔ, 46, ⵠⵠᐃ],
		[Δᐃᐃ, "f", ᐃⲆΔ, ᐃΔΔⵠΔ, 44, 1],
		[1, "f", 1, Δⵠᐃⵠⵠ, 42, ᐃⲆⲆ],
		[ΔⵠⲆ, "f", 1, 6, 40, ⵠΔΔ],
		[1, "f", 1, ⲆⵠⵠⵠⲆ, 38, ᐃⲆΔ],
		[ⵠΔⲆ, "f", 2, ⲆΔΔΔΔ, 37, 1],
		[ᐃⵠⵠ, "f", 2, ΔⵠⵠⵠΔ, 35, 1],
		[ⵠΔⲆ, "f", Δᐃᐃⵠ, ᐃΔⵠⲆⵠ, 33, ⲆⵠⲆ],
		[1, "f", ⲆⲆᐃⲆ, 6, 31, ᐃⵠⵠ],
		[ⲆΔᐃ, "f", ⲆᐃᐃΔ, 6, 29, 1],
		[1, "f", 2, 6, 27, 1],
		[ⵠΔⲆ, "f", 1, ΔⲆⵠΔΔ, 36, ⵠΔᐃ],
		[1, "f", 1, 6, 34, 1],
		[ᐃⵠⵠ, "f", 1, ΔⵠⵠⵠΔ, 32, ⲆⵠⲆ],
		[1, "f", ΔⵠⲆ, ΔΔᐃⵠⵠ, 30, 1],
		[ⲆΔᐃ, "f", Δᐃᐃ, 6, 28, ⵠΔᐃ],
		[ⵠΔⲆ, "f", ⵠΔΔ, ΔⵠⵠⵠΔ, 26, 1],
		[ᐃⲆΔ, "f", 2, 6, 25, 1],
		[1, "f", 2, Δᐃᐃⵠᐃ, 23, 1],
		[1, "f", ΔⲆᐃⲆ, Δᐃᐃⵠᐃ, 21, 1],
		[ΔⵠⲆ, "f", ⲆⲆᐃⲆ, ⲆΔΔΔΔ, 19, 1],
		[1, "f", 2, 6, 17, 1],
		[ΔⵠⲆ, "f", 2, Δᐃᐃⵠᐃ, ΔᐃⲆⲆⲆ, ⵠⵠᐃ],
		[ᐃⲆⲆ, "f", 1, ⲆⵠⵠⵠⲆ, 24, 1],
		[1, "f", 1, ⲆⵠⵠⵠⲆ, 22, 1],
		[1, "f", 1, 6, 20, 1],
		[1, "f", 1, ⲆΔΔΔΔ, 18, 1],
		[ⲆΔᐃ, "f", 1, 6, ⲆⲆⵠᐃΔ, 1],
		[Δᐃᐃ, "f", ᐃⵠΔⲆ, Δⵠᐃⵠⵠ, ⵠⵠᐃᐃΔ, 1],
		[ⵠΔⲆ, "f", Δᐃᐃⵠ, 6, ⵠⵠⵠⵠⵠ, ᐃⲆΔ],
		[1, "f", ΔⲆᐃⲆ, ᐃΔΔⵠΔ, ᐃᐃⵠᐃΔ, 1],
		[1, "f", 2, 6, ⲆⲆᐃⲆⵠ, 1],
		[Δᐃᐃ, "f", ⵠΔΔ, ᐃΔᐃⲆΔ, 14, ⵠⵠᐃ],
		[ⵠΔΔ, "f", Δᐃᐃ, ᐃΔⵠⲆⵠ, ⵠⲆⵠᐃⲆ, 1],
		[1, "f", 1, 6, ᐃᐃᐃⵠⵠ, 1],
		[Δᐃᐃ, "f", 1, 6, 8, Δᐃᐃ],
		[1, "f", ⵠΔᐃ, ᐃΔΔⵠΔ, 6, ⵠΔΔ],
		[1, "f", ᐃⲆⲆ, ⵠᐃⵠᐃⵠ, ⲆΔΔΔΔ, 1],
		[1, "f", ⵠΔᐃⵠ, ⵠᐃᐃⲆⵠ, ΔⲆⵠΔΔ, 1],
		[ⵠΔᐃ, "f", ⲆⲆᐃⲆ, 9, ⲆⵠᐃΔᐃ, ⵠΔΔ],
		[1, "f", ⲆⲆᐃⲆ, ⵠⵠᐃΔΔ, 6, 1],
		[1, "f", 2, ⵠΔⵠᐃⵠ, ⲆΔΔΔΔ, Δᐃᐃ],
		[ᐃⲆΔ, "f", ᐃⵠΔⲆ, 15, 6, 1],
		[1, "f", ⵠΔΔ, ΔⲆⲆΔΔ, ΔⵠⵠⵠΔ, 1],
		[1, "f", ⵠΔⲆ, 12, 6, ⲆΔᐃ],
		[ⲆΔᐃ, "f", 1, 14, Δⵠᐃⵠⵠ, ⲆⵠⲆ],
		[ⵠΔΔ, "f", ΔⵠⲆ, 16, ΔⵠⵠⵠΔ, Δᐃᐃ],
		[ΔⵠⲆ, "f", ⵠⵠᐃ, ⲆᐃΔΔⵠ, 6, ⲆΔᐃ],
		[1, "f", ᐃⲆΔ, ⲆⵠⵠΔⵠ, Δᐃᐃⵠᐃ, ᐃⲆΔ],
		[ⵠΔᐃ, "f", ᐃⲆⲆ, 22, ⲆⵠᐃΔᐃ, 1],
		[1, "f", ⵠΔⲆ, 24, 6, 1],
		[ᐃⲆⲆ, "f", ⵠⵠᐃ, 26, ΔΔᐃⵠⵠ, Δᐃᐃ],
		[1, "f", Δᐃᐃⵠ, ⲆΔⲆⵠᐃ, 6, 1],
		[1, "f", 2, 19, 6, 1],
		[ᐃⵠⵠ, "f", 2, 21, ᐃΔᐃⲆΔ, 1],
		[1, "f", 2, 23, ΔⲆⵠΔΔ, 1],
		[1, "f", 2, 25, ΔⲆⵠΔΔ, 1],
		[1, "f", 2, 27, 6, ⵠΔⲆ],
		[ᐃⲆⲆ, "f", 2, 29, 6, ⵠΔᐃ],
		[1, "f", 2, 31, ᐃΔⵠⲆⵠ, ⵠΔⲆ],
		[ΔⵠⲆ, "f", 2, 33, 6, 1],
		[1, "f", 1, 28, 6, ⵠΔⲆ],
		[1, "f", Δᐃᐃ, 30, ᐃΔⵠⲆⵠ, ⲆⵠⲆ],
		[1, "f", ᐃⲆⲆ, 32, ΔΔᐃⵠⵠ, 1],
		[ⵠΔᐃ, "f", ᐃⲆΔ, 34, 6, 1],
		[1, "f", 2, 67, ᐃⲆⵠⲆⲆ, ⵠΔᐃ],
		[1, "f", 2, 69, Δᐃᐃⵠᐃ, ⵠΔΔ],
		[ΔⵠⲆ, "f", ⲆⲆᐃⲆ, 71, 6, ⵠⵠᐃ],
		[ⵠΔⲆ, "f", 2, 73, ᐃⲆⵠⲆⲆ, 1],
		[ⵠⵠᐃ, "f", 2, 75, 6, ⲆΔᐃ],
		[ᐃⲆΔ, "f", 1, 68, ⲆⵠᐃΔᐃ, 1],
		[ᐃⲆⲆ, "f", ⵠΔᐃ, 70, 6, ⵠΔⲆ],
		[1, "f", 1, 72, ΔΔᐃⵠⵠ, 1],
		[ᐃⲆⲆ, "f", ⵠⵠᐃ, 74, ⲆⵠᐃΔᐃ, 1],
		[1, "f", 1, 76, ᐃΔⵠⲆⵠ, 1],
		[1, "f", 2, 77, ΔⵠⵠⵠΔ, ⵠΔᐃ],
		[1, "f", 2, 79, 6, ᐃⲆⲆ],
		[1, "f", 2, 81, 6, Δᐃᐃ],
		[1, "f", ⲆⲆᐃⲆ, 83, 6, 1],
		[ⲆΔᐃ, "f", 2, 85, ᐃΔΔⵠΔ, 1],
		[ⵠΔᐃ, "f", 1, 78, 6, 1],
		[1, "f", 1, 80, 6, ⵠΔΔ],
		[1, "f", ΔⵠⲆ, 82, 6, ⵠΔᐃ],
		[ᐃⵠⵠ, "f", 1, 84, 6, 1],
		[ⵠΔΔ, "f", ᐃⲆΔ, 86, 6, 1],
		[ⲆΔᐃ, "f", 2, 87, ᐃⲆⵠⲆⲆ, 1],
		[ⵠΔᐃ, "f", 2, 89, ΔⵠⵠⵠΔ, 1],
		[1, "f", 2, 91, 6, ΔⵠⲆ],
		[1, "f", 2, 93, 6, ⲆⵠⲆ],
		[ⲆⵠⲆ, "f", ⵠΔᐃ, 88, ⲆⵠᐃΔᐃ, ⵠⵠᐃ],
		[ᐃⵠⵠ, "f", 1, 90, ⲆⵠᐃΔᐃ, 1],
		[ΔⵠⲆ, "f", ᐃⵠⵠ, 92, ⲆΔΔΔΔ, ⵠⵠᐃ],
		[ⲆΔᐃ, "f", 1, 94, ᐃΔⵠⲆⵠ, 1],
		[1, "f", ΔⲆᐃⲆ, 95, ⲆⵠⵠⵠⲆ, 1],
		[1, "f", ᐃⲆΔ, 95, ΔΔⲆⲆⲆ, ΔⵠⲆ],
		[1, "f", 1, 83, 7, 1],
		[1, "f", ⵠΔᐃ, 81, ΔΔⲆⲆⲆ, 1],
		[ⲆⵠⲆ, "f", 1, 79, 7, 1],
		[1, "f", ⵠΔᐃ, 77, ΔΔⲆⲆⲆ, 1],
		[1, "f", 1, 75, 7, 1],
		[ⲆⵠⲆ, "f", 1, 73, 7, Δᐃᐃ],
		[ᐃⲆΔ, "f", ᐃⲆΔ, 71, ⵠⲆⵠⲆΔ, ⲆⵠⲆ],
		[1, "f", 1, 69, 7, 1],
		[1, "f", ᐃⲆΔ, 33, ᐃⲆᐃⲆⲆ, 1],
		[1, "f", 1, 31, ⲆⵠΔⲆⵠ, ⲆⵠⲆ],
		[1, "f", ᐃⲆⲆ, 29, 7, ⵠΔᐃ],
		[1, "f", 1, 27, 7, ᐃⲆΔ],
		[ΔⵠⲆ, "f", ᐃⲆΔ, 25, 7, 1],
		[ⵠΔΔ, "f", ⵠΔΔ, 23, ⵠᐃᐃⲆⵠ, 1],
		[ᐃⲆΔ, "f", 1, 21, 7, 1],
		[Δᐃᐃ, "f", ⲆⵠⲆ, ᐃᐃΔΔᐃ, 7, ⵠΔΔ],
		[1, "f", ⵠΔᐃ, ΔⲆⲆⲆⵠ, ΔΔⲆⲆⲆ, 1],
		[1, "f", ⵠΔⲆ, 15, 7, ᐃⲆⲆ],
		[ⵠΔᐃ, "f", ⲆΔᐃ, 13, 7, ⲆⵠⲆ],
		[ⵠΔᐃ, "f", 1, ΔᐃΔⵠⲆ, 7, Δᐃᐃ],
		[1, "f", 1, 9, 7, ⲆⵠⲆ],
		[1, "f", ⲆⵠⲆ, ⵠⲆⵠⲆΔ, ⲆΔⲆᐃⲆ, ⲆⵠⲆ],
		[1, "s", ᐃΔΔ, ΔΔⲆⲆⲆ, ⲆᐃⲆΔⲆ, ΔⵠⲆ],
		[ⲆΔᐃ, "t", ΔᐃΔΔ, ⵠΔⵠΔᐃ, 174, ΔᐃΔ],
		[1, "t", 5, 7, 175, 0],
		[1, "t", 4, 7, 176, 0],
		[ΔⵠⲆ, "b", ⲆⲆᐃⲆ, ⵠⲆⵠⲆΔ, 177, ⲆᐃⲆ],
		[Δᐃᐃ, "t", ᐃⵠⲆⵠ, 94, 301, Δⵠⵠ],
		[1, "b", 3, 95, 301, 0],
		[ⲆΔᐃ, "t", ΔⵠⲆᐃ, 96, 301, ⲆᐃⲆ],
		[Δᐃᐃ, "t", ⲆⵠⲆ, 97, 301, 0],
		[1, "t", 2, 98, 301, Δⵠⵠ],
		[ᐃⵠⵠ, "t", 4, 99, 301, ⵠⲆⵠ],
		[1, "t", 2, 100, 301, 0],
		[1, "t", 4, 96, 304, 0],
		[1, "t", 2, 96, 302, ᐃΔΔ],
		[1, "t", ᐃⵠΔⲆ, 97, 304, ⵠⲆᐃ],
		[ⲆⵠⲆ, "t", 2, 96, 303, 0],
		[1, "t", 5, 97, 303, ⵠⲆⵠ],
		[ⵠⵠᐃ, "t", 5, 98, 304, 0],
		[ⲆΔᐃ, "b", ᐃⵠΔⲆ, 97, 302, Δⵠⵠ],
		[1, "b", ΔⲆᐃⲆ, 99, 304, ΔᐃΔ],
		[1, "t", 1, 98, 303, 0],
		[1, "t", 4, 98, 302, 0],
		[ⲆⵠⲆ, "t", ΔᐃΔΔ, 99, 303, ⵠᐃΔ],
		[1, "t", 4, 100, 304, 0],
		[1, "t", ⲆΔⲆⲆ, 99, 302, ⵠⲆⵠ],
		[1, "t", ⵠⵠⲆⵠ, 101, 303, 0],
		[ᐃⲆⲆ, "t", 2, 100, 303, 0],
		[1, "t", ΔᐃΔ, ⵠᐃΔⲆᐃ, 302, 0],
		[1, "t", 0, 101, 304, ⵠᐃΔ],
		[ⲆΔᐃ, "t", ⲆⵠⲆᐃ, 102, 304, ⲆᐃⲆ],
		[ⵠΔⲆ, "f", ⵠᐃΔ, 94, 7, ᐃⲆⲆ],
		[1, "f", ⵠⵠᐃ, 93, ⵠΔⵠΔᐃ, ᐃⵠⵠ],
		[1, "f", 1, 92, 7, 1],
		[ⵠΔΔ, "f", 0, 91, 7, 1],
		[1, "f", 1, 90, ⲆⲆᐃⲆⵠ, ⲆⵠⲆ],
		[1, "f", 1, 89, ΔΔⲆⲆⲆ, ᐃⵠⵠ],
		[ᐃⵠⵠ, "f", ⲆᐃⲆ, 88, ᐃⲆᐃⲆⲆ, 1],
		[1, "f", Δᐃᐃ, 87, ⵠᐃᐃⲆⵠ, 1],
		[1, "f", 1, 86, 7, ᐃⵠⵠ],
		[1, "f", ⵠΔᐃ, 85, 7, 1],
		[ⵠΔΔ, "f", 0, 84, 7, ᐃⲆⲆ],
		[ⲆⵠⲆ, "f", ΔⵠⲆ, 82, 7, 1],
		[1, "f", Δⵠⵠ, 80, 7, ᐃⵠⵠ],
		[ᐃⲆⲆ, "f", ᐃⲆⲆ, 78, 7, ⵠΔⲆ],
		[ᐃⵠⵠ, "f", Δⵠⵠ, 76, 7, ᐃⲆΔ],
		[ⵠΔΔ, "f", ⲆⵠⲆ, 74, ᐃΔᐃⲆᐃ, ⵠΔⲆ],
		[ⵠΔⲆ, "f", 0, 72, ⵠΔⵠΔᐃ, 1],
		[1, "f", Δⵠⵠ, 70, 7, ⵠⵠᐃ],
		[ⵠΔⲆ, "f", ᐃⵠⵠ, 68, ⲆⵠΔⲆⵠ, ⵠΔΔ],
		[Δᐃᐃ, "f", ⲆⵠⲆ, 32, ⵠⲆⵠⲆΔ, ⵠΔΔ],
		[ᐃⲆΔ, "f", ⵠⲆⵠ, 30, ΔΔⲆⲆⲆ, 1],
		[1, "f", 1, 28, 7, 1],
		[1, "f", ⵠⲆᐃ, 26, ⲆΔⲆᐃⲆ, 1],
		[ⲆⵠⲆ, "f", 1, 24, ⲆⵠΔⲆⵠ, ᐃⲆΔ],
		[1, "f", 0, 22, ᐃⲆᐃⲆⲆ, ᐃⲆⲆ],
		[ⵠΔΔ, "f", ⵠΔⲆ, ⲆⲆᐃᐃᐃ, ⲆΔⲆᐃⲆ, ⲆΔᐃ],
		[1, "f", Δⵠⵠ, 18, 7, ⲆΔᐃ],
		[1, "f", 1, ᐃⵠⵠⲆⲆ, ⵠᐃᐃⲆⵠ, ⵠⵠᐃ],
		[1, "f", 0, ⲆⲆᐃⵠΔⵠⵠ, ⲆⵠΔⲆⵠ, ⵠΔᐃ],
		[ⵠⵠᐃ, "f", ⵠΔⲆ, 12, ΔΔⲆⲆⲆ, ⵠΔᐃ],
		[ⵠΔⲆ, "f", ⵠᐃΔ, ⲆΔⲆᐃⵠ, ⲆⲆᐃⲆⵠ, 1],
		[ᐃⵠⵠ, "f", ⲆΔᐃ, 8, 7, 1],
		[1, "s", ᐃⵠⵠ, ⲆΔⲆᐃⲆ, ᐃᐃⵠᐃΔ, Δᐃᐃ],
		[1, "f", ⲆᐃⲆ, 95, 152, ⵠⵠᐃ],
		[ⵠΔⲆ, "f", ᐃⲆⲆ, 95, 151, ⵠΔΔ],
		[1, "f", 0, 95, ⲆΔⵠⵠΔⵠᐃ, 1],
		[ⵠΔⲆ, "f", 1, 95, ᐃⵠᐃⵠⵠ, ⲆⵠⲆ],
		[1, "f", ᐃⵠⵠ, 95, ᐃⵠⲆⵠΔ, ⵠΔⲆ],
		[ⲆΔᐃ, "f", ⲆΔᐃ, 95, ᐃΔⵠⲆⲆ, 1],
		[Δᐃᐃ, "f", 0, 95, 15, ᐃⲆⲆ],
		[ⵠΔⲆ, "f", ΔᐃΔ, 95, 20, ⵠⵠᐃ],
		[Δᐃᐃ, "f", 1, 95, 21, 1],
		[ΔⵠⲆ, "f", 1, 95, 26, 1],
		[ⵠΔΔ, "f", 1, 95, 37, 1],
		[1, "f", ᐃΔΔ, 95, 44, 1],
		[1, "f", ᐃⲆΔ, 95, 50, ⲆΔᐃ],
		[ΔⵠⲆ, "f", ⵠΔⲆ, 95, 52, 1],
		[1, "f", 0, 95, 53, ᐃⲆΔ],
		[1, "f", ⲆⵠⲆ, 95, 54, 1],
		[Δᐃᐃ, "f", ⵠΔΔ, 95, 62, 1],
		[ᐃⵠⵠ, "f", ⵠⲆᐃ, 95, 55, ᐃⵠⵠ],
		[1, "f", ᐃⵠⵠ, 95, 64, ⵠΔⲆ],
		[1, "f", 0, 95, 58, ⲆⵠⲆ],
		[Δᐃᐃ, "f", 0, 95, 61, 1],
		[1, "f", 0, 95, 68, ⵠΔΔ],
		[ᐃⲆⲆ, "f", 0, 95, 72, 1],
		[1, "f", 0, 95, 78, 1],
		[1, "f", 1, 95, 115, ⲆΔᐃ],
		[ⵠΔⲆ, "f", 1, 95, 117, ᐃⲆⲆ],
		[ⲆΔᐃ, "f", ᐃⲆⲆ, 95, 128, ᐃⲆΔ],
		[1, "f", 0, 95, 85, 1],
		[1, "f", 0, 95, 91, 1],
		[ᐃⲆΔ, "f", 0, 95, 95, ⵠⵠᐃ],
		[ᐃⲆΔ, "f", ⵠⲆᐃ, 95, 114, 1],
		[1, "f", 2, 95, 113, ΔⵠⲆ],
		[ⵠΔΔ, "f", ⵠΔᐃ, 95, 119, ᐃⲆΔ],
		[ⵠΔⲆ, "f", 0, 95, 120, Δᐃᐃ],
		[1, "f", 1, 95, 121, 1],
		[1, "f", 0, 95, 127, ᐃⲆⲆ],
		[1, "f", Δᐃᐃ, 95, 130, 1],
		[ᐃⵠⵠ, "f", 0, 95, 131, 1],
		[1, "f", ᐃⲆΔ, 95, 132, ᐃⵠⵠ],
		[1, "f", Δᐃᐃ, 95, 136, ⵠΔΔ],
		[ⵠΔᐃ, "f", ᐃΔΔ, 95, 137, ⲆΔᐃ],
		[1, "f", ⲆᐃⲆ, 95, 143, ⵠΔᐃ],
		[1, "f", 0, 95, 147, 1],
		[1, "f", 1, 95, 138, ΔⵠⲆ],
		[1, "f", ᐃⵠⵠ, 95, 144, 1],
		[1, "f", 1, 95, ᐃⵠᐃᐃᐃ, 1],
		[Δᐃᐃ, "f", 0, 95, ⲆⲆΔᐃΔ, 1],
		[ⵠΔᐃ, "f", ⵠΔⲆ, 95, ⲆᐃⲆᐃⲆ, 1],
		[ⵠΔᐃ, "f", ⵠⲆᐃ, 95, 13, ᐃⲆΔ],
		[1, "f", ⲆⵠⲆ, 95, ΔⵠΔΔᐃ, 1],
		[ⵠΔᐃ, "f", ⵠΔⲆ, 95, ⲆΔⲆⵠᐃ, ⲆΔᐃ],
		[ΔⵠⲆ, "f", 0, 95, ⲆΔᐃΔΔ, 1],
		[Δᐃᐃ, "f", 1, 95, 45, 1],
		[1, "f", 0, 95, 51, 1],
		[1, "f", 1, 95, 56, ⲆⵠⲆ],
		[1, "f", ⵠΔΔ, 95, 57, ᐃⲆΔ],
		[ⵠΔⲆ, "f", 1, 95, 59, 1],
		[ᐃⵠⵠ, "f", ᐃⲆΔ, 95, 60, 1],
		[ᐃⲆΔ, "f", 1, 95, 63, 1],
		[1, "f", ΔᐃΔ, 95, 65, 1],
		[ⵠΔΔ, "f", 1, 95, 66, ⵠΔᐃ],
		[1, "f", ΔⵠⲆ, 95, 67, ⵠΔᐃ],
		[1, "f", 1, 95, 69, 1],
		[1, "f", 1, 95, 70, 1],
		[Δᐃᐃ, "f", ⵠⲆⵠ, 95, 71, Δᐃᐃ],
		[1, "f", ⵠΔᐃ, 95, 73, ⵠΔᐃ],
		[1, "f", 1, 95, 74, ⵠΔⲆ],
		[ⲆΔᐃ, "f", 0, 95, 75, ΔⵠⲆ],
		[1, "f", ⵠⵠᐃ, 95, 76, 1],
		[ⲆⵠⲆ, "f", Δᐃᐃ, 95, 77, ᐃⲆⲆ],
		[1, "f", 1, 95, 79, ⲆⵠⲆ],
		[1, "f", 1, 95, 80, ⵠΔᐃ],
		[1, "f", ⲆᐃⲆ, 95, 81, ᐃⵠⵠ],
		[1, "f", 1, 95, 82, ⵠΔⲆ],
		[ⵠΔⲆ, "f", 0, 95, 83, ⵠΔΔ],
		[1, "f", ⵠΔᐃ, 95, 84, ᐃⲆⲆ],
		[ⵠΔⲆ, "f", 1, 95, 86, 1],
		[1, "f", ⲆⵠⲆ, 95, 88, ⵠⵠᐃ],
		[1, "f", ᐃΔΔ, 95, 87, ⵠΔⲆ],
		[1, "f", 1, 95, 89, 1],
		[ⵠΔΔ, "f", ᐃⲆΔ, 95, 90, 1],
		[ⵠΔᐃ, "f", ⵠΔΔ, 95, 92, ᐃⵠⵠ],
		[ᐃⵠⵠ, "f", 1, 95, 93, ⲆΔᐃ],
		[1, "f", 1, 95, 94, ᐃⲆΔ],
		[ⵠΔᐃ, "f", ⲆⵠⲆ, 95, 96, ΔⵠⲆ],
		[ⲆⵠⲆ, "f", 1, 95, 97, 1],
		[ⵠΔᐃ, "f", ΔᐃΔ, 95, 98, ⵠΔΔ],
		[1, "f", ᐃⲆⲆ, 95, 99, 1],
		[ᐃⲆⲆ, "f", ⲆⵠⲆ, 95, ⵠᐃΔⲆᐃ, 1],
		[1, "f", ΔᐃΔ, 95, 101, 1],
		[1, "f", ⲆΔᐃ, 95, 102, 1],
		[1, "f", 0, 95, 103, 1],
		[ᐃⲆⲆ, "f", 1, 95, 104, 1],
		[1, "f", ΔⵠⲆ, 95, 105, ᐃⲆⲆ],
		[1, "f", 0, 95, 106, ᐃⲆⲆ],
		[ΔⵠⲆ, "f", 1, 95, 107, ⵠΔᐃ],
		[ⵠΔⲆ, "f", ⵠΔⲆ, 95, 108, ⲆΔᐃ],
		[1, "f", ⵠΔⲆ, 95, 109, ᐃⲆⲆ],
		[ⵠΔⲆ, "f", 0, 95, 110, ᐃⲆΔ],
		[Δᐃᐃ, "f", ᐃⲆΔ, 95, 111, ᐃⲆΔ],
		[1, "f", 0, 95, 112, 1],
		[ⲆΔᐃ, "f", ΔⵠⲆ, 95, 116, ⲆⵠⲆ],
		[1, "f", 0, 95, 118, 1],
		[1, "f", 0, 95, 122, 1],
		[ⵠΔΔ, "f", 1, 95, 123, ᐃⲆΔ],
		[ⲆΔᐃ, "f", 1, 95, 124, 1],
		[ⲆⵠⲆ, "f", ⲆᐃⲆ, 95, 125, ⲆΔᐃ],
		[1, "f", ᐃⵠⵠ, 95, 126, 1],
		[ⵠΔΔ, "f", 1, 95, 129, 1],
		[ⲆΔᐃ, "f", 1, 95, 133, 1],
		[ΔⵠⲆ, "f", 0, 95, 134, ⵠΔⲆ],
		[1, "f", ⵠΔᐃ, 95, 135, 1],
		[1, "f", ⵠΔᐃ, 95, 139, Δᐃᐃ],
		[1, "f", Δⵠⵠ, 95, 140, 1],
		[ⵠΔᐃ, "f", ⲆⵠⲆ, 95, 141, 1],
		[ΔⵠⲆ, "f", 1, 95, 142, 1],
		[1, "f", ⲆⵠⲆ, 95, 146, 1],
		[ᐃⲆⲆ, "f", 0, 95, 145, ΔⵠⲆ],
		[ⵠΔᐃ, "f", 1, 95, 148, 1],
		[ᐃⲆⲆ, "f", ᐃⲆΔ, 95, 149, 1],
		[Δᐃᐃ, "f", ᐃⲆⲆ, 95, 150, 1],
		[1, "f", 1, 95, 153, 1],
		[1, Δ[278], ⵠⲆᐃ, 64, ⵠⲆᐃΔᐃ, ⵠΔⲆ],
		[ⵠΔᐃ, Δ[278], Δᐃᐃ, 64, ⵠᐃᐃⵠⵠ, 1],
		[1, Δ[278], 2, 64, ⲆⲆⵠᐃΔ, ᐃⲆⲆ],
		[ⲆΔᐃ, Δ[278], 2, 64, 19, ⵠΔᐃ],
		[ⵠΔᐃ, Δ[278], 0, 64, ΔΔᐃⲆΔ, ⵠΔᐃ],
		[1, Δ[278], ⵠΔΔ, 64, 21, ᐃⲆΔ],
		[ᐃⵠⵠ, Δ[278], 2, 64, 22, ⵠⵠᐃ],
		[ᐃⲆΔ, Δ[278], 0, 64, 23, ᐃⲆⲆ],
		[1, Δ[278], 2, 64, 24, Δᐃᐃ],
		[Δᐃᐃ, Δ[278], ᐃⵠⵠ, 64, 29, 1],
		[1, Δ[278], 2, 64, 30, ⲆⵠⲆ],
		[ⵠΔⲆ, Δ[278], 3, 64, 31, ⲆΔᐃ],
		[1, Δ[278], Δⵠⵠ, 64, 32, 1],
		[ⵠΔᐃ, Δ[278], 1, 64, 33, ⵠⵠᐃ],
		[1, Δ[278], ᐃⵠΔⲆ, 64, 34, 1],
		[ⵠΔᐃ, Δ[278], 0, 64, 35, ⲆΔᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 64, 8, ᐃⵠⵠ],
		[1, Δ[278], 2, 65, 8, ΔⵠⲆ],
		[1, Δ[278], Δᐃᐃ, 65, 9, 1],
		[1, Δ[278], Δᐃᐃⵠ, 65, ⲆⵠΔΔⵠ, 1],
		[1, Δ[278], 3, 65, ⵠⵠᐃΔΔ, ⲆΔᐃ],
		[ⵠΔΔ, Δ[278], 1, 65, 16, 1],
		[1, Δ[278], 0, 64, 17, 1],
		[ᐃⲆΔ, Δ[278], 3, 65, ᐃΔⵠⵠΔ, ⲆⵠⲆ],
		[ᐃⵠⵠ, Δ[278], ⵠΔᐃⵠ, 64, ⲆᐃΔᐃⲆ, 1],
		[1, Δ[278], ⲆⲆᐃⲆ, 65, ΔᐃΔⵠᐃ, ⵠΔΔ],
		[ⵠΔᐃ, Δ[278], ⲆᐃⲆ, 65, 19, ΔⵠⲆ],
		[1, Δ[278], ⲆⵠⲆ, 65, 20, ⲆⵠⲆ],
		[ᐃⲆΔ, Δ[278], ⲆΔⲆΔ, 65, 21, ⵠΔᐃ],
		[ᐃⲆΔ, Δ[278], ᐃⵠΔⲆ, 65, 22, ⲆΔᐃ],
		[ΔⵠⲆ, Δ[278], ᐃⵠᐃⲆ, 65, 23, ⲆΔᐃ],
		[ᐃⵠⵠ, Δ[278], 0, 65, 24, ⵠΔⲆ],
		[1, Δ[278], 2, 65, 29, 1],
		[1, Δ[278], ⲆΔⲆΔ, 65, 30, 1],
		[ⵠΔΔ, Δ[278], ΔᐃΔ, 65, 31, 1],
		[1, Δ[278], ᐃⵠⵠ, 65, 32, 1],
		[1, Δ[278], ⲆⲆᐃⲆ, 65, 33, 1],
		[1, Δ[278], 3, 65, 34, 1],
		[ⵠΔᐃ, Δ[278], Δⵠᐃᐃ, 63, 9, ⵠΔᐃ],
		[ⵠⵠᐃ, Δ[278], Δⵠⵠ, 62, ⲆⲆΔᐃⲆ, ⲆⵠⲆ],
		[1, Δ[278], ⲆⲆᐃⲆ, 61, 9, 1],
		[ⲆⵠⲆ, Δ[278], 0, 60, 9, ⵠΔΔ],
		[ᐃⲆΔ, Δ[278], 2, 59, 9, 1],
		[ⵠΔΔ, Δ[278], Δⵠᐃᐃ, 58, Ⲇᐃᐃⵠⵠ, 1],
		[1, Δ[278], 0, 57, ᐃᐃⵠᐃΔ, 1],
		[ᐃⲆⲆ, Δ[278], ⵠΔᐃⵠ, 56, ⲆᐃⲆᐃⲆ, 1],
		[ⵠΔᐃ, Δ[278], 2, 55, ⵠⲆᐃΔᐃ, ⲆΔᐃ],
		[1, Δ[278], ⲆᐃᐃΔ, 54, ᐃᐃⵠᐃΔ, 1],
		[ᐃⲆⲆ, Δ[278], 0, 53, 9, ⵠⵠᐃ],
		[ⵠⵠᐃ, Δ[278], 0, 51, 9, 1],
		[1, Δ[278], 2, 52, 9, ⵠΔᐃ],
		[ⲆΔᐃ, Δ[278], ⲆⲆΔΔ, 50, 9, Δᐃᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 48, 9, 1],
		[ⵠΔΔ, Δ[278], Δᐃᐃⵠ, 49, 9, 1],
		[1, Δ[278], 0, 47, 9, Δᐃᐃ],
		[ᐃⲆⲆ, Δ[278], ⵠⲆⵠ, 45, 9, 1],
		[Δᐃᐃ, Δ[278], ⵠⲆᐃ, 43, 9, Δᐃᐃ],
		[ᐃⵠⵠ, Δ[278], Δᐃᐃⵠ, 46, 9, ⵠΔᐃ],
		[ⲆⵠⲆ, Δ[278], ΔⲆᐃⲆ, 44, Ⲇⵠᐃⵠᐃ, 1],
		[ⵠⵠᐃ, Δ[278], ⲆᐃᐃΔ, 42, ΔⲆⲆⲆⲆ, ᐃⲆΔ],
		[1, Δ[278], ⵠΔᐃⵠ, 41, ᐃᐃⵠᐃΔ, ⵠΔᐃ],
		[Δᐃᐃ, Δ[278], 0, 40, 9, ΔⵠⲆ],
		[ᐃⲆΔ, Δ[278], 2, 39, ᐃⵠⲆⲆᐃ, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 38, ᐃⵠⲆⲆᐃ, 1],
		[1, Δ[278], 0, 37, ⲆᐃⲆᐃⲆ, ⵠⵠᐃ],
		[ⲆⵠⲆ, Δ[278], ⵠᐃΔ, 63, 8, Δᐃᐃ],
		[1, Δ[278], ᐃⵠΔⲆ, 65, ⵠⲆⵠⲆΔ, 1],
		[1, Δ[278], 3, 64, 7, ᐃⲆΔ],
		[ⵠⵠᐃ, Δ[278], ⵠΔᐃⵠ, 62, ΔΔⲆⵠⵠ, 1],
		[1, Δ[278], 3, 61, ⲆᐃⲆΔⲆ, 1],
		[1, Δ[278], ᐃⲆΔ, 62, ᐃΔᐃⲆᐃ, ᐃⵠⵠ],
		[1, Δ[278], Δⵠᐃᐃ, 63, ⲆⵠΔⲆⵠ, ⵠΔⲆ],
		[1, Δ[278], 0, 64, ΔΔᐃⵠⵠ, ᐃⲆΔ],
		[1, Δ[278], 3, 65, ᐃΔⵠⲆⵠ, 1],
		[ⵠⵠᐃ, Δ[278], 2, 63, ᐃΔΔⵠΔ, ΔⵠⲆ],
		[1, Δ[278], ⲆⲆᐃⲆ, 62, 6, Δᐃᐃ],
		[ⵠΔΔ, Δ[278], 2, 61, Δᐃᐃⵠᐃ, 1],
		[1, Δ[278], 2, 60, 6, 1],
		[ΔⵠⲆ, Δ[278], 2, 59, 6, 1],
		[ΔⵠⲆ, Δ[278], 2, 61, 7, 1],
		[ᐃⵠⵠ, Δ[278], 0, 60, 7, ⵠΔΔ],
		[1, Δ[278], 2, 60, 8, 1],
		[ΔⵠⲆ, Δ[278], 2, 59, 7, 1],
		[ᐃⲆⲆ, Δ[278], 2, 59, 8, ⲆⵠⲆ],
		[Δᐃᐃ, Δ[278], 1, 58, ᐃΔⲆΔΔ, ᐃⵠⵠ],
		[ⵠΔΔ, Δ[278], 1, 57, 6, 1],
		[ⲆⵠⲆ, Δ[278], 1, 55, 7, ⵠΔᐃ],
		[ⵠΔⲆ, Δ[278], ⵠⲆᐃ, 56, ΔⵠⵠⵠΔ, ⲆΔᐃ],
		[1, Δ[278], ⵠΔᐃⵠ, 58, ΔΔᐃⵠⵠ, 1],
		[1, Δ[278], Δᐃᐃⵠ, 58, ⲆⲆᐃⲆⵠ, 1],
		[ⵠΔⲆ, Δ[278], ⲆᐃᐃΔ, 57, ⲆⲆᐃⲆⵠ, 1],
		[ⵠΔΔ, Δ[278], ⲆⲆᐃⲆ, 56, 7, 1],
		[ⵠΔⲆ, Δ[278], ΔⲆᐃⲆ, 55, ᐃΔⵠⲆⵠ, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 57, ΔⲆΔⲆⲆ, 1],
		[ΔⵠⲆ, Δ[278], 2, 56, ⲆᐃⲆΔⲆ, ΔⵠⲆ],
		[ᐃⵠⵠ, Δ[278], ΔⲆᐃⲆ, 55, ⲆᐃⵠⲆⵠ, ⲆⵠⲆ],
		[1, Δ[278], ΔᐃΔ, 54, 8, ⵠΔᐃ],
		[ⲆⵠⲆ, Δ[278], 0, 50, 7, Δᐃᐃ],
		[1, Δ[278], Δⵠⵠ, 53, 6, 1],
		[ⲆΔᐃ, Δ[278], ⲆⲆᐃⲆ, 54, Δᐃᐃⵠᐃ, ΔⵠⲆ],
		[ⲆⵠⲆ, Δ[278], 2, 54, ⵠᐃᐃⲆⵠ, Δᐃᐃ],
		[1, Δ[278], 2, 53, 7, ΔⵠⲆ],
		[1, Δ[278], 2, 52, ⲆΔΔᐃΔ, 1],
		[ⵠΔᐃ, Δ[278], 2, 52, ΔⲆⵠΔΔ, 1],
		[ⵠΔᐃ, Δ[278], ᐃⲆΔ, 52, ⲆᐃⵠⲆⵠ, 1],
		[ⲆⵠⲆ, Δ[278], 2, 53, ⲆᐃⲆΔⲆ, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 51, ⲆᐃⲆⵠⲆ, ⵠⵠᐃ],
		[1, Δ[278], ᐃⵠΔⲆ, 51, ⲆⵠΔⲆⵠ, ⵠΔⲆ],
		[ⵠΔΔ, Δ[278], 2, 51, ⲆⵠᐃΔᐃ, Δᐃᐃ],
		[ⵠΔΔ, Δ[278], Δᐃᐃⵠ, 50, 6, ⲆⵠⲆ],
		[1, Δ[278], ⵠΔᐃⵠ, 50, ⲆⲆΔᐃΔ, ⵠⵠᐃ],
		[ⲆΔᐃ, Δ[278], ᐃⵠΔⲆ, 49, 8, ⲆΔᐃ],
		[Δᐃᐃ, Δ[278], 2, 49, 7, 1],
		[ᐃⲆⲆ, Δ[278], 2, 49, 6, 1],
		[ⵠΔᐃ, Δ[278], 0, 46, ᐃΔᐃⲆᐃ, 1],
		[1, Δ[278], 1, 48, ⲆᐃⵠⲆⵠ, 1],
		[ⵠⵠᐃ, Δ[278], 1, 44, ⲆΔⲆᐃⲆ, ᐃⲆⲆ],
		[1, Δ[278], 1, 41, ⲆᐃⵠⲆⵠ, ⵠΔⲆ],
		[1, Δ[278], ᐃⵠΔⲆ, 48, ⲆΔⲆᐃⲆ, ᐃⲆⲆ],
		[ⲆⵠⲆ, Δ[278], 2, 48, ᐃΔΔⵠΔ, Δᐃᐃ],
		[ᐃⵠⵠ, Δ[278], ⲆⲆᐃⲆ, 47, 6, ⲆⵠⲆ],
		[ⵠΔⲆ, Δ[278], ΔⲆᐃⲆ, 47, 7, ᐃⵠⵠ],
		[1, Δ[278], ⲆⲆᐃⲆ, 47, 8, 1],
		[ᐃⲆⲆ, Δ[278], 2, 46, ⲆⲆΔᐃΔ, 1],
		[1, Δ[278], 2, 45, ᐃΔⲆΔΔ, 1],
		[1, Δ[278], 2, 45, 7, Δᐃᐃ],
		[ⵠΔⲆ, Δ[278], 2, 45, 6, ΔⵠⲆ],
		[ⵠΔᐃ, Δ[278], 2, 46, ᐃⲆⵠⲆⲆ, 1],
		[ᐃⲆΔ, Δ[278], ᐃⵠΔⲆ, 44, ᐃⲆⵠⲆⲆ, 1],
		[1, Δ[278], 2, 44, ΔΔⵠⵠⵠ, ⵠΔⲆ],
		[1, Δ[278], 2, 43, ⲆᐃⵠⲆⵠ, 1],
		[ⵠΔᐃ, Δ[278], ⵠΔᐃⵠ, 43, ⵠΔⵠΔᐃ, ᐃⲆⲆ],
		[1, Δ[278], ⵠΔᐃⵠ, 43, ᐃΔⵠⲆⵠ, ᐃⵠⵠ],
		[1, Δ[278], ΔⲆᐃⲆ, 42, 6, 1],
		[1, Δ[278], ⲆⲆᐃⲆ, 42, 7, ⵠΔᐃ],
		[ⵠⵠᐃ, Δ[278], ᐃⵠΔⲆ, 42, ⲆᐃⵠⲆⵠ, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 41, 7, Δᐃᐃ],
		[ⵠΔᐃ, Δ[278], 2, 41, 6, 1],
		[ⲆⵠⲆ, Δ[278], 2, 40, 6, ⵠΔΔ],
		[ᐃⵠⵠ, Δ[278], ⵠΔᐃⵠ, 40, 7, Δᐃᐃ],
		[1, Δ[278], ⲆᐃᐃΔ, 40, 8, 1],
		[ΔⵠⲆ, Δ[278], 2, 39, ⲆᐃⲆⵠⲆ, ⵠΔⲆ],
		[1, Δ[278], ⵠᐃΔ, 39, ᐃΔᐃⲆᐃ, 1],
		[ⵠΔᐃ, Δ[278], 1, 38, 8, 1],
		[ΔⵠⲆ, Δ[278], 2, 39, 6, 1],
		[1, Δ[278], 2, 38, Δⵠᐃⵠⵠ, Δᐃᐃ],
		[1, Δ[278], 2, 37, 6, ᐃⲆΔ],
		[1, Δ[278], Δⵠᐃᐃ, 38, 7, ⲆΔᐃ],
		[ⵠΔΔ, Δ[278], 2, 37, ⲆⲆᐃⲆⵠ, 1],
		[ᐃⲆⲆ, Δ[278], ⵠΔᐃⵠ, 37, 8, 1],
		[ⵠΔᐃ, Δ[278], ΔⲆᐃⲆ, 37, 10, ⵠΔᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 38, ᐃⲆᐃⲆᐃ, 1],
		[1, Δ[278], 0, 38, Ⲇⵠᐃⵠⵠ, 1],
		[ⵠⵠᐃ, Δ[278], 0, 38, 17, Δᐃᐃ],
		[ᐃⲆΔ, Δ[278], 1, 37, ⲆᐃΔᐃⲆ, 1],
		[1, Δ[278], 0, 38, ⵠᐃΔⵠⲆ, ⲆⵠⲆ],
		[ⲆⵠⲆ, Δ[278], ⲆᐃᐃΔ, 37, 11, ⲆΔᐃ],
		[Δᐃᐃ, Δ[278], 2, 37, ᐃΔⲆⲆⲆ, Δᐃᐃ],
		[1, Δ[278], ΔⲆᐃⲆ, 37, ᐃΔⵠⵠΔ, ᐃⲆΔ],
		[ⵠΔⲆ, Δ[278], 2, 38, ⲆⲆΔⲆⵠ, ⵠΔⲆ],
		[ᐃⲆⲆ, Δ[278], ᐃⵠΔⲆ, 37, 19, 1],
		[ⲆⵠⲆ, Δ[278], 3, 38, 16, 1],
		[1, Δ[278], Δⵠⵠ, 37, 21, ᐃⲆΔ],
		[ⲆΔᐃ, Δ[278], ⲆᐃⲆ, 38, 22, 1],
		[1, Δ[278], ⵠⲆⵠ, 38, 24, ⵠΔⲆ],
		[1, Δ[278], ⲆᐃᐃΔ, 37, ⵠⲆΔᐃᐃ, 1],
		[ⵠΔⲆ, Δ[278], ⲆⲆΔΔ, 38, ⲆᐃⵠⲆᐃ, 1],
		[ⵠⵠᐃ, Δ[278], ΔⲆᐃⲆ, 38, 21, 1],
		[1, Δ[278], ⵠΔⲆ, 37, 23, ⵠΔⲆ],
		[ᐃⲆΔ, Δ[278], ⲆΔⲆΔ, 37, 22, 1],
		[Δᐃᐃ, Δ[278], ⲆΔⲆΔ, 38, 23, ᐃⲆⲆ],
		[ᐃⲆΔ, Δ[278], ⲆⲆΔΔ, 37, 24, ᐃⲆΔ],
		[1, Δ[278], 0, 38, 30, 1],
		[ᐃⲆΔ, Δ[278], 0, 38, 32, 1],
		[ⵠΔΔ, Δ[278], ⵠⲆⵠ, 37, 31, 1],
		[ⵠΔΔ, Δ[278], ᐃⲆΔ, 38, 34, ⲆⵠⲆ],
		[1, Δ[278], 1, 37, 29, 1],
		[ᐃⲆⲆ, Δ[278], 2, 38, 29, ⵠΔᐃ],
		[ᐃⵠⵠ, Δ[278], 2, 37, 30, 1],
		[1, Δ[278], 2, 38, 31, 1],
		[ΔⵠⲆ, Δ[278], 2, 37, 32, 1],
		[ⵠΔᐃ, Δ[278], ⵠᐃⲆᐃ, 38, 33, ΔⵠⲆ],
		[ⵠΔⲆ, Δ[278], 3, 38, 35, 1],
		[ᐃⵠⵠ, Δ[278], 2, 37, 33, Δᐃᐃ],
		[1, Δ[278], 2, 36, ⵠᐃⵠᐃⵠ, 1],
		[ⵠΔᐃ, Δ[278], ᐃΔΔ, 36, ⲆⵠΔΔᐃ, 1],
		[1, Δ[278], 0, 35, 9, 1],
		[ᐃⲆΔ, Δ[278], ΔⲆᐃⲆ, 36, 9, ᐃⵠⵠ],
		[1, Δ[278], 2, 36, ΔⲆⲆΔΔ, ⵠⵠᐃ],
		[ⵠΔᐃ, Δ[278], ᐃⵠΔⲆ, 35, ᐃⵠᐃᐃᐃ, 1],
		[ⵠΔⲆ, Δ[278], 1, 33, ΔⲆΔⲆⲆ, ⲆⵠⲆ],
		[ⵠΔΔ, Δ[278], 3, 34, 9, 1],
		[ΔⵠⲆ, Δ[278], 3, 35, ΔΔⲆⵠⵠ, ⲆⵠⲆ],
		[1, Δ[278], Δᐃᐃⵠ, 34, ΔⲆΔⲆⲆ, ⵠⵠᐃ],
		[Δᐃᐃ, Δ[278], ⵠⲆᐃ, 36, ⵠⲆⵠⲆΔ, 1],
		[1, Δ[278], ⵠⵠᐃ, 34, ⵠΔⵠΔᐃ, ᐃⲆΔ],
		[Δᐃᐃ, Δ[278], Δᐃᐃⵠ, 35, ⵠᐃᐃⲆⵠ, 1],
		[ⵠΔⲆ, Δ[278], 2, 35, 6, 1],
		[ᐃⵠⵠ, Δ[278], ⲆⲆᐃⲆ, 36, ⲆΔΔΔΔ, ⵠΔΔ],
		[ᐃⲆΔ, Δ[278], ⲆⲆᐃⲆ, 68, ᐃΔⲆⵠΔ, ⲆΔᐃ],
		[ΔⵠⲆ, Δ[278], Δⵠᐃᐃ, 66, 10, 1],
		[ⵠΔⲆ, Δ[278], 3, 66, Ⲇⵠᐃⵠᐃ, ⵠΔᐃ],
		[1, Δ[278], 0, 67, 9, 1],
		[1, Δ[278], 0, 66, 8, 1],
		[ⵠΔⲆ, Δ[278], ⲆⲆΔΔ, 67, 8, ᐃⵠⵠ],
		[ΔⵠⲆ, Δ[278], ᐃⲆⲆ, 68, 8, 1],
		[1, Δ[278], 1, 66, 11, ΔⵠⲆ],
		[1, Δ[278], ⲆⲆΔΔ, 67, 10, 1],
		[1, Δ[278], ⲆᐃⲆ, 66, ΔΔᐃⵠⵠ, ᐃⲆΔ],
		[1, Δ[278], ᐃⵠΔⲆ, 66, 7, ᐃⲆΔ],
		[1, Δ[278], 2, 67, ⲆⵠΔⲆⵠ, 1],
		[1, Δ[278], 2, 69, ⲆᐃⲆΔⲆ, ᐃⵠⵠ],
		[1, Δ[278], Δⵠᐃᐃ, 63, 32, 1],
		[1, Δ[278], ⲆⲆΔΔ, 62, 34, 1],
		[ᐃⵠⵠ, Δ[278], ᐃⵠΔⲆ, 60, 35, 1],
		[ᐃⲆΔ, Δ[278], 3, 59, 35, ᐃⲆΔ],
		[1, Δ[278], 0, 61, 35, 1],
		[ⵠΔΔ, Δ[278], ΔᐃΔ, 63, 34, 1],
		[1, Δ[278], 2, 63, 33, ᐃⵠⵠ],
		[1, Δ[278], ⲆⲆᐃⲆ, 63, 35, 1],
		[ⵠΔΔ, Δ[278], 2, 62, 35, ⵠΔΔ],
		[Δᐃᐃ, Δ[278], Δᐃᐃⵠ, 58, 36, 1],
		[ᐃⵠⵠ, Δ[278], 1, 59, 36, ⵠΔᐃ],
		[ᐃⵠⵠ, Δ[278], Δᐃᐃ, 62, 36, 1],
		[ΔⵠⲆ, Δ[278], 2, 60, 36, 1],
		[1, Δ[278], 2, 61, 34, 1],
		[1, Δ[278], ᐃΔᐃⲆ, 62, 33, 1],
		[1, Δ[278], Ⲇⵠᐃᐃ, 63, 36, ΔⵠⲆ],
		[1, Δ[278], ⵠᐃⲆᐃ, 61, 36, ⵠΔⲆ],
		[ᐃⵠⵠ, Δ[278], 0, 42, 36, ᐃⲆⲆ],
		[ⵠⵠᐃ, Δ[278], 1, 39, 36, 1],
		[ⵠΔΔ, Δ[278], ⲆⲆᐃⲆ, 41, 36, ⵠΔΔ],
		[ⲆΔᐃ, Δ[278], 3, 39, 35, ⵠΔᐃ],
		[1, Δ[278], 3, 40, 36, 1],
		[ⵠⵠᐃ, Δ[278], 3, 43, 36, 1],
		[ⵠⵠᐃ, Δ[278], 1, 40, 35, ⲆΔᐃ],
		[1, Δ[278], 2, 41, 35, ⵠⵠᐃ],
		[1, Δ[278], ⲆᐃᐃΔ, 40, 34, ⲆΔᐃ],
		[ⵠⵠᐃ, Δ[278], 2, 39, 34, 1],
		[1, Δ[278], 2, 39, 33, ⵠΔⲆ],
		[1, Δ[278], Δⵠᐃᐃ, 39, 32, 1],
		[Δᐃᐃ, Δ[278], ⵠⲆⵠ, 40, 33, ⵠΔⲆ],
		[1, Δ[278], 2, 41, 34, ⲆⵠⲆ],
		[Δᐃᐃ, Δ[278], 1, 44, 36, 1],
		[ᐃⲆⲆ, Δ[278], ᐃⲆᐃⲆ, 43, 35, 1],
		[1, Δ[278], 2, 42, 35, ΔⵠⲆ],
		[ⵠΔᐃ, Δ[278], ⵠⲆᐃ, 37, 34, 1],
		[ᐃⲆΔ, Δ[278], 3, 59, 30, Δᐃᐃ],
		[ᐃⲆΔ, Δ[278], ᐃΔΔ, 60, 29, ᐃⵠⵠ],
		[ⲆΔᐃ, Δ[278], ⲆⲆΔΔ, 60, 28, ⲆΔᐃ],
		[ᐃⲆΔ, Δ[278], 3, 60, 27, 1],
		[1, Δ[278], 0, 60, 26, ΔⵠⲆ],
		[ⲆΔᐃ, Δ[278], Δⵠᐃᐃ, 54, 25, ᐃⲆΔ],
		[ᐃⲆΔ, Δ[278], ⲆⲆᐃⲆ, 48, 25, 1],
		[ⵠΔΔ, Δ[278], 2, 42, 26, 1],
		[1, Δ[278], 0, 55, 25, 1],
		[1, Δ[278], 2, 59, 26, ᐃⲆⲆ],
		[1, Δ[278], 0, 43, 26, 1],
		[ᐃⵠⵠ, Δ[278], 1, 42, 27, Δᐃᐃ],
		[ᐃⵠⵠ, Δ[278], 2, 42, 28, 1],
		[ⵠⵠᐃ, Δ[278], 2, 43, 30, 1],
		[1, Δ[278], ⲆᐃⲆ, 42, 29, 1],
		[1, Δ[278], 0, 54, 24, ⵠΔⲆ],
		[1, Δ[278], 0, 48, 24, 1],
		[1, Δ[278], Δᐃᐃⵠ, 54, 23, 1],
		[ᐃⲆΔ, Δ[278], ΔⲆᐃⲆ, 48, 23, 1],
		[1, Δ[278], 2, 63, 22, Δᐃᐃ],
		[ᐃⲆΔ, Δ[278], ᐃⵠΔⲆ, 63, 21, 1],
		[ΔⵠⲆ, Δ[278], 2, 39, 21, ⲆΔᐃ],
		[1, Δ[278], 3, 57, ΔᐃΔΔᐃΔⲆ, 1],
		[ⵠΔⲆ, Δ[278], 2, 56, ⵠⲆΔⲆΔ, 1],
		[ᐃⲆΔ, Δ[278], 3, 51, 21, ᐃⲆΔ],
		[ⵠΔᐃ, Δ[278], 0, 51, ᐃΔⲆΔᐃ, 1],
		[1, Δ[278], 2, 51, ΔⲆⵠⵠⵠ, 1],
		[1, Δ[278], 3, 51, 18, Δᐃᐃ],
		[1, Δ[278], 2, 63, Ⲇᐃⵠᐃᐃ, 1],
		[1, Δ[278], 2, 63, ⲆΔⲆᐃⵠ, 1],
		[ΔⵠⲆ, Δ[278], 2, 56, 13, ΔⵠⲆ],
		[ⲆⵠⲆ, Δ[278], ΔⵠⲆⲆ, 57, 13, 1],
		[1, Δ[278], ⵠⵠᐃ, 45, ᐃⵠᐃⲆⵠⲆⲆ, ⵠⵠᐃ],
		[ᐃⵠⵠ, Δ[278], 2, 47, 18, 1],
		[Δᐃᐃ, Δ[278], 2, 46, ⲆⲆΔⲆⵠ, Δᐃᐃ],
		[ⲆΔᐃ, Δ[278], ⵠⲆⵠ, 46, ᐃΔΔΔⵠ, 1],
		[1, Δ[278], 2, 45, 13, 1],
		[1, Δ[278], Δⵠᐃᐃ, 39, ⲆΔⵠᐃⲆ, 1],
		[1, Δ[278], 2, 39, ΔᐃⵠΔⵠ, 1],
		[1, Δ[278], 2, 47, ᐃᐃᐃΔᐃ, ⵠΔⲆ],
		[1, "a", ⵠᐃΔ, 51, 15, 1],
		[ⵠΔᐃ, "a", ⵠΔΔ, 53, 14, ᐃⵠⵠ],
		[ⵠⵠᐃ, "a", ΔⵠⲆ, 49, ⲆⵠᐃΔΔΔᐃ, 1],
		[ⵠⵠᐃ, Δ[66], 8, 55, ⵠⲆᐃⵠⵠ, Δⵠⵠ],
		[ᐃⲆΔ, Δ[66], 9, 48, 28, 0],
		[ᐃⲆΔ, Δ[66], 10, 58, 26, 0],
		[1, Δ[66], 11, 59, 29, 0],
		[1, Δ[66], 11, 55, 34, 0],
		[Δᐃᐃ, Δ[66], ΔⲆⲆΔΔ, 48, 33, 0],
		[ⵠΔᐃ, Δ[66], Ⲇⵠᐃⵠᐃ, 41, 32, ⵠᐃΔ],
		[1, Δ[66], 9, 56, 24, 0],
		[ᐃⵠⵠ, Δ[66], 9, 62, 16, 0],
		[1, Δ[66], Ⲇⵠᐃⵠᐃ, 45, ΔᐃΔⵠⲆ, 0],
		[ᐃⲆⲆ, Δ[66], ᐃᐃⵠᐃΔ, 44, 17, Δⵠⵠ],
		[Δᐃᐃ, Δ[66], ᐃᐃΔⵠⵠ, 44, 13, ⲆᐃⲆ],
		[1, Δ[66], ⲆⵠΔΔⵠ, 58, ⵠᐃΔⲆⲆ, ⵠⲆⵠ],
		[ⵠΔⲆ, Δ[66], 10, 63, 31, 0],
		[1, Δ[66], 8, 60, 30, ⵠⲆᐃ],
		[ⵠⵠᐃ, Δ[66], 8, 43, 26, ΔᐃΔ],
		[ᐃⲆⲆ, Δ[66], ⲆΔⵠᐃⲆ, 43, 29, 0],
		[1, Δ[66], ᐃᐃΔⵠⵠ, 53, 29, ⵠⲆᐃ],
		[1, Δ[66], ᐃⵠᐃᐃᐃ, 53, 24, Δⵠⵠ],
		[ᐃⲆΔ, Δ[66], ΔⲆⲆⲆⲆ, 53, 19, ΔᐃΔ],
		[ᐃⵠⵠ, Δ[66], ⲆⵠΔΔᐃ, 49, ᐃΔⵠⲆⲆ, 0],
		[ⲆΔᐃ, Δ[66], 10, 39, 26, ⲆᐃⲆ],
		[1, Δ[66], 9, 46, 24, ᐃΔΔ],
		[ⵠΔᐃ, Δ[66], 9, 62, 10, 0],
		[1, Δ[66], ᐃΔⲆΔΔ, 40, ᐃⲆᐃⲆΔ, 0],
		[ⲆⵠⲆ, Δ[66], 32, 55, 35, 0],
		[ᐃⲆΔ, Δ[66], 32, 60, 33, ⲆᐃⲆ],
		[ⵠΔᐃ, Δ[66], 32, 63, 28, ΔᐃΔ],
		[1, Δ[66], 32, 63, 24, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[66], 32, 58, 22, ΔᐃΔ],
		[1, Δ[66], 32, 59, 17, ⵠⲆⵠ],
		[1, Δ[66], 32, 63, 13, ΔᐃΔ],
		[1, Δ[66], 32, 59, 10, 0],
		[1, Δ[66], 32, 56, 12, 0],
		[ᐃⲆⲆ, Δ[66], 32, 52, 17, 0],
		[ᐃⲆΔ, Δ[66], 32, 51, ⵠⵠⲆⵠⲆ, ΔᐃΔ],
		[1, Δ[66], 32, 39, 12, 0],
		[ⵠΔⲆ, Δ[66], 32, 39, ΔᐃΔⵠᐃ, 0],
		[1, Δ[66], 32, 41, 25, 0],
		[Δᐃᐃ, Δ[66], 32, 39, 30, 0],
		[1, Δ[66], 32, 50, 29, 0],
		[ΔⵠⲆ, Δ[66], 32, 43, 34, ⵠⲆⵠ],
		[Δᐃᐃ, Δ[66], 32, 47, 34, ⵠⲆᐃ],
		[1, Δ[66], 31, 54, 33, ⵠᐃΔ],
		[ⲆΔᐃ, Δ[66], 31, 59, 24, 0],
		[ᐃⲆⲆ, Δ[66], 31, 63, 19, ⲆᐃⲆ],
		[Δᐃᐃ, Δ[66], 31, 47, 15, 0],
		[1, Δ[66], 31, 43, ⵠΔᐃⲆⲆⵠⵠ, 0],
		[ᐃⵠⵠ, Δ[66], 31, 39, 27, 0],
		[1, Δ[66], 31, 48, 27, 0],
		[1, Δ[66], 31, 57, 27, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[66], 32, 44, 27, ᐃΔΔ],
		[ΔⵠⲆ, "d", Δⵠⵠ, ΔΔΔⲆΔ, ᐃΔΔΔⵠ, ⵠΔⲆ],
		[1, "d", 0, 89, ⵠⵠᐃᐃΔ, ⵠΔᐃ],
		[ᐃⲆΔ, "d", 1, 91, 21, 1],
		[ⲆΔᐃ, "d", ⲆΔᐃ, 10, 22, 1],
		[ⲆΔᐃ, "f", 2, 89, 18, 1],
		[1, "f", ΔᐃΔ, 88, ᐃᐃⵠᐃⲆ, ⵠΔⲆ],
		[1, "g", ᐃⵠⵠ, 85, 22, Δᐃᐃ],
		[1, "s", ᐃⲆⲆ, 90, 29, 1],
		[ᐃⲆΔ, "s", ᐃⲆΔ, 92, 15, ᐃⲆΔ],
		[ᐃⲆⲆ, "s", 0, 91, 31, 1],
		[1, "s", ΔⲆᐃⲆ, 90, 38, ⲆΔᐃ],
		[ᐃⵠⵠ, "s", 0, 91, 42, 1],
		[1, "s", 0, 90, 49, ⲆⵠⲆ],
		[ⲆⵠⲆ, "f", ⵠΔⲆ, 86, 43, 1],
		[ᐃⵠⵠ, "f", ᐃΔΔ, 81, 45, 1],
		[1, "f", 2, 66, 44, 1],
		[ⵠⵠᐃ, "f", 2, 55, 49, 1],
		[ⵠΔᐃ, "f", ⵠΔᐃ, 54, 50, 1],
		[1, "f", Δᐃᐃⵠ, 43, 45, ᐃⲆΔ],
		[ⵠΔⲆ, "f", Δⵠᐃᐃ, 31, 48, ⲆⵠⲆ],
		[1, "f", ⵠΔⲆ, 27, 39, ⵠΔᐃ],
		[ᐃⵠⵠ, "f", ᐃⲆΔ, 80, 46, 1],
		[1, "f", ⲆⵠⲆ, 69, 48, 1],
		[1, "g", ⲆᐃⲆ, 80, 40, 1],
		[1, "g", 2, 81, 40, ᐃⲆΔ],
		[1, "s", ⲆⲆΔΔ, 77, 39, 1],
		[ⲆΔᐃ, "s", ⵠⲆⵠ, 68, 43, ⵠΔᐃ],
		[1, "s", ⲆᐃᐃΔ, 57, 41, 1],
		[ⵠΔᐃ, "s", ᐃⵠⵠ, 56, 42, 1],
		[ⵠⵠᐃ, "s", 1, 40, 41, 1],
		[ⵠΔⲆ, "s", 2, 48, 48, 1],
		[1, "f", 2, 17, 12, 1],
		[ⵠΔΔ, "f", 0, ⲆⵠΔΔΔᐃᐃ, 31, 1],
		[1, "f", 1, 14, 32, 1],
		[1, "s", ⵠⲆⵠ, 15, 27, ⵠΔᐃ],
		[Δᐃᐃ, "s", ᐃΔΔ, ΔᐃΔᐃⵠ, 39, ⵠⵠᐃ],
		[1, "f", 2, 11, ⲆΔⲆⵠᐃ, ᐃⲆⲆ],
		[1, "f", 1, ⵠⲆⵠᐃⲆ, 18, 1],
		[ⵠΔⲆ, "g", ΔⲆᐃⲆ, 12, 25, ⲆΔᐃ],
		[ⵠⵠᐃ, "f", ΔᐃΔ, ΔᐃⵠΔⵠ, 45, 1],
		[1, "f", 1, ⲆⲆⵠⵠᐃⵠΔ, 46, Δᐃᐃ],
		[1, "s", ⵠⵠᐃ, 74, 48, ᐃⲆⲆ],
		[1, "s", ⵠΔᐃ, ⲆⵠⵠΔⵠ, 47, 1],
		[1, "g", ΔᐃΔ, 58, 59, 1],
		[ᐃⲆΔ, "g", 0, 46, 72, 1],
		[ᐃⲆΔ, "g", ⵠⲆᐃ, 69, 79, 1],
		[1, "g", ⵠᐃΔ, 72, 74, 1],
		[ⲆΔᐃ, "g", 0, 26, 88, ⵠΔᐃ],
		[ⵠⵠᐃ, "g", ⲆᐃⲆ, 20, 74, ⵠΔΔ],
		[ⲆΔᐃ, "g", 0, 28, 67, ᐃⵠⵠ],
		[1, "g", 0, 49, 86, 1],
		[1, "g", 0, 77, 90, ᐃⲆΔ],
		[1, "g", ΔᐃΔ, 87, 72, ⲆⵠⲆ],
		[1, "g", ⵠᐃΔ, ⵠⲆⵠⲆΔᐃⵠ, 85, ᐃⲆⲆ],
		[1, "g", ⵠⵠᐃ, 85, 97, 1],
		[ᐃⲆΔ, "g", ᐃⲆΔ, 68, 104, ⲆⵠⲆ],
		[1, "g", 1, 63, 91, ᐃⲆⲆ],
		[ᐃⵠⵠ, "g", Δᐃᐃ, 39, 90, ⵠΔΔ],
		[ⵠΔΔ, "g", 1, 34, 99, 1],
		[1, "g", ᐃⲆⲆ, ᐃⲆΔΔⲆ, 103, ⲆⵠⲆ],
		[ⵠΔⲆ, "g", 2, 77, 60, 1],
		[1, "g", 2, 19, 56, 1],
		[1, "g", Δⵠᐃᐃ, 39, 60, 1],
		[ⲆΔᐃ, "g", 2, 87, 57, ⵠΔᐃ],
		[ᐃⵠⵠ, "f", ⵠⲆᐃ, 9, 62, ΔⵠⲆ],
		[Δᐃᐃ, "f", 0, ⵠⲆⵠᐃⲆ, 81, ⵠⵠᐃ],
		[1, "f", ⵠⲆⵠ, 26, 59, 1],
		[ⲆⵠⲆ, "f", ⲆᐃⲆ, 35, 53, 1],
		[ⵠⵠᐃ, "f", 0, 44, 58, 1],
		[1, "f", ⵠⲆᐃ, 88, 62, Δᐃᐃ],
		[ᐃⵠⵠ, "f", 0, 91, 82, Δᐃᐃ],
		[1, "f", ᐃΔΔ, 84, 85, 1],
		[1, "f", 0, 79, 69, 1],
		[1, "f", ⵠⲆᐃ, 64, 71, Δᐃᐃ],
		[ᐃⵠⵠ, "f", ΔᐃΔ, 62, 83, ⵠΔΔ],
		[ᐃⵠⵠ, "f", Δⵠⵠ, 34, 81, 1],
		[1, "f", 0, 39, 71, Δᐃᐃ],
		[ᐃⵠⵠ, "f", Δⵠⵠ, 54, 94, 1],
		[1, "f", 1, 81, 70, 1],
		[1, "f", ⲆΔᐃ, 91, 72, ⵠⵠᐃ],
		[ⵠΔⲆ, "f", ⵠⵠᐃ, ⲆᐃⵠⲆⵠ, 91, 1],
		[ⲆΔᐃ, "f", 1, 14, 81, 1],
		[ⵠΔⲆ, "f", ⲆⵠⲆ, 29, 79, Δᐃᐃ],
		[ⵠⵠᐃ, "f", ⵠΔΔ, ⲆⲆⵠΔᐃ, 65, ΔⵠⲆ],
		[ᐃⵠⵠ, "f", ᐃⲆⲆ, 46, 97, ⲆⵠⲆ],
		[1, "f", 1, 43, 73, ᐃⵠⵠ],
		[1, "f", Δᐃᐃ, 60, 69, 1],
		[ⲆⵠⲆ, "f", ᐃⵠⵠ, 70, 96, ⲆⵠⲆ],
		[ᐃⲆΔ, "f", ᐃⲆΔ, 58, 84, ⵠΔΔ],
		[1, "s", 1, 56, 76, ⲆΔᐃ],
		[1, "s", ᐃⲆΔ, 85, 74, 1],
		[1, "s", 0, 72, 71, 1],
		[ⵠΔᐃ, "s", 0, 41, 62, 1],
		[ΔⵠⲆ, "s", 0, 60, 61, ⲆΔᐃ],
		[ⵠΔⲆ, "s", 0, 20, 66, 1],
		[ᐃⲆΔ, "s", 0, 47, 83, 1],
		[ⵠΔᐃ, "s", ᐃΔΔ, 29, 86, 1],
		[ᐃⵠⵠ, "s", ⲆᐃⲆ, 78, 92, 1],
		[ⲆⵠⲆ, "s", ⵠᐃΔ, 62, 102, ᐃⲆⲆ],
		[1, "s", 0, ⵠⲆΔⲆΔ, 95, ⵠΔᐃ],
		[1, "s", ⲆᐃᐃΔ, 64, 101, ⵠΔΔ],
		[1, "s", 2, 78, 84, 1],
		[ⲆΔᐃ, "s", 2, 49, 83, 1],
		[1, "s", 2, 15, 76, 1],
		[1, "s", Δᐃᐃⵠ, 21, 84, ᐃⲆΔ],
		[1, "f", ⵠΔΔ, 26, 94, 1],
		[1, "f", 2, 23, 96, 1],
		[ΔⵠⲆ, "f", ⵠΔᐃⵠ, 25, 72, ΔⵠⲆ],
		[1, "f", Δⵠᐃᐃ, 85, 77, 1],
		[ⵠΔᐃ, "f", Δᐃᐃⵠ, 79, 95, 1],
		[1, "f", 2, 51, 65, ⵠⵠᐃ],
		[ⲆⵠⲆ, "f", 2, 69, 60, ⲆⵠⲆ],
		[1, "f", ⵠΔᐃ, 25, 105, 1],
		[1, "s", 1, 18, 68, ΔⵠⲆ],
		[1, "s", ᐃΔΔ, 55, 76, ⵠⵠᐃ],
		[1, "s", ⵠⲆᐃ, 74, 59, 1],
		[ⵠΔⲆ, "f", ΔⵠⲆ, 46, 142, ⲆⵠⲆ],
		[ΔⵠⲆ, "f", 1, 19, 140, 1],
		[1, "f", ᐃⲆΔ, 77, 137, 1],
		[1, "f", 0, 75, 137, 1],
		[ⵠΔⲆ, "f", ⵠⲆᐃ, 55, 138, ᐃⵠⵠ],
		[ⲆⵠⲆ, "f", Δⵠⵠ, 33, 127, ᐃⵠⵠ],
		[1, "f", ⵠⲆⵠ, 76, 121, ⵠΔΔ],
		[ⲆⵠⲆ, "f", 0, 55, 121, 1],
		[1, "f", ⲆᐃⲆ, ΔⵠⵠΔᐃ, 123, 1],
		[1, "f", 0, ⲆᐃΔᐃⲆ, 141, ᐃⲆΔ],
		[ⵠΔᐃ, "f", 0, 40, 137, ᐃⲆΔ],
		[1, "f", 2, 76, 142, ᐃⲆΔ],
		[1, "f", ⵠΔᐃⵠ, 57, 140, 1],
		[1, "f", Δᐃᐃⵠ, 39, 138, ⵠΔᐃ],
		[ⲆΔᐃ, "f", ΔⲆᐃⲆ, ΔΔⵠᐃⲆ, 143, 1],
		[1, "f", ⲆᐃᐃΔ, 29, 131, 1],
		[Δᐃᐃ, "f", ⵠⲆⵠ, 70, 150, 1],
		[ⲆΔᐃ, "f", 0, 28, 146, 1],
		[ⵠΔᐃ, "f", ⲆᐃⲆ, 12, 132, ⲆΔᐃ],
		[ⵠΔᐃ, "f", Δⵠⵠ, 90, 129, ᐃⲆΔ],
		[ⵠⵠᐃ, "f", ΔⵠⲆ, 87, 131, 1],
		[1, "f", ⵠⲆᐃ, 91, 143, ᐃⲆΔ],
		[1, "f", 2, 87, 145, 1],
		[ΔⵠⲆ, "f", ⵠⵠᐃ, 89, 141, ᐃⵠⵠ],
		[1, "f", 1, 63, 130, 1],
		[ⵠΔᐃ, "f", ⲆΔᐃ, 75, 122, 1],
		[1, "f", 1, 52, 124, ᐃⵠⵠ],
		[ⲆΔᐃ, "f", ᐃⵠⵠ, 34, 127, Δᐃᐃ],
		[ⲆⵠⲆ, "f", 1, 14, 123, ⲆⵠⲆ],
		[ⲆΔᐃ, "f", ᐃⲆΔ, 24, 122, ⲆΔᐃ],
		[1, "f", 0, 83, 108, ⲆΔᐃ],
		[1, "f", ⵠⲆⵠ, 89, 118, 1],
		[ΔⵠⲆ, "f", ⵠᐃΔ, 56, 107, 1],
		[ⵠⵠᐃ, "f", ᐃΔΔ, 38, 113, 1],
		[ⵠΔΔ, "f", ΔᐃΔ, 16, 110, ⵠΔᐃ],
		[1, "f", 1, 80, 105, ᐃⵠⵠ],
		[ⲆⵠⲆ, "f", 1, 82, 109, ΔⵠⲆ],
		[ⲆⵠⲆ, "f", 1, 87, 118, Δᐃᐃ],
		[ⲆΔᐃ, "f", ⲆΔᐃ, 59, 110, ⲆⵠⲆ],
		[1, "f", ⵠΔᐃ, 29, 111, ⵠⵠᐃ],
		[1, "f", ⲆᐃᐃΔ, 28, 112, 1],
		[ⵠΔΔ, "f", ⲆᐃᐃΔ, 70, 112, ⵠΔⲆ],
		[ᐃⵠⵠ, "f", 2, 42, 111, 1],
		[ⵠΔⲆ, "s", 0, 68, 157, 1],
		[ᐃⲆΔ, "s", 0, 81, 158, ⲆⵠⲆ],
		[1, "s", 0, 25, 172, 1],
		[ⲆⵠⲆ, "s", 0, 22, 161, 1],
		[ᐃⲆⲆ, "s", 0, 35, 152, ⵠⵠᐃ],
		[1, "s", ⵠⲆᐃ, 66, 144, 1],
		[ⵠΔᐃ, "s", ΔᐃΔ, 87, 145, Δᐃᐃ],
		[ΔⵠⲆ, "s", ⵠⲆⵠ, 86, 145, ⵠΔΔ],
		[1, "s", ⵠᐃΔ, 84, 135, ⲆΔᐃ],
		[1, "s", 0, 69, 133, ⲆΔᐃ],
		[ᐃⵠⵠ, "s", 0, 84, 122, 1],
		[ⵠΔⲆ, "s", ⵠⲆⵠ, 68, 121, ⲆΔᐃ],
		[1, "s", 0, 48, 124, Δᐃᐃ],
		[1, "s", ⵠⲆⵠ, 26, 129, 1],
		[1, "s", 0, ⲆᐃⲆᐃⲆ, 127, ⵠⵠᐃ],
		[ⲆΔᐃ, "s", 0, 11, 144, 1],
		[1, "s", 0, ⲆⲆΔᐃⲆ, 109, 1],
		[1, "s", ⵠⲆⵠ, 35, 101, 1],
		[ⵠΔᐃ, "s", ΔᐃΔ, 47, 109, 1],
		[1, "s", 0, 58, 111, ⵠⵠᐃ],
		[1, "s", ⵠⲆᐃ, 84, 110, 1],
		[ⲆⵠⲆ, "s", 0, 28, 114, 1],
		[1, "s", 1, 30, 116, 1],
		[1, "s", ⵠⵠᐃ, 46, 112, ⲆΔᐃ],
		[1, "s", 1, 81, 111, 1],
		[1, "s", 1, 70, 123, 1],
		[ΔⵠⲆ, "s", ᐃⲆΔ, 49, 127, ⲆⵠⲆ],
		[ⲆΔᐃ, "s", 1, 66, 134, 1],
		[1, "s", 1, 67, 144, 1],
		[1, "s", 1, 38, 152, ⵠΔΔ],
		[1, "s", ⵠΔΔ, 21, 164, ⵠΔΔ],
		[ⲆΔᐃ, "s", 1, ⵠᐃΔⵠᐃ, 147, ᐃⲆΔ],
		[Δᐃᐃ, "s", ⲆⵠⲆ, 24, 130, ⲆⵠⲆ],
		[ⲆΔᐃ, "s", 1, 12, 125, 1],
		[Δᐃᐃ, "s", 1, 65, 158, ⵠΔⲆ],
		[1, "s", 1, 83, 167, ᐃⵠⵠ],
		[1, "s", 1, 65, 167, ⵠⵠᐃ],
		[Δᐃᐃ, "s", 1, 47, 164, ᐃⵠⵠ],
		[1, "s", 1, 56, 168, 1],
		[1, "s", ᐃⵠΔⲆ, 54, 169, 1],
		[1, "s", ⲆⲆᐃⲆ, 88, 170, ᐃⵠⵠ],
		[1, "s", 2, 91, 162, Δᐃᐃ],
		[1, "s", 2, 79, 149, 1],
		[ᐃⲆΔ, "s", ΔⲆᐃⲆ, 75, 144, ⵠⵠᐃ],
		[ᐃⵠⵠ, "s", 2, 57, 150, 1],
		[ⵠΔᐃ, "s", ⵠΔᐃⵠ, 47, 143, 1],
		[1, "s", 2, 31, 145, ⵠΔΔ],
		[ᐃⲆΔ, "s", 2, 36, 138, ΔⵠⲆ],
		[ᐃⲆⲆ, "s", ⲆᐃᐃΔ, 10, 163, 1],
		[ᐃⲆⲆ, "s", Δⵠᐃᐃ, 22, 142, ⲆⵠⲆ],
		[ⵠⵠᐃ, "g", ⲆⲆΔΔ, 78, 132, Δᐃᐃ],
		[ⲆⵠⲆ, "g", 1, 48, 135, Δᐃᐃ],
		[ᐃⵠⵠ, "g", ⲆⲆᐃⲆ, ᐃΔⲆⲆⲆ, 136, 1],
		[ⵠΔᐃ, "g", ⵠⲆⵠ, 62, 92, ⵠΔΔ],
		[1, "g", 2, 70, 80, 1],
		[ᐃⲆΔ, "g", Δᐃᐃⵠ, 15, 86, Δᐃᐃ],
		[1, "g", ⲆᐃᐃΔ, 47, 75, ΔⵠⲆ],
		[1, "g", Δᐃᐃⵠ, 36, 89, 1],
		[1, "g", 2, 80, 90, 1],
		[1, "f", 1, 39, 118, ⵠΔⲆ],
		[1, "d", ⲆⲆΔΔ, 84, 54, Δᐃᐃ],
		[ⲆⵠⲆ, "d", 2, 16, 54, ⲆΔᐃ],
		[1, Δ[66], 7, ⵠᐃᐃΔΔ, ⵠᐃΔⲆⲆ, 0],
		[1, Δ[66], ⵠⵠⲆⵠ, 16, 28, ⵠⲆⵠ],
		[1, Δ[66], 5, Ⲇⵠᐃⵠᐃ, 25, ⵠⲆᐃ],
		[ⲆΔᐃ, Δ[66], ⵠⵠⲆⵠ, 34, 41, 0],
		[1, Δ[66], ⲆⵠⵠⲆ, 28, 40, 0],
		[ᐃⲆΔ, Δ[66], ΔⵠⵠⵠΔ, 31, 47, ᐃΔΔ],
		[ΔⵠⲆ, Δ[66], 6, ⲆⵠΔⵠᐃ, 39, 0],
		[ⵠΔᐃ, Δ[66], 4, 16, 47, 0],
		[1, Δ[66], 4, 7, 46, ⵠᐃΔ],
		[ⲆⵠⲆ, Δ[66], ΔⲆⵠΔΔ, ⵠⲆⵠⲆΔ, 33, ΔᐃΔ],
		[ⵠⵠᐃ, Δ[66], 6, 40, 42, 0],
		[ⵠΔⲆ, Δ[66], 7, ᐃΔⲆΔᐃ, 48, ⵠⲆᐃ],
		[ᐃⲆⲆ, Δ[66], 7, 29, 59, ᐃΔΔ],
		[1, Δ[66], 6, 27, 58, ⵠⲆᐃ],
		[1, Δ[66], 6, 15, 54, ⵠⲆⵠ],
		[ⵠΔΔ, Δ[66], 5, ⲆⵠⵠⲆⲆ, 66, ᐃΔΔ],
		[ⲆΔᐃ, Δ[66], 5, 37, 53, ⵠⲆᐃ],
		[ⵠΔΔ, Δ[66], 4, 10, 63, ᐃΔΔ],
		[1, Δ[66], ΔΔⲆⲆⲆ, 49, 48, 0],
		[1, Δ[66], 7, 37, 63, ⲆᐃⲆ],
		[ΔⵠⲆ, Δ[66], ᐃΔΔⵠΔ, 33, 68, 0],
		[ᐃⲆⲆ, Δ[66], ΔⵠⵠⵠΔ, 56, 52, 0],
		[ⲆΔᐃ, Δ[66], Δᐃⵠᐃ, 59, 58, 0],
		[ⵠΔᐃ, Δ[66], ΔⲆⵠΔΔ, 48, 58, ᐃΔΔ],
		[1, Δ[66], ᐃⵠⲆⲆ, 53, 63, 0],
		[ⵠΔΔ, Δ[66], 4, 67, 44, ᐃΔΔ],
		[ⵠΔΔ, Δ[66], ΔΔⵠΔ, 70, 49, 0],
		[1, Δ[66], 5, 82, 55, 0],
		[ⵠΔᐃ, Δ[66], 5, 79, 41, ⵠᐃΔ],
		[1, Δ[66], ⵠⵠΔⲆ, 91, 29, ⵠᐃΔ],
		[1, Δ[66], ᐃⲆᐃⲆⲆ, 91, 43, ΔᐃΔ],
		[1, Δ[66], 6, 85, 44, 0],
		[1, Δ[66], ᐃΔⵠⲆⵠ, 74, 60, 0],
		[1, Δ[66], ⲆⵠⵠⵠⲆ, 90, 8, ΔᐃΔ],
		[1, Δ[66], 5, 91, ⲆⲆᐃⵠΔ, 0],
		[ⵠΔΔ, Δ[66], 4, 87, 20, 0],
		[1, Δ[66], 7, 93, 11, ᐃΔΔ],
		[1, Δ[66], 6, 91, 21, 0],
		[1, Δ[66], 6, 85, 35, 0],
		[ᐃⲆΔ, Δ[66], 5, 93, 58, 0],
		[ⵠΔⲆ, Δ[66], 5, 87, 63, 0],
		[1, Δ[66], ΔΔⲆⲆⲆ, 77, 62, 0],
		[1, Δ[66], 6, 68, 61, 0],
		[1, Δ[66], ⵠΔΔΔ, 90, 73, 0],
		[1, Δ[66], ΔᐃΔΔ, 87, 71, ⵠᐃΔ],
		[1, Δ[66], ⲆⲆᐃⲆⵠ, 80, 71, Δⵠⵠ],
		[1, Δ[66], 7, 83, 77, ⵠⲆᐃ],
		[1, Δ[66], ΔΔⲆⲆⲆ, 89, 83, 0],
		[1, Δ[66], 4, 71, 80, 0],
		[1, Δ[66], 4, 71, 70, Δⵠⵠ],
		[1, Δ[66], 5, 63, 72, 0],
		[1, Δ[66], 4, 54, 75, ᐃΔΔ],
		[1, Δ[66], ⲆΔⲆⲆ, 44, 83, ⵠⲆⵠ],
		[ᐃⵠⵠ, Δ[66], 5, 42, 74, 0],
		[1, Δ[66], ⵠⵠΔⲆ, 15, 81, Δⵠⵠ],
		[1, Δ[66], 4, 29, 80, ⵠⲆⵠ],
		[ⵠⵠᐃ, Δ[66], 4, 37, 90, 0],
		[1, Δ[66], 4, ΔΔⲆⲆⲆ, 75, Δⵠⵠ],
		[ⵠΔⲆ, Δ[66], 6, 22, 74, Δⵠⵠ],
		[1, Δ[66], 6, 43, 95, 0],
		[ᐃⲆⲆ, Δ[66], ⲆΔΔΔΔ, 57, 85, 0],
		[1, Δ[66], 6, ΔⲆⵠⵠⵠ, 94, 0],
		[ᐃⵠⵠ, Δ[66], ᐃΔⵠⲆⵠ, ΔⲆⲆⲆⲆ, 92, ⵠⲆᐃ],
		[1, Δ[66], ⵠⵠΔⲆ, 26, 89, 0],
		[ⵠΔⲆ, Δ[66], Δᐃⵠᐃ, 31, 112, Δⵠⵠ],
		[1, Δ[66], 5, 54, 108, 0],
		[1, Δ[66], Δᐃⵠᐃ, 55, 95, 0],
		[1, Δ[66], 5, 35, 104, 0],
		[1, Δ[66], 5, 13, 110, ᐃΔΔ],
		[ⲆΔᐃ, Δ[66], ⵠΔⵠΔᐃ, 27, 107, ⵠⲆⵠ],
		[1, Δ[66], 7, 47, 99, ⵠⲆⵠ],
		[ⵠⵠᐃ, Δ[66], 7, ⵠⵠⵠⵠⵠ, 104, 0],
		[1, Δ[66], 7, ⲆⲆΔᐃⲆ, 111, ⵠᐃΔ],
		[1, Δ[66], ᐃⲆᐃⲆⲆ, 40, 114, 0],
		[Δᐃᐃ, Δ[66], 7, 28, 117, 0],
		[1, Δ[66], 7, 47, 113, ⲆᐃⲆ],
		[ⵠΔᐃ, Δ[66], ΔΔⲆⲆⲆ, 63, 104, 0],
		[ⵠΔᐃ, Δ[66], 4, 64, 92, 0],
		[1, Δ[66], 6, 86, 97, 0],
		[1, Δ[66], 5, 76, 91, 0],
		[1, Δ[66], ⵠΔΔΔ, 85, 86, 0],
		[ⲆΔᐃ, Δ[66], ⲆⵠᐃΔᐃ, 78, 83, ⵠᐃΔ],
		[ⲆΔᐃ, Δ[66], ᐃⲆⵠⲆⲆ, 71, 97, ⵠᐃΔ],
		[ΔⵠⲆ, Δ[66], 4, 69, 105, ⵠⲆⵠ],
		[Δᐃᐃ, Δ[66], 4, 79, 104, 0],
		[1, Δ[66], ⵠΔΔⵠ, 86, 109, 0],
		[1, Δ[66], ΔᐃΔⵠ, 86, 118, 0],
		[ᐃⲆΔ, Δ[66], 5, 70, 113, ⵠⲆⵠ],
		[1, Δ[66], ᐃΔᐃⲆΔ, 69, 121, 0],
		[ΔⵠⲆ, Δ[66], ΔⲆⵠΔΔ, 76, 122, 0],
		[Δᐃᐃ, Δ[66], ⵠⲆⵠⲆΔ, 87, 130, ⲆᐃⲆ],
		[ⵠΔᐃ, Δ[66], 4, 84, 123, 0],
		[1, Δ[66], 4, 57, 121, 0],
		[1, Δ[66], 5, 53, 125, 0],
		[ⲆΔᐃ, Δ[66], 5, 62, 131, ⵠᐃΔ],
		[ⲆΔᐃ, Δ[66], 6, 67, 143, 0],
		[ᐃⲆΔ, Δ[66], 5, 77, 143, Δⵠⵠ],
		[ΔⵠⲆ, Δ[66], 5, 85, 136, 0],
		[ⵠΔⲆ, Δ[66], ᐃⲆⵠⲆⲆ, 87, 147, 0],
		[1, Δ[66], Δᐃᐃⵠᐃ, 92, 140, 0],
		[ⵠⵠᐃ, Δ[66], 4, 93, 127, 0],
		[1, Δ[66], 5, 93, 106, 0],
		[1, Δ[66], 5, 45, 144, 0],
		[ⵠΔΔ, Δ[66], 4, 41, 139, 0],
		[ⲆΔᐃ, Δ[66], ΔⵠⲆᐃ, 54, 138, Δⵠⵠ],
		[ᐃⲆⲆ, Δ[66], ΔⲆⵠΔΔ, 29, 145, Δⵠⵠ],
		[1, Δ[66], 6, 29, 132, ⵠⲆⵠ],
		[ⲆΔᐃ, Δ[66], ⲆⵠᐃΔᐃ, 35, 127, 0],
		[1, Δ[66], 6, 64, 142, ⲆᐃⲆ],
		[1, Δ[66], ΔΔⵠΔ, 23, 131, ⵠᐃΔ],
		[1, Δ[66], ⲆΔⲆⲆ, 9, 134, 0],
		[ⵠⵠᐃ, Δ[66], 6, 11, 121, 0],
		[ⵠΔᐃ, Δ[66], 4, 26, 121, 0],
		[ⲆⵠⲆ, Δ[66], 35, 58, 150, ⵠⲆⵠ],
		[ⵠⵠᐃ, Δ[66], 33, 48, 156, ΔᐃΔ],
		[Δᐃᐃ, Δ[66], 33, 25, 158, 0],
		[ᐃⵠⵠ, Δ[66], 33, 36, 154, ⲆᐃⲆ],
		[ᐃⵠⵠ, Δ[66], 34, 9, 154, ⲆᐃⲆ],
		[ᐃⲆⲆ, Δ[66], 34, ᐃΔΔΔⵠ, 148, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[66], 34, 21, 142, 0],
		[ᐃⲆⲆ, Δ[66], 34, 38, 139, ⵠⲆⵠ],
		[ⲆΔᐃ, Δ[66], 34, 47, 144, 0],
		[1, Δ[66], 34, 68, 142, ΔᐃΔ],
		[1, Δ[66], 36, 70, 135, ΔᐃΔ],
		[ⵠΔᐃ, Δ[66], 36, 64, 132, 0],
		[1, Δ[66], 36, 86, 134, 0],
		[1, Δ[66], 36, 90, 141, ᐃΔΔ],
		[ⵠΔΔ, Δ[66], 36, 93, 131, ⲆᐃⲆ],
		[ΔⵠⲆ, Δ[66], 36, 91, 125, 0],
		[ᐃⵠⵠ, Δ[66], 36, 76, 123, ⵠⲆⵠ],
		[ᐃⲆⲆ, Δ[66], 33, 82, 122, Δⵠⵠ],
		[ⵠⵠᐃ, Δ[66], 35, 56, 122, ⵠⲆⵠ],
		[ⵠΔᐃ, Δ[66], 35, 40, 119, 0],
		[ⵠΔⲆ, Δ[66], 35, 17, 112, 0],
		[ᐃⲆⲆ, Δ[66], 35, 37, 102, Δⵠⵠ],
		[ⵠΔᐃ, Δ[66], 33, ⲆⲆΔⲆⵠ, 97, 0],
		[ⵠⵠᐃ, Δ[66], 34, 10, 83, 0],
		[ᐃⲆⲆ, Δ[66], 33, ⵠⲆⵠⲆⵠ, 73, 0],
		[ᐃⵠⵠ, Δ[66], 33, ⵠᐃᐃⵠⵠ, 60, 0],
		[1, Δ[66], 35, 24, 60, 0],
		[1, Δ[66], 36, ⲆⲆᐃⵠΔⵠⵠ, 45, ⲆᐃⲆ],
		[1, Δ[66], 36, 21, 42, 0],
		[ⲆΔᐃ, Δ[66], 35, ΔΔⵠⵠⵠ, 32, ⵠⲆⵠ],
		[ⵠΔⲆ, Δ[66], 33, ᐃⵠⲆⲆᐃ, 24, 0],
		[1, Δ[66], 35, 35, 27, 0],
		[ⵠΔⲆ, Δ[66], 33, 56, 35, 0],
		[ᐃⵠⵠ, Δ[66], 36, 53, 36, ⵠᐃΔ],
		[ΔⵠⲆ, Δ[66], 33, 45, 35, ᐃΔΔ],
		[1, Δ[66], 35, 53, 39, 0],
		[ⵠΔΔ, Δ[66], 36, 57, 30, 0],
		[ⲆΔᐃ, Δ[66], 33, 86, 108, ᐃΔΔ],
		[1, Δ[66], 33, 68, 112, 0],
		[1, Δ[66], 33, 49, 109, ⲆᐃⲆ],
		[ⵠΔΔ, Δ[66], 33, 46, 95, 0],
		[1, Δ[66], 33, 90, 76, 0],
		[1, Δ[66], 36, 76, 83, ⲆᐃⲆ],
		[1, Δ[66], 36, 70, 72, 0],
		[ⵠΔΔ, Δ[66], 36, 78, 63, 0],
		[ⲆΔᐃ, Δ[66], 36, 90, 64, 0],
		[1, Δ[66], 36, 60, 70, ΔᐃΔ],
		[1, Δ[66], 35, 75, 90, ᐃΔΔ],
		[ᐃⲆⲆ, Δ[66], 35, 81, 58, 0],
		[ⲆⵠⲆ, Δ[66], 35, 91, 51, ⲆᐃⲆ],
		[1, Δ[66], 35, 93, 56, Δⵠⵠ],
		[ᐃⵠⵠ, Δ[66], 35, 61, 60, ⲆᐃⲆ],
		[1, Δ[66], 35, 66, 46, 0],
		[ⵠΔⲆ, Δ[66], 33, 90, 19, 0],
		[ⵠΔΔ, Δ[66], 34, 92, 9, ΔᐃΔ],
		[1, Δ[66], 35, 75, 39, 0],
		[Δᐃᐃ, Δ[66], 35, 67, 42, ⲆᐃⲆ],
		[ⲆⵠⲆ, Δ[66], 35, 93, 37, 0],
		[1, Δ[66], 36, 89, 28, ⵠⲆⵠ],
		[1, Δ[66], 36, 42, 61, ⵠⲆⵠ],
		[1, Δ[66], 33, 49, 50, ⵠⲆⵠ],
		[1, Δ[66], 33, 44, 75, 0],
		[1, Δ[66], 33, 46, 85, 0],
		[1, Δ[66], 33, 64, 84, ⲆᐃⲆ],
		[1, Δ[66], 33, 56, 94, 0],
		[1, Δ[66], 33, 25, 90, ⵠⲆⵠ],
		[1, Δ[66], 33, 31, 69, ΔᐃΔ],
		[ᐃⲆΔ, Δ[66], 35, 34, 54, Δⵠⵠ],
		[1, Δ[66], 35, 29, 47, 0],
		[1, Δ[66], 36, 42, 41, ⵠⲆⵠ],
		[1, Δ[66], 36, 29, 34, 0],
		[1, Δ[66], 35, ⵠⲆΔᐃᐃ, 55, 0],
		[1, Δ[66], 35, 14, 52, ΔᐃΔ],
		[1, "s", 2, ⵠᐃΔⵠᐃ, 171, ⲆΔᐃ],
		[1, "r", 20, 188, ⵠⲆᐃ],
		[ᐃⲆⲆ, "r", 21, 188, 0],
		[1, "r", 22, 188, ⲆᐃⲆ],
		[1, "r", 23, 188, 0],
		[ΔⵠⲆ, "r", 24, 188, ⵠⲆᐃ],
		[Δᐃᐃ, "r", 25, 189, 0],
		[1, "r", 24, 189, 0],
		[1, "r", 23, 189, Δⵠⵠ],
		[1, "r", 22, 189, 0],
		[ΔⵠⲆ, "r", 21, 189, ᐃΔΔ],
		[1, "r", 20, 189, ⵠᐃΔ],
		[1, "r", 19, 189, ᐃΔΔ],
		[1, "r", ⲆΔᐃΔⲆ, 190, 0],
		[ⲆΔᐃ, "r", 19, 191, ⵠⲆⵠ],
		[1, "r", 20, 191, ⵠⲆⵠ],
		[1, "r", 21, 191, ΔᐃΔ],
		[ᐃⲆΔ, "r", 22, 191, 0],
		[1, "r", 24, 191, ⲆᐃⲆ],
		[1, "r", 23, 191, 0],
		[ⵠΔΔ, "r", 25, 191, ⵠⲆᐃ],
		[ΔⵠⲆ, "r", 25, 190, ᐃΔΔ],
		[1, "r", 24, 190, ᐃΔΔ],
		[1, "r", 23, 190, Δⵠⵠ],
		[ⲆΔᐃ, "r", 22, 190, ⵠᐃΔ],
		[ⵠΔΔ, "r", 21, 190, ⵠᐃΔ],
		[1, "r", 20, 190, 0],
		[1, "r", 26, 190, 0],
		[1, "r", 26, 191, 0],
		[1, "r", 24, 193, ΔᐃΔ],
		[1, "r", 23, 193, ᐃΔΔ],
		[1, "r", 22, 193, ⵠⲆⵠ],
		[ᐃⵠⵠ, "r", ⲆⲆᐃⵠⲆ, 192, ⲆᐃⲆ],
		[ⵠΔᐃ, "r", 21, 192, 0],
		[1, "r", 22, 192, ⲆᐃⲆ],
		[ᐃⵠⵠ, "r", 23, 192, 0],
		[ᐃⵠⵠ, "r", 24, 192, 0],
		[ⵠⵠᐃ, "r", 25, 192, ⵠᐃΔ],
		[ᐃⵠⵠ, "r", 53, 199, ᐃΔΔ],
		[1, "r", 52, 200, ᐃΔΔ],
		[ⵠΔᐃ, "r", 54, 199, ΔᐃΔ],
		[ⲆΔᐃ, "r", 55, 199, ⵠⲆᐃ],
		[Δᐃᐃ, "r", 55, 200, ⵠⲆᐃ],
		[1, "r", 54, 200, 0],
		[1, "r", 53, 200, 0],
		[1, "r", 51, 200, 0],
		[ⵠΔΔ, "r", 56, 200, ᐃΔΔ],
		[ᐃⵠⵠ, "r", 55, 201, 0],
		[ᐃⵠⵠ, "r", 54, 201, ΔᐃΔ],
		[ⲆΔᐃ, "r", 55, 202, 0],
		[ΔⵠⲆ, "r", 54, 203, 0],
		[1, "r", 54, 204, ⵠⲆᐃ],
		[1, "r", 54, 202, ⵠⲆⵠ],
		[1, "r", 53, 202, 0],
		[1, "r", 52, 202, 0],
		[ⵠⵠᐃ, "r", 53, 201, ᐃΔΔ],
		[1, "r", 52, 201, ⵠᐃΔ],
		[ΔⵠⲆ, "r", 51, 201, 0],
		[1, "r", 51, 202, ⵠⲆᐃ],
		[ᐃⵠⵠ, "r", 50, 202, ⵠᐃΔ],
		[ⵠΔⲆ, "r", 50, 201, 0],
		[ⲆΔᐃ, "r", 56, 201, ⵠⲆᐃ],
		[1, "r", 53, 203, 0],
		[1, "r", 52, 203, 0],
		[1, "r", 51, 203, ⵠⲆᐃ],
		[ⵠΔᐃ, "r", 56, 202, 0],
		[1, "r", 55, 203, ᐃΔΔ],
		[ⲆΔᐃ, "r", 53, 204, ⵠᐃΔ],
		[ⵠΔᐃ, "r", 52, 204, 0],
		[1, "r", 55, 204, ΔᐃΔ],
		[1, "r", 56, 203, 0],
		[ᐃⲆΔ, "r", 56, 244, ΔᐃΔ],
		[ΔⵠⲆ, "r", 54, 246, 0],
		[ⵠΔⲆ, "r", 50, 248, ⵠⲆᐃ],
		[ⲆⵠⲆ, "r", 48, 248, ⵠᐃΔ],
		[ΔⵠⲆ, "r", 43, 248, 0],
		[ⵠΔᐃ, "r", 45, 238, ⵠⲆᐃ],
		[ⲆⵠⲆ, "r", 44, 238, 0],
		[1, "r", 43, 238, 0],
		[ⵠΔΔ, "r", 46, 238, ⵠⲆⵠ],
		[1, "r", 47, 238, ⵠⲆⵠ],
		[ᐃⵠⵠ, "r", 48, 238, ⵠᐃΔ],
		[1, "r", 49, 238, 0],
		[1, "r", 50, 238, ⵠⲆⵠ],
		[ᐃⲆΔ, "r", 51, 238, 0],
		[ⵠΔⲆ, "r", 52, 238, 0],
		[ⵠΔⲆ, "r", 53, 238, 0],
		[ⵠΔᐃ, "r", 54, 239, ⲆᐃⲆ],
		[ᐃⲆⲆ, "r", 53, 240, 0],
		[1, "r", 53, 239, Δⵠⵠ],
		[1, "r", 52, 239, 0],
		[ⵠΔⲆ, "r", 51, 239, 0],
		[Δᐃᐃ, "r", 50, 239, ΔᐃΔ],
		[ΔⵠⲆ, "r", 49, 239, 0],
		[1, "r", 48, 239, 0],
		[1, "r", 47, 239, 0],
		[ᐃⵠⵠ, "r", 46, 239, 0],
		[1, "r", 45, 239, 0],
		[ⲆΔᐃ, "r", 44, 239, 0],
		[Δᐃᐃ, "r", 43, 239, 0],
		[1, "r", 42, 239, ΔᐃΔ],
		[1, "r", 41, 240, ⲆᐃⲆ],
		[ⵠΔΔ, "r", 42, 240, ΔᐃΔ],
		[Δᐃᐃ, "r", 43, 240, 0],
		[Δᐃᐃ, "r", 44, 240, 0],
		[ᐃⵠⵠ, "r", 45, 240, 0],
		[ᐃⲆΔ, "r", 46, 240, ⲆᐃⲆ],
		[ᐃⵠⵠ, "r", 47, 240, 0],
		[1, "r", 48, 240, 0],
		[ⲆⵠⲆ, "r", 49, 240, 0],
		[1, "r", 50, 240, ⵠⲆᐃ],
		[1, "r", 51, 240, ⵠⲆⵠ],
		[ⲆΔᐃ, "r", 52, 240, 0],
		[1, "r", 54, 240, ⵠⲆⵠ],
		[ⵠΔⲆ, "r", 55, 240, 0],
		[1, "r", 56, 241, ΔᐃΔ],
		[ⲆΔᐃ, "r", 55, 241, 0],
		[ⵠΔⲆ, "r", 54, 241, 0],
		[ᐃⵠⵠ, "r", 53, 241, 0],
		[1, "r", 52, 241, 0],
		[1, "r", 51, 241, ΔᐃΔ],
		[1, "r", 49, 241, 0],
		[Δᐃᐃ, "r", 50, 241, 0],
		[1, "r", 48, 241, ⵠⲆᐃ],
		[1, "r", 47, 241, 0],
		[1, "r", 46, 241, 0],
		[ⵠΔΔ, "r", 45, 241, 0],
		[1, "r", 44, 241, 0],
		[ᐃⲆⲆ, "r", 43, 241, 0],
		[ⵠΔⲆ, "r", 42, 241, ᐃΔΔ],
		[1, "r", 41, 241, 0],
		[ΔⵠⲆ, "r", 40, 242, ᐃΔΔ],
		[1, "r", 41, 242, ΔᐃΔ],
		[1, "r", 42, 242, ⵠⲆᐃ],
		[ⲆΔᐃ, "r", 43, 242, 0],
		[ⵠΔⲆ, "r", 44, 242, 0],
		[1, "r", 45, 242, ⵠⲆⵠ],
		[ⲆⵠⲆ, "r", 46, 242, Δⵠⵠ],
		[Δᐃᐃ, "r", 47, 242, ⵠᐃΔ],
		[1, "r", 48, 242, 0],
		[1, "r", 49, 242, ⵠⲆᐃ],
		[ΔⵠⲆ, "r", 50, 242, ⵠⲆⵠ],
		[Δᐃᐃ, "r", 51, 242, 0],
		[ⵠΔⲆ, "r", 52, 242, 0],
		[ⵠΔΔ, "r", 53, 242, 0],
		[1, "r", 54, 242, ᐃΔΔ],
		[1, "r", 55, 242, 0],
		[ΔⵠⲆ, "r", 56, 242, ⵠᐃΔ],
		[Δᐃᐃ, "r", 56, 243, ⲆᐃⲆ],
		[ⲆΔᐃ, "r", 55, 243, Δⵠⵠ],
		[ⵠΔᐃ, "r", 54, 243, 0],
		[1, "r", 53, 243, ΔᐃΔ],
		[Δᐃᐃ, "r", 52, 243, Δⵠⵠ],
		[ⲆΔᐃ, "r", 51, 243, ⵠⲆᐃ],
		[Δᐃᐃ, "r", 50, 243, 0],
		[1, "r", 49, 243, ⲆᐃⲆ],
		[1, "r", 48, 243, 0],
		[1, "r", 47, 243, ΔᐃΔ],
		[Δᐃᐃ, "r", 46, 243, ⲆᐃⲆ],
		[ⵠΔⲆ, "r", 45, 243, Δⵠⵠ],
		[1, "r", 44, 243, Δⵠⵠ],
		[1, "r", 43, 243, ⵠᐃΔ],
		[1, "r", 42, 243, 0],
		[1, "r", 41, 243, 0],
		[1, "r", 40, 243, 0],
		[ⲆⵠⲆ, "r", 40, 244, 0],
		[1, "r", 41, 244, 0],
		[ⲆΔᐃ, "r", 43, 244, ⲆᐃⲆ],
		[1, "r", 44, 244, 0],
		[1, "r", 45, 244, ⵠⲆᐃ],
		[1, "r", 46, 244, Δⵠⵠ],
		[ⲆⵠⲆ, "r", 47, 244, ⲆᐃⲆ],
		[1, "r", 48, 244, ᐃΔΔ],
		[1, "r", 49, 244, ⵠᐃΔ],
		[1, "r", 50, 244, 0],
		[1, "r", 51, 244, 0],
		[1, "r", 52, 244, ⵠⲆᐃ],
		[1, "r", 53, 244, ⵠⲆⵠ],
		[ᐃⵠⵠ, "r", 54, 244, 0],
		[ⵠⵠᐃ, "r", 55, 244, 0],
		[ΔⵠⲆ, "r", 42, 244, 0],
		[ᐃⵠⵠ, "r", 40, 245, 0],
		[1, "r", 41, 245, 0],
		[1, "r", 42, 245, Δⵠⵠ],
		[1, "r", 43, 245, 0],
		[ᐃⵠⵠ, "r", 44, 245, ⲆᐃⲆ],
		[ⵠΔⲆ, "r", 45, 245, Δⵠⵠ],
		[1, "r", 46, 245, 0],
		[ⵠΔΔ, "r", 47, 245, 0],
		[1, "r", 48, 245, ⵠᐃΔ],
		[ᐃⵠⵠ, "r", 49, 245, Δⵠⵠ],
		[1, "r", 50, 245, 0],
		[ⵠΔΔ, "r", 51, 245, ᐃΔΔ],
		[ⲆⵠⲆ, "r", 52, 246, ⵠⲆⵠ],
		[1, "r", 52, 245, 0],
		[1, "r", 53, 245, 0],
		[1, "r", 54, 245, 0],
		[ᐃⲆΔ, "r", 55, 245, ⵠⲆᐃ],
		[1, "r", 53, 246, ⵠⲆⵠ],
		[1, "r", 51, 246, ⲆᐃⲆ],
		[1, "r", 50, 246, ⵠⲆⵠ],
		[1, "r", 49, 246, ⵠⲆⵠ],
		[ᐃⲆⲆ, "r", 48, 246, 0],
		[ⲆΔᐃ, "r", 47, 246, ⲆᐃⲆ],
		[1, "r", 45, 246, ⲆᐃⲆ],
		[ⵠΔᐃ, "r", 46, 246, ⲆᐃⲆ],
		[ⵠΔⲆ, "r", 44, 246, 0],
		[ⵠΔΔ, "r", 43, 246, ⲆᐃⲆ],
		[1, "r", 42, 246, ⵠⲆⵠ],
		[1, "r", 41, 246, ΔᐃΔ],
		[1, "r", 42, 247, ⵠᐃΔ],
		[1, "r", 43, 247, ⵠⲆᐃ],
		[ⲆⵠⲆ, "r", 44, 247, 0],
		[ⲆⵠⲆ, "r", 45, 247, ᐃΔΔ],
		[ⵠΔᐃ, "r", 46, 247, Δⵠⵠ],
		[ⵠΔⲆ, "r", 47, 247, 0],
		[1, "r", 48, 247, 0],
		[1, "r", 50, 247, 0],
		[1, "r", 51, 247, Δⵠⵠ],
		[1, "r", 52, 247, ⲆᐃⲆ],
		[1, "r", 53, 247, ⵠᐃΔ],
		[ⵠΔⲆ, "r", 54, 247, ⲆᐃⲆ],
		[ⲆΔᐃ, "r", 49, 247, ΔᐃΔ],
		[ⲆΔᐃ, "r", 49, 248, 0],
		[1, "r", 47, 248, ᐃΔΔ],
		[1, "r", 46, 248, 0],
		[1, "r", 45, 248, ᐃΔΔ],
		[1, "r", 51, 248, 0],
		[1, "r", 55, 246, 1],
		[1, "r", 55, 247, 1],
		[ⵠΔⲆ, "r", 56, 247, ⲆΔᐃ],
		[ΔⵠⲆ, "r", 56, 248, 1],
		[ᐃⲆⲆ, "r", 95, 270, ⵠⵠᐃ],
		[1, "r", 93, 270, ΔⵠⲆ],
		[1, "r", 94, 270, ᐃⲆΔ],
		[ⵠΔᐃ, "r", 95, 271, 1],
		[ᐃⵠⵠ, "r", 94, 271, ᐃⲆΔ],
		[Δᐃᐃ, "r", 93, 271, ⵠΔΔ],
		[1, "r", 94, 282, 1],
		[ⲆⵠⲆ, "r", 93, 282, 1],
		[1, "r", 93, 281, ΔⵠⲆ],
		[ᐃⲆⲆ, "r", 92, 281, 1],
		[ᐃⲆⲆ, "r", 92, 280, ⵠΔⲆ],
		[ⲆⵠⲆ, "r", 91, 280, Δᐃᐃ],
		[1, "r", 90, 279, ⲆⵠⲆ],
		[1, "r", 95, 275, 1],
		[ⵠΔΔ, "r", 95, 274, 1],
		[ⵠΔⲆ, "r", 95, 273, Δᐃᐃ],
		[ⲆⵠⲆ, "r", 95, 272, 1],
		[1, "r", 94, 274, 1],
		[ⵠΔΔ, "r", 94, 273, ⵠΔΔ],
		[ⲆΔᐃ, "r", 94, 272, ⲆΔᐃ],
		[ⵠΔΔ, "r", 93, 272, 1],
		[ᐃⲆⲆ, "r", 93, 273, ΔⵠⲆ],
		[ⵠΔᐃ, "r", 93, 274, ᐃⵠⵠ],
		[1, "r", 92, 273, 1],
		[1, "r", 92, 272, ⲆⵠⲆ],
		[1, "r", 92, 270, 1],
		[ⲆⵠⲆ, "r", 92, 271, ΔⵠⲆ],
		[1, "r", 92, 269, 1],
		[1, "r", 90, 269, 1],
		[1, "r", 91, 269, 1],
		[1, "r", 91, 271, 1],
		[1, "r", 91, 270, 1],
		[ⲆⵠⲆ, "r", 95, 278, 1],
		[1, "r", 95, 277, ᐃⵠⵠ],
		[1, "r", 95, 276, 1],
		[ⵠΔⲆ, "r", 94, 276, ᐃⵠⵠ],
		[1, "r", 94, 275, ᐃⲆΔ],
		[1, "r", 93, 275, ⵠⵠᐃ],
		[1, "r", 92, 274, ⵠΔⲆ],
		[ⵠⵠᐃ, "r", 92, 275, 1],
		[ⵠΔᐃ, "r", 91, 275, ⵠⵠᐃ],
		[1, "r", 90, 275, 1],
		[ⵠΔᐃ, "r", 89, 274, 1],
		[1, "r", 90, 274, ⲆΔᐃ],
		[ⵠΔΔ, "r", 89, 275, 1],
		[ⲆΔᐃ, "r", 88, 274, ⵠΔⲆ],
		[1, "r", 88, 273, ⵠΔΔ],
		[1, "r", 86, 272, ΔⵠⲆ],
		[1, "r", 85, 271, ⵠΔᐃ],
		[ᐃⵠⵠ, "r", 86, 271, ⵠΔΔ],
		[ᐃⲆⲆ, "r", 87, 272, 1],
		[ⵠⵠᐃ, "r", 55, 248, ΔⵠⲆ],
		[1, "r", 54, 248, ᐃⲆΔ],
		[ⵠΔⲆ, "r", 56, 249, ⲆΔᐃ],
		[ⵠⵠᐃ, "r", 55, 249, ᐃⵠⵠ],
		[1, "r", 55, 250, ⵠΔⲆ],
		[ᐃⲆⲆ, "r", 56, 250, 1],
		[1, "r", 57, 250, ΔⵠⲆ],
		[ⵠΔⲆ, "r", 57, 249, 1],
		[ⲆⵠⲆ, "r", 59, 250, 1],
		[ᐃⲆΔ, "r", 58, 250, ᐃⲆⲆ],
		[1, "r", 60, 250, ᐃⲆⲆ],
		[ᐃⵠⵠ, "r", 61, 251, 1],
		[ᐃⵠⵠ, "r", 60, 251, 1],
		[1, "r", 62, 251, ᐃⲆΔ],
		[ⵠⵠᐃ, "r", 62, 252, 1],
		[1, "r", 63, 252, ᐃⲆΔ],
		[ᐃⵠⵠ, "r", 58, 251, ⲆⵠⲆ],
		[1, "r", 57, 251, 1],
		[1, "r", 56, 251, 1],
		[1, "r", 58, 252, ⵠΔᐃ],
		[ⵠΔⲆ, "r", 57, 252, ⵠⵠᐃ],
		[ᐃⲆΔ, "r", 57, 253, ᐃⲆΔ],
		[ᐃⵠⵠ, "r", 58, 253, 1],
		[ⵠΔΔ, "r", 58, 254, ⲆΔᐃ],
		[1, "r", 59, ᐃᐃᐃⲆⵠᐃⵠ, ᐃⲆΔ],
		[ⲆⵠⲆ, "r", 58, ᐃⵠⲆᐃⲆ, ΔⵠⲆ],
		[1, "r", 57, 254, 1],
		[ΔⵠⲆ, "r", 56, 252, ⲆⵠⲆ],
		[ⵠΔᐃ, "r", 55, 251, ⲆΔᐃ],
		[1, "r", 60, ⲆΔⵠᐃⲆⵠⵠ, 1],
		[ⵠⵠᐃ, "r", 61, 255, 1],
		[1, "r", 61, 256, ⵠⵠᐃ],
		[1, "r", 60, ⵠⲆΔⵠᐃᐃΔ, ⵠΔᐃ],
		[ⲆΔᐃ, "r", 62, ΔᐃΔΔΔΔΔ, ΔⵠⲆ],
		[Δᐃᐃ, "r", 62, 257, 1],
		[1, "r", 61, 257, ᐃⲆΔ],
		[1, "r", 64, 253, ΔⵠⲆ],
		[1, "r", 64, 254, ᐃⵠⵠ],
		[Δᐃᐃ, "r", 65, 254, 1],
		[1, "r", 61, 250, ⵠΔⲆ],
		[ᐃⲆΔ, "r", 64, 252, 1],
		[1, "r", 65, 253, ⵠΔΔ],
		[ⵠⵠᐃ, "r", 66, 254, ⲆΔᐃ],
		[1, "r", 65, ᐃΔᐃⵠΔ, 1],
		[ΔⵠⲆ, "r", 64, 255, ᐃⲆΔ],
		[ⵠΔⲆ, "r", 64, 256, Δᐃᐃ],
		[1, "r", 65, ⵠⲆⵠᐃⲆΔΔ, ⵠΔᐃ],
		[ᐃⵠⵠ, "r", 65, 257, 1],
		[1, "r", 64, 257, 1],
		[1, "r", 63, 257, ⵠΔⲆ],
		[1, "r", 62, 258, 1],
		[1, "r", 63, 258, ⵠΔΔ],
		[ⵠΔΔ, "r", 64, 258, ᐃⲆⲆ],
		[ⲆⵠⲆ, "r", 66, ᐃΔᐃⵠΔⲆᐃ, ᐃⵠⵠ],
		[1, "r", 66, 256, 1],
		[ΔⵠⲆ, "r", 66, 257, 1],
		[ⵠΔⲆ, "r", 66, 258, 1],
		[1, "r", 65, 258, 1],
		[ⲆⵠⲆ, "r", 67, 258, 1],
		[ⲆΔᐃ, "r", 67, 257, Δᐃᐃ],
		[ᐃⲆΔ, "r", 67, 259, ΔⵠⲆ],
		[ᐃⲆⲆ, "r", 66, 259, ⵠⵠᐃ],
		[ᐃⲆΔ, "r", 65, 259, 1],
		[1, "r", 56, 246, ᐃⵠⵠ],
		[ΔⵠⲆ, "r", 56, 245, ᐃⲆΔ],
		[1, "r", 68, 258, ⵠⵠᐃ],
		[1, "r", 68, 259, ⵠΔΔ],
		[1, "r", 68, 260, 1],
		[1, "r", 69, 260, 1],
		[Δᐃᐃ, "r", 69, 261, 1],
		[1, "r", 70, 261, 1],
		[1, "r", 71, 261, 1],
		[ᐃⲆⲆ, "r", 67, 260, 1],
		[ⵠΔΔ, "r", 89, 269, 1],
		[1, "r", 89, 268, ᐃⵠⵠ],
		[ⵠΔⲆ, "r", 90, 268, 1],
		[1, "r", 82, 267, 1],
		[Δᐃᐃ, "r", 83, 267, 1],
		[1, "r", 80, 266, 1],
		[Δᐃᐃ, "r", 81, 266, 1],
		[1, "r", 81, 267, 1],
		[1, "r", 79, 266, 1],
		[1, "r", 78, 265, ΔⵠⲆ],
		[1, "r", 77, 265, ⲆⵠⲆ],
		[ᐃⵠⵠ, "r", 76, 264, ⵠⵠᐃ],
		[ᐃⵠⵠ, "r", 75, 264, 1],
		[1, "r", 75, 263, 1],
		[ⲆⵠⲆ, "r", 74, 263, Δᐃᐃ],
		[ⵠⵠᐃ, "r", 74, 262, ⵠΔΔ],
		[ᐃⵠⵠ, "r", 72, 262, Δᐃᐃ],
		[1, "r", 73, 262, 1],
		[1, "r", 71, 262, ⵠΔᐃ],
		[1, "r", 85, 270, ⲆⵠⲆ],
		[1, "r", 84, 270, 1],
		[1, "r", 84, 269, Δᐃᐃ],
		[ΔⵠⲆ, "r", 83, 269, ⵠΔᐃ],
		[1, "r", 82, 269, 1],
		[ⵠΔΔ, "r", 81, 269, ⵠΔⲆ],
		[ᐃⵠⵠ, "r", 81, 268, 1],
		[1, "r", 82, 268, ⵠΔᐃ],
		[1, "r", 83, 268, Δᐃᐃ],
		[1, "r", 80, 268, ⵠⵠᐃ],
		[ⵠΔⲆ, "r", 80, 267, Δᐃᐃ],
		[ⲆⵠⲆ, "r", 79, 267, ⲆΔᐃ],
		[ᐃⲆⲆ, "r", 78, 266, 1],
		[ᐃⵠⵠ, "r", 76, 265, ⲆⵠⲆ],
		[1, "r", 75, 262, 1],
		[1, "r", 90, 280, ⵠΔᐃ],
		[ᐃⲆΔ, "r", 89, 280, ΔⵠⲆ],
		[ⲆⵠⲆ, "r", 89, 279, 1],
		[ᐃⲆⲆ, "r", 88, 279, 1],
		[ⲆⵠⲆ, "r", 88, 278, 1],
		[1, "r", 87, 277, 1],
		[ⵠΔΔ, "r", 86, 276, 1],
		[ⵠΔᐃ, "r", 86, 275, ⲆⵠⲆ],
		[1, "r", 86, 274, ⵠΔⲆ],
		[ⵠⵠᐃ, "r", 86, 273, ᐃⵠⵠ],
		[ᐃⲆⲆ, "r", 85, 273, 1],
		[ᐃⲆⲆ, "r", 85, 272, 1],
		[ⵠΔΔ, "r", 85, 274, ⵠΔᐃ],
		[1, "r", 86, 277, ⲆⵠⲆ],
		[1, "r", 87, 278, ᐃⲆΔ],
		[ⲆⵠⲆ, "r", 84, 271, 1],
		[1, "r", 83, 270, 1],
		[ΔⵠⲆ, "r", 87, 273, ΔⵠⲆ],
		[1, "r", 91, 274, 1],
		[Δᐃᐃ, "r", 89, 273, 1],
		[1, "r", 88, 272, ⵠΔᐃ],
		[1, "r", 91, 281, ⵠⵠᐃ],
		[1, "r", 92, 282, 1],
		[ᐃⲆⲆ, "r", 88, 280, ⵠΔΔ],
		[1, "r", 87, 279, 1],
		[ᐃⵠⵠ, "r", 85, 275, 1],
		[1, "r", 84, 273, 1],
		[1, "r", 84, 272, ⲆΔᐃ],
		[1, "r", 83, 271, 1],
		[1, "r", 82, 270, ⵠΔΔ],
		[Δᐃᐃ, "r", 84, 267, 0],
		[ᐃⲆⲆ, "r", 85, 267, 0],
		[ⲆⵠⲆ, "r", 76, 262, 0],
		[ⵠΔⲆ, "r", 77, 262, Δⵠⵠ],
		[1, "r", 88, 268, 0],
		[ⲆΔᐃ, "r", 78, 262, 0],
		[ⲆΔᐃ, "r", 79, 262, ⵠᐃΔ],
		[1, "r", 80, 262, ᐃΔΔ],
		[ᐃⲆⲆ, "r", 80, 263, 0],
		[ⵠΔΔ, "r", 81, 263, 0],
		[ᐃⲆΔ, "r", 82, 263, ⲆᐃⲆ],
		[1, "r", 83, 263, 0],
		[ⵠΔⲆ, "r", 84, 263, ⵠᐃΔ],
		[1, "r", 85, 263, 0],
		[1, "r", 88, 262, Δⵠⵠ],
		[ⲆΔᐃ, "r", 89, 262, ᐃΔΔ],
		[1, "r", 90, 262, 0],
		[1, "r", 87, 262, ⵠᐃΔ],
		[ᐃⲆΔ, "r", 86, 262, ⵠⲆⵠ],
		[1, "r", 86, 263, ⵠⲆᐃ],
		[1, "r", 87, 263, ⵠⲆⵠ],
		[ΔⵠⲆ, "r", 91, 262, 0],
		[1, "r", 95, 262, ⵠⲆᐃ],
		[1, "r", 94, 262, ⵠⲆⵠ],
		[ΔⵠⲆ, "r", 86, 267, 0],
		[1, "r", 87, 267, 0],
		[ⲆΔᐃ, "r", 87, 268, ⲆᐃⲆ],
		[ΔⵠⲆ, "r", 86, 268, ΔᐃΔ],
		[ⵠΔΔ, "r", 74, 189, 0],
		[ⵠΔΔ, "r", 75, 189, 0],
		[ⵠΔᐃ, "r", 76, 189, ⵠⲆⵠ],
		[1, "r", 77, 189, 0],
		[1, "r", 78, 190, 0],
		[ᐃⲆΔ, "r", 77, 190, Δⵠⵠ],
		[Δᐃᐃ, "r", 75, 190, ᐃΔΔ],
		[1, "r", 76, 190, ⵠⲆᐃ],
		[1, "r", 74, 190, ⵠⲆⵠ],
		[1, "r", 73, 190, Δⵠⵠ],
		[ᐃⲆΔ, "r", 78, 191, ⲆᐃⲆ],
		[1, "r", 76, 191, Δⵠⵠ],
		[ᐃⲆⲆ, "r", 77, 191, 0],
		[1, "r", 75, 191, ⵠⲆᐃ],
		[ᐃⵠⵠ, "r", 74, 191, ᐃΔΔ],
		[1, "r", 78, 192, Δⵠⵠ],
		[ᐃⵠⵠ, "r", 77, 192, ΔᐃΔ],
		[1, "r", 76, 192, 0],
		[ⵠΔΔ, "r", 75, 192, 0],
		[ⲆⵠⲆ, "r", 74, 192, ⲆᐃⲆ],
		[1, "r", 73, 191, ⲆᐃⲆ],
		[ⵠΔᐃ, "f", ⲆΔᐃ, 96, 22, ᐃⵠⵠ],
		[ⵠΔᐃ, "s", 1, 97, 22, ᐃⲆⲆ],
		[1, "f", ⵠΔΔ, 98, 22, ΔⵠⲆ],
		[1, "s", ΔᐃΔ, 99, 22, 1],
		[ⲆⵠⲆ, "s", ⵠΔⲆ, ⵠⲆΔᐃΔ, 21, ⲆΔᐃ],
		[Δᐃᐃ, "s", 1, 96, 49, 1],
		[ⲆⵠⲆ, "s", ᐃⵠⵠ, ⵠⲆΔᐃΔ, 50, ᐃⲆΔ],
		[ⲆⵠⲆ, "s", Δⵠⵠ, 99, 49, 1],
		[1, "s", ⲆᐃⲆ, 97, 49, 1],
		[ᐃⵠⵠ, "f", 1, 98, 49, ᐃⲆⲆ],
		[1, "r", 70, 218, ⵠⲆᐃ],
		[1, "r", 71, 218, 0],
		[1, "r", 72, 218, ⵠᐃΔ],
		[ⵠΔᐃ, "r", 73, 218, 0],
		[1, "r", 74, 219, 0],
		[ⵠΔᐃ, "r", 73, 219, 0],
		[ⵠΔᐃ, "r", 72, 219, 0],
		[1, "r", 71, 219, Δⵠⵠ],
		[1, "r", 70, 219, 0],
		[ⵠⵠᐃ, "r", 73, 220, ⲆᐃⲆ],
		[ᐃⵠⵠ, "r", 72, 220, 0],
		[1, "r", 71, 220, ΔᐃΔ],
		[1, "r", 72, 221, ⵠᐃΔ],
		[ᐃⲆΔ, "r", 71, 221, ΔᐃΔ],
		[1, "r", 70, 221, 0],
		[ᐃⲆⲆ, "r", 69, 221, Δⵠⵠ],
		[ⵠΔⲆ, "r", 68, 221, ⵠᐃΔ],
		[ⲆΔᐃ, "r", 70, 220, ⲆᐃⲆ],
		[1, "r", 69, 220, 0],
		[1, "r", 69, 219, ⵠⲆᐃ],
		[ᐃⲆⲆ, "r", 68, 220, 0],
		[ⵠΔᐃ, "r", 73, 221, ⲆᐃⲆ],
		[ᐃⲆΔ, "r", 73, 222, ᐃΔΔ],
		[1, "r", 71, 222, ⵠᐃΔ],
		[ᐃⵠⵠ, "r", 72, 222, Δⵠⵠ],
		[ⵠΔᐃ, "r", 74, 221, Δⵠⵠ],
		[ⲆΔᐃ, "r", 74, 220, 0],
		[1, "r", 75, 220, 0],
		[1, "r", 75, 221, ⵠⲆⵠ],
		[1, "r", 70, 222, 0],
		[ᐃⲆΔ, "r", 69, 222, ᐃΔΔ],
		[1, "r", 29, 217, ⲆᐃⲆ],
		[1, "r", 30, 217, 0],
		[1, "r", 31, 217, Δⵠⵠ],
		[ᐃⲆΔ, "r", 32, 217, ΔᐃΔ],
		[ᐃⲆΔ, "r", 31, 219, ⵠⲆᐃ],
		[ΔⵠⲆ, "r", 30, 219, 0],
		[1, "r", 29, 219, ᐃΔΔ],
		[ⵠΔΔ, "r", 27, 219, 0],
		[ⲆΔᐃ, "r", 25, 219, 0],
		[Δᐃᐃ, "r", 26, 219, 0],
		[ⵠΔΔ, "r", 28, 219, ⵠᐃΔ],
		[ⵠΔᐃ, "r", 26, 218, Δⵠⵠ],
		[1, "r", 27, 218, 0],
		[ᐃⲆⲆ, "r", 28, 218, ⵠⲆᐃ],
		[1, "r", 29, 218, ⵠⲆᐃ],
		[ᐃⲆⲆ, "r", 30, 218, 0],
		[Δᐃᐃ, "r", 28, 217, ⵠᐃΔ],
		[ⵠⵠᐃ, "r", 26, 217, 0],
		[ⲆΔᐃ, "r", 27, 217, ⵠⲆᐃ],
		[1, "r", 28, 216, ⵠⲆᐃ],
		[ⵠΔᐃ, "r", 29, 216, ⲆᐃⲆ],
		[ⲆΔᐃ, "r", 30, 216, 0],
		[1, "r", 31, 218, 0],
		[ᐃⲆⲆ, "r", 32, 218, ⵠⲆⵠ],
		[1, "r", 31, 216, 0],
		[ᐃⲆΔ, "r", 31, 221, 0],
		[1, "r", 31, 220, 0],
		[1, "r", 30, 220, Δⵠⵠ],
		[1, "r", 29, 220, 0],
		[1, "r", 28, 220, ΔᐃΔ],
		[1, "r", 27, 220, Δⵠⵠ],
		[ΔⵠⲆ, "r", 26, 220, 0],
		[1, "r", 25, 218, ⲆᐃⲆ],
		[1, "r", 27, 221, 0],
		[1, "r", 28, 221, 0],
		[1, "r", 29, 221, ⵠᐃΔ],
		[1, "r", 30, 221, 0],
		[1, "r", 32, 220, ᐃΔΔ],
		[ⲆΔᐃ, "r", 32, 219, 0],
		[ⵠΔⲆ, "r", 33, 218, 0],
		[1, "r", 33, 219, ᐃΔΔ],
		[Δᐃᐃ, "r", 75, 238, 0],
		[ΔⵠⲆ, "r", 76, 238, 0],
		[ⵠΔⲆ, "r", 77, 239, 0],
		[1, "r", 76, 239, 0],
		[1, "r", 75, 239, 0],
		[1, "r", 74, 239, 0],
		[1, "r", 76, 240, Δⵠⵠ],
		[1, "r", 77, 240, ΔᐃΔ],
		[ᐃⲆⲆ, "r", 78, 240, ⲆᐃⲆ],
		[1, "r", 77, 241, 0],
		[ⵠΔⲆ, "r", 76, 241, 0],
		[1, "r", 75, 241, Δⵠⵠ],
		[ΔⵠⲆ, "r", 75, 240, 0],
		[ΔⵠⲆ, "r", 74, 240, ⲆᐃⲆ],
		[1, "r", 78, 239, 0],
		[1, "r", 77, 238, ⲆᐃⲆ],
		[1, "r", 18, 253, 0],
		[ⵠⵠᐃ, "r", ⲆΔᐃΔⲆ, 252, ᐃΔΔ],
		[ⵠΔΔ, "r", ᐃΔⲆΔᐃ, 252, 0],
		[ⵠΔᐃ, "r", 21, 253, Δⵠⵠ],
		[ⲆΔᐃ, "r", 23, 254, ᐃΔΔ],
		[ⲆⵠⲆ, "r", 20, 254, ΔᐃΔ],
		[1, "r", 19, 254, ⵠⲆᐃ],
		[ⲆⵠⲆ, "r", 22, 254, 0],
		[ᐃⲆΔ, "r", 18, 254, ⵠᐃΔ],
		[ⵠⵠᐃ, "r", 19, 253, ⵠⲆᐃ],
		[1, "r", 20, 253, 0],
		[1, "r", 21, 254, 0],
		[ⵠΔᐃ, "r", 22, 253, 0],
		[ⲆⵠⲆ, "r", 21, ᐃΔᐃⵠΔⲆᐃ, ᐃΔΔ],
		[1, "r", 20, 255, ⲆᐃⲆ],
		[ⵠΔΔ, "r", ᐃᐃΔΔᐃ, ᐃⵠⲆᐃⲆ, ⵠⲆⵠ],
		[ⵠΔⲆ, "r", 18, ⲆΔⵠᐃⲆⵠⵠ, 0],
		[1, "r", ΔⲆⲆⲆⵠ, 255, 0],
		[1, "r", ΔⲆⲆⲆⵠ, 254, 0],
		[1, "r", 22, ⲆᐃᐃⵠⵠⲆⲆ, ⵠⲆᐃ],
		[1, "r", ⵠⲆⵠⲆⵠ, ⵠΔⵠⲆᐃΔᐃ, ΔᐃΔ],
		[ᐃⲆⲆ, "r", ⲆⲆᐃⵠⲆ, 256, 0],
		[1, "r", 21, 256, ⵠⲆᐃ],
		[1, "r", 39, 270, ⵠᐃΔ],
		[1, "r", 40, 270, ⵠⲆⵠ],
		[1, "r", 41, 270, Δⵠⵠ],
		[ⲆΔᐃ, "r", 43, 270, 0],
		[Δᐃᐃ, "r", 44, 270, ᐃΔΔ],
		[ⲆΔᐃ, "r", 46, 270, ⲆᐃⲆ],
		[1, "r", 42, 270, 0],
		[ⲆΔᐃ, "r", 45, 270, Δⵠⵠ],
		[ᐃⲆⲆ, "r", 44, 269, 0],
		[1, "r", 43, 269, ᐃΔΔ],
		[1, "r", 42, 269, 0],
		[1, "r", 40, 269, 0],
		[1, "r", 41, 269, 0],
		[1, "r", 45, 271, 0],
		[1, "r", 44, 271, 0],
		[1, "r", 43, 271, ⵠⲆⵠ],
		[ⵠΔⲆ, "r", 42, 271, 0],
		[1, "r", 41, 271, ⵠⲆⵠ],
		[ᐃⵠⵠ, "r", 40, 271, 0],
		[ᐃⵠⵠ, "r", 39, 271, ⲆᐃⲆ],
		[1, "r", 46, 271, ΔᐃΔ],
		[1, "r", 45, 272, 0],
		[ⵠΔΔ, "r", 44, 272, 0],
		[ⵠΔⲆ, "r", 43, 272, 0],
		[1, "r", 42, 272, 0],
		[ᐃⵠⵠ, "r", 19, 284, ⵠᐃΔ],
		[1, "r", ⲆⵠⵠΔⵠ, 284, ⵠⲆᐃ],
		[1, "r", 21, 285, ⵠⲆⵠ],
		[ⲆⵠⲆ, "r", 22, 285, Δⵠⵠ],
		[1, "r", 23, 286, 0],
		[1, "r", 22, 288, 0],
		[Δᐃᐃ, "r", ΔΔᐃⲆΔ, 288, ⵠⲆⵠ],
		[1, "r", 18, 288, Δⵠⵠ],
		[1, "r", ΔᐃⲆⵠΔᐃᐃ, 287, ⲆᐃⲆ],
		[ⵠΔΔ, "r", 16, 287, ⵠᐃΔ],
		[1, "r", ᐃΔⲆⲆⲆ, 286, 0],
		[1, "r", ᐃΔⵠⵠΔ, 286, Δⵠⵠ],
		[ⵠΔᐃ, "r", ⲆᐃΔΔⵠ, 286, 0],
		[ⲆⵠⲆ, "r", 19, 286, Δⵠⵠ],
		[1, "r", ᐃⵠⲆᐃΔ, 286, 0],
		[1, "r", 21, 286, ᐃΔΔ],
		[1, "r", 22, 286, ⲆᐃⲆ],
		[ΔⵠⲆ, "r", ᐃⵠⲆᐃΔ, 285, 0],
		[ⲆⵠⲆ, "r", 19, 285, 0],
		[1, "r", ⲆΔⵠΔᐃ, 285, ⵠⲆᐃ],
		[1, "r", 17, 285, 0],
		[1, "r", 19, 287, 0],
		[ⲆⵠⲆ, "r", 18, 287, ⲆᐃⲆ],
		[ⵠΔΔ, "r", ⲆΔⲆΔᐃ, 287, 0],
		[ⲆΔᐃ, "r", 21, 287, ⵠⲆⵠ],
		[ⵠΔᐃ, "r", 22, 287, 0],
		[ᐃⵠⵠ, "r", 23, 287, ⵠᐃΔ],
		[ᐃⵠⵠ, "r", 21, 288, ⵠᐃΔ],
		[1, "r", ᐃΔⵠⲆⲆ, 288, ⲆᐃⲆ],
		[ᐃⲆⲆ, "r", 17, 288, 0],
		[1, "r", ΔⲆⵠⵠⵠ, 289, 0],
		[1, "r", 21, 289, 0],
		[ᐃⲆⲆ, "r", 22, 289, 0],
		[1, "r", 20, 289, 0],
		[ᐃⵠⵠ, "r", 23, 288, Δⵠⵠ],
		[ⵠⵠᐃ, "r", 24, 287, ⲆᐃⲆ],
		[ᐃⲆⲆ, "r", 24, 286, 0],
		[Δᐃᐃ, "r", 23, 285, ΔᐃΔ],
		[1, "r", 66, 286, 0],
		[1, "r", 64, 287, ⵠⲆⵠ],
		[1, "r", 63, 287, 0],
		[ⵠΔᐃ, "r", 60, 287, 0],
		[ⲆΔᐃ, "r", 59, 285, 0],
		[ⲆⵠⲆ, "r", 58, 284, 0],
		[1, "r", 59, 283, ⲆᐃⲆ],
		[ᐃⲆΔ, "r", 65, 283, 0],
		[1, "r", 64, 283, ⲆᐃⲆ],
		[ⲆΔᐃ, "r", 63, 283, 0],
		[1, "r", 62, 283, 0],
		[ⵠΔⲆ, "r", 61, 283, 0],
		[1, "r", 60, 283, 0],
		[1, "r", 59, 284, 0],
		[1, "r", 58, 285, ᐃΔΔ],
		[1, "r", 60, 286, ⵠᐃΔ],
		[ⵠΔΔ, "r", 59, 286, 0],
		[1, "r", 61, 287, ⵠᐃΔ],
		[1, "r", 62, 287, 0],
		[1, "r", 61, 286, 0],
		[1, "r", 62, 286, 0],
		[1, "r", 63, 286, 0],
		[1, "r", 64, 286, ⵠⲆᐃ],
		[1, "r", 65, 286, Δⵠⵠ],
		[1, "r", 67, 285, ⲆᐃⲆ],
		[ᐃⵠⵠ, "r", 66, 285, ⲆᐃⲆ],
		[ᐃⲆⲆ, "r", 65, 285, ⵠⲆⵠ],
		[ᐃⵠⵠ, "r", 64, 285, 0],
		[ᐃⲆⲆ, "r", 63, 285, 0],
		[1, "r", 62, 285, ⵠᐃΔ],
		[ᐃⵠⵠ, "r", 61, 285, ⵠⲆᐃ],
		[ᐃⵠⵠ, "r", 60, 285, 0],
		[1, "r", 60, 284, 0],
		[1, "r", 61, 284, 0],
		[1, "r", 62, 284, ⵠⲆⵠ],
		[ᐃⲆΔ, "r", 63, 284, ⵠᐃΔ],
		[1, "r", 64, 284, ΔᐃΔ],
		[ᐃⲆΔ, "r", 65, 284, ⲆᐃⲆ],
		[ᐃⲆⲆ, "r", 66, 284, ⵠᐃΔ],
		[ΔⵠⲆ, "r", 65, 287, 0],
		[1, "r", 67, 286, 0],
		[Δᐃᐃ, "p", ⵠᐃΔ, 13, 189, 1],
		[ⲆΔᐃ, "p", ⲆᐃⲆ, 32, 184, ⲆⵠⲆ],
		[1, "p", ⵠⲆⵠ, 47, 191, 1],
		[ᐃⲆⲆ, "p", ⵠⲆᐃ, 64, 184, 1],
		[1, "p", 0, 84, 192, ⵠⵠᐃ],
		[ⵠΔᐃ, "p", 0, 78, 207, 1],
		[ⵠΔⲆ, "p", Δⵠⵠ, 58, 216, 1],
		[1, "p", 0, 41, 211, 1],
		[ᐃⲆⲆ, "p", ᐃΔΔ, 18, 211, ⲆⵠⲆ],
		[1, "p", ⲆᐃⲆ, ᐃⵠⲆⵠΔ, 230, ⲆΔᐃ],
		[1, "p", 0, 29, 237, 1],
		[1, "p", 0, 50, 230, 1],
		[1, "p", ⲆᐃⲆ, 78, 241, ᐃⲆΔ],
		[ᐃⲆΔ, "p", 0, 74, ⵠⲆΔⵠᐃᐃΔ, 1],
		[1, "p", 0, 68, 266, 1],
		[1, "p", ⵠᐃΔ, 48, 259, 1],
		[1, "p", 0, 31, 263, 1],
		[ⵠⵠᐃ, "p", ⵠⲆᐃ, ΔᐃΔⵠᐃ, 274, 1],
		[1, "p", 0, 33, 283, ⵠΔⲆ],
		[ᐃⲆⲆ, "p", ΔᐃΔ, 66, 287, ⲆⵠⲆ],
		[Δᐃᐃ, "p", Δⵠⵠ, 82, 291, ⲆΔᐃ],
		[ᐃⲆΔ, "p", 0, 16, 295, 1],
		[1, "p", 0, 45, 294, 1],
		[ᐃⲆΔ, "p", 0, 18, 252, 1],
		[ᐃⲆⲆ, "p", 0, 79, 227, ⲆⵠⲆ],
		[ΔⵠⲆ, "p", 0, 32, 200, ⲆⵠⲆ],
		[ⲆΔᐃ, "p", 0, 64, 200, ⲆΔᐃ],
		[ⵠⵠᐃ, "s", ⲆᐃⲆ, 21, 193, ᐃⲆⲆ],
		[1, "s", 1, 18, 189, 1],
		[1, "s", ΔⲆᐃⲆ, 26, 189, ⲆⵠⲆ],
		[1, "b", ⵠΔⲆ, ᐃΔΔᐃᐃ, 181, ⵠᐃΔ],
		[ⵠΔΔ, "b", ΔⲆᐃⲆ, 18, 190, 0],
		[1, "b", ΔⲆᐃⲆ, 29, 193, 0],
		[1, "t", ᐃⵠᐃⲆ, 16, 182, 0],
		[ⵠΔⲆ, "t", 3, 13, 195, ⵠⲆⵠ],
		[ⲆⵠⲆ, "t", 4, ᐃⵠⵠⲆⲆ, 183, 0],
		[1, "t", 5, ⲆΔⵠᐃⲆ, 184, ᐃΔΔ],
		[ᐃⵠⵠ, "t", 5, 23, 182, ⲆᐃⲆ],
		[1, "t", ΔⵠⲆᐃ, 30, 187, Δⵠⵠ],
		[1, "t", ⲆⵠⲆ, 26, 192, 0],
		[ⲆⵠⲆ, "b", ᐃⵠⵠ, 25, 188, Δⵠⵠ],
		[ⲆⵠⲆ, "s", ᐃⵠⵠ, 24, 181, ⵠΔᐃ],
		[1, "t", 3, 33, 183, ᐃΔΔ],
		[ⲆⵠⲆ, "b", ᐃⲆⲆ, 36, 189, 0],
		[ⵠΔΔ, "t", 2, 35, 190, ⵠⲆⵠ],
		[1, "b", ᐃⲆᐃⲆ, 19, 200, 0],
		[1, "s", ⵠᐃΔ, 28, 194, 1],
		[1, "s", ⲆⵠⲆ, 32, 196, ⵠΔⲆ],
		[1, "s", 1, 36, 183, Δᐃᐃ],
		[1, "s", 2, 38, 184, ΔⵠⲆ],
		[ⵠΔⲆ, "s", 2, 10, 192, 1],
		[1, "s", ⲆᐃᐃΔ, 12, 183, ⵠΔᐃ],
		[ⲆΔᐃ, "s", 1, 15, 199, ᐃⲆⲆ],
		[1, "b", ⵠⲆⵠ, ᐃⲆⵠΔⵠ, 202, ⲆᐃⲆ],
		[1, "t", 2, 13, 203, 0],
		[1, "t", ΔᐃΔΔ, 20, 200, 0],
		[ⲆⵠⲆ, "t", ΔᐃΔⵠ, ΔⲆΔᐃΔ, 194, ΔᐃΔ],
		[ⲆΔᐃ, "t", 5, 15, 205, ⵠᐃΔ],
		[Δᐃᐃ, "t", 5, 29, 200, ⲆᐃⲆ],
		[ⵠΔⲆ, "t", 3, 28, 201, ⲆᐃⲆ],
		[ΔⵠⲆ, "s", ⲆⲆᐃⲆ, 25, 199, Δᐃᐃ],
		[1, "s", 1, 22, 204, ⲆΔᐃ],
		[1, "g", ᐃⵠΔⲆ, 25, 205, 1],
		[1, "b", ᐃⵠⵠ, 27, 216, ᐃΔΔ],
		[ᐃⲆⲆ, "s", ⲆΔᐃ, 25, 217, ΔⵠⲆ],
		[1, "s", 1, 33, 217, ⵠΔᐃ],
		[1, "s", ⵠΔᐃⵠ, 35, 215, 1],
		[ⲆⵠⲆ, "s", ⵠⲆⵠ, 32, 221, 1],
		[1, "t", 2, 31, 222, 0],
		[1, "t", ᐃⵠⲆⲆ, 26, 221, 0],
		[1, "b", 3, 27, 222, Δⵠⵠ],
		[ᐃⵠⵠ, "b", ⵠⲆⵠ, 17, 217, Δⵠⵠ],
		[1, "t", ⵠᐃⲆᐃ, ΔᐃΔⵠᐃ, 216, 0],
		[ᐃⵠⵠ, "t", ᐃᐃΔΔ, 13, 215, 0],
		[1, "t", ⲆΔΔΔ, 30, 213, 0],
		[Δᐃᐃ, "t", 5, 24, 208, ⵠⲆⵠ],
		[1, "s", ⵠΔΔ, 12, 216, ᐃⲆⲆ],
		[1, "s", Δⵠᐃᐃ, ⲆⵠΔΔᐃ, 210, ⵠΔΔ],
		[ⵠⵠᐃ, "s", 2, 34, 223, ΔⵠⲆ],
		[ᐃⲆⲆ, "b", 2, 36, 218, ⵠⲆⵠ],
		[ⲆⵠⲆ, "t", 4, 40, 206, ⵠⲆᐃ],
		[1, "t", ⵠⵠⲆⵠ, 35, 203, ⵠⲆᐃ],
		[1, "t", 3, 39, 206, 0],
		[1, "b", ⵠΔⲆ, 34, 204, ΔᐃΔ],
		[1, "s", 1, 33, 206, ⵠΔᐃ],
		[ᐃⵠⵠ, "s", ΔⵠⲆ, 42, 203, 1],
		[1, "s", 0, 47, 196, 1],
		[1, "b", Δᐃᐃⵠ, 40, 196, 0],
		[1, "t", 4, 39, 197, 0],
		[1, "t", ⲆΔΔΔ, 44, 187, Δⵠⵠ],
		[1, "b", ᐃⲆⲆ, 46, 181, ΔᐃΔ],
		[ᐃⲆΔ, "t", ⲆⲆᐃⲆ, 47, 182, ⲆᐃⲆ],
		[1, "b", 0, 57, 182, ⵠᐃΔ],
		[ⵠΔᐃ, "b", ᐃΔᐃⲆ, 56, 183, 0],
		[1, "t", 4, 55, 184, ⵠⲆᐃ],
		[1, "t", ⵠⵠⲆⵠ, 62, 195, 0],
		[ⵠⵠᐃ, "s", ⵠΔⲆ, 51, 185, 1],
		[1, "s", 2, 62, 180, 1],
		[ᐃⲆΔ, "s", ⲆᐃᐃΔ, 61, 188, 1],
		[1, "s", ⵠΔᐃ, 61, 189, 1],
		[1, "s", ⲆⲆΔΔ, 48, 195, Δᐃᐃ],
		[ⲆⵠⲆ, "b", ⲆΔᐃ, 51, 199, ΔᐃΔ],
		[1, "t", Δⵠᐃᐃ, 52, 199, 0],
		[1, "t", 3, 56, 204, ⵠⲆⵠ],
		[1, "t", ΔⵠⲆᐃ, 57, 204, 0],
		[ⲆΔᐃ, "t", 4, 51, 204, 0],
		[ᐃⵠⵠ, "s", ⵠⵠᐃ, 52, 205, 1],
		[1, "s", 2, 57, 200, 1],
		[ᐃⲆⲆ, "s", Δᐃᐃ, 56, 199, 1],
		[ⵠⵠᐃ, "b", Δⵠⵠ, 55, 192, ᐃΔΔ],
		[ΔⵠⲆ, "t", 3, 56, 193, 0],
		[1, "t", 4, 50, 190, ΔᐃΔ],
		[1, "b", ᐃⲆⲆ, 76, 188, ⵠᐃΔ],
		[ᐃⲆΔ, "t", ⲆⲆᐃⲆ, 75, 188, ᐃΔΔ],
		[ᐃⲆΔ, "t", Δⵠᐃᐃ, 73, 192, ⵠⲆᐃ],
		[Δᐃᐃ, "t", ᐃⵠⲆⲆ, 72, 191, 0],
		[ⵠΔⲆ, "t", 5, 78, 193, 0],
		[1, "b", ⵠᐃΔ, 79, 192, 0],
		[ΔⵠⲆ, "s", ⲆᐃᐃΔ, 79, 190, ΔⵠⲆ],
		[Δᐃᐃ, "s", ⲆⵠⲆ, 74, 194, 1],
		[1, "s", 1, 72, 187, ⵠⵠᐃ],
		[ⵠΔΔ, "s", ⵠⲆᐃ, 74, 183, 1],
		[1, "s", ᐃⲆⲆ, 75, 183, ⵠΔⲆ],
		[1, "t", Δᐃᐃⵠ, 69, 181, 0],
		[ⵠΔᐃ, "t", ΔⵠⲆᐃ, 70, 182, 0],
		[1, "t", ⲆΔΔΔ, 69, 180, 0],
		[1, "b", 1, 65, 189, 0],
		[Δᐃᐃ, "b", Δᐃᐃⵠ, 66, 189, ΔᐃΔ],
		[ⵠⵠᐃ, "t", ᐃⵠⲆⵠ, 64, 188, 0],
		[ⵠⵠᐃ, "t", ⲆⵠⵠⲆ, 67, 192, ⵠⲆᐃ],
		[ⵠⵠᐃ, "b", Δᐃᐃⵠ, 85, 183, 0],
		[Δᐃᐃ, "t", ᐃⲆΔ, 84, 184, 0],
		[1, "t", 4, 81, 180, ⵠⲆⵠ],
		[ⵠΔᐃ, "t", 5, 89, 180, Δⵠⵠ],
		[1, "t", 0, 90, 188, ⵠᐃΔ],
		[ᐃⵠⵠ, "t", 3, 89, 190, ᐃΔΔ],
		[1, "s", ᐃⵠⵠ, 87, 187, ⲆⵠⲆ],
		[1, "s", ⲆⲆᐃⲆ, 87, 197, 1],
		[ⵠⵠᐃ, "b", ⵠΔⲆ, 84, 200, ⵠⲆᐃ],
		[ᐃⲆΔ, "t", 2, 83, 201, ᐃΔΔ],
		[Δᐃᐃ, "t", ΔᐃΔⵠ, 87, 207, ⲆᐃⲆ],
		[1, "s", 2, 79, 202, ⲆⵠⲆ],
		[ᐃⲆⲆ, "s", ⵠⵠᐃ, 80, 203, ᐃⲆΔ],
		[ⲆⵠⲆ, "t", ⵠⲆᐃ, 71, 200, 0],
		[ⲆΔᐃ, "b", 2, 72, 201, 0],
		[ⵠⵠᐃ, "t", 2, 65, 205, 0],
		[1, "t", 1, 66, 206, 0],
		[ΔⵠⲆ, "t", 4, 63, 209, ⵠᐃΔ],
		[ᐃⲆⲆ, "t", ⵠΔΔΔ, 73, 203, ΔᐃΔ],
		[ᐃⵠⵠ, "s", ⲆᐃⲆ, 70, 207, ΔⵠⲆ],
		[ⵠΔⲆ, "s", 1, 71, 206, ⲆΔᐃ],
		[1, "s", Δⵠᐃᐃ, 68, 199, ΔⵠⲆ],
		[Δᐃᐃ, "s", ⵠΔⲆ, 64, 213, ⵠⵠᐃ],
		[ᐃⲆⲆ, "t", 0, 85, 213, 0],
		[ⲆΔᐃ, "b", ⵠΔᐃⵠ, 84, 212, ⵠⲆᐃ],
		[1, "t", 3, 77, 209, 0],
		[Δᐃᐃ, "t", 4, 83, 216, 0],
		[1, "t", 4, 73, 209, 0],
		[1, "b", ⵠⲆⵠ, 86, 222, 0],
		[ᐃⵠⵠ, "b", ᐃⵠᐃⲆ, 87, 221, 0],
		[1, "s", ⵠΔⲆ, 80, 214, 1],
		[1, "s", ⲆᐃᐃΔ, 87, 216, 1],
		[ⵠΔᐃ, "s", 2, 84, 224, ᐃⲆⲆ],
		[1, "s", 1, 77, 227, ⲆⵠⲆ],
		[Δᐃᐃ, "t", ᐃⵠⵠ, 74, 222, 0],
		[ⲆΔᐃ, "b", ⵠΔΔ, 69, 218, 0],
		[1, "b", 2, 75, 219, 0],
		[ΔⵠⲆ, "s", 2, 74, 218, ⵠΔⲆ],
		[1, "s", ᐃⲆΔ, 69, 223, 1],
		[ⵠΔⲆ, "s", 1, 77, 221, ᐃⲆⲆ],
		[ⲆⵠⲆ, "b", 1, 72, 211, 0],
		[ᐃⲆΔ, "b", 1, 85, 232, ᐃΔΔ],
		[Δᐃᐃ, "t", ⲆⲆᐃⲆ, 84, 233, ΔᐃΔ],
		[ⵠΔΔ, "t", ᐃⵠΔⲆ, 78, 238, 0],
		[1, "b", ⵠΔⲆ, 77, 237, 0],
		[ⵠΔᐃ, "t", 5, 87, 236, 0],
		[1, "t", 5, 76, 229, ⲆᐃⲆ],
		[1, "b", 2, 74, 241, 0],
		[1, "s", 0, 73, 242, ᐃⵠⵠ],
		[ᐃⲆΔ, "s", 0, 81, 238, ⵠΔⲆ],
		[ⵠΔᐃ, "s", ⵠΔⲆ, 82, 237, ᐃⵠⵠ],
		[1, "s", 2, 72, 237, 1],
		[ᐃⲆΔ, "s", 2, 78, 242, ⵠΔΔ],
		[ⵠΔΔ, "b", 1, 66, 230, 0],
		[1, "b", 2, 62, 229, 0],
		[ⵠΔᐃ, "t", 4, 67, 231, 0],
		[1, "t", 4, 62, 228, ᐃΔΔ],
		[1, "t", ⲆΔΔΔ, 64, 233, ⲆᐃⲆ],
		[1, "t", 2, 65, 234, 0],
		[ΔⵠⲆ, "t", 2, 51, 220, ⵠᐃΔ],
		[1, "t", 1, 50, 218, 0],
		[1, "b", 1, 45, 223, 0],
		[ᐃⲆⲆ, "b", ⲆⲆᐃⲆ, 46, 224, ⵠᐃΔ],
		[1, "t", 4, 49, 218, 0],
		[ⵠΔΔ, "t", 4, 47, 225, 0],
		[1, "s", ᐃⵠⵠ, 50, 215, ⵠΔᐃ],
		[ᐃⲆⲆ, "s", 2, 51, 213, ᐃⲆΔ],
		[1, "s", 2, 42, 227, 1],
		[1, "s", 1, 44, 227, 1],
		[ⵠΔⲆ, "s", 1, 60, 230, 1],
		[Δᐃᐃ, "s", ⲆⲆᐃⲆ, 59, 231, 1],
		[1, "b", Δᐃᐃ, 85, 252, ΔᐃΔ],
		[ΔⵠⲆ, "t", ΔⲆᐃⲆ, 84, 251, ⵠⲆⵠ],
		[ⵠⵠᐃ, "t", 2, 74, 250, 0],
		[ᐃⵠⵠ, "t", 0, 75, 251, 0],
		[1, "b", ⲆᐃⲆ, 83, 246, ΔᐃΔ],
		[ᐃⲆⲆ, "t", ΔⵠⲆⲆ, 82, 247, 0],
		[ⲆⵠⲆ, "t", ⵠΔΔⵠ, 81, 259, 0],
		[1, "t", 4, 69, 249, 0],
		[Δᐃᐃ, "t", 5, 87, 246, ⲆᐃⲆ],
		[ᐃⲆΔ, "t", ⲆΔΔΔ, 75, 252, 0],
		[ΔⵠⲆ, "s", 1, 79, 257, 1],
		[1, "s", 2, 78, 249, ᐃⲆⲆ],
		[ᐃⲆⲆ, "s", ⵠΔᐃⵠ, 80, 258, 1],
		[1, "s", ᐃⲆΔ, 88, 254, ⲆΔᐃ],
		[ⵠΔᐃ, "s", 1, 85, 264, 1],
		[1, "s", ⲆᐃᐃΔ, 89, 263, 1],
		[ᐃⲆΔ, "s", 2, 87, 269, 1],
		[1, "s", 0, 84, 268, ⵠⵠᐃ],
		[1, "s", ⵠΔᐃⵠ, 76, 267, ᐃⲆΔ],
		[ᐃⲆΔ, "s", 1, 66, 261, ⲆΔᐃ],
		[ⵠΔⲆ, "s", 1, 87, 274, 1],
		[1, "s", ⲆΔᐃ, 76, 263, 1],
		[1, "s", 1, 59, 251, 1],
		[1, "s", 0, 59, 252, ⵠΔΔ],
		[1, "t", ⲆⲆΔΔ, 86, 265, ⵠᐃΔ],
		[1, "t", Δⵠⵠ, 78, 270, Δⵠⵠ],
		[ᐃⵠⵠ, "t", 2, 79, 271, ΔᐃΔ],
		[ⵠΔⲆ, "t", 0, 77, 260, 0],
		[ⲆΔᐃ, "t", 3, 78, 261, 0],
		[1, "b", 1, 71, 264, 0],
		[1, "b", ⵠΔΔ, 88, 269, ⵠᐃΔ],
		[1, "t", 5, 84, 264, 0],
		[Δᐃᐃ, "t", ⵠⵠΔⲆ, 79, 261, 0],
		[ᐃⲆΔ, "t", 5, 72, 265, ⵠⲆᐃ],
		[ΔⵠⲆ, "t", 5, 77, 270, ᐃΔΔ],
		[ΔⵠⲆ, "t", ⵠᐃΔ, 87, 261, 0],
		[1, "t", 2, 86, 260, 0],
		[1, "t", 4, 84, ⲆⲆΔⵠⲆ, ᐃΔΔ],
		[ⲆⵠⲆ, "t", 4, 68, ⲆᐃᐃⵠⵠⲆⲆ, 0],
		[Δᐃᐃ, "t", ᐃⲆⲆ, 67, 254, ⵠᐃΔ],
		[ⵠΔⲆ, "t", Δⵠᐃᐃ, 65, 262, 0],
		[ⲆΔᐃ, "t", 1, 57, 260, 0],
		[1, "t", ⲆⲆΔΔ, 58, 259, 0],
		[1, "b", 1, 63, ⵠⲆΔⵠᐃᐃΔ, 0],
		[ⲆⵠⲆ, "b", ⲆΔᐃ, 52, 248, ⵠᐃΔ],
		[1, "t", 2, 53, 248, ⵠᐃΔ],
		[1, "s", Δᐃᐃ, 50, 253, ΔⵠⲆ],
		[Δᐃᐃ, "s", 2, 67, 263, 1],
		[1, "s", ⲆᐃᐃΔ, 52, 252, ᐃⲆΔ],
		[ⵠΔⲆ, "s", 2, 71, 244, 1],
		[ᐃⲆⲆ, "b", ⵠⲆᐃ, 57, 245, 0],
		[1, "t", ⲆᐃᐃΔ, 58, 244, Δⵠⵠ],
		[1, "b", ⲆΔᐃ, 53, 237, Δⵠⵠ],
		[ⵠⵠᐃ, "t", ⵠΔᐃⵠ, 54, 237, 0],
		[1, "t", ⲆⲆᐃⲆ, 41, 238, 0],
		[1, "t", ⵠⵠᐃ, 42, 237, ⲆᐃⲆ],
		[ⵠΔᐃ, "t", Δᐃⵠᐃ, 57, 235, ⵠⲆⵠ],
		[1, "t", 5, 60, 246, ⵠⲆᐃ],
		[ᐃⵠⵠ, "t", ⲆΔΔΔ, 50, 252, 0],
		[1, "t", 1, 42, 248, 0],
		[1, "b", 1, 43, 249, 0],
		[ᐃⲆΔ, "b", ᐃⲆᐃⲆ, 37, 243, 0],
		[ᐃⲆⲆ, "s", 0, 50, 236, ᐃⲆΔ],
		[1, "s", 2, 39, 247, 1],
		[1, "s", 2, 51, 235, ⵠΔᐃ],
		[ᐃⵠⵠ, "s", ᐃⵠΔⲆ, 60, 243, 1],
		[ᐃⲆΔ, "s", ᐃⵠΔⲆ, 36, 240, ΔⵠⲆ],
		[ΔⵠⲆ, "s", 2, 43, 254, ⵠΔΔ],
		[1, "s", 1, 42, 254, ⵠⵠᐃ],
		[1, "t", 1, 38, 233, 0],
		[1, "t", 2, 35, 235, 0],
		[ⵠΔΔ, "t", 4, 33, 228, 0],
		[ᐃⲆⲆ, "t", ⲆⵠⵠⲆ, 33, 245, ⲆᐃⲆ],
		[1, "t", 4, 43, 235, ⵠᐃΔ],
		[ᐃⵠⵠ, "t", ⵠΔΔΔ, 45, 249, ⵠⲆⵠ],
		[1, "t", 5, 41, 253, 0],
		[Δᐃᐃ, "b", ⲆΔᐃ, ⲆᐃⵠⲆᐃ, 227, ⲆᐃⲆ],
		[ⵠⵠᐃ, "b", Δᐃᐃ, 14, 240, ΔᐃΔ],
		[1, "t", ⲆΔⲆΔ, 21, 227, 0],
		[ᐃⲆΔ, "t", 3, 27, 234, ⲆᐃⲆ],
		[1, "t", 3, ⵠⲆᐃⵠⵠ, 241, ᐃΔΔ],
		[ⵠΔⲆ, "t", ΔⵠᐃⲆ, 12, 229, 0],
		[ᐃⲆΔ, "t", ΔⵠⲆᐃ, 17, 224, ⵠⲆᐃ],
		[Δᐃᐃ, "t", 4, ΔΔⵠⵠΔ, 231, ⵠᐃΔ],
		[1, "t", ΔᐃΔⵠ, 22, 238, ⵠᐃΔ],
		[ⵠΔᐃ, "t", 4, ⵠⵠᐃΔΔ, 239, ⵠᐃΔ],
		[1, "t", ⵠΔⲆ, 22, 243, 0],
		[1, "b", 2, 23, 242, ⲆᐃⲆ],
		[1, "s", ⵠΔᐃ, 23, 238, ⵠΔⲆ],
		[1, "s", ΔⵠⲆ, 22, 228, 1],
		[Δᐃᐃ, "s", 2, 24, 228, 1],
		[1, "s", 2, 21, 236, 1],
		[1, "s", 0, ⵠΔⵠᐃⵠ, 228, 1],
		[1, "s", 0, 16, 242, 1],
		[1, "s", 1, 15, 244, 1],
		[ⵠΔⲆ, "s", ⲆΔᐃ, 34, 236, Δᐃᐃ],
		[1, "t", 1, 26, 249, 0],
		[ⵠΔᐃ, "t", ⵠΔⲆ, 22, ⵠΔⵠⲆᐃΔᐃ, 0],
		[1, "t", 2, 23, 255, 0],
		[ΔⵠⲆ, "b", 1, 17, 256, ⵠⲆⵠ],
		[1, "b", 2, ΔᐃΔΔᐃΔⲆ, 256, ⵠᐃΔ],
		[1, "s", ⵠᐃΔ, 21, 252, 1],
		[1, "s", ⲆⲆᐃⲆ, 20, 250, ⵠΔᐃ],
		[1, "s", 2, 23, 259, 1],
		[ᐃⲆⲆ, "s", ᐃⲆⲆ, ΔⵠⵠΔᐃ, 257, 1],
		[ⵠΔⲆ, "t", 1, 31, 254, ᐃΔΔ],
		[ΔⵠⲆ, "t", 2, 32, 254, 0],
		[ⵠⵠᐃ, "t", ⲆⵠⲆᐃ, 28, 254, 0],
		[1, "t", ⲆⵠⲆᐃ, 34, 258, Δⵠⵠ],
		[1, "t", 0, 29, 260, 0],
		[ⵠΔⲆ, "b", 2, 30, 261, 0],
		[ᐃⲆΔ, "t", 0, 43, 262, 0],
		[1, "t", 2, 42, 263, 0],
		[ⵠⵠᐃ, "t", ΔᐃΔⵠ, 46, 264, 0],
		[1, "b", 1, 39, 265, 0],
		[Δᐃᐃ, "b", ⵠΔⲆ, 58, 267, 0],
		[1, "t", Δᐃᐃⵠ, 57, 268, 0],
		[1, "t", ᐃᐃΔΔ, 62, 270, 0],
		[1, "t", 5, 52, 273, ⲆᐃⲆ],
		[Δᐃᐃ, "s", 1, 52, 269, ΔⵠⲆ],
		[1, "s", ⲆⵠⲆ, 41, 272, ᐃⲆⲆ],
		[ⲆΔᐃ, "s", 2, 41, 274, 1],
		[ⵠΔᐃ, "t", ᐃⵠΔⲆ, 42, 268, 0],
		[1, "t", 0, 43, 268, ⵠⲆᐃ],
		[ᐃⵠⵠ, "b", ᐃⲆⲆ, 46, 272, ΔᐃΔ],
		[ᐃⵠⵠ, "b", 1, ⲆᐃΔⵠⵠⲆᐃ, 265, 0],
		[ᐃⲆΔ, "t", 2, 15, 266, ⵠᐃΔ],
		[ᐃⵠⵠ, "t", ΔᐃΔΔ, ΔⲆᐃΔⲆ, 264, ᐃΔΔ],
		[ⵠⵠᐃ, "t", ⲆⵠⲆᐃ, 29, 263, 0],
		[ⲆΔᐃ, "t", ΔᐃΔΔ, ΔΔⵠⵠΔ, 269, Δⵠⵠ],
		[1, "t", 1, 29, 271, ⵠᐃΔ],
		[1, "b", ⵠΔᐃⵠ, 28, 272, 0],
		[1, "t", 2, 24, 267, 0],
		[1, "t", Δⵠᐃᐃ, 20, 279, ⵠⲆᐃ],
		[1, "t", 0, 19, 278, 0],
		[1, "t", ΔⵠᐃⲆ, 13, 278, ⵠᐃΔ],
		[1, "b", ΔᐃΔ, 21, 284, 0],
		[Δᐃᐃ, "b", ⵠⲆⵠ, ⲆΔⵠΔᐃ, 289, ⵠᐃΔ],
		[1, "t", ᐃⵠΔⲆ, ⲆⵠⵠΔⵠ, 283, ᐃΔΔ],
		[1, "t", Δᐃᐃⵠ, 19, 290, 0],
		[ⵠΔᐃ, "t", 4, 19, 283, 0],
		[1, "t", 4, 20, 290, 0],
		[1, "s", ⵠΔᐃ, 16, 285, ⵠΔⲆ],
		[1, "s", ᐃⵠⵠ, 24, 288, ⵠⵠᐃ],
		[1, "s", 2, 26, 287, 1],
		[ᐃⵠⵠ, "s", Δᐃᐃⵠ, 16, 278, Δᐃᐃ],
		[ⲆⵠⲆ, "s", 1, 21, 268, 1],
		[1, "s", 2, ᐃᐃΔΔᐃ, 268, 1],
		[1, "t", 0, 12, 294, ⵠⲆⵠ],
		[1, "b", 1, 13, 295, ⵠᐃΔ],
		[Δᐃᐃ, "t", 3, ⵠΔⵠᐃⵠ, 291, 0],
		[1, "t", ᐃⲆᐃⲆ, 10, 299, ᐃΔΔ],
		[1, "t", ⲆⵠⵠⲆ, 11, 287, ᐃΔΔ],
		[Δᐃᐃ, "t", ⲆⵠⵠⲆ, 17, 298, ⲆᐃⲆ],
		[1, "t", ⵠΔⲆ, 27, 294, 0],
		[ⵠΔⲆ, "b", 2, 26, 295, ⲆᐃⲆ],
		[1, "t", ᐃΔᐃⲆ, 33, 297, 0],
		[ᐃⲆⲆ, "b", 1, 48, 278, 0],
		[1, "b", ΔᐃΔ, 46, 280, 0],
		[ᐃⲆΔ, "b", Δᐃᐃⵠ, 50, 280, Δⵠⵠ],
		[1, "t", Δⵠⵠ, 44, 282, 0],
		[1, "b", ΔⵠⲆ, 49, 283, 0],
		[1, "b", Δⵠⵠ, 51, 278, 0],
		[1, "b", ΔⵠⲆⲆ, 50, 279, ⵠⲆⵠ],
		[1, "b", 3, 44, 284, ⵠᐃΔ],
		[1, "b", ᐃΔΔ, 47, 284, ⵠⲆᐃ],
		[ⵠⵠᐃ, "b", ⲆᐃᐃΔ, 42, 283, ⲆᐃⲆ],
		[1, "t", 4, 51, 277, 0],
		[1, "b", ⵠΔⲆ, 44, 286, ⲆᐃⲆ],
		[1, "b", ΔⲆᐃⲆ, 46, 286, 0],
		[1, "b", ᐃⲆΔ, 42, 285, 0],
		[ⵠΔᐃ, "b", ᐃⲆᐃⲆ, 41, 286, 0],
		[1, "t", ⵠⵠⲆⵠ, 42, 287, 0],
		[ⵠΔⲆ, "b", 1, 42, 278, 0],
		[ⵠⵠᐃ, "b", 2, 43, 279, ⵠⲆⵠ],
		[1, "b", ⵠᐃΔ, 40, 280, 0],
		[ᐃⵠⵠ, "t", 4, 39, 283, 0],
		[1, "t", 4, 39, 279, 0],
		[1, "t", ⲆΔⲆⲆ, 43, 277, 0],
		[1, "t", ⲆΔⲆⲆ, 47, 287, ⵠⲆᐃ],
		[1, "t", 4, 46, 277, 0],
		[ⵠΔΔ, "t", 4, 45, 290, 0],
		[1, "t", ΔᐃΔΔ, 36, 285, 0],
		[1, "t", 3, 35, 284, ΔᐃΔ],
		[ΔⵠⲆ, "t", 3, 36, 272, ΔᐃΔ],
		[ⵠΔⲆ, "t", ΔᐃΔⵠ, 35, 271, ⵠⲆⵠ],
		[ᐃⲆΔ, "t", 1, 29, 279, 0],
		[ᐃⲆΔ, "b", 1, 32, 277, ⵠᐃΔ],
		[ⵠΔᐃ, "t", 3, 31, 278, ⵠᐃΔ],
		[1, "b", Δⵠᐃᐃ, 28, 280, 0],
		[1, "t", ΔⵠⲆᐃ, 29, 286, 0],
		[1, "t", 5, 28, 275, Δⵠⵠ],
		[1, "t", ᐃⵠⲆⵠ, 37, 292, 0],
		[1, "b", ⵠΔⲆ, 36, 291, 0],
		[Δᐃᐃ, "b", ⲆᐃⲆ, 34, 298, 0],
		[ᐃⲆΔ, "t", 4, 31, 292, 0],
		[ⵠΔΔ, "t", ᐃᐃΔΔ, 46, 295, 0],
		[ⵠΔⲆ, "t", 4, 59, 287, ΔᐃΔ],
		[1, "b", 1, 58, 286, 0],
		[1, "s", ⲆⵠⲆ, 68, 284, 1],
		[1, "s", ⲆⲆΔΔ, 70, 286, ⵠΔⲆ],
		[1, "s", 0, 67, 284, ⲆⵠⲆ],
		[1, "t", Ⲇⵠᐃᐃ, 66, 283, 0],
		[1, "t", 1, 65, 282, 0],
		[ΔⵠⲆ, "b", ᐃⲆⲆ, 64, 288, 0],
		[1, "t", ᐃΔᐃⲆ, 60, 293, 0],
		[ⵠΔΔ, "t", ⵠΔᐃ, 61, 294, ⵠᐃΔ],
		[ᐃⵠⵠ, "b", ⲆⵠⲆ, 76, 294, ΔᐃΔ],
		[ΔⵠⲆ, "t", 5, 75, 295, ⵠᐃΔ],
		[1, "t", ⲆΔⲆⲆ, 56, 293, ⲆᐃⲆ],
		[Δᐃᐃ, "t", ⵠⵠⲆⵠ, 59, 281, 0],
		[ⲆⵠⲆ, "t", 5, 67, 291, 0],
		[1, "b", 0, 88, 293, 0],
		[1, "t", Δⵠᐃᐃ, 89, 292, ⵠⲆᐃ],
		[ⲆΔᐃ, "t", 2, 85, 286, ᐃΔΔ],
		[1, "t", 4, 88, 289, ⵠⲆⵠ],
		[ⲆⵠⲆ, "t", ⲆⵠⵠⲆ, 79, 287, ᐃΔΔ],
		[ⵠΔᐃ, "b", ⲆⵠⲆ, 84, 285, 0],
		[1, "t", ΔⵠⲆⲆ, 75, 284, ᐃΔΔ],
		[1, "b", 0, 75, 278, 0],
		[1, "t", 3, 74, 277, Δⵠⵠ],
		[1, "t", 4, 81, 276, ⵠᐃΔ],
		[ᐃⲆΔ, "t", ΔⲆᐃⲆ, 65, 276, 0],
		[1, "b", 1, 66, 275, ⲆᐃⲆ],
		[ⵠΔΔ, "g", 0, 45, 261, 1],
		[ⲆⵠⲆ, "g", 1, 39, 258, 1],
		[1, "g", Δⵠⵠ, 35, 250, 1],
		[ᐃⵠⵠ, "g", ᐃⵠΔⲆ, 22, 247, ⲆΔᐃ],
		[ᐃⵠⵠ, "g", ΔⲆᐃⲆ, 27, 227, ⵠⵠᐃ],
		[1, "g", 2, 63, 218, ᐃⲆⲆ],
		[1, "g", 1, 56, 224, 1],
		[ⵠΔⲆ, "g", ᐃΔΔ, 46, 231, 1],
		[ⲆΔᐃ, "g", 1, 65, 240, ⵠΔⲆ],
		[ⲆΔᐃ, "g", Δⵠᐃᐃ, 67, 238, ᐃⲆΔ],
		[1, "g", 2, 79, 232, 1],
		[1, "g", ⲆᐃᐃΔ, 72, 253, 1],
		[1, "g", ᐃⵠΔⲆ, 62, 264, 1],
		[ⲆⵠⲆ, "g", 2, 28, 267, 1],
		[1, "g", Δᐃᐃⵠ, 58, 274, ⵠΔᐃ],
		[ᐃⲆΔ, Δ[66], 2, 14, 182, ⵠⲆᐃ],
		[1, Δ[66], 2, 24, 182, Δⵠⵠ],
		[ⵠΔᐃ, Δ[66], 0, 11, 185, 0],
		[ⲆⵠⲆ, Δ[66], ᐃΔΔ, ᐃⵠⲆⵠΔ, 194, 0],
		[1, Δ[66], Δᐃᐃ, 25, 196, ⵠⲆᐃ],
		[ⵠΔⲆ, Δ[66], ⲆΔⲆΔ, 31, 183, 0],
		[ⵠⵠᐃ, Δ[66], 0, 38, 181, ⵠⲆⵠ],
		[1, Δ[66], ΔⲆᐃⲆ, 45, 186, 0],
		[ΔⵠⲆ, Δ[66], ᐃⲆⲆ, 38, 191, ⵠⲆⵠ],
		[ᐃⵠⵠ, Δ[66], 0, 56, 181, 0],
		[ⵠⵠᐃ, Δ[66], 1, 68, 182, 0],
		[1, Δ[66], 2, 80, 181, Δⵠⵠ],
		[1, Δ[66], 3, 86, 187, 0],
		[ⲆⵠⲆ, Δ[66], 0, 84, 193, 0],
		[1, Δ[66], 1, 82, 201, 0],
		[ᐃⲆⲆ, Δ[66], 2, 64, 191, 0],
		[ᐃⲆΔ, Δ[66], 2, 72, 200, Δⵠⵠ],
		[1, Δ[66], 3, 64, 201, 0],
		[ⵠΔΔ, Δ[66], Δⵠᐃᐃ, 76, 209, 0],
		[Δᐃᐃ, Δ[66], 3, 71, 212, ⵠⲆᐃ],
		[ᐃⲆⲆ, Δ[66], 1, 86, 214, 0],
		[1, Δ[66], 0, 57, 208, ᐃΔΔ],
		[1, Δ[66], 0, 41, 203, 0],
		[1, Δ[66], 1, 15, 206, 0],
		[1, Δ[66], 2, 25, 209, ⵠⲆⵠ],
		[ⵠΔᐃ, Δ[66], 3, ΔᐃⵠΔⵠ, 218, 0],
		[ᐃⲆⲆ, Δ[66], Ⲇⵠᐃᐃ, ΔᐃΔⵠⲆ, 227, ⲆᐃⲆ],
		[ⵠΔΔ, Δ[66], ⵠⲆⵠ, 22, 229, 0],
		[ⲆΔᐃ, Δ[66], 1, 15, 239, ⲆᐃⲆ],
		[ΔⵠⲆ, Δ[66], 2, 24, 238, 0],
		[1, Δ[66], ΔⵠᐃⲆ, 22, 246, ⵠⲆᐃ],
		[ⲆΔᐃ, Δ[66], 3, 10, 253, ⲆᐃⲆ],
		[ⲆΔᐃ, Δ[66], 1, 18, 258, ⵠⲆᐃ],
		[1, Δ[66], ᐃⲆΔ, 28, 261, 0],
		[1, Δ[66], 1, ΔᐃᐃⲆΔ, 267, 0],
		[1, Δ[66], 0, 24, 268, 0],
		[1, Δ[66], ⵠᐃΔ, ΔⲆΔⵠⲆ, 278, Δⵠⵠ],
		[Δᐃᐃ, Δ[66], 2, 21, 279, ΔᐃΔ],
		[ᐃⵠⵠ, Δ[66], 2, 30, 272, 0],
		[1, Δ[66], 2, 29, 281, 0],
		[Δᐃᐃ, Δ[66], Δⵠᐃᐃ, 15, 284, 0],
		[ⵠΔΔ, Δ[66], 3, ⵠᐃΔⵠᐃ, 291, ⵠᐃΔ],
		[1, Δ[66], 3, 30, 287, 0],
		[1, Δ[66], 3, 27, 293, ⵠᐃΔ],
		[1, Δ[66], ⵠᐃΔ, 25, 296, 0],
		[1, Δ[66], ⵠⲆᐃ, ⲆⵠΔΔᐃ, 298, ΔᐃΔ],
		[ⵠⵠᐃ, Δ[66], ⵠⲆⵠ, ⲆᐃⲆⵠⲆ, 286, 0],
		[ΔⵠⲆ, Δ[66], ⲆⲆᐃⲆ, 36, 299, 0],
		[ΔⵠⲆ, Δ[66], ⲆᐃᐃΔ, 37, 280, 0],
		[1, Δ[66], ⵠᐃⲆᐃ, 38, 291, Δⵠⵠ],
		[ᐃⲆⲆ, Δ[66], 1, 48, 287, 0],
		[1, Δ[66], 1, 46, 277, 0],
		[ⵠⵠᐃ, Δ[66], 1, 53, 278, ᐃΔΔ],
		[1, Δ[66], ᐃⵠᐃⲆ, 48, 295, 0],
		[ⵠΔᐃ, Δ[66], 0, 57, 294, ΔᐃΔ],
		[1, Δ[66], 1, 65, 290, 0],
		[ⵠΔΔ, Δ[66], 1, 84, 292, ⵠⲆᐃ],
		[1, Δ[66], ΔⲆᐃⲆ, 77, 295, 0],
		[1, Δ[66], 2, 84, 287, ⵠᐃΔ],
		[1, Δ[66], ⵠᐃΔ, 74, 279, ⵠⲆⵠ],
		[1, Δ[66], 3, 65, 274, ᐃΔΔ],
		[ⵠΔΔ, Δ[66], 2, 71, 267, 0],
		[1, Δ[66], ᐃⵠΔⲆ, 65, 261, 0],
		[1, Δ[66], ᐃⵠΔⲆ, 47, 264, 0],
		[1, Δ[66], 3, 47, 258, ΔᐃΔ],
		[1, Δ[66], 3, 53, 251, 0],
		[ⵠΔᐃ, Δ[66], ⵠΔᐃⵠ, 40, 253, 0],
		[1, Δ[66], 0, 35, 244, ΔᐃΔ],
		[1, Δ[66], 0, 37, 233, Δⵠⵠ],
		[Δᐃᐃ, Δ[66], ᐃΔᐃⲆ, 44, 226, 0],
		[ΔⵠⲆ, Δ[66], ⲆⲆΔΔ, 37, 219, ⵠⲆᐃ],
		[1, Δ[66], ⲆᐃᐃΔ, 54, 234, 0],
		[1, Δ[66], ⵠΔΔ, 66, 234, 0],
		[1, Δ[66], ⵠΔᐃⵠ, 65, 241, ᐃΔΔ],
		[ΔⵠⲆ, Δ[66], 0, 68, 249, ΔᐃΔ],
		[ⵠΔⲆ, Δ[66], 3, 78, 257, ⵠᐃΔ],
		[1, Δ[66], ⲆⲆᐃⲆ, 86, 253, ΔᐃΔ],
		[1, Δ[66], 2, 83, 245, ⵠᐃΔ],
		[1, Δ[66], ⵠΔⲆ, 82, 238, Δⵠⵠ],
		[1, Δ[66], 3, 76, 235, 0],
		[1, Δ[66], 2, 86, 232, 0],
		[ⵠΔΔ, Δ[66], 0, 86, 224, Δⵠⵠ],
		[ⵠΔΔ, Δ[66], ⵠΔᐃⵠ, 76, 226, ΔᐃΔ],
		[ᐃⵠⵠ, Δ[66], 2, 61, 228, 0],
		[1, Δ[66], Δⵠᐃᐃ, 58, 217, 0],
		[1, Δ[66], ΔᐃΔ, 49, 217, 0],
		[ⵠΔᐃ, Δ[66], 19, ⲆΔⵠⵠΔⵠᐃ, 179, ᐃΔΔ],
		[ⵠⵠᐃ, Δ[66], ⲆⲆᐃᐃᐃ, ᐃΔⵠⵠΔ, 180, 0],
		[Δᐃᐃ, Δ[66], 22, 18, 181, 0],
		[1, Δ[66], 19, 30, 184, ⵠⲆᐃ],
		[Δᐃᐃ, Δ[66], 19, 27, 187, ⵠⲆⵠ],
		[1, Δ[66], ᐃΔⵠⲆⲆ, 30, 195, ⲆᐃⲆ],
		[1, Δ[66], 19, 18, 192, 0],
		[1, Δ[66], ΔⲆᐃΔⲆ, 44, 182, ᐃΔΔ],
		[ⲆΔᐃ, Δ[66], ΔⵠΔΔΔ, 49, 182, 0],
		[1, Δ[66], 19, 54, 182, ΔᐃΔ],
		[ⵠΔΔ, Δ[66], 19, 59, 183, ⲆᐃⲆ],
		[ⵠⵠᐃ, Δ[66], 19, 56, 186, 0],
		[1, Δ[66], ⲆΔᐃΔⲆ, 46, 188, ⵠⲆᐃ],
		[ⵠⵠᐃ, Δ[66], ΔⵠΔⵠⵠ, 58, 193, Δⵠⵠ],
		[ΔⵠⲆ, Δ[66], ᐃΔⵠⲆⲆ, 67, 187, ΔᐃΔ],
		[ᐃⲆⲆ, Δ[66], ⲆΔᐃΔⲆ, 65, 192, ⵠⲆᐃ],
		[ᐃⲆΔ, Δ[66], 19, 71, 180, ⵠᐃΔ],
		[1, Δ[66], ᐃΔⵠⲆⲆ, 78, 187, 0],
		[ⲆΔᐃ, Δ[66], 19, 80, 194, ⲆᐃⲆ],
		[ⵠΔⲆ, Δ[66], ΔⲆᐃΔⲆ, 72, 193, ⵠᐃΔ],
		[1, Δ[66], ᐃᐃΔΔᐃ, 82, 182, ⵠᐃΔ],
		[ΔⵠⲆ, Δ[66], 19, 88, 185, 0],
		[1, Δ[66], 19, 87, 189, ⲆᐃⲆ],
		[ᐃⲆΔ, Δ[66], ΔⵠΔΔΔ, 86, 197, 0],
		[1, Δ[66], ᐃᐃⵠᐃⲆ, 85, 203, ⲆᐃⲆ],
		[ᐃⲆΔ, Δ[66], 19, 74, 200, 0],
		[ⲆΔᐃ, Δ[66], 19, 70, 202, 0],
		[Δᐃᐃ, Δ[66], ΔⲆⵠⵠⵠ, 83, 199, ⵠⲆᐃ],
		[1, Δ[66], ⵠᐃΔⵠⲆ, 86, 208, 0],
		[ⵠΔⲆ, Δ[66], ᐃᐃⵠᐃⲆ, 84, 214, 0],
		[1, Δ[66], ⵠᐃΔⵠⲆ, 83, 211, ⲆᐃⲆ],
		[1, Δ[66], ⵠᐃΔⵠⲆ, 84, 217, ΔᐃΔ],
		[ⲆΔᐃ, Δ[66], ⲆΔᐃΔⲆ, 77, 210, ⵠⲆᐃ],
		[ᐃⲆⲆ, Δ[66], Ⲇᐃᐃᐃᐃ, 71, 210, ᐃΔΔ],
		[1, Δ[66], 19, 73, 213, ΔᐃΔ],
		[1, Δ[66], ᐃᐃΔΔᐃ, 66, 207, ⲆᐃⲆ],
		[1, Δ[66], 19, 66, 204, 0],
		[1, Δ[66], ΔⵠΔⵠⵠ, 62, 209, ΔᐃΔ],
		[ⲆⵠⲆ, Δ[66], ΔⵠΔΔΔ, 63, 201, 0],
		[1, Δ[66], 19, 56, 205, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[66], 19, 49, 199, 0],
		[1, Δ[66], 19, 50, 205, ⲆᐃⲆ],
		[1, Δ[66], 19, 40, 197, Δⵠⵠ],
		[1, Δ[66], 19, 38, 198, 0],
		[1, Δ[66], ⵠⲆⵠⲆⵠ, 40, 208, 0],
		[ᐃⲆⲆ, Δ[66], ΔⲆᐃΔⲆ, 36, 204, Δⵠⵠ],
		[Δᐃᐃ, Δ[66], 19, 33, 204, ⲆᐃⲆ],
		[ⵠⵠᐃ, Δ[66], ⵠᐃΔⵠⲆ, 29, 202, 0],
		[ᐃⲆΔ, Δ[66], ᐃᐃΔΔᐃ, 27, 200, ΔᐃΔ],
		[ⵠΔΔ, Δ[66], ᐃΔⵠⲆⲆ, 26, 193, ᐃΔΔ],
		[ᐃⵠⵠ, Δ[66], ΔⲆⵠⵠⵠ, ⲆⲆΔⲆⵠ, 201, ⵠᐃΔ],
		[1, Δ[66], 19, ᐃΔⲆΔᐃ, 199, ⲆᐃⲆ],
		[1, Δ[66], 19, 12, 196, ⲆᐃⲆ],
		[1, Δ[66], ΔⲆⵠⵠⵠ, ⵠⲆⵠᐃⲆ, 204, Δⵠⵠ],
		[1, Δ[66], 19, 11, 201, ⵠᐃΔ],
		[1, Δ[66], ΔⲆᐃΔⲆ, 23, 208, ΔᐃΔ],
		[1, Δ[66], ⵠᐃΔⵠⲆ, 31, 214, 0],
		[1, Δ[66], Ⲇᐃᐃᐃᐃ, 26, 215, 0],
		[ᐃⲆⲆ, Δ[66], 19, 36, 217, ⵠⲆⵠ],
		[1, Δ[66], ᐃΔⵠⲆⲆ, 32, 223, 0],
		[1, Δ[66], 19, 26, 223, 0],
		[ⲆΔᐃ, Δ[66], ΔⵠΔΔΔ, 18, 218, 0],
		[Δᐃᐃ, Δ[66], ⵠᐃΔⵠⲆ, ᐃᐃⵠᐃⵠ, 215, ⵠⲆᐃ],
		[Δᐃᐃ, Δ[66], ⵠᐃΔⵠⲆ, 17, 212, ⵠⲆⵠ],
		[ᐃⵠⵠ, Δ[66], 19, 15, 224, ᐃΔΔ],
		[ᐃⲆΔ, Δ[66], ΔⵠΔΔΔ, 19, 229, 0],
		[1, Δ[66], 19, 10, 230, 0],
		[Δᐃᐃ, Δ[66], ᐃᐃⵠᐃⲆ, 22, 240, 0],
		[1, Δ[66], ΔⲆᐃΔⲆ, ⵠⵠᐃᐃΔ, 238, ᐃΔΔ],
		[ⵠΔΔ, Δ[66], ΔⵠΔΔΔ, 13, 243, ᐃΔΔ],
		[1, Δ[66], 19, 24, 244, 0],
		[ᐃⲆΔ, Δ[66], ᐃᐃⵠᐃⲆ, 24, 250, 0],
		[1, Δ[66], ΔⲆⵠⵠⵠ, 28, 253, ⵠᐃΔ],
		[1, Δ[66], ⵠᐃΔⵠⲆ, 33, 255, ΔᐃΔ],
		[ⵠΔⲆ, Δ[66], ⲆΔᐃΔⲆ, 34, 260, ⵠᐃΔ],
		[ᐃⵠⵠ, Δ[66], ΔⵠΔΔΔ, 31, 260, ⵠⲆⵠ],
		[1, Δ[66], ⵠᐃΔⵠⲆ, 38, 267, ⵠᐃΔ],
		[ⲆΔᐃ, Δ[66], ΔⲆᐃΔⲆ, 44, 264, 0],
		[ⵠΔᐃ, Δ[66], 19, 43, 261, ⲆᐃⲆ],
		[ⲆⵠⲆ, Δ[66], 19, 16, 257, 0],
		[1, Δ[66], 19, 22, 258, ΔᐃΔ],
		[1, Δ[66], Ⲇᐃᐃᐃᐃ, ᐃⵠᐃⵠⵠ, 253, ⵠᐃΔ],
		[ⵠΔΔ, Δ[66], ᐃΔⵠⲆⲆ, 8, 242, ⵠⲆᐃ],
		[ᐃⲆΔ, Δ[66], 19, 8, ᐃⵠΔΔⵠ, 0],
		[1, Δ[66], ⵠᐃΔⵠⲆ, ⲆⵠⲆΔⵠ, 264, 0],
		[ᐃⲆΔ, Δ[66], 19, ⲆⵠⵠΔⵠ, 265, 0],
		[ⵠΔⲆ, Δ[66], 19, ΔⲆΔᐃΔ, 271, ΔᐃΔ],
		[ⲆⵠⲆ, Δ[66], ΔⲆⵠⵠⵠ, 8, 272, 0],
		[1, Δ[66], ΔⲆᐃΔⲆ, ΔΔᐃⲆⲆⲆΔ, 277, 0],
		[ⲆⵠⲆ, Δ[66], 19, 21, 277, ⲆᐃⲆ],
		[ⵠⵠᐃ, Δ[66], 19, 21, 281, 0],
		[1, Δ[66], ᐃΔⵠⲆⲆ, 27, 282, 0],
		[ΔⵠⲆ, Δ[66], ⵠᐃΔⵠⲆ, 29, 278, 0],
		[1, Δ[66], ⵠᐃΔⵠⲆ, 29, 273, 0],
		[ᐃⲆΔ, Δ[66], ᐃᐃΔΔᐃ, 36, 271, ⲆᐃⲆ],
		[1, Δ[66], 19, 8, 278, ⵠⲆᐃ],
		[ΔⵠⲆ, Δ[66], ΔⲆᐃΔⲆ, 11, 286, 0],
		[1, Δ[66], 19, ΔᐃⲆⵠΔᐃᐃ, 291, ⵠⲆⵠ],
		[ᐃⲆΔ, Δ[66], ΔⵠΔⵠⵠ, 14, 294, 0],
		[1, Δ[66], ⲆΔᐃΔⲆ, 8, 292, 0],
		[ⵠΔΔ, Δ[66], 19, 12, 300, 0],
		[1, Δ[66], ΔⵠΔⵠⵠ, ΔᐃΔΔᐃΔⲆ, 298, ⲆᐃⲆ],
		[ⵠΔⲆ, Δ[66], 19, ᐃΔⲆⲆⲆ, 301, ᐃΔΔ],
		[ⵠΔᐃ, Δ[66], 19, 27, 296, 0],
		[Δᐃᐃ, Δ[66], 19, 25, 292, ⵠᐃΔ],
		[ᐃⲆⲆ, Δ[66], ΔⲆⵠⵠⵠ, 23, 301, 0],
		[ᐃⲆⲆ, Δ[66], ΔⲆⵠⵠⵠ, 28, 301, 0],
		[ⲆΔᐃ, Δ[66], ᐃΔⵠⲆⲆ, 35, 297, ⵠⲆᐃ],
		[1, Δ[66], 19, 37, 301, 0],
		[ΔⵠⲆ, Δ[66], 19, 43, 301, 0],
		[ᐃⵠⵠ, Δ[66], ΔⵠΔⵠⵠ, 46, 294, 0],
		[ΔⵠⲆ, Δ[66], 19, 46, 288, ⵠᐃΔ],
		[ⵠⵠᐃ, Δ[66], 19, 40, 287, ᐃΔΔ],
		[ⵠⵠᐃ, Δ[66], ᐃᐃΔΔᐃ, 50, 301, ᐃΔΔ],
		[ᐃⲆΔ, Δ[66], 19, 58, 301, ᐃΔΔ],
		[ⵠΔⲆ, Δ[66], ᐃΔⵠⲆⲆ, 64, 301, 0],
		[1, Δ[66], 19, 71, 301, 0],
		[1, Δ[66], ⵠⲆⵠⲆⵠ, 80, 301, ⵠⲆᐃ],
		[ᐃⲆΔ, Δ[66], ΔⵠΔΔΔ, 87, 301, 0],
		[ᐃⲆΔ, Δ[66], 19, 86, 294, ⵠⲆᐃ],
		[ⲆⵠⲆ, Δ[66], 19, 87, 290, 0],
		[ⵠΔΔ, Δ[66], 19, 82, 286, 0],
		[ⲆΔᐃ, Δ[66], 19, 75, 285, 0],
		[ΔⵠⲆ, Δ[66], Ⲇᐃᐃᐃᐃ, 66, 292, 0],
		[1, Δ[66], ΔⲆᐃΔⲆ, 66, 288, 0],
		[ᐃⲆⲆ, Δ[66], ΔⵠΔΔΔ, 58, 288, ⲆᐃⲆ],
		[1, Δ[66], ᐃΔⵠⲆⲆ, 67, 282, 0],
		[1, Δ[66], ⲆΔᐃΔⲆ, 61, 281, 0],
		[ⵠΔΔ, Δ[66], ΔⵠΔΔΔ, 60, 295, 0],
		[ᐃⲆΔ, Δ[66], ⲆΔᐃΔⲆ, 50, 282, 0],
		[ⲆΔᐃ, Δ[66], ᐃΔⵠⲆⲆ, 47, 283, 0],
		[ᐃⵠⵠ, Δ[66], 19, 48, 281, ΔᐃΔ],
		[1, Δ[66], 19, 44, 277, ⵠᐃΔ],
		[ⲆⵠⲆ, Δ[66], 19, 41, 282, ⵠᐃΔ],
		[ⵠⵠᐃ, Δ[66], 19, 38, 281, 0],
		[1, Δ[66], Ⲇᐃᐃᐃᐃ, 42, 288, 0],
		[ⵠⵠᐃ, Δ[66], ᐃᐃⵠᐃⲆ, 52, 281, 0],
		[1, Δ[66], 19, 50, 275, ⵠᐃΔ],
		[1, Δ[66], 19, 39, 277, ΔᐃΔ],
		[1, Δ[66], 19, 38, 284, 0],
		[1, Δ[66], 19, 51, 285, 0],
		[1, Δ[66], ⲆΔᐃΔⲆ, 38, 278, 0],
		[Δᐃᐃ, Δ[66], 19, 47, 272, ⲆᐃⲆ],
		[ᐃⵠⵠ, Δ[66], 19, 44, 267, 0],
		[ⲆⵠⲆ, Δ[66], ΔⵠΔΔΔ, 76, 280, ⵠᐃΔ],
		[1, Δ[66], ᐃᐃΔΔᐃ, 78, 272, ⵠⲆⵠ],
		[ᐃⲆΔ, Δ[66], 19, 68, 275, Δⵠⵠ],
		[ⲆⵠⲆ, Δ[66], 19, 70, 265, ᐃΔΔ],
		[1, Δ[66], 19, 65, 263, 0],
		[Δᐃᐃ, Δ[66], Ⲇᐃᐃᐃᐃ, 64, 262, 0],
		[1, Δ[66], 19, 60, 268, Δⵠⵠ],
		[1, Δ[66], 19, 56, 266, ⵠᐃΔ],
		[1, Δ[66], ΔⲆᐃΔⲆ, 55, 260, 0],
		[1, Δ[66], ᐃΔⵠⲆⲆ, 59, 258, ⵠⲆⵠ],
		[1, Δ[66], ⲆΔᐃΔⲆ, 62, 255, Δⵠⵠ],
		[Δᐃᐃ, Δ[66], 19, 67, 253, ᐃΔΔ],
		[ⵠΔᐃ, Δ[66], ΔⲆᐃΔⲆ, 69, 256, ᐃΔΔ],
		[1, Δ[66], 19, 44, 253, 0],
		[1, Δ[66], 19, 44, 250, Δⵠⵠ],
		[ᐃⲆⲆ, Δ[66], 19, 36, 245, ᐃΔΔ],
		[1, Δ[66], ᐃΔⵠⲆⲆ, 39, 239, 0],
		[1, Δ[66], 19, 42, 234, ⲆᐃⲆ],
		[1, Δ[66], ⵠᐃΔⵠⲆ, 37, 235, 0],
		[1, Δ[66], ΔⵠΔⵠⵠ, 45, 226, 0],
		[1, Δ[66], 19, 46, 222, 0],
		[ᐃⲆⲆ, Δ[66], ΔⵠΔⵠⵠ, 51, 218, ΔᐃΔ],
		[1, Δ[66], 19, 68, 218, 0],
		[ᐃⵠⵠ, Δ[66], ΔⵠΔⵠⵠ, 74, 224, ⵠⲆⵠ],
		[ⵠⵠᐃ, Δ[66], ΔⲆᐃΔⲆ, 76, 218, ⵠⲆᐃ],
		[ⲆΔᐃ, Δ[66], 19, 84, 221, 0],
		[1, Δ[66], 19, 88, 223, Δⵠⵠ],
		[1, Δ[66], ΔⵠΔⵠⵠ, 76, 230, 0],
		[ᐃⲆΔ, Δ[66], 19, 86, 234, ⵠᐃΔ],
		[1, Δ[66], 19, 79, 237, ᐃΔΔ],
		[1, Δ[66], 19, 75, 243, 0],
		[1, Δ[66], 19, 81, 245, ⲆᐃⲆ],
		[1, Δ[66], ⵠᐃΔⵠⲆ, 83, 247, Δⵠⵠ],
		[ⵠΔⲆ, Δ[66], Ⲇᐃᐃᐃᐃ, 88, 247, 0],
		[ⵠⵠᐃ, Δ[66], ΔⲆⵠⵠⵠ, 84, 254, 0],
		[ⵠⵠᐃ, Δ[66], 19, 86, 251, 0],
		[1, Δ[66], 19, 85, 260, ⲆᐃⲆ],
		[1, Δ[66], 19, 79, 260, 0],
		[ΔⵠⲆ, Δ[66], ᐃΔⵠⲆⲆ, 76, 251, ⵠⲆᐃ],
		[1, Δ[66], ΔⲆⵠⵠⵠ, 72, 251, 0],
		[1, Δ[66], ᐃᐃⵠᐃⲆ, 69, 251, 0],
		[1, Δ[66], ⵠᐃΔⵠⲆ, 87, 266, 0],
		[ⵠΔⲆ, Δ[66], ΔⲆᐃΔⲆ, 89, 270, 0],
		[1, Δ[66], ⵠᐃΔⵠⲆ, 87, 271, 0],
		[ⵠⵠᐃ, Δ[66], ᐃᐃⵠᐃⲆ, 82, 277, ⵠᐃΔ],
		[1, Δ[66], 19, 87, 284, ΔᐃΔ],
		[1, Δ[66], 19, 87, 237, 0],
		[1, Δ[66], ΔⲆⵠⵠⵠ, 88, 179, Δⵠⵠ],
		[ΔⵠⲆ, Δ[66], 19, 50, 191, 0],
		[ΔⵠⲆ, Δ[66], ΔⲆⵠⵠⵠ, 52, 221, 0],
		[1, Δ[66], 19, 34, 234, 0],
		[ⵠΔⲆ, Δ[66], 19, 27, 233, ⵠᐃΔ],
		[ⵠΔΔ, Δ[66], ⵠᐃΔⵠⲆ, 37, 293, Δⵠⵠ],
		[ⵠΔΔ, Δ[66], 29, ΔᐃΔᐃⵠ, 181, ⵠⲆᐃ],
		[ᐃⲆⲆ, Δ[66], 29, 8, 180, 0],
		[ᐃⵠⵠ, Δ[66], 30, ⵠᐃΔⲆⲆ, 186, ᐃΔΔ],
		[ᐃⲆΔ, Δ[66], 31, 24, 183, ⵠᐃΔ],
		[ᐃⵠⵠ, Δ[66], 32, 33, 185, 0],
		[1, Δ[66], 32, 37, 182, 0],
		[Δᐃᐃ, Δ[66], 29, 45, 183, 0],
		[1, Δ[66], 30, 48, 183, ᐃΔΔ],
		[1, Δ[66], 30, 58, 181, ⵠⲆⵠ],
		[ⲆΔᐃ, Δ[66], 30, 66, 188, ⵠⲆⵠ],
		[ᐃⲆΔ, Δ[66], 30, 66, 182, Δⵠⵠ],
		[1, Δ[66], 29, 63, 196, 0],
		[1, Δ[66], 29, 54, 194, 0],
		[1, Δ[66], 30, 79, 189, ᐃΔΔ],
		[Δᐃᐃ, Δ[66], 30, 87, 182, ᐃΔΔ],
		[1, Δ[66], 30, 83, 185, 0],
		[ᐃⵠⵠ, Δ[66], 29, 88, 189, ⵠⲆᐃ],
		[ⵠΔⲆ, Δ[66], 29, 85, 202, 0],
		[1, Δ[66], 31, 82, 203, ⵠⲆᐃ],
		[ᐃⲆⲆ, Δ[66], 32, 80, 201, ΔᐃΔ],
		[1, Δ[66], 32, 87, 209, ⵠⲆⵠ],
		[ⲆΔᐃ, Δ[66], 32, 83, 214, 0],
		[1, Δ[66], 30, 88, 220, ΔᐃΔ],
		[ⲆΔᐃ, Δ[66], 30, 78, 229, 0],
		[1, Δ[66], 30, 73, 223, ᐃΔΔ],
		[1, Δ[66], 29, 74, 217, 0],
		[ΔⵠⲆ, Δ[66], 29, 67, 217, ⵠⲆⵠ],
		[ᐃⲆΔ, Δ[66], 30, 72, 208, 0],
		[1, Δ[66], 30, 73, 199, ΔᐃΔ],
		[ᐃⲆΔ, Δ[66], 30, 65, 207, ΔᐃΔ],
		[ⵠⵠᐃ, Δ[66], 29, 63, 210, 0],
		[1, Δ[66], 29, 50, 204, 0],
		[1, Δ[66], 30, 41, 205, ⵠᐃΔ],
		[ⲆΔᐃ, Δ[66], 29, 35, 205, 0],
		[1, Δ[66], 30, 27, 202, 0],
		[1, Δ[66], 30, 20, 201, Δⵠⵠ],
		[ᐃⲆⲆ, Δ[66], 29, 10, 203, 0],
		[ⵠΔΔ, Δ[66], 29, ⵠⵠⲆⵠⲆ, 196, 0],
		[1, Δ[66], 29, 24, 187, 0],
		[1, Δ[66], 29, 28, 223, ᐃΔΔ],
		[ⵠⵠᐃ, Δ[66], 29, 32, 212, 0],
		[1, Δ[66], 30, 28, 214, ⲆᐃⲆ],
		[ⵠΔᐃ, Δ[66], 31, 24, 218, ⵠᐃΔ],
		[1, Δ[66], 29, 36, 219, 0],
		[1, Δ[66], 29, 37, 217, ⲆᐃⲆ],
		[ⵠΔⲆ, Δ[66], 29, 52, 217, 0],
		[ΔⵠⲆ, Δ[66], 29, 59, 217, ᐃΔΔ],
		[ᐃⵠⵠ, Δ[66], 29, 69, 231, ΔᐃΔ],
		[1, Δ[66], 29, 64, 242, 0],
		[1, Δ[66], 30, 53, 253, 0],
		[1, Δ[66], 30, 45, 250, 0],
		[ᐃⲆⲆ, Δ[66], 30, 58, 261, 0],
		[ΔⵠⲆ, Δ[66], 30, 73, 276, 0],
		[1, Δ[66], 30, 64, 276, Δⵠⵠ],
		[ᐃⵠⵠ, Δ[66], 30, 82, 285, 0],
		[ⵠⵠᐃ, Δ[66], 30, 65, 293, ⲆᐃⲆ],
		[1, Δ[66], 30, 56, 288, 0],
		[ⵠΔΔ, Δ[66], 30, 45, 296, 0],
		[ᐃⵠⵠ, Δ[66], 30, 40, 288, ᐃΔΔ],
		[ⵠΔΔ, Δ[66], 30, 37, 283, 0],
		[1, Δ[66], 30, 53, 280, 0],
		[1, Δ[66], 30, 41, 277, ᐃΔΔ],
		[1, Δ[66], 29, 28, 296, ⵠⲆᐃ],
		[ⲆⵠⲆ, Δ[66], 29, 18, 292, 0],
		[ᐃⲆⲆ, Δ[66], 29, 24, 284, 0],
		[ⵠⵠᐃ, Δ[66], 30, ᐃᐃΔⵠⵠ, 295, 0],
		[1, Δ[66], 30, 10, 286, Δⵠⵠ],
		[1, Δ[66], 30, 15, 279, Δⵠⵠ],
		[1, Δ[66], 30, ⲆⲆᐃⵠΔ, 269, 0],
		[1, Δ[66], 30, 21, 259, 0],
		[1, Δ[66], 30, 12, ⵠᐃⲆΔⲆᐃᐃ, ⵠⲆⵠ],
		[1, Δ[66], 30, 31, 245, 0],
		[ⲆⵠⲆ, Δ[66], 30, ᐃⲆⵠΔⵠ, 240, 0],
		[ⲆⵠⲆ, Δ[66], 30, 28, 235, ⲆᐃⲆ],
		[ⲆΔᐃ, Δ[66], 30, 13, 226, 0],
		[1, Δ[66], 30, 39, 231, ᐃΔΔ],
		[1, Δ[66], 30, 61, 226, ⲆᐃⲆ],
		[ⲆΔᐃ, "r", 96, 262, 0],
		[1, "r", 97, 262, Δⵠⵠ],
		[1, "r", 98, 262, ⲆᐃⲆ],
		[1, "r", 97, 270, ᐃΔΔ],
		[1, "r", 97, 271, ⵠⲆⵠ],
		[ⵠΔⲆ, "r", 97, 272, 0],
		[1, "r", 97, 273, ⲆᐃⲆ],
		[ᐃⲆⲆ, "r", 97, 274, ΔᐃΔ],
		[1, "r", 97, 275, ⲆᐃⲆ],
		[ⵠⵠᐃ, "r", 97, 276, 0],
		[1, "r", 97, 277, ⲆᐃⲆ],
		[ⵠⵠᐃ, "r", 97, 278, 0],
		[ᐃⵠⵠ, "r", 98, 270, 0],
		[ᐃⵠⵠ, "r", 98, 271, ⵠᐃΔ],
		[ⵠΔⲆ, "r", 98, 272, ⵠᐃΔ],
		[1, "r", 98, 273, 0],
		[1, "r", 98, 274, 0],
		[1, "r", 98, 275, ΔᐃΔ],
		[1, "r", 98, 276, 0],
		[1, "r", 98, 277, ⵠᐃΔ],
		[ᐃⵠⵠ, "r", 98, 278, ⲆᐃⲆ],
		[1, "r", 96, 283, 0],
		[1, "r", 97, 283, ⵠᐃΔ],
		[1, "r", 97, 284, 0],
		[1, "r", 97, 285, 0],
		[ⵠΔΔ, "r", 98, 283, 0],
		[1, "r", 98, 284, 0],
		[1, "r", 98, 285, ⲆᐃⲆ],
		[Δᐃᐃ, "r", 96, 270, ⵠᐃΔ],
		[1, "r", 96, 271, 0],
		[Δᐃᐃ, "r", 96, 272, 0],
		[ΔⵠⲆ, "r", 96, 273, ΔᐃΔ],
		[1, "r", 96, 274, ⲆᐃⲆ],
		[ⵠΔⲆ, "r", 96, 275, 0],
		[1, "r", 96, 276, ⲆᐃⲆ],
		[ⲆⵠⲆ, "r", 96, 277, ⵠⲆᐃ],
		[ⵠΔⲆ, "r", 96, 278, ⲆᐃⲆ],
		[1, "r", 44, 248, 0],
		[ᐃⵠⵠ, Δ[66], ᐃΔⲆⲆⲆ, 94, 290, ⵠᐃΔ],
		[1, Δ[66], ᐃΔⲆⲆⲆ, 94, 252, ⵠᐃΔ],
		[ⵠⵠᐃ, Δ[66], 16, 94, 228, 0],
		[1, Δ[66], 17, 94, 200, ΔᐃΔ],
		[Δᐃᐃ, "r", 95, 282, 1],
		[ⵠⵠᐃ, "r", 95, 281, ⵠⵠᐃ],
		[ⲆⵠⲆ, "r", 94, 281, ⲆΔᐃ],
		[ᐃⲆⲆ, "r", 90, 281, 1],
		[1, "r", 91, 282, ⵠⵠᐃ],
		[1, "r", 89, 281, 1],
		[1, "r", 85, 276, ⲆⵠⲆ],
		[ⵠΔΔ, "r", 85, 277, ⲆΔᐃ],
		[ᐃⲆΔ, "r", 86, 278, ⵠⵠᐃ],
		[ⲆΔᐃ, "p", 0, 85, 279, 1],
		[1, "r", 86, 279, ᐃⲆⲆ],
		[ⵠΔᐃ, "r", 87, 280, 1],
		[1, "r", 96, 281, ᐃΔΔ],
		[1, "r", 97, 281, Δⵠⵠ],
		[ᐃⵠⵠ, "r", 98, 281, ⵠᐃΔ],
		[ⵠΔⲆ, "r", 98, 282, Δⵠⵠ],
		[ⵠΔⲆ, "r", 97, 282, ⲆᐃⲆ],
		[1, "r", 96, 282, 0],
		[ⲆΔᐃ, "r", 68, 261, ⲆⵠⲆ],
		[1, Δ[106], 1, 94, 168, ΔᐃΔ],
		[1, Δ[106], 2, 94, 151, ΔᐃΔ],
		[ᐃⲆΔ, Δ[106], 1, 94, 138, 0],
		[ⲆⵠⲆ, Δ[106], 1, 93, 124, 0],
		[ᐃⲆⲆ, Δ[106], 1, 94, 129, ⵠⲆᐃ],
		[1, Δ[106], ᐃⵠⵠ, 93, 113, 0],
		[1, Δ[106], 1, 94, 102, 0],
		[ⵠⵠᐃ, Δ[106], 1, 94, 93, Δⵠⵠ],
		[1, Δ[106], 1, 93, 90, Δⵠⵠ],
		[Δᐃᐃ, Δ[106], ⲆⵠⲆ, 94, 79, 0],
		[ⵠΔΔ, Δ[106], 1, 94, 76, 0],
		[Δᐃᐃ, Δ[106], 1, 93, 70, ⵠⲆᐃ],
		[1, Δ[106], ᐃⲆΔ, 93, 63, ΔᐃΔ],
		[1, Δ[106], 1, 94, 53, ⵠᐃΔ],
		[1, Δ[106], 1, 93, ΔⲆⲆΔΔ, Δⵠⵠ],
		[1, Δ[106], ⲆⵠⲆ, 85, 8, ⲆᐃⲆ],
		[1, Δ[106], 1, 94, 12, 0],
		[ⵠΔⲆ, Δ[106], 1, 66, 13, ⵠⲆⵠ],
		[ΔⵠⲆ, Δ[106], 1, 69, 9, ᐃΔΔ],
		[ᐃⲆΔ, Δ[106], 2, 68, 14, 0],
		[Δᐃᐃ, Δ[106], ⲆᐃᐃΔ, 66, 25, 0],
		[1, Δ[106], 2, 92, ᐃⵠⲆⲆᐃ, 0],
		[ᐃⲆⲆ, Δ[106], 2, 94, 14, 0],
		[1, Δ[106], ⲆⲆΔΔ, 87, ⵠΔⲆᐃⲆ, ⵠⲆⵠ],
		[ⵠΔⲆ, Δ[106], 2, 71, 9, Δⵠⵠ],
		[1, Δ[106], 2, 90, ᐃᐃΔᐃⲆ, 0],
		[1, Δ[106], Δᐃᐃⵠ, 91, 13, ΔᐃΔ],
		[ⵠⵠᐃ, Δ[106], ⵠΔΔ, 74, 12, 0],
		[1, Δ[106], 2, 72, 12, ᐃΔΔ],
		[1, Δ[106], 2, 75, ΔᐃΔᐃⵠ, 0],
		[ⵠΔΔ, Δ[106], Δⵠᐃᐃ, 74, ⲆⲆᐃⵠΔ, ⵠⲆⵠ],
		[1, Δ[106], 2, 84, ⲆⵠΔⵠᐃ, ᐃΔΔ],
		[ᐃⵠⵠ, Δ[106], ⲆⲆᐃⲆ, 81, 14, ᐃΔΔ],
		[ᐃⲆⲆ, Δ[106], 1, 84, ⲆⲆⵠΔᐃ, 0],
		[ᐃⲆΔ, Δ[106], 1, 84, ⵠᐃΔⵠⲆ, 0],
		[1, Δ[106], ⲆⵠⲆ, ⵠⵠᐃΔΔ, ⵠΔⲆᐃⲆ, 0],
		[1, Δ[106], ᐃⲆΔ, ⲆⲆᐃⲆⵠ, ΔᐃᐃⲆΔ, 0],
		[1, Δ[106], 1, 8, 22, 0],
		[1, Δ[106], 1, 7, 34, 0],
		[1, Δ[106], ΔⵠⲆ, 12, 24, 0],
		[1, Δ[106], Δⵠᐃᐃ, 8, 24, Δⵠⵠ],
		[1, Δ[106], ⲆⲆᐃⲆ, 9, 21, 0],
		[1, Δ[106], 2, 31, 10, 0],
		[1, Δ[106], ⲆⲆᐃⲆ, 33, 27, 0],
		[ⵠΔⲆ, Δ[106], 2, ⵠⲆᐃΔᐃ, 34, Δⵠⵠ],
		[ⵠΔΔ, Δ[106], 2, ΔΔⲆⵠⵠ, ΔⵠΔΔΔ, 0],
		[ⲆΔᐃ, Δ[106], 1, 14, 10, 0],
		[1, Δ[106], ᐃⵠΔⲆ, 13, 9, 0],
		[1, Δ[106], 2, 15, 11, ⵠⲆᐃ],
		[1, Δ[106], 2, 9, 9, ᐃΔΔ],
		[ⵠΔⲆ, Δ[106], 2, 9, ΔⲆⲆΔΔ, 0],
		[1, Δ[106], 2, ⵠᐃΔΔⲆ, 15, 0],
		[ᐃⵠⵠ, Δ[106], Δᐃᐃⵠ, ⵠᐃᐃⵠⵠ, 23, Δⵠⵠ],
		[1, Δ[106], Δᐃᐃⵠ, 34, 29, 0],
		[1, Δ[106], ⲆᐃᐃΔ, 27, 18, 0],
		[ᐃⵠⵠ, Δ[106], Δⵠᐃᐃ, 25, 21, ᐃΔΔ],
		[1, Δ[106], 2, ᐃⵠⲆᐃΔ, ⲆΔⵠΔᐃ, ΔᐃΔ],
		[ⵠΔⲆ, Δ[106], ΔⲆᐃⲆ, ⲆⲆΔⲆⵠ, 21, 0],
		[1, Δ[106], ⲆᐃᐃΔ, 29, 9, ΔᐃΔ],
		[1, Δ[106], 2, ⲆⲆⵠΔᐃ, 14, ⵠⲆᐃ],
		[1, Δ[106], 2, Ⲇⵠᐃⵠᐃ, 38, 0],
		[1, Δ[106], 2, 21, 39, 0],
		[1, Δ[106], 2, 84, 26, ⵠⲆⵠ],
		[1, Δ[106], 2, 77, 25, 0],
		[1, Δ[106], ΔⲆᐃⲆ, 86, 35, ΔᐃΔ],
		[1, Δ[106], ⵠΔᐃ, 70, 35, 0],
		[ⵠΔⲆ, Δ[106], ⲆᐃᐃΔ, 72, 36, ⲆᐃⲆ],
		[1, Δ[106], 2, 73, 31, 0],
		[ⵠΔⲆ, Δ[106], ⲆᐃᐃΔ, 89, 39, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[106], ⲆⲆᐃⲆ, 65, 40, 0],
		[ΔⵠⲆ, Δ[106], 2, 92, 32, ⲆᐃⲆ],
		[ⵠΔΔ, Δ[106], 2, 90, 28, ⵠⲆⵠ],
		[1, Δ[66], 22, 25, 266, ᐃΔΔ],
		[1, Δ[66], 22, 17, 206, 0],
		[ⲆΔᐃ, Δ[66], 19, 8, 184, 0],
		[1, Δ[66], ΔⵠΔΔΔ, 22, 183, Δⵠⵠ],
		[1, Δ[66], ᐃᐃΔΔᐃ, 35, 188, ⵠⲆⵠ],
		[ⵠΔΔ, Δ[66], 19, 36, 192, 0],
		[Δᐃᐃ, Δ[66], ⵠᐃΔⵠⲆ, 50, 277, 0],
		[1, Δ[66], 19, 35, 279, 0],
		[ᐃⲆΔ, "t", 4, ⲆⵠΔⲆⵠ, 178, 0],
		[1, "t", 1, ⵠᐃᐃⲆⵠ, 179, ᐃΔΔ],
		[ⲆΔᐃ, "t", ᐃⵠⲆⵠ, ᐃⲆᐃⲆⲆ, 180, 0],
		[ⲆΔᐃ, "t", Δᐃᐃⵠ, 7, 181, ᐃΔΔ],
		[ᐃⵠⵠ, "t", ⵠⵠΔⲆ, 7, 182, ⵠⲆᐃ],
		[ⲆΔᐃ, "t", 4, ⲆⵠΔⲆⵠ, 183, 0],
		[1, "t", 3, 7, 184, 0],
		[1, "t", 4, 7, 185, ⲆᐃⲆ],
		[1, "t", Δⵠᐃᐃ, ⵠᐃᐃⲆⵠ, 186, ⵠⲆᐃ],
		[1, "t", 1, 7, 187, 0],
		[ⵠΔΔ, "t", 4, ⲆⵠΔⲆⵠ, 188, 0],
		[1, "t", Ⲇⵠᐃᐃ, ⵠⲆⵠⲆΔ, 189, 0],
		[1, "t", 5, ⵠΔⵠΔᐃ, 190, 0],
		[ⲆΔᐃ, "t", ᐃⵠⵠ, 7, 191, 0],
		[ΔⵠⲆ, "t", ᐃⲆᐃⲆ, 7, 192, 0],
		[ᐃⵠⵠ, "t", ΔᐃΔⵠ, 7, 193, 0],
		[ΔⵠⲆ, "t", 3, ᐃⲆᐃⲆⲆ, 194, ⲆᐃⲆ],
		[1, "t", ⲆΔⲆⲆ, ΔΔⲆⲆⲆ, 195, 0],
		[1, "t", Δⵠᐃᐃ, ⲆⵠΔⲆⵠ, 196, ᐃΔΔ],
		[1, "t", 4, ΔΔⲆⲆⲆ, 197, 0],
		[1, "b", 2, ᐃⲆᐃⲆⲆ, 198, 0],
		[ⲆⵠⲆ, "t", ᐃⵠⲆⲆ, 7, 199, 0],
		[ⵠΔⲆ, "t", Δᐃᐃⵠ, ⵠⲆⵠⲆΔ, 200, ΔᐃΔ],
		[1, "t", ΔΔⵠΔ, ⲆΔΔᐃΔ, 201, Δⵠⵠ],
		[1, "t", ⵠΔᐃⵠ, 7, 202, ⵠⲆᐃ],
		[1, "t", 4, 7, 203, ⵠⲆⵠ],
		[1, "t", ᐃⵠΔⲆ, ⲆⵠΔⲆⵠ, 204, ⵠᐃΔ],
		[Δᐃᐃ, "t", 5, 7, 205, ⲆᐃⲆ],
		[ⲆΔᐃ, "t", 2, 7, 206, ⲆᐃⲆ],
		[ⵠΔᐃ, "t", 1, 7, 207, 0],
		[1, "t", 4, ΔΔⲆⲆⲆ, 208, Δⵠⵠ],
		[1, "t", 3, 7, 209, ⵠᐃΔ],
		[ᐃⲆΔ, "t", 1, 7, 210, ΔᐃΔ],
		[ⵠΔΔ, "b", 0, ⲆΔⲆᐃⲆ, 211, Δⵠⵠ],
		[ⵠΔⲆ, "t", 3, 7, 212, 0],
		[ⵠΔⲆ, "t", 4, ⲆⲆᐃⲆⵠ, 213, ⵠⲆⵠ],
		[ⲆⵠⲆ, "t", Ⲇⵠᐃᐃ, ᐃⲆᐃⲆⲆ, 214, 0],
		[ⵠⵠᐃ, "t", ⲆΔΔΔ, ᐃⲆᐃⲆⲆ, 215, ⲆᐃⲆ],
		[1, "t", Δᐃⵠᐃ, ⵠᐃᐃⲆⵠ, 216, ⲆᐃⲆ],
		[1, "t", 3, ⲆΔΔᐃΔ, 217, Δⵠⵠ],
		[1, "t", ⵠΔᐃ, 7, 218, 0],
		[1, "t", ΔᐃΔΔ, 7, 219, ΔᐃΔ],
		[Δᐃᐃ, "b", ⲆⲆΔΔ, ⵠⲆⵠⲆΔ, 220, 0],
		[ⵠΔᐃ, "t", ᐃⲆΔ, ⵠΔⵠΔᐃ, 221, ⲆᐃⲆ],
		[1, "t", 2, 7, 222, ⵠⲆᐃ],
		[1, "t", ⲆⵠⲆᐃ, ΔΔⲆⲆⲆ, 223, ΔᐃΔ],
		[1, "t", ᐃⵠⲆⵠ, ⵠΔⵠΔᐃ, 224, ᐃΔΔ],
		[ⵠΔΔ, "t", ⵠΔᐃ, 7, 225, 0],
		[1, "t", ⵠΔΔⵠ, 7, 226, 0],
		[1, "t", ⲆⲆᐃⲆ, ⵠΔⵠΔᐃ, 227, 0],
		[ⵠΔⲆ, "t", 5, ⲆⵠΔⲆⵠ, 228, 0],
		[1, "t", ΔⵠⲆⲆ, 7, 229, ⵠᐃΔ],
		[Δᐃᐃ, "t", ⲆⵠⲆ, 7, 230, ⲆᐃⲆ],
		[ᐃⲆⲆ, "t", ᐃᐃΔΔ, ⲆⵠΔⲆⵠ, 231, ᐃΔΔ],
		[1, "b", 2, 7, 232, ΔᐃΔ],
		[1, "t", 5, ᐃⲆᐃⲆⲆ, 233, Δⵠⵠ],
		[ⲆⵠⲆ, "t", 1, 7, 234, 0],
		[1, "t", ᐃⵠⲆⵠ, 7, 235, Δⵠⵠ],
		[1, "t", 4, 7, 236, ΔᐃΔ],
		[1, "t", Δⵠᐃᐃ, ᐃΔᐃⲆᐃ, 237, ᐃΔΔ],
		[1, "t", Δᐃⵠᐃ, 7, 238, Δⵠⵠ],
		[ⵠΔΔ, "b", 3, ⵠᐃᐃⲆⵠ, 239, ⵠᐃΔ],
		[ⲆⵠⲆ, "t", 2, 7, 240, ⵠⲆᐃ],
		[ΔⵠⲆ, "t", ⲆⵠⲆ, 7, 241, 0],
		[1, "t", 2, 7, 242, ⲆᐃⲆ],
		[Δᐃᐃ, "t", ⵠΔΔⵠ, ᐃΔᐃⲆᐃ, 243, ⵠⲆⵠ],
		[ⲆΔᐃ, "t", 3, 7, 244, 0],
		[ⵠΔⲆ, "t", 4, ⲆⵠΔⲆⵠ, 245, ⵠᐃΔ],
		[ᐃⵠⵠ, "t", 1, ⵠΔⵠΔᐃ, 246, 0],
		[ᐃⲆΔ, "b", ⵠⲆⵠ, 7, 247, ⵠⲆᐃ],
		[1, "t", 3, 7, 248, 0],
		[ⵠⵠᐃ, "t", 5, 7, 249, ΔᐃΔ],
		[1, "t", ⲆⲆΔΔ, 7, 250, 0],
		[ⲆΔᐃ, "t", Δᐃᐃ, 7, 251, 0],
		[ⵠΔᐃ, "t", ⵠΔΔⵠ, 7, 252, 0],
		[1, "t", ⲆΔⲆΔ, 7, 253, 0],
		[ⲆΔᐃ, "t", ⵠⵠⲆⵠ, ΔΔⲆⲆⲆ, 254, ⵠⲆᐃ],
		[ᐃⲆⲆ, "t", ᐃⵠⵠ, 7, 255, 0],
		[Δᐃᐃ, "t", 4, 7, ⵠⲆΔⵠᐃᐃΔ, 0],
		[1, "t", 1, 7, 257, 0],
		[1, "t", ⲆⲆᐃⲆ, ⲆΔⲆᐃⲆ, 258, Δⵠⵠ],
		[1, "t", ⲆΔⲆⲆ, ⵠᐃᐃⲆⵠ, 260, 0],
		[ⵠΔΔ, "t", 3, ⲆⲆᐃⲆⵠ, 259, ⵠᐃΔ],
		[1, "t", ⵠΔᐃ, 7, 261, 0],
		[1, "t", 3, ⵠⲆⵠⲆΔ, 262, ⵠⲆⵠ],
		[ΔⵠⲆ, "t", 4, 7, 263, ΔᐃΔ],
		[ⵠⵠᐃ, "t", Δᐃᐃ, ᐃΔᐃⲆᐃ, 264, ΔᐃΔ],
		[1, "t", 2, 7, 265, 0],
		[ΔⵠⲆ, "t", 5, ⲆΔⲆᐃⲆ, 266, 0],
		[ᐃⲆⲆ, "t", ⲆⲆᐃⲆ, ᐃⲆᐃⲆⲆ, 267, ⵠᐃΔ],
		[1, "t", Δⵠᐃᐃ, 7, 269, ⵠⲆᐃ],
		[ᐃⵠⵠ, "b", ⲆⲆᐃⲆ, ᐃⲆᐃⲆⲆ, 268, ⵠⲆⵠ],
		[1, "t", 4, ⲆⲆᐃⲆⵠ, 270, 0],
		[ⵠΔΔ, "t", 1, 7, 271, ⲆᐃⲆ],
		[ⵠⵠᐃ, "t", 5, 7, 272, Δⵠⵠ],
		[ⵠΔᐃ, "b", 2, ⲆⲆᐃⲆⵠ, 273, ᐃΔΔ],
		[1, "t", 4, 7, 274, ΔᐃΔ],
		[1, "t", ΔⲆᐃⲆ, 7, 275, 0],
		[1, "t", 5, ⲆΔⲆᐃⲆ, 276, ᐃΔΔ],
		[1, "t", ⵠⵠΔⲆ, ⵠⲆⵠⲆΔ, 277, 0],
		[1, "t", Δⵠᐃᐃ, ⵠⲆⵠⲆΔ, 278, 0],
		[1, "t", 1, ⲆΔⲆᐃⲆ, 279, Δⵠⵠ],
		[1, "t", ΔᐃΔⵠ, ⵠΔⵠΔᐃ, 280, 0],
		[ⵠΔⲆ, "b", ᐃⵠⵠ, ⵠⲆⵠⲆΔ, 281, ΔᐃΔ],
		[ⵠⵠᐃ, "t", Ⲇⵠᐃᐃ, ⵠⲆⵠⲆΔ, 282, 0],
		[1, "t", ΔᐃΔⵠ, 7, 283, 0],
		[1, "t", 1, ΔΔⲆⲆⲆ, 284, 0],
		[ᐃⲆΔ, "t", ΔⵠᐃⲆ, 7, 285, ⵠⲆᐃ],
		[1, "t", 5, 7, 286, ⲆᐃⲆ],
		[ⵠΔᐃ, "t", ⲆⵠⵠⲆ, ⲆΔΔᐃΔ, 288, 0],
		[1, "t", ᐃⵠΔⲆ, ⲆΔⲆᐃⲆ, 287, ΔᐃΔ],
		[ⵠΔⲆ, "b", 0, ΔΔⲆⲆⲆ, 289, 0],
		[1, "t", 4, 7, 290, ⲆᐃⲆ],
		[ⵠⵠᐃ, "t", ⲆᐃᐃΔ, 7, 291, 0],
		[ᐃⵠⵠ, "t", 5, 7, 292, ᐃΔΔ],
		[ⵠⵠᐃ, "t", 3, 7, 293, Δⵠⵠ],
		[ᐃⲆΔ, "t", ⵠΔᐃ, ᐃⲆᐃⲆⲆ, 294, 0],
		[1, "t", ΔᐃΔΔ, 7, 295, 0],
		[ⵠΔᐃ, "t", 3, 7, 296, 0],
		[1, "t", ⵠΔᐃ, ᐃⲆᐃⲆⲆ, 297, ⵠⲆᐃ],
		[ⲆⵠⲆ, "t", 4, 7, 298, ⵠⲆᐃ],
		[ⵠⵠᐃ, "t", 2, ᐃΔᐃⲆᐃ, 299, ⲆᐃⲆ],
		[ᐃⲆΔ, "b", ⵠⲆⵠ, 7, 300, ᐃΔΔ],
		[1, "t", Δⵠᐃᐃ, ᐃΔᐃⲆᐃ, 301, ⵠⲆᐃ],
		[ᐃⲆⲆ, "r", 196, 271, Δⵠⵠ],
		[1, "r", 199, 274, 0],
		[ΔⵠⲆ, "r", 167, 238, ΔᐃΔ],
		[1, "r", 171, 240, ᐃΔΔ],
		[ⵠΔⲆ, "r", 189, 207, ᐃΔΔ],
		[ⵠΔⲆ, "r", 192, 209, ⵠⲆᐃ],
		[1, "r", 198, 271, 0],
		[ⵠⵠᐃ, "r", 197, 271, ⲆᐃⲆ],
		[1, "r", 198, 272, ⵠⲆᐃ],
		[ⲆⵠⲆ, "r", 197, 272, ᐃΔΔ],
		[1, "r", 196, 272, 0],
		[ᐃⵠⵠ, "r", 195, 272, ⵠᐃΔ],
		[ⲆⵠⲆ, "r", 199, 272, 0],
		[ⵠΔᐃ, "r", 199, 273, ⲆᐃⲆ],
		[ⵠⵠᐃ, "r", 198, 273, 0],
		[1, "r", 197, 273, ᐃΔΔ],
		[ⲆⵠⲆ, "r", 196, 273, 0],
		[1, "r", 198, 274, 0],
		[1, "r", 197, 274, 0],
		[1, "r", 195, 273, 0],
		[ⵠΔΔ, "r", 196, 274, ⵠᐃΔ],
		[ⵠΔΔ, "r", 198, 275, 0],
		[1, "r", 197, 275, ⵠⲆᐃ],
		[ⲆⵠⲆ, "r", 200, 274, 0],
		[ΔⵠⲆ, "r", 200, 273, ᐃΔΔ],
		[1, "r", 199, 275, 0],
		[1, Δ[218], ⲆᐃᐃΔ, 200, 272, ⲆᐃⲆ],
		[ᐃⲆΔ, Δ[218], Δᐃᐃ, 195, 271, ⵠⲆᐃ],
		[ⵠΔⲆ, Δ[218], 0, 199, 268, Δⵠⵠ],
		[1, Δ[218], ⵠⲆᐃ, 193, 277, Δⵠⵠ],
		[1, Δ[218], 1, 199, 276, 0],
		[1, "s", 1, 200, 275, ⵠΔᐃ],
		[1, "s", ⵠⵠᐃ, 194, 272, ᐃⲆⲆ],
		[ᐃⵠⵠ, "s", 2, 193, 270, 1],
		[1, "g", ⲆᐃᐃΔ, 193, 273, 1],
		[1, "g", 2, 201, 267, 1],
		[ᐃⵠⵠ, "m", 2, 220, 298, ⵠΔⲆ],
		[ⵠΔⲆ, "m", 1, 219, 292, ⵠⵠᐃ],
		[ⵠⵠᐃ, "m", ⲆΔᐃ, 214, 297, ⲆⵠⲆ],
		[ⵠⵠᐃ, "r", 168, 238, ⵠⲆⵠ],
		[1, "r", 169, 238, ⵠⲆⵠ],
		[1, "r", 170, 238, ⵠⲆⵠ],
		[1, "r", 171, 239, ΔᐃΔ],
		[ⵠⵠᐃ, "r", 170, 239, 0],
		[1, "r", 169, 239, ⵠⲆⵠ],
		[ⵠΔᐃ, "r", 168, 239, 0],
		[1, "r", 167, 239, 0],
		[1, "r", 166, 239, Δⵠⵠ],
		[ᐃⲆⲆ, "r", 166, 240, ⵠⲆᐃ],
		[ⲆⵠⲆ, "r", 167, 240, ⵠⲆᐃ],
		[1, "r", 168, 240, 0],
		[1, "r", 169, 240, Δⵠⵠ],
		[1, "r", 170, 240, ⵠᐃΔ],
		[ⲆⵠⲆ, "r", 168, 241, 0],
		[ⵠΔᐃ, "r", 169, 241, 0],
		[1, "r", 170, 241, 0],
		[ⲆΔᐃ, "r", 171, 241, ΔᐃΔ],
		[1, Δ[218], 2, 171, 238, Δⵠⵠ],
		[1, Δ[218], ⲆⵠⲆ, 166, 238, Δⵠⵠ],
		[1, Δ[218], Δⵠⵠ, 167, 237, ⲆᐃⲆ],
		[ᐃⵠⵠ, Δ[218], ⵠⲆⵠ, 171, 242, ᐃΔΔ],
		[ⵠΔⲆ, Δ[218], 0, 165, 243, 0],
		[1, Δ[218], Δⵠⵠ, 171, 235, ⵠᐃΔ],
		[1, Δ[218], 0, 174, 241, 0],
		[1, "s", 1, 165, 239, ᐃⲆⲆ],
		[ⲆΔᐃ, "s", 1, 172, 241, 1],
		[1, "s", 0, 170, 237, ⵠΔΔ],
		[ⵠⵠᐃ, "s", 1, 171, 237, Δᐃᐃ],
		[1, "s", 2, 174, 236, ⲆⵠⲆ],
		[Δᐃᐃ, "s", ⲆᐃᐃΔ, 162, 241, ⲆⵠⲆ],
		[1, "s", 2, 170, 246, 1],
		[ⵠΔᐃ, "s", Δⵠᐃᐃ, 167, 235, ⲆⵠⲆ],
		[1, "s", 2, 176, 243, 1],
		[1, "r", 190, 207, ⲆᐃⲆ],
		[1, "r", 191, 207, 0],
		[1, "r", 192, 208, ⵠᐃΔ],
		[ⵠΔΔ, "r", 191, 208, 0],
		[1, "r", 190, 208, 0],
		[1, "r", 189, 208, ⲆᐃⲆ],
		[1, "r", 188, 208, ⲆᐃⲆ],
		[ⵠΔᐃ, "r", 189, 209, ᐃΔΔ],
		[ᐃⵠⵠ, "r", 190, 209, ⵠᐃΔ],
		[1, "r", 191, 209, ΔᐃΔ],
		[ΔⵠⲆ, "r", 188, 209, 0],
		[1, "r", 190, 210, 0],
		[1, "r", 191, 210, 0],
		[1, "r", 192, 210, ᐃΔΔ],
		[1, Δ[218], Δᐃᐃⵠ, 189, 210, 0],
		[1, Δ[218], ⲆⲆᐃⲆ, 192, 205, 0],
		[1, Δ[218], ᐃⲆⲆ, 192, 207, 0],
		[ΔⵠⲆ, Δ[218], ⵠⲆⵠ, 193, 210, 0],
		[ⵠΔΔ, Δ[218], ⵠᐃΔ, 187, 208, Δⵠⵠ],
		[ΔⵠⲆ, Δ[218], 0, 197, 206, 0],
		[ⵠⵠᐃ, Δ[218], ⵠⲆᐃ, 191, 213, 0],
		[ΔⵠⲆ, Δ[218], 0, 190, 204, ⲆᐃⲆ],
		[1, "s", 1, 188, 207, 1],
		[ᐃⲆΔ, "s", 1, 190, 211, 1],
		[ⲆⵠⲆ, "s", ⵠΔᐃⵠ, 188, 213, 1],
		[1, "s", ⲆⲆΔΔ, 187, 205, ᐃⲆⲆ],
		[ᐃⲆⲆ, "s", 0, 194, 210, ⲆⵠⲆ],
		[ᐃⲆⲆ, "s", ᐃΔΔ, 198, 207, ΔⵠⲆ],
		[ⲆⵠⲆ, "s", ⵠΔⲆ, 193, 204, 1],
		[1, "s", Δᐃᐃ, 193, 213, ΔⵠⲆ],
		[1, "s", 2, 198, 212, 1],
		[ⵠΔᐃ, "s", 2, 182, 208, ᐃⲆⲆ],
		[1, "s", Δᐃᐃ, 204, 271, 1],
		[ΔⵠⲆ, "s", 0, 203, 272, 1],
		[1, "s", ΔᐃΔ, 189, 275, ⵠΔΔ],
		[Δᐃᐃ, "s", 0, 195, 265, ᐃⵠⵠ],
		[1, "s", ᐃⵠΔⲆ, 196, 264, ΔⵠⲆ],
		[ⵠΔᐃ, "s", Δᐃᐃⵠ, 186, 274, Δᐃᐃ],
		[Δᐃᐃ, "s", ⲆⲆᐃⲆ, 197, 280, ᐃⲆΔ],
		[1, "s", 0, 217, 282, ⵠΔⲆ],
		[Δᐃᐃ, "s", Δᐃᐃ, 214, 285, Δᐃᐃ],
		[1, "s", 1, 214, 274, 1],
		[ᐃⲆⲆ, "s", 1, 203, 282, ⵠΔᐃ],
		[ⵠΔⲆ, "s", ⵠΔΔ, 205, 290, 1],
		[Δᐃᐃ, "s", 0, 207, 292, ᐃⲆΔ],
		[ⵠΔᐃ, "s", 0, 197, 297, 1],
		[1, "s", 0, 184, 287, ⵠΔΔ],
		[ⲆⵠⲆ, "s", ᐃⵠΔⲆ, 213, 289, ⵠΔΔ],
		[1, "s", Δⵠᐃᐃ, 196, 294, 1],
		[ⵠⵠᐃ, "s", ΔⲆᐃⲆ, 187, 286, ⲆΔᐃ],
		[1, "s", 1, 192, 289, ΔⵠⲆ],
		[ⵠⵠᐃ, "s", 1, 189, 299, Δᐃᐃ],
		[ⲆⵠⲆ, "s", ΔᐃΔ, 213, 273, 1],
		[1, "g", ᐃⵠΔⲆ, 212, 278, ΔⵠⲆ],
		[1, "g", 1, 200, 288, 1],
		[1, "g", Δᐃᐃⵠ, 215, 265, ΔⵠⲆ],
		[1, "g", Δᐃᐃⵠ, 183, 281, 1],
		[1, "s", 0, 178, 295, 1],
		[1, "s", 0, 167, 281, ⵠⵠᐃ],
		[1, "s", 0, 175, 263, 1],
		[ⲆⵠⲆ, "s", 1, 176, 293, ⵠΔΔ],
		[ⵠΔΔ, "s", 1, 163, 285, ⵠⵠᐃ],
		[1, "s", ⲆΔᐃ, 177, 266, ΔⵠⲆ],
		[1, "s", ⲆⵠⲆ, 161, 272, 1],
		[1, "s", Δᐃᐃⵠ, 185, 261, 1],
		[1, "c", ⵠᐃΔ, 217, 270, 1],
		[ⵠΔᐃ, "c", ⲆᐃⲆ, 220, 278, ᐃⲆΔ],
		[ᐃⲆⲆ, "c", ⵠⲆᐃ, 217, 283, 1],
		[ᐃⲆΔ, "c", ⵠᐃΔ, 220, 287, ⵠΔᐃ],
		[1, "c", 0, 210, 292, ΔⵠⲆ],
		[ⵠΔⲆ, "c", 0, 205, 297, 1],
		[ⵠⵠᐃ, "c", ᐃΔΔ, 198, 293, ⵠΔΔ],
		[1, "c", ᐃΔΔ, 208, 283, 1],
		[ᐃⵠⵠ, "c", 0, 197, 283, 1],
		[1, "c", 0, 190, 289, ⵠΔⲆ],
		[ⵠΔⲆ, "c", ⵠᐃΔ, 183, 296, 1],
		[1, "c", ⵠᐃΔ, 189, 291, 1],
		[Δᐃᐃ, "c", 0, 178, 284, 1],
		[1, "c", Δⵠⵠ, 208, 265, 1],
		[1, "c", 0, 169, 292, ᐃⲆΔ],
		[ⵠΔΔ, "s", 1, 158, 294, 1],
		[ⲆΔᐃ, "s", ⵠᐃΔ, 151, 297, ⵠⵠᐃ],
		[1, "s", 0, 147, 288, 1],
		[Δᐃᐃ, "c", 0, 150, 289, 1],
		[ⵠⵠᐃ, "c", 0, 160, 282, ⵠΔⲆ],
		[1, "c", ⵠᐃΔ, 146, 274, 1],
		[1, "c", 0, 167, 264, 1],
		[ⲆΔᐃ, "c", ΔᐃΔ, 165, 267, ᐃⵠⵠ],
		[ⲆΔᐃ, "g", 0, 189, 257, 1],
		[1, "g", ⵠⵠᐃ, 197, 248, ⲆΔᐃ],
		[1, "g", ᐃⵠΔⲆ, 170, ᐃΔᐃⵠΔ, 1],
		[ⲆⵠⲆ, "g", 2, 212, 234, ᐃⲆΔ],
		[ᐃⲆΔ, "g", ⲆⲆᐃⲆ, 189, 230, 1],
		[1, "g", 2, 173, 221, ᐃⲆⲆ],
		[ᐃⵠⵠ, "g", ⵠⵠᐃ, 210, 214, ᐃⲆΔ],
		[Δᐃᐃ, "s", 1, 153, 257, 1],
		[1, "s", ᐃΔΔ, 158, 255, 1],
		[1, "s", Δⵠⵠ, 184, 248, ᐃⲆⲆ],
		[1, "s", ⵠⲆⵠ, 212, 254, 1],
		[1, "s", 1, 203, 249, 1],
		[ⵠⵠᐃ, "s", 2, 204, 252, ⵠΔᐃ],
		[1, "s", ⲆⲆᐃⲆ, 187, 248, 1],
		[ᐃⵠⵠ, "s", 0, 206, 237, 1],
		[ⵠΔΔ, "s", Δⵠⵠ, 196, 227, ⵠΔΔ],
		[ᐃⵠⵠ, "s", 0, 181, 228, ⲆⵠⲆ],
		[1, "s", 1, 199, 227, ⲆΔᐃ],
		[ᐃⲆΔ, "s", 1, 208, 238, 1],
		[ᐃⲆΔ, "s", 1, 179, 222, ⵠΔΔ],
		[1, "s", 1, 213, 223, ⵠΔΔ],
		[ΔⵠⲆ, "s", Δⵠᐃᐃ, 182, 222, 1],
		[ΔⵠⲆ, "s", 2, 211, 226, ⵠΔᐃ],
		[ⲆⵠⲆ, "s", 2, 214, 214, 1],
		[ᐃⵠⵠ, "s", Δⵠᐃᐃ, 201, 216, ΔⵠⲆ],
		[ᐃⲆΔ, "s", ⲆⲆΔΔ, 215, 192, 1],
		[ⲆⵠⲆ, "s", 1, 210, 198, ᐃⲆΔ],
		[1, "s", Δᐃᐃ, 198, 196, 1],
		[1, "s", ⲆᐃᐃΔ, 208, 199, 1],
		[Δᐃᐃ, "s", 2, 187, 192, 1],
		[1, "s", ⲆΔᐃ, 179, 198, 1],
		[1, "s", ⲆⲆΔΔ, 177, 197, 1],
		[1, "s", Δⵠⵠ, 164, 197, 1],
		[ⵠΔᐃ, "s", 1, 159, 193, ⵠΔⲆ],
		[1, "s", 1, 149, 206, 1],
		[1, "s", 1, 164, 209, ᐃⲆⲆ],
		[1, "s", 2, 165, 210, Δᐃᐃ],
		[1, "s", 2, 161, 191, ᐃⲆΔ],
		[1, "s", 1, 162, 224, ⲆⵠⲆ],
		[1, "s", ⵠⲆᐃ, 150, 236, 1],
		[1, "s", ᐃⵠⵠ, 149, 239, 1],
		[1, "s", ⵠΔᐃⵠ, 153, 236, ΔⵠⲆ],
		[1, "s", 2, 160, 223, 1],
		[1, "s", ⲆⲆᐃⲆ, 151, 207, 1],
		[ΔⵠⲆ, "s", Δⵠᐃᐃ, 147, 220, ⵠΔⲆ],
		[1, "s", ⲆᐃᐃΔ, 145, 265, 1],
		[ⵠⵠᐃ, "s", ⲆⲆΔΔ, 145, 285, 1],
		[1, "c", ᐃΔΔ, 152, 266, Δᐃᐃ],
		[1, "c", 0, 185, 271, 1],
		[ⵠΔᐃ, "c", ΔᐃΔ, 210, 254, ⵠΔⲆ],
		[1, "c", ᐃΔΔ, 209, ⵠⲆᐃⵠᐃⲆⵠ, ⲆⵠⲆ],
		[1, "c", 0, 198, 254, 1],
		[1, "c", ⵠⲆⵠ, 213, 246, 1],
		[1, "c", ᐃΔΔ, 216, 237, ⵠⵠᐃ],
		[ΔⵠⲆ, "c", 0, 204, 240, ⵠⵠᐃ],
		[1, "c", ⵠⲆⵠ, 196, 234, ᐃⲆⲆ],
		[ⵠΔⲆ, "c", 0, 188, 238, ⵠΔᐃ],
		[1, "c", 0, 182, 245, 1],
		[ΔⵠⲆ, "c", 0, 173, 252, ΔⵠⲆ],
		[ⵠΔᐃ, "c", ⵠⲆⵠ, 153, 248, ⵠΔᐃ],
		[1, "c", Δⵠⵠ, 158, 233, Δᐃᐃ],
		[1, "c", 0, 147, 230, ⲆⵠⲆ],
		[Δᐃᐃ, "c", 0, 151, 224, 1],
		[1, "c", 0, 157, 214, 1],
		[ⲆΔᐃ, "c", 0, 167, 219, ⲆΔᐃ],
		[ⵠⵠᐃ, "c", ᐃΔΔ, 171, 208, 1],
		[1, "c", ⵠⲆⵠ, 179, 219, ⲆΔᐃ],
		[1, "c", 0, 176, 229, 1],
		[ⲆⵠⲆ, "c", 0, 195, 221, 1],
		[ΔⵠⲆ, "c", ΔᐃΔ, 207, 222, ⵠΔᐃ],
		[1, "c", ⵠⲆⵠ, 214, 207, ᐃⲆΔ],
		[1, "c", 0, 205, 210, ⵠΔᐃ],
		[1, "c", ⲆᐃⲆ, 204, 196, ᐃⲆⲆ],
		[1, "c", 0, 214, 196, 1],
		[1, "c", 0, 190, 199, ⵠΔᐃ],
		[1, "c", 0, 184, 194, ⲆⵠⲆ],
		[ⵠΔΔ, "c", ⵠⲆⵠ, 172, 199, ⵠΔΔ],
		[1, "c", ⲆᐃⲆ, 161, 204, 1],
		[ᐃⵠⵠ, "c", 0, 157, 196, 1],
		[1, "c", ᐃΔΔ, 149, 194, ΔⵠⲆ],
		[ᐃⲆΔ, "c", 0, 147, 208, 1],
		[1, "c", ⵠⲆᐃ, 207, 274, ⵠΔΔ],
		[1, "c", ᐃΔΔ, 217, 258, ⲆⵠⲆ],
		[ⲆΔᐃ, "c", ⵠᐃΔ, 201, 260, 1],
		[1, "c", 0, 178, 276, ᐃⵠⵠ],
		[ⵠΔⲆ, "c", Δⵠⵠ, 187, 265, ⵠΔᐃ],
		[Δᐃᐃ, "s", ⵠΔᐃ, 204, 260, ⲆⵠⲆ],
		[1, "s", ⵠⵠᐃ, 216, 260, ΔⵠⲆ],
		[1, "s", 1, 187, 255, ᐃⲆΔ],
		[1, "s", 2, 189, 254, ᐃⵠⵠ],
		[ΔⵠⲆ, "s", ΔⲆᐃⲆ, 212, 257, 1],
		[ΔⵠⲆ, "s", ᐃⵠΔⲆ, 182, 286, ⵠΔⲆ],
		[ⵠⵠᐃ, "s", ⵠΔᐃⵠ, 169, 280, ⲆΔᐃ],
		[1, "s", Δⵠᐃᐃ, 217, 273, ⵠⵠᐃ],
		[1, "s", 2, 215, 282, 1],
		[ᐃⲆΔ, "s", Δᐃᐃⵠ, 172, 263, 1],
		[1, "s", 2, 176, 267, ⵠΔⲆ],
		[ⲆⵠⲆ, "s", ⲆⲆΔΔ, 215, 251, 1],
		[1, Δ[311], ᐃⵠⵠ, 221, 282, ⲆᐃⲆ],
		[1, Δ[311], ΔⵠⲆ, 222, 284, 0],
		[ᐃⲆΔ, Δ[311], ⵠΔΔ, 221, 290, 0],
		[1, Δ[311], ΔⵠⲆ, 222, 294, 0],
		[1, Δ[311], ΔⵠⲆ, 221, 297, ⲆᐃⲆ],
		[1, Δ[311], 1, 223, 298, ⵠⲆⵠ],
		[ⲆΔᐃ, Δ[311], 1, 222, 300, ⵠⲆᐃ],
		[1, Δ[311], 1, 218, 301, Δⵠⵠ],
		[1, Δ[311], ⵠΔΔ, 217, 299, Δⵠⵠ],
		[ΔⵠⲆ, Δ[311], ᐃⵠⵠ, 215, 301, 0],
		[1, Δ[311], ⵠΔΔ, 212, 300, ᐃΔΔ],
		[1, Δ[311], ⵠⵠᐃ, 206, 300, ⲆᐃⲆ],
		[ᐃⵠⵠ, Δ[311], 1, 209, 301, ⵠᐃΔ],
		[ᐃⲆΔ, Δ[311], ΔⵠⲆ, 204, 299, 0],
		[ⵠΔΔ, Δ[311], 1, 202, 301, 0],
		[ᐃⲆⲆ, Δ[311], 1, 199, 301, ⵠᐃΔ],
		[ᐃⲆⲆ, Δ[311], 1, 222, 282, 0],
		[1, Δ[311], ⲆⵠⲆ, 207, 301, 0],
		[ᐃⲆΔ, Δ[311], ΔⵠⲆ, 197, 301, ᐃΔΔ],
		[ⵠΔΔ, Δ[311], 1, 215, 291, 0],
		[1, Δ[311], 1, 216, 286, ᐃΔΔ],
		[1, Δ[311], 1, 214, 292, ⵠⲆᐃ],
		[1, Δ[311], 1, 210, 289, ΔᐃΔ],
		[1, Δ[311], ⲆΔᐃ, 208, 294, 0],
		[ᐃⲆⲆ, Δ[311], ⵠⵠᐃ, 210, 298, 0],
		[1, Δ[311], ⲆⵠⲆ, 212, 281, ΔᐃΔ],
		[1, Δ[311], ⲆⵠⲆ, 219, 278, 0],
		[1, Δ[311], ΔⵠⲆ, 219, 282, ᐃΔΔ],
		[1, Δ[311], ⲆⵠⲆ, 205, 286, ᐃΔΔ],
		[ⲆⵠⲆ, Δ[311], 1, 202, 293, ⲆᐃⲆ],
		[ⵠΔⲆ, Δ[311], 1, 198, 295, 0],
		[ⵠΔᐃ, Δ[311], 2, 213, 282, ⲆᐃⲆ],
		[ⵠΔⲆ, Δ[311], 2, 213, 291, 0],
		[1, Δ[311], Δⵠᐃᐃ, 216, 289, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[311], ⲆᐃᐃΔ, 219, 289, Δⵠⵠ],
		[ⵠⵠᐃ, Δ[311], Δᐃᐃⵠ, 218, 285, Δⵠⵠ],
		[1, Δ[311], 2, 220, 283, 0],
		[1, Δ[311], 2, 211, 283, 0],
		[1, Δ[311], ᐃⵠΔⲆ, 215, 281, ⵠⲆᐃ],
		[1, Δ[311], 2, 217, 279, 0],
		[1, Δ[311], 2, 208, 290, 0],
		[1, Δ[311], 2, 211, 296, 0],
		[ⲆΔᐃ, Δ[311], ⵠΔᐃⵠ, 215, 294, 0],
		[ⵠⵠᐃ, Δ[311], ⲆⲆΔΔ, 212, 298, 0],
		[1, Δ[311], 2, 203, 294, ᐃΔΔ],
		[1, Δ[311], ⵠΔᐃⵠ, 204, 288, 0],
		[ⵠⵠᐃ, Δ[311], ⲆᐃᐃΔ, 200, 294, ΔᐃΔ],
		[ⵠΔᐃ, Δ[311], 2, 198, 297, 0],
		[1, Δ[311], ᐃⵠΔⲆ, 202, 299, ⵠⲆⵠ],
		[1, Δ[311], Δᐃᐃⵠ, 200, 299, 0],
		[1, Δ[311], 2, 220, 300, ⲆᐃⲆ],
		[1, Δ[311], ⵠΔᐃⵠ, 220, 295, ⵠⲆᐃ],
		[ᐃⵠⵠ, Δ[311], 2, 220, 292, 0],
		[1, Δ[311], ΔⲆᐃⲆ, 219, 287, 0],
		[ⵠΔᐃ, Δ[311], 2, 211, 288, 0],
		[ⵠΔΔ, Δ[311], Δⵠᐃᐃ, 213, 287, Δⵠⵠ],
		[ⲆⵠⲆ, Δ[311], 2, 211, 289, 0],
		[1, Δ[311], 2, 212, 290, ΔᐃΔ],
		[1, Δ[311], ⲆⲆᐃⲆ, 195, 296, Δⵠⵠ],
		[1, Δ[311], 2, 196, 299, ⵠᐃΔ],
		[1, Δ[311], ⲆᐃᐃΔ, 194, 300, ᐃΔΔ],
		[1, Δ[311], 2, 195, 300, 0],
		[1, Δ[311], 2, 213, 279, 0],
		[ⵠΔᐃ, Δ[311], 2, 211, 279, ΔᐃΔ],
		[Δᐃᐃ, Δ[311], 0, 218, 290, ΔᐃΔ],
		[ⲆΔᐃ, Δ[311], 0, 212, 294, ᐃΔΔ],
		[1, Δ[311], 1, 213, 295, 0],
		[ᐃⲆΔ, Δ[311], Δᐃᐃ, 217, 292, 0],
		[ΔⵠⲆ, Δ[311], ⵠΔⲆ, 218, 288, 0],
		[1, Δ[311], ΔⵠⲆ, 210, 295, ⵠⲆᐃ],
		[1, Δ[311], 1, 213, 292, 0],
		[1, Δ[311], 1, 212, 289, 0],
		[Δᐃᐃ, Δ[311], ⲆⵠⲆ, 205, 295, 0],
		[ⲆΔᐃ, Δ[311], 2, 206, 296, ⵠⲆᐃ],
		[ⵠΔⲆ, Δ[311], 2, 208, 296, 0],
		[1, Δ[311], ΔⲆᐃⲆ, 221, 288, 0],
		[1, Δ[311], 2, 209, 299, 0],
		[1, Δ[311], 2, 211, 291, 0],
		[ⵠΔᐃ, Δ[311], 1, 203, 275, ⲆᐃⲆ],
		[ⵠⵠᐃ, Δ[311], 1, 204, 272, 0],
		[ⵠΔᐃ, Δ[311], 2, 205, 273, ⲆᐃⲆ],
		[1, Δ[311], Δⵠᐃᐃ, 204, 276, ⵠⲆⵠ],
		[1, Δ[311], ⵠΔᐃⵠ, 202, 276, 0],
		[1, Δ[311], ΔⲆᐃⲆ, 199, 277, 0],
		[ⵠⵠᐃ, Δ[311], 2, 202, 273, ΔᐃΔ],
		[1, Δ[311], ⲆᐃᐃΔ, 199, 270, 0],
		[1, Δ[311], 2, 194, 274, 0],
		[ⲆΔᐃ, Δ[311], ᐃⵠΔⲆ, 194, 277, 0],
		[1, Δ[311], 1, 192, 274, 0],
		[ⵠΔΔ, Δ[311], 1, 194, 267, 0],
		[ⵠΔΔ, Δ[311], 2, 194, 265, Δⵠⵠ],
		[ⲆΔᐃ, Δ[311], 2, 190, 272, ΔᐃΔ],
		[Δᐃᐃ, Δ[311], 2, 191, 275, 0],
		[1, Δ[311], 2, 195, 274, 0],
		[ⵠⵠᐃ, Δ[311], 2, 200, 271, 0],
		[ⵠΔᐃ, Δ[311], 1, 168, 243, 0],
		[1, Δ[311], 1, 175, 240, 0],
		[1, Δ[311], Δᐃᐃ, 169, 234, Δⵠⵠ],
		[ΔⵠⲆ, Δ[311], 1, 162, 235, ⲆᐃⲆ],
		[ⵠΔΔ, Δ[311], ⲆⲆᐃⲆ, 169, 236, ΔᐃΔ],
		[1, Δ[311], 2, 171, 234, 0],
		[ⵠΔΔ, Δ[311], ΔⲆᐃⲆ, 165, 238, ⵠⲆⵠ],
		[ⵠⵠᐃ, Δ[311], Δᐃᐃⵠ, 173, 241, 0],
		[1, Δ[311], 2, 174, 238, ⵠⲆⵠ],
		[1, Δ[311], 2, 176, 240, ⵠⲆⵠ],
		[ⵠΔᐃ, Δ[311], ⲆⲆΔΔ, 169, 244, ΔᐃΔ],
		[ᐃⵠⵠ, Δ[311], Δᐃᐃⵠ, 166, 243, ⵠⲆⵠ],
		[ⲆⵠⲆ, Δ[311], 2, 162, 236, 0],
		[ᐃⲆⲆ, Δ[311], 2, 164, 235, 0],
		[1, Δ[311], Δⵠᐃᐃ, 162, 233, ⵠⲆⵠ],
		[ⵠΔⲆ, Δ[311], 2, 163, 236, ⲆᐃⲆ],
		[ΔⵠⲆ, Δ[311], Δⵠᐃᐃ, 174, 242, 0],
		[ⲆΔᐃ, Δ[311], ⲆⲆΔΔ, 171, 243, 0],
		[ⵠΔΔ, Δ[311], ⵠΔᐃ, 194, 206, 0],
		[ⵠΔᐃ, Δ[311], 1, 190, 214, ⵠⲆᐃ],
		[1, Δ[311], 1, 186, 206, 0],
		[1, Δ[311], ΔⵠⲆ, 197, 207, 0],
		[ⲆⵠⲆ, Δ[311], 2, 196, 208, ⵠⲆⵠ],
		[ⵠΔⲆ, Δ[311], 2, 198, 206, ⲆᐃⲆ],
		[ⵠⵠᐃ, Δ[311], 2, 198, 208, 0],
		[ΔⵠⲆ, Δ[311], ΔⲆᐃⲆ, 194, 204, 0],
		[ⵠΔⲆ, Δ[311], Δᐃᐃⵠ, 187, 206, 0],
		[ᐃⲆΔ, Δ[311], 2, 186, 204, ᐃΔΔ],
		[ᐃⲆΔ, Δ[311], 2, 189, 214, 0],
		[1, Δ[311], 2, 189, 213, 0],
		[1, Δ[311], 2, 193, 215, ⵠⲆⵠ],
		[1, Δ[311], 2, 194, 214, 0],
		[ⵠΔⲆ, Δ[311], Δᐃᐃⵠ, 187, 215, ᐃΔΔ],
		[1, Δ[311], 2, 193, 209, 0],
		[ⲆΔᐃ, Δ[311], ⵠΔᐃⵠ, 189, 211, 0],
		[1, Δ[311], ⲆⲆᐃⲆ, 187, 209, Δⵠⵠ],
		[1, Δ[311], ᐃⵠΔⲆ, 187, 207, ΔᐃΔ],
		[1, Δ[311], 2, 191, 205, 0],
		[ⵠΔΔ, Δ[311], Δᐃᐃⵠ, 189, 203, ⵠⲆⵠ],
		[Δᐃᐃ, Δ[278], 2, 224, 176, 1],
		[ᐃⲆΔ, Δ[278], ⵠⲆᐃ, 224, 177, 1],
		[1, Δ[278], ⲆΔⲆΔ, 224, 178, ᐃⲆⲆ],
		[1, Δ[278], 2, 224, 179, 1],
		[ⵠⵠᐃ, Δ[278], 1, 224, 180, ⵠΔΔ],
		[1, Δ[278], 2, 224, 181, 1],
		[1, Δ[278], ⵠᐃΔ, 224, 182, 1],
		[ΔⵠⲆ, Δ[278], ⲆᐃᐃΔ, 224, 183, ᐃⲆΔ],
		[1, Δ[278], 0, 224, 184, ᐃⵠⵠ],
		[1, Δ[278], 3, 224, 185, ⲆⵠⲆ],
		[ᐃⲆΔ, Δ[278], 2, 224, 186, Δᐃᐃ],
		[Δᐃᐃ, Δ[278], ⵠⲆᐃ, 224, 187, ⵠΔΔ],
		[ᐃⵠⵠ, Δ[278], ⲆⲆΔΔ, 224, 188, ⵠΔⲆ],
		[1, Δ[278], 0, 224, 189, 1],
		[ⵠΔⲆ, Δ[278], Δᐃᐃ, 224, 190, ⲆΔᐃ],
		[1, Δ[278], 2, 224, 191, 1],
		[ᐃⲆΔ, Δ[278], 0, 224, 192, 1],
		[1, Δ[278], Δᐃᐃⵠ, 224, 193, ⵠΔᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 224, 194, 1],
		[1, Δ[278], ᐃⲆⲆ, 224, 195, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 224, 196, ᐃⲆⲆ],
		[ⲆΔᐃ, Δ[278], ⵠⲆⵠ, 224, 197, 1],
		[1, Δ[278], ⲆΔⲆΔ, 224, 198, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 224, 199, 1],
		[1, Δ[278], 1, 224, 200, Δᐃᐃ],
		[1, Δ[278], ⲆⲆᐃⲆ, 224, 201, 1],
		[ⲆΔᐃ, Δ[278], Ⲇⵠᐃᐃ, 224, 202, 1],
		[1, Δ[278], 0, 224, 203, ⲆⵠⲆ],
		[ᐃⲆΔ, Δ[278], ΔⵠⲆ, 224, 204, ᐃⵠⵠ],
		[1, Δ[278], 2, 224, 205, 1],
		[1, Δ[278], 0, 224, 206, 1],
		[ⲆⵠⲆ, Δ[278], ᐃⵠⵠ, 224, 207, 1],
		[Δᐃᐃ, Δ[278], 3, 224, 208, 1],
		[ⵠⵠᐃ, Δ[278], ⲆᐃᐃΔ, 224, 209, ΔⵠⲆ],
		[1, Δ[278], 2, 224, 210, ⲆⵠⲆ],
		[ⲆⵠⲆ, Δ[278], 0, 223, 211, ΔⵠⲆ],
		[1, Δ[278], ⲆΔᐃ, 224, 211, 1],
		[ΔⵠⲆ, Δ[278], ᐃⵠΔⲆ, 224, 212, 1],
		[1, Δ[278], 2, 224, 213, ⲆⵠⲆ],
		[ᐃⲆⲆ, Δ[278], 1, 224, 214, 1],
		[ᐃⲆⲆ, Δ[278], 3, 224, 215, ᐃⵠⵠ],
		[1, Δ[278], 0, 224, 216, 1],
		[1, Δ[278], ᐃⲆⲆ, 224, 217, 1],
		[ᐃⵠⵠ, Δ[278], 2, 224, 218, ⵠΔΔ],
		[ⵠⵠᐃ, Δ[278], 3, 224, 219, ⵠΔᐃ],
		[ⲆⵠⲆ, Δ[278], 0, 223, 215, 1],
		[1, Δ[278], 2, 223, 214, ΔⵠⲆ],
		[1, Δ[278], 2, 223, 212, ΔⵠⲆ],
		[1, Δ[278], ⵠΔᐃⵠ, 223, 216, ΔⵠⲆ],
		[1, Δ[278], 3, 223, 217, ⵠΔⲆ],
		[ⵠΔⲆ, Δ[278], ΔᐃΔ, 223, 218, 1],
		[1, Δ[278], 0, 224, 220, 1],
		[1, Δ[278], ᐃΔΔ, 224, 222, 1],
		[ⵠⵠᐃ, Δ[278], 0, 223, 209, ⲆΔᐃ],
		[1, Δ[278], ⲆᐃⲆ, 223, 205, ⵠΔΔ],
		[1, Δ[278], 2, 224, 221, 1],
		[ΔⵠⲆ, Δ[278], Δᐃᐃⵠ, 223, 219, 1],
		[1, Δ[278], ⲆⲆᐃⲆ, 223, 220, 1],
		[1, Δ[278], 2, 223, 213, 1],
		[ⲆΔᐃ, Δ[278], ⲆᐃᐃΔ, 223, 210, ᐃⲆΔ],
		[ᐃⲆΔ, Δ[278], ᐃⵠⵠ, 223, 178, 1],
		[ᐃⵠⵠ, Δ[278], 3, 223, 179, ᐃⲆⲆ],
		[1, Δ[278], ᐃⵠᐃⲆ, 223, 181, 1],
		[ⵠΔΔ, Δ[278], ΔⵠⲆⲆ, 223, 182, 1],
		[1, Δ[278], 1, 223, 185, ᐃⵠⵠ],
		[1, Δ[278], 2, 223, 184, ⵠΔΔ],
		[ᐃⲆⲆ, Δ[278], 2, 223, 186, ⵠΔΔ],
		[1, Δ[278], 0, 223, 180, 1],
		[ⲆΔᐃ, Δ[278], ⵠⲆⵠ, 223, 183, ΔⵠⲆ],
		[ⲆΔᐃ, Δ[278], ᐃⵠΔⲆ, 223, 187, ⵠΔᐃ],
		[1, Δ[278], 1, 223, 188, 1],
		[1, Δ[278], 2, 223, 189, ⲆΔᐃ],
		[ᐃⵠⵠ, Δ[278], ΔⲆᐃⲆ, 223, 190, ΔⵠⲆ],
		[1, Δ[278], 3, 223, 191, 1],
		[1, Δ[278], ΔⵠⲆ, 223, 192, 1],
		[ΔⵠⲆ, Δ[278], 2, 223, 193, ΔⵠⲆ],
		[1, Δ[278], 2, 223, 194, 1],
		[1, Δ[278], 3, 223, 195, 1],
		[ᐃⲆΔ, Δ[278], ⲆΔᐃ, 223, 196, ᐃⵠⵠ],
		[1, Δ[278], 2, 223, 197, ᐃⲆΔ],
		[1, Δ[278], 2, 223, 199, 1],
		[ΔⵠⲆ, Δ[278], 2, 223, 198, ⵠΔⲆ],
		[ⵠⵠᐃ, Δ[278], 0, 223, 200, 1],
		[ⲆⵠⲆ, Δ[278], 2, 223, 201, ΔⵠⲆ],
		[1, Δ[278], ⲆᐃⲆ, 223, 202, 1],
		[1, Δ[278], ᐃⵠⲆⵠ, 223, 203, 1],
		[1, Δ[278], Ⲇⵠᐃᐃ, 223, 204, 1],
		[ⵠⵠᐃ, Δ[278], ΔⵠⲆⲆ, 223, 206, ᐃⲆⲆ],
		[ⵠΔⲆ, Δ[278], ΔⵠⲆⲆ, 223, 207, ⵠΔⲆ],
		[1, Δ[278], 3, 223, 208, Δᐃᐃ],
		[1, Δ[278], 2, 223, 221, ⵠΔᐃ],
		[1, Δ[278], ⲆᐃᐃΔ, 223, 222, ᐃⲆΔ],
		[ᐃⲆⲆ, Δ[278], 0, 223, 224, ⵠⵠᐃ],
		[ᐃⲆΔ, Δ[278], 0, 224, 228, ᐃⲆⲆ],
		[ⵠΔΔ, Δ[278], 0, 224, 230, ᐃⲆΔ],
		[1, Δ[278], ⲆᐃⲆ, 223, 234, ᐃⵠⵠ],
		[1, Δ[278], ⲆⲆᐃⲆ, 223, 223, 1],
		[ⲆⵠⲆ, Δ[278], ⵠΔᐃⵠ, 224, 223, 1],
		[ᐃⵠⵠ, Δ[278], ᐃⵠΔⲆ, 224, 224, 1],
		[ⵠΔⲆ, Δ[278], Δⵠᐃᐃ, 224, 225, 1],
		[ΔⵠⲆ, Δ[278], 1, 223, 226, ⵠΔⲆ],
		[1, Δ[278], ⵠΔⲆ, 224, 231, ⵠΔΔ],
		[ⵠΔⲆ, Δ[278], ⵠΔΔ, 223, 232, ⲆΔᐃ],
		[ⵠΔᐃ, Δ[278], 3, 223, 225, 1],
		[ⵠⵠᐃ, Δ[278], ⵠᐃⲆᐃ, 224, 226, ΔⵠⲆ],
		[1, Δ[278], 3, 223, 227, ⲆΔᐃ],
		[1, Δ[278], 3, 224, 227, 1],
		[ⲆΔᐃ, Δ[278], ΔⵠᐃⲆ, 223, 229, 1],
		[ⵠΔᐃ, Δ[278], ⲆΔⲆΔ, 223, 228, 1],
		[1, Δ[278], 3, 224, 229, ⵠΔΔ],
		[1, Δ[278], 3, 223, 230, ⵠΔΔ],
		[1, Δ[278], 3, 223, 231, 1],
		[1, Δ[278], 3, 224, 232, ᐃⲆⲆ],
		[ⲆⵠⲆ, Δ[278], 3, 224, 233, 1],
		[1, Δ[278], 3, 223, 233, ⲆⵠⲆ],
		[1, Δ[278], ᐃⵠⲆⵠ, 224, 234, 1],
		[1, Δ[278], 3, 224, 235, 1],
		[ⲆⵠⲆ, Δ[278], ᐃΔᐃⲆ, 223, 235, 1],
		[ⵠΔᐃ, Δ[278], ⲆΔᐃ, 224, 236, Δᐃᐃ],
		[1, Δ[278], 2, 223, 236, ⵠΔΔ],
		[ΔⵠⲆ, Δ[278], ⲆⲆΔΔ, 223, 237, ⲆΔᐃ],
		[ⵠΔᐃ, Δ[278], 3, 224, 237, 1],
		[ⵠⵠᐃ, Δ[278], ΔⵠⲆⲆ, 224, 238, 1],
		[1, Δ[278], ⵠⲆⵠ, 224, 239, 1],
		[ⲆΔᐃ, Δ[278], 1, 223, 241, 1],
		[1, Δ[278], 0, 224, 243, 1],
		[1, Δ[278], ⵠⲆᐃ, 223, 245, Δᐃᐃ],
		[1, Δ[278], ΔᐃΔ, 224, 247, 1],
		[ⵠΔΔ, Δ[278], 2, 223, 240, ᐃⵠⵠ],
		[1, Δ[278], Δᐃᐃⵠ, 223, 239, ⵠΔΔ],
		[1, Δ[278], Δⵠᐃᐃ, 224, 240, ⵠⵠᐃ],
		[ⵠΔⲆ, Δ[278], 2, 224, 241, 1],
		[1, Δ[278], 2, 224, 242, ⵠΔᐃ],
		[ⲆⵠⲆ, Δ[278], ⲆⲆᐃⲆ, 223, 242, ⲆⵠⲆ],
		[ⵠⵠᐃ, Δ[278], ΔⲆᐃⲆ, 223, 243, Δᐃᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 223, 244, ⵠΔⲆ],
		[ᐃⵠⵠ, Δ[278], 2, 224, 244, ⵠΔᐃ],
		[Δᐃᐃ, Δ[278], 2, 224, 245, 1],
		[1, Δ[278], 2, 224, 246, 1],
		[ⵠⵠᐃ, Δ[278], ⲆΔⲆΔ, 223, 238, 1],
		[1, Δ[278], ΔⵠᐃⲆ, 223, 246, ⲆⵠⲆ],
		[1, Δ[278], Δⵠᐃᐃ, 223, 247, 1],
		[ⵠΔᐃ, Δ[278], 1, 223, 249, ᐃⲆⲆ],
		[ⲆⵠⲆ, Δ[278], 1, 224, 253, 1],
		[ⵠΔΔ, Δ[278], 1, 223, 256, ⵠΔᐃ],
		[ⵠΔⲆ, Δ[278], 0, 223, 254, 1],
		[1, Δ[278], 0, 224, 250, 1],
		[1, Δ[278], 3, 223, 248, ⵠΔᐃ],
		[ⵠΔᐃ, Δ[278], ᐃⵠᐃⲆ, 223, 250, ⲆⵠⲆ],
		[ⲆΔᐃ, Δ[278], 3, 223, 252, 1],
		[1, Δ[278], ᐃⲆᐃⲆ, 223, ᐃⵠⲆᐃⲆ, 1],
		[1, Δ[278], ᐃⵠᐃⲆ, 223, 257, ᐃⲆΔ],
		[1, Δ[278], Δᐃᐃⵠ, 224, 248, Δᐃᐃ],
		[1, Δ[278], ⲆᐃᐃΔ, 224, 249, 1],
		[1, Δ[278], 2, 223, 251, ΔⵠⲆ],
		[Δᐃᐃ, Δ[278], ⵠΔᐃⵠ, 224, 251, ⵠⵠᐃ],
		[ⵠΔΔ, Δ[278], 2, 224, 252, 1],
		[ⵠΔΔ, Δ[278], 2, 223, 253, ⵠΔⲆ],
		[ⵠΔΔ, Δ[278], 2, 224, 254, ⲆΔᐃ],
		[ⵠΔⲆ, Δ[278], ⲆⲆΔΔ, 224, 255, 1],
		[Δᐃᐃ, Δ[278], 2, 224, ⵠⵠⵠⲆΔΔⵠ, 1],
		[ⲆΔᐃ, Δ[278], ⲆⲆᐃⲆ, 224, 257, 1],
		[ⵠΔᐃ, Δ[278], 0, 224, 258, ⲆⵠⲆ],
		[1, Δ[278], ⵠᐃΔ, 223, 261, ⲆⵠⲆ],
		[ⲆⵠⲆ, Δ[278], ᐃΔΔ, 224, 263, ᐃⲆΔ],
		[1, Δ[278], ΔᐃΔ, 224, 266, ⵠⵠᐃ],
		[1, Δ[278], 0, 224, 272, 1],
		[1, Δ[278], ᐃΔΔ, 223, 270, ᐃⲆΔ],
		[1, Δ[278], Δⵠⵠ, 223, 275, ⵠΔᐃ],
		[ΔⵠⲆ, Δ[278], 1, 223, 259, ΔⵠⲆ],
		[ᐃⲆΔ, Δ[278], 1, 223, 264, ᐃⲆΔ],
		[1, Δ[278], ⵠΔⲆ, 223, 268, ΔⵠⲆ],
		[ⲆⵠⲆ, Δ[278], ⲆΔᐃ, 224, 274, 1],
		[ⵠΔᐃ, Δ[278], ⵠΔᐃⵠ, 223, 258, 1],
		[1, Δ[278], ⲆⲆᐃⲆ, 223, 260, 1],
		[ᐃⲆⲆ, Δ[278], 2, 223, 263, 1],
		[ⲆΔᐃ, Δ[278], Δᐃᐃⵠ, 223, 265, Δᐃᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 223, 267, ΔⵠⲆ],
		[1, Δ[278], 2, 223, 271, ⵠΔⲆ],
		[1, Δ[278], 2, 223, 273, ᐃⲆΔ],
		[1, Δ[278], ⵠᐃⲆᐃ, 223, 262, 1],
		[1, Δ[278], 3, 223, 266, 1],
		[ⵠΔⲆ, Δ[278], ΔⵠⲆⲆ, 223, 269, ΔⵠⲆ],
		[Δᐃᐃ, Δ[278], 3, 223, 272, 1],
		[1, Δ[278], ⵠᐃⲆᐃ, 223, 274, 1],
		[ⲆΔᐃ, Δ[278], ᐃⵠⲆⵠ, 224, 275, ⵠΔᐃ],
		[1, Δ[278], 3, 224, 273, 1],
		[ⲆΔᐃ, Δ[278], 3, 224, 271, 1],
		[ⲆⵠⲆ, Δ[278], 3, 224, 270, ⵠΔⲆ],
		[1, Δ[278], 3, 224, 269, ⵠΔⲆ],
		[ⵠΔⲆ, Δ[278], 3, 224, 268, Δᐃᐃ],
		[1, Δ[278], ᐃΔᐃⲆ, 224, 267, 1],
		[Δᐃᐃ, Δ[278], 3, 224, 265, 1],
		[1, Δ[278], ⵠᐃⲆᐃ, 224, 264, ⵠⵠᐃ],
		[ⵠΔⲆ, Δ[278], ΔⵠⲆⲆ, 224, 262, ⲆⵠⲆ],
		[ⵠⵠᐃ, Δ[278], ΔⵠᐃⲆ, 224, 261, 1],
		[ⵠΔΔ, Δ[278], ⲆΔⲆΔ, 224, 260, ⵠΔⲆ],
		[1, Δ[278], ⲆΔⲆΔ, 224, 259, 1],
		[1, Δ[278], 2, 223, 276, 1],
		[1, Δ[278], 1, 224, 276, ᐃⲆⲆ],
		[ᐃⲆⲆ, Δ[278], 1, 224, 280, ⵠΔΔ],
		[1, Δ[278], ⲆΔᐃ, 223, 281, ⵠΔⲆ],
		[ⵠⵠᐃ, Δ[278], 1, 224, 286, ⲆΔᐃ],
		[1, Δ[278], 0, 223, 280, Δᐃᐃ],
		[ⵠΔᐃ, Δ[278], 0, 223, 284, 1],
		[1, Δ[278], 0, 224, 288, 1],
		[ⵠⵠᐃ, Δ[278], 0, 224, 279, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 223, 277, ᐃⲆⲆ],
		[ΔⵠⲆ, Δ[278], ⲆᐃᐃΔ, 224, 277, 1],
		[ⵠΔⲆ, Δ[278], 2, 224, 278, 1],
		[1, Δ[278], 2, 224, 281, ᐃⲆΔ],
		[1, Δ[278], 2, 224, 283, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 224, 282, ⲆΔᐃ],
		[1, Δ[278], ᐃⵠΔⲆ, 224, 284, 1],
		[ⵠⵠᐃ, Δ[278], ⲆᐃᐃΔ, 224, 285, 1],
		[1, Δ[278], Δᐃᐃⵠ, 224, 287, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 223, 287, ⵠΔᐃ],
		[ᐃⵠⵠ, Δ[278], 2, 223, 285, 1],
		[ⵠⵠᐃ, Δ[278], Δᐃᐃⵠ, 223, 283, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 223, 279, 1],
		[ᐃⲆⲆ, Δ[278], ᐃⵠᐃⲆ, 223, 278, 1],
		[ⵠΔΔ, Δ[278], Ⲇⵠᐃᐃ, 223, 282, ⵠΔᐃ],
		[ⵠΔⲆ, Δ[278], 3, 223, 286, 1],
		[ᐃⲆⲆ, Δ[278], 3, 223, 289, ⵠΔⲆ],
		[ᐃⲆΔ, Δ[278], ⵠᐃⲆᐃ, 224, 289, ⲆΔᐃ],
		[1, Δ[278], 2, 223, 288, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 224, 290, ⵠⵠᐃ],
		[1, Δ[278], ᐃⲆΔ, 223, 290, 1],
		[ⵠΔΔ, Δ[278], 0, 224, 292, 1],
		[1, Δ[278], 0, 223, 294, ⵠΔⲆ],
		[ⲆⵠⲆ, Δ[278], ⵠᐃΔ, 224, 297, ⵠΔⲆ],
		[ⵠΔΔ, Δ[278], 0, 223, 299, 1],
		[1, Δ[278], 2, 223, 291, 1],
		[ⵠΔᐃ, Δ[278], 2, 224, 291, 1],
		[1, Δ[278], 2, 223, 292, ᐃⲆⲆ],
		[1, Δ[278], ⲆⲆᐃⲆ, 223, 293, ᐃⲆΔ],
		[ⵠⵠᐃ, Δ[278], ΔⲆᐃⲆ, 224, 293, 1],
		[1, Δ[278], Δⵠᐃᐃ, 224, 294, ΔⵠⲆ],
		[ⲆΔᐃ, Δ[278], ⵠΔΔ, 224, 295, 1],
		[1, Δ[278], ⲆⲆΔΔ, 223, 295, 1],
		[ΔⵠⲆ, Δ[278], ⲆⲆΔΔ, 223, 296, 1],
		[ⲆΔᐃ, Δ[278], ⲆⲆΔΔ, 224, 296, 1],
		[ᐃⲆΔ, Δ[278], 2, 223, 297, 1],
		[ⲆΔᐃ, Δ[278], 2, 223, 298, 1],
		[1, Δ[278], Δᐃᐃⵠ, 224, 298, ⲆⵠⲆ],
		[1, Δ[278], 2, 224, 299, 1],
		[1, Δ[278], 2, 223, 300, 1],
		[ᐃⵠⵠ, Δ[278], ᐃⵠⵠ, 224, 300, ⵠΔΔ],
		[1, Δ[278], ⵠⲆᐃ, 223, 301, 1],
		[1, Δ[278], 0, 224, 302, 1],
		[1, Δ[278], 0, 224, 304, 1],
		[ΔⵠⲆ, Δ[278], 3, 224, 301, 1],
		[ⵠΔᐃ, Δ[278], ᐃⵠⲆⵠ, 224, 303, 1],
		[ⲆΔᐃ, Δ[278], 0, 221, 303, ᐃⲆΔ],
		[1, Δ[278], 0, 219, 304, 1],
		[1, Δ[278], 1, 222, 304, 1],
		[1, Δ[278], ᐃⵠⵠ, 222, 302, Δᐃᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 223, 302, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 223, 303, 1],
		[ⵠΔⲆ, Δ[278], 2, 222, 303, 1],
		[Δᐃᐃ, Δ[278], 2, 223, 304, 1],
		[ᐃⵠⵠ, Δ[278], 2, 221, 304, ᐃⵠⵠ],
		[1, Δ[278], 2, 220, 304, 1],
		[Δᐃᐃ, Δ[278], ΔⲆᐃⲆ, 220, 303, ⲆΔᐃ],
		[1, Δ[278], 2, 220, 302, 1],
		[ⲆⵠⲆ, Δ[278], ⲆᐃᐃΔ, 221, 302, ⲆⵠⲆ],
		[1, Δ[278], ⵠΔᐃⵠ, 219, 303, 1],
		[1, Δ[278], 0, 217, 302, 1],
		[1, Δ[278], ΔᐃΔ, 215, 304, ⲆⵠⲆ],
		[1, Δ[278], 0, 214, 302, 1],
		[1, Δ[278], 1, 218, 302, ᐃⵠⵠ],
		[ΔⵠⲆ, Δ[278], 1, 217, 304, 1],
		[ⵠΔⲆ, Δ[278], 1, 215, 302, ΔⵠⲆ],
		[ⲆⵠⲆ, Δ[278], ᐃⵠΔⲆ, 219, 302, 1],
		[ᐃⲆΔ, Δ[278], 2, 218, 303, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 218, 304, 1],
		[1, Δ[278], 2, 217, 303, 1],
		[ⲆⵠⲆ, Δ[278], ᐃⵠΔⲆ, 216, 304, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 215, 303, 1],
		[ᐃⵠⵠ, Δ[278], 2, 216, 303, 1],
		[ⲆΔᐃ, Δ[278], 2, 216, 302, 1],
		[ⵠⵠᐃ, Δ[278], 2, 214, 303, ⵠⵠᐃ],
		[1, Δ[278], 2, 214, 304, 1],
		[1, Δ[278], 0, 212, 302, ⲆΔᐃ],
		[ᐃⵠⵠ, Δ[278], 0, 210, 303, ⵠΔⲆ],
		[1, Δ[278], 0, 212, 304, 1],
		[ⵠΔΔ, Δ[278], 0, 208, 304, ⲆⵠⲆ],
		[1, Δ[278], ᐃⵠⵠ, 210, 302, ⵠΔΔ],
		[1, Δ[278], 1, 208, 303, 1],
		[ⵠΔᐃ, Δ[278], 2, 213, 302, 1],
		[ⲆΔᐃ, Δ[278], 2, 213, 303, ⵠΔᐃ],
		[ⵠΔᐃ, Δ[278], 2, 213, 304, 1],
		[ᐃⵠⵠ, Δ[278], Δᐃᐃⵠ, 212, 303, 1],
		[1, Δ[278], ⲆⲆᐃⲆ, 211, 304, 1],
		[1, Δ[278], 2, 211, 303, ᐃⲆⲆ],
		[1, Δ[278], 2, 211, 302, ⲆⵠⲆ],
		[Δᐃᐃ, Δ[278], 2, 209, 302, 1],
		[1, Δ[278], Δⵠᐃᐃ, 209, 303, ⵠⵠᐃ],
		[ⵠΔᐃ, Δ[278], 2, 209, 304, 1],
		[ᐃⲆⲆ, Δ[278], 2, 210, 304, ⲆⵠⲆ],
		[ᐃⲆΔ, Δ[278], 2, 208, 302, 1],
		[1, Δ[278], ⲆᐃⲆ, 206, 303, 1],
		[1, Δ[278], 0, 203, 304, ⵠΔᐃ],
		[1, Δ[278], 0, 200, 303, 1],
		[1, Δ[278], ⲆᐃⲆ, 199, 304, 1],
		[ⲆΔᐃ, Δ[278], ⵠᐃΔ, 195, 304, ⵠΔⲆ],
		[1, Δ[278], ⵠⲆᐃ, 191, 303, 1],
		[1, Δ[278], 0, 193, 304, ΔⵠⲆ],
		[ⵠΔⲆ, Δ[278], 0, 189, 304, ᐃⵠⵠ],
		[1, Δ[278], Δᐃᐃ, 204, 303, 1],
		[ⲆⵠⲆ, Δ[278], 0, 197, 302, ⵠⵠᐃ],
		[ⵠΔⲆ, Δ[278], 0, 202, 302, ᐃⵠⵠ],
		[1, Δ[278], ⵠᐃΔ, 188, 302, Δᐃᐃ],
		[1, Δ[278], ⵠⲆᐃ, 194, 302, ⵠΔⲆ],
		[1, Δ[278], 1, 197, 303, 1],
		[1, Δ[278], 1, 201, 304, 1],
		[ⵠⵠᐃ, Δ[278], ⵠΔⲆ, 192, 302, ᐃⲆⲆ],
		[1, Δ[278], 1, 189, 303, 1],
		[ᐃⵠⵠ, Δ[278], Δᐃᐃ, 205, 302, 1],
		[1, Δ[278], ⲆΔᐃ, 188, 304, 1],
		[ᐃⵠⵠ, Δ[278], 2, 207, 302, ᐃⲆΔ],
		[1, Δ[278], 2, 207, 303, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 207, 304, Δᐃᐃ],
		[1, Δ[278], 2, 206, 304, 1],
		[ΔⵠⲆ, Δ[278], ⵠΔᐃⵠ, 206, 302, ΔⵠⲆ],
		[1, Δ[278], 2, 205, 303, 1],
		[1, Δ[278], ⲆⲆΔΔ, 204, 304, ⲆⵠⲆ],
		[ᐃⲆΔ, Δ[278], ⲆᐃᐃΔ, 205, 304, 1],
		[ᐃⵠⵠ, Δ[278], ΔⲆᐃⲆ, 204, 302, ⵠΔΔ],
		[1, Δ[278], 2, 203, 302, ⲆΔᐃ],
		[1, Δ[278], ⵠΔᐃⵠ, 203, 303, ᐃⲆⲆ],
		[1, Δ[278], ⲆⲆΔΔ, 202, 303, 1],
		[1, Δ[278], 2, 201, 303, ⵠΔΔ],
		[ⲆⵠⲆ, Δ[278], ᐃⵠΔⲆ, 201, 302, 1],
		[ⵠΔᐃ, Δ[278], Δᐃᐃⵠ, 200, 302, Δᐃᐃ],
		[ⵠⵠᐃ, Δ[278], ⲆᐃᐃΔ, 199, 302, 1],
		[1, Δ[278], 2, 198, 303, ᐃⵠⵠ],
		[ⲆΔᐃ, Δ[278], ⲆᐃᐃΔ, 198, 302, 1],
		[1, Δ[278], Δᐃᐃⵠ, 199, 303, 1],
		[ⵠΔΔ, Δ[278], ΔⲆᐃⲆ, 200, 304, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 202, 304, 1],
		[1, Δ[278], 2, 197, 304, 1],
		[ⵠΔⲆ, Δ[278], 2, 198, 304, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 196, 304, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 196, 303, 1],
		[Δᐃᐃ, Δ[278], 2, 196, 302, ᐃⲆⲆ],
		[Δᐃᐃ, Δ[278], 2, 195, 302, 1],
		[ΔⵠⲆ, Δ[278], 2, 195, 303, ⵠΔⲆ],
		[1, Δ[278], 2, 194, 303, 1],
		[ᐃⲆⲆ, Δ[278], Δᐃᐃⵠ, 194, 304, ⲆⵠⲆ],
		[ᐃⲆΔ, Δ[278], 2, 193, 303, 1],
		[ⵠΔⲆ, Δ[278], ⵠΔᐃⵠ, 193, 302, ⵠΔᐃ],
		[ᐃⲆΔ, Δ[278], Δᐃᐃⵠ, 192, 303, 1],
		[1, Δ[278], Δᐃᐃⵠ, 192, 304, 1],
		[Δᐃᐃ, Δ[278], 2, 191, 304, 1],
		[ΔⵠⲆ, Δ[278], Δᐃᐃⵠ, 190, 304, ⲆⵠⲆ],
		[ΔⵠⲆ, Δ[278], 2, 190, 303, ᐃⲆⲆ],
		[ᐃⲆΔ, Δ[278], 2, 189, 302, 1],
		[ⲆΔᐃ, Δ[278], ⵠΔᐃⵠ, 190, 302, ᐃⲆΔ],
		[ΔⵠⲆ, Δ[278], ΔⲆᐃⲆ, 191, 302, ⲆΔᐃ],
		[ⵠⵠᐃ, Δ[278], ⵠΔᐃⵠ, 188, 303, 1],
		[Δᐃᐃ, Δ[278], ΔᐃΔ, 186, 303, ᐃⵠⵠ],
		[ᐃⲆⲆ, Δ[278], 0, 183, 304, ⲆΔᐃ],
		[1, Δ[278], ᐃΔΔ, 184, 302, ⵠΔᐃ],
		[ΔⵠⲆ, Δ[278], Δⵠⵠ, 181, 302, Δᐃᐃ],
		[1, Δ[278], ⵠⲆᐃ, 176, 302, ΔⵠⲆ],
		[ⵠΔᐃ, Δ[278], ΔᐃΔ, 178, 303, ᐃⵠⵠ],
		[1, Δ[278], 0, 173, 304, 1],
		[1, Δ[278], ᐃΔΔ, 170, 303, ⲆⵠⲆ],
		[ⵠΔᐃ, Δ[278], ΔᐃΔ, 172, 302, ᐃⵠⵠ],
		[ⲆΔᐃ, Δ[278], 1, 182, 303, 1],
		[1, Δ[278], 1, 178, 304, 1],
		[1, Δ[278], ⲆΔᐃ, 175, 304, ᐃⵠⵠ],
		[1, Δ[278], ᐃⲆⲆ, 173, 302, ⲆΔᐃ],
		[ⵠⵠᐃ, Δ[278], ΔⵠⲆ, 185, 304, Δᐃᐃ],
		[1, Δ[278], ⲆⵠⲆ, 169, 304, ⵠⵠᐃ],
		[ᐃⵠⵠ, Δ[278], ⵠᐃⲆᐃ, 187, 304, 1],
		[ᐃⲆΔ, Δ[278], 3, 186, 304, 1],
		[ᐃⵠⵠ, Δ[278], 3, 187, 303, ΔⵠⲆ],
		[1, Δ[278], 3, 187, 302, 1],
		[ᐃⲆΔ, Δ[278], ⵠᐃⲆᐃ, 186, 302, 1],
		[ᐃⵠⵠ, Δ[278], 3, 185, 302, ΔⵠⲆ],
		[1, Δ[278], 3, 185, 303, 1],
		[1, Δ[278], ᐃⲆᐃⲆ, 184, 303, ⵠΔⲆ],
		[ⲆΔᐃ, Δ[278], 3, 183, 303, Δᐃᐃ],
		[1, Δ[278], ΔⵠⲆⲆ, 183, 302, ⲆΔᐃ],
		[ⲆⵠⲆ, Δ[278], ⵠᐃⲆᐃ, 182, 302, 1],
		[ⵠΔΔ, Δ[278], ⲆΔⲆΔ, 184, 304, Δᐃᐃ],
		[1, Δ[278], 3, 182, 304, 1],
		[1, Δ[278], ᐃⵠᐃⲆ, 181, 304, 1],
		[ⵠΔⲆ, Δ[278], 3, 179, 304, 1],
		[Δᐃᐃ, Δ[278], ᐃⵠᐃⲆ, 180, 304, 1],
		[ᐃⵠⵠ, Δ[278], 3, 181, 303, 1],
		[ᐃⵠⵠ, Δ[278], 3, 180, 303, Δᐃᐃ],
		[ⵠΔⲆ, Δ[278], ᐃΔᐃⲆ, 179, 303, 1],
		[ⲆⵠⲆ, Δ[278], ΔⵠᐃⲆ, 180, 302, 1],
		[ᐃⲆⲆ, Δ[278], 3, 179, 302, 1],
		[1, Δ[278], 3, 178, 302, 1],
		[1, Δ[278], ⲆΔⲆΔ, 177, 302, 1],
		[ⵠⵠᐃ, Δ[278], ᐃΔᐃⲆ, 177, 304, Δᐃᐃ],
		[1, Δ[278], 3, 177, 303, ⵠⵠᐃ],
		[ᐃⲆⲆ, Δ[278], 3, 176, 303, ⵠΔᐃ],
		[Δᐃᐃ, Δ[278], 3, 176, 304, 1],
		[ᐃⲆⲆ, Δ[278], ⲆΔⲆΔ, 174, 304, 1],
		[1, Δ[278], 3, 175, 303, Δᐃᐃ],
		[ⵠⵠᐃ, Δ[278], 3, 174, 303, 1],
		[ΔⵠⲆ, Δ[278], Ⲇⵠᐃᐃ, 173, 303, ⲆⵠⲆ],
		[ⵠΔⲆ, Δ[278], ΔⵠⲆⲆ, 172, 303, ⵠΔⲆ],
		[1, Δ[278], Ⲇⵠᐃᐃ, 171, 303, ⵠΔΔ],
		[1, Δ[278], 3, 170, 304, ⵠΔΔ],
		[Δᐃᐃ, Δ[278], ⵠᐃⲆᐃ, 171, 304, ⲆΔᐃ],
		[1, Δ[278], 3, 172, 304, 1],
		[ⵠΔᐃ, Δ[278], 3, 174, 302, 1],
		[ⵠⵠᐃ, Δ[278], ᐃΔᐃⲆ, 175, 302, ΔⵠⲆ],
		[1, Δ[278], ᐃⵠⲆⵠ, 171, 302, 1],
		[1, Δ[278], ᐃΔᐃⲆ, 170, 302, 1],
		[ⲆΔᐃ, Δ[278], ᐃⵠᐃⲆ, 169, 302, ΔⵠⲆ],
		[1, Δ[278], 3, 169, 303, 1],
		[1, Δ[278], ⲆᐃⲆ, 168, 302, 1],
		[1, Δ[278], ⵠⲆᐃ, 166, 303, ΔⵠⲆ],
		[1, Δ[278], 0, 163, 304, ⵠⵠᐃ],
		[ⵠΔΔ, Δ[278], Δⵠⵠ, 161, 302, ᐃⲆⲆ],
		[ΔⵠⲆ, Δ[278], 0, 159, 303, 1],
		[ⵠΔᐃ, Δ[278], 0, 152, 304, 1],
		[1, Δ[278], 0, 155, 303, 1],
		[1, Δ[278], 1, 164, 303, ⵠΔΔ],
		[ⵠΔᐃ, Δ[278], 1, 162, 303, 1],
		[ᐃⲆⲆ, Δ[278], 1, 158, 304, 1],
		[ⵠΔΔ, Δ[278], ᐃⵠⵠ, 156, 302, ⵠΔΔ],
		[ᐃⵠⵠ, Δ[278], ΔⵠⲆ, 153, 302, ⵠⵠᐃ],
		[ⲆⵠⲆ, Δ[278], ⵠΔᐃ, 154, 304, ᐃⲆⲆ],
		[ⵠⵠᐃ, Δ[278], 2, 168, 304, 1],
		[ᐃⵠⵠ, Δ[278], 2, 168, 303, ⲆⵠⲆ],
		[ⵠΔΔ, Δ[278], Δᐃᐃⵠ, 167, 303, Δᐃᐃ],
		[1, Δ[278], 2, 167, 304, ᐃⲆⲆ],
		[1, Δ[278], Δᐃᐃⵠ, 166, 304, ⲆⵠⲆ],
		[ⲆⵠⲆ, Δ[278], 2, 165, 304, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 164, 304, ᐃⲆⲆ],
		[ᐃⵠⵠ, Δ[278], ⲆⲆᐃⲆ, 165, 303, 1],
		[Δᐃᐃ, Δ[278], 2, 167, 302, ⵠΔᐃ],
		[ⲆⵠⲆ, Δ[278], ΔⲆᐃⲆ, 166, 302, Δᐃᐃ],
		[ᐃⲆΔ, Δ[278], 2, 165, 302, 1],
		[ΔⵠⲆ, Δ[278], 2, 164, 302, ⲆΔᐃ],
		[1, Δ[278], ΔⲆᐃⲆ, 163, 302, 1],
		[ᐃⲆΔ, Δ[278], 2, 162, 302, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 163, 303, ΔⵠⲆ],
		[ⵠΔⲆ, Δ[278], 2, 162, 304, ᐃⲆⲆ],
		[1, Δ[278], 2, 160, 304, 1],
		[ⲆⵠⲆ, Δ[278], ΔⲆᐃⲆ, 159, 304, ΔⵠⲆ],
		[1, Δ[278], 2, 161, 304, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 161, 303, ΔⵠⲆ],
		[1, Δ[278], ᐃⵠΔⲆ, 160, 303, 1],
		[ΔⵠⲆ, Δ[278], ΔⲆᐃⲆ, 160, 302, 1],
		[ᐃⵠⵠ, Δ[278], 2, 158, 302, 1],
		[1, Δ[278], 2, 159, 302, ⵠⵠᐃ],
		[ᐃⲆΔ, Δ[278], 2, 157, 302, ᐃⵠⵠ],
		[1, Δ[278], 2, 156, 303, 1],
		[1, Δ[278], 2, 157, 303, 1],
		[1, Δ[278], 2, 158, 303, 1],
		[1, Δ[278], ⲆⲆΔΔ, 157, 304, 1],
		[ᐃⵠⵠ, Δ[278], ⲆᐃᐃΔ, 156, 304, ⵠⵠᐃ],
		[1, Δ[278], 2, 155, 304, ᐃⲆΔ],
		[1, Δ[278], 2, 153, 304, ΔⵠⲆ],
		[1, Δ[278], Δⵠᐃᐃ, 153, 303, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 154, 303, 1],
		[1, Δ[278], 2, 154, 302, ᐃⲆⲆ],
		[1, Δ[278], ΔⲆᐃⲆ, 155, 302, ⵠΔΔ],
		[ᐃⲆⲆ, Δ[278], ⵠΔᐃⵠ, 152, 303, 1],
		[1, Δ[278], Δⵠᐃᐃ, 152, 302, 1],
		[1, Δ[278], ΔᐃΔ, 151, 302, ᐃⵠⵠ],
		[ⵠΔᐃ, Δ[278], ᐃΔΔ, 149, 303, 1],
		[1, Δ[278], ᐃΔΔ, 145, 304, 1],
		[ΔⵠⲆ, Δ[278], 0, 147, 302, 1],
		[ᐃⲆΔ, Δ[278], 0, 143, 303, ⲆⵠⲆ],
		[1, Δ[278], ᐃΔΔ, 141, 303, 1],
		[ⵠⵠᐃ, Δ[278], ᐃⲆⲆ, 147, 304, 1],
		[ⵠⵠᐃ, Δ[278], 1, 145, 302, ᐃⵠⵠ],
		[1, Δ[278], 1, 142, 302, 1],
		[ⲆΔᐃ, Δ[278], 1, 150, 304, 1],
		[Δᐃᐃ, Δ[278], 2, 151, 304, 1],
		[ᐃⲆⲆ, Δ[278], ⲆᐃᐃΔ, 151, 303, 1],
		[ⵠΔᐃ, Δ[278], ⵠΔᐃⵠ, 150, 303, 1],
		[1, Δ[278], 2, 150, 302, 1],
		[ⵠΔΔ, Δ[278], 2, 148, 302, 1],
		[1, Δ[278], Δⵠᐃᐃ, 146, 302, 1],
		[1, Δ[278], 2, 144, 302, ΔⵠⲆ],
		[1, Δ[278], Δᐃᐃⵠ, 141, 302, 1],
		[1, Δ[278], 2, 141, 304, 1],
		[ⵠΔⲆ, Δ[278], 2, 142, 304, 1],
		[ⲆⵠⲆ, Δ[278], Δᐃᐃⵠ, 142, 303, 1],
		[1, Δ[278], 2, 143, 304, ⵠΔᐃ],
		[1, Δ[278], 2, 144, 304, ᐃⲆΔ],
		[ⲆΔᐃ, Δ[278], 2, 144, 303, ᐃⵠⵠ],
		[1, Δ[278], ⲆᐃᐃΔ, 148, 304, ⵠⵠᐃ],
		[1, Δ[278], 2, 148, 303, 1],
		[ⵠΔᐃ, Δ[278], ⵠΔᐃⵠ, 146, 303, 1],
		[1, Δ[278], Δᐃᐃⵠ, 145, 303, 1],
		[1, Δ[278], 2, 147, 303, ⵠⵠᐃ],
		[ⵠΔΔ, Δ[278], Δⵠᐃᐃ, 146, 304, 1],
		[1, Δ[278], Δⵠᐃᐃ, 149, 304, 1],
		[ⲆⵠⲆ, Δ[278], ᐃⵠᐃⲆ, 149, 302, ΔⵠⲆ],
		[1, Δ[278], ⲆΔⲆΔ, 143, 302, 1],
		[1, Δ[278], 0, 139, 304, 1],
		[Δᐃᐃ, Δ[278], 0, 138, 302, ⵠΔᐃ],
		[Δᐃᐃ, Δ[278], ΔⵠⲆ, 139, 302, 1],
		[ⲆⵠⲆ, Δ[278], ΔⲆᐃⲆ, 140, 302, ᐃⲆⲆ],
		[ᐃⵠⵠ, Δ[278], 2, 140, 303, ᐃⲆΔ],
		[1, Δ[278], ⵠΔᐃⵠ, 139, 303, Δᐃᐃ],
		[1, Δ[278], 2, 138, 303, ⵠΔⲆ],
		[1, Δ[278], ⲆⲆΔΔ, 138, 304, 1],
		[1, Δ[278], 2, 140, 304, ΔⵠⲆ],
		[1, Δ[278], 0, 137, 304, ⵠⵠᐃ],
		[1, Δ[278], ⵠⲆᐃ, 135, 303, ⵠΔⲆ],
		[ⵠΔΔ, Δ[278], ΔᐃΔ, 133, 304, 1],
		[ⵠΔΔ, Δ[278], 1, 135, 304, ΔⵠⲆ],
		[ᐃⲆⲆ, Δ[278], 1, 136, 302, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 137, 302, ᐃⲆΔ],
		[Δᐃᐃ, Δ[278], 2, 136, 303, ⵠΔΔ],
		[1, Δ[278], 2, 137, 303, ᐃⲆΔ],
		[1, Δ[278], 2, 136, 304, ᐃⲆΔ],
		[Δᐃᐃ, Δ[278], 2, 134, 304, 1],
		[1, Δ[278], 2, 134, 303, 1],
		[1, Δ[278], 2, 133, 303, ᐃⵠⵠ],
		[ᐃⲆΔ, Δ[278], 2, 132, 304, 1],
		[1, Δ[278], 0, 131, 302, 1],
		[1, Δ[278], 0, 134, 302, ᐃⲆⲆ],
		[ᐃⲆΔ, Δ[278], ⵠᐃΔ, 129, 304, ᐃⲆⲆ],
		[ⲆΔᐃ, Δ[278], 1, 130, 303, 1],
		[ⵠⵠᐃ, Δ[278], 1, 132, 302, ΔⵠⲆ],
		[1, Δ[278], ⲆⲆᐃⲆ, 135, 302, 1],
		[1, Δ[278], 2, 133, 302, ᐃⵠⵠ],
		[ⲆⵠⲆ, Δ[278], ⲆᐃᐃΔ, 132, 303, 1],
		[ΔⵠⲆ, Δ[278], 2, 131, 303, 1],
		[1, Δ[278], 2, 130, 304, ⵠⵠᐃ],
		[1, Δ[278], ΔⲆᐃⲆ, 131, 304, 1],
		[ⵠΔⲆ, Δ[278], 2, 128, 304, Δᐃᐃ],
		[1, Δ[278], ⲆᐃᐃΔ, 129, 303, ⲆΔᐃ],
		[ⵠΔΔ, Δ[278], ᐃⵠΔⲆ, 130, 302, 1],
		[1, Δ[278], 3, 127, 304, 1],
		[1, Δ[278], 2, 132, 301, ᐃⲆΔ],
		[1, Δ[278], ⵠΔᐃⵠ, 133, 301, 1],
		[ⵠΔΔ, Δ[278], 2, 134, 301, ⵠΔⲆ],
		[ⵠⵠᐃ, Δ[278], ⲆⲆΔΔ, 135, 301, Δᐃᐃ],
		[ΔⵠⲆ, Δ[278], 3, 131, 301, 1],
		[1, Δ[278], ᐃⵠⲆⵠ, 136, 301, 1],
		[ᐃⲆΔ, Δ[278], ᐃⵠⲆⵠ, 136, 178, 1],
		[1, Δ[278], ⵠⲆᐃ, 136, 183, 1],
		[1, Δ[278], 2, 136, 182, 1],
		[ⵠΔⲆ, Δ[278], 1, 136, 181, 1],
		[1, Δ[278], ⵠⲆᐃ, 136, 179, 1],
		[1, Δ[278], ᐃΔᐃⲆ, 136, 180, 1],
		[ⵠΔΔ, Δ[278], 2, 135, 183, Δᐃᐃ],
		[ⵠΔΔ, Δ[278], Δᐃᐃ, 135, 182, 1],
		[ⵠΔⲆ, Δ[278], ⲆΔⲆΔ, 135, 180, 1],
		[1, Δ[278], 0, 134, 183, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 133, 183, 1],
		[ⵠΔᐃ, Δ[278], ᐃⵠⲆⵠ, 133, 182, ⲆΔᐃ],
		[ᐃⵠⵠ, Δ[278], 1, 132, 183, ⵠΔΔ],
		[1, Δ[278], Ⲇⵠᐃᐃ, 131, 183, ⵠⵠᐃ],
		[1, Δ[278], ⵠΔᐃⵠ, 135, 181, ⵠΔᐃ],
		[ⵠΔᐃ, Δ[278], ⲆᐃᐃΔ, 134, 182, 1],
		[1, Δ[278], 3, 134, 181, 1],
		[ⵠⵠᐃ, Δ[311], 0, 213, 301, 0],
		[1, Δ[311], Δⵠⵠ, 204, 301, ⲆᐃⲆ],
		[1, Δ[311], ⲆΔᐃ, 196, 288, 0],
		[ΔⵠⲆ, Δ[311], ⵠⵠᐃ, 198, 283, ⲆᐃⲆ],
		[ⵠΔΔ, Δ[311], 1, 190, 288, ΔᐃΔ],
		[1, Δ[311], 1, 189, 296, 0],
		[1, Δ[311], ᐃⲆΔ, 193, 293, 0],
		[ⵠⵠᐃ, Δ[311], ΔⵠⲆ, 183, 292, 0],
		[ⲆⵠⲆ, Δ[311], ᐃⵠⵠ, 186, 287, 0],
		[1, Δ[311], 1, 190, 290, 0],
		[1, Δ[311], ⲆⵠⲆ, 218, 271, 0],
		[1, Δ[311], ᐃⲆΔ, 220, 266, 0],
		[ᐃⵠⵠ, Δ[311], 1, 211, 268, 0],
		[ⵠΔⲆ, Δ[311], ᐃⲆⲆ, 210, 274, ΔᐃΔ],
		[ⵠΔᐃ, Δ[311], ⵠⵠᐃ, 205, 263, 0],
		[ᐃⲆΔ, Δ[311], 1, 216, 258, 0],
		[Δᐃᐃ, Δ[311], Δⵠᐃᐃ, 201, 294, Δⵠⵠ],
		[1, Δ[311], 2, 190, 296, ΔᐃΔ],
		[1, Δ[311], 2, 188, 299, 0],
		[ᐃⲆΔ, Δ[311], 2, 186, 297, Δⵠⵠ],
		[1, Δ[311], 2, 188, 296, ⵠⲆᐃ],
		[ⲆΔᐃ, Δ[311], ⵠΔᐃⵠ, 189, 291, ᐃΔΔ],
		[1, Δ[311], 2, 189, 286, 0],
		[ᐃⲆΔ, Δ[311], Δᐃᐃⵠ, 191, 286, Δⵠⵠ],
		[1, Δ[311], Δⵠᐃᐃ, 197, 286, 0],
		[ⵠΔΔ, Δ[311], ⵠΔᐃⵠ, 195, 290, ᐃΔΔ],
		[1, Δ[311], ΔⲆᐃⲆ, 186, 288, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[311], 2, 184, 290, ⲆᐃⲆ],
		[ΔⵠⲆ, Δ[311], 2, 183, 293, 0],
		[ⲆⵠⲆ, Δ[311], 2, 198, 286, ⲆᐃⲆ],
		[1, Δ[311], 2, 196, 283, ⵠⲆᐃ],
		[1, Δ[311], ⲆᐃᐃΔ, 196, 281, 0],
		[1, Δ[311], Δⵠᐃᐃ, 201, 280, ⵠᐃΔ],
		[ᐃⲆⲆ, Δ[311], Δᐃᐃⵠ, 205, 287, ⵠᐃΔ],
		[1, Δ[311], ᐃⵠΔⲆ, 209, 283, 0],
		[ⵠΔᐃ, Δ[311], ΔⲆᐃⲆ, 212, 280, 0],
		[ᐃⲆΔ, Δ[311], Δⵠᐃᐃ, 209, 277, ΔᐃΔ],
		[ⲆⵠⲆ, Δ[311], Δⵠᐃᐃ, 217, 278, 0],
		[Δᐃᐃ, Δ[311], 2, 219, 275, ⵠⲆⵠ],
		[ΔⵠⲆ, Δ[311], ⵠΔᐃⵠ, 220, 271, 0],
		[1, Δ[311], ᐃⵠΔⲆ, 220, 267, ⵠᐃΔ],
		[ⵠⵠᐃ, Δ[311], ᐃⵠΔⲆ, 217, 265, 0],
		[1, Δ[311], ⲆⲆΔΔ, 213, 267, 0],
		[1, Δ[311], ⲆⲆᐃⲆ, 208, 264, ⵠⲆⵠ],
		[ⵠⵠᐃ, Δ[311], 2, 206, 261, 0],
		[1, Δ[311], Δᐃᐃⵠ, 203, 265, 0],
		[1, Δ[311], Δⵠᐃᐃ, 204, 270, ⲆᐃⲆ],
		[1, Δ[311], Δⵠᐃᐃ, 196, 267, 0],
		[ⵠⵠᐃ, Δ[311], 2, 214, 261, ⵠᐃΔ],
		[ⵠⵠᐃ, Δ[311], ⵠΔᐃⵠ, 211, 260, ⵠᐃΔ],
		[ⵠΔΔ, Δ[311], ⲆⲆᐃⲆ, 218, ⵠⲆⵠᐃⲆΔΔ, ⵠⲆⵠ],
		[ⵠⵠᐃ, Δ[311], 2, 219, 262, 0],
		[ⲆⵠⲆ, Δ[311], 2, 220, 253, 0],
		[1, Δ[311], ⲆⲆΔΔ, 211, 257, 0],
		[1, Δ[526], 3, 198, 27, ΔⵠⲆ],
		[1, Δ[526], ᐃⲆᐃⲆ, 201, 30, ⵠΔᐃ],
		[1, Δ[526], 3, 200, 32, 1],
		[1, Δ[526], 3, 198, 33, ᐃⲆⲆ],
		[ⲆⵠⲆ, Δ[526], ΔⵠⲆⲆ, 196, 33, ⵠΔᐃ],
		[ⵠΔΔ, Δ[526], ⵠᐃⲆᐃ, 194, 32, 1],
		[1, Δ[526], 3, 194, 28, ⲆΔᐃ],
		[1, Δ[526], 0, 200, 28, 1],
		[1, Δ[526], Δⵠⵠ, 193, 30, 1],
		[1, Δ[526], ᐃΔᐃⲆ, 196, 27, 1],
		[1, Δ[526], 3, 199, 30, ΔⵠⲆ],
		[ⵠΔᐃ, Δ[526], 3, 197, 29, ᐃⲆΔ],
		[1, Δ[526], 3, 195, 30, ᐃⵠⵠ],
		[ⵠΔΔ, Δ[526], ΔⵠᐃⲆ, 197, 31, 1],
		[1, Δ[526], ΔⲆᐃⲆ, 201, 33, 1],
		[1, Δ[526], 4, 202, 34, 1],
		[1, Δ[526], ΔⵠⲆᐃ, 202, 35, 1],
		[ΔⵠⲆ, Δ[526], 4, 203, 36, ΔⵠⲆ],
		[ⵠΔⲆ, Δ[526], ΔⵠⲆᐃ, 204, 37, 1],
		[ⵠⵠᐃ, Δ[526], ⵠΔᐃⵠ, 205, 38, 1],
		[1, Δ[526], ΔΔⵠΔ, 205, 39, 1],
		[ᐃⵠⵠ, Δ[526], ⵠⵠⲆⵠ, 205, 40, 1],
		[1, Δ[526], 2, 206, 41, ⲆⵠⲆ],
		[ᐃⲆΔ, Δ[526], 1, 207, 42, 1],
		[1, Δ[526], ⵠⵠᐃ, 205, 41, ⵠΔⲆ],
		[ⲆⵠⲆ, Δ[526], 4, 208, 43, 1],
		[1, Δ[526], ⵠΔΔⵠ, 209, 43, ⵠⵠᐃ],
		[1, Δ[526], ᐃⲆⲆ, 210, 43, Δᐃᐃ],
		[ⵠⵠᐃ, Δ[526], Δⵠᐃᐃ, 211, 43, 1],
		[1, Δ[526], 5, 212, 43, ⲆΔᐃ],
		[ᐃⲆⲆ, Δ[526], 4, 213, 44, ΔⵠⲆ],
		[1, Δ[526], ᐃⵠⲆⵠ, 223, 54, ⵠΔΔ],
		[ΔⵠⲆ, Δ[526], ᐃⵠⲆⵠ, 221, 53, 1],
		[ᐃⵠⵠ, Δ[526], 3, 219, 53, 1],
		[1, Δ[526], ΔⵠⲆᐃ, 218, 52, 1],
		[ᐃⲆⲆ, Δ[526], ΔⵠⲆᐃ, 217, 51, 1],
		[ⵠΔΔ, Δ[526], 4, 216, 51, ⵠΔΔ],
		[1, Δ[526], ᐃⵠⵠ, 215, 50, 1],
		[ⵠΔⲆ, Δ[526], ⵠΔΔⵠ, 212, 46, 1],
		[ᐃⲆΔ, Δ[526], ΔⵠⲆ, 210, 44, ⲆΔᐃ],
		[1, Δ[526], ⲆΔⲆΔ, 206, 50, 1],
		[ⲆⵠⲆ, Δ[156], 0, 217, 24, 1],
		[ᐃⲆΔ, Δ[156], Δⵠⵠ, 207, ᐃⵠⵠⲆⲆ, ⵠΔΔ],
		[1, Δ[66], 44, 54, ΔΔⲆΔΔ, 0],
		[ⲆⵠⲆ, Δ[66], 44, 53, ⵠΔⵠᐃⵠ, ⵠⲆᐃ],
		[1, Δ[66], 44, 51, Ⲇᐃⵠᐃᐃ, 0],
		[1, Δ[66], 44, 49, 13, 0],
		[1, Δ[66], 44, 48, 14, 0],
		[ⵠΔⲆ, Δ[66], 21, 78, 293, 0],
		[ⲆΔᐃ, Δ[278], Δⵠⵠ, 221, 8, ⵠΔᐃ],
		[1, Δ[278], ⵠⲆⵠ, 224, ⵠⲆᐃΔᐃ, 1],
		[1, Δ[278], 1, 223, 8, ᐃⲆΔ],
		[1, Δ[278], ΔⲆᐃⲆ, 224, ΔⲆᐃΔΔ, 1],
		[1, Δ[278], 2, 222, 8, 1],
		[ᐃⲆΔ, Δ[278], Δⵠⵠ, 224, ᐃΔᐃⲆΔ, ᐃⲆΔ],
		[ⲆⵠⲆ, Δ[278], 0, 222, 5, 1],
		[ΔⵠⲆ, Δ[278], ⵠⲆⵠ, 219, 7, ⵠΔᐃ],
		[1, Δ[278], 1, 220, Δᐃⵠᐃ, ᐃⲆΔ],
		[ᐃⲆΔ, Δ[278], ⵠΔΔ, 217, 7, ᐃⲆΔ],
		[ⲆⵠⲆ, Δ[278], 2, 224, ΔΔⵠΔ, ΔⵠⲆ],
		[ᐃⲆΔ, Δ[278], 2, 223, ⲆΔⲆⲆ, ⵠΔᐃ],
		[1, Δ[278], ᐃⵠΔⲆ, 224, ⲆΔⲆᐃⲆ, ΔⵠⲆ],
		[1, Δ[278], Δᐃᐃⵠ, 223, 7, ⵠΔΔ],
		[1, Δ[278], 2, 223, 6, ⵠΔⲆ],
		[1, Δ[278], 2, 222, ⲆΔΔΔΔ, ⲆΔᐃ],
		[1, Δ[278], ⲆⲆᐃⲆ, 222, ΔΔⲆⲆⲆ, ᐃⲆⲆ],
		[ⵠⵠᐃ, Δ[278], 2, 221, 7, 1],
		[ⵠⵠᐃ, Δ[278], Δᐃᐃⵠ, 221, 6, ᐃⲆⲆ],
		[ⵠΔⲆ, Δ[278], ⵠΔᐃⵠ, 221, 5, 1],
		[ᐃⲆΔ, Δ[278], ⵠΔᐃⵠ, 220, 6, ᐃⲆΔ],
		[ΔⵠⲆ, Δ[278], ΔⲆᐃⲆ, 220, 7, 1],
		[1, Δ[278], 2, 220, 8, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 219, 8, ⵠΔΔ],
		[ΔⵠⲆ, Δ[278], 2, 219, ⲆⵠⵠⵠⲆ, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 219, ⵠΔΔΔ, 1],
		[1, Δ[278], ΔᐃΔ, 218, ⲆΔⲆⲆ, ⵠΔΔ],
		[1, Δ[278], 0, 216, ⲆᐃⲆⵠⲆ, 1],
		[ᐃⲆⲆ, Δ[278], 2, 218, 8, ᐃⲆⲆ],
		[1, Δ[278], ΔⲆᐃⲆ, 217, 8, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 218, 7, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 218, ⲆΔΔΔΔ, Δᐃᐃ],
		[1, Δ[278], 2, 217, ⲆⵠⵠⵠⲆ, ᐃⲆⲆ],
		[ⵠΔᐃ, Δ[278], ΔⲆᐃⲆ, 217, ⵠⵠⲆⵠ, ⵠΔⲆ],
		[1, Δ[278], 1, 215, 6, 1],
		[1, Δ[278], 1, 213, ΔΔⵠΔ, 1],
		[1, Δ[278], ΔᐃΔ, 214, ᐃΔⵠⲆⵠ, ⵠΔⲆ],
		[1, Δ[278], ᐃΔΔ, 216, 5, 1],
		[1, Δ[278], ᐃΔΔ, 213, ᐃΔⲆΔΔ, 1],
		[ⵠΔⲆ, Δ[278], 0, 211, ⵠⲆⵠⲆΔ, ⵠⵠᐃ],
		[1, Δ[278], ⵠⲆⵠ, 209, 5, 1],
		[1, Δ[278], 0, 208, ᐃΔᐃⲆᐃ, 1],
		[ⵠΔⲆ, Δ[278], 0, 207, ⵠᐃⵠᐃⵠ, 1],
		[1, Δ[278], 2, 216, ᐃΔⵠⲆⵠ, ⵠⵠᐃ],
		[1, Δ[278], 2, 216, ⲆⵠΔⲆⵠ, 1],
		[ⵠΔⲆ, Δ[278], 2, 215, ⲆΔⲆᐃⲆ, 1],
		[ⵠΔΔ, Δ[278], ⲆⲆᐃⲆ, 215, 8, 1],
		[ⵠΔᐃ, Δ[278], 2, 214, 8, 1],
		[ΔⵠⲆ, Δ[278], Δⵠᐃᐃ, 214, 7, ⵠΔᐃ],
		[ⲆΔᐃ, Δ[278], Δⵠᐃᐃ, 215, 5, ⲆΔᐃ],
		[1, Δ[278], 2, 214, ⵠⵠΔⲆ, ⲆΔᐃ],
		[1, Δ[278], ⲆⲆΔΔ, 213, ⲆⵠⵠⵠⲆ, ᐃⵠⵠ],
		[ⲆⵠⲆ, Δ[278], Δᐃᐃⵠ, 213, ⵠᐃᐃⲆⵠ, 1],
		[1, Δ[278], 2, 212, 7, 1],
		[ᐃⲆⲆ, Δ[278], ⲆⵠⲆ, 211, 5, 1],
		[ᐃⲆΔ, Δ[278], 1, 209, ⲆᐃⲆⵠⲆ, 1],
		[ᐃⲆΔ, Δ[278], ΔⲆᐃⲆ, 212, 8, Δᐃᐃ],
		[ᐃⲆⲆ, Δ[278], ΔⲆᐃⲆ, 211, 8, 1],
		[1, Δ[278], 2, 210, ΔΔⵠⵠⵠ, ⵠΔᐃ],
		[ⵠⵠᐃ, Δ[278], 2, 209, 7, 1],
		[1, Δ[278], 2, 210, ⲆⵠΔⲆⵠ, 1],
		[1, Δ[278], 2, 210, ⲆⵠⵠⵠⲆ, ᐃⵠⵠ],
		[1, Δ[278], 2, 212, ⲆⵠⵠⵠⲆ, ⵠΔΔ],
		[ᐃⵠⵠ, Δ[278], ΔⲆᐃⲆ, 212, Δᐃⵠᐃ, ⲆΔᐃ],
		[1, Δ[278], ᐃⵠΔⲆ, 211, 6, ⵠΔᐃ],
		[ⵠΔⲆ, Δ[278], 2, 210, ⵠΔΔΔ, 1],
		[1, Δ[278], 2, 209, ΔⲆⵠΔΔ, ᐃⵠⵠ],
		[ᐃⲆⲆ, Δ[278], Δⵠᐃᐃ, 208, ᐃΔⵠⲆⵠ, 1],
		[1, Δ[278], 2, 208, ⲆΔⲆⲆ, ⵠΔᐃ],
		[ᐃⲆⲆ, Δ[278], 2, 207, 7, ᐃⲆⲆ],
		[ᐃⵠⵠ, Δ[278], 2, 207, 6, Δᐃᐃ],
		[ΔⵠⲆ, Δ[278], 2, 207, 5, Δᐃᐃ],
		[ΔⵠⲆ, Δ[278], 2, 206, 5, 1],
		[1, Δ[278], 2, 208, ⵠᐃⵠᐃⵠ, 1],
		[1, Δ[278], 2, 206, 6, 1],
		[ⵠΔⲆ, Δ[278], ⵠⲆᐃ, 204, 8, 1],
		[1, Δ[278], ⵠᐃΔ, 205, ᐃⲆⵠⲆⲆ, Δᐃᐃ],
		[1, Δ[278], ⵠⲆⵠ, 203, Δᐃⵠᐃ, 1],
		[ⵠⵠᐃ, Δ[278], 0, 202, 7, ⲆⵠⲆ],
		[ᐃⲆⲆ, Δ[278], 0, 199, 8, ⵠΔⲆ],
		[1, Δ[278], Δⵠⵠ, 200, 6, 1],
		[1, Δ[278], 0, 197, ΔΔᐃⵠⵠ, ᐃⲆⲆ],
		[ⵠΔⲆ, Δ[278], Δⵠⵠ, 195, ᐃΔⲆΔΔ, 1],
		[1, Δ[278], ᐃΔΔ, 194, ᐃΔΔⵠΔ, 1],
		[ᐃⵠⵠ, Δ[278], Δᐃᐃ, 202, ⲆᐃⲆⵠⲆ, ⵠΔΔ],
		[1, Δ[278], 1, 206, ⵠⲆⵠⲆΔ, 1],
		[1, Δ[278], 1, 201, ⵠⵠⲆⵠ, 1],
		[1, Δ[278], 1, 197, ⲆᐃⲆⵠⲆ, 1],
		[1, Δ[278], 1, 192, 7, 1],
		[1, Δ[278], ⲆΔᐃ, 195, Δᐃⵠᐃ, 1],
		[1, Δ[278], 2, 205, ⲆⵠΔⲆⵠ, 1],
		[1, Δ[278], 2, 205, ΔΔⲆⵠⵠ, 1],
		[1, Δ[278], Δᐃᐃⵠ, 206, ᐃΔⲆΔΔ, ᐃⲆⲆ],
		[ᐃⲆΔ, Δ[278], ⵠΔᐃⵠ, 204, 7, ⲆⵠⲆ],
		[1, Δ[278], ⵠΔᐃⵠ, 204, Δᐃᐃⵠᐃ, 1],
		[1, Δ[278], 2, 204, ⲆΔΔΔ, ⵠΔⲆ],
		[1, Δ[278], 2, 205, ΔΔⵠΔ, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 203, 6, ⲆΔᐃ],
		[1, Δ[278], 2, 203, ᐃΔᐃⲆᐃ, ⲆⵠⲆ],
		[1, Δ[278], 2, 203, 8, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 201, 8, ⵠΔΔ],
		[1, Δ[278], 2, 200, 8, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 200, ᐃⲆᐃⲆⲆ, 1],
		[Δᐃᐃ, Δ[278], ⲆᐃᐃΔ, 201, 7, ⵠΔΔ],
		[Δᐃᐃ, Δ[278], Δⵠᐃᐃ, 201, 6, Δᐃᐃ],
		[ⲆⵠⲆ, Δ[278], ⵠΔᐃⵠ, 202, 5, 1],
		[ᐃⵠⵠ, Δ[278], ᐃⵠΔⲆ, 202, ᐃⲆⵠⲆⲆ, ⵠΔΔ],
		[1, Δ[278], 2, 200, ⵠⵠΔⲆ, ᐃⲆⲆ],
		[ᐃⲆΔ, Δ[278], 2, 199, Δᐃⵠᐃ, 1],
		[1, Δ[278], ⲆⲆᐃⲆ, 197, 5, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 196, ⵠΔΔΔ, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 198, 5, ⵠΔᐃ],
		[1, Δ[278], ⲆⲆᐃⲆ, 198, Δⵠᐃⵠⵠ, ⲆΔᐃ],
		[1, Δ[278], 2, 199, Δᐃᐃⵠᐃ, 1],
		[1, Δ[278], ⲆⲆᐃⲆ, 199, 7, Δᐃᐃ],
		[1, Δ[278], ⲆᐃᐃΔ, 198, 7, 1],
		[1, Δ[278], 2, 198, 8, 1],
		[ⵠⵠᐃ, Δ[278], 2, 197, ᐃΔᐃⲆᐃ, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 196, ΔΔⲆⲆⲆ, 1],
		[ⵠΔΔ, Δ[278], 2, 196, 8, ᐃⲆΔ],
		[1, Δ[278], ⲆⲆᐃⲆ, 196, 6, 1],
		[ᐃⵠⵠ, Δ[278], 2, 195, 6, 1],
		[1, Δ[278], 2, 195, ΔΔⲆⲆⲆ, 1],
		[1, Δ[278], 2, 194, ᐃⲆᐃⲆⲆ, 1],
		[1, Δ[278], Δᐃᐃⵠ, 193, ⲆⲆΔᐃΔ, 1],
		[ᐃⲆⲆ, Δ[278], ᐃⵠΔⲆ, 194, 8, 1],
		[1, Δ[278], 2, 193, ΔΔⲆⲆⲆ, ⲆⵠⲆ],
		[1, Δ[278], ⲆⲆΔΔ, 193, 6, 1],
		[ΔⵠⲆ, Δ[278], 2, 193, 5, ᐃⲆⲆ],
		[ⲆⵠⲆ, Δ[278], ⲆⲆΔΔ, 194, ⲆΔⲆⲆ, 1],
		[1, Δ[278], ⵠⲆᐃ, 192, Δᐃⵠᐃ, ⲆⵠⲆ],
		[1, Δ[278], 0, 191, ᐃΔⲆΔΔ, 1],
		[ⵠⵠᐃ, Δ[278], 0, 190, ⲆⵠⵠⵠⲆ, 1],
		[1, Δ[278], 0, 188, ᐃⲆᐃⲆⲆ, ᐃⲆⲆ],
		[ᐃⲆⲆ, Δ[278], ⵠⲆⵠ, 186, ΔΔⲆⵠⵠ, ΔⵠⲆ],
		[Δᐃᐃ, Δ[278], ⵠⲆᐃ, 186, Δᐃⵠᐃ, ⵠΔΔ],
		[1, Δ[278], 0, 184, 7, 1],
		[ⲆΔᐃ, Δ[278], 0, 182, 8, ᐃⲆⲆ],
		[ᐃⵠⵠ, Δ[278], Δⵠⵠ, 181, ΔΔᐃⵠⵠ, ᐃⵠⵠ],
		[1, Δ[278], ᐃⲆⲆ, 189, 8, ⵠΔⲆ],
		[1, Δ[278], ⵠΔᐃ, 183, 8, ᐃⲆΔ],
		[1, Δ[278], 1, 188, ⵠⵠΔⲆ, 1],
		[1, Δ[278], 1, 185, ΔⵠⵠⵠΔ, 1],
		[ⲆΔᐃ, Δ[278], ⲆⵠⲆ, 180, ⲆΔΔᐃΔ, 1],
		[1, Δ[278], ΔⵠⲆ, 183, ⵠⵠⲆⵠ, ᐃⲆΔ],
		[ᐃⵠⵠ, Δ[278], ⵠΔᐃ, 178, ΔⲆΔⲆⲆ, 1],
		[1, Δ[278], 1, 177, 6, 1],
		[ΔⵠⲆ, Δ[278], Δᐃᐃ, 173, ⵠⲆⵠⲆΔ, ᐃⵠⵠ],
		[1, Δ[278], ΔⵠⲆ, 171, ⵠΔⵠΔᐃ, 1],
		[1, Δ[278], 0, 177, ΔⲆΔⲆⲆ, 1],
		[1, Δ[278], ⵠⲆᐃ, 175, 7, ⵠΔΔ],
		[1, Δ[278], ᐃΔΔ, 179, ⲆΔΔΔ, 1],
		[ᐃⲆΔ, Δ[278], ⵠⲆⵠ, 174, ⵠⵠⲆⵠ, 1],
		[Δᐃᐃ, Δ[278], 0, 176, ⲆΔΔΔ, ⵠΔΔ],
		[1, Δ[278], 0, 172, 8, 1],
		[1, Δ[278], 0, 170, 8, 1],
		[ⲆⵠⲆ, Δ[278], ᐃΔΔ, 169, 6, ⲆΔᐃ],
		[1, Δ[278], 2, 192, 6, ⵠΔΔ],
		[1, Δ[278], ⲆⲆᐃⲆ, 192, 8, 1],
		[ᐃⵠⵠ, Δ[278], ᐃⵠΔⲆ, 191, 7, Δᐃᐃ],
		[Δᐃᐃ, Δ[278], 2, 191, ᐃΔⵠⲆⵠ, ⵠΔᐃ],
		[ⵠΔᐃ, Δ[278], 2, 191, ⵠⵠΔⲆ, ᐃⲆΔ],
		[ΔⵠⲆ, Δ[278], Δⵠᐃᐃ, 190, 5, 1],
		[1, Δ[278], 2, 189, 5, ᐃⲆΔ],
		[Δᐃᐃ, Δ[278], 2, 189, ΔΔᐃⵠⵠ, ⵠⵠᐃ],
		[1, Δ[278], 2, 189, ⲆⲆᐃⲆⵠ, 1],
		[1, Δ[278], Δⵠᐃᐃ, 190, ⵠⲆⵠⲆΔ, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 190, ⲆᐃⵠⲆⵠ, ᐃⲆⲆ],
		[ⵠⵠᐃ, Δ[278], 2, 188, 8, 1],
		[ⵠⵠᐃ, Δ[278], 2, 187, 8, ⲆΔᐃ],
		[1, Δ[278], 2, 187, ᐃΔᐃⲆᐃ, ⲆΔᐃ],
		[1, Δ[278], 2, 187, ᐃΔⵠⲆⵠ, 1],
		[1, Δ[278], ⲆⲆΔΔ, 188, ΔΔᐃⵠⵠ, 1],
		[1, Δ[278], ⲆⲆΔΔ, 187, ⲆΔⲆⲆ, ΔⵠⲆ],
		[ᐃⲆⲆ, Δ[278], 2, 186, 6, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 186, ⲆΔΔᐃΔ, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 185, 7, Δᐃᐃ],
		[ⵠⵠᐃ, Δ[278], ΔⲆᐃⲆ, 185, ᐃΔⲆΔΔ, ⵠⵠᐃ],
		[1, Δ[278], ⲆᐃᐃΔ, 184, 8, 1],
		[1, Δ[278], 2, 183, ⲆΔⲆᐃⲆ, ΔⵠⲆ],
		[ⵠΔⲆ, Δ[278], 2, 183, ⲆⵠⵠⵠⲆ, 1],
		[1, Δ[278], 2, 184, ΔΔᐃⵠⵠ, ΔⵠⲆ],
		[1, Δ[278], 2, 184, 5, 1],
		[ⲆⵠⲆ, Δ[278], 2, 185, 5, 1],
		[1, Δ[278], 2, 182, 6, ⲆΔᐃ],
		[ᐃⵠⵠ, Δ[278], 2, 182, 7, 1],
		[ΔⵠⲆ, Δ[278], 2, 181, 7, 1],
		[ᐃⲆⲆ, Δ[278], 2, 181, ΔΔⲆⵠⵠ, ⵠΔᐃ],
		[ⵠⵠᐃ, Δ[278], 2, 180, 8, ᐃⵠⵠ],
		[ⵠⵠᐃ, Δ[278], Δᐃᐃⵠ, 179, 8, 1],
		[1, Δ[278], 2, 182, 5, ⵠΔᐃ],
		[1, Δ[278], ⲆⲆΔΔ, 181, Δᐃⵠᐃ, ⵠΔᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 180, 5, 1],
		[ⵠΔᐃ, Δ[278], Δⵠᐃᐃ, 180, ⲆⵠᐃΔᐃ, 1],
		[1, Δ[278], 2, 179, 6, 1],
		[1, Δ[278], ⲆⲆΔΔ, 179, ᐃΔᐃⲆᐃ, ⵠⵠᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 178, 7, ⵠⵠᐃ],
		[Δᐃᐃ, Δ[278], 2, 178, 6, 1],
		[1, Δ[278], 2, 178, 5, Δᐃᐃ],
		[ⲆΔᐃ, Δ[278], ⵠΔᐃⵠ, 177, 5, ⲆΔᐃ],
		[1, Δ[278], ⲆᐃᐃΔ, 177, 7, 1],
		[1, Δ[278], Δᐃᐃⵠ, 176, 7, 1],
		[1, Δ[278], Δᐃᐃⵠ, 176, 6, 1],
		[ⲆⵠⲆ, Δ[278], 2, 175, 6, 1],
		[ᐃⲆΔ, Δ[278], 2, 175, 5, ⵠⵠᐃ],
		[ᐃⲆⲆ, Δ[278], ⲆⲆᐃⲆ, 176, ⲆⲆΔᐃΔ, ᐃⲆⲆ],
		[ᐃⲆⲆ, Δ[278], 2, 174, 8, ⵠΔΔ],
		[1, Δ[278], 2, 175, ⲆᐃⲆⵠⲆ, 1],
		[ΔⵠⲆ, Δ[278], 2, 173, 8, ᐃⲆⲆ],
		[ᐃⵠⵠ, Δ[278], Δᐃᐃⵠ, 174, ⵠⲆⵠⲆΔ, 1],
		[ⲆⵠⲆ, Δ[278], 2, 173, ᐃΔΔⵠΔ, ⲆΔᐃ],
		[1, Δ[278], 2, 174, 6, 1],
		[ⵠΔΔ, Δ[278], 2, 172, ⲆΔⲆⲆ, 1],
		[ⵠΔⲆ, Δ[278], 2, 173, 5, 1],
		[ⵠΔⲆ, Δ[278], 2, 172, 6, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 172, ⵠΔⵠΔᐃ, 1],
		[1, Δ[278], 2, 171, ΔΔⵠⵠⵠ, 1],
		[ᐃⵠⵠ, Δ[278], 2, 170, 7, 1],
		[1, Δ[278], 2, 170, 6, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 170, 5, 1],
		[ⵠΔΔ, Δ[278], ⲆᐃᐃΔ, 171, ⵠΔΔΔ, ΔⵠⲆ],
		[1, Δ[278], ⵠΔᐃⵠ, 171, 6, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 169, 5, ᐃⲆⲆ],
		[1, Δ[278], 2, 169, ⵠΔⵠΔᐃ, 1],
		[ᐃⲆⲆ, Δ[278], 2, 169, ΔΔⵠⵠⵠ, ᐃⵠⵠ],
		[1, Δ[278], Δᐃᐃ, 168, 7, ⵠΔᐃ],
		[ⲆΔᐃ, Δ[278], 1, 166, ⲆΔⲆⲆ, 1],
		[1, Δ[278], ᐃⵠⵠ, 164, ⵠΔⵠΔᐃ, ΔⵠⲆ],
		[1, Δ[278], ⲆⵠⲆ, 160, ⵠᐃᐃⲆⵠ, 1],
		[ᐃⵠⵠ, Δ[278], ⲆΔᐃ, 156, 8, ⵠΔᐃ],
		[ⲆΔᐃ, Δ[278], ⲆᐃⲆ, 166, 8, ⵠⵠᐃ],
		[ΔⵠⲆ, Δ[278], ᐃΔΔ, 168, 5, ᐃⵠⵠ],
		[1, Δ[278], 0, 164, 6, ⵠΔⲆ],
		[ⵠΔᐃ, Δ[278], ⵠⲆⵠ, 162, 7, ⲆⵠⲆ],
		[ⵠΔΔ, Δ[278], ⵠᐃΔ, 158, 8, 1],
		[ΔⵠⲆ, Δ[278], ⲆᐃⲆ, 157, 6, ⲆⵠⲆ],
		[ⵠΔΔ, Δ[278], 0, 161, 5, 1],
		[ⵠΔⲆ, Δ[278], 0, 159, ΔΔⵠΔ, ⵠΔᐃ],
		[1, Δ[278], ⵠⲆⵠ, 155, ᐃΔᐃⲆᐃ, ᐃⲆⲆ],
		[1, Δ[278], 0, 154, ⵠΔΔΔ, ⵠⵠᐃ],
		[ᐃⲆΔ, Δ[278], ΔᐃΔ, 151, 7, ⲆΔᐃ],
		[ⵠⵠᐃ, Δ[278], 1, 153, ΔⲆΔⲆⲆ, 1],
		[ⵠΔΔ, Δ[278], ⵠⵠᐃ, 151, 5, ᐃⲆⲆ],
		[ᐃⵠⵠ, Δ[278], Δᐃᐃⵠ, 168, 6, Δᐃᐃ],
		[ⵠⵠᐃ, Δ[278], 2, 168, ⲆᐃⲆⵠⲆ, ⵠⵠᐃ],
		[ᐃⲆΔ, Δ[278], ΔⲆᐃⲆ, 167, 8, ᐃⲆΔ],
		[ⵠΔⲆ, Δ[278], ⲆⲆᐃⲆ, 167, 7, ⵠΔΔ],
		[1, Δ[278], 2, 167, Δⵠᐃⵠⵠ, ⲆΔᐃ],
		[ⲆΔᐃ, Δ[278], 2, 167, 5, ⲆⵠⲆ],
		[1, Δ[278], 2, 166, Δᐃᐃⵠᐃ, ᐃⲆΔ],
		[ⵠΔΔ, Δ[278], ΔⲆᐃⲆ, 166, 7, 1],
		[1, Δ[278], 2, 165, ΔΔⲆⲆⲆ, ⵠΔᐃ],
		[1, Δ[278], 2, 165, ᐃΔᐃⲆΔ, 1],
		[1, Δ[278], 2, 165, 5, ᐃⵠⵠ],
		[ᐃⲆⲆ, Δ[278], 2, 164, 5, ⵠⵠᐃ],
		[1, Δ[278], ᐃⵠΔⲆ, 163, ⵠⵠΔⲆ, ⲆⵠⲆ],
		[1, Δ[278], 2, 162, ⲆΔⲆⲆ, 1],
		[ⵠⵠᐃ, Δ[278], Δⵠᐃᐃ, 162, ΔΔᐃⵠⵠ, ᐃⲆΔ],
		[1, Δ[278], 2, 163, 6, 1],
		[ⵠΔⲆ, Δ[278], 2, 163, 7, 1],
		[ⵠⵠᐃ, Δ[278], 2, 163, ⲆⲆΔᐃΔ, 1],
		[ⲆΔᐃ, Δ[278], ⲆⲆᐃⲆ, 164, ΔΔⵠⵠⵠ, ⵠⵠᐃ],
		[ᐃⲆⲆ, Δ[278], ΔⲆᐃⲆ, 165, 8, 1],
		[Δᐃᐃ, Δ[278], 2, 161, ⵠᐃⵠᐃⵠ, 1],
		[1, Δ[278], 2, 162, ΔΔⵠⵠⵠ, ⲆⵠⲆ],
		[ⲆⵠⲆ, Δ[278], ⵠΔᐃⵠ, 160, 8, ⵠΔⲆ],
		[ⵠΔⲆ, Δ[278], 2, 159, 8, ⵠⵠᐃ],
		[ᐃⲆΔ, Δ[278], ⲆᐃᐃΔ, 159, ⲆΔΔᐃΔ, ⵠⵠᐃ],
		[ⵠΔᐃ, Δ[278], Δⵠᐃᐃ, 159, ⲆⵠⵠⵠⲆ, ⵠΔΔ],
		[1, Δ[278], ⲆᐃᐃΔ, 160, 5, 1],
		[ⵠΔᐃ, Δ[278], 2, 160, 6, 1],
		[1, Δ[278], 2, 161, ΔⲆⵠΔΔ, 1],
		[ᐃⲆⲆ, Δ[278], ⲆᐃᐃΔ, 161, 7, Δᐃᐃ],
		[1, Δ[278], ᐃⵠΔⲆ, 157, ᐃΔᐃⲆᐃ, 1],
		[1, Δ[278], 2, 158, 7, 1],
		[ᐃⲆΔ, Δ[278], ⵠΔᐃⵠ, 158, ᐃΔΔⵠΔ, ΔⵠⲆ],
		[1, Δ[278], ⲆⲆᐃⲆ, 158, 5, 1],
		[1, Δ[278], 2, 155, 5, 1],
		[ⵠΔᐃ, Δ[278], ⲆⲆᐃⲆ, 155, 6, 1],
		[ⵠⵠᐃ, Δ[278], ⲆⲆΔΔ, 156, 6, 1],
		[ⵠΔᐃ, Δ[278], 2, 156, 7, ⲆⵠⲆ],
		[1, Δ[278], ⲆⲆᐃⲆ, 157, 8, 1],
		[ᐃⲆΔ, Δ[278], 2, 155, 8, Δᐃᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 154, 8, ⵠΔⲆ],
		[ⵠⵠᐃ, Δ[278], Δᐃᐃⵠ, 154, ᐃⲆᐃⲆⲆ, 1],
		[ⲆΔᐃ, Δ[278], Δᐃᐃⵠ, 154, ⲆⵠᐃΔᐃ, 1],
		[1, Δ[278], 2, 152, 8, 1],
		[ΔⵠⲆ, Δ[278], 2, 153, 7, ⲆΔᐃ],
		[ⵠΔⲆ, Δ[278], 2, 153, Δⵠᐃⵠⵠ, 1],
		[ΔⵠⲆ, Δ[278], 2, 153, ΔΔⵠΔ, 1],
		[ᐃⵠⵠ, Δ[278], Δⵠᐃᐃ, 152, ⲆΔⲆⲆ, ⵠⵠᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 152, 6, Δᐃᐃ],
		[1, Δ[278], 2, 152, 7, ⲆⵠⲆ],
		[ⲆⵠⲆ, Δ[278], ⲆⲆΔΔ, 151, 6, Δᐃᐃ],
		[1, Δ[278], 2, 157, ⲆΔΔΔ, ᐃⲆⲆ],
		[Δᐃᐃ, Δ[278], 1, 156, 5, ⵠΔⲆ],
		[1, Δ[278], ⵠⲆᐃ, 150, ⵠⵠΔⲆ, 1],
		[1, Δ[278], 0, 149, 7, 1],
		[ᐃⲆΔ, Δ[278], ⵠⲆᐃ, 147, 8, ⵠⵠᐃ],
		[1, Δ[278], 0, 146, 5, 1],
		[ⵠΔΔ, Δ[278], 0, 144, ΔΔⲆⲆⲆ, 1],
		[ⵠΔⲆ, Δ[278], ᐃΔΔ, 142, 5, 1],
		[ᐃⲆⲆ, Δ[278], 1, 147, 6, ⵠΔⲆ],
		[1, Δ[278], ⲆΔᐃ, 145, ᐃΔⲆΔΔ, 1],
		[1, Δ[278], 1, 144, ⲆΔⲆⲆ, 1],
		[ᐃⲆⲆ, Δ[278], 2, 148, 5, 1],
		[1, Δ[278], 2, 149, 5, 1],
		[Δᐃᐃ, Δ[278], 2, 150, 6, ᐃⲆⲆ],
		[ᐃⲆⲆ, Δ[278], ⲆⲆΔΔ, 150, ΔⲆΔⲆⲆ, 1],
		[ⵠΔΔ, Δ[278], 2, 151, ΔⲆᐃΔΔ, 1],
		[ⵠⵠᐃ, Δ[278], Δᐃᐃⵠ, 150, 7, Δᐃᐃ],
		[1, Δ[278], ᐃⵠΔⲆ, 149, 8, ⵠΔⲆ],
		[ⵠΔᐃ, Δ[278], ⲆⲆΔΔ, 148, ΔΔⵠⵠⵠ, 1],
		[ᐃⲆΔ, Δ[278], ⲆⲆᐃⲆ, 149, ᐃΔⵠⲆⵠ, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 148, 6, ⲆΔᐃ],
		[1, Δ[278], 2, 148, ⲆΔⲆᐃⲆ, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 147, ⵠⲆⵠⲆΔ, ⲆⵠⲆ],
		[1, Δ[278], 2, 147, ⵠⵠⲆⵠ, ᐃⲆⲆ],
		[ᐃⲆⲆ, Δ[278], 2, 146, ΔΔᐃⵠⵠ, 1],
		[ⵠΔΔ, Δ[278], ⲆⲆᐃⲆ, 146, ⲆⵠΔⲆⵠ, 1],
		[ⲆⵠⲆ, Δ[278], 2, 146, ⲆᐃⵠⲆⵠ, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 145, 7, 1],
		[1, Δ[278], 2, 145, Δᐃᐃⵠᐃ, 1],
		[ᐃⲆΔ, Δ[278], 2, 145, 5, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 144, ᐃΔᐃⲆΔ, ⵠΔⲆ],
		[1, Δ[278], 2, 143, ⵠΔΔΔ, ⵠΔᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 143, 6, ⲆⵠⲆ],
		[1, Δ[278], ᐃⵠΔⲆ, 142, Δᐃᐃⵠᐃ, 1],
		[1, Δ[278], 2, 141, ⵠⵠⲆⵠ, ᐃⵠⵠ],
		[ⲆΔᐃ, Δ[278], Δⵠᐃᐃ, 224, ⲆΔⵠᐃⲆ, ⵠⵠᐃ],
		[ⵠΔᐃ, Δ[278], ⵠᐃΔ, 224, ⵠⵠᐃΔΔ, 1],
		[1, Δ[278], ΔᐃΔ, 224, 13, 1],
		[1, Δ[278], ΔᐃΔ, 224, 17, 1],
		[ⵠΔᐃ, Δ[278], ⲆᐃⲆ, 224, Ⲇᐃᐃᐃᐃ, 1],
		[ⵠΔⲆ, Δ[278], 0, 224, 22, ⵠⵠᐃ],
		[1, Δ[278], 0, 224, 24, ⵠⵠᐃ],
		[Δᐃᐃ, Δ[278], 0, 224, 29, 1],
		[ᐃⲆⲆ, Δ[278], ΔᐃΔ, 224, 33, ΔⵠⲆ],
		[ⵠΔΔ, Δ[278], ΔᐃΔ, 224, 35, 1],
		[1, Δ[278], ⵠⲆⵠ, 224, 38, 1],
		[1, Δ[278], ⵠΔᐃ, 224, ᐃⵠⲆⵠΔ, 1],
		[1, Δ[278], 1, 224, 20, ⵠⵠᐃ],
		[ΔⵠⲆ, Δ[278], 1, 224, 27, 1],
		[ᐃⵠⵠ, Δ[278], ΔⵠⲆ, 224, 31, ⵠΔᐃ],
		[ΔⵠⲆ, Δ[278], 1, 224, 36, ⲆΔᐃ],
		[ΔⵠⲆ, Δ[278], 2, 224, ΔⲆΔᐃΔ, 1],
		[Δᐃᐃ, Δ[278], 2, 224, ⵠᐃⲆᐃᐃ, ⵠⵠᐃ],
		[ΔⵠⲆ, Δ[278], Δⵠᐃᐃ, 224, ΔᐃⵠΔⵠ, 1],
		[1, Δ[278], 2, 224, 18, ⵠΔᐃ],
		[1, Δ[278], 2, 224, 21, 1],
		[ⵠΔᐃ, Δ[278], ⵠΔᐃⵠ, 224, 23, 1],
		[ⵠΔⲆ, Δ[278], 2, 224, 25, ⵠⵠᐃ],
		[ᐃⵠⵠ, Δ[278], 2, 224, 26, 1],
		[Δᐃᐃ, Δ[278], 2, 224, 28, 1],
		[1, Δ[278], 2, 224, 30, 1],
		[ⲆΔᐃ, Δ[278], Δⵠᐃᐃ, 224, 32, 1],
		[ⲆⵠⲆ, Δ[278], 2, 224, 34, 1],
		[ⵠΔⲆ, Δ[278], 2, 224, 37, ⲆⵠⲆ],
		[ⲆΔᐃ, Δ[278], ⲆⲆΔΔ, 224, 39, ΔⵠⲆ],
		[1, Δ[278], 0, 224, 41, 1],
		[1, Δ[278], ⵠⲆᐃ, 224, 44, ᐃⵠⵠ],
		[ⵠΔⲆ, Δ[278], 0, 224, 46, 1],
		[ⲆΔᐃ, Δ[278], 0, 224, 52, 1],
		[1, Δ[278], 0, 224, 57, ᐃⲆΔ],
		[ⵠΔⲆ, Δ[278], ᐃⵠⵠ, 224, 47, ᐃⵠⵠ],
		[ⲆⵠⲆ, Δ[278], Δᐃᐃⵠ, 224, 40, ⵠⵠᐃ],
		[1, Δ[278], 2, 224, 42, 1],
		[1, Δ[278], 2, 224, 43, 1],
		[1, Δ[278], 2, 224, 45, ⵠΔΔ],
		[ⲆⵠⲆ, Δ[278], 2, 224, 49, ⲆΔᐃ],
		[1, Δ[278], 1, 224, 50, 1],
		[ⵠΔᐃ, Δ[278], Δᐃᐃⵠ, 224, 51, 1],
		[1, Δ[526], Ⲇⵠᐃᐃ, 224, 54, 1],
		[1, Δ[278], 2, 224, 56, ⵠΔΔ],
		[1, Δ[278], ΔⲆᐃⲆ, 224, 58, ΔⵠⲆ],
		[1, Δ[278], 2, 224, 61, 1],
		[ⵠⵠᐃ, Δ[278], 0, 224, 60, 1],
		[1, Δ[278], ᐃΔΔ, 224, 64, 1],
		[ᐃⲆⲆ, Δ[278], ⵠⲆᐃ, 224, 66, 1],
		[ⵠⵠᐃ, Δ[278], 0, 224, 70, 1],
		[1, Δ[278], 0, 224, 74, ΔⵠⲆ],
		[ᐃⵠⵠ, Δ[278], 0, 224, 77, ⲆⵠⲆ],
		[ᐃⲆⲆ, Δ[278], ⵠΔᐃ, 224, 62, 1],
		[ᐃⲆΔ, Δ[278], ⵠⵠᐃ, 224, 68, ᐃⲆΔ],
		[ⵠⵠᐃ, Δ[278], 1, 224, 72, ᐃⲆⲆ],
		[1, Δ[278], ⵠΔΔ, 224, 76, 1],
		[1, Δ[278], 1, 224, 80, 1],
		[1, Δ[278], ⵠΔΔ, 224, 83, ⵠⵠᐃ],
		[1, Δ[278], 1, 224, 91, 1],
		[1, Δ[278], 1, 224, 95, ᐃⲆΔ],
		[1, Δ[278], ⵠΔΔ, 224, 97, ᐃⵠⵠ],
		[ⲆⵠⲆ, Δ[278], 0, 224, 85, ΔⵠⲆ],
		[1, Δ[278], 0, 224, 88, 1],
		[1, Δ[278], ⵠⲆⵠ, 224, 93, ΔⵠⲆ],
		[ΔⵠⲆ, Δ[278], 0, 224, 98, ⲆⵠⲆ],
		[1, Δ[278], ⲆᐃᐃΔ, 224, 59, 1],
		[ⵠΔᐃ, Δ[278], 2, 224, 63, ⵠⵠᐃ],
		[ΔⵠⲆ, Δ[278], Δⵠᐃᐃ, 224, 65, ⲆⵠⲆ],
		[1, Δ[278], 2, 224, 67, ⲆΔᐃ],
		[ⵠΔΔ, Δ[278], ⲆⲆᐃⲆ, 224, 69, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 224, 71, 1],
		[1, Δ[278], 2, 224, 73, ΔⵠⲆ],
		[ⵠΔΔ, Δ[278], Δⵠᐃᐃ, 224, 75, 1],
		[ⵠΔⲆ, Δ[278], ᐃⵠΔⲆ, 224, 78, 1],
		[1, Δ[278], ⲆⲆᐃⲆ, 224, 79, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 224, 81, Δᐃᐃ],
		[ᐃⲆΔ, Δ[278], ⲆⲆΔΔ, 224, 82, ᐃⲆⲆ],
		[1, Δ[278], ⵠΔᐃⵠ, 224, 84, ᐃⲆⲆ],
		[ᐃⲆΔ, Δ[278], ⲆᐃᐃΔ, 224, 86, Δᐃᐃ],
		[1, Δ[278], 2, 224, 87, ⵠΔⲆ],
		[ᐃⵠⵠ, Δ[278], ⲆⲆᐃⲆ, 224, 89, ᐃⵠⵠ],
		[ⵠΔΔ, Δ[278], ᐃⵠΔⲆ, 224, 90, ᐃⵠⵠ],
		[1, Δ[278], 2, 224, 92, 1],
		[1, Δ[278], 2, 224, 94, 1],
		[ΔⵠⲆ, Δ[278], ⲆⲆᐃⲆ, 224, 96, ⵠΔᐃ],
		[1, Δ[278], 2, 224, 99, ᐃⲆΔ],
		[ⵠΔⲆ, Δ[278], ⲆⲆΔΔ, 224, 100, ⲆⵠⲆ],
		[1, Δ[278], 0, 224, 101, ⲆΔᐃ],
		[ⵠⵠᐃ, Δ[278], ⵠΔⲆ, 224, 103, ᐃⵠⵠ],
		[ᐃⲆΔ, Δ[278], Δⵠᐃᐃ, 224, 102, ⵠΔΔ],
		[ⵠΔᐃ, Δ[278], 0, 222, 10, ⲆΔᐃ],
		[ⵠΔΔ, Δ[278], 2, 223, ⵠΔⲆᐃⲆ, ⵠⵠᐃ],
		[1, Δ[278], 2, 222, 9, 1],
		[Δᐃᐃ, Δ[278], ΔⲆᐃⲆ, 221, 9, 1],
		[1, Δ[278], 2, 223, ᐃⵠᐃᐃᐃ, 1],
		[ⵠΔᐃ, Δ[278], 2, 223, 11, Δᐃᐃ],
		[ⲆΔᐃ, Δ[278], 2, 223, ⵠⲆⵠᐃⲆ, 1],
		[ⲆⵠⲆ, Δ[278], ᐃⲆᐃⲆ, 223, ΔⵠⵠΔᐃ, ⵠΔΔ],
		[1, Δ[278], 3, 222, ΔΔⵠⵠΔ, ⵠΔΔ],
		[1, Δ[278], ΔⵠᐃⲆ, 220, ᐃᐃⵠᐃΔ, Δᐃᐃ],
		[ⵠⵠᐃ, Δ[278], 3, 219, ⵠᐃΔΔⲆ, Δᐃᐃ],
		[1, Δ[278], ⲆΔⲆΔ, 221, ᐃᐃᐃⵠⵠ, ᐃⵠⵠ],
		[ⵠΔⲆ, Δ[156], ⲆⲆΔΔ, 219, 13, 1],
		[ⵠΔΔ, Δ[156], 1, 218, 18, 1],
		[1, Δ[156], 1, 214, ΔΔᐃⲆⲆⲆΔ, ⵠΔᐃ],
		[ⵠΔᐃ, Δ[278], ⵠᐃΔ, 221, ᐃΔⲆΔᐃ, 1],
		[ⵠΔᐃ, Δ[278], ⲆΔᐃ, 223, ⵠⲆΔⲆΔ, ⵠⵠᐃ],
		[1, Δ[278], Δᐃᐃⵠ, 222, 19, ⵠΔᐃ],
		[ⵠΔΔ, Δ[278], 2, 223, 19, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 223, ⵠⲆΔᐃᐃ, ᐃⲆⲆ],
		[1, Δ[278], 2, 222, ⲆᐃⵠⲆᐃ, ⵠΔΔ],
		[1, Δ[278], ᐃⵠΔⲆ, 220, 21, ⵠΔΔ],
		[1, Δ[278], ⵠᐃΔ, 219, 21, ᐃⲆⲆ],
		[1, Δ[278], 3, 221, 21, ᐃⲆⲆ],
		[1, Δ[278], ΔⵠᐃⲆ, 218, 21, 1],
		[ΔⵠⲆ, Δ[278], ΔⵠⲆⲆ, 222, 21, ⵠΔΔ],
		[ⵠⵠᐃ, Δ[278], 3, 220, 22, 1],
		[ᐃⵠⵠ, Δ[278], 3, 219, 22, 1],
		[1, Δ[278], ΔⵠᐃⲆ, 221, 22, 1],
		[1, Δ[278], Δⵠⵠ, 211, Ⲇⵠᐃⵠᐃ, ⵠΔⲆ],
		[1, Δ[278], Δᐃᐃ, 211, ᐃⲆᐃⲆᐃ, 1],
		[1, Δ[278], 1, 210, ᐃⵠᐃⵠⵠ, 1],
		[1, Δ[278], 0, 211, ⵠᐃᐃΔΔ, 1],
		[ᐃⲆΔ, Δ[278], 2, 210, ᐃⵠⲆⲆᐃ, Δᐃᐃ],
		[ⵠΔᐃ, Δ[278], 2, 210, ᐃⵠᐃᐃᐃ, 1],
		[1, Δ[278], 2, 210, 11, 1],
		[1, Δ[278], 2, 212, 9, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 210, ⵠⵠᐃᐃΔ, 1],
		[ΔⵠⲆ, Δ[278], 2, 211, ⵠⲆⵠᐃⲆ, 1],
		[1, Δ[278], Δᐃᐃⵠ, 211, ⵠⵠⵠⵠⵠ, ⲆΔᐃ],
		[1, Δ[278], ᐃⵠΔⲆ, 211, 14, ΔⵠⲆ],
		[ⵠΔΔ, Δ[278], 2, 212, ⵠⵠᐃᐃⲆ, ⵠΔᐃ],
		[1, Δ[278], ⵠΔᐃⵠ, 210, 14, 1],
		[Δᐃᐃ, Δ[278], ᐃΔᐃⲆ, 211, ΔᐃⲆⲆⲆ, ⵠΔⲆ],
		[1, Δ[278], 3, 213, ⵠⲆᐃΔᐃ, 1],
		[ⲆⵠⲆ, Δ[278], ᐃΔᐃⲆ, 212, ᐃⵠᐃᐃᐃ, ⲆⵠⲆ],
		[Δᐃᐃ, Δ[278], 3, 223, 21, ᐃⲆΔ],
		[ᐃⲆΔ, Δ[278], ᐃΔᐃⲆ, 209, ᐃΔⲆⵠΔ, 1],
		[1, Δ[526], 3, 223, 22, 1],
		[1, Δ[526], Ⲇⵠᐃᐃ, 221, 23, 1],
		[1, Δ[526], 3, 207, Ⲇⵠᐃⵠᐃ, 1],
		[1, Δ[526], 3, 209, 10, 1],
		[1, Δ[526], 0, 209, 12, 1],
		[ⵠΔⲆ, Δ[526], 4, 209, 14, 1],
		[1, Δ[526], ΔᐃΔⵠ, 219, 23, ⵠΔⲆ],
		[ⵠΔΔ, Δ[526], ΔⵠᐃⲆ, 210, ᐃΔΔᐃᐃ, Δᐃᐃ],
		[ᐃⲆΔ, Δ[526], Ⲇⵠᐃᐃ, 217, 22, 1],
		[ⵠΔⲆ, Δ[526], 4, 212, ⲆⲆⵠᐃΔ, ⲆⵠⲆ],
		[Δᐃᐃ, Δ[526], 2, 214, ΔⲆⵠⵠⵠ, 1],
		[1, Δ[526], ᐃᐃΔΔ, 213, ⲆⵠⵠΔⵠ, ᐃⲆΔ],
		[1, Δ[526], ⲆΔᐃ, 212, 21, ⵠΔⲆ],
		[Δᐃᐃ, Δ[526], 4, 215, ⲆᐃΔΔⵠ, 1],
		[1, Δ[526], 2, 216, 17, ᐃⲆⲆ],
		[ⵠΔⲆ, Δ[526], 5, 216, 16, 1],
		[1, Δ[526], ⵠⵠΔⲆ, 216, 15, 1],
		[1, Δ[526], 1, 217, Ⲇᐃⵠᐃᐃ, ᐃⲆⲆ],
		[1, Δ[526], 2, 218, ᐃΔⲆⲆⲆ, Δᐃᐃ],
		[1, Δ[526], Δᐃᐃⵠ, 216, ⲆⵠᐃΔΔΔᐃ, 1],
		[1, Δ[526], 2, 219, 16, Δᐃᐃ],
		[1, Δ[526], Δᐃⵠᐃ, 220, 16, 1],
		[1, Δ[526], 5, 216, ΔᐃΔᐃⵠ, 1],
		[ⵠⵠᐃ, Δ[526], ΔᐃΔⵠ, 217, 15, 1],
		[1, Δ[278], ⵠⲆᐃ, 211, 44, 1],
		[1, Δ[278], 1, 212, 45, Δᐃᐃ],
		[1, Δ[278], 2, 213, 45, ⵠΔΔ],
		[1, Δ[278], ⵠⲆᐃ, 214, 46, 1],
		[ⵠⵠᐃ, Δ[278], ᐃⵠΔⲆ, 215, 46, 1],
		[ⵠⵠᐃ, Δ[278], ΔⵠⲆⲆ, 213, 46, ⲆΔᐃ],
		[ᐃⵠⵠ, Δ[278], ᐃΔᐃⲆ, 214, 47, ⵠⵠᐃ],
		[ᐃⲆΔ, Δ[278], 3, 214, 48, ᐃⲆⲆ],
		[ⵠΔⲆ, Δ[278], Ⲇⵠᐃᐃ, 216, 46, 1],
		[1, Δ[278], ⲆᐃⲆ, 208, ᐃΔⲆΔᐃ, 1],
		[ᐃⲆΔ, Δ[278], 0, 210, 21, 1],
		[1, Δ[278], 0, 212, 23, Δᐃᐃ],
		[ⵠΔᐃ, Δ[278], ⵠᐃΔ, 213, 25, ⵠΔᐃ],
		[1, Δ[278], 2, 213, 24, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 211, 22, ⵠΔΔ],
		[ⵠΔⲆ, Δ[278], ΔⲆᐃⲆ, 210, ⲆⲆᐃᐃᐃ, ⲆⵠⲆ],
		[ᐃⲆⲆ, Δ[278], 2, 209, 21, ᐃⲆΔ],
		[1, Δ[278], 2, 209, ᐃⵠⲆᐃΔ, 1],
		[ⲆⵠⲆ, Δ[278], ⲆⲆᐃⲆ, 211, 21, 1],
		[1, Δ[278], ⲆⲆᐃⲆ, 212, 22, ᐃⲆΔ],
		[1, Δ[278], ⲆⲆᐃⲆ, 213, 23, 1],
		[1, Δ[278], ⵠᐃⲆᐃ, 213, 26, ⲆⵠⲆ],
		[Δᐃᐃ, Δ[278], ᐃⲆᐃⲆ, 207, 20, 1],
		[ⲆⵠⲆ, Δ[526], ⵠΔΔⵠ, 192, 33, ⵠⵠᐃ],
		[1, Δ[526], ΔᐃΔⵠ, 191, 34, 1],
		[1, Δ[526], ΔᐃΔⵠ, 190, 35, 1],
		[ΔⵠⲆ, Δ[526], ⵠᐃⲆᐃ, 189, 37, ΔⵠⲆ],
		[1, Δ[526], ᐃⵠᐃⲆ, 188, 39, 1],
		[1, Δ[526], ᐃᐃΔΔ, 186, 40, 1],
		[ⵠΔⲆ, Δ[526], 4, 185, 39, ⵠΔΔ],
		[ⲆΔᐃ, Δ[526], ΔᐃΔⵠ, 184, 39, 1],
		[1, Δ[526], ᐃⵠΔⲆ, 183, 39, 1],
		[ᐃⲆⲆ, Δ[526], ΔⵠⲆ, 182, 40, ΔⵠⲆ],
		[1, Δ[526], 2, 181, 41, 1],
		[1, Δ[526], 5, 180, 41, 1],
		[ᐃⵠⵠ, Δ[526], 5, 179, 41, ᐃⲆΔ],
		[1, Δ[526], ⵠΔΔⵠ, 192, 28, 1],
		[ΔⵠⲆ, Δ[526], ⲆⵠⲆᐃ, 191, 28, ᐃⲆΔ],
		[1, Δ[526], 4, 190, 27, 1],
		[ᐃⲆⲆ, Δ[526], ⲆΔⲆΔ, 188, 27, 1],
		[ⵠΔᐃ, Δ[526], ⲆⵠⲆᐃ, 187, 26, 1],
		[ⵠΔⲆ, Δ[526], 4, 186, 25, ᐃⲆΔ],
		[Δᐃᐃ, Δ[526], ᐃᐃΔΔ, 185, 25, 1],
		[ᐃⲆⲆ, Δ[526], ΔⵠⲆᐃ, 184, 24, ⵠΔᐃ],
		[1, Δ[526], 5, 184, 23, 1],
		[ⵠΔΔ, Δ[526], 2, 184, 22, 1],
		[1, Δ[526], ΔΔⵠΔ, 184, 21, ⵠΔΔ],
		[1, Δ[526], 1, 183, 20, Δᐃᐃ],
		[1, Δ[526], ⵠⵠⲆⵠ, 182, ⲆΔⲆΔⵠ, Δᐃᐃ],
		[ᐃⵠⵠ, Δ[526], 2, 181, 20, ᐃⵠⵠ],
		[1, Δ[526], ⲆΔⲆⲆ, 180, ᐃΔⲆΔᐃ, ᐃⵠⵠ],
		[ΔⵠⲆ, Δ[526], 2, 179, 20, 1],
		[ⲆⵠⲆ, Δ[526], ᐃᐃΔΔ, 178, ⵠⲆⵠⲆⵠ, 1],
		[Δᐃᐃ, Δ[526], 3, 178, 17, 1],
		[Δᐃᐃ, Δ[526], 3, 176, ⲆᐃΔΔⵠ, 1],
		[ᐃⲆⲆ, Δ[278], ᐃΔΔ, 177, ΔᐃⲆⲆⲆ, ᐃⵠⵠ],
		[1, Δ[278], ΔᐃΔ, 175, ΔᐃⲆⵠΔᐃᐃ, ⵠΔΔ],
		[1, Δ[278], 0, 180, ᐃΔⲆⲆⲆ, 1],
		[1, Δ[278], ⵠⲆⵠ, 174, 19, 1],
		[ΔⵠⲆ, Δ[278], Δⵠⵠ, 172, 20, 1],
		[ΔⵠⲆ, Δ[278], ᐃⲆΔ, 175, 15, 1],
		[ᐃⵠⵠ, Δ[278], ᐃⲆⲆ, 172, ⲆⲆΔⲆⵠ, ⵠⵠᐃ],
		[1, Δ[278], 1, 181, 15, ᐃⲆⲆ],
		[1, Δ[278], 2, 179, 15, 1],
		[ⵠΔᐃ, Δ[278], ΔⲆᐃⲆ, 177, Ⲇᐃⵠᐃᐃ, Δᐃᐃ],
		[1, Δ[278], 2, 176, ᐃΔⲆⲆⲆ, ⲆΔᐃ],
		[ᐃⲆⲆ, Δ[278], 2, 174, ⲆΔⵠΔᐃ, ⵠΔΔ],
		[ⵠΔⲆ, Δ[278], ΔⲆᐃⲆ, 173, ΔⵠΔⵠⵠ, 1],
		[1, Δ[278], Δᐃᐃⵠ, 172, Ⲇᐃᐃᐃᐃ, ᐃⲆΔ],
		[1, Δ[278], 2, 173, ⲆⲆΔⲆⵠ, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 173, 17, 1],
		[1, Δ[278], 2, 174, 17, 1],
		[ⲆⵠⲆ, Δ[278], ᐃⵠΔⲆ, 174, 16, ⲆⵠⲆ],
		[1, Δ[278], ⲆⲆᐃⲆ, 175, 16, ᐃⲆΔ],
		[ⵠΔᐃ, Δ[278], 2, 176, ⲆⲆᐃⵠΔ, ᐃⵠⵠ],
		[ᐃⲆⲆ, Δ[278], ᐃⵠΔⲆ, 178, ᐃΔΔᐃᐃ, 1],
		[ⵠΔΔ, Δ[278], 2, 178, ᐃⵠⵠⲆⲆ, 1],
		[1, Δ[278], 2, 179, 16, ⵠⵠᐃ],
		[ⵠΔΔ, Δ[278], ⲆᐃᐃΔ, 180, 15, ⵠΔⲆ],
		[ⵠΔⲆ, Δ[278], Δⵠᐃᐃ, 181, 16, ⵠΔᐃ],
		[1, Δ[278], 3, 182, ΔⲆⲆⵠΔ, ᐃⲆΔ],
		[ᐃⲆΔ, Δ[278], 3, 172, 21, 1],
		[1, Δ[526], ⵠΔΔ, 175, 19, 1],
		[ⵠΔⲆ, Δ[526], ΔⲆᐃⲆ, 174, ⲆⵠⵠΔⵠ, 1],
		[1, Δ[526], ΔⲆᐃⲆ, 173, 20, ᐃⵠⵠ],
		[1, Δ[526], 1, 180, 17, 1],
		[ⲆⵠⲆ, Δ[526], 2, 181, 17, 1],
		[ⵠΔⲆ, Δ[526], ΔⵠⲆⲆ, 191, ᐃΔⲆΔᐃ, 1],
		[1, "s", 0, 217, 30, 1],
		[1, "s", 0, 208, 35, ⵠΔⲆ],
		[ⵠΔᐃ, "s", 0, 204, 24, ᐃⵠⵠ],
		[ⲆⵠⲆ, "s", ⲆΔᐃ, 218, 32, ᐃⵠⵠ],
		[1, "s", ᐃⵠⵠ, 207, 34, ⲆΔᐃ],
		[ᐃⲆⲆ, "s", ⵠⵠᐃ, 202, 23, ᐃⵠⵠ],
		[ⲆΔᐃ, "s", ⲆⵠⲆ, 195, ⲆⲆⵠᐃΔ, 1],
		[ᐃⲆⲆ, "s", ⲆⲆᐃⲆ, 222, 28, Δᐃᐃ],
		[ⲆΔᐃ, "s", 2, 212, 38, ⵠΔⲆ],
		[1, "s", ΔⲆᐃⲆ, 207, 23, 1],
		[1, "s", Δᐃᐃⵠ, 202, ⵠⲆⵠᐃⲆ, ᐃⵠⵠ],
		[1, "s", 2, 195, ⲆⲆΔⲆⵠ, 1],
		[1, "s", 1, 191, 12, 1],
		[1, "s", 0, 187, ΔⲆⲆⵠΔ, 1],
		[1, "s", 2, 188, 16, ᐃⲆΔ],
		[ⵠΔΔ, "s", 1, 186, ΔᐃⵠⲆᐃⵠᐃ, 1],
		[ⵠΔΔ, "s", ᐃⵠⵠ, 201, ΔΔⵠᐃⲆ, ΔⵠⲆ],
		[ⵠΔΔ, "g", ⵠΔΔ, 216, 31, ΔⵠⲆ],
		[ᐃⵠⵠ, "g", ΔᐃΔ, 200, ⲆⲆᐃⵠΔ, ⵠΔᐃ],
		[ⲆⵠⲆ, "g", 0, 202, 40, Δᐃᐃ],
		[ⵠΔΔ, "g", ᐃΔΔ, 189, 32, 1],
		[ΔⵠⲆ, "g", ᐃΔΔ, 204, 28, ᐃⲆΔ],
		[ᐃⲆΔ, "g", ᐃΔΔ, 196, 24, ⲆΔᐃ],
		[ⵠΔⲆ, "g", ⲆⲆᐃⲆ, 198, 37, ⵠΔⲆ],
		[ΔⵠⲆ, "s", ⵠᐃΔ, 193, 39, 1],
		[ⵠΔⲆ, "s", 0, 201, 45, 1],
		[ᐃⲆⲆ, "a", 0, 210, 29, ⵠΔᐃ],
		[ΔⵠⲆ, "a", ⵠᐃΔ, 200, 20, ᐃⲆΔ],
		[1, Δ[278], 0, 200, 34, 1],
		[ᐃⲆΔ, Δ[278], ⵠⲆⵠ, 193, 27, 1],
		[ⵠΔⲆ, Δ[278], ᐃⲆΔ, 203, 30, 1],
		[ⵠΔᐃ, Δ[278], ΔⵠⲆ, 191, 31, 1],
		[1, Δ[278], 2, 202, 32, 1],
		[ⵠΔΔ, Δ[278], ⲆⲆΔΔ, 194, 26, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 192, 27, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 192, 32, ΔⵠⲆ],
		[ⵠΔᐃ, Δ[278], 2, 203, 31, ᐃⲆⲆ],
		[1, Δ[278], ᐃⵠΔⲆ, 202, 31, ⲆⵠⲆ],
		[ᐃⲆⲆ, Δ[278], 2, 202, 30, 1],
		[ⵠΔⲆ, Δ[278], ΔⵠᐃⲆ, 202, 29, 1],
		[ΔⵠⲆ, Δ[278], 3, 201, 32, 1],
		[ⵠΔⲆ, Δ[278], 3, 199, 35, ⵠΔⲆ],
		[ⲆΔᐃ, Δ[278], ⲆᐃⲆ, 193, 34, ᐃⲆΔ],
		[1, Δ[278], 2, 194, 34, 1],
		[1, Δ[278], 2, 198, 35, ⵠΔΔ],
		[ᐃⲆⲆ, Δ[278], ΔⵠⲆⲆ, 199, 34, ⲆΔᐃ],
		[1, Δ[278], Ⲇⵠᐃᐃ, 191, 29, 1],
		[1, Δ[278], 0, 191, 30, 1],
		[Δᐃᐃ, Δ[278], 3, 190, 29, ⵠⵠᐃ],
		[1, Δ[526], ΔⵠᐃⲆ, 180, 69, ⲆΔᐃ],
		[ᐃⲆⲆ, Δ[526], ᐃⵠⲆⵠ, 182, 68, ᐃⵠⵠ],
		[1, Δ[526], 3, 184, 68, 1],
		[ⵠΔᐃ, Δ[526], Ⲇⵠᐃᐃ, 186, 70, ⵠΔⲆ],
		[1, Δ[526], 3, 184, 72, ⲆⵠⲆ],
		[ⲆΔᐃ, Δ[526], 3, 182, 72, 1],
		[ⲆⵠⲆ, Δ[526], 3, 180, 71, ⵠΔΔ],
		[Δᐃᐃ, Δ[278], 0, 186, 68, 1],
		[ⲆⵠⲆ, Δ[278], 0, 187, 70, 1],
		[1, Δ[278], 0, 183, 74, ⲆⵠⲆ],
		[1, Δ[278], 0, 178, 70, 1],
		[1, Δ[278], 2, 182, 66, Δᐃᐃ],
		[ᐃⲆⲆ, Δ[278], 2, 182, 74, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 181, 73, 1],
		[1, Δ[278], 2, 180, 74, 1],
		[1, Δ[278], 2, 181, 74, ⵠΔⲆ],
		[ⵠΔᐃ, Δ[526], 0, 184, 70, ⲆⵠⲆ],
		[ᐃⲆⲆ, Δ[526], 3, 182, 70, 1],
		[ⵠΔⲆ, Δ[278], 2, 181, 67, ⵠⵠᐃ],
		[ⵠΔⲆ, Δ[278], Ⲇⵠᐃᐃ, 184, 67, ⲆⵠⲆ],
		[ᐃⲆⲆ, Δ[278], ΔⵠⲆⲆ, 182, 67, ΔⵠⲆ],
		[1, Δ[526], ΔⵠⲆᐃ, 187, 69, ⲆΔᐃ],
		[1, Δ[526], ⵠΔΔ, 188, 68, ⲆⵠⲆ],
		[ᐃⵠⵠ, Δ[526], 4, 189, 68, 1],
		[ⵠΔᐃ, Δ[526], 2, 190, 68, ᐃⲆΔ],
		[1, Δ[526], 1, 191, 68, ⲆⵠⲆ],
		[1, Δ[526], 4, 192, 68, ⵠΔΔ],
		[1, Δ[526], ⲆⲆΔΔ, 193, 68, ᐃⲆⲆ],
		[1, Δ[526], 4, 194, 69, ⲆⵠⲆ],
		[ΔⵠⲆ, Δ[526], ⲆⲆΔΔ, 194, 70, Δᐃᐃ],
		[ᐃⲆΔ, Δ[526], ⲆΔΔΔ, 195, 71, 1],
		[1, Δ[526], 1, 194, 71, 1],
		[ⵠΔⲆ, Δ[526], ᐃⵠΔⲆ, 196, 72, ᐃⵠⵠ],
		[ᐃⵠⵠ, Δ[526], ⲆⵠⵠⲆ, 196, 71, ᐃⲆΔ],
		[1, Δ[526], 1, 197, 73, ᐃⲆⲆ],
		[ᐃⵠⵠ, Δ[526], 5, 196, 73, ΔⵠⲆ],
		[1, Δ[526], ⲆΔⲆⲆ, 198, 73, 1],
		[ⲆΔᐃ, Δ[526], ᐃⵠᐃⲆ, 201, 73, 1],
		[ᐃⵠⵠ, Δ[526], ᐃΔᐃⲆ, 203, 72, 1],
		[ⲆⵠⲆ, Δ[526], ΔᐃΔⵠ, 199, 73, ᐃⵠⵠ],
		[1, Δ[526], ᐃⲆⲆ, 205, 72, ᐃⵠⵠ],
		[1, Δ[526], ⵠΔᐃⵠ, 206, 72, ᐃⵠⵠ],
		[1, Δ[526], 5, 207, 72, 1],
		[1, Δ[526], ᐃⲆΔ, 208, 72, 1],
		[1, Δ[526], ᐃⵠⵠ, 209, 73, 1],
		[ⲆⵠⲆ, Δ[526], ⲆⲆΔΔ, 209, 74, ᐃⵠⵠ],
		[ΔⵠⲆ, Δ[526], 5, 211, 76, ⵠΔⲆ],
		[1, Δ[526], 4, 210, 75, Δᐃᐃ],
		[Δᐃᐃ, Δ[526], ⵠⵠΔⲆ, 212, 76, ᐃⲆⲆ],
		[ᐃⵠⵠ, Δ[526], 4, 202, 75, Δᐃᐃ],
		[ᐃⲆⲆ, Δ[526], 2, 203, 76, 1],
		[1, Δ[526], 4, 204, 77, 1],
		[ᐃⵠⵠ, Δ[526], ΔⲆᐃⲆ, 204, 78, 1],
		[1, Δ[526], ⲆᐃᐃΔ, 204, 79, 1],
		[ⵠΔⲆ, Δ[526], 5, 204, 80, 1],
		[ⲆΔᐃ, Δ[278], Δⵠⵠ, 202, 74, 1],
		[Δᐃᐃ, Δ[278], ⲆⵠⲆ, 203, 74, ΔⵠⲆ],
		[ᐃⲆΔ, Δ[278], 2, 204, 73, 1],
		[1, Δ[278], 2, 203, 75, ⲆΔᐃ],
		[ⵠΔᐃ, Δ[278], 3, 204, 76, ⲆΔᐃ],
		[1, Δ[278], 3, 205, 73, ⵠΔᐃ],
		[1, Δ[278], ⵠᐃΔ, 205, 74, ᐃⲆΔ],
		[ᐃⲆΔ, Δ[278], Δⵠᐃᐃ, 204, 74, ⵠΔΔ],
		[ⲆΔᐃ, Δ[278], 2, 204, 75, ⲆΔᐃ],
		[1, Δ[278], 2, 206, 73, 1],
		[ⲆⵠⲆ, Δ[278], ᐃⵠⲆⵠ, 207, 73, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 205, 76, 1],
		[ᐃⲆⲆ, Δ[278], Ⲇⵠᐃᐃ, 205, 77, ⵠΔΔ],
		[1, Δ[526], 3, 183, 66, 1],
		[1, Δ[526], ΔᐃΔΔ, 183, 65, ⲆⵠⲆ],
		[ⲆΔᐃ, Δ[526], 4, 184, 64, 1],
		[ᐃⲆΔ, Δ[526], 4, 185, 63, ᐃⲆⲆ],
		[1, Δ[526], 1, 185, 62, 1],
		[1, Δ[526], 2, 185, 61, 1],
		[1, Δ[526], ⵠΔᐃⵠ, 185, 60, ΔⵠⲆ],
		[1, Δ[526], ΔᐃΔΔ, 186, 59, ⵠⵠᐃ],
		[ⵠΔⲆ, Δ[526], ⵠΔᐃ, 187, 58, 1],
		[1, Δ[526], Δᐃᐃⵠ, 187, 57, ⵠΔⲆ],
		[1, Δ[526], ⲆᐃᐃΔ, 187, 56, ᐃⵠⵠ],
		[1, "s", ΔᐃΔ, 191, 60, ⲆⵠⲆ],
		[ⵠⵠᐃ, "s", ᐃⲆⲆ, 195, 58, 1],
		[1, "s", ⵠΔΔ, 199, 46, ⵠΔⲆ],
		[ⵠΔⲆ, "s", ΔⲆᐃⲆ, 202, 49, ⵠⵠᐃ],
		[1, "g", 2, 197, 55, ᐃⲆⲆ],
		[1, "g", 1, 213, 55, 1],
		[1, "g", 0, 192, 45, ᐃⵠⵠ],
		[ⲆⵠⲆ, "g", 0, 210, 61, ᐃⲆΔ],
		[1, "g", ⵠᐃΔ, 182, 52, 1],
		[1, "g", 0, 180, 35, 1],
		[ⵠΔᐃ, "g", 0, 175, 25, ⲆΔᐃ],
		[ᐃⵠⵠ, "g", 0, 168, 32, 1],
		[1, "g", 1, 179, 28, 1],
		[1, "g", 1, 161, ᐃΔⲆⲆⲆ, 1],
		[ⵠΔΔ, "g", 2, 172, ⲆⵠΔⵠᐃ, 1],
		[1, "g", ⲆᐃᐃΔ, 160, 25, ⲆⵠⲆ],
		[ⵠΔᐃ, "g", ⲆⲆΔΔ, 157, 39, ⵠΔΔ],
		[ᐃⲆΔ, "g", ⲆⲆᐃⲆ, 170, 43, ᐃⲆΔ],
		[1, "g", 2, 202, 67, ⵠⵠᐃ],
		[Δᐃᐃ, "g", ΔⲆᐃⲆ, 217, 72, 1],
		[1, "g", 2, 214, 82, ⵠΔΔ],
		[ⵠⵠᐃ, "g", ⲆⲆᐃⲆ, 193, 86, 1],
		[1, "g", 2, 168, 60, ⲆΔᐃ],
		[1, "g", 2, 165, 78, 1],
		[ⵠΔΔ, "g", ⵠΔᐃⵠ, 173, 88, 1],
		[ⵠΔᐃ, "s", 0, 185, 51, 1],
		[ⵠΔᐃ, "s", 0, 175, 44, ᐃⲆΔ],
		[ⲆΔᐃ, "s", ⲆᐃⲆ, 165, 50, Δᐃᐃ],
		[Δᐃᐃ, "s", Δⵠⵠ, 160, 32, ⵠⵠᐃ],
		[ᐃⲆΔ, "s", ⵠΔᐃ, 162, 30, 1],
		[1, "s", 1, 176, 28, ⲆΔᐃ],
		[ⵠΔΔ, "s", 1, 154, ⵠᐃⲆⲆⲆ, 1],
		[1, "s", ⵠΔᐃ, 184, 49, 1],
		[ⵠΔΔ, "s", 1, 192, 62, 1],
		[1, "s", ᐃⲆΔ, 216, 62, Δᐃᐃ],
		[1, "s", ΔⵠⲆ, 204, 65, ⵠΔⲆ],
		[Δᐃᐃ, "s", 1, 217, 79, 1],
		[1, "s", ᐃⲆⲆ, 206, 86, ⵠΔΔ],
		[1, Δ[526], ΔⵠⲆⲆ, 211, 69, ⵠⵠᐃ],
		[1, Δ[526], 4, 215, 69, ⲆⵠⲆ],
		[ⵠⵠᐃ, Δ[526], 5, 201, 81, 1],
		[ΔⵠⲆ, Δ[526], 1, 207, 83, ᐃⵠⵠ],
		[1, Δ[526], 3, 173, 32, ⵠⵠᐃ],
		[ⵠⵠᐃ, Δ[526], Δᐃᐃⵠ, 181, 45, 1],
		[ⵠΔⲆ, Δ[526], 1, 178, 38, 1],
		[1, Δ[526], ᐃⲆⲆ, 213, 69, 1],
		[ᐃⲆⲆ, Δ[526], ⵠⵠΔⲆ, 214, 69, ΔⵠⲆ],
		[ⵠΔᐃ, Δ[526], 4, 216, 68, 1],
		[1, Δ[526], Δⵠⵠ, 191, 78, Δᐃᐃ],
		[ⵠΔΔ, Δ[526], ΔⵠⲆⲆ, 191, 80, 1],
		[ΔⵠⲆ, Δ[526], Ⲇⵠᐃᐃ, 189, 79, 1],
		[ᐃⲆΔ, "g", 2, 150, 29, 1],
		[1, "g", 2, 154, 67, ΔⵠⲆ],
		[ᐃⲆΔ, "g", ⲆⲆᐃⲆ, 202, 94, 1],
		[ⵠΔΔ, "g", ⲆᐃᐃΔ, 155, 90, ⵠΔΔ],
		[1, "s", 2, 215, 80, ⲆⵠⲆ],
		[Δᐃᐃ, "s", 2, 204, 62, ΔⵠⲆ],
		[1, "s", ⲆⲆΔΔ, 218, 60, ⲆⵠⲆ],
		[1, "s", 2, 194, 62, ΔⵠⲆ],
		[ᐃⲆΔ, "s", 0, 216, 86, 1],
		[1, "s", 0, 211, 93, 1],
		[1, Δ[526], ⵠⲆᐃ, 216, 92, ᐃⲆΔ],
		[1, Δ[526], 0, 151, 96, 1],
		[1, Δ[526], 1, 155, 95, 1],
		[1, Δ[526], 4, 214, 88, ᐃⲆⲆ],
		[1, "s", 0, 205, 99, 1],
		[ᐃⲆⲆ, "s", Δᐃᐃ, 217, 88, ⲆΔᐃ],
		[1, "s", ⵠΔᐃ, 213, 94, 1],
		[1, "s", 1, 202, 97, 1],
		[ⵠⵠᐃ, "s", 0, 199, 85, 1],
		[ⵠΔᐃ, "s", ⵠᐃΔ, 190, 93, 1],
		[ⵠΔΔ, "s", 1, 199, 87, ⵠΔΔ],
		[1, "s", 1, 192, 97, ᐃⵠⵠ],
		[1, Δ[526], ᐃⵠᐃⲆ, 196, 92, ⵠΔᐃ],
		[ⵠΔⲆ, Δ[526], 1, 199, 91, Δᐃᐃ],
		[1, Δ[526], 1, 220, 91, ⲆⵠⲆ],
		[1, Δ[526], ⵠⲆⵠ, 219, 77, ᐃⲆΔ],
		[1, Δ[526], ⲆᐃⲆ, 200, 59, 1],
		[ⵠΔᐃ, Δ[526], 3, 188, 87, 1],
		[ⲆⵠⲆ, Δ[526], 0, 183, 94, ᐃⲆΔ],
		[ΔⵠⲆ, Δ[526], Δᐃᐃ, 187, 83, ⲆⵠⲆ],
		[ⵠΔⲆ, Δ[526], 1, 175, 82, 1],
		[ⵠΔᐃ, Δ[526], 1, 172, 94, ⵠΔΔ],
		[ΔⵠⲆ, Δ[526], 2, 179, 78, ⵠΔᐃ],
		[ⵠΔΔ, Δ[526], 0, 166, 87, ⲆⵠⲆ],
		[1, Δ[526], 3, 159, 80, ΔⵠⲆ],
		[ⵠΔⲆ, Δ[526], ᐃⵠⲆⵠ, 167, 15, 1],
		[1, Δ[526], 1, 164, ⲆⲆⵠⵠᐃⵠΔ, 1],
		[1, Δ[526], 1, 172, 28, ᐃⵠⵠ],
		[1, Δ[526], ⵠᐃⲆᐃ, 153, 24, 1],
		[1, Δ[526], ᐃᐃΔΔ, 164, 91, ᐃⲆΔ],
		[1, Δ[526], ΔᐃΔⵠ, 156, 82, 1],
		[1, Δ[526], 4, 149, 90, 1],
		[ⵠΔᐃ, "s", ⵠᐃΔ, 178, 85, Δᐃᐃ],
		[ⵠⵠᐃ, "s", ⵠΔᐃ, 180, 85, 1],
		[ⵠΔᐃ, "s", ΔᐃΔ, 163, 96, ⲆΔᐃ],
		[1, "s", ⵠᐃΔ, 159, 86, ⲆⵠⲆ],
		[ⵠⵠᐃ, "s", Δⵠⵠ, 185, 78, ᐃⵠⵠ],
		[1, "s", ΔⵠⲆ, 194, 75, 1],
		[1, "s", 2, 195, 76, ⵠΔⲆ],
		[ᐃⲆⲆ, "s", 2, 181, 78, ᐃⲆΔ],
		[1, "s", 2, 161, 87, ᐃⵠⵠ],
		[Δᐃᐃ, "s", 2, 166, 97, 1],
		[1, "s", 2, 177, 97, 1],
		[1, "s", ⵠⲆⵠ, 149, 85, ⵠΔΔ],
		[1, "s", 1, 151, 83, 1],
		[ⲆⵠⲆ, "s", ⵠΔΔ, 175, 74, 1],
		[1, "s", 0, 174, 72, ᐃⵠⵠ],
		[1, Δ[526], ᐃⵠᐃⲆ, 168, 71, ᐃⲆⲆ],
		[1, Δ[526], ⵠᐃⲆᐃ, 180, 60, 1],
		[ⵠΔⲆ, "s", Δⵠⵠ, 156, 63, 1],
		[ᐃⲆΔ, "s", Δⵠⵠ, 151, 47, 1],
		[ⵠΔⲆ, "s", ᐃⲆΔ, 158, 64, 1],
		[1, "s", 1, 161, 75, 1],
		[1, "s", 1, 162, 51, 1],
		[1, "s", ᐃⲆΔ, 175, 45, ⵠΔᐃ],
		[1, "s", ⵠⵠᐃ, 152, 47, ⵠΔⲆ],
		[1, "s", 1, 159, 33, ᐃⲆⲆ],
		[1, "s", ⲆⵠⲆ, 152, ⵠⲆΔⲆΔ, 1],
		[1, "s", 0, 151, 13, ⲆΔᐃ],
		[1, "s", ⵠⲆᐃ, 166, 22, 1],
		[ᐃⲆⲆ, "s", 0, 170, 63, Δᐃᐃ],
		[ⵠΔᐃ, "s", Δᐃᐃⵠ, 172, 62, 1],
		[1, "s", ⵠΔᐃⵠ, 155, 61, 1],
		[ⵠΔΔ, "s", 2, 167, 51, ⲆΔᐃ],
		[1, "s", 2, 150, 52, 1],
		[1, Δ[526], 4, 178, 69, 1],
		[1, Δ[526], ⲆⵠⵠⲆ, 177, 68, 1],
		[1, Δ[526], 3, 176, 67, ⵠΔⲆ],
		[ⵠΔⲆ, Δ[526], 0, 174, 67, ᐃⲆⲆ],
		[ⵠⵠᐃ, Δ[526], ⵠΔΔ, 172, 67, ⵠⵠᐃ],
		[ᐃⲆⲆ, Δ[526], 4, 171, 67, 1],
		[1, Δ[526], 4, 170, 66, 1],
		[1, Δ[526], 4, 169, 66, 1],
		[Δᐃᐃ, Δ[526], 1, 168, 66, ⲆⵠⲆ],
		[ᐃⵠⵠ, Δ[526], ⲆⵠⲆᐃ, 167, 67, 1],
		[ⲆⵠⲆ, Δ[526], ⲆⵠⲆ, 166, 67, ⲆΔᐃ],
		[ⵠⵠᐃ, Δ[526], 4, 165, 68, 1],
		[ᐃⵠⵠ, Δ[526], ⵠⵠⲆⵠ, 164, 68, 1],
		[1, Δ[526], 2, 163, 68, ᐃⵠⵠ],
		[ᐃⲆⲆ, Δ[526], 5, 162, 68, 1],
		[ᐃⵠⵠ, Δ[526], 2, 161, 68, ⲆΔᐃ],
		[1, Δ[526], ᐃⵠᐃⲆ, 153, 72, ⵠΔΔ],
		[ⲆΔᐃ, Δ[526], ΔⵠⲆⲆ, 163, 60, ΔⵠⲆ],
		[1, Δ[526], ⲆΔⲆΔ, 164, 42, 1],
		[1, Δ[526], ᐃΔΔ, 155, 51, 1],
		[ⲆΔᐃ, Δ[526], 1, 168, 42, 1],
		[ⵠΔᐃ, Δ[526], 4, 158, 48, ⵠΔΔ],
		[1, Δ[526], ᐃⵠⲆⲆ, 178, 57, 1],
		[ΔⵠⲆ, Δ[526], ⲆⵠⵠⲆ, 151, 69, 1],
		[ᐃⵠⵠ, Δ[526], ⲆⲆᐃⲆ, 170, 74, Δᐃᐃ],
		[1, Δ[526], 2, 160, 84, ΔⵠⲆ],
		[1, Δ[526], ⵠΔᐃⵠ, 174, 92, 1],
		[ⲆΔᐃ, Δ[526], 2, 188, 90, Δᐃᐃ],
		[1, Δ[526], Δᐃᐃⵠ, 209, 84, ⵠΔⲆ],
		[ⵠⵠᐃ, Δ[526], 2, 206, 93, ΔⵠⲆ],
		[ⲆΔᐃ, Δ[526], ⵠⵠⲆⵠ, 156, 70, ⲆΔᐃ],
		[1, Δ[526], 5, 165, 57, ⵠΔΔ],
		[ΔⵠⲆ, Δ[526], 5, 182, 58, ΔⵠⲆ],
		[1, Δ[526], ΔΔⵠΔ, 166, 44, 1],
		[1, Δ[526], 1, 163, 39, ⵠⵠᐃ],
		[ΔⵠⲆ, Δ[526], 1, 152, 53, 1],
		[ⵠⵠᐃ, Δ[526], 1, 152, 37, 1],
		[ⲆΔᐃ, Δ[526], ⲆᐃᐃΔ, 163, ⵠᐃΔⲆⲆ, ⵠⵠᐃ],
		[1, Δ[66], ⵠᐃΔⵠᐃ, 219, ΔⲆΔᐃΔ, 0],
		[Δᐃᐃ, Δ[66], 14, 203, 13, ⵠⲆⵠ],
		[ⲆΔᐃ, Δ[66], ΔᐃⲆⲆⲆ, 220, ᐃΔⵠⲆⲆ, 0],
		[1, Δ[66], 12, 223, 15, ΔᐃΔ],
		[1, Δ[66], ᐃⵠᐃΔⲆ, 213, ⲆΔⵠᐃⲆ, 0],
		[ⵠΔΔ, Δ[66], 37, 217, ΔⵠΔΔΔ, ᐃΔΔ],
		[ⵠΔⲆ, Δ[66], 38, 220, ΔᐃⵠⲆᐃⵠᐃ, ⲆᐃⲆ],
		[ⵠⵠᐃ, Δ[66], 38, 215, ᐃᐃΔⵠⵠ, ⵠᐃΔ],
		[ⵠⵠᐃ, Δ[66], 40, 214, ⵠⵠⲆⵠⲆ, ⵠⲆᐃ],
		[1, Δ[66], 40, 222, ᐃⵠⵠⲆⲆ, Δⵠⵠ],
		[ᐃⲆⲆ, Δ[66], 40, 209, ΔᐃΔΔᐃΔⲆ, 0],
		[1, Δ[66], 37, 212, ΔᐃΔⵠᐃ, 0],
		[1, Δ[66], 38, 215, 26, ⲆᐃⲆ],
		[1, Δ[66], 37, 222, 25, 0],
		[ⲆΔᐃ, Δ[66], 40, 221, 29, 0],
		[ⲆΔᐃ, Δ[66], 12, 220, 27, ⵠⲆᐃ],
		[ⵠⵠᐃ, Δ[66], 13, 213, 27, ⵠⲆᐃ],
		[ΔⵠⲆ, Δ[66], ᐃⲆᐃⲆΔ, 215, 30, ⵠᐃΔ],
		[Δᐃᐃ, Δ[66], 15, 219, 33, 0],
		[1, Δ[66], 38, 220, 31, 0],
		[1, Δ[66], 38, 217, 35, 0],
		[ⲆⵠⲆ, Δ[66], 40, 221, 34, 0],
		[1, Δ[66], 39, 215, 32, ⲆᐃⲆ],
		[1, Δ[66], 37, 211, 35, 0],
		[1, Δ[66], ᐃⵠᐃⵠⵠ, 223, 38, 0],
		[ⵠΔΔ, Δ[66], ΔᐃΔᐃⵠ, 213, 38, ⵠⲆⵠ],
		[ⵠΔᐃ, Δ[66], ΔᐃᐃⲆΔ, 222, 44, 0],
		[1, Δ[66], 15, 208, 33, 0],
		[1, Δ[66], 15, 206, 23, ⵠⲆᐃ],
		[ⵠⵠᐃ, Δ[66], ⵠΔⵠᐃⵠ, 205, 28, ΔᐃΔ],
		[ᐃⲆⲆ, Δ[66], 14, 211, 23, 0],
		[1, Δ[66], ᐃⵠⲆⵠΔ, 201, 20, 0],
		[ⵠΔⲆ, Δ[66], 15, 198, 9, 0],
		[Δᐃᐃ, Δ[66], ⵠⲆᐃⵠⵠ, 199, ΔΔⵠᐃⲆ, ᐃΔΔ],
		[1, Δ[66], 12, 194, 15, 0],
		[1, Δ[66], 12, 197, 23, 0],
		[1, Δ[66], 37, 205, ⲆⵠΔΔΔᐃᐃ, ⵠᐃΔ],
		[1, Δ[66], 39, 204, 9, ⲆᐃⲆ],
		[ᐃⲆΔ, Δ[66], 40, 196, ⵠⲆⵠᐃⲆ, 0],
		[1, Δ[66], 40, 198, ⲆΔᐃΔΔ, ⵠᐃΔ],
		[1, Δ[66], 37, 192, 11, 0],
		[1, Δ[66], 37, 199, 24, Δⵠⵠ],
		[Δᐃᐃ, Δ[66], 37, 209, 24, ⵠᐃΔ],
		[1, Δ[66], 39, 209, 30, 0],
		[ⵠΔⲆ, Δ[66], 39, 204, 31, 0],
		[1, Δ[66], 39, 192, 24, Δⵠⵠ],
		[ⲆⵠⲆ, Δ[66], 40, 187, 23, 0],
		[Δᐃᐃ, Δ[66], 38, 187, 18, ⵠⲆⵠ],
		[1, Δ[66], 39, 192, ⲆᐃΔΔⵠ, ⵠⲆⵠ],
		[ᐃⲆΔ, Δ[66], 37, 185, 15, 0],
		[Δᐃᐃ, Δ[66], ΔΔΔⲆΔ, 188, ΔⲆΔⵠⲆ, 0],
		[ᐃⵠⵠ, Δ[66], 13, 185, 13, 0],
		[1, Δ[66], ᐃⲆᐃⲆΔ, 189, 9, ΔᐃΔ],
		[1, Δ[66], ⲆⵠⲆΔⵠ, 187, 22, 0],
		[1, Δ[66], 15, 180, ⵠⲆᐃΔᐃ, 0],
		[ⵠⵠᐃ, Δ[66], ⵠⲆⵠᐃⲆ, 177, ⲆⵠᐃΔΔΔᐃ, 0],
		[1, Δ[66], ⲆⲆᐃⵠΔⵠⵠ, 173, 9, 0],
		[1, Δ[66], 14, 171, 15, ⵠᐃΔ],
		[ᐃⲆΔ, Δ[66], 40, 182, 9, ⵠⲆᐃ],
		[ᐃⲆΔ, Δ[66], 39, 179, ⲆⲆⵠΔᐃ, ⵠᐃΔ],
		[1, Δ[66], 39, 175, ᐃⵠⲆⲆᐃ, 0],
		[1, Δ[66], 40, 173, ΔᐃᐃⲆΔ, 0],
		[ⲆΔᐃ, Δ[66], 37, 169, 11, 0],
		[ᐃⲆΔ, Δ[66], 37, 163, ᐃⲆᐃⲆᐃ, 0],
		[1, Δ[66], 38, 164, ⵠᐃⵠΔΔ, ⵠᐃΔ],
		[1, Δ[66], 39, 170, ⲆΔⲆΔᐃ, 0],
		[1, Δ[66], 40, 160, 17, ᐃΔΔ],
		[ⲆⵠⲆ, Δ[66], 40, 154, ᐃⵠᐃᐃᐃ, ⲆᐃⲆ],
		[1, Δ[66], 40, 165, 23, 0],
		[ⵠΔᐃ, Δ[66], 40, 150, Ⲇᐃᐃᐃᐃ, 0],
		[ⵠΔᐃ, Δ[66], 37, 155, 16, ⵠᐃΔ],
		[1, Δ[66], 39, 146, ΔⲆⲆΔΔ, 0],
		[ⲆΔᐃ, Δ[66], ᐃᐃΔᐃⲆ, 159, ΔⲆΔᐃΔ, 0],
		[1, Δ[66], ⵠΔᐃⲆⵠ, 151, 9, Δⵠⵠ],
		[1, Δ[66], ΔΔⲆΔΔ, 150, ΔΔⲆΔΔ, 0],
		[1, Δ[66], 15, 153, ᐃΔⵠⲆⲆ, ΔᐃΔ],
		[ⲆΔᐃ, Δ[66], ΔΔᐃⲆⲆⲆΔ, 161, 25, ⲆᐃⲆ],
		[1, Δ[66], ᐃⲆᐃⲆΔ, 169, 25, 0],
		[1, Δ[66], 15, 176, 25, ΔᐃΔ],
		[1, Δ[66], 12, 180, 29, 0],
		[ⲆⵠⲆ, Δ[66], ⵠᐃΔⵠᐃ, 188, 31, 0],
		[1, Δ[66], 14, 181, 36, ⵠᐃΔ],
		[ᐃⵠⵠ, Δ[66], 37, 186, 33, 0],
		[ⵠΔᐃ, Δ[66], 38, 183, 26, Δⵠⵠ],
		[1, Δ[66], 39, 177, 21, 0],
		[ᐃⲆⲆ, Δ[66], 40, 175, 31, ᐃΔΔ],
		[ⵠΔⲆ, Δ[66], 37, 176, 39, ⲆᐃⲆ],
		[ΔⵠⲆ, Δ[66], 37, 168, 34, ⵠⲆⵠ],
		[ᐃⲆΔ, Δ[66], 38, 162, 32, 0],
		[ⵠΔΔ, Δ[66], 38, 168, 45, ⵠⲆᐃ],
		[ᐃⲆΔ, Δ[66], 38, 173, 45, ⵠⲆⵠ],
		[Δᐃᐃ, Δ[66], 39, 160, 35, Δⵠⵠ],
		[ⵠΔΔ, Δ[66], 40, 161, 42, Δⵠⵠ],
		[1, Δ[66], 40, 170, 39, 0],
		[1, Δ[66], 40, 181, 43, 0],
		[ᐃⲆⲆ, Δ[66], 40, 156, 26, ⲆᐃⲆ],
		[1, Δ[66], 40, 150, 32, Δⵠⵠ],
		[1, Δ[66], 37, 159, 26, ⲆᐃⲆ],
		[ΔⵠⲆ, Δ[66], 37, 155, 40, ⵠᐃΔ],
		[ⵠⵠᐃ, Δ[66], 37, 154, 45, ⵠⲆⵠ],
		[ⵠΔⲆ, Δ[66], 39, 149, 45, Δⵠⵠ],
		[ⲆΔᐃ, Δ[66], 40, 150, 50, ⵠᐃΔ],
		[ⲆΔᐃ, Δ[66], 40, 160, 52, 0],
		[1, Δ[66], 37, 164, 52, 0],
		[1, Δ[66], 38, 168, 50, 0],
		[1, Δ[66], ⲆⵠⵠⲆⲆ, 176, 45, ⲆᐃⲆ],
		[1, Δ[66], ⵠᐃΔⵠᐃ, 167, 32, ⲆᐃⲆ],
		[1, Δ[66], 13, 158, 32, ΔᐃΔ],
		[1, Δ[66], ᐃⲆᐃⲆΔ, 149, 28, ⵠⲆᐃ],
		[ⵠΔⲆ, Δ[66], ⲆⵠⲆΔⵠ, 163, 30, Δⵠⵠ],
		[1, Δ[66], ⵠⲆⵠⲆΔᐃⵠ, 158, 39, ᐃΔΔ],
		[1, Δ[66], 12, 171, 43, 0],
		[ᐃⲆⲆ, Δ[66], ⵠⲆⵠᐃⲆ, 174, 36, 0],
		[1, Δ[66], ΔⲆΔᐃΔ, 151, 43, 0],
		[ⲆⵠⲆ, Δ[66], 13, 152, 48, ᐃΔΔ],
		[ᐃⲆⲆ, Δ[66], ⵠⵠⲆⵠⲆ, 164, 49, Δⵠⵠ],
		[1, Δ[66], 15, 149, 52, 0],
		[1, Δ[66], ⲆⵠⵠⲆⲆ, 174, 49, 0],
		[Δᐃᐃ, Δ[66], ΔᐃΔᐃⵠ, 183, 51, ⲆᐃⲆ],
		[1, Δ[66], 14, 186, 48, 0],
		[1, Δ[66], 37, 182, 48, ⲆᐃⲆ],
		[ⲆΔᐃ, Δ[66], 38, 187, 52, 0],
		[ⵠⵠᐃ, Δ[66], 39, 188, 43, ⵠⲆⵠ],
		[ⵠΔΔ, Δ[66], 37, 200, 38, 0],
		[1, Δ[66], 40, 194, 37, ⵠᐃΔ],
		[ⵠΔᐃ, Δ[66], 39, 199, 44, 0],
		[1, Δ[66], 38, 200, 49, 0],
		[1, Δ[66], 37, 196, 54, 0],
		[1, Δ[66], ᐃⲆⵠΔⵠ, 194, 40, 0],
		[ᐃⵠⵠ, Δ[66], 13, 202, 45, ⵠᐃΔ],
		[1, Δ[66], ⵠⲆⵠⲆΔᐃⵠ, 198, 47, 0],
		[ⲆΔᐃ, Δ[66], 15, 198, 55, ΔᐃΔ],
		[ⵠΔΔ, Δ[66], 15, 212, 54, ⵠⲆⵠ],
		[1, Δ[66], 15, 216, 63, ⲆᐃⲆ],
		[1, Δ[66], ΔΔⲆΔΔ, 209, 62, 0],
		[1, Δ[66], ᐃᐃΔᐃⲆ, 219, 60, 0],
		[ᐃⲆⲆ, Δ[66], ᐃⵠᐃⵠⵠ, 206, 56, 0],
		[ᐃⲆⲆ, Δ[66], 12, 218, 72, 0],
		[1, Δ[66], ᐃⲆⵠΔⵠ, 223, 67, ⲆᐃⲆ],
		[ᐃⲆⲆ, Δ[66], 12, 205, 64, 0],
		[1, Δ[66], ΔⲆΔᐃΔ, 193, 63, Δⵠⵠ],
		[1, Δ[66], 14, 216, 80, 0],
		[1, Δ[66], 14, 222, 87, 0],
		[ΔⵠⲆ, Δ[66], 38, 210, 53, ⲆᐃⲆ],
		[1, Δ[66], 37, 210, 47, 0],
		[ⵠΔΔ, Δ[66], 37, 200, 63, ᐃΔΔ],
		[ΔⵠⲆ, Δ[66], 37, 218, 62, 0],
		[ⲆⵠⲆ, Δ[66], 37, 222, 60, ⵠᐃΔ],
		[ᐃⵠⵠ, Δ[66], 37, 207, 70, 0],
		[1, Δ[66], 38, 203, 68, ᐃΔΔ],
		[1, Δ[66], 38, 195, 66, 0],
		[ΔⵠⲆ, Δ[66], 38, 218, 55, ΔᐃΔ],
		[ᐃⲆΔ, Δ[66], 38, 212, 61, 0],
		[1, Δ[66], 38, 222, 70, 0],
		[1, Δ[66], 38, 218, 70, ⵠⲆⵠ],
		[1, Δ[66], 40, 222, 81, ⵠᐃΔ],
		[1, Δ[66], 38, 214, 79, ⵠⲆⵠ],
		[ⵠΔᐃ, Δ[66], 39, 213, 83, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[66], 39, 207, 76, ⵠⲆⵠ],
		[1, Δ[66], 39, 208, 86, 0],
		[ⵠⵠᐃ, Δ[66], 39, 218, 87, ΔᐃΔ],
		[1, Δ[66], 39, 222, 93, 0],
		[1, Δ[66], 39, 216, 96, 0],
		[ᐃⲆⲆ, Δ[66], 39, 209, 94, 0],
		[1, Δ[66], 39, 201, 87, ⵠⲆᐃ],
		[ᐃⲆΔ, Δ[66], 39, 198, 82, ⵠⲆᐃ],
		[ᐃⲆⲆ, Δ[66], 39, 207, 99, ⲆᐃⲆ],
		[ⵠΔΔ, Δ[66], 39, 200, 97, 0],
		[1, Δ[66], 39, 202, 92, 0],
		[1, Δ[66], 37, 194, 97, 0],
		[1, Δ[66], 39, 204, 88, ⵠᐃΔ],
		[1, Δ[66], 39, 189, 90, 0],
		[ⲆΔᐃ, Δ[66], 39, 194, 81, 0],
		[1, Δ[66], 39, 188, 98, 0],
		[1, Δ[66], 37, 183, 91, 0],
		[ⵠⵠᐃ, Δ[66], 37, 186, 80, Δⵠⵠ],
		[1, Δ[66], 37, 191, 72, Δⵠⵠ],
		[ⵠΔᐃ, Δ[66], 38, 184, 77, 0],
		[ⲆⵠⲆ, Δ[66], 38, 180, 80, 0],
		[1, Δ[66], 39, 173, 75, ⵠᐃΔ],
		[ᐃⲆⲆ, Δ[66], 40, 178, 87, 0],
		[1, Δ[66], 40, 174, 94, 0],
		[1, Δ[66], 40, 192, 93, 0],
		[1, Δ[66], 40, 165, 92, ⵠᐃΔ],
		[ⲆΔᐃ, Δ[66], 37, 160, 89, Δⵠⵠ],
		[1, Δ[66], 38, 161, 85, 0],
		[1, Δ[66], 38, 164, 98, ⵠᐃΔ],
		[1, Δ[66], 38, 151, 99, 0],
		[1, Δ[66], 38, 151, 85, 0],
		[ᐃⲆΔ, Δ[66], 40, 148, 83, 0],
		[1, Δ[66], 40, 160, 77, 0],
		[1, Δ[66], 40, 167, 77, 0],
		[1, Δ[66], 40, 153, 69, ⵠᐃΔ],
		[ΔⵠⲆ, Δ[66], 40, 149, 74, 0],
		[1, Δ[66], 37, 161, 64, 0],
		[1, Δ[66], 37, 154, 61, ΔᐃΔ],
		[1, Δ[66], 39, 157, 55, 0],
		[1, Δ[66], 39, 174, 64, ΔᐃΔ],
		[1, Δ[66], 39, 175, 56, 0],
		[ΔⵠⲆ, Δ[66], 39, 149, 67, 0],
		[ᐃⵠⵠ, Δ[66], ΔΔΔⲆΔ, 218, 96, 0],
		[ⵠΔᐃ, Δ[66], 13, 212, 95, 0],
		[ⵠΔᐃ, Δ[66], ᐃⵠⲆⵠΔ, 204, 85, 0],
		[ᐃⲆⲆ, Δ[66], 15, 215, 85, ΔᐃΔ],
		[ΔⵠⲆ, Δ[66], ᐃᐃⵠᐃⵠ, 197, 97, ⵠⲆⵠ],
		[1, Δ[66], 12, 198, 87, 0],
		[1, Δ[66], 14, 196, 77, ⵠᐃΔ],
		[ⵠΔΔ, Δ[66], 13, 194, 86, 0],
		[1, Δ[66], ⵠⲆᐃⵠⵠ, 181, 84, 0],
		[ⲆΔᐃ, Δ[66], ΔΔⲆΔΔ, 184, 79, ᐃΔΔ],
		[1, Δ[66], 14, 188, 93, ΔᐃΔ],
		[ⵠΔᐃ, Δ[66], 13, 180, 87, ⵠⲆⵠ],
		[1, Δ[66], ΔΔᐃⲆⲆⲆΔ, 178, 96, 0],
		[1, Δ[66], 13, 163, 95, Δⵠⵠ],
		[ⵠΔΔ, Δ[66], 15, 172, 88, ᐃΔΔ],
		[1, Δ[66], 15, 176, 75, 0],
		[1, Δ[66], ⵠⵠⲆⵠⲆ, 172, 72, 0],
		[1, Δ[66], 14, 169, 82, 0],
		[ⲆΔᐃ, Δ[66], ΔΔᐃⲆⲆⲆΔ, 164, 78, ⵠᐃΔ],
		[ⲆⵠⲆ, Δ[66], ⵠΔᐃⲆⵠ, 158, 87, ᐃΔΔ],
		[ⲆΔᐃ, Δ[66], ⵠᐃΔⲆⲆ, 149, 86, ⲆᐃⲆ],
		[1, Δ[66], 15, 154, 91, 0],
		[1, Δ[66], 15, 160, 74, ⵠⲆⵠ],
		[ΔⵠⲆ, Δ[66], ⵠⵠⲆⵠⲆ, 152, 76, 0],
		[1, Δ[66], ᐃⲆᐃⲆΔ, 158, 63, 0],
		[ΔⵠⲆ, Δ[66], ⲆⲆᐃⵠΔⵠⵠ, 150, 60, ⲆᐃⲆ],
		[ⵠΔᐃ, Δ[66], 12, 169, 59, 0],
		[1, Δ[66], ⵠⵠᐃᐃΔ, 173, 61, ΔᐃΔ],
		[1, Δ[278], 1, 143, 104, ᐃⲆΔ],
		[Δᐃᐃ, Δ[278], 0, 141, 102, 1],
		[1, Δ[278], 3, 138, 102, ΔⵠⲆ],
		[ᐃⵠⵠ, Δ[278], ΔⲆᐃⲆ, 139, 102, ᐃⲆⲆ],
		[ᐃⵠⵠ, Δ[278], Δⵠᐃᐃ, 140, 102, 1],
		[1, Δ[278], 3, 143, 107, ⲆΔᐃ],
		[1, Δ[278], 0, 143, 106, 1],
		[ⵠΔⲆ, Δ[278], 2, 143, 105, ⵠΔΔ],
		[1, Δ[278], ⲆᐃᐃΔ, 142, 103, ⵠΔΔ],
		[1, Δ[278], 0, 142, 104, Δᐃᐃ],
		[ⵠΔⲆ, Δ[278], 2, 141, 103, ᐃⵠⵠ],
		[ⵠΔⲆ, Δ[278], Ⲇⵠᐃᐃ, 142, 105, ᐃⵠⵠ],
		[1, Δ[278], ᐃⲆᐃⲆ, 140, 103, ⲆⵠⲆ],
		[ⵠΔΔ, Δ[278], 3, 141, 104, 1],
		[1, Δ[526], 4, 151, 23, 1],
		[1, Δ[526], 4, 150, 22, 1],
		[ⵠΔΔ, Δ[526], Δᐃᐃ, 149, 21, 1],
		[ⲆⵠⲆ, Δ[526], 4, 148, 21, ⵠΔᐃ],
		[ᐃⲆΔ, Δ[526], 2, 147, ⲆⵠⵠΔⵠ, 1],
		[ᐃⲆΔ, Δ[526], ΔᐃΔⵠ, 147, 19, 1],
		[1, Δ[526], 5, 147, ⲆΔⵠΔᐃ, ᐃⲆΔ],
		[ⵠΔΔ, Δ[526], 1, 147, ᐃᐃᐃΔᐃ, 1],
		[1, Δ[526], 3, 144, 9, 1],
		[1, Δ[526], 5, 147, ΔᐃⵠΔⵠ, ⲆΔᐃ],
		[ᐃⲆⲆ, Δ[526], ΔⲆᐃⲆ, 147, 15, 1],
		[1, Δ[526], 4, 147, 14, ⵠΔᐃ],
		[ⵠⵠᐃ, Δ[526], 4, 145, ΔΔⵠⵠΔ, ᐃⲆΔ],
		[ΔⵠⲆ, Δ[526], ⵠⵠⲆⵠ, 145, 12, 1],
		[ⵠΔⲆ, Δ[526], 1, 146, ΔⵠⵠΔᐃ, 1],
		[1, Δ[526], ΔⲆᐃⲆ, 145, 13, 1],
		[1, Δ[526], Ⲇⵠᐃᐃ, 155, 25, 1],
		[1, Δ[526], ⵠⲆᐃ, 155, 24, ΔⵠⲆ],
		[ΔⵠⲆ, Δ[526], ᐃⲆᐃⲆ, 153, 26, ΔⵠⲆ],
		[ΔⵠⲆ, Δ[278], 0, 151, 24, 1],
		[1, Δ[278], ΔᐃΔ, 153, 22, ᐃⲆΔ],
		[1, Δ[278], ⲆΔⲆΔ, 152, 22, 1],
		[1, Δ[278], 3, 154, 22, ᐃⲆⲆ],
		[ⵠΔⲆ, Δ[278], 1, 157, 26, 1],
		[ⲆΔᐃ, Δ[278], 2, 157, 24, ⵠΔⲆ],
		[ⵠΔᐃ, Δ[278], 2, 156, 26, ⵠΔⲆ],
		[ⵠΔⲆ, Δ[278], Δᐃᐃⵠ, 154, 28, ᐃⵠⵠ],
		[ⵠΔᐃ, Δ[278], ⲆᐃᐃΔ, 151, 26, ⵠΔᐃ],
		[1, Δ[278], 2, 152, 25, ᐃⵠⵠ],
		[1, Δ[278], ᐃⵠΔⲆ, 151, 25, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 156, 27, 1],
		[ΔⵠⲆ, Δ[278], 2, 157, 23, 1],
		[Δᐃᐃ, Δ[278], 2, 157, 22, ᐃⲆⲆ],
		[1, Δ[278], 3, 150, 24, ΔⵠⲆ],
		[ⵠΔⲆ, Δ[278], ᐃⵠⲆⵠ, 150, 23, ⲆⵠⲆ],
		[1, Δ[66], 38, 155, 29, 0],
		[ᐃⲆΔ, Δ[66], 12, 157, 27, 0],
		[ᐃⵠⵠ, Δ[66], ⲆᐃΔⵠⵠⲆᐃ, 153, 29, ⵠⲆᐃ],
		[1, Δ[66], 15, 158, 23, 0],
		[1, Δ[66], 13, 156, 21, 0],
		[1, Δ[66], 13, 147, 36, ΔᐃΔ],
		[1, Δ[66], 13, 161, 56, ⵠᐃΔ],
		[1, Δ[66], ᐃΔΔΔⵠ, 147, 79, 0],
		[ΔⵠⲆ, Δ[66], 12, 157, 99, 0],
		[ⵠΔⲆ, Δ[66], 12, 172, 99, 0],
		[ⵠΔⲆ, Δ[526], 3, 143, 102, 1],
		[ⲆΔᐃ, Δ[526], ⲆⵠⵠⲆ, 149, 96, 1],
		[1, Δ[526], ⵠΔΔⵠ, 145, 102, Δᐃᐃ],
		[ⲆⵠⲆ, Δ[526], 1, 148, 97, ᐃⵠⵠ],
		[1, Δ[526], ⲆΔⲆⲆ, 148, 98, 1],
		[ⲆⵠⲆ, Δ[278], ᐃⲆᐃⲆ, 144, 104, 1],
		[1, Δ[278], ᐃⲆᐃⲆ, 144, 103, 1],
		[1, Δ[278], ⵠᐃⲆᐃ, 145, 103, 1],
		[1, Δ[278], ᐃⵠᐃⲆ, 145, 104, 1],
		[1, Δ[278], ᐃⵠᐃⲆ, 142, 101, 1],
		[1, Δ[278], 3, 143, 100, ⵠΔΔ],
		[1, Δ[278], ᐃⵠⲆⵠ, 141, 101, ⵠΔΔ],
		[1, Δ[278], 3, 142, ΔⲆΔΔΔ, 1],
		[ᐃⲆΔ, Δ[278], ⵠⲆᐃ, 141, 100, 1],
		[ⵠΔΔ, Δ[278], ᐃⵠΔⲆ, 140, 101, ⵠⵠᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 144, 105, ⵠΔⲆ],
		[Δᐃᐃ, Δ[278], ᐃⵠⲆⵠ, 146, 103, 1],
		[1, Δ[278], ΔⵠᐃⲆ, 146, 102, ⵠΔᐃ],
		[ᐃⲆⲆ, Δ[278], 3, 150, 95, ⵠΔⲆ],
		[1, Δ[278], 0, 150, 97, ⵠΔΔ],
		[1, Δ[278], 2, 151, 98, ᐃⲆⲆ],
		[1, Δ[278], ΔᐃΔ, 153, 97, ᐃⲆⲆ],
		[1, Δ[278], 3, 153, 96, ᐃⲆΔ],
		[1, Δ[278], 2, 149, 95, ⵠⵠᐃ],
		[1, "s", ⵠⲆᐃ, 213, 127, ⲆⵠⲆ],
		[ᐃⵠⵠ, Δ[218], ⵠΔⲆ, 214, 131, ⵠⲆᐃ],
		[1, Δ[218], ΔⵠⲆ, 207, 128, 0],
		[1, Δ[218], 0, 208, 127, ⵠⲆⵠ],
		[ⲆΔᐃ, "s", 1, 207, 132, ᐃⵠⵠ],
		[ΔⵠⲆ, "s", ΔⲆᐃⲆ, 208, 133, 1],
		[1, Δ[218], 0, 217, 132, ᐃΔΔ],
		[1, Δ[218], Δᐃᐃⵠ, 186, 158, ⲆᐃⲆ],
		[ᐃⲆΔ, Δ[218], 0, 184, 160, ᐃΔΔ],
		[1, "s", ⲆΔᐃ, 183, 156, ⲆⵠⲆ],
		[1, "s", 2, 186, 159, 1],
		[1, "p", Δⵠⵠ, 182, 157, ⲆΔᐃ],
		[ᐃⲆⲆ, "p", ⵠᐃΔ, 114, 205, ᐃⲆⲆ],
		[1, Δ[218], ⵠΔΔ, 117, 204, 0],
		[ⲆΔᐃ, Δ[218], 0, 117, 205, Δⵠⵠ],
		[1, Δ[218], ΔⲆᐃⲆ, 112, 204, ΔᐃΔ],
		[ᐃⵠⵠ, "s", 2, 114, 207, Δᐃᐃ],
		[ᐃⵠⵠ, "s", Δⵠᐃᐃ, 115, 204, ΔⵠⲆ],
		[ⲆⵠⲆ, Δ[218], 2, 122, 151, 0],
		[ᐃⲆΔ, Δ[218], ⲆⵠⲆ, 123, 150, Δⵠⵠ],
		[1, Δ[218], 1, 117, 151, 0],
		[ⵠⵠᐃ, "s", 0, 118, 150, ᐃⲆⲆ],
		[ⵠⵠᐃ, "s", ⲆΔᐃ, 122, 152, 1],
		[1, Δ[218], 2, 156, 130, 0],
		[ⵠⵠᐃ, Δ[218], Δᐃᐃ, 154, 127, 0],
		[ⲆΔᐃ, "s", 0, 153, 128, ⵠΔΔ],
		[1, "s", ᐃⵠΔⲆ, 152, 130, 1],
		[ⵠΔᐃ, "p", 0, 123, 65, 1],
		[1, Δ[218], 2, 125, 62, 0],
		[1, Δ[218], 1, 124, 62, 0],
		[ⵠΔⲆ, Δ[218], 0, 120, 65, ⵠⲆⵠ],
		[1, "s", ⲆΔᐃ, 125, 63, 1],
		[1, "s", 1, 121, 64, 1],
		[1, "s", 2, 122, 62, 1],
		[1, Δ[278], ΔᐃΔ, 140, 106, ΔⵠⲆ],
		[1, Δ[278], ⲆⲆΔΔ, 144, 106, Δᐃᐃ],
		[1, Δ[278], Δᐃᐃⵠ, 145, 105, ⵠΔⲆ],
		[1, Δ[278], 2, 144, 107, 1],
		[1, Δ[278], 2, 141, 106, ⵠΔΔ],
		[1, Δ[278], ᐃⵠΔⲆ, 141, 105, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 140, 105, ᐃⵠⵠ],
		[1, Δ[278], 2, 140, 104, ᐃⲆΔ],
		[ᐃⵠⵠ, Δ[278], ⵠΔΔ, 138, 103, ⲆⵠⲆ],
		[1, Δ[278], 0, 139, 104, 1],
		[1, Δ[278], 2, 139, 103, ᐃⵠⵠ],
		[ⵠΔᐃ, Δ[278], Δⵠᐃᐃ, 139, 105, ᐃⵠⵠ],
		[ⵠΔᐃ, Δ[278], ΔⲆᐃⲆ, 142, 106, ᐃⵠⵠ],
		[ⲆΔᐃ, Δ[278], 2, 142, 107, 1],
		[1, Δ[278], Δⵠᐃᐃ, 139, 101, 1],
		[1, Δ[66], 19, 27, 264, Δⵠⵠ],
		[1, Δ[526], 4, 147, 99, 1],
		[1, Δ[526], 1, 146, 100, ⲆⵠⲆ],
		[1, Δ[526], 4, 145, 101, 1],
		[ⵠΔᐃ, Δ[278], 1, 215, 47, 1],
		[ᐃⵠⵠ, Δ[278], ⵠΔᐃⵠ, 216, 47, ᐃⲆⲆ],
		[ⵠⵠᐃ, Δ[278], Δⵠᐃᐃ, 215, 48, ᐃⲆⲆ],
		[ᐃⲆΔ, Δ[526], ᐃᐃΔΔ, 214, 45, Δᐃᐃ],
		[ᐃⵠⵠ, Δ[526], ᐃⵠⲆⲆ, 215, 45, 1],
		[1, Δ[526], ΔᐃΔ, 216, 46, ⲆⵠⲆ],
		[1, Δ[526], 4, 216, 48, ⵠΔΔ],
		[1, Δ[526], ᐃⵠⲆⲆ, 216, 49, 1],
		[1, Δ[526], ᐃⵠⲆⲆ, 217, 50, ⵠΔΔ],
		[ΔⵠⲆ, Δ[526], ᐃⵠⲆⵠ, 214, 49, 1],
		[1, Δ[526], ᐃⵠⲆⲆ, 211, 45, 1],
		[ΔⵠⲆ, Δ[526], 3, 213, 47, ⵠⵠᐃ],
		[ᐃⲆΔ, Δ[278], 2, 224, 48, 1],
		[1, Δ[218], Δⵠᐃᐃ, 111, 243, ⵠᐃΔ],
		[1, Δ[218], ⵠΔᐃ, 108, 246, 0],
		[ᐃⲆΔ, "s", 1, 110, 243, 1],
		[ⵠⵠᐃ, "s", 0, 108, 245, Δᐃᐃ],
		[Δᐃᐃ, "s", Δⵠⵠ, 121, 276, ΔⵠⲆ],
		[1, Δ[218], ⲆⲆΔΔ, 122, 277, 0],
		[ⵠΔΔ, Δ[218], Δᐃᐃⵠ, 117, 276, ⵠⲆⵠ],
		[Δᐃᐃ, Δ[218], ᐃⲆΔ, 118, 277, Δⵠⵠ],
		[1, "s", 1, 118, 278, ΔⵠⲆ],
		[ᐃⵠⵠ, Δ[278], ⵠΔᐃⵠ, 66, 16, ⵠΔΔ],
		[1, Δ[278], Ⲇⵠᐃᐃ, 67, ᐃΔⲆⲆⲆ, ⲆⵠⲆ],
		[1, Δ[278], ⲆᐃⲆ, 67, ΔᐃⲆⵠΔᐃᐃ, ⵠⵠᐃ],
		[1, Δ[278], 2, 66, ᐃⲆΔΔⲆ, 1],
		[ⵠⵠᐃ, Δ[278], 3, 66, 18, 1],
		[ⵠΔᐃ, Δ[278], ᐃΔᐃⲆ, 68, ⵠᐃⲆⲆⲆ, 1],
		[ᐃⲆΔ, Δ[278], 0, 36, ΔᐃⵠΔⵠ, Δᐃᐃ],
		[ⵠΔᐃ, Δ[278], ⲆⲆΔΔ, 36, ⵠᐃⲆⲆⲆ, ⵠΔⲆ],
		[ⵠΔᐃ, Δ[278], ⲆⲆΔΔ, 36, ⲆΔᐃΔΔ, ⵠΔᐃ],
		[1, Δ[278], ᐃⲆᐃⲆ, 35, ᐃⲆΔΔⲆ, ΔⵠⲆ],
		[Δᐃᐃ, Δ[278], 3, 36, ΔⵠΔΔΔ, ᐃⲆⲆ],
		[1, Δ[278], 3, 35, 18, 1],
		[ᐃⲆⲆ, Δ[278], ⲆⲆΔΔ, 66, 30, 1],
		[ⵠΔᐃ, Δ[278], ᐃⵠΔⲆ, 66, 23, ⵠⵠᐃ],
		[1, Δ[278], ⵠᐃⲆᐃ, 66, 22, ΔⵠⲆ],
		[1, Δ[278], 3, 66, 31, 1],
		[ΔⵠⲆ, Δ[278], 2, 36, 30, Δᐃᐃ],
		[ᐃⵠⵠ, Δ[278], ⲆⲆΔΔ, 36, 23, ⵠⵠᐃ],
		[ⵠΔΔ, Δ[278], 1, 36, 22, ΔⵠⲆ],
		[Δᐃᐃ, Δ[278], 2, 36, 31, 1],
		[1, Δ[278], 3, 42, ΔᐃΔᐃⵠ, ᐃⵠⵠ],
		[1, Δ[278], ᐃΔΔ, 43, ᐃΔΔΔⵠ, ΔⵠⲆ],
		[1, Δ[278], ⲆⲆᐃⲆ, 44, ΔᐃΔᐃⵠ, ⵠΔΔ],
		[1, Δ[278], 3, 42, ΔⵠΔΔᐃ, 1],
		[ⵠΔΔ, Δ[278], ᐃⲆᐃⲆ, 41, 16, 1],
		[ⲆΔᐃ, Δ[278], 3, 40, 16, ⵠⵠᐃ],
		[ᐃⵠⵠ, Δ[278], 0, 42, ΔⲆⵠⵠⵠ, 1],
		[ⵠΔᐃ, Δ[278], ᐃⵠᐃⲆ, 43, ᐃΔⵠⲆⲆ, ⵠΔΔ],
		[1, Δ[278], 3, 44, 19, 1],
		[1, Δ[278], 3, 45, ΔⲆᐃΔⲆ, Δᐃᐃ],
		[1, Δ[278], 2, 46, ΔⲆⵠⵠⵠ, ⵠΔΔ],
		[ⲆⵠⲆ, Δ[278], ⵠⲆⵠ, 43, 22, ⵠⵠᐃ],
		[ⲆⵠⲆ, Δ[278], Δᐃᐃⵠ, 42, 22, ΔⵠⲆ],
		[1, Δ[278], ᐃⵠⵠ, 41, 22, ᐃⲆⲆ],
		[1, Δ[278], 0, 40, 22, ⵠⵠᐃ],
		[1, Δ[278], 3, 39, 17, ⵠⵠᐃ],
		[Δᐃᐃ, Δ[278], 1, 44, 26, ⲆΔᐃ],
		[ⵠⵠᐃ, Δ[278], 2, 45, 26, 1],
		[1, Δ[278], ΔⵠⲆⲆ, 46, 26, 1],
		[1, Δ[278], 0, 47, 26, ⲆΔᐃ],
		[ⵠΔᐃ, Δ[278], 2, 48, 26, 1],
		[1, Δ[278], Ⲇⵠᐃᐃ, 47, 25, ⵠΔΔ],
		[ⵠⵠᐃ, Δ[278], 3, 43, 27, ΔⵠⲆ],
		[ⵠΔΔ, Δ[278], ⵠΔΔ, 49, 32, 1],
		[1, Δ[278], Δᐃᐃⵠ, 50, 32, 1],
		[ᐃⲆΔ, Δ[278], 2, 51, 32, ⲆⵠⲆ],
		[ⵠΔᐃ, Δ[278], ᐃⵠΔⲆ, 52, 32, 1],
		[1, "d", 0, 51, 29, ⲆⵠⲆ],
		[ΔⵠⲆ, "d", ᐃⵠⵠ, 53, 29, ᐃⲆⲆ],
		[1, "d", ⲆΔᐃ, 49, 29, ᐃⲆⲆ],
		[1, Δ[278], Ⲇⵠᐃᐃ, 55, 31, ᐃⲆΔ],
		[ⵠΔΔ, Δ[278], 3, 54, 32, 1],
		[ⵠΔᐃ, Δ[278], ⵠᐃⲆᐃ, 47, 31, ⲆΔᐃ],
		[ⲆΔᐃ, Δ[278], ΔⵠⲆⲆ, 48, 32, ⵠΔΔ],
		[Δᐃᐃ, Δ[278], 0, 51, 33, Δᐃᐃ],
		[ⵠⵠᐃ, Δ[278], 2, 52, 33, 1],
		[ᐃⲆΔ, Δ[278], 2, 50, 33, 1],
		[ⵠΔᐃ, Δ[278], 3, 56, 30, ⵠⵠᐃ],
		[ⲆⵠⲆ, Δ[278], 3, 56, 31, ᐃⲆⲆ],
		[ⵠⵠᐃ, Δ[278], ᐃΔᐃⲆ, 46, 30, ᐃⵠⵠ],
		[1, Δ[278], ΔⵠᐃⲆ, 46, 31, ⵠΔⲆ],
		[1, Δ[278], ⲆΔᐃ, 53, 33, ⲆΔᐃ],
		[ⵠΔᐃ, Δ[278], 2, 49, 33, 1],
		[1, Δ[278], 2, 53, 32, ⵠⵠᐃ],
		[1, Δ[278], ⵠⲆⵠ, 55, 32, 1],
		[ᐃⵠⵠ, Δ[278], ⲆᐃⲆ, 47, 32, 1],
		[1, "d", 1, 54, 35, ⵠΔⲆ],
		[1, Δ[106], ⵠΔᐃⵠ, 35, 15, 0],
		[1, Δ[106], ⲆᐃᐃΔ, 36, ᐃⲆⵠΔⵠ, ΔᐃΔ],
		[1, Δ[106], ⲆⲆᐃⲆ, 67, ⵠⲆᐃⵠⵠ, ⵠⲆⵠ],
		[1, Δ[278], ᐃΔᐃⲆ, 60, 13, 1],
		[1, Δ[278], 2, 59, ⵠΔⵠᐃⵠ, ⲆΔᐃ],
		[ᐃⲆⲆ, Δ[278], 1, 58, 13, ⲆΔᐃ],
		[Δᐃᐃ, Δ[278], 3, 62, Ⲇᐃⵠᐃᐃ, 1],
		[1, Δ[278], 0, 61, 16, ᐃⲆΔ],
		[ⵠⵠᐃ, Δ[278], 3, 60, ΔⲆⲆⵠΔ, ⵠΔᐃ],
		[ⲆⵠⲆ, Δ[278], 3, 63, 17, 1],
		[ⲆⵠⲆ, Δ[278], ⲆⲆᐃⲆ, 60, ⲆΔᐃΔⲆ, 1],
		[ΔⵠⲆ, Δ[278], ⲆΔᐃ, 59, 19, 1],
		[1, Δ[278], 3, 58, ᐃᐃΔΔᐃ, 1],
		[ᐃⵠⵠ, Δ[278], 2, 57, 19, ⵠⵠᐃ],
		[ⲆΔᐃ, Δ[278], 2, 56, 19, 1],
		[1, Δ[278], ⲆᐃⲆ, 55, ΔᐃΔΔᐃΔⲆ, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 55, 17, ⵠΔᐃ],
		[1, Δ[278], Δⵠᐃᐃ, 63, 23, 1],
		[ΔⵠⲆ, Δ[278], 0, 62, 22, ⲆΔᐃ],
		[ⵠⵠᐃ, Δ[278], ⵠΔᐃⵠ, 61, 22, Δᐃᐃ],
		[ᐃⲆⲆ, Δ[278], ᐃⵠⵠ, 60, 22, ⵠⵠᐃ],
		[1, Δ[278], 0, 59, 22, ᐃⵠⵠ],
		[ⵠΔⲆ, Δ[278], 2, 54, 26, 1],
		[ⵠΔᐃ, Δ[278], ⲆⲆᐃⲆ, 55, 26, ᐃⲆⲆ],
		[1, Δ[278], ⲆⲆΔΔ, 56, 26, 1],
		[1, Δ[278], ᐃⲆΔ, 57, 26, 1],
		[Δᐃᐃ, Δ[278], ΔⲆᐃⲆ, 58, 26, 1],
		[1, Δ[278], 2, 59, 27, 1],
		[1, Δ[278], ⲆⲆΔΔ, 68, ᐃⲆⲆᐃΔ, 1],
		[Δᐃᐃ, Δ[278], ⲆᐃᐃΔ, 68, ⵠᐃⲆᐃᐃ, ⵠΔΔ],
		[1, Δ[278], ΔⵠᐃⲆ, 69, ⵠᐃⲆᐃᐃ, 1],
		[ⲆⵠⲆ, Δ[278], 3, 70, 15, ᐃⵠⵠ],
		[1, Δ[278], 3, 70, 14, ᐃⲆΔ],
		[ᐃⵠⵠ, Δ[278], ⵠΔΔ, 69, 14, ⲆΔᐃ],
		[1, Δ[278], 1, 69, ᐃⲆⲆᐃΔ, 1],
		[ⵠΔⲆ, Δ[278], 2, 71, ᐃΔΔΔⵠ, 1],
		[1, Δ[278], 2, 71, 14, 1],
		[ᐃⲆΔ, Δ[278], 3, 72, 13, Δᐃᐃ],
		[1, Δ[278], 3, 70, ΔⲆᐃΔΔ, ⲆΔᐃ],
		[1, Δ[278], ⵠᐃⲆᐃ, 71, 8, ⵠΔᐃ],
		[ⲆΔᐃ, Δ[278], 2, 72, ⲆⲆΔᐃΔ, ⵠΔΔ],
		[1, Δ[278], ⵠⲆⵠ, 73, 8, 1],
		[1, Δ[278], 3, 74, ᐃⵠⲆⲆᐃ, ᐃⲆⲆ],
		[1, Δ[278], ᐃⵠⲆⵠ, 74, 8, ⲆΔᐃ],
		[1, Δ[278], 0, 75, 8, ⵠΔΔ],
		[ⵠΔΔ, Δ[278], ΔⵠᐃⲆ, 76, ΔⲆΔⲆⲆ, 1],
		[1, Δ[278], ᐃΔᐃⲆ, 75, ⲆᐃⲆᐃⲆ, ᐃⵠⵠ],
		[ᐃⵠⵠ, Δ[278], 3, 75, ΔⲆⲆΔΔ, ⲆΔᐃ],
		[1, Δ[278], 0, 76, ΔⲆⲆΔΔ, ⲆΔᐃ],
		[1, Δ[278], ⵠᐃΔ, 76, ΔⵠΔΔᐃ, ⵠΔΔ],
		[1, Δ[278], 3, 76, 15, 1],
		[1, Δ[278], 3, 75, ΔΔⵠᐃⲆ, 1],
		[ᐃⲆⲆ, Δ[278], ⲆⲆᐃⲆ, 77, 11, 1],
		[ⵠⵠᐃ, Δ[278], ⲆⲆΔΔ, 77, 14, ᐃⲆⲆ],
		[ⵠΔΔ, Δ[278], 3, 77, 12, ⵠΔᐃ],
		[1, Δ[278], ᐃⵠⲆⵠ, 77, ⵠⵠᐃᐃΔ, 1],
		[1, Δ[278], 3, 77, 15, ⵠⵠᐃ],
		[ⲆΔᐃ, Δ[278], Δⵠⵠ, 74, 18, 1],
		[1, Δ[278], ⲆΔᐃ, 75, ᐃⲆΔΔⲆ, 1],
		[ⵠΔⲆ, Δ[278], ΔⲆᐃⲆ, 74, 17, 1],
		[1, Δ[278], ᐃⵠⲆⵠ, 73, ᐃᐃΔΔᐃ, 1],
		[ᐃⵠⵠ, Δ[278], 3, 67, 23, 1],
		[ⵠΔᐃ, Δ[278], 0, 68, 23, 1],
		[1, Δ[278], ᐃΔΔ, 72, 20, ΔⵠⲆ],
		[ⵠΔᐃ, Δ[278], Δᐃᐃⵠ, 73, 20, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 74, ᐃᐃⵠᐃⲆ, 1],
		[ⵠΔΔ, Δ[278], ⲆⲆΔΔ, 74, 36, ᐃⲆΔ],
		[ⵠⵠᐃ, Δ[278], Δⵠᐃᐃ, 77, 27, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 76, 26, ᐃⲆΔ],
		[1, Δ[278], 2, 75, 26, 1],
		[ⵠΔᐃ, Δ[278], Δⵠⵠ, 74, 26, 1],
		[1, Δ[278], ⲆⲆᐃⲆ, 75, 25, ᐃⵠⵠ],
		[ΔⵠⲆ, Δ[278], ⲆᐃⲆ, 76, 25, 1],
		[1, Δ[278], 1, 77, 23, 1],
		[1, Δ[278], 2, 77, 16, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 76, 17, ᐃⵠⵠ],
		[1, Δ[278], 2, 76, 24, ⵠΔⲆ],
		[ⲆΔᐃ, Δ[278], 2, 77, 24, ⵠΔΔ],
		[1, Δ[278], ⵠΔᐃⵠ, 77, 25, ⵠΔⲆ],
		[ⵠΔⲆ, Δ[278], ᐃⵠΔⲆ, 77, 26, 1],
		[ⵠΔⲆ, Δ[278], 1, 75, 27, 1],
		[1, Δ[278], 3, 76, 27, ⵠΔᐃ],
		[ΔⵠⲆ, Δ[278], ΔⲆᐃⲆ, 67, 24, ⲆΔᐃ],
		[1, Δ[278], 2, 66, 24, 1],
		[Δᐃᐃ, Δ[278], 2, 73, 26, ⵠⵠᐃ],
		[1, Δ[278], 2, 74, 27, 1],
		[1, Δ[278], Δᐃᐃⵠ, 74, 25, ⲆΔᐃ],
		[1, Δ[278], ᐃⵠΔⲆ, 66, ᐃᐃΔΔᐃ, ΔⵠⲆ],
		[1, Δ[278], 2, 66, 20, 1],
		[ⲆⵠⲆ, Δ[278], ⲆⲆΔΔ, 66, 21, ΔⵠⲆ],
		[ᐃⵠⵠ, Δ[278], 2, 67, 18, 1],
		[1, Δ[278], 2, 67, 22, 1],
		[1, Δ[278], Δⵠⵠ, 77, 36, ᐃⵠⵠ],
		[ⵠⵠᐃ, Δ[278], ⵠⲆᐃ, 77, 32, 1],
		[1, Δ[278], 1, 75, 35, 1],
		[ⵠⵠᐃ, Δ[278], ᐃⵠΔⲆ, 75, 36, ⲆΔᐃ],
		[ᐃⵠⵠ, Δ[278], ⵠΔᐃⵠ, 76, 36, 1],
		[1, Δ[278], 2, 77, 35, ᐃⲆΔ],
		[ⵠΔΔ, Δ[278], 2, 77, 34, ⲆⵠⲆ],
		[1, Δ[278], 2, 76, 35, 1],
		[1, Δ[278], Δⵠᐃᐃ, 77, 33, ⵠⵠᐃ],
		[1, Δ[278], ΔⲆᐃⲆ, 77, 31, 1],
		[1, Δ[278], ᐃΔΔ, 77, 29, 1],
		[1, Δ[278], 0, 71, 32, 1],
		[ᐃⲆⲆ, Δ[278], 0, 76, 34, ΔⵠⲆ],
		[1, Δ[278], 2, 77, 30, ⲆΔᐃ],
		[ΔⵠⲆ, Δ[278], ⵠΔᐃⵠ, 77, 28, 1],
		[ⵠΔΔ, Δ[278], 2, 76, 28, 1],
		[1, Δ[278], 2, 75, 28, 1],
		[ΔⵠⲆ, Δ[278], ΔⲆᐃⲆ, 76, 29, 1],
		[1, Δ[278], 2, 76, 33, 1],
		[1, Δ[278], 2, 70, 32, 1],
		[ᐃⵠⵠ, Δ[278], ⲆⲆᐃⲆ, 69, 31, 1],
		[ΔⵠⲆ, Δ[278], 0, 68, 31, ᐃⲆⲆ],
		[1, Δ[278], ⵠΔᐃⵠ, 67, 31, 1],
		[ⵠΔᐃ, Δ[278], ⲆⲆᐃⲆ, 67, 30, 1],
		[ⵠⵠᐃ, Δ[278], 2, 69, 32, ⵠΔᐃ],
		[ⲆΔᐃ, Δ[278], 1, 67, 32, ᐃⲆⲆ],
		[1, Δ[278], 2, 68, 32, ⵠΔᐃ],
		[1, Δ[278], Δᐃᐃⵠ, 66, 32, ⵠΔΔ],
		[ᐃⲆΔ, Δ[278], 2, 66, 33, 1],
		[ⵠΔΔ, Δ[278], 2, 67, 33, ⲆΔᐃ],
		[ⵠΔΔ, Δ[278], ⲆᐃᐃΔ, 70, 33, 1],
		[ⵠⵠᐃ, Δ[278], ⲆⲆᐃⲆ, 69, 33, Δᐃᐃ],
		[1, Δ[278], ⲆⲆΔΔ, 68, 33, Δᐃᐃ],
		[1, Δ[278], 0, 68, 34, ᐃⲆⲆ],
		[1, Δ[278], Δᐃᐃ, 66, 35, 1],
		[1, Δ[278], 2, 67, 34, 1],
		[ᐃⲆΔ, Δ[278], 2, 66, 34, 1],
		[1, Δ[278], 2, 65, 35, 1],
		[ⵠⵠᐃ, Δ[278], ᐃⵠΔⲆ, 64, 36, 1],
		[ⵠΔΔ, Δ[278], ΔⲆᐃⲆ, 65, 36, ⲆΔᐃ],
		[1, Δ[278], ⲆⲆᐃⲆ, 67, 35, ᐃⵠⵠ],
		[1, Δ[278], ⵠΔᐃⵠ, 66, 36, 1],
		[1, Δ[278], Δᐃᐃⵠ, 69, 34, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 68, 35, 1],
		[1, Δ[278], Δⵠᐃᐃ, 76, ⵠᐃΔΔⲆ, 1],
		[1, Δ[278], 2, 77, 9, 1],
		[ⵠΔᐃ, Δ[278], 2, 77, ΔⲆΔⲆⲆ, ᐃⵠⵠ],
		[1, Δ[278], 2, 77, ΔⲆⲆΔΔ, 1],
		[ⲆΔᐃ, Δ[278], 2, 78, ΔΔⲆⵠⵠ, ᐃⵠⵠ],
		[1, Δ[278], ⲆⲆᐃⲆ, 78, 9, 1],
		[ᐃⵠⵠ, Δ[278], ᐃⵠΔⲆ, 78, ⲆΔⲆᐃⵠ, 1],
		[ⵠΔᐃ, Δ[278], ⲆⲆᐃⲆ, 78, ⵠⵠᐃΔΔ, ⲆⵠⲆ],
		[1, Δ[278], ΔⲆᐃⲆ, 78, 12, 1],
		[1, Δ[278], 2, 78, ΔᐃΔᐃⵠ, 1],
		[ⵠΔΔ, Δ[278], ⲆᐃⲆ, 79, 9, ⲆΔᐃ],
		[1, Δ[278], 1, 79, 11, 1],
		[ΔⵠⲆ, Δ[278], ᐃⵠᐃⲆ, 79, 8, 1],
		[1, Δ[278], ᐃⲆᐃⲆ, 79, 10, 1],
		[1, Δ[278], 3, 79, ⵠⲆⵠᐃⲆ, Δᐃᐃ],
		[1, Δ[278], ΔⵠᐃⲆ, 80, 8, ⵠⵠᐃ],
		[1, Δ[278], ΔⵠⲆ, 80, ⲆΔⲆᐃⵠ, ΔⵠⲆ],
		[ⲆⵠⲆ, Δ[278], 2, 80, 9, ⲆⵠⲆ],
		[1, Δ[278], 2, 80, Ⲇⵠᐃⵠⵠ, ⵠΔΔ],
		[1, Δ[278], ᐃⵠΔⲆ, 81, 8, ⵠΔⲆ],
		[ⵠⵠᐃ, Δ[278], ⲆⲆΔΔ, 81, 9, 1],
		[Δᐃᐃ, Δ[278], 2, 81, 10, 1],
		[ⵠⵠᐃ, Δ[278], ⲆᐃᐃΔ, 78, ⲆⲆᐃⵠΔⵠⵠ, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 79, ⲆⲆⵠΔᐃ, ᐃⵠⵠ],
		[ᐃⵠⵠ, Δ[278], Δⵠᐃᐃ, 78, ΔⲆΔⵠⲆ, ⲆⵠⲆ],
		[1, Δ[278], ᐃⵠΔⲆ, 80, 12, 1],
		[1, Δ[278], ⵠᐃΔ, 79, ⲆⵠᐃΔΔΔᐃ, 1],
		[1, Δ[278], 0, 82, 9, 1],
		[1, Δ[278], 2, 82, ΔⲆᐃΔΔ, ⵠⵠᐃ],
		[1, Δ[278], 2, 82, 10, 1],
		[1, Δ[278], 2, 81, ⵠⵠᐃΔΔ, ⵠΔⲆ],
		[1, Δ[278], ᐃⵠⲆⵠ, 80, 13, ᐃⲆⲆ],
		[1, Δ[278], ⵠΔΔ, 78, 30, 1],
		[ᐃⵠⵠ, Δ[278], Δᐃᐃ, 78, 34, 1],
		[1, Δ[278], ⵠΔΔ, 78, 27, ⲆⵠⲆ],
		[1, Δ[278], 0, 78, 25, ⵠΔⲆ],
		[1, Δ[278], 0, 79, 29, ᐃⵠⵠ],
		[1, Δ[278], ⵠᐃΔ, 79, 32, Δᐃᐃ],
		[1, Δ[278], 0, 79, 35, Δᐃᐃ],
		[1, Δ[278], ⲆⲆᐃⲆ, 78, 35, ⵠΔⲆ],
		[ⲆⵠⲆ, Δ[278], ΔⲆᐃⲆ, 78, 36, 1],
		[ᐃⵠⵠ, Δ[278], 2, 79, 34, 1],
		[ΔⵠⲆ, Δ[278], ⲆᐃᐃΔ, 78, 33, ⲆⵠⲆ],
		[ΔⵠⲆ, Δ[278], 2, 79, 33, 1],
		[Δᐃᐃ, Δ[278], 2, 78, 32, 1],
		[1, Δ[278], 2, 78, 31, 1],
		[1, Δ[278], 2, 79, 31, ᐃⲆⲆ],
		[1, Δ[278], Δⵠᐃᐃ, 79, 30, 1],
		[1, Δ[278], 2, 78, 29, ⲆⵠⲆ],
		[1, Δ[278], 2, 78, 28, 1],
		[ᐃⲆΔ, Δ[278], ⲆⲆΔΔ, 79, 28, ⵠⵠᐃ],
		[ⲆⵠⲆ, Δ[278], ⵠΔᐃⵠ, 79, 27, ⵠΔΔ],
		[1, Δ[278], 2, 78, 26, 1],
		[ⲆⵠⲆ, Δ[278], ⲆⲆΔΔ, 79, 26, 1],
		[1, Δ[278], 2, 78, 24, 1],
		[ⵠΔⲆ, Δ[278], 2, 80, 34, Δᐃᐃ],
		[1, Δ[278], 2, 80, 33, 1],
		[1, Δ[278], 2, 80, 31, ⵠΔΔ],
		[ΔⵠⲆ, Δ[278], ⲆᐃᐃΔ, 80, 30, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 80, 32, 1],
		[Δᐃᐃ, Δ[278], 2, 80, 29, 1],
		[ᐃⲆⲆ, Δ[278], ⲆⲆΔΔ, 80, 28, ᐃⲆⲆ],
		[1, Δ[278], Δᐃᐃⵠ, 80, 27, ΔⵠⲆ],
		[1, Δ[278], ᐃΔΔ, 81, 30, 1],
		[1, Δ[278], ⵠΔᐃ, 81, 32, ⲆΔᐃ],
		[ΔⵠⲆ, Δ[278], ⵠΔⲆ, 81, 28, ⵠΔᐃ],
		[1, Δ[278], 2, 81, 29, ΔⵠⲆ],
		[ΔⵠⲆ, Δ[278], 2, 81, 31, Δᐃᐃ],
		[ⲆΔᐃ, Δ[278], ⲆⲆᐃⲆ, 81, 33, ⲆΔᐃ],
		[ⵠΔⲆ, Δ[278], ⵠΔᐃⵠ, 82, 30, ⵠⵠᐃ],
		[1, Δ[278], ΔⲆᐃⲆ, 82, 31, 1],
		[ⵠΔᐃ, Δ[278], ΔⲆᐃⲆ, 82, 32, 1],
		[1, Δ[278], 0, 37, 36, 1],
		[1, Δ[278], ⲆⲆᐃⲆ, 38, 36, 1],
		[1, Δ[278], ⲆⲆᐃⲆ, 37, 35, 1],
		[ⵠΔⲆ, Δ[278], ΔⲆᐃⲆ, 36, 36, ᐃⲆⲆ],
		[ΔⵠⲆ, Δ[278], ᐃⵠΔⲆ, 34, 35, 1],
		[1, Δ[278], 2, 35, 35, ΔⵠⲆ],
		[ᐃⵠⵠ, Δ[278], ᐃⵠΔⲆ, 36, 35, 1],
		[ᐃⵠⵠ, Δ[278], 0, 33, 34, ᐃⲆΔ],
		[1, Δ[278], 1, 35, 34, 1],
		[1, Δ[278], 2, 36, 34, ᐃⵠⵠ],
		[1, Δ[278], 2, 34, 34, ⵠΔⲆ],
		[1, Δ[278], 2, 36, 33, 1],
		[ⵠΔⲆ, Δ[278], 2, 35, 33, ᐃⲆΔ],
		[Δᐃᐃ, Δ[278], 2, 34, 33, ⲆⵠⲆ],
		[1, Δ[278], 2, 33, 33, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 31, 32, 1],
		[1, Δ[278], ⵠΔᐃ, 36, 32, 1],
		[1, Δ[278], ⵠΔⲆ, 32, 32, ᐃⲆⲆ],
		[ⲆΔᐃ, Δ[278], 2, 35, 32, 1],
		[ⵠΔΔ, Δ[278], 2, 33, 32, 1],
		[ⵠΔΔ, Δ[278], ⵠΔᐃⵠ, 32, 33, 1],
		[1, Δ[278], 2, 33, 31, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 34, 31, 1],
		[ⵠΔᐃ, Δ[278], 2, 35, 31, 1],
		[ᐃⲆΔ, Δ[278], Δⵠⵠ, 34, 32, ⵠΔⲆ],
		[1, Δ[278], ⲆⲆᐃⲆ, 35, 30, 1],
		[1, Δ[278], 1, 39, 23, 1],
		[1, Δ[278], 3, 39, 22, ⵠⵠᐃ],
		[ⲆⵠⲆ, Δ[278], ΔⵠⲆⲆ, 36, 24, 1],
		[ⲆΔᐃ, Δ[278], ΔⵠᐃⲆ, 35, 24, 1],
		[ᐃⲆⲆ, Δ[278], ΔⲆᐃⲆ, 34, 23, ⵠΔΔ],
		[ΔⵠⲆ, Δ[278], Δⵠᐃᐃ, 35, 23, 1],
		[ᐃⲆⲆ, Δ[278], ΔⲆᐃⲆ, 36, 20, ⵠΔⲆ],
		[1, Δ[278], 2, 36, 21, 1],
		[ᐃⲆⲆ, Δ[278], 2, 35, 22, ⵠΔⲆ],
		[ⲆⵠⲆ, Δ[278], 2, 35, 16, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 34, ΔΔⵠᐃⲆ, ᐃⲆΔ],
		[1, Δ[278], 2, 33, 16, 1],
		[ΔⵠⲆ, Δ[278], ⵠⲆᐃ, 34, ᐃⲆΔΔⲆ, ᐃⲆΔ],
		[ᐃⲆΔ, Δ[278], 0, 32, ⲆⲆᐃⵠΔ, ⵠΔⲆ],
		[1, Δ[278], Δᐃᐃⵠ, 31, ⵠⵠⲆⵠⲆ, 1],
		[ᐃⵠⵠ, Δ[278], ΔⵠᐃⲆ, 30, ΔΔᐃⲆⲆⲆΔ, ⲆΔᐃ],
		[ⵠⵠᐃ, Δ[278], 1, 33, ⵠⵠΔⲆⵠ, 1],
		[1, Δ[278], 1, 31, ⵠΔⵠᐃⵠ, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 32, ⲆᐃΔⵠⵠⲆᐃ, ⵠΔᐃ],
		[1, Δ[278], 0, 31, 8, 1],
		[ⵠⵠᐃ, Δ[278], ⲆⲆᐃⲆ, 32, ΔΔⲆⵠⵠ, ⵠΔᐃ],
		[ⵠΔⲆ, Δ[278], 2, 25, ΔᐃΔᐃⵠ, ⵠΔΔ],
		[1, Δ[278], Δⵠⵠ, 25, ᐃⵠᐃΔⲆ, 1],
		[ᐃⵠⵠ, Δ[278], ΔⲆᐃⲆ, 25, 11, 1],
		[ᐃⵠⵠ, Δ[278], 3, 25, 10, ᐃⵠⵠ],
		[ⵠΔᐃ, Δ[278], Δⵠⵠ, 25, 9, Δᐃᐃ],
		[1, Δ[278], 2, 25, ⲆⲆΔᐃΔ, Δᐃᐃ],
		[1, Δ[278], 2, 26, 8, ΔⵠⲆ],
		[ⵠΔᐃ, Δ[278], ⵠΔᐃⵠ, 27, 8, ᐃⲆΔ],
		[1, Δ[278], 2, 28, 8, 1],
		[Δᐃᐃ, Δ[278], 2, 29, 8, 1],
		[1, Δ[278], ⲆⲆΔΔ, 30, 8, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 26, ⲆⲆΔᐃⲆ, 1],
		[ⵠⵠᐃ, Δ[278], 2, 27, 9, ΔⵠⲆ],
		[1, Δ[278], ⲆᐃᐃΔ, 26, ⵠᐃᐃⵠⵠ, ⵠΔᐃ],
		[ⵠⵠᐃ, Δ[278], ᐃⵠⵠ, 27, 10, 1],
		[1, Δ[278], 3, 28, 9, 1],
		[ⵠⵠᐃ, Δ[278], 3, 25, 14, ΔⵠⲆ],
		[1, Δ[278], 0, 25, ⲆⲆᐃⵠΔ, ⲆΔᐃ],
		[1, Δ[278], 2, 26, ᐃΔΔᐃᐃ, ⵠΔΔ],
		[1, Δ[278], ᐃΔᐃⲆ, 27, 16, ⵠⵠᐃ],
		[ⵠⵠᐃ, Δ[278], 0, 28, 17, ⵠΔᐃ],
		[1, Δ[278], 1, 29, 18, ⵠΔⲆ],
		[1, Δ[278], 2, 26, ᐃⵠⵠⲆⲆ, 1],
		[ⲆⵠⲆ, Δ[278], ⵠΔᐃⵠ, 25, 16, ⵠΔΔ],
		[1, Δ[278], 2, 27, ᐃΔⵠⵠΔ, ⵠΔⲆ],
		[ⲆΔᐃ, Δ[278], 2, 26, ᐃᐃᐃΔᐃ, Δᐃᐃ],
		[ⲆΔᐃ, Δ[278], ⲆⵠⲆ, 27, 18, ᐃⲆⲆ],
		[Δᐃᐃ, Δ[278], Δⵠᐃᐃ, 28, 18, 1],
		[1, Δ[278], 2, 30, 19, ⲆΔᐃ],
		[1, Δ[278], 2, 29, ΔⲆⵠⵠⵠ, 1],
		[ⲆΔᐃ, Δ[278], 2, 24, 14, 1],
		[ⵠΔᐃ, Δ[278], Δᐃᐃⵠ, 24, 15, 1],
		[1, Δ[278], ΔᐃΔ, 23, ΔᐃᐃⲆΔ, 1],
		[ⵠⵠᐃ, Δ[278], ⲆᐃᐃΔ, 24, 10, 1],
		[ⵠΔᐃ, Δ[278], 2, 24, Ⲇⵠᐃⵠⵠ, ᐃⲆΔ],
		[1, Δ[278], ⲆᐃᐃΔ, 24, 12, ⵠΔᐃ],
		[1, Δ[278], 2, 24, ⵠᐃᐃΔΔ, 1],
		[ⵠⵠᐃ, Δ[278], 1, 23, 10, ⵠΔΔ],
		[1, Δ[278], 0, 22, ΔⲆΔⲆⲆ, 1],
		[1, Δ[278], 0, 22, ΔΔΔⲆΔ, 1],
		[ⵠΔⲆ, Δ[278], 1, 23, ⵠᐃⵠᐃⵠ, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 24, 8, ᐃⵠⵠ],
		[ⵠΔⲆ, Δ[278], 2, 24, ᐃⵠⲆⲆᐃ, ⲆΔᐃ],
		[1, Δ[278], ⲆⲆΔΔ, 23, 9, ᐃⲆΔ],
		[ⲆΔᐃ, Δ[278], ⲆⲆᐃⲆ, 22, ᐃΔⲆⵠΔ, ⵠΔⲆ],
		[ⲆΔᐃ, Δ[278], 2, 22, ᐃᐃΔⵠⵠ, ᐃⲆⲆ],
		[ᐃⲆⲆ, Δ[278], Δⵠᐃᐃ, 22, ⲆⵠᐃⲆⵠ, ⵠΔᐃ],
		[ΔⵠⲆ, Δ[278], ⵠΔᐃⵠ, 23, ⲆΔⵠⵠΔⵠᐃ, ⵠΔΔ],
		[1, Δ[278], ᐃⵠΔⲆ, 23, ΔⲆΔᐃΔ, ΔⵠⲆ],
		[ᐃⵠⵠ, Δ[278], ⲆⲆᐃⲆ, 23, 13, ᐃⵠⵠ],
		[1, Δ[278], ΔⲆᐃⲆ, 22, ⵠⵠᐃᐃΔ, 1],
		[1, Δ[278], Δⵠᐃᐃ, 21, 9, 1],
		[ⵠⵠᐃ, Δ[278], ⵠΔᐃⵠ, 21, ΔΔⵠⵠⵠ, 1],
		[ᐃⲆⲆ, Δ[278], ⲆⲆΔΔ, 29, 25, ⲆΔᐃ],
		[1, Δ[278], ⲆⲆΔΔ, 25, 24, ⵠΔⲆ],
		[ᐃⲆΔ, Δ[278], Δⵠᐃᐃ, 26, 25, 1],
		[Δᐃᐃ, Δ[278], Δᐃᐃⵠ, 27, 25, 1],
		[ᐃⵠⵠ, Δ[278], ⵠᐃΔ, 28, 25, 1],
		[Δᐃᐃ, Δ[278], Δᐃᐃ, 25, 23, ᐃⵠⵠ],
		[1, Δ[278], 2, 26, 24, 1],
		[1, Δ[278], 0, 24, 25, ⲆΔᐃ],
		[1, Δ[278], ᐃⲆᐃⲆ, 23, 24, 1],
		[1, Δ[278], 3, 24, 24, ⵠⵠᐃ],
		[1, Δ[278], ᐃⵠⲆⵠ, 25, 25, Δᐃᐃ],
		[1, Δ[278], ᐃΔᐃⲆ, 23, 25, 1],
		[ᐃⵠⵠ, Δ[278], ᐃⲆⲆ, 22, 26, 1],
		[1, Δ[278], 1, 26, 26, 1],
		[1, Δ[278], 1, 29, 26, ⲆΔᐃ],
		[1, Δ[278], 2, 23, 26, ⵠⵠᐃ],
		[ΔⵠⲆ, Δ[278], ⲆᐃᐃΔ, 24, 26, ΔⵠⲆ],
		[1, Δ[278], 2, 25, 26, 1],
		[ⵠΔΔ, Δ[278], Δⵠᐃᐃ, 27, 26, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 28, 26, 1],
		[ΔⵠⲆ, Δ[278], 2, 30, 26, ⵠⵠᐃ],
		[ΔⵠⲆ, Δ[278], 2, 29, 27, ⲆΔᐃ],
		[1, Δ[278], ᐃⵠΔⲆ, 28, 28, Δᐃᐃ],
		[1, Δ[278], 1, 26, 29, 1],
		[ⲆⵠⲆ, Δ[278], 0, 28, 27, ᐃⵠⵠ],
		[Δᐃᐃ, Δ[278], 2, 27, 28, ᐃⵠⵠ],
		[1, Δ[278], ⲆᐃᐃΔ, 27, 27, 1],
		[ⵠΔᐃ, Δ[278], 2, 26, 28, 1],
		[Δᐃᐃ, Δ[278], ΔⲆᐃⲆ, 26, 27, ⵠΔᐃ],
		[ⵠⵠᐃ, Δ[278], Δᐃᐃⵠ, 25, 28, ⵠΔΔ],
		[1, Δ[278], 2, 25, 27, 1],
		[ⲆΔᐃ, Δ[278], ⵠΔᐃⵠ, 23, 27, ⵠΔᐃ],
		[ⲆΔᐃ, Δ[278], 2, 22, 27, 1],
		[1, Δ[278], 2, 24, 27, ᐃⲆΔ],
		[ΔⵠⲆ, Δ[278], ⵠⲆᐃ, 24, 28, 1],
		[ⵠΔᐃ, Δ[278], 0, 25, 32, 1],
		[1, Δ[278], 1, 24, 30, 1],
		[ΔⵠⲆ, Δ[278], 2, 25, 31, 1],
		[ⵠⵠᐃ, Δ[278], ⲆⲆᐃⲆ, 25, 30, ᐃⲆⲆ],
		[1, Δ[278], Δᐃᐃⵠ, 25, 29, ⲆΔᐃ],
		[1, Δ[278], 2, 24, 29, ⵠΔΔ],
		[1, Δ[278], 2, 23, 29, ⵠΔΔ],
		[ⲆⵠⲆ, Δ[278], ⲆⲆΔΔ, 26, 33, 1],
		[1, Δ[278], 0, 26, 34, ⵠΔᐃ],
		[1, Δ[278], ⲆⲆᐃⲆ, 27, 35, ⵠΔⲆ],
		[Δᐃᐃ, Δ[278], ⲆⲆᐃⲆ, 22, 28, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 23, 28, ᐃⵠⵠ],
		[1, Δ[278], 2, 24, 31, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 24, 32, ⵠⵠᐃ],
		[ⵠⵠᐃ, Δ[278], ⲆⲆΔΔ, 25, 33, 1],
		[ᐃⲆΔ, Δ[278], ΔⲆᐃⲆ, 26, 35, ⲆΔᐃ],
		[1, Δ[278], 2, 24, 33, 1],
		[ᐃⵠⵠ, Δ[278], ⵠΔᐃⵠ, 25, 34, ⵠⵠᐃ],
		[ⵠΔⲆ, Δ[278], ⲆⵠⲆ, 22, 29, ᐃⵠⵠ],
		[1, Δ[278], 1, 24, 34, ᐃⲆⲆ],
		[1, Δ[278], 0, 23, 35, 1],
		[1, Δ[278], 2, 25, 35, 1],
		[ᐃⵠⵠ, Δ[278], 2, 24, 35, ⵠΔᐃ],
		[ⲆΔᐃ, Δ[278], ΔⲆᐃⲆ, 23, 34, ⵠΔⲆ],
		[1, Δ[278], 2, 23, 33, 1],
		[1, Δ[278], 0, 22, 33, ᐃⵠⵠ],
		[1, Δ[278], ⵠΔⲆ, 23, 32, ⵠΔᐃ],
		[1, Δ[278], 2, 22, 32, ᐃⵠⵠ],
		[1, Δ[278], ⲆᐃᐃΔ, 23, 31, 1],
		[ⲆⵠⲆ, Δ[278], 2, 23, 30, 1],
		[ⲆΔᐃ, Δ[278], 2, 22, 30, 1],
		[1, Δ[278], 2, 22, 31, Δᐃᐃ],
		[ⵠΔⲆ, Δ[278], ᐃⲆΔ, 21, 31, ⵠΔⲆ],
		[1, Δ[278], ᐃΔΔ, 21, 29, 1],
		[ⵠⵠᐃ, Δ[278], ⲆⲆᐃⲆ, 21, 30, ⲆⵠⲆ],
		[1, Δ[278], ⲆᐃᐃΔ, 24, 36, ⲆΔᐃ],
		[ᐃⲆⲆ, Δ[278], 2, 26, 36, ⵠΔΔ],
		[ⵠⵠᐃ, Δ[278], 2, 25, 36, 1],
		[ᐃⲆⲆ, Δ[278], 2, 27, 36, ᐃⲆⲆ],
		[1, Δ[278], ⵠΔᐃⵠ, 28, 36, 1],
		[1, "d", Δⵠᐃᐃ, 83, 65, ⵠⵠᐃ],
		[ᐃⲆⲆ, "d", 2, 16, 67, ⵠΔᐃ],
		[ᐃⲆⲆ, "g", ⵠⲆⵠ, 15, ⲆΔⲆⵠᐃ, 1],
		[1, "s", 0, ⲆΔᐃΔΔ, 13, 1],
		[ⵠΔΔ, "s", ΔᐃΔ, 85, ΔΔⵠⵠΔ, 1],
		[ⵠΔΔ, "f", ⲆᐃⲆ, 41, 102, 1],
		[1, "f", 0, 42, 124, 1],
		[1, "f", ΔᐃΔ, 64, 116, ⲆΔᐃ],
		[1, "f", 0, 74, 104, ⵠΔᐃ],
		[1, "f", ⵠⲆᐃ, 70, 87, ᐃⵠⵠ],
		[1, "f", ⵠⲆⵠ, 27, 96, 1],
		[ⵠΔΔ, "f", 0, 22, 79, ⵠΔᐃ],
		[1, "f", 0, ⲆⲆᐃⵠⲆ, 117, ⲆΔᐃ],
		[ⵠΔᐃ, "f", ⵠⲆⵠ, 30, 137, ⵠⵠᐃ],
		[1, "f", 0, 59, 146, ⲆⵠⲆ],
		[ⵠⵠᐃ, "f", 0, 52, 147, ᐃⲆΔ],
		[ⲆΔᐃ, "f", 0, ⲆⲆᐃᐃᐃ, 149, 1],
		[ΔⵠⲆ, "f", ᐃΔΔ, 36, 146, ᐃⲆⲆ],
		[1, "f", 0, 62, 124, ⵠΔᐃ],
		[1, "g", 1, 34, 121, ⵠΔΔ],
		[ⲆⵠⲆ, "g", 1, 52, 116, ⲆΔᐃ],
		[ᐃⲆⲆ, "g", ⵠΔⲆ, 78, 116, 1],
		[ᐃⲆΔ, "g", 1, 71, 129, ⵠΔᐃ],
		[1, "s", 0, 53, ᐃⵠᐃⲆⵠ, 1],
		[1, "s", ⵠᐃΔ, 73, 111, 1],
		[ⵠΔⲆ, "s", ΔᐃΔ, 77, 126, 1],
		[ⵠΔΔ, "s", 0, 48, 90, 1],
		[1, "s", 0, 19, 102, ᐃⵠⵠ],
		[ᐃⲆⲆ, "s", 0, 18, 127, ᐃⲆΔ],
		[Δᐃᐃ, "s", ΔᐃΔ, 35, 159, ⲆΔᐃ],
		[Δᐃᐃ, "s", ⵠⲆⵠ, 65, 54, ᐃⲆΔ],
		[1, "s", 0, 44, 52, ⲆΔᐃ],
		[1, "s", ΔᐃΔ, 26, 51, Δᐃᐃ],
		[ⵠΔⲆ, "f", 1, 56, 136, ᐃⲆΔ],
		[1, "f", ⲆΔᐃ, 41, 133, ⲆⵠⲆ],
		[1, "f", 1, 80, 120, ᐃⵠⵠ],
		[ⵠⵠᐃ, "f", 1, ΔⵠΔΔᐃ, 117, 1],
		[1, "f", Δᐃᐃ, 13, 99, ΔⵠⲆ],
		[1, "f", ᐃⵠⵠ, ΔⲆⲆⲆⵠ, 89, ᐃⵠⵠ],
		[1, "f", ᐃⲆⲆ, 90, 98, ⵠΔᐃ],
		[1, "f", ᐃⲆΔ, 84, 95, 1],
		[ᐃⲆⲆ, "f", ⵠΔⲆ, ΔΔⵠᐃⲆ, 57, 1],
		[ᐃⵠⵠ, "f", 1, 77, 53, 1],
		[1, "d", Δᐃᐃ, 48, 35, ᐃⵠⵠ],
		[1, Δ[66], ⲆᐃⲆΔⲆ, 33, ⵠᐃᐃΔΔ, 0],
		[ⲆⵠⲆ, Δ[66], 8, 30, ⵠⲆᐃΔᐃ, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[66], 9, 32, 30, 0],
		[ⵠΔⲆ, Δ[66], ⲆΔⵠᐃⲆ, 30, 25, 0],
		[1, Δ[66], ⲆΔⲆᐃⵠ, 33, 21, 0],
		[ᐃⲆΔ, Δ[66], ⲆⲆΔᐃΔ, 31, 34, ⵠᐃΔ],
		[1, Δ[66], 8, 67, 29, 0],
		[1, Δ[66], ᐃⵠⲆⲆᐃ, 70, 22, 0],
		[ᐃⲆΔ, Δ[66], ᐃᐃΔⵠⵠ, 70, 16, ⵠⲆᐃ],
		[1, Δ[66], ⲆⵠΔΔⵠ, 75, ⵠⵠᐃΔΔ, 0],
		[1, Δ[66], 8, 68, 10, ⲆᐃⲆ],
		[ⵠΔᐃ, Δ[66], 8, 75, 30, 0],
		[ᐃⵠⵠ, Δ[66], 11, 71, 33, ⵠᐃΔ],
		[1, Δ[66], 11, 72, 25, 0],
		[1, Δ[66], 11, 64, 25, ⲆᐃⲆ],
		[ⵠΔΔ, Δ[66], ⵠⵠᐃΔΔ, 52, 10, ⵠⲆᐃ],
		[1, Δ[66], ⵠⵠᐃΔΔ, 31, ⵠⵠΔⲆⵠ, ⵠⲆᐃ],
		[1, Δ[66], 30, 29, ΔᐃᐃⲆΔ, ⵠⲆⵠ],
		[ΔⵠⲆ, Δ[66], 30, 36, ΔⵠΔᐃΔᐃᐃ, 0],
		[1, Δ[66], 30, 34, 29, 0],
		[ⵠΔᐃ, Δ[66], 30, 30, 29, ⵠⲆⵠ],
		[1, Δ[66], 30, 71, 29, ⵠⲆⵠ],
		[ⵠⵠᐃ, Δ[66], 28, 68, 25, 0],
		[1, Δ[66], 28, 75, ⲆⵠⲆΔⵠ, 0],
		[1, Δ[66], 27, 67, ᐃΔⵠⲆⲆ, 0],
		[ⵠΔⲆ, Δ[66], 29, 72, ⲆⵠΔΔⵠ, Δⵠⵠ],
		[1, Δ[66], 29, 75, 32, 0],
		[ⵠΔᐃ, Δ[66], 29, 32, 20, 0],
		[1, Δ[106], 1, 39, 12, 0],
		[1, Δ[106], 1, 34, ΔΔⲆΔΔ, ⲆᐃⲆ],
		[1, Δ[106], 1, 74, 28, 0],
		[ⲆΔᐃ, Δ[106], ⵠΔᐃⵠ, 74, 29, ᐃΔΔ],
		[ΔⵠⲆ, Δ[106], ⲆⲆᐃⲆ, 69, 30, ⲆᐃⲆ],
		[1, Δ[106], 2, 77, 22, ΔᐃΔ],
		[1, Δ[106], Δᐃᐃⵠ, 74, 21, 0],
		[1, Δ[106], 2, 76, ΔᐃΔⵠᐃ, 0],
		[1, Δ[106], 1, 78, ΔⲆⲆⲆⵠ, 0],
		[ⵠΔΔ, Δ[106], 1, 28, 19, Δⵠⵠ],
		[1, Δ[106], 2, 27, 24, 0],
		[1, Δ[106], ᐃⵠΔⲆ, 24, 17, ᐃΔΔ],
		[ⵠΔᐃ, Δ[106], ᐃⵠΔⲆ, 29, 21, 0],
		[ᐃⲆⲆ, Δ[106], 1, 27, 32, 0],
		[ⵠΔⲆ, Δ[106], Δⵠᐃᐃ, 30, 33, ΔᐃΔ],
		[1, Δ[106], 1, 29, 28, 0],
		[1, Δ[106], 2, 28, 31, 0],
		[ᐃⲆΔ, Δ[106], ⲆᐃᐃΔ, ᐃⵠⲆᐃΔ, 24, 0],
		[Δᐃᐃ, Δ[106], ᐃⵠΔⲆ, 20, 26, ⵠᐃΔ],
		[1, Δ[106], 2, 23, 16, 0],
		[ⲆΔᐃ, Δ[106], ⵠΔᐃⵠ, 11, 25, 0],
		[1, Δ[66], 33, 29, 22, ᐃΔΔ],
		[1, Δ[66], 34, 32, 25, 0],
		[ΔⵠⲆ, Δ[66], 34, 30, 18, 0],
		[ⵠΔⲆ, Δ[66], 33, 78, ⵠⲆΔⲆΔ, ⲆᐃⲆ],
		[1, Δ[66], 33, 73, 35, ⲆᐃⲆ],
		[1, Δ[66], 36, 72, 23, ⵠⲆⵠ],
		[1, Δ[66], 35, 25, 18, 0],
		[ⵠΔⲆ, "d", 1, 83, 41, ⵠⵠᐃ],
		[1, "d", ⵠΔΔ, ⵠΔᐃⲆⲆⵠⵠ, 40, ⲆⵠⲆ],
		[ⵠΔᐃ, Δ[278], 2, 224, 104, 1],
		[ᐃⲆⲆ, Δ[278], 0, 224, 105, 1],
		[1, Δ[278], 3, 224, 106, ΔⵠⲆ],
		[1, Δ[526], 3, 216, 128, 1],
		[1, Δ[526], ΔᐃΔ, 215, 126, ᐃⲆΔ],
		[ⵠΔⲆ, "s", 0, 216, 130, ᐃⲆⲆ],
		[ⵠΔᐃ, "s", ᐃⲆΔ, 217, 129, 1],
		[ⵠΔΔ, "s", Δⵠⵠ, 218, 128, Δᐃᐃ],
		[ⲆⵠⲆ, "s", 1, 217, 127, 1],
		[ⲆΔᐃ, "s", Δⵠⵠ, 217, 126, ⵠΔᐃ],
		[ᐃⵠⵠ, "s", ⵠΔⲆ, 217, 125, 1],
		[ᐃⲆΔ, "s", ⲆᐃⲆ, 216, 124, ⲆⵠⲆ],
		[1, "s", ⵠΔᐃ, 215, 124, 1],
		[ⲆⵠⲆ, "s", ⵠᐃΔ, 214, 124, ᐃⵠⵠ],
		[1, "s", 1, 213, 125, 1],
		[1, "s", 0, 213, 126, ⵠΔΔ],
		[ⵠⵠᐃ, Δ[218], ⵠΔᐃⵠ, 217, 130, Δⵠⵠ],
		[1, Δ[218], Δᐃᐃⵠ, 212, 125, ⵠⲆᐃ],
		[1, "p", Δⵠⵠ, 214, 134, ⵠΔΔ],
		[1, "s", 1, 211, 126, 1],
		[ΔⵠⲆ, "b", 1, 45, 277, 0],
		[1, "b", ᐃⵠⵠ, 50, 286, 0],
		[1, "b", Δⵠᐃᐃ, 51, 284, 0],
		[1, "b", ᐃⲆΔ, 47, 287, ⵠᐃΔ],
		[ᐃⵠⵠ, "b", 0, 39, 285, 0],
		[1, "b", ⲆΔⲆΔ, 40, 283, 0],
		[1, "b", 0, 52, 283, ⲆᐃⲆ],
		[1, "b", ⲆⵠⲆ, 51, 280, Δⵠⵠ],
		[1, "g", ⵠᐃΔ, 45, 269, ⵠΔᐃ],
		[ⵠΔΔ, "p", ΔᐃΔ, 55, 281, 1],
		[ᐃⵠⵠ, "b", ⲆⵠⲆ, 5, 172, ᐃΔΔ],
		[ᐃⵠⵠ, "b", 2, 6, 172, 0],
		[ⵠΔᐃ, "t", 5, 6, 171, ⲆᐃⲆ],
		[1, "t", ᐃⲆⲆ, 5, 170, ⵠⲆᐃ],
		[ᐃⲆΔ, "t", 1, ⵠⵠⲆⵠ, 164, 0],
		[ⵠΔⲆ, "t", 3, 6, 164, 0],
		[1, "b", Δⵠⵠ, 6, 165, 0],
		[Δᐃᐃ, "t", Ⲇⵠᐃᐃ, ⵠΔΔΔ, 165, ᐃΔΔ],
		[1, "b", Δᐃᐃⵠ, ᐃΔᐃⲆΔ, 166, 0],
		[1, "t", 4, 5, 166, ΔᐃΔ],
		[1, "t", 4, 6, 167, Δⵠⵠ],
		[1, "t", 2, Δⵠᐃⵠⵠ, 168, 0],
		[ⵠΔⲆ, "t", 0, 6, 169, ⵠⲆⵠ],
		[1, "t", 4, ΔⵠⵠⵠΔ, 170, ᐃΔΔ],
		[1, "t", ⵠᐃΔ, ⲆΔⲆⲆ, 167, 0],
		[ⲆΔᐃ, "t", ⲆⲆΔΔ, ⵠΔΔΔ, 169, 0],
		[1, "b", ⲆᐃⲆ, ⲆΔⲆⲆ, 168, 0],
		[1, "s", 1, ᐃⲆᐃⲆⲆ, 153, 1],
		[1, "s", ᐃⵠΔⲆ, 7, 151, ⵠΔΔ],
		[1, Δ[66], 5, ᐃΔᐃⲆᐃ, 152, 0],
		[1, "t", 1, 5, 154, 0],
		[1, "b", Δⵠⵠ, ΔΔᐃⵠⵠ, 154, ⵠᐃΔ],
		[ⵠⵠᐃ, "t", 2, ⲆΔΔΔΔ, 155, ⵠⲆᐃ],
		[Δᐃᐃ, "b", ΔⲆᐃⲆ, 6, 156, 0],
		[1, "t", ΔⲆᐃⲆ, 5, 157, 0],
		[Δᐃᐃ, "t", 4, 5, 155, ⵠᐃΔ],
		[ⲆΔᐃ, "b", ⵠᐃΔ, 6, 157, 0],
		[ᐃⵠⵠ, "t", ΔⵠⲆ, 5, 156, 0],
		[1, "t", 5, ᐃΔΔⵠΔ, 158, 0],
		[ⲆΔᐃ, "b", ⲆⲆᐃⲆ, 6, 159, ᐃΔΔ],
		[1, "b", ⵠⲆⵠ, 6, 162, ⵠᐃΔ],
		[ⲆΔᐃ, "t", ΔⵠⲆᐃ, 6, 163, ⵠⲆᐃ],
		[1, "t", 4, 6, 161, ⵠⲆⵠ],
		[1, "b", ⲆⵠⲆ, ΔⲆⵠΔΔ, 160, 0],
		[ⵠΔⲆ, "b", 2, ⲆΔⲆⲆ, 163, 0],
		[1, "b", Δᐃᐃⵠ, ⲆΔΔΔ, 158, ΔᐃΔ],
		[ⵠΔᐃ, "b", 2, ⲆΔΔΔ, 161, Δⵠⵠ],
		[1, "t", 1, 5, 162, ⵠⲆᐃ],
		[ᐃⵠⵠ, "t", 1, 5, 160, ⵠⲆᐃ],
		[ⵠΔⲆ, "b", ⵠⵠᐃ, 85, 176, 0],
		[ᐃⲆⲆ, "b", 2, 83, 178, Δⵠⵠ],
		[1, "s", 1, 82, 177, 1],
		[ᐃⲆΔ, "b", 0, 76, 172, Δⵠⵠ],
		[ⲆⵠⲆ, "b", ⲆΔⲆΔ, 76, 174, ᐃΔΔ],
		[1, "t", 3, 73, 174, ⵠⲆᐃ],
		[1, "t", ⵠⵠΔⲆ, 72, 175, ⵠⲆⵠ],
		[1, "t", ⲆΔⲆⲆ, 87, 173, 0],
		[1, Δ[66], ᐃⵠΔⲆ, 76, 175, Δⵠⵠ],
		[ᐃⲆⲆ, Δ[66], 3, 77, 171, ⲆᐃⲆ],
		[ⵠΔΔ, Δ[66], ⵠᐃⲆᐃ, 86, 177, 0],
		[ᐃⲆΔ, Δ[66], ⲆⲆᐃⲆ, 71, 175, 0],
		[ᐃⲆΔ, "s", 1, 70, 174, ΔⵠⲆ],
		[1, "r", 48, 174, ⲆᐃⲆ],
		[ⲆⵠⲆ, "r", 49, 175, ⵠⲆᐃ],
		[1, "r", 50, 175, 0],
		[ⲆⵠⲆ, "r", 51, 175, ᐃΔΔ],
		[1, "r", 51, 174, 0],
		[ⵠΔᐃ, "r", 50, 174, ⲆᐃⲆ],
		[ⵠⵠᐃ, "r", 49, 174, ⲆᐃⲆ],
		[1, "r", 52, 175, 0],
		[1, "r", 52, 176, 0],
		[ⵠΔΔ, "r", 51, 176, 0],
		[1, "r", 50, 176, 0],
		[1, "r", 49, 176, 0],
		[ⲆΔᐃ, "r", 48, 175, 0],
		[1, "r", 47, 175, ⵠᐃΔ],
		[1, "r", 48, 176, ⲆᐃⲆ],
		[1, "r", 69, 163, 0],
		[ⲆΔᐃ, "r", 70, 163, Δⵠⵠ],
		[ⵠΔΔ, "r", 71, 163, 0],
		[1, "r", 73, 163, ⵠⲆᐃ],
		[1, "r", 72, 163, 0],
		[1, "r", 73, 164, ⵠⲆᐃ],
		[ⵠΔⲆ, "r", 72, 164, ⵠᐃΔ],
		[1, "r", 71, 164, ⵠⲆᐃ],
		[ⵠΔΔ, "r", 70, 164, 0],
		[1, "r", 69, 164, ⵠⲆⵠ],
		[ⵠΔΔ, "r", 68, 164, 0],
		[1, "r", 68, 165, 0],
		[1, "r", 69, 165, 0],
		[ΔⵠⲆ, "r", 70, 165, 0],
		[ⵠΔⲆ, "r", 71, 165, Δⵠⵠ],
		[ⲆΔᐃ, "r", 72, 165, ΔᐃΔ],
		[1, "r", 74, 164, ⵠⲆⵠ],
		[ᐃⵠⵠ, "r", 73, 165, 0],
		[1, "r", 72, 166, ⲆᐃⲆ],
		[1, "r", 71, 166, 0],
		[1, "r", 70, 166, 0],
		[ᐃⲆⲆ, "r", 74, 165, 0],
		[1, "r", 24, 164, 0],
		[ᐃⵠⵠ, "r", 25, 164, ⵠⲆᐃ],
		[ⵠΔᐃ, "r", 27, 164, 0],
		[ⲆⵠⲆ, "r", 26, 164, ΔᐃΔ],
		[1, "r", 28, 165, 0],
		[1, "r", 26, 165, 0],
		[ᐃⵠⵠ, "r", 27, 165, ΔᐃΔ],
		[1, "r", 25, 165, ⵠⲆᐃ],
		[Δᐃᐃ, "r", 24, 165, ⲆᐃⲆ],
		[1, "r", 23, 165, 0],
		[ⵠΔΔ, "r", 22, 165, ⵠⲆᐃ],
		[ⵠΔΔ, "r", 21, 165, 0],
		[ⵠΔᐃ, "r", 21, 166, 0],
		[1, "r", 22, 166, 0],
		[ⲆⵠⲆ, "r", 23, 166, 0],
		[ᐃⵠⵠ, "r", 24, 166, 0],
		[1, "r", 25, 166, ⵠⲆⵠ],
		[1, "r", 26, 166, 0],
		[ⵠⵠᐃ, "r", 27, 166, 0],
		[ⲆⵠⲆ, "r", 28, 166, 0],
		[ⲆⵠⲆ, "r", 28, 167, 0],
		[1, "r", 26, 167, ⵠᐃΔ],
		[1, "r", 25, 167, 0],
		[1, "r", 24, 167, ΔᐃΔ],
		[ⵠΔΔ, "r", 23, 167, ⲆᐃⲆ],
		[ᐃⵠⵠ, "r", 22, 167, ⵠⲆᐃ],
		[ⵠΔᐃ, "r", 27, 167, ⲆᐃⲆ],
		[ΔⵠⲆ, "r", 29, 166, 0],
		[1, "r", 29, 167, 0],
		[1, "r", 28, 168, ΔᐃΔ],
		[1, "r", 27, 168, ⵠᐃΔ],
		[1, "r", 26, 168, ⵠⲆⵠ],
		[ᐃⵠⵠ, "r", 25, 168, ⵠⲆᐃ],
		[1, "r", 24, 168, 0],
		[ᐃⵠⵠ, "r", 23, 168, 0],
		[ⲆΔᐃ, "r", 27, 169, 0],
		[ⵠⵠᐃ, "r", 26, 169, 0],
		[1, "r", 25, 169, 0],
		[ⵠⵠᐃ, "r", 24, 169, 0],
		[1, "r", 23, 169, ⲆᐃⲆ],
		[ⵠΔΔ, "r", 22, 168, 0],
		[1, "r", 21, 167, ᐃΔΔ],
		[ⵠΔⲆ, "s", ᐃⵠⵠ, 52, 174, ΔⵠⲆ],
		[ⲆⵠⲆ, "t", ΔⵠᐃⲆ, 50, 177, ⵠⲆⵠ],
		[ⵠΔᐃ, "t", 4, 49, 177, 0],
		[ⵠⵠᐃ, "b", ⵠᐃΔ, 47, 174, 0],
		[1, "b", ⲆᐃⲆ, 69, 166, Δⵠⵠ],
		[1, "t", Δᐃᐃⵠ, 68, 166, ΔᐃΔ],
		[ΔⵠⲆ, "t", 5, 74, 163, 0],
		[ᐃⲆΔ, "t", ⲆΔᐃ, 73, 162, 0],
		[1, "s", 0, 73, 166, ⵠΔΔ],
		[1, "s", ΔⲆᐃⲆ, 76, 165, ΔⵠⲆ],
		[ⵠΔΔ, "g", ⲆⲆᐃⲆ, 59, 175, ⲆⵠⲆ],
		[ᐃⲆⲆ, "p", ΔᐃΔ, 78, 168, ΔⵠⲆ],
		[1, "p", Δⵠⵠ, 61, 162, ᐃⲆΔ],
		[ΔⵠⲆ, "p", ᐃΔΔ, 42, 170, ⵠⵠᐃ],
		[ⵠⵠᐃ, "p", 0, 20, 174, ⵠⵠᐃ],
		[ⲆⵠⲆ, "p", 0, ΔΔⵠᐃⲆ, 160, 1],
		[1, "b", 1, 23, 164, 0],
		[1, "b", ⲆΔᐃ, 28, 169, 0],
		[1, "b", ΔⲆᐃⲆ, 29, 168, 0],
		[ⲆΔᐃ, "b", ⵠΔᐃⵠ, 16, 170, 0],
		[1, "t", 1, 15, 171, 0],
		[1, "t", Δᐃⵠᐃ, 13, 175, ⵠⲆⵠ],
		[ⲆⵠⲆ, "t", 5, ΔⵠΔⵠⵠ, 166, 0],
		[ⲆⵠⲆ, "t", 5, 26, 163, 0],
		[Δᐃᐃ, "s", ᐃⲆΔ, 29, 165, ΔⵠⲆ],
		[ⵠΔΔ, "t", ⲆΔⲆⲆ, 11, 167, ⲆᐃⲆ],
		[1, "t", ᐃΔΔ, 29, 176, ⵠⲆⵠ],
		[ⵠΔΔ, "b", ⵠΔᐃⵠ, 30, 175, 0],
		[1, "t", 2, 24, 177, ⵠⲆⵠ],
		[ΔⵠⲆ, "b", ⵠⵠᐃ, 37, 174, ⵠⲆᐃ],
		[1, "b", ⲆᐃⲆ, 35, 172, 0],
		[1, "b", ᐃⲆᐃⲆ, 37, 170, ΔᐃΔ],
		[1, "t", 4, 38, 169, ᐃΔΔ],
		[1, "t", ᐃⵠⲆⲆ, 34, 173, 0],
		[1, "t", ⲆΔΔΔ, 38, 175, 0],
		[1, "b", 2, 39, 173, ᐃΔΔ],
		[1, "t", ⲆΔⲆΔ, 37, 176, 0],
		[ⵠΔⲆ, "t", ⲆⵠⵠⲆ, 30, 168, 0],
		[ⵠΔΔ, "s", Δⵠᐃᐃ, 35, 176, 1],
		[1, "s", ⵠΔΔ, 41, 175, 1],
		[ᐃⵠⵠ, "b", Δᐃᐃⵠ, 53, 176, 0],
		[1, "t", ⵠⵠⲆⵠ, 55, 173, 0],
		[1, "t", 5, 45, 170, 0],
		[1, "b", 1, 53, 162, ᐃΔΔ],
		[ⵠΔΔ, "b", 0, 50, 164, ΔᐃΔ],
		[1, "t", ᐃⵠΔⲆ, 54, 163, ⵠⲆⵠ],
		[ᐃⲆⲆ, "t", 3, 49, 165, 0],
		[ⲆΔᐃ, "t", ⵠΔΔⵠ, 48, 160, ᐃΔΔ],
		[1, "t", ⲆⵠⵠⲆ, 57, 164, 0],
		[ⲆΔᐃ, "t", 4, 66, 162, ᐃΔΔ],
		[1, "b", 1, 86, 161, ⲆᐃⲆ],
		[1, "b", 2, 81, 163, 0],
		[ⵠΔⲆ, "t", ᐃΔᐃⲆ, 85, 162, ⵠⲆᐃ],
		[1, "t", 5, 81, 162, ᐃΔΔ],
		[ⵠⵠᐃ, "t", ⵠⵠΔⲆ, 88, 163, ΔᐃΔ],
		[ⲆΔᐃ, "t", 1, 84, 166, 0],
		[ⵠΔⲆ, "t", ⲆΔΔΔ, 72, 160, ⵠⲆᐃ],
		[ᐃⲆΔ, "t", ⵠΔΔΔ, 70, 170, 0],
		[ⵠΔᐃ, "s", Δᐃᐃ, 57, 162, ⵠΔΔ],
		[1, "b", ᐃⵠⵠ, 39, 161, ⲆᐃⲆ],
		[1, "b", ⵠᐃΔ, 34, 164, 0],
		[ⵠΔⲆ, "b", 2, 54, 164, 0],
		[1, "t", 1, 59, 169, 0],
		[1, "t", Ⲇⵠᐃᐃ, 60, 170, 0],
		[ⵠΔᐃ, "t", ΔᐃΔΔ, 63, 169, 0],
		[1, "t", ᐃᐃΔΔ, 63, 174, Δⵠⵠ],
		[ⵠΔⲆ, "t", ⵠΔⲆ, 62, 175, ᐃΔΔ],
		[1, "t", 5, 40, 162, 0],
		[1, "t", 1, 63, 180, ΔᐃΔ],
		[ⵠΔᐃ, "t", 2, 64, 179, ᐃΔΔ],
		[ᐃⲆⲆ, "t", 2, 35, 165, 0],
		[ᐃⵠⵠ, "s", ΔⵠⲆ, 63, 173, 1],
		[1, "s", 2, 40, 165, 1],
		[1, "b", Δⵠⵠ, 46, 169, 0],
		[1, Δ[66], 22, 74, 168, 0],
		[ⵠΔΔ, Δ[66], 22, 86, 168, 0],
		[1, Δ[66], 22, 83, 175, 0],
		[ⲆⵠⲆ, Δ[66], 22, 78, 175, ΔᐃΔ],
		[1, Δ[66], 19, 72, 176, 0],
		[1, Δ[66], ΔⲆᐃΔⲆ, 68, 168, 0],
		[ⲆΔᐃ, Δ[66], ΔⵠΔⵠⵠ, 65, 163, ᐃΔΔ],
		[1, Δ[66], ⵠⲆⵠⲆⵠ, 75, 162, 0],
		[ⵠΔᐃ, Δ[66], 19, 80, 162, 0],
		[ⵠΔᐃ, Δ[66], 19, 88, 159, ⵠⲆᐃ],
		[1, Δ[66], 19, 87, 164, ⵠⲆᐃ],
		[ⲆΔᐃ, Δ[66], ΔⵠΔⵠⵠ, 61, 177, Δⵠⵠ],
		[ΔⵠⲆ, Δ[66], ⲆΔᐃΔⲆ, 59, 172, 0],
		[ⵠΔΔ, Δ[66], ⲆΔᐃΔⲆ, 59, 167, ⵠⲆⵠ],
		[Δᐃᐃ, Δ[66], ⵠᐃΔⵠⲆ, 53, 165, ᐃΔΔ],
		[1, Δ[66], Ⲇᐃᐃᐃᐃ, 56, 163, ⲆᐃⲆ],
		[ⵠⵠᐃ, Δ[66], 19, 51, 161, 0],
		[ⵠⵠᐃ, Δ[66], ΔⵠΔⵠⵠ, 48, 167, ⵠⲆᐃ],
		[1, Δ[66], 19, 47, 170, 0],
		[1, Δ[66], 19, 41, 163, 0],
		[1, Δ[66], 19, 37, 161, 0],
		[ᐃⵠⵠ, Δ[66], ⵠᐃΔⵠⲆ, 36, 166, 0],
		[1, Δ[66], 19, 36, 171, ⵠⲆⵠ],
		[ⵠΔΔ, Δ[66], 19, 34, 174, ⵠᐃΔ],
		[1, Δ[66], ᐃᐃⵠᐃⲆ, 40, 172, 0],
		[1, Δ[66], ⲆΔᐃΔⲆ, 38, 177, 0],
		[ⲆⵠⲆ, Δ[66], 19, 42, 176, 0],
		[1, Δ[66], ⵠᐃΔⵠⲆ, 53, 178, 0],
		[1, Δ[66], 19, 53, 172, 0],
		[ΔⵠⲆ, Δ[66], 19, 64, 181, ΔᐃΔ],
		[ⲆΔᐃ, Δ[66], ᐃΔⵠⲆⲆ, 64, 175, ΔᐃΔ],
		[1, Δ[66], ⲆΔᐃΔⲆ, 79, 172, 0],
		[1, Δ[66], 19, 30, 170, ΔᐃΔ],
		[ᐃⲆΔ, Δ[66], ᐃΔⵠⲆⲆ, ᐃΔⵠⵠΔ, 168, 0],
		[ᐃⲆⲆ, Δ[66], 19, 14, 173, 0],
		[1, Δ[66], 19, 12, 162, 0],
		[ΔⵠⲆ, Δ[66], 19, ΔⲆⲆⲆⲆ, 167, ΔᐃΔ],
		[1, Δ[66], ΔⲆᐃΔⲆ, ⲆⲆᐃᐃᐃ, 161, 0],
		[1, Δ[66], ᐃᐃΔΔᐃ, 27, 162, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[66], ΔⲆⵠⵠⵠ, 83, 195, 0],
		[1, Δ[66], ΔⲆᐃⲆ, 85, 163, ᐃΔΔ],
		[1, Δ[66], 2, 80, 164, Δⵠⵠ],
		[ⲆⵠⲆ, Δ[66], ΔⲆᐃⲆ, 84, 169, 0],
		[1, Δ[66], Δᐃᐃⵠ, 55, 165, 0],
		[ⵠΔⲆ, Δ[66], ΔⵠⲆⲆ, 46, 163, ⵠⲆᐃ],
		[ᐃⲆΔ, Δ[66], 2, 66, 169, 0],
		[ⵠⵠᐃ, Δ[66], 0, 63, 175, ⵠⲆᐃ],
		[Δᐃᐃ, Δ[66], ⲆᐃⲆ, 34, 164, 0],
		[ᐃⲆⲆ, Δ[66], 0, 18, 160, 0],
		[ΔⵠⲆ, Δ[66], 2, 40, 160, 0],
		[ⵠⵠᐃ, Δ[66], ⲆᐃᐃΔ, 53, 160, ⵠᐃΔ],
		[ᐃⲆⲆ, Δ[66], ⲆⲆΔΔ, 14, 170, 0],
		[Δᐃᐃ, Δ[66], 2, ᐃᐃⵠᐃⲆ, 175, 0],
		[1, Δ[66], 2, 23, 176, 0],
		[1, Δ[66], 5, 60, 147, 0],
		[ᐃⲆΔ, Δ[66], 33, 59, 160, 0],
		[ᐃⵠⵠ, Δ[66], 33, 85, 157, ⲆᐃⲆ],
		[1, Δ[66], 33, 29, 143, Δⵠⵠ],
		[ᐃⲆΔ, Δ[66], 33, 62, 140, 0],
		[ⲆΔᐃ, Δ[66], 33, 43, 127, ⵠⲆⵠ],
		[ᐃⵠⵠ, Δ[66], 33, ΔᐃΔⵠᐃ, 129, 0],
		[ⵠΔΔ, Δ[66], 33, 50, 134, 0],
		[ⵠΔΔ, Δ[66], 33, 79, 127, ⵠᐃΔ],
		[1, Δ[66], 33, 89, 139, ᐃΔΔ],
		[1, "b", 1, 44, 156, ΔᐃΔ],
		[ⵠΔᐃ, "t", ⲆⲆᐃⲆ, 45, 157, ⵠᐃΔ],
		[1, "b", ⵠⲆⵠ, 75, 156, ⵠⲆⵠ],
		[ᐃⲆⲆ, "t", 3, 76, 157, 0],
		[1, "t", ⵠⵠΔⲆ, 62, 157, ⵠⲆᐃ],
		[ᐃⵠⵠ, "t", ⵠΔΔΔ, 79, 156, ⵠⲆᐃ],
		[1, "t", ⲆΔⲆⲆ, 41, 156, 0],
		[Δᐃᐃ, "b", ᐃⵠⵠ, 28, 156, ⲆᐃⲆ],
		[1, "t", 2, 27, 157, ⵠᐃΔ],
		[1, "t", ⲆⵠⵠⲆ, 21, 156, 0],
		[ⲆΔᐃ, "t", 4, 56, 159, 0],
		[ⵠⵠᐃ, "f", ⵠΔᐃ, 94, 153, ᐃⲆⲆ],
		[1, "f", ⲆᐃᐃΔ, 93, 153, ᐃⲆΔ],
		[1, "f", 2, 99, 153, 1],
		[1, "f", 1, 98, 153, 1],
		[1, "f", 0, 97, 153, ΔⵠⲆ],
		[1, "f", 1, 96, 153, 1],
		[ᐃⲆⲆ, "s", ⲆΔᐃ, 7, 149, ᐃⵠⵠ],
		[1, Δ[66], 4, ⵠΔⵠΔᐃ, 150, 0],
		[1, "b", ᐃΔᐃⲆ, 43, 281, Δⵠⵠ],
		[ΔⵠⲆ, Δ[66], 50, 24, 39, ΔᐃΔ],
		[1, Δ[66], 50, 21, 39, 0],
		[ⵠΔⲆ, Δ[66], 50, 22, 43, ⵠⲆᐃ],
		[1, Δ[66], 50, ⵠΔΔΔⲆᐃΔ, 34, 0],
		[ⲆⵠⲆ, Δ[66], 50, ⲆΔᐃΔΔ, 26, 0],
		[ⲆΔᐃ, Δ[66], 50, 44, 42, Δⵠⵠ],
		[1, Δ[66], 50, 57, 39, Δⵠⵠ],
		[1, Δ[66], 50, 62, 43, ⵠᐃΔ],
		[1, Δ[66], 50, 77, 44, ⵠᐃΔ],
		[1, Δ[66], 50, 71, 41, ᐃΔΔ],
		[1, Δ[66], 50, 55, 39, 0],
		[ⵠΔΔ, Δ[66], 50, 22, 39, ᐃΔΔ],
		[ΔⵠⲆ, Δ[66], 50, 20, 41, ΔᐃΔ],
		[ⵠΔᐃ, Δ[66], 50, 18, 21, ⵠⲆⵠ],
		[1, Δ[66], 50, 15, 21, Δⵠⵠ],
		[ⲆⵠⲆ, Δ[66], 50, 18, 19, ⵠⲆᐃ],
		[ⲆΔᐃ, Δ[66], 50, ΔᐃⲆⵠΔᐃᐃ, ᐃᐃᐃΔᐃ, ΔᐃΔ],
		[ⵠΔⲆ, Δ[66], 50, ΔᐃΔⵠᐃ, 10, ᐃΔΔ],
		[ᐃⵠⵠ, Δ[66], 50, 18, ⵠⲆᐃΔᐃ, Δⵠⵠ],
		[1, Δ[66], 50, 52, 41, 0],
		[1, Δ[66], 50, 82, 39, 0],
		[ⲆΔᐃ, Δ[66], 50, 86, 38, ⲆᐃⲆ],
		[ΔⵠⲆ, Δ[66], 50, 84, 31, 0],
		[1, Δ[66], 50, 86, 30, 0],
		[ⵠΔⲆ, Δ[66], 50, 84, 26, 0],
		[Δᐃᐃ, Δ[66], 50, 86, 23, ΔᐃΔ],
		[ⵠΔᐃ, Δ[66], 50, 86, ⵠⵠⲆⵠⲆ, ⵠⲆᐃ],
		[1, Δ[66], 50, 29, 42, ⲆᐃⲆ],
		[1, Δ[66], 9, 74, 37, 0],
		[1, Δ[66], 9, 76, 22, Δⵠⵠ],
		[1, Δ[66], 10, 79, 24, 0],
		[ⵠΔΔ, Δ[66], 11, 77, ⵠΔᐃⲆⲆⵠⵠ, 0],
		[1, Δ[66], 36, 81, 25, ⵠⲆᐃ],
		[ᐃⲆⲆ, Δ[66], 36, 80, 36, Δⵠⵠ],
		[1, Δ[66], 36, 21, 36, ⲆᐃⲆ],
		[Δᐃᐃ, Δ[66], 28, 23, 22, ⵠⲆᐃ],
		[ⵠΔⲆ, Δ[66], 28, 27, 31, ⲆᐃⲆ],
		[1, Δ[66], 28, 69, 36, 0],
		[ᐃⲆⲆ, Δ[66], 28, 80, ⲆⵠⵠΔⵠ, ⲆᐃⲆ],
		[ⵠΔⲆ, Δ[66], 51, 24, 155, ᐃΔΔ],
		[1, Δ[66], 51, 7, 154, ⵠᐃΔ],
		[Δᐃᐃ, Δ[66], 51, ⲆⵠᐃⲆⵠ, 154, 0],
		[ⵠΔΔ, Δ[66], 51, 12, 156, ⲆᐃⲆ],
		[ΔⵠⲆ, Δ[66], 51, 16, 154, ᐃΔΔ],
		[ⲆⵠⲆ, Δ[66], 51, ⲆⲆᐃᐃᐃ, 154, ⵠᐃΔ],
		[ⵠΔⲆ, Δ[66], 51, 23, 154, ΔᐃΔ],
		[1, Δ[66], 51, ⲆΔⵠΔᐃ, 157, ⵠⲆᐃ],
		[ᐃⵠⵠ, Δ[66], 51, 31, 154, 0],
		[ⵠΔΔ, Δ[66], 51, 32, 157, ⲆᐃⲆ],
		[1, Δ[66], 51, 86, 154, ⵠᐃΔ],
		[ⲆⵠⲆ, Δ[66], 51, 88, 156, 0],
		[1, Δ[66], 51, 82, 154, 0],
		[ⵠΔⲆ, Δ[66], 51, 80, 154, ⲆᐃⲆ],
		[ⲆΔᐃ, Δ[66], 51, 77, 154, 0],
		[ⲆΔᐃ, Δ[66], 51, 74, 154, ⵠⲆⵠ],
		[1, Δ[66], 51, 71, 154, 0],
		[1, Δ[66], 51, 67, 154, 0],
		[ᐃⲆⲆ, Δ[66], 51, 60, 154, ⵠⲆᐃ],
		[ⲆⵠⲆ, Δ[66], 51, 57, 154, 0],
		[1, Δ[66], 51, 65, 154, 0],
		[ⲆΔᐃ, Δ[66], 51, 68, 156, ⲆᐃⲆ],
		[ᐃⲆΔ, Δ[66], 51, 59, 156, ⵠᐃΔ],
		[ⲆⵠⲆ, Δ[66], 51, 55, 154, ᐃΔΔ],
		[ⵠΔᐃ, Δ[66], 51, 54, 154, ⲆᐃⲆ],
		[1, Δ[66], 51, 52, 154, 0],
		[1, Δ[66], 51, 55, 155, ⵠⲆⵠ],
		[1, Δ[66], 51, 54, 157, 0],
		[ⵠΔΔ, Δ[66], 51, 49, 154, ⵠⲆᐃ],
		[ᐃⲆΔ, Δ[66], 51, 46, 154, 0],
		[1, Δ[66], 51, 44, 154, 0],
		[ᐃⲆⲆ, Δ[66], 51, 43, 154, ⵠⲆⵠ],
		[1, Δ[66], 51, 41, 154, ⵠᐃΔ],
		[ⵠΔⲆ, Δ[66], 51, 38, 154, 0],
		[1, Δ[66], 51, 39, 156, 0],
		[ᐃⵠⵠ, Δ[66], 51, 34, 154, 0],
		[1, Δ[66], ⵠⵠΔⲆ, ΔⲆᐃΔⲆ, 142, 0],
		[1, Δ[66], ⲆΔΔΔ, 37, 147, ⵠⲆⵠ],
		[1, Δ[66], ᐃⲆᐃⲆⲆ, 53, 147, 0],
		[1, Δ[66], 6, 69, 150, 0],
		[ⵠΔᐃ, Δ[66], ΔᐃΔΔ, 94, 148, 0],
		[1, Δ[66], ᐃⵠⲆⲆ, 66, 147, 0],
		[1, Δ[66], ΔᐃΔΔ, 10, 145, ⵠᐃΔ],
		[1, Δ[66], ᐃᐃΔΔ, 28, 137, ⵠⲆᐃ],
		[ⲆⵠⲆ, Δ[66], ⵠΔΔⵠ, 15, 137, ⵠⲆⵠ],
		[1, Δ[66], 4, 48, 134, 0],
		[1, Δ[66], Δᐃⵠᐃ, 67, 135, 0],
		[ΔⵠⲆ, Δ[66], 34, 84, 155, ⵠᐃΔ],
		[ⵠΔⲆ, Δ[66], 35, 70, 156, 0],
		[ⲆΔᐃ, Δ[66], 35, 51, 156, ΔᐃΔ],
		[ⲆΔᐃ, Δ[66], 35, 56, 157, ⲆᐃⲆ],
		[1, Δ[66], 35, 65, 159, 0],
		[ᐃⵠⵠ, Δ[66], 35, 23, 156, ⵠⲆᐃ],
		[1, Δ[66], 35, ⵠⵠΔⲆⵠ, 155, 0],
		[ᐃⲆⲆ, Δ[66], 35, 8, 155, 0],
		[1, Δ[66], 33, 13, 155, 0],
		[1, Δ[66], 33, 33, 158, 0],
		[1, Δ[66], 36, 78, 155, 0],
		[1, Δ[66], 36, 87, 157, 0],
		[ⲆⵠⲆ, Δ[106], ΔⵠⲆ, 73, 36, 0],
		[ⲆⵠⲆ, Δ[106], ᐃⵠⵠ, 80, 24, 0],
		[ⵠⵠᐃ, Δ[106], ᐃⵠΔⲆ, 67, 36, 0],
		[1, Δ[106], 2, 45, 36, ⵠⲆⵠ],
		[1, Δ[106], 2, 53, 34, ⵠᐃΔ],
		[ΔⵠⲆ, Δ[106], ⵠΔᐃ, 51, 35, 0],
		[1, Δ[106], 1, 58, 35, 0],
		[1, Δ[106], 1, 33, 35, 0],
		[1, Δ[106], 1, 31, 33, 0],
		[ᐃⵠⵠ, Δ[106], ΔⲆᐃⲆ, 29, 36, 0],
		[ⵠΔΔ, Δ[106], 2, 56, 36, Δⵠⵠ],
		[1, Δ[106], ⲆⲆΔΔ, 60, 37, 0],
		[ᐃⵠⵠ, Δ[106], Δᐃᐃⵠ, 45, 32, ᐃΔΔ],
		[1, Δ[106], ⵠΔᐃⵠ, 22, 25, 0],
		[Δᐃᐃ, Δ[106], Δⵠᐃᐃ, 21, 35, 0],
		[1, Δ[66], 52, 90, 208, 0],
		[1, Δ[66], ⵠⲆΔⲆΔ, 94, 250, 0],
		[1, Δ[66], 17, 95, 253, ⲆᐃⲆ],
		[ⵠΔΔ, Δ[278], ⵠⲆⵠ, 140, ⲆΔⲆⲆ, 1],
		[ⵠΔΔ, Δ[278], 2, 139, 5, 1],
		[1, Δ[278], Δⵠᐃᐃ, 138, ⲆΔⲆⲆ, Δᐃᐃ],
		[1, Δ[278], ⲆⲆΔΔ, 138, ΔⲆⵠΔΔ, ᐃⵠⵠ],
		[1, Δ[278], 2, 139, 6, ᐃⵠⵠ],
		[ᐃⲆⲆ, Δ[278], ⵠΔᐃⵠ, 141, 6, ⵠΔⲆ],
		[Δᐃᐃ, Δ[278], Δⵠᐃᐃ, 140, ⲆΔΔΔΔ, ⲆⵠⲆ],
		[ⵠΔⲆ, Δ[526], 3, 143, ⲆΔⲆᐃⲆ, ᐃⲆΔ],
		[1, Δ[526], ΔⵠⲆⲆ, 139, ⵠᐃᐃⲆⵠ, 1],
		[ⵠΔΔ, Δ[278], ⵠᐃΔ, 137, 7, 1],
		[ⵠⵠᐃ, Δ[278], ⵠΔᐃ, 138, 8, 1],
		[ⲆΔᐃ, Δ[278], 2, 137, 6, ⲆⵠⲆ],
		[1, Δ[278], ⲆᐃᐃΔ, 137, ⵠᐃⵠᐃⵠ, 1],
		[ᐃⲆΔ, Δ[278], 2, 136, 7, 1],
		[1, Δ[278], ⵠΔᐃⵠ, 138, ᐃΔⲆⵠΔ, ᐃⵠⵠ],
		[1, Δ[278], ⲆΔⲆΔ, 139, ⲆⲆΔᐃⲆ, ⲆΔᐃ],
		[1, Δ[278], 3, 136, 8, ⵠΔᐃ],
		[1, Δ[278], Ⲇⵠᐃᐃ, 137, 9, ⲆΔᐃ],
		[ⵠΔⲆ, Δ[66], 53, 92, 165, 0],
		[ΔⵠⲆ, Δ[66], 53, 92, 180, 0],
		[ΔⵠⲆ, Δ[66], 53, 92, 188, ᐃΔΔ],
		[ⵠⵠᐃ, Δ[66], 54, 92, 153, ᐃΔΔ],
		[ⲆΔᐃ, Δ[66], 54, 91, 153, ⵠᐃΔ],
		[ΔⵠⲆ, Δ[66], 54, 90, 153, 0],
		[Δᐃᐃ, Δ[66], 54, 89, 153, 0],
		[ⵠΔᐃ, Δ[66], 54, 88, 153, 0],
		[1, Δ[66], 54, 87, 153, ⵠⲆⵠ],
		[ᐃⲆⲆ, Δ[66], 54, 86, 153, 0],
		[1, Δ[66], 54, 85, 153, 0],
		[ⵠⵠᐃ, Δ[66], 54, 84, 153, 0],
		[Δᐃᐃ, Δ[66], 54, 83, 153, 0],
		[1, Δ[66], 54, 82, 153, 0],
		[1, Δ[66], 54, 81, 153, 0],
		[1, Δ[66], 54, 80, 153, 0],
		[ᐃⲆΔ, Δ[66], 54, 79, 153, 0],
		[1, Δ[66], 54, 78, 153, ⲆᐃⲆ],
		[ᐃⲆⲆ, Δ[66], 54, 77, 153, 0],
		[1, Δ[66], 54, 76, 153, ΔᐃΔ],
		[1, Δ[66], 54, 75, 153, ⲆᐃⲆ],
		[1, Δ[66], 54, 74, 153, 0],
		[ᐃⲆΔ, Δ[66], 54, 73, 153, 0],
		[ᐃⵠⵠ, Δ[66], 54, 72, 153, ⵠⲆᐃ],
		[1, Δ[66], 54, 70, 153, ⵠᐃΔ],
		[ΔⵠⲆ, Δ[66], 54, 71, 153, 0],
		[ⲆΔᐃ, Δ[66], 54, 69, 153, 0],
		[ᐃⵠⵠ, Δ[66], 54, 68, 153, 0],
		[ᐃⲆΔ, Δ[66], 54, 67, 153, 0],
		[ⲆΔᐃ, Δ[66], 54, 66, 153, 0],
		[ᐃⲆⲆ, Δ[66], 54, 65, 153, ΔᐃΔ],
		[1, Δ[66], 54, 64, 153, ᐃΔΔ],
		[ᐃⵠⵠ, Δ[66], 54, 63, 153, 0],
		[1, Δ[66], 54, 61, 153, 0],
		[1, Δ[66], 54, 62, 153, ⵠⲆᐃ],
		[ⵠΔΔ, Δ[66], 54, 60, 153, 0],
		[ⵠΔⲆ, Δ[66], 54, 59, 153, ⵠᐃΔ],
		[1, Δ[66], 54, 57, 153, ⵠᐃΔ],
		[1, Δ[66], 54, 58, 153, ᐃΔΔ],
		[1, Δ[66], 54, 56, 153, Δⵠⵠ],
		[1, Δ[66], 54, 55, 153, Δⵠⵠ],
		[Δᐃᐃ, Δ[66], 54, 54, 153, 0],
		[ᐃⵠⵠ, Δ[66], 54, 53, 153, ⲆᐃⲆ],
		[1, Δ[66], 54, 52, 153, ᐃΔΔ],
		[ᐃⵠⵠ, Δ[66], 54, 51, 153, ⲆᐃⲆ],
		[ⵠΔⲆ, Δ[66], 54, 50, 153, ⵠᐃΔ],
		[1, Δ[66], 54, 49, 153, Δⵠⵠ],
		[1, Δ[66], 54, 48, 153, 0],
		[1, Δ[66], 54, 47, 153, ⵠⲆᐃ],
		[1, Δ[66], 54, 46, 153, Δⵠⵠ],
		[ⵠⵠᐃ, Δ[66], 54, 45, 153, ⵠⲆⵠ],
		[1, Δ[66], 54, 44, 153, 0],
		[ᐃⵠⵠ, Δ[66], 54, 43, 153, ΔᐃΔ],
		[1, Δ[66], 54, 42, 153, 0],
		[ᐃⲆⲆ, Δ[66], 54, 41, 153, 0],
		[ⲆⵠⲆ, Δ[66], 54, 40, 153, ΔᐃΔ],
		[1, Δ[66], 54, 39, 153, ᐃΔΔ],
		[1, Δ[66], 54, 37, 153, 0],
		[1, Δ[66], 54, 38, 153, 0],
		[1, Δ[66], 54, 36, 153, 0],
		[1, Δ[66], 54, 35, 153, 0],
		[ⵠⵠᐃ, Δ[66], 54, 34, 153, ΔᐃΔ],
		[1, Δ[66], 54, 33, 153, ⵠⲆᐃ],
		[ΔⵠⲆ, Δ[66], 54, 32, 153, Δⵠⵠ],
		[1, Δ[66], 54, 31, 153, 0],
		[1, Δ[66], 54, 30, 153, 0],
		[ⵠΔΔ, Δ[66], 54, 29, 153, 0],
		[1, Δ[66], 54, 28, 153, 0],
		[1, Δ[66], 54, 27, 153, ⵠⲆᐃ],
		[ᐃⲆΔ, Δ[66], 54, 26, 153, ⵠⲆⵠ],
		[1, Δ[66], 54, 25, 153, ᐃΔΔ],
		[1, Δ[66], 54, 24, 153, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[66], 54, 23, 153, 0],
		[Δᐃᐃ, Δ[66], 54, 22, 153, ⵠⲆⵠ],
		[ⲆΔᐃ, Δ[66], 54, 21, 153, 0],
		[ⵠΔᐃ, Δ[66], 54, 20, 153, 0],
		[ⲆⵠⲆ, Δ[66], 54, 19, 153, 0],
		[1, Δ[66], 54, 18, 153, ᐃΔΔ],
		[1, Δ[66], 54, ⲆΔⲆⵠᐃ, 153, 0],
		[ⵠⵠᐃ, Δ[66], 54, ᐃΔⲆⲆⲆ, 153, 0],
		[ⵠΔΔ, Δ[66], 54, 15, 153, 0],
		[1, Δ[66], 54, ΔᐃᐃⲆΔ, 153, ᐃΔΔ],
		[ᐃⵠⵠ, Δ[66], 54, 13, 153, 0],
		[1, Δ[66], 54, 12, 153, 0],
		[ΔⵠⲆ, Δ[66], 54, ⵠⵠᐃΔΔ, 153, 0],
		[1, Δ[66], 54, ᐃⲆᐃⲆᐃ, 153, 0],
		[ᐃⵠⵠ, Δ[66], 54, 8, 153, 0],
		[ⲆΔᐃ, Δ[66], 54, ⵠⲆᐃΔᐃ, 153, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[66], 55, 83, 8, 0],
		[ⵠⵠᐃ, Δ[66], 55, 83, 9, 0],
		[ⵠⵠᐃ, Δ[66], 55, 83, 10, Δⵠⵠ],
		[1, Δ[66], 55, 83, 11, 0],
		[1, Δ[66], 55, 83, ⵠⲆⵠᐃⲆ, 0],
		[ᐃⲆⲆ, Δ[66], 55, 83, 13, ⵠⲆⵠ],
		[ᐃⲆⲆ, Δ[66], 55, 83, ΔᐃⵠⲆᐃⵠᐃ, Δⵠⵠ],
		[1, Δ[66], 55, 83, 15, ⲆᐃⲆ],
		[ᐃⲆΔ, Δ[66], 55, 83, 16, Δⵠⵠ],
		[1, Δ[66], 55, 83, ⵠᐃⲆⲆⲆ, 0],
		[1, Δ[66], 55, 83, Ⲇᐃᐃᐃᐃ, 0],
		[ᐃⲆⲆ, Δ[66], 55, 83, 18, Δⵠⵠ],
		[ΔⵠⲆ, Δ[66], 55, 83, ⲆᐃⵠⲆᐃ, 0],
		[1, Δ[66], 55, 83, 21, ΔᐃΔ],
		[1, Δ[66], 55, 83, 22, 0],
		[ᐃⵠⵠ, Δ[66], 55, 83, 23, 0],
		[1, Δ[66], 55, 83, 24, Δⵠⵠ],
		[ⵠΔΔ, Δ[66], 55, 83, 25, ⵠⲆⵠ],
		[ᐃⲆⲆ, Δ[66], 55, 83, 26, 0],
		[1, Δ[66], 55, 83, 27, 0],
		[ᐃⲆΔ, Δ[66], 55, 83, 28, ΔᐃΔ],
		[Δᐃᐃ, Δ[66], 55, 83, 29, Δⵠⵠ],
		[ΔⵠⲆ, Δ[66], 55, 83, 30, ⲆᐃⲆ],
		[ᐃⲆⲆ, Δ[66], 55, 83, 31, ΔᐃΔ],
		[1, Δ[66], 55, 83, 32, ⵠⲆⵠ],
		[ᐃⲆⲆ, Δ[66], 55, 83, 33, 0],
		[1, Δ[66], 55, 83, 34, 0],
		[1, Δ[66], 55, 83, 36, ΔᐃΔ],
		[1, Δ[66], 55, 83, 35, ⵠⲆⵠ],
		[ⵠΔⲆ, Δ[66], 55, 83, 37, 0],
		[1, Δ[66], 55, 83, 38, 0],
		[ᐃⲆⲆ, Δ[66], 55, 81, 38, Δⵠⵠ],
		[1, Δ[66], 55, 82, 38, ᐃΔΔ],
		[ᐃⲆΔ, Δ[66], 55, 80, 38, 0],
		[ᐃⲆⲆ, Δ[66], 55, 79, 38, 0],
		[1, Δ[66], 55, 78, 38, ⵠⲆⵠ],
		[ΔⵠⲆ, Δ[66], 55, 77, 38, 0],
		[ⵠΔⲆ, Δ[66], 55, 76, 38, 0],
		[ⵠⵠᐃ, Δ[66], 55, 75, 38, ⵠᐃΔ],
		[ⵠⵠᐃ, Δ[66], 55, 73, 38, ΔᐃΔ],
		[ᐃⵠⵠ, Δ[66], 55, 74, 38, 0],
		[ⵠΔΔ, Δ[66], 55, 72, 38, ⲆᐃⲆ],
		[ⵠΔᐃ, Δ[66], 55, 71, 38, ᐃΔΔ],
		[ΔⵠⲆ, Δ[66], 55, 70, 38, 0],
		[1, Δ[66], 55, 68, 38, ⵠᐃΔ],
		[ᐃⲆⲆ, Δ[66], 55, 69, 38, 0],
		[ΔⵠⲆ, Δ[66], 55, 67, 38, Δⵠⵠ],
		[ΔⵠⲆ, Δ[66], 55, 66, 38, ᐃΔΔ],
		[1, Δ[66], 55, 65, 38, ⵠᐃΔ],
		[ᐃⲆΔ, Δ[66], 55, 64, 38, ⵠⲆᐃ],
		[ᐃⲆΔ, Δ[66], 55, 63, 38, 0],
		[ⵠΔⲆ, Δ[66], 55, 62, 38, ⵠⲆⵠ],
		[ᐃⲆΔ, Δ[66], 55, 60, 38, ⵠᐃΔ],
		[1, Δ[66], 55, 61, 38, 0],
		[ⵠⵠᐃ, Δ[66], 55, 59, 38, ⵠⲆⵠ],
		[ⵠΔⲆ, Δ[66], 55, 57, 38, ΔᐃΔ],
		[ⲆΔᐃ, Δ[66], 55, 58, 38, ᐃΔΔ],
		[1, Δ[66], 55, 56, 38, 0],
		[ⵠΔΔ, Δ[66], 55, 55, 38, 0],
		[ᐃⵠⵠ, Δ[66], 55, 54, 38, Δⵠⵠ],
		[ⵠⵠᐃ, Δ[66], 55, 53, 38, 0],
		[ⵠⵠᐃ, Δ[66], 55, 52, 38, ⵠⲆⵠ],
		[1, Δ[66], 55, 51, 38, 0],
		[1, Δ[66], 55, 49, 38, Δⵠⵠ],
		[1, Δ[66], 55, 50, 38, ⲆᐃⲆ],
		[ⵠΔᐃ, Δ[66], 55, 48, 38, 0],
		[Δᐃᐃ, Δ[66], 55, 47, 38, Δⵠⵠ],
		[1, Δ[66], 55, 46, 38, 0],
		[1, Δ[66], 55, 45, 38, 0],
		[1, Δ[66], 55, 44, 38, 0],
		[ⵠΔᐃ, Δ[66], 55, 43, 38, ⲆᐃⲆ],
		[ΔⵠⲆ, Δ[66], 55, 42, 38, ⵠⲆᐃ],
		[1, Δ[66], 55, 41, 38, ⵠⲆᐃ],
		[ᐃⵠⵠ, Δ[66], 55, 40, 38, 0],
		[ᐃⵠⵠ, Δ[66], 55, 39, 38, 0],
		[1, Δ[66], 55, 38, 38, ⲆᐃⲆ],
		[1, Δ[66], 55, 37, 38, Δⵠⵠ],
		[1, Δ[66], 55, 36, 38, ⵠⲆᐃ],
		[1, Δ[66], 55, 34, 38, 0],
		[ᐃⲆⲆ, Δ[66], 55, 35, 38, ⵠⲆⵠ],
		[ⲆⵠⲆ, Δ[66], 55, 33, 38, 0],
		[Δᐃᐃ, Δ[66], 55, 31, 38, 0],
		[1, Δ[66], 55, 32, 38, 0],
		[ⲆΔᐃ, Δ[66], 55, 30, 38, 0],
		[1, Δ[66], 55, 29, 38, ᐃΔΔ],
		[ᐃⲆⲆ, Δ[66], 55, 28, 38, 0],
		[Δᐃᐃ, Δ[66], 55, 27, 38, ΔᐃΔ],
		[ᐃⲆⲆ, Δ[66], 55, 26, 38, ΔᐃΔ],
		[ⵠΔⲆ, Δ[66], 55, 25, 38, ΔᐃΔ],
		[1, Δ[66], 55, 24, 38, 0],
		[ⵠΔΔ, Δ[66], 55, 23, 38, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[66], 55, 21, 38, 0],
		[ⲆⵠⲆ, Δ[66], 55, 22, 38, 0],
		[1, Δ[66], 55, 20, 38, 0],
		[1, Δ[66], 55, 19, 38, ⵠⲆⵠ],
		[1, Δ[66], 55, 19, 37, ⵠⲆᐃ],
		[ᐃⵠⵠ, Δ[66], 55, ΔⵠΔⵠⵠ, 36, ΔᐃΔ],
		[1, Δ[66], 55, 19, 35, ΔᐃΔ],
		[1, Δ[66], 55, ⲆΔᐃΔⲆ, 34, 0],
		[1, Δ[66], 55, ΔⵠΔⵠⵠ, 33, 0],
		[1, Δ[66], 55, ΔⵠΔΔΔ, 32, ⵠⲆⵠ],
		[ⵠΔᐃ, Δ[66], 55, ΔⵠΔⵠⵠ, 31, 0],
		[1, Δ[66], 55, 19, 30, 0],
		[1, Δ[66], 55, ΔⲆⵠⵠⵠ, 28, 0],
		[ⵠΔᐃ, Δ[66], 55, 19, 29, 0],
		[1, Δ[66], 55, ⵠⲆⵠⲆⵠ, 27, 0],
		[1, Δ[66], 55, 19, 26, ⵠⲆᐃ],
		[ᐃⵠⵠ, Δ[66], 55, ⲆΔᐃΔⲆ, 25, 0],
		[1, Δ[66], 55, 19, 24, 0],
		[Δᐃᐃ, Δ[66], 55, ᐃᐃⵠᐃⲆ, 23, ⵠᐃΔ],
		[1, Δ[66], 55, 19, 22, 0],
		[1, Δ[66], 55, ΔⵠΔΔΔ, 21, 0],
		[ⵠⵠᐃ, Δ[66], 55, 19, ⲆᐃⵠⲆᐃ, 0],
		[ⲆΔᐃ, Δ[66], 55, 19, ⲆΔᐃΔΔ, 0],
		[ⵠΔΔ, Δ[66], 55, 19, 19, 0],
		[ⵠⵠᐃ, Δ[66], 55, ⵠⲆⵠⲆⵠ, ΔⵠΔΔᐃ, ᐃΔΔ],
		[ⲆΔᐃ, Δ[66], 55, ΔⲆᐃΔⲆ, 17, ΔᐃΔ],
		[ΔⵠⲆ, Δ[66], 55, ᐃᐃⵠᐃⲆ, ΔᐃⲆⲆⲆ, ⵠⲆⵠ],
		[ΔⵠⲆ, Δ[66], 55, ΔⲆᐃΔⲆ, 14, 0],
		[ⲆΔᐃ, Δ[66], 55, Ⲇᐃᐃᐃᐃ, ⵠⵠᐃᐃΔ, ⵠⲆᐃ],
		[1, Δ[66], 55, 19, 12, 0],
		[ⲆΔᐃ, Δ[66], 55, 19, ΔᐃΔⵠⲆ, Δⵠⵠ],
		[ᐃⲆⲆ, Δ[66], 55, 19, 10, 0],
		[1, Δ[66], 55, 19, 9, 0],
		[1, Δ[66], 55, ⵠⲆⵠⲆⵠ, ⵠᐃⵠᐃⵠ, ⵠⲆᐃ],
		[ⲆΔᐃ, Δ[66], 55, 84, 35, ⵠⲆⵠ],
		[ⵠΔᐃ, Δ[66], 55, 84, 32, 0],
		[1, Δ[66], 55, 84, 25, 0],
		[ᐃⵠⵠ, Δ[66], 50, 84, 24, 0],
		[1, Δ[66], 55, 84, ⲆⲆᐃᐃᐃ, 0],
		[1, Δ[66], 55, 84, 17, 0],
		[ⵠΔᐃ, Δ[66], 55, 84, ᐃΔⲆⲆⲆ, ⲆᐃⲆ],
		[1, Δ[66], 50, 84, ΔⲆΔⵠⲆ, ⲆᐃⲆ],
		[1, Δ[66], 55, 84, ⲆᐃⵠⲆⵠ, 0],
		[1, Δ[66], 55, 84, ΔⲆⲆⲆⲆ, 0],
		[ᐃⲆΔ, Δ[66], 50, 85, ⵠⵠⵠⵠⵠ, ⵠⲆᐃ],
		[ᐃⵠⵠ, Δ[66], 55, 81, 39, ⵠⲆᐃ],
		[ⵠΔⲆ, Δ[66], 50, 83, 40, ⲆᐃⲆ],
		[1, Δ[66], 55, 72, 39, ⵠⲆⵠ],
		[ⵠⵠᐃ, Δ[66], 55, 74, 39, 0],
		[ⵠⵠᐃ, Δ[66], 55, 66, 39, 0],
		[ⵠⵠᐃ, Δ[66], 55, 65, 39, ⵠⲆⵠ],
		[ⵠΔΔ, Δ[66], 50, 67, 41, 0],
		[1, Δ[66], 55, 56, 39, 0],
		[Δᐃᐃ, Δ[66], 55, 58, 39, 0],
		[1, Δ[66], 55, 50, 39, 0],
		[ⲆΔᐃ, Δ[66], 50, 49, 39, 0],
		[ᐃⲆⲆ, Δ[66], 55, 44, 39, 0],
		[1, Δ[66], 55, 42, 39, ⵠⲆᐃ],
		[1, Δ[66], 50, 43, 39, ᐃΔΔ],
		[ⲆΔᐃ, Δ[66], 50, 41, 39, 0],
		[ΔⵠⲆ, Δ[66], 50, 37, 39, 0],
		[ᐃⲆⲆ, Δ[66], 55, 36, 39, 0],
		[ⵠΔΔ, Δ[66], 55, 32, 39, ⵠⲆⵠ],
		[ᐃⵠⵠ, Δ[66], 50, 31, 39, 0],
		[1, Δ[66], 55, 23, 39, 0],
		[ᐃⵠⵠ, Δ[66], 55, ⲆⲆΔⲆⵠ, 37, 0],
		[ⵠΔΔ, Δ[66], 50, 18, 36, 0],
		[ⲆⵠⲆ, Δ[66], 55, ⲆᐃΔᐃⲆ, 35, ΔᐃΔ],
		[Δᐃᐃ, Δ[66], 50, 18, 34, ⵠᐃΔ],
		[1, Δ[66], 55, 18, 31, ⲆᐃⲆ],
		[1, Δ[66], 50, 18, 30, ⵠⲆⵠ],
		[ⵠΔⲆ, Δ[66], 55, ⲆᐃΔᐃⲆ, 25, ΔᐃΔ],
		[1, Δ[66], 50, 18, 24, ⵠⲆⵠ],
		[1, Δ[66], 55, 18, 20, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[66], 55, 18, 14, ⲆᐃⲆ],
		[ΔⵠⲆ, Δ[66], 50, ⲆᐃΔΔⵠ, ⵠΔΔΔⲆᐃΔ, ᐃΔΔ],
		[ⵠΔᐃ, Δ[66], 55, 18, 8, ⵠⲆᐃ],
		[ⵠΔᐃ, Δ[66], 54, 90, 154, 0],
		[1, Δ[66], 51, 89, 154, ΔᐃΔ],
		[1, Δ[66], 54, 85, 154, 0],
		[1, Δ[66], 54, 81, 154, 0],
		[1, Δ[66], 54, 76, 154, ΔᐃΔ],
		[ΔⵠⲆ, Δ[66], 54, 70, 154, 0],
		[ΔⵠⲆ, Δ[66], 54, 66, 154, 0],
		[ⵠΔⲆ, Δ[66], 54, 61, 154, ΔᐃΔ],
		[1, Δ[66], 54, 56, 154, ΔᐃΔ],
		[1, Δ[66], 54, 53, 154, 0],
		[1, Δ[66], 54, 45, 154, ᐃΔΔ],
		[ⵠΔΔ, Δ[66], 54, 42, 154, 0],
		[ᐃⵠⵠ, Δ[66], 54, 37, 154, 0],
		[1, Δ[66], 54, 30, 154, 0],
		[1, Δ[66], 54, 25, 154, 0],
		[ⲆⵠⲆ, Δ[66], 54, ⵠΔᐃⲆⲆⵠⵠ, 154, ⵠⲆᐃ],
		[1, Δ[66], 54, 10, 154, Δⵠⵠ],
		[ⲆⵠⲆ, Δ[66], 54, ⲆᐃⲆⵠⲆ, 154, ᐃΔΔ],
		[ⵠΔⲆ, Δ[66], 55, ⲆΔⲆΔⵠ, 9, Δⵠⵠ],
		[Δᐃᐃ, Δ[66], 53, 93, 154, 0],
		[ΔⵠⲆ, Δ[66], 53, 93, 156, 0],
		[ᐃⲆΔ, Δ[66], 53, 93, 158, 0],
		[1, Δ[66], 52, 91, 157, 0],
		[ᐃⲆΔ, Δ[66], 53, 93, 159, 0],
		[1, Δ[66], 53, 93, 161, 0],
		[ⵠΔⲆ, Δ[66], 53, 93, 162, ⵠⲆⵠ],
		[ᐃⲆⲆ, Δ[66], 53, 93, 163, ΔᐃΔ],
		[1, Δ[66], 53, 93, 164, 0],
		[ⵠⵠᐃ, Δ[66], 53, 93, 165, ⵠⲆᐃ],
		[1, Δ[66], 53, 93, 166, ⵠᐃΔ],
		[1, Δ[66], 53, 93, 167, 0],
		[ⵠΔⲆ, Δ[66], 52, 91, 167, 0],
		[1, Δ[66], 53, 93, 169, ΔᐃΔ],
		[ⵠΔΔ, Δ[66], 53, 93, 168, Δⵠⵠ],
		[ΔⵠⲆ, Δ[66], 53, 93, 170, 0],
		[1, Δ[66], 53, 93, 171, 0],
		[Δᐃᐃ, Δ[66], 53, 93, 173, 0],
		[ᐃⲆΔ, Δ[66], 53, 93, 176, 0],
		[1, Δ[66], 53, 93, 175, 0],
		[ⵠΔᐃ, Δ[66], 53, 92, 169, 0],
		[ⲆΔᐃ, Δ[66], 53, 93, 178, 0],
		[1, Δ[66], 53, 93, 179, ⵠⲆⵠ],
		[ⵠΔᐃ, Δ[66], 53, 93, 180, Δⵠⵠ],
		[ᐃⵠⵠ, Δ[66], 53, 93, 181, Δⵠⵠ],
		[ⲆΔᐃ, Δ[66], 53, 93, 183, ΔᐃΔ],
		[1, Δ[66], 53, 93, 184, 0],
		[1, Δ[66], 53, 93, 186, ⲆᐃⲆ],
		[1, Δ[66], ⲆΔᐃΔΔ, 95, 185, 0],
		[Δᐃᐃ, Δ[66], 53, 93, 187, ⲆᐃⲆ],
		[ⵠΔⲆ, Δ[66], 53, 93, 188, 0],
		[1, Δ[66], 52, 91, 186, 0],
		[1, Δ[66], 53, 93, 190, Δⵠⵠ],
		[ᐃⲆⲆ, Δ[66], 53, 93, 192, ᐃΔΔ],
		[1, Δ[66], 53, 93, 195, 0],
		[1, Δ[66], 53, 93, 194, ⲆᐃⲆ],
		[ⵠΔⲆ, Δ[66], 52, 91, 196, ⲆᐃⲆ],
		[ⵠⵠᐃ, Δ[66], 53, 93, 197, ⵠᐃΔ],
		[1, Δ[66], 53, 93, 200, 0],
		[ᐃⲆΔ, Δ[66], 53, 93, 198, ⲆᐃⲆ],
		[ⲆΔᐃ, Δ[66], 53, 93, 201, 0],
		[1, Δ[66], 53, 93, 202, ⵠⲆᐃ],
		[Δᐃᐃ, Δ[66], 53, 93, 203, 0],
		[ⵠΔΔ, Δ[66], 53, 93, 204, Δⵠⵠ],
		[ⵠΔᐃ, Δ[66], 53, 93, 206, ᐃΔΔ],
		[ᐃⲆΔ, Δ[66], 53, 93, 205, ᐃΔΔ],
		[ᐃⲆΔ, Δ[66], 53, 93, 207, 0],
		[1, Δ[66], 53, 93, 209, 0],
		[ΔⵠⲆ, Δ[66], 53, 93, 210, 0],
		[1, Δ[66], 53, 93, 212, ⲆᐃⲆ],
		[Δᐃᐃ, Δ[66], 52, 91, 204, 0],
		[1, Δ[66], 53, 93, 213, 0],
		[1, Δ[66], 53, 93, 214, ΔᐃΔ],
		[ⲆΔᐃ, Δ[66], 53, 93, 215, 0],
		[ⵠΔΔ, Δ[66], 53, 93, 216, ᐃΔΔ],
		[1, Δ[66], 53, 93, 217, Δⵠⵠ],
		[1, Δ[66], 53, 93, 218, ⵠⲆⵠ],
		[ⵠΔⲆ, Δ[66], 53, 93, 219, 0],
		[1, Δ[66], 53, 93, 220, 0],
		[1, Δ[66], 52, 92, 213, 0],
		[1, Δ[66], 52, 92, 206, ⵠⲆⵠ],
		[1, Δ[66], 52, 92, 202, 0],
		[Δᐃᐃ, Δ[66], 53, 92, 201, Δⵠⵠ],
		[ⵠⵠᐃ, Δ[66], 52, 92, 194, 0],
		[1, Δ[66], 52, 92, 178, ᐃΔΔ],
		[1, Δ[66], 52, 92, 171, Δⵠⵠ],
		[1, Δ[66], 53, 93, 221, 0],
		[1, Δ[66], 53, 93, 222, ⵠᐃΔ],
		[1, Δ[66], 53, 93, 223, 0],
		[ⲆΔᐃ, Δ[66], 53, 93, 225, 0],
		[ⵠΔⲆ, Δ[66], 53, 93, 228, 0],
		[1, Δ[66], 53, 93, 227, 0],
		[ⵠΔᐃ, Δ[66], 52, 92, 217, ⵠⲆⵠ],
		[ᐃⲆΔ, Δ[66], 53, 92, 218, 0],
		[1, Δ[66], 52, 92, 221, 0],
		[ⵠⵠᐃ, Δ[66], 52, 92, 225, ⵠⲆᐃ],
		[1, Δ[66], 52, 93, 226, 0],
		[ΔⵠⲆ, Δ[66], 52, 93, 224, ᐃΔΔ],
		[ⲆⵠⲆ, Δ[66], 52, 93, 208, ΔᐃΔ],
		[1, Δ[66], 52, 93, 211, ⵠⲆⵠ],
		[ⵠΔⲆ, Δ[66], 52, 93, 196, 0],
		[1, Δ[66], 52, 93, 199, ΔᐃΔ],
		[1, Δ[66], 52, 93, 189, 0],
		[ᐃⲆⲆ, Δ[66], 52, 93, 191, 0],
		[1, Δ[66], 52, 93, 193, 0],
		[1, Δ[66], 52, 93, 182, Δⵠⵠ],
		[1, Δ[66], 52, 93, 185, ⵠⲆᐃ],
		[ᐃⲆⲆ, Δ[66], 52, 93, 172, ⵠᐃΔ],
		[1, Δ[66], 52, 93, 174, Δⵠⵠ],
		[Δᐃᐃ, Δ[66], 52, 93, 177, 0],
		[ᐃⲆΔ, Δ[66], 52, 93, 155, Δⵠⵠ],
		[ᐃⵠⵠ, Δ[66], 52, 93, 157, 0],
		[1, Δ[66], 52, 93, 160, 0],
		[ᐃⲆⲆ, Δ[66], 52, 92, 162, ΔᐃΔ],
		[ⲆⵠⲆ, Δ[66], 53, 93, 229, ⲆᐃⲆ],
		[1, Δ[66], 53, 93, 231, ⵠᐃΔ],
		[1, Δ[66], 53, 93, 232, ᐃΔΔ],
		[1, Δ[66], 53, 93, 234, 0],
		[ⵠΔΔ, Δ[66], 52, 93, 230, 0],
		[1, Δ[66], 52, 92, 228, 0],
		[Δᐃᐃ, Δ[66], 53, 93, 235, ᐃΔΔ],
		[1, Δ[66], 53, 93, 236, ⵠᐃΔ],
		[ⲆⵠⲆ, Δ[66], 53, 93, 237, 0],
		[ⲆⵠⲆ, Δ[66], 53, 93, 239, 0],
		[1, Δ[66], 53, 93, 240, 0],
		[ⵠΔᐃ, Δ[66], 52, 93, 238, 0],
		[ⵠΔⲆ, Δ[66], 53, 93, 241, 0],
		[1, Δ[66], 52, 93, 242, ΔᐃΔ],
		[Δᐃᐃ, Δ[66], 52, 93, 243, ⵠᐃΔ],
		[ⵠⵠᐃ, Δ[66], 53, 93, 244, ⵠⲆᐃ],
		[1, Δ[66], 53, 93, 246, ⲆᐃⲆ],
		[1, Δ[66], 53, 93, 245, 0],
		[ΔⵠⲆ, Δ[66], 52, 93, 247, 0],
		[ᐃⵠⵠ, Δ[66], 53, 93, 248, 0],
		[ⵠΔⲆ, Δ[66], 52, 92, 235, 0],
		[ᐃⲆΔ, Δ[66], 52, 92, 245, ⵠⲆᐃ],
		[1, Δ[66], 52, 93, 249, ⵠᐃΔ],
		[ΔⵠⲆ, Δ[66], 53, 93, 250, 0],
		[1, Δ[66], 53, 93, 251, ⵠᐃΔ],
		[ᐃⵠⵠ, Δ[66], 53, 93, 252, 0],
		[1, Δ[66], 53, 93, 254, 0],
		[ⵠΔⲆ, Δ[66], 52, 93, 253, 0],
		[1, Δ[66], 52, 93, 255, 0],
		[1, Δ[66], 53, 93, 257, ⵠⲆᐃ],
		[1, Δ[66], 53, 93, 256, 0],
		[ΔⵠⲆ, Δ[66], 52, 93, 258, 0],
		[ⵠⵠᐃ, Δ[66], 53, 93, 259, Δⵠⵠ],
		[1, Δ[66], 52, 93, 260, 0],
		[1, Δ[66], 53, 93, 263, 0],
		[1, Δ[66], 53, 93, 264, 0],
		[1, Δ[66], 53, 93, 265, ⵠⲆⵠ],
		[ⵠΔΔ, Δ[66], 52, 93, 266, ⵠⲆⵠ],
		[ⵠΔΔ, Δ[66], 53, 93, 267, 0],
		[ᐃⵠⵠ, Δ[66], 52, 93, 268, ᐃΔΔ],
		[ⵠΔⲆ, Δ[66], 52, 93, 269, 0],
		[1, Δ[66], 53, 93, 276, ᐃΔΔ],
		[1, Δ[66], 53, 93, 277, 0],
		[1, Δ[66], 52, 93, 278, ⵠᐃΔ],
		[ⵠΔⲆ, Δ[66], 53, 93, 279, ⲆᐃⲆ],
		[1, Δ[66], 52, 93, 280, 0],
		[ⵠΔⲆ, Δ[66], 52, 93, 283, 0],
		[Δᐃᐃ, Δ[66], 53, 93, 284, ⵠⲆᐃ],
		[ΔⵠⲆ, Δ[66], 53, 93, 285, ⲆᐃⲆ],
		[ⵠΔᐃ, Δ[66], 53, 93, 286, 0],
		[1, Δ[66], 52, 93, 287, 0],
		[1, Δ[66], 53, 93, 288, ⲆᐃⲆ],
		[1, Δ[66], 53, 93, 289, ⲆᐃⲆ],
		[1, Δ[66], 52, 93, 290, 0],
		[ⲆⵠⲆ, Δ[66], 52, 93, 291, 0],
		[ⲆⵠⲆ, Δ[66], 53, 93, 292, ⵠⲆⵠ],
		[ⲆΔᐃ, Δ[66], 52, 93, 293, 0],
		[1, Δ[66], 53, 93, 294, ⵠⲆᐃ],
		[ⵠⵠᐃ, Δ[66], 52, 93, 295, ⵠⲆⵠ],
		[1, Δ[66], 52, 93, 296, ⵠᐃΔ],
		[1, Δ[66], 53, 93, 297, ⵠᐃΔ],
		[1, Δ[66], 53, 93, 298, ⲆᐃⲆ],
		[1, Δ[66], 52, 93, 299, ΔᐃΔ],
		[ᐃⲆⲆ, Δ[66], 53, 93, 300, 0],
		[ⵠΔⲆ, Δ[66], 52, 92, 298, ⵠᐃΔ],
		[1, Δ[66], 52, 92, 293, 0],
		[1, "r", 92, 262, 0],
		[ⵠⵠᐃ, "r", 93, 262, 0],
		[1, Δ[66], 52, 93, 261, 0],
		[1, Δ[278], Δⵠⵠ, 223, 104, ⲆⵠⲆ],
		[1, Δ[278], Δⵠᐃᐃ, 223, 105, 1],
		[ⵠΔᐃ, Δ[278], 2, 223, 102, 1],
		[1, Δ[278], 2, 223, 103, ⵠⵠᐃ],
		[1, Δ[526], 3, 141, 8, ⵠΔΔ],
		[1, Δ[278], 2, 140, Ⲇᐃᐃⵠⵠ, ᐃⲆΔ],
		[1, Δ[526], ⲆⵠⲆᐃ, 142, Ⲇᐃᐃⵠⵠ, 1],
		[Δᐃᐃ, Δ[66], 4, 81, 149, 0],
		[ⲆⵠⲆ, "f", 0, 83, 148, 1],
		[ⲆⵠⲆ, "f", 1, 82, 149, Δᐃᐃ],
		[1, Δ[66], 34, 81, 156, 0],
		[1, Δ[66], 51, 17, 9, ΔᐃΔ],
		[1, Δ[66], 54, Ⲇᐃⵠᐃᐃ, 9, 0],
		[Δᐃᐃ, Δ[66], 54, ⵠΔΔΔⲆᐃΔ, ᐃⵠⲆⲆᐃ, 0],
		[Δᐃᐃ, Δ[278], 3, 223, 106, 1],
		[ⵠΔΔ, "p", ΔᐃΔ, 119, 279, 1],
		[ⵠΔⲆ, "p", 0, 109, 242, 1],
		[1, Δ[278], 1, 29, 9, ᐃⲆⲆ],
		[1, Δ[278], ΔⲆᐃⲆ, 30, 9, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 31, ΔⲆⲆⲆⲆ, 1],
		[ⲆⵠⲆ, Δ[278], 2, 32, 9, 1],
		[1, Δ[278], 2, 33, 9, 1],
		[ⲆΔᐃ, Δ[278], ⲆᐃᐃΔ, 69, 9, 1],
		[1, Δ[278], Δᐃᐃⵠ, 71, ⵠⲆᐃΔᐃ, 1],
		[ᐃⵠⵠ, Δ[278], 2, 70, 9, ᐃⲆΔ],
		[1, Δ[278], 1, 72, 9, 1],
		[1, Δ[278], ⲆⲆΔΔ, 73, 9, 1],
		[1, Δ[66], 10, 31, ᐃᐃᐃⵠⵠ, 0],
		[1, Δ[66], ⵠⲆΔΔⵠ, 29, ᐃᐃᐃⵠⵠ, 0],
		[1, Δ[66], ΔⲆⲆΔΔ, 44, 10, 0],
		[ⲆⵠⲆ, Δ[66], ᐃᐃΔΔ, 87, 10, 0],
		[ⵠΔⲆ, Δ[66], 4, 86, ΔⲆⲆΔΔ, ⲆᐃⲆ],
		[ⵠΔᐃ, Δ[66], 5, 87, 9, 0],
		[1, Δ[66], 5, ⲆⵠΔΔΔᐃᐃ, 10, ᐃΔΔ],
		[ΔⵠⲆ, Δ[66], ΔⵠⲆᐃ, 14, ΔΔⵠⵠΔ, 0],
		[1, Δ[66], ⲆⵠⲆᐃ, 16, 10, 0],
		[1, Δ[66], 4, 17, ⲆΔⲆᐃⵠ, 0],
		[1, Δ[278], 2, 146, 9, ⵠΔΔ],
		[1, Δ[278], ⲆⲆΔΔ, 148, ΔⲆⲆⲆⲆ, ⲆⵠⲆ],
		[ᐃⲆΔ, Δ[278], ᐃⵠΔⲆ, 150, 9, ⵠΔⲆ],
		[ⵠⵠᐃ, Δ[278], 2, 153, Ⲇᐃᐃⵠⵠ, 1],
		[1, Δ[278], ⲆᐃᐃΔ, 155, ⵠᐃΔΔⲆ, 1],
		[1, Δ[278], ⵠΔΔ, 149, ᐃᐃⵠᐃΔ, ᐃⲆΔ],
		[ⵠΔΔ, Δ[278], ΔⵠⲆ, 154, 9, ΔⵠⲆ],
		[ᐃⲆΔ, Δ[278], ᐃⲆᐃⲆ, 147, ᐃΔⲆⵠΔ, ⵠⵠᐃ],
		[ⵠⵠᐃ, Δ[278], 3, 151, ᐃⵠⲆⲆᐃ, ΔⵠⲆ],
		[ⵠΔΔ, Δ[278], 3, 152, 9, 1],
		[ᐃⲆΔ, Δ[278], ᐃΔᐃⲆ, 156, 9, ⵠΔΔ],
		[1, Δ[278], 3, 157, 9, Δᐃᐃ],
		[1, Δ[278], ⵠᐃⲆᐃ, 158, ᐃΔⲆⵠΔ, 1],
		[1, Δ[278], 3, 159, 9, 1],
		[Δᐃᐃ, Δ[278], 3, 160, 9, 1],
		[1, Δ[278], ⲆᐃⲆ, 161, ᐃᐃⵠᐃΔ, ᐃⲆΔ],
		[1, Δ[278], ⲆᐃᐃΔ, 162, 9, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 163, 9, 1],
		[ⲆΔᐃ, Δ[278], 1, 164, ᐃΔⲆⵠΔ, ⲆⵠⲆ],
		[1, Δ[278], 2, 165, Ⲇᐃᐃⵠⵠ, 1],
		[ⲆⵠⲆ, Δ[278], Ⲇⵠᐃᐃ, 166, 9, 1],
		[ᐃⵠⵠ, Δ[278], ΔⵠᐃⲆ, 168, ᐃⵠⲆⲆᐃ, 1],
		[1, Δ[278], 3, 170, 9, ᐃⲆⲆ],
		[ⵠΔΔ, Δ[278], 1, 169, ⵠⲆᐃΔᐃ, 1],
		[1, Δ[278], 2, 167, 9, ᐃⲆⲆ],
		[1, Δ[278], ᐃⵠΔⲆ, 171, Ⲇᐃᐃⵠⵠ, 1],
		[ⵠΔᐃ, Δ[278], 2, 173, ᐃᐃⵠᐃΔ, ⵠⵠᐃ],
		[ⲆⵠⲆ, Δ[278], Δᐃᐃⵠ, 172, Ⲇⵠᐃⵠᐃ, 1],
		[ⲆⵠⲆ, Δ[278], Δⵠᐃᐃ, 174, Ⲇⵠᐃⵠᐃ, 1],
		[1, Δ[278], ᐃⲆΔ, 175, Ⲇᐃᐃⵠⵠ, 1],
		[1, Δ[278], 3, 176, 9, Δᐃᐃ],
		[1, Δ[278], ᐃⲆᐃⲆ, 178, ΔⲆⲆⲆⲆ, ⲆⵠⲆ],
		[1, Δ[278], 3, 179, Ⲇᐃᐃⵠⵠ, ⵠΔΔ],
		[1, Δ[278], 0, 180, ⵠⲆᐃΔᐃ, 1],
		[ⲆⵠⲆ, Δ[278], 2, 177, ᐃⵠⲆⲆᐃ, ⲆⵠⲆ],
		[1, Δ[278], Δᐃᐃⵠ, 182, 9, ⵠΔᐃ],
		[1, Δ[278], 2, 181, ΔⲆⲆⲆⲆ, 1],
		[1, Δ[278], 2, 183, ᐃⵠⲆⲆᐃ, 1],
		[1, Δ[278], 2, 184, ᐃᐃⵠᐃΔ, ⲆⵠⲆ],
		[ⲆⵠⲆ, Δ[278], 2, 185, 9, ⵠΔⲆ],
		[ⵠΔᐃ, Δ[278], ⲆᐃᐃΔ, 186, 9, 1],
		[1, Δ[278], ᐃⵠⵠ, 187, 9, 1],
		[1, Δ[278], ᐃⵠΔⲆ, 188, 9, 1],
		[1, Δ[278], ⲆΔⲆΔ, 189, 9, 1],
		[1, Δ[278], ᐃⲆᐃⲆ, 190, ᐃⵠⲆⲆᐃ, ⵠΔⲆ],
		[1, Δ[278], Ⲇⵠᐃᐃ, 191, 9, ΔⵠⲆ],
		[ⲆⵠⲆ, Δ[278], 2, 192, ⵠⲆᐃΔᐃ, ⵠⵠᐃ],
		[Δᐃᐃ, Δ[278], ⲆᐃⲆ, 193, ᐃΔⲆⵠΔ, 1],
		[Δᐃᐃ, Δ[278], ⲆⲆΔΔ, 194, 9, 1],
		[1, Δ[278], 2, 196, ⲆⲆΔᐃⲆ, 1],
		[1, Δ[278], ΔⲆᐃⲆ, 198, 9, 1],
		[1, Δ[278], 2, 200, ΔⲆⲆⲆⲆ, 1],
		[1, Δ[278], ΔⵠᐃⲆ, 195, ᐃᐃⵠᐃΔ, 1],
		[ᐃⲆΔ, Δ[278], ΔⵠᐃⲆ, 197, ⵠᐃΔΔⲆ, 1],
		[1, Δ[278], 3, 199, 9, ⲆΔᐃ],
		[1, Δ[278], 0, 201, 9, Δᐃᐃ],
		[1, Δ[278], ᐃⵠΔⲆ, 202, 9, ᐃⲆΔ],
		[1, Δ[278], 2, 203, ⲆⲆΔᐃⲆ, ⲆΔᐃ],
		[ᐃⲆⲆ, Δ[278], 3, 208, ⵠᐃΔΔⲆ, ᐃⲆΔ],
		[ⵠⵠᐃ, Δ[278], 3, 207, ⵠᐃΔΔⲆ, ⲆΔᐃ],
		[ⵠΔΔ, Δ[278], ⲆΔⲆΔ, 206, 9, ⲆⵠⲆ],
		[ΔⵠⲆ, Δ[278], ᐃⵠⲆⵠ, 205, 9, ᐃⲆⲆ],
		[ⲆΔᐃ, Δ[278], 3, 204, 9, ⲆⵠⲆ],
		[1, Δ[278], ᐃⲆᐃⲆ, 214, Ⲇᐃᐃⵠⵠ, ⲆⵠⲆ],
		[1, Δ[278], 3, 215, 9, ⵠⵠᐃ],
		[1, Δ[278], ᐃⵠⲆⵠ, 216, ᐃᐃⵠᐃΔ, ΔⵠⲆ],
		[ⵠΔⲆ, Δ[278], ΔⵠᐃⲆ, 217, 9, 1],
		[1, Δ[278], 3, 218, Ⲇᐃᐃⵠⵠ, ⵠΔᐃ],
		[ⵠΔⲆ, "b", ᐃΔΔ, ⲆΔΔΔ, 159, Δⵠⵠ],
		[ᐃⵠⵠ, "b", 0, 5, 171, 0],
		[2, Δ[361], ᐃⵠⵠ, 122, 63, 0],
		[ΔⲆᐃⲆ, Δ[361], ⲆⲆᐃⲆ, 119, 277, 0],
		[2, Δ[361], 2, 109, 244, ᐃΔΔ],
		[ΔⲆᐃⲆ, Δ[361], 2, 114, 205, 0],
		[ⲆⲆᐃⲆ, Δ[361], 1, 120, 150, 0],
		[ⲆⲆΔΔ, Δ[361], ΔⲆᐃⲆ, 154, 129, ᐃΔΔ],
		[2, Δ[361], 0, 184, 158, ᐃΔΔ],
		[2, Δ[361], 1, 208, 128, ⵠⲆⵠ],
		[ⵠΔᐃⵠ, Δ[361], ᐃⲆⲆ, 215, 132, 0],
		[2, Δ[361], 1, 214, 128, ⵠᐃΔ],
		[2, Δ[361], ᐃⲆΔ, 209, 132, Δⵠⵠ],
		[ⵠΔⲆ, Δ[526], ΔⵠⲆⲆ, 217, 20, 1],
		[1, Δ[526], 1, 215, ⵠᐃΔⵠⲆ, ΔⵠⲆ],
		[ⲆⵠⲆ, Δ[526], ⵠᐃΔ, 212, ⵠⲆΔⲆΔ, 1],
		[ΔⵠⲆ, Δ[526], 4, 214, 18, ⲆΔᐃ],
		[1, Δ[526], ⲆⵠⲆᐃ, 216, ΔⵠΔΔΔ, 1],
		[ⵠⵠᐃ, Δ[526], 4, 211, ⲆΔⲆΔⵠ, 1],
		[1, Δ[526], ⵠᐃⲆᐃ, 210, ᐃΔⵠⲆⲆ, 1],
		[1, Δ[526], Ⲇⵠᐃᐃ, 215, 21, 1],
		[1, Δ[526], 1, 214, ᐃΔⲆΔᐃ, Δᐃᐃ],
		[1, Δ[526], ᐃⲆᐃⲆ, 214, 22, 1],
		[ⵠΔᐃ, Δ[526], 3, 214, 24, 1],
		[ᐃⵠⵠ, Δ[526], 4, 214, 26, 1],
		[ⲆΔᐃ, Δ[526], ⲆⵠⵠⲆ, 213, 27, ⵠⵠᐃ],
		[1, Δ[526], ⵠⵠᐃ, 212, 28, 1],
		[1, Δ[526], ⲆⲆᐃⲆ, 212, 29, 1],
		[ⵠⵠᐃ, Δ[526], ⵠⵠⲆⵠ, 212, 30, 1],
		[ⲆΔᐃ, Δ[526], 4, 208, ΔⲆⵠⵠⵠ, ᐃⲆⲆ],
		[1, Δ[526], ⵠΔΔⵠ, 207, 19, ⵠΔᐃ],
		[1, Δ[526], 1, 206, ΔⵠΔΔΔ, 1],
		[1, Δ[526], ⵠΔΔ, 205, 19, 1],
		[ⲆΔᐃ, Δ[526], 2, 204, ⲆΔᐃΔⲆ, 1],
		[ᐃⲆⲆ, Δ[526], 5, 203, ⵠⲆⵠⲆⵠ, 1],
		[1, Δ[526], ΔⵠⲆⲆ, 210, 17, ⲆΔᐃ]
	];
	var ⵠⲆ = ⵠᐃΔ;
	let ⵠ = {
		"ⵠᐃΔⲆΔ": ["#133A2B", Δ[127]],
		"ΔΔᐃⵠⵠⵠΔⵠᐃ": [Δ[288], Δ[91]],
		"ⵠᐃᐃⵠⲆΔΔ": ["#4EB687", Δ[393]],
		"ΔⵠᐃᐃᐃΔΔ": ["#664516", "#13474C"],
		"ⲆⲆΔᐃΔⲆΔ": ["#FCEFBB", "#0F4D48"],
		"ΔⲆΔᐃᐃΔΔ": ["#C1AA7E", "#0F423D"],
		"ⲆⵠⵠⲆⲆΔΔ": ["#594837", Δ[130]],
		"ᐃⲆᐃΔΔⵠⲆ": ["#A5D6D6", "#539CA0"],
		"ᐃⵠΔΔⲆ": [Δ[559], Δ[149]],
		"ᐃⵠΔⵠΔⲆᐃ": [Δ[464], Δ[388]],
		"ᐃⵠΔᐃⵠⵠⵠ": [Δ[342], Δ[326]],
		"ⵠⲆᐃⲆΔΔΔ": ["#ECF7F9", "#539CA0"],
		"ⵠᐃⵠⲆⲆᐃᐃ": [Δ[560], Δ[560]],
		"ⲆΔⲆⵠⵠᐃⵠ": [Δ[560], Δ[560]],
		"ᐃᐃᐃΔᐃᐃᐃ": ["#1C9BA4", "#00272F"],
		"ⲆⵠⵠΔΔ": ["#2D2017", "#031C1E"],
		"ΔΔΔ": ⵠⲆⵠ,
		"ⵠᐃⲆ": 1,
		"ⲆⲆⵠΔᐃⲆⵠΔⲆ": 2300,
		"ᐃᐃΔΔⲆⵠⵠΔⵠ": 2290,
		"ⲆᐃⲆᐃⵠⲆᐃ": 34,
		"ᐃⵠᐃⵠΔⵠⲆ": ⲆΔΔΔ,
		"ⲆⲆⲆⲆᐃᐃΔ": 68,
		"ᐃⵠΔⲆⲆΔⲆ": 34,
		"ᐃⵠΔⵠⲆⵠΔ": 5,
		"ⵠᐃⲆΔⲆᐃⵠ": ᐃⲆΔ,
		"ⲆⵠⵠⲆΔⲆⵠ": .6,
		"ⵠᐃᐃᐃΔⵠⲆ": .25,
		"ⵠΔⲆᐃᐃⵠΔ": 50,
		"ⵠⵠⲆΔΔⲆΔ": ⵠⲆΔΔⵠ,
		"ⲆⲆΔⲆⵠᐃⲆ": 75,
		"ᐃᐃΔⵠᐃΔᐃ": 20,
		"ⵠⲆⲆΔΔᐃΔ": 5,
		"ⵠⲆᐃⲆⵠ": ⵠⲆ++,
		"ᐃⲆΔⵠᐃ": ⵠⲆ++,
		"ΔⲆⵠΔⲆ": ⵠⲆ++,
		"Ⲇⵠᐃᐃᐃ": ⵠⲆ++,
		"ⵠᐃⲆⲆᐃ": ⵠⲆ++,
		"ⲆⲆⲆΔΔ": ⵠⲆ++,
		"ᐃΔᐃᐃⲆ": ⵠⲆ++,
		"Ⲇᐃᐃⵠᐃ": ⵠⲆ++,
		"ⲆΔⲆⵠΔ": ⵠⲆ++,
		"ᐃᐃⲆⲆⲆ": ⵠⲆ++,
		"ⲆⲆⵠⲆⲆ": ⵠⲆ++,
		"ᐃⵠⲆΔᐃ": ⵠⲆ++,
		"ΔᐃⵠᐃⲆ": ⵠⲆ++,
		"ⵠᐃⵠⵠΔ": ⵠⲆ++,
		"ⵠΔⲆⲆᐃ": ⵠⲆ++,
		"ᐃⵠᐃⵠⲆ": ⵠⲆ++,
		"ⵠᐃⵠⲆᐃ": ⵠⲆ++,
		"ΔⵠᐃⵠΔ": ⵠⲆ++,
		"ᐃⵠᐃᐃⲆ": ⵠⲆ++,
		"ᐃⲆΔⵠⵠ": ⵠⲆ++,
		"ⵠᐃⵠΔⲆ": ⵠⲆ++,
		"ⵠΔⲆᐃΔ": ⵠⲆ++,
		"ⲆΔΔᐃⵠ": ⵠⲆ++,
		"ΔⵠⵠⲆⲆ": ⵠⲆ++,
		"ᐃΔᐃΔΔ": ⵠⲆ++,
		"ᐃⲆⲆⵠΔ": ⵠⲆ++,
		"ⵠΔΔΔΔ": ⵠⲆ++,
		"ⲆᐃⵠΔΔ": ⵠⲆ++,
		"Δⵠᐃᐃⵠ": ⵠⲆ++,
		"ⲆⲆⲆⲆ": ⵠⲆ++,
		"ⵠΔⵠⵠᐃ": ⵠⲆ++,
		"ⲆᐃΔⵠⲆ": ⵠⲆ++,
		"ΔⵠᐃᐃⲆ": ⵠⲆ++,
		"ⵠⲆⲆⲆΔ": ⵠⲆ++,
		"ᐃⲆⵠᐃΔ": ⵠⲆ++,
		"ΔΔΔⲆⲆ": ⵠⲆ++,
		"ⲆᐃᐃⵠⲆ": ⵠⲆ++,
		"ⵠᐃΔΔᐃ": ⵠⲆ++,
		"ⵠΔⲆⵠⵠ": ⵠⲆ++,
		"ⵠΔⵠⵠΔ": ⵠⲆ++,
		"ⲆⲆᐃᐃΔ": ⵠⲆ++,
		"ᐃᐃⵠΔΔ": ⵠⲆ++,
		"ⵠᐃᐃΔⵠ": ⵠⲆ++,
		"ΔⲆΔⲆⵠ": ⵠⲆ++,
		"ⲆᐃΔΔⲆ": ⵠⲆ++,
		"ⲆⵠⲆΔΔ": ⵠⲆ++,
		"ⵠⲆΔⵠᐃ": ⵠⲆ++,
		"ΔⵠΔᐃⵠ": ⵠⲆ++,
		"ΔⵠⲆᐃⲆ": ⵠⲆ++,
		"ⲆⵠⲆᐃΔ": ⵠⲆ++,
		"ⵠⲆⵠⵠᐃ": ⵠⲆ++,
		"ⵠᐃΔⵠⵠ": ⵠⲆ++,
		"ⵠⲆΔᐃⲆ": ⵠⲆ++,
		"ⲆⵠΔᐃΔ": ⵠⲆ++,
		"ⲆᐃΔᐃΔ": ⵠⲆ++,
		"ᐃⵠᐃᐃⵠ": ⵠⲆ++,
		"ⵠⵠⵠⵠΔ": ⵠⲆ++,
		"ΔᐃΔΔΔ": ⵠⲆ++,
		"ᐃΔᐃΔⲆ": ⵠⲆ++,
		"ΔⵠΔⵠⲆ": ⵠⲆ++,
		"ᐃᐃᐃᐃⵠ": ⵠⲆ++,
		"ΔΔⲆΔⲆ": ⵠⲆ++,
		"ᐃⵠΔᐃᐃ": ⵠⲆ++,
		"ⲆⵠⲆⲆⵠ": ⵠⲆ++,
		"ⲆⵠⲆⵠᐃ": ⵠⲆ++,
		"ⵠΔΔΔᐃ": ⵠⲆ++,
		"ⵠⵠⵠⲆⲆ": ⵠⲆ++,
		"ⵠᐃⵠᐃΔ": ⵠⲆ++,
		"ΔΔⵠⵠⲆ": ⵠⲆ++,
		"ⵠⵠⲆᐃΔ": ⵠⲆ++,
		"ⲆΔᐃⵠΔ": ⵠⲆ++,
		"ⲆⲆΔⲆⲆ": ⵠⲆ++,
		"ⵠⲆⲆⲆᐃ": ⵠⲆ++,
		"ⲆⲆⲆΔⵠ": ⵠⲆ++,
		"ΔⵠᐃᐃΔ": ⵠⲆ++,
		"ᐃΔΔⲆⵠ": ⵠⲆ++,
		"ΔⵠᐃⲆᐃ": ⵠⲆ++,
		"ⲆᐃⲆᐃΔ": ⵠⲆ++,
		"ᐃᐃⵠⲆⵠ": ⵠⲆ++,
		"ΔᐃⲆⵠᐃ": ⵠⲆ++,
		"ⵠᐃⲆⲆΔ": ⵠⲆ++,
		"ΔⲆᐃⲆⵠ": ⵠⲆ++,
		"ⵠΔᐃⵠⵠ": ⵠⲆ++,
		"ᐃΔΔᐃⵠ": ⵠⲆ++,
		"ⵠⵠⵠᐃᐃ": ⵠⲆ++,
		"ΔⵠΔⲆⵠ": ⵠⲆ++,
		"ΔΔΔΔΔ": ⵠⲆ++,
		"ⵠⵠᐃⲆⲆ": ⵠⲆ++,
		"ΔᐃⲆⲆᐃ": ⵠⲆ++,
		"ᐃⲆᐃΔᐃ": ⵠⲆ++,
		"ΔⵠᐃⵠⲆ": ⵠⲆ++,
		"ⲆⲆⲆΔⲆ": ⵠⲆ++,
		"ⲆᐃΔⲆΔ": ⵠⲆ++,
		"Δᐃᐃᐃⵠ": ⵠⲆ++,
		"ΔΔⲆⵠᐃ": ⵠⲆ++,
		"ⲆᐃⵠⲆΔ": ⵠⲆ++,
		"ⲆⲆΔⵠᐃ": ⵠⲆ++,
		"ⵠⵠⲆⲆⲆ": ⵠⲆ++,
		"ⵠⲆⲆᐃᐃ": ⵠⲆ++,
		"ⲆΔΔⲆⲆ": ⵠⲆ++,
		"ᐃᐃⵠᐃⵠⲆⵠᐃᐃ": ⵠⲆ++,
		"ⵠⵠΔΔᐃ": ⵠⲆ++,
		"ΔᐃᐃΔᐃ": ⵠⲆ++,
		"ΔΔⲆⲆΔ": ⵠⲆ++,
		"ᐃΔⲆᐃⲆ": ⵠⲆ++,
		"ⵠⲆⵠⵠⵠ": ⵠⲆ++,
		"ᐃⵠΔⵠᐃ": ⵠⲆ++,
		"ΔⲆΔⵠΔ": ⵠⲆ++,
		"ᐃΔᐃⵠⵠ": ⵠⲆ++,
		"ΔⲆⵠᐃ": ⵠⲆ++,
		"ⲆⲆⲆᐃⵠ": ⵠⲆ++,
		"ᐃⵠⵠᐃ": ⵠⲆ++,
		"ⵠⲆᐃᐃ": ⵠⲆ++,
		"ΔⵠⲆⵠΔⵠΔ": ⵠⲆ++,
		"ⵠⵠᐃⲆⵠ": ⵠⲆ++,
		"ᐃΔᐃⲆⲆΔⵠ": ⵠⲆ++,
		"ⵠⵠᐃⵠΔ": ⵠⲆ++,
		"ΔΔᐃΔⵠ": ⵠⲆ++,
		"ⵠΔⲆᐃΔΔⲆ": ⵠⲆ++,
		"ᐃⵠΔⵠⲆⵠᐃ": ⵠⲆ++,
		"ⲆΔΔᐃᐃ": ⵠⲆ++,
		"ᐃΔⲆᐃ": ⵠⲆ++,
		"ᐃᐃΔᐃᐃ": ⵠⲆ++,
		"ⵠᐃΔΔⵠ": ⵠⲆ++,
		"ⲆΔⵠᐃΔΔⵠ": ⵠⲆ++,
		"ⲆΔⵠᐃᐃ": ⵠⲆ++,
		"ⲆᐃᐃΔⵠ": ⵠⲆ++,
		"ΔΔⲆⲆᐃ": ⵠⲆ++,
		"ΔⲆⵠⲆⲆ": ⵠⲆ++,
		"ⵠⵠⵠΔΔ": ⵠⲆ++,
		"ⵠⵠⲆⲆΔ": ⵠⲆ++,
		"ⵠΔⲆⲆⵠ": ⵠⲆ++,
		"ΔΔᐃⲆⵠ": ⵠⲆ++,
		"ΔᐃᐃᐃⲆ": ⵠⲆ++,
		"ⲆᐃΔᐃᐃ": ⵠⲆ++,
		"ᐃᐃᐃⵠᐃ": ⵠⲆ++,
		"ΔᐃⲆΔⵠ": ⵠⲆ++,
		"ᐃᐃⵠⲆᐃ": ⵠⲆ++,
		"ᐃⵠⵠᐃⲆ": ⵠⲆ++,
		"ΔⵠⵠᐃⲆ": ⵠⲆ++,
		"ΔⵠⵠⲆᐃΔⵠ": ⵠⲆ++,
		"ΔΔⲆᐃⲆ": ⵠⲆ++,
		"ΔΔΔΔΔΔⵠ": ⵠⲆ++,
		"ⲆⲆⵠᐃⲆΔⲆ": ⵠⲆ++,
		"ⵠⲆᐃⲆᐃⵠᐃ": ⵠⲆ++,
		"ⲆΔⵠⲆᐃⲆᐃ": ⵠⲆ++,
		"ⲆⲆⲆᐃΔ": ⵠⲆ++,
		"ᐃⵠΔⲆⲆ": ⵠⲆ++,
		"ᐃⲆΔⵠⲆ": ⵠⲆ++,
		"ᐃᐃᐃⵠΔ": ⵠⲆ++,
		"ⵠⲆᐃΔⵠ": ⵠⲆ++,
		"ⵠΔⲆΔᐃ": ⵠⲆ++,
		"ΔΔⵠⲆⵠ": ⵠⲆ++,
		"ⲆⵠΔⵠⵠ": ⵠⲆ++,
		"ᐃⵠⵠΔⵠ": ⵠⲆ++,
		"ᐃⵠⵠⵠΔ": ⵠⲆ++,
		"ΔⲆᐃΔᐃ": ⵠⲆ++,
		"ᐃⲆΔᐃΔ": ⵠⲆ++,
		"ⵠⵠⵠΔⲆ": ⵠⲆ++,
		"ᐃΔΔⵠᐃ": ⵠⲆ++,
		"ᐃⵠᐃⲆᐃ": ⵠⲆ++,
		"ⲆⵠⲆⵠⵠ": ⵠⲆ++,
		"ⲆᐃⲆⲆⲆ": ⵠⲆ++,
		"ΔⲆⵠΔⵠ": ⵠⲆ++,
		"ⵠⲆⵠⵠΔ": ⵠⲆ++,
		"ⲆⵠⵠⲆΔ": ⵠⲆ++,
		"ᐃᐃΔⲆΔⵠⵠ": ⵠⲆ++,
		"ᐃⵠΔⵠΔ": ⵠⲆ++,
		"ⵠⵠΔᐃᐃ": ⵠⲆ++,
		"ΔᐃΔⵠⵠ": ⵠⲆ++,
		"ⲆⲆΔᐃᐃ": ⵠⲆ++,
		"ⲆⲆᐃⲆⲆⲆⲆ": ⵠⲆ++,
		"ᐃⵠᐃᐃΔΔⵠ": ⵠⲆ++,
		"ⲆⵠΔΔΔⵠᐃ": ⵠⲆ++,
		"ⵠⲆⲆⲆⵠ": ⵠⲆ++,
		"ⲆᐃⲆⵠⵠⵠⵠ": ⵠⲆ++,
		"ⵠᐃΔⲆᐃⲆᐃ": ⵠⲆ++,
		"ΔⲆⲆⵠΔⲆΔ": ⵠⲆ++,
		"ⵠΔᐃⲆΔᐃⲆ": ⵠⲆ++,
		"ΔⲆᐃⵠⲆⵠⲆ": ⵠⲆ++,
		"ⵠᐃⲆⵠⵠⲆΔ": ⵠⲆ++,
		"ⵠⵠᐃⲆⲆⲆⵠ": ⵠⲆ++,
		"ⲆⲆⲆⲆⵠⲆⵠ": ⵠⲆ++,
		"ᐃΔΔⵠⵠ": ⵠⲆ++,
		"ⵠⲆⲆⵠᐃ": ⵠⲆ++,
		"ΔᐃⲆᐃⲆ": ⵠⲆ++,
		"ᐃΔⵠᐃΔ": ⵠⲆ++,
		"ⵠⵠⵠⵠⲆ": ⵠⲆ++,
		"ᐃΔᐃⲆⲆⲆΔ": ⵠⲆ++,
		"ΔⲆⵠᐃᐃ": ⵠⲆ++,
		"ⵠΔⵠᐃΔ": ⵠⲆ++,
		"ΔⲆᐃⲆΔΔⲆ": ⵠⲆ++,
		"ΔⵠᐃⲆΔ": ⵠⲆ++,
		"ᐃⵠⵠⵠⵠᐃⲆ": ⵠⲆ++,
		"ⵠΔⵠΔⵠ": ⵠⲆ++,
		"ⲆⲆΔΔᐃ": ⵠⲆ++,
		"ⲆΔⲆⵠⲆᐃᐃ": ⵠⲆ++,
		"ⵠⵠⲆⵠᐃᐃⲆ": ⵠⲆ++,
		"ⵠⲆⵠΔΔ": ⵠⲆ++,
		"ⲆᐃᐃⵠΔ": ⵠⲆ++,
		"ᐃⲆΔⵠᐃⲆΔ": ⵠⲆ++,
		"ⲆⵠⵠⲆᐃ": ⵠⲆ++,
		"Ⲇⵠⵠᐃ": ⵠⲆ++,
		"ΔⲆΔΔⲆ": ⵠⲆ++,
		"ΔΔⲆΔΔⵠΔ": ⵠⲆ++,
		"ᐃⲆΔⲆⲆ": ⵠⲆ++,
		"ΔΔᐃⲆⲆⲆᐃ": ⵠⲆ++,
		"ⵠᐃⲆΔᐃ": ⵠⲆ++,
		"ΔΔΔᐃⵠΔⵠ": ⵠⲆ++,
		"ᐃᐃⵠᐃᐃ": ⵠⲆ++,
		"ⵠᐃⵠᐃΔΔⵠ": ⵠⲆ++,
		"ⵠⲆⵠᐃⵠᐃⵠ": ⵠⲆ++,
		"ⲆⲆᐃⵠⵠ": ⵠⲆ++,
		"ⲆΔⵠⲆⵠ": ⵠⲆ++,
		"ᐃⲆⵠΔⲆ": ⵠⲆ++,
		"ⵠΔΔⲆⲆ": ⵠⲆ++,
		"ΔⵠⵠⲆΔ": ⵠⲆ++,
		"ⲆᐃⵠᐃΔ": ⵠⲆ++,
		"ΔᐃΔⲆⲆ": ⵠⲆ++,
		"ⵠⲆⵠΔᐃ": ⵠⲆ++,
		"ΔΔΔⲆᐃ": ⵠⲆ++,
		"ⲆᐃⲆΔᐃ": ⵠⲆ++,
		"ⵠⵠⲆΔΔ": ⵠⲆ++,
		"ᐃΔⵠΔΔ": ⵠⲆ++,
		"ⲆᐃΔⲆⲆ": ⵠⲆ++,
		"ΔⲆⵠᐃⵠΔⲆ": ⵠⲆ++,
		"ΔΔΔⵠᐃⲆᐃ": ⵠⲆ++,
		"ⵠⵠΔⵠⲆ": ⵠⲆ++,
		"ΔᐃⵠⵠΔⵠᐃ": ⵠⲆ++,
		"ⲆⵠΔⵠⲆ": ⵠⲆ++,
		"ᐃΔⲆᐃᐃ": ⵠⲆ++,
		"ᐃᐃⵠⵠᐃ": ⵠⲆ++,
		"ⵠᐃⲆΔⲆ": ⵠⲆ++,
		"ⲆΔᐃⲆΔ": ⵠⲆ++,
		"ΔⲆⲆⲆⵠΔⵠ": ⵠⲆ++,
		"ΔⲆⵠΔᐃ": ⵠⲆ++,
		"ⵠⲆⲆΔᐃ": ⵠⲆ++,
		"ᐃⵠⲆⲆΔ": ⵠⲆ++,
		"ⵠⵠΔᐃⵠ": ⵠⲆ++,
		"ⲆⲆⲆⵠⵠ": ⵠⲆ++,
		"ⲆⵠᐃⲆΔ": ⵠⲆ++,
		"ΔᐃΔⵠΔ": ⵠⲆ++,
		"ΔⲆⵠᐃⲆ": ⵠⲆ++,
		"ⲆⵠΔⲆΔⲆⵠ": ⵠⲆ++,
		"ⲆΔΔΔᐃ": ⵠⲆ++,
		"ⲆᐃΔⵠᐃ": ⵠⲆ++,
		"ΔⵠᐃⵠⲆΔΔ": ⵠⲆ++,
		"ⵠⵠⲆⵠⵠ": ⵠⲆ++,
		"ᐃΔⲆΔⵠ": ⵠⲆ++,
		"ⲆⲆⵠⵠⵠⵠΔ": ⵠⲆ++,
		"ⵠⵠⲆⵠᐃ": ⵠⲆ++,
		"ⲆΔΔΔⵠ": ⵠⲆ++,
		"ⲆⲆⵠⵠᐃΔⵠ": ⵠⲆ++,
		"ⲆⵠΔⲆᐃᐃᐃ": ⵠⲆ++,
		"ΔⵠᐃΔⲆᐃⲆ": ⵠⲆ++,
		"ᐃᐃᐃΔⲆᐃᐃ": ⵠⲆ++,
		"ᐃⲆΔⲆᐃⵠⲆ": ⵠⲆ++,
		"ᐃⵠΔᐃⵠⲆⲆ": ⵠⲆ++,
		"ⵠΔⵠⲆⲆⲆᐃ": ⵠⲆ++,
		"ⲆΔΔⲆΔΔⵠ": ⵠⲆ++,
		"ᐃⵠⲆΔⵠ": ⵠⲆ++,
		"ΔⲆⵠⵠⲆΔⲆ": ⵠⲆ++,
		"ⵠᐃⵠⵠⵠⲆⲆ": ⵠⲆ++,
		"ᐃᐃΔΔⵠⵠⲆ": ⵠⲆ++,
		"ΔⲆⲆⲆΔ": ⵠⲆ++,
		"ΔᐃᐃΔⲆⵠⲆ": ⵠⲆ++,
		"ΔᐃᐃⵠⵠⵠΔ": ⵠⲆ++,
		"ΔᐃᐃⵠⵠΔΔ": ⵠⲆ++,
		"ᐃΔⵠⵠᐃⵠᐃ": ⵠⲆ++,
		"ⲆᐃᐃΔᐃΔⲆ": ⵠⲆ++,
		"ⲆᐃⵠᐃⵠΔΔ": ⵠⲆ++,
		"ᐃᐃΔΔᐃⵠᐃ": ⵠⲆ++,
		"ΔⲆⲆᐃⵠⵠΔ": ⵠⲆ++,
		"ΔΔΔⵠⲆΔΔ": ⵠⲆ++,
		"ⲆᐃⲆᐃΔΔⲆ": ⵠⲆ++,
		"ⲆᐃᐃΔⵠΔⲆ": ⵠⲆ++,
		"ⲆᐃⲆⲆⵠΔΔ": ⵠⲆ++,
		"ⲆⵠⲆΔⵠⵠⲆ": ⵠⲆ++,
		"ⲆⵠⲆⲆⲆΔΔ": ⵠⲆ++,
		"ΔΔⵠⵠ": ⵠⲆ++,
		"ΔⵠᐃⲆⵠ": ⵠⲆ++,
		"ΔⲆⲆᐃⲆᐃⲆ": ⵠⲆ++,
		"ⲆᐃⲆΔⵠΔⵠ": ⵠⲆ++,
		"ⵠⲆ": ⵠⲆ++,
		"ⵠⲆΔᐃΔᐃⵠ": ⵠⲆ++,
		"ⲆΔᐃⲆᐃ": ⵠⲆ++,
		"ᐃΔᐃⵠⲆ": ⵠⲆ++,
		"ΔⲆᐃⵠⲆⲆΔ": ⵠⲆ++,
		"ⲆⵠⲆⲆᐃ": ⵠⲆ++,
		"ⵠΔⵠⲆᐃΔⲆ": ⵠⲆ++,
		"ΔΔΔΔΔᐃⲆ": ⵠⲆ++,
		"ⲆⵠΔᐃΔⲆⵠ": ⵠⲆ++,
		"ᐃⲆΔⵠΔⵠⲆ": ⵠⲆ++,
		"ⲆᐃΔᐃᐃΔⲆ": ⵠⲆ++,
		"ᐃᐃΔᐃⵠ": ⵠⲆ++,
		"ΔⲆⵠⵠⵠᐃⲆ": ⵠⲆ++,
		"ⲆᐃᐃⵠΔⵠⲆ": ⵠⲆ++,
		"ⵠⵠⵠᐃᐃⵠΔ": ⵠⲆ++,
		"ⲆⵠⲆΔⵠΔⲆ": ⵠⲆ++,
		"ⲆΔⲆⵠⵠ": ⵠⲆ++,
		"ⲆΔⲆᐃᐃΔⵠ": ⵠⲆ++,
		"ⲆⲆᐃⲆⵠⵠᐃ": ⵠⲆ++,
		"ⵠⵠᐃᐃᐃΔᐃ": ⵠⲆ++,
		"ΔᐃᐃⲆⵠᐃΔ": ⵠⲆ++,
		"ⲆᐃⵠⵠⲆᐃⲆ": ⵠⲆ++,
		"ⵠⵠΔΔᐃΔᐃ": ⵠⲆ++,
		"ⲆᐃⵠⲆΔᐃⵠ": ⵠⲆ++,
		"ⲆⵠⵠᐃⲆ": ⵠⲆ++,
		"ᐃⲆΔΔⲆᐃΔ": ⵠⲆ++,
		"ⲆⲆⲆⲆⲆᐃⲆ": ⵠⲆ++,
		"ⵠᐃΔΔⲆᐃⲆ": ⵠⲆ++,
		"ΔⲆⲆⵠⲆᐃΔ": ⵠⲆ++,
		"ⵠΔΔⲆⲆΔⲆ": ⵠⲆ++,
		"Ⲇᐃᐃⵠⵠⵠⵠ": ⵠⲆ++,
		"ᐃⲆⲆΔⵠᐃᐃ": ⵠⲆ++,
		"ⵠⵠⵠᐃⵠⵠΔ": ⵠⲆ++,
		"ⵠΔΔⵠⲆᐃⵠ": ⵠⲆ++,
		"ⵠⵠΔΔⲆⵠⲆ": ⵠⲆ++,
		"ΔⲆⵠᐃᐃΔⲆ": ⵠⲆ++,
		"ΔⲆᐃᐃᐃΔⵠ": ⵠⲆ++,
		"ⵠⵠⵠⵠⵠΔⵠ": ⵠⲆ++,
		"ⲆⲆⵠⲆΔ": ⵠⲆ++,
		"ⵠⵠᐃⵠᐃᐃⲆ": ⵠⲆ++,
		"ⵠᐃᐃΔᐃⵠΔ": ⵠⲆ++,
		"ᐃⲆΔⵠⲆⲆᐃ": ⵠⲆ++,
		"ᐃⵠΔⲆΔᐃᐃ": ⵠⲆ++,
		"ⲆⵠⲆⵠⵠⵠᐃ": ⵠⲆ++,
		"ΔⵠΔⵠΔⵠⵠ": ⵠⲆ++,
		"ᐃΔⵠΔⵠⵠⵠ": ⵠⲆ++,
		"ΔⵠΔⲆⲆⵠΔ": ⵠⲆ++,
		"ⵠᐃΔⵠΔⲆⵠ": ⵠⲆ++,
		"ⵠⲆΔᐃⲆⲆΔ": ⵠⲆ++,
		"ⲆᐃΔⲆᐃᐃᐃ": ⵠⲆ++,
		"ᐃΔᐃΔⲆΔᐃ": ⵠⲆ++,
		"ΔᐃⲆᐃΔᐃΔ": ⵠⲆ++,
		"ΔⵠⵠᐃᐃΔⵠ": ⵠⲆ++,
		"ⲆΔⵠⲆΔⵠⲆ": ⵠⲆ++,
		"ⵠΔΔΔᐃᐃⲆ": ⵠⲆ++,
		"ⵠⲆⲆⲆⲆⲆΔ": ⵠⲆ++,
		"Δᐃᐃⵠⵠᐃᐃ": ⵠⲆ++,
		"ΔⵠⵠⵠⲆⵠⵠ": ⵠⲆ++,
		"ΔⵠⲆⵠΔⲆᐃ": ⵠⲆ++,
		"ΔΔᐃᐃΔΔᐃ": ⵠⲆ++,
		"ᐃΔΔΔᐃⲆᐃ": ⵠⲆ++,
		"ⲆᐃⵠⲆⲆⲆⲆ": ⵠⲆ++,
		"ΔⵠⲆⵠⲆⵠᐃ": ⵠⲆ++,
		"ⵠⲆⲆᐃΔⵠⵠ": ⵠⲆ++,
		"ⵠⲆᐃΔᐃᐃΔΔⵠ": ⵠⲆ++,
		"ᐃᐃⲆⵠⵠΔⵠ": ⵠⲆ++,
		"ΔⲆᐃⲆΔΔΔ": ⵠⲆ++,
		"ΔⵠⲆⵠΔΔⵠ": ⵠⲆ++,
		"ᐃΔᐃᐃⲆⵠΔ": ⵠⲆ++,
		"ⵠⵠΔⵠⲆΔΔ": ⵠⲆ++,
		"ᐃⲆⵠᐃⵠᐃⵠ": ⵠⲆ++,
		"ⲆᐃⲆᐃⲆⲆⵠ": ⵠⲆ++,
		"ᐃᐃⵠⵠⵠⲆΔ": ⵠⲆ++,
		"ΔΔⵠᐃᐃᐃⵠ": ⵠⲆ++,
		"ΔⲆⵠΔᐃⲆᐃ": ⵠⲆ++,
		"ⵠΔΔᐃΔΔⲆ": ⵠⲆ++,
		"ⲆᐃⵠᐃᐃΔⲆ": ⵠⲆ++,
		"ⵠⲆΔⲆᐃⲆᐃ": ⵠⲆ++,
		"ⲆΔΔΔⵠᐃΔ": ⵠⲆ++,
		"ⲆΔⵠΔΔⵠᐃ": ⵠⲆ++,
		"ⲆΔΔΔΔⲆᐃ": ⵠⲆ++,
		"ᐃⲆⲆⲆᐃᐃⵠ": ⵠⲆ++,
		"ΔⵠΔΔΔⵠⲆ": ⵠⲆ++,
		"ⲆΔᐃΔΔΔⲆ": ⵠⲆ++,
		"ⲆⵠᐃⵠΔⲆⲆ": ⵠⲆ++,
		"ⲆᐃΔⵠΔⵠᐃ": ⵠⲆ++,
		"ΔⵠⲆᐃΔⵠⵠ": ⵠⲆ++,
		"ⵠⵠⲆⲆᐃᐃᐃ": ⵠⲆ++,
		"ⵠΔⲆⵠⵠⲆᐃ": ⵠⲆ++,
		"ⵠᐃⵠⲆΔⲆⲆ": ⵠⲆ++,
		"ⲆΔⵠⲆⲆⵠᐃ": ⵠⲆ++,
		"ⲆⵠⵠΔΔᐃᐃ": ⵠⲆ++,
		"ⲆⲆᐃΔΔⵠⵠ": ⵠⲆ++,
		"ⵠⲆᐃⲆⵠᐃⲆ": ⵠⲆ++,
		"ΔᐃᐃⵠⲆⲆⲆ": ⵠⲆ++,
		"ΔⵠⵠⲆⲆⲆΔ": ⵠⲆ++,
		"ⵠᐃⵠⲆΔⵠⲆ": ⵠⲆ++,
		"ⵠᐃⲆⵠⲆⵠⵠ": ⵠⲆ++,
		"ᐃⵠᐃᐃⵠⲆΔ": ⵠⲆ++,
		"ⵠΔΔᐃⵠΔⲆ": ⵠⲆ++,
		"ᐃⲆⲆⲆᐃⲆⵠ": ⵠⲆ++,
		"ΔᐃΔⲆⵠΔⲆ": ⵠⲆ++,
		"Ⲇᐃⵠᐃᐃᐃⵠ": ⵠⲆ++,
		"ᐃᐃΔⵠⵠΔⲆ": ⵠⲆ++,
		"ΔⵠⵠⲆⲆᐃⲆ": ⵠⲆ++,
		"ⵠⲆᐃΔⲆⲆᐃ": ⵠⲆ++,
		"ⲆⵠⵠΔΔᐃΔ": ⵠⲆ++,
		"ⲆⲆⵠΔᐃⵠΔ": ⵠⲆ++,
		"ⵠΔΔⲆⵠᐃⵠ": ⵠⲆ++,
		"ⵠΔⲆⵠᐃⵠᐃ": ⵠⲆ++,
		"ᐃΔΔΔⲆΔΔ": ⵠⲆ++,
		"ⵠⲆᐃΔΔΔᐃ": ⵠⲆ++,
		"ΔⵠΔⲆⲆⲆᐃ": ⵠⲆ++,
		"ᐃΔᐃᐃⲆΔⵠ": ⵠⲆ++,
		"ᐃᐃᐃⲆᐃΔⵠ": ⵠⲆ++,
		"ᐃⲆⲆⲆⲆᐃⲆ": ⵠⲆ++,
		"ⲆⵠⲆᐃᐃᐃΔ": ⵠⲆ++,
		"ⲆⵠⵠⲆⵠⵠⵠ": ⵠⲆ++,
		"ⵠⵠᐃΔᐃᐃⲆ": ⵠⲆ++,
		"ⵠⲆⲆΔⲆᐃⲆ": ⵠⲆ++,
		"ᐃⵠΔᐃΔⵠᐃ": ⵠⲆ++,
		"ⲆΔᐃⵠⲆᐃⵠ": ⵠⲆ++,
		"ΔΔⵠⲆΔΔΔ": ⵠⲆ++,
		"ⵠⲆᐃΔⲆⵠᐃ": ⵠⲆ++,
		"ᐃΔⵠᐃⲆΔΔ": ⵠⲆ++,
		"ᐃⵠⲆᐃΔⲆⵠ": ⵠⲆ++,
		"ⵠⲆᐃΔⵠΔΔ": ⵠⲆ++,
		"ᐃⵠⵠⵠΔᐃᐃ": ⵠⲆ++,
		"ⲆᐃᐃⵠΔᐃᐃ": ⵠⲆ++,
		"ΔΔⲆⲆᐃᐃΔ": ⵠⲆ++,
		"ⵠⲆᐃᐃᐃ": ⵠⲆ++,
		"ᐃᐃⵠⵠᐃΔⵠⲆⲆ": ⵠⲆ++,
		"ⲆᐃⲆⵠΔ": ⵠⲆ++,
		"ⵠⲆᐃᐃⵠ": ⵠⲆ++,
		"ⲆΔⲆΔⵠⲆⵠⵠΔ": ⵠⲆ++,
		"ᐃΔᐃⲆⲆⲆⲆ": ⵠⲆ++,
		"ᐃⲆⵠᐃᐃ": ⵠⲆ++,
		"ᐃⵠⲆⵠΔᐃⵠ": ⵠⲆ++,
		"ⵠΔⵠΔΔⵠᐃ": ⵠⲆ++,
		"ⲆΔΔΔᐃⲆⲆ": ⵠⲆ++,
		"ᐃΔᐃⲆⲆᐃⲆ": ⵠⲆ++,
		"ΔⲆⲆⵠᐃΔⲆ": ⵠⲆ++,
		"ᐃᐃΔΔⵠᐃᐃ": ⵠⲆ++,
		"ⵠΔⲆᐃΔⵠⵠ": ⵠⲆ++,
		"ΔⵠⵠⲆⲆⵠᐃ": ⵠⲆ++,
		"ᐃΔⵠⵠⲆΔᐃ": ⵠⲆ++,
		"ΔΔⲆⲆᐃⲆΔ": ⵠⲆ++,
		"ⵠⵠᐃⵠᐃᐃᐃ": ⵠⲆ++,
		"ΔⲆⲆⲆΔⵠⵠ": ⵠⲆ++,
		"ⲆᐃᐃⲆⵠⲆΔ": ⵠⲆ++,
		"ⲆⵠΔᐃΔΔᐃ": ⵠⲆ++,
		"ⵠᐃΔΔⲆⲆⲆ": ⵠⲆ++,
		"ᐃΔⵠⵠⵠᐃᐃ": ⵠⲆ++,
		"ᐃᐃΔΔᐃⲆⲆ": ⵠⲆ++,
		"ⵠⵠᐃⵠΔⲆᐃ": ⵠⲆ++,
		"ⵠΔΔΔⲆⲆΔ": ⵠⲆ++,
		"ᐃⲆᐃⵠᐃⵠΔ": ⵠⲆ++,
		"ᐃⲆᐃΔⲆᐃΔ": ⵠⲆ++,
		"ⵠⵠᐃᐃΔᐃᐃ": ⵠⲆ++,
		"ⵠᐃᐃⲆⵠΔⵠ": ⵠⲆ++,
		"ⲆᐃᐃΔⲆᐃᐃ": ⵠⲆ++,
		"ΔᐃᐃⵠⲆⵠⲆⵠⵠ": ⵠⲆ++,
		"ⵠⵠΔⵠᐃ": ⵠⲆ++,
		"ΔΔⲆᐃⵠⵠⲆ": ⵠⲆ++,
		"ⵠΔⲆⲆⲆᐃⵠ": ⵠⲆ++,
		"ⲆᐃΔΔⵠΔᐃⵠΔ": ⵠⲆ++,
		"ⵠⵠⲆΔⲆ": ⵠⲆ++,
		"ⲆᐃΔⲆᐃ": ⵠⲆ++,
		"ᐃⲆⵠⲆᐃᐃⵠ": ⵠⲆ++,
		"ⲆᐃⲆᐃΔⲆⵠ": ⵠⲆ++,
		"ⲆᐃⵠΔᐃⲆⵠ": ⵠⲆ++,
		"ⲆΔⲆⲆⵠⵠᐃ": ⵠⲆ++,
		"ΔᐃᐃᐃⲆΔᐃ": ⵠⲆ++,
		"ᐃⲆⲆⲆⵠᐃⲆ": ⵠⲆ++,
		"ᐃᐃᐃᐃⵠⲆⲆ": ⵠⲆ++,
		"ⲆⵠⲆⲆⵠⵠΔ": ⵠⲆ++,
		"ΔⵠΔⵠⲆᐃⲆ": ⵠⲆ++,
		"ᐃᐃΔⲆᐃΔΔ": ⵠⲆ++,
		"ΔⲆΔΔᐃᐃⵠ": ⵠⲆ++,
		"ΔᐃⵠᐃᐃᐃΔ": ⵠⲆ++,
		"ΔⵠⵠᐃⵠᐃⲆ": ⵠⲆ++,
		"ⲆΔⵠᐃⵠⵠᐃ": ⵠⲆ++,
		"ΔΔΔⲆⵠⵠᐃ": ⵠⲆ++,
		"ⲆᐃⲆΔᐃᐃⵠ": ⵠⲆ++,
		"ΔⲆⲆᐃΔⵠᐃ": ⵠⲆ++,
		"ΔⲆᐃⵠⲆᐃⲆ": ⵠⲆ++,
		"ΔⲆΔⵠⲆΔΔ": ⵠⲆ++,
		"ⲆᐃⲆⲆⵠⵠⵠ": ⵠⲆ++,
		"ᐃⲆΔⲆΔⵠⲆ": ⵠⲆ++,
		"ⲆⲆᐃᐃⵠⵠᐃ": ⵠⲆ++,
		"ᐃᐃⲆᐃⵠⵠᐃ": ⵠⲆ++,
		"ⵠⲆⲆΔⵠΔⲆ": ⵠⲆ++,
		"ΔⲆⲆᐃⵠⲆⲆ": ⵠⲆ++,
		"ΔΔᐃᐃΔⵠⵠ": ⵠⲆ++,
		"ᐃᐃΔᐃΔⵠⲆ": ⵠⲆ++,
		"ⲆⵠᐃΔⵠⲆⲆ": ⵠⲆ++,
		"ᐃΔΔᐃⵠⵠⵠ": ⵠⲆ++,
		"ⲆⵠΔᐃΔᐃΔ": ⵠⲆ++,
		"ⲆⵠⲆΔᐃΔⵠ": ⵠⲆ++,
		"ⵠΔᐃⲆᐃΔΔ": ⵠⲆ++,
		"ΔⵠⵠⲆⲆᐃΔ": ⵠⲆ++,
		"ΔⵠⲆᐃⲆⵠᐃ": ⵠⲆ++,
		"ΔⲆⲆⲆᐃΔⲆ": ⵠⲆ++,
		"ⲆⵠΔᐃⵠⵠᐃ": ⵠⲆ++,
		"ⲆⲆⵠΔᐃΔΔ": ⵠⲆ++,
		"ᐃΔΔⲆΔΔᐃ": ⵠⲆ++,
		"ᐃΔⵠⲆⲆⲆⵠ": ⵠⲆ++,
		"ⲆΔΔⲆᐃⲆⲆ": ⵠⲆ++,
		"ᐃⵠⲆΔΔᐃᐃ": ⵠⲆ++,
		"ΔⲆΔΔⵠΔΔ": ⵠⲆ++,
		"ΔᐃⲆⲆΔⵠⲆ": ⵠⲆ++,
		"ΔᐃᐃᐃᐃΔⵠ": ⵠⲆ++,
		"ΔΔⲆⲆᐃⲆⵠ": ⵠⲆ++,
		"ⲆᐃⲆⵠΔⵠᐃ": ⵠⲆ++,
		"ⵠⵠΔⵠⵠⵠΔ": ⵠⲆ++,
		"ΔᐃΔΔᐃⵠᐃ": ⵠⲆ++,
		"ᐃΔᐃΔⵠᐃⵠ": ⵠⲆ++,
		"ⲆⲆᐃΔⵠⲆᐃ": ⵠⲆ++,
		"ᐃᐃⲆΔⵠⲆⵠ": ⵠⲆ++,
		"ⲆΔᐃᐃΔᐃΔ": ⵠⲆ++,
		"ⲆⵠΔΔⵠΔⵠ": ⵠⲆ++,
		"ⵠⲆΔⵠΔⵠΔ": ⵠⲆ++,
		"ⵠΔΔⵠΔⲆⵠ": ⵠⲆ++,
		"ⲆⲆⵠⲆΔᐃⲆ": ⵠⲆ++,
		"ΔΔΔⲆⵠⵠᐃ": ⵠⲆ++,
		"ᐃⲆΔⵠᐃⵠΔ": ⵠⲆ++,
		"ⲆΔⲆⵠᐃΔΔ": ⵠⲆ++,
		"ⲆⲆᐃⲆᐃⲆᐃ": ⵠⲆ++,
		"ⲆⲆⲆΔΔⵠᐃ": ⵠⲆ++,
		"ⵠᐃΔᐃΔᐃⵠ": ⵠⲆ++,
		"ΔᐃⵠᐃⲆᐃᐃ": ⵠⲆ++,
		"ΔᐃᐃᐃⲆⵠⵠ": ⵠⲆ++,
		"ⵠΔⵠⲆᐃᐃΔ": ⵠⲆ++,
		"ΔᐃⵠⲆⵠᐃⲆ": ⵠⲆ++,
		"ⵠⲆⲆΔⲆⲆΔ": ⵠⲆ++,
		"ⲆⲆΔᐃⵠⵠΔ": ⵠⲆ++,
		"ᐃⲆⲆⲆΔⲆⵠ": ⵠⲆ++,
		"ⵠᐃⵠᐃⵠⵠⵠ": ⵠⲆ++,
		"ⵠΔΔⵠⵠᐃⲆ": ⵠⲆ++,
		"ⲆΔΔⲆΔⵠᐃ": ⵠⲆ++,
		"ⵠΔᐃⵠΔⲆᐃ": ⵠⲆ++,
		"ⲆⵠⵠⲆᐃΔᐃ": ⵠⲆ++,
		"ⵠᐃⵠⲆᐃⵠᐃ": ⵠⲆ++,
		"ⵠⲆⵠⵠΔⲆΔ": ⵠⲆ++,
		"ΔⵠᐃⲆΔΔⲆ": ⵠⲆ++,
		"ⵠΔΔᐃᐃⵠⲆ": ⵠⲆ++,
		"ⲆΔⵠⵠⲆᐃⲆ": ⵠⲆ++,
		"ΔᐃⲆᐃΔΔⵠ": ⵠⲆ++,
		"ⲆᐃᐃⲆⲆⲆⲆ": ⵠⲆ++,
		"ΔⲆⲆⲆⲆΔᐃ": ⵠⲆ++,
		"ΔᐃΔⲆΔᐃⵠ": ⵠⲆ++,
		"ⲆⵠᐃΔⵠⵠᐃ": ⵠⲆ++,
		"ΔⲆⲆⲆΔⲆⲆ": ⵠⲆ++,
		"ΔᐃᐃⲆⵠΔⲆ": ⵠⲆ++,
		"ⵠΔⵠᐃΔⵠⵠ": ⵠⲆ++,
		"ΔⵠⵠᐃᐃⲆΔ": ⵠⲆ++,
		"ΔⵠⲆⲆᐃⵠⲆⲆⵠ": ⵠⲆ++,
		"ΔⲆⲆΔΔⵠᐃ": ⵠⲆ++,
		"ᐃΔΔⵠⲆⵠⵠ": ⵠⲆ++,
		"ᐃⵠΔᐃⲆⲆⲆ": ⵠⲆ++,
		"ⵠᐃⵠᐃΔᐃᐃ": ⵠⲆ++,
		"ᐃΔΔΔΔⲆΔᐃⵠ": ⵠⲆ++,
		POINTS: ⵠⲆ++,
		"ⲆΔᐃΔᐃΔᐃ": ⵠⲆ++,
		"ⵠⲆⵠᐃΔⵠΔ": ⵠⲆ++,
		"ⲆᐃⲆΔΔΔⲆ": ⵠⲆ++,
		"ⲆⵠᐃΔΔᐃᐃ": ⵠⲆ++,
		"ⵠⲆᐃⲆᐃᐃΔ": ⵠⲆ++,
		"ⵠᐃᐃΔⲆᐃⵠ": ⵠⲆ++,
		"ΔⲆᐃᐃᐃᐃᐃ": ⵠⲆ++,
		"ΔᐃⲆⲆⵠⲆΔ": ⵠⲆ++,
		"ΔⲆΔⵠⲆⲆⵠ": ⵠⲆ++,
		"ⵠⵠΔⵠᐃⵠΔ": ⵠⲆ++,
		"ᐃΔΔΔⲆⲆⵠ": ⵠⲆ++,
		"ⵠᐃᐃᐃᐃᐃⵠ": ⵠⲆ++,
		"ᐃΔᐃᐃⲆΔᐃ": ⵠⲆ++,
		"ᐃⲆⲆⲆᐃΔΔ": ⵠⲆ++,
		"ΔⵠⵠΔΔᐃⲆ": ⵠⲆ++,
		"ⲆᐃⵠᐃᐃⵠⲆ": ⵠⲆ++,
		"ⵠⲆⵠΔⲆᐃⲆ": ⵠⲆ++,
		"ⵠΔⲆⲆᐃΔⲆ": ⵠⲆ++,
		"ⵠⲆⵠⵠΔᐃΔ": ⵠⲆ++,
		"ⲆⲆᐃᐃᐃⵠΔ": ⵠⲆ++,
		"ΔΔᐃⲆⵠⲆⲆ": ⵠⲆ++,
		"ⲆᐃⵠᐃΔⲆᐃ": ⵠⲆ++,
		"ᐃᐃⵠⵠⲆΔΔ": ⵠⲆ++,
		"ⵠⵠⲆⲆΔᐃᐃ": ⵠⲆ++,
		"ⲆⲆⵠⲆⵠⵠⵠ": ⵠⲆ++,
		"ΔΔᐃᐃⲆⲆᐃ": ⵠⲆ++,
		"ᐃⵠⲆⲆᐃⵠⵠ": ⵠⲆ++,
		"ᐃⵠⲆᐃᐃᐃⵠ": ⵠⲆ++,
		"ΔⲆΔΔⵠᐃⵠ": ⵠⲆ++,
		"ΔⵠⲆⵠⵠⵠᐃ": ⵠⲆ++,
		"ⲆⲆⲆⲆⵠⲆⲆ": ⵠⲆ++,
		"ⲆⲆΔᐃΔⲆⲆ": ⵠⲆ++,
		"ⵠⲆΔᐃⲆⲆᐃ": ⵠⲆ++,
		"ΔᐃⵠᐃᐃⲆⲆ": ⵠⲆ++,
		"ΔᐃᐃⵠΔᐃⵠ": ⵠⲆ++,
		"ΔΔⵠⲆΔⲆⵠ": ⵠⲆ++,
		"ᐃⲆⵠⲆᐃⲆᐃ": ⵠⲆ++,
		"ⲆᐃⵠᐃᐃᐃΔ": ⵠⲆ++,
		"ⲆΔᐃΔᐃᐃΔ": ⵠⲆ++,
		"ⲆᐃⵠⲆⲆⵠΔ": ⵠⲆ++,
		"ⵠⲆΔΔⵠᐃᐃ": ⵠⲆ++,
		"ⲆΔᐃᐃΔⵠΔ": ⵠⲆ++,
		"ᐃᐃΔΔⵠᐃⲆ": ⵠⲆ++,
		"ⲆⲆⵠᐃᐃΔᐃ": ⵠⲆ++,
		"ⵠΔⲆⵠΔⵠⲆ": ⵠⲆ++,
		"ⵠᐃⵠᐃΔᐃⵠ": ⵠⲆ++,
		"ⲆⵠᐃⲆΔⲆΔ": ⵠⲆ++,
		"ΔΔΔⲆᐃΔΔΔᐃ": ⵠⲆ++,
		"ΔΔⲆⵠⵠΔᐃ": ⵠⲆ++,
		"ΔΔⲆΔⵠⵠⵠⲆᐃ": ⵠⲆ++,
		"ⲆⲆΔⵠᐃⲆⲆ": ⵠⲆ++,
		"ᐃⲆⵠⵠΔⵠᐃΔⵠ": ⵠⲆ++,
		"ⲆᐃᐃᐃⵠᐃⲆᐃⲆ": ⵠⲆ++,
		"ΔⵠᐃⵠⵠΔᐃⵠⵠ": ⵠⲆ++,
		"ΔΔⲆΔⵠⵠΔⲆⵠ": ⵠⲆ++,
		"ᐃⲆⵠⲆⵠΔΔΔⵠ": ⵠⲆ++,
		"ⵠⲆΔⲆᐃⵠᐃ": ⵠⲆ++,
		"ᐃᐃⲆⲆⵠ": ⵠⲆ++,
		"ⵠΔᐃⲆΔΔᐃ": ⵠⲆ++,
		"ᐃⵠⵠⲆᐃⵠΔ": ⵠⲆ++,
		"ⵠΔⵠᐃΔⲆΔ": ⵠⲆ++,
		"ᐃⵠΔᐃⵠⲆⵠΔᐃ": ⵠⲆ++,
		"ⵠⲆᐃⵠᐃⵠⲆ": ⵠⲆ++,
		"ᐃᐃᐃᐃΔⵠⵠ": ⵠⲆ++,
		"ΔᐃΔⵠⵠⵠᐃ": ⵠⲆ++,
		"ΔⲆⵠᐃⲆⵠΔ": ⵠⲆ++,
		"ⲆΔᐃⲆΔⵠⵠ": ⵠⲆ++,
		"ᐃᐃⵠⵠΔᐃⲆ": ⵠⲆ++,
		"ⲆⵠΔΔΔΔΔ": ⵠⲆ++,
		"ΔΔΔΔⲆᐃΔ": ⵠⲆ++,
		"ⲆⲆᐃⲆⲆⲆᐃ": ⵠⲆ++,
		"ⲆⲆⵠⲆⵠΔᐃ": ⵠⲆ++,
		"ᐃⲆⵠΔⲆΔᐃ": ⵠⲆ++,
		"ⲆⵠΔⲆᐃ": ⵠⲆ++,
		"ΔⵠⵠⵠⲆ": ⵠⲆ++,
		"ΔⲆⵠⵠᐃ": ⵠⲆ++,
		"ᐃΔΔⵠΔΔᐃⵠⵠ": ⵠⲆ++,
		"ᐃᐃⲆⲆⵠⵠⲆ": ⵠⲆ++,
		"ⵠΔΔⵠⲆⲆⲆ": ⵠⲆ++,
		"ⵠᐃⵠΔⲆⵠⵠ": ⵠⲆ++,
		"ᐃᐃⲆΔⵠΔⲆ": ⵠⲆ++,
		"ⵠΔΔⲆΔⵠⵠ": ⵠⲆ++,
		"ΔⵠⲆⲆᐃΔⵠ": ⵠⲆ++,
		"ΔΔⲆⲆᐃᐃⲆ": ⵠⲆ++,
		"ΔᐃΔⲆᐃⲆⲆ": ⵠⲆ++,
		"ΔⲆⵠⲆⲆΔᐃ": ⵠⲆ++,
		"ⵠⵠⲆⲆᐃᐃⵠ": ⵠⲆ++,
		"ᐃⵠᐃⲆᐃΔⲆ": ⵠⲆ++,
		"ⲆᐃᐃᐃⲆΔᐃ": ⵠⲆ++,
		"ⵠⵠⵠΔᐃᐃΔ": ⵠⲆ++,
		"ΔⲆⵠΔⵠᐃⵠ": ⵠⲆ++,
		"ⵠΔⵠⲆᐃ": ⵠⲆ++,
		"ΔΔⵠⲆᐃⵠⲆ": ⵠⲆ++,
		"ⲆΔΔᐃⵠⵠⲆ": ⵠⲆ++,
		"Δⵠⵠᐃᐃᐃⵠ": ⵠⲆ++,
		"ΔⲆⵠΔΔᐃΔ": ⵠⲆ++,
		"ΔΔⵠⵠΔⲆΔ": ⵠⲆ++,
		"ⲆⵠⵠΔΔⲆᐃ": ⵠⲆ++,
		"ⲆⵠⵠⵠᐃΔⲆ": ⵠⲆ++,
		"ⲆⲆⲆⲆⲆⲆΔ": ⵠⲆ++,
		"ⵠΔⵠⲆⵠⵠⵠ": ⵠⲆ++,
		"ᐃᐃᐃⵠΔⵠᐃ": ⵠⲆ++,
		"ΔΔⲆΔⵠᐃᐃ": ⵠⲆ++,
		"ΔᐃᐃⲆᐃᐃⵠ": ⵠⲆ++,
		"ΔᐃⵠⵠⲆⲆⲆ": ⵠⲆ++,
		"ⲆⵠΔᐃⵠⵠⲆ": ⵠⲆ++,
		"ⲆⲆⲆΔⵠⲆᐃ": ⵠⲆ++,
		"ΔⵠⵠⵠⵠΔⲆ": ⵠⲆ++,
		"ⵠΔⲆᐃΔᐃᐃ": ⵠⲆ++,
		"ΔⲆΔΔⲆΔⵠ": ⵠⲆ++,
		"ᐃⲆⲆΔᐃᐃᐃ": ⵠⲆ++,
		"ⲆΔΔΔΔᐃⵠ": ⵠⲆ++,
		"ⲆΔⲆⵠᐃⵠⵠ": ⵠⲆ++,
		"ᐃΔⲆⲆⵠΔΔ": ⵠⲆ++,
		"ᐃⲆⵠⵠΔⵠⵠ": ⵠⲆ++,
		"ΔΔᐃⲆⲆᐃⵠ": ⵠⲆ++,
		"ᐃΔᐃⵠᐃΔᐃ": ⵠⲆ++,
		"ᐃΔⵠⲆⵠΔⲆ": ⵠⲆ++,
		"ⲆⵠΔⵠᐃᐃᐃ": ⵠⲆ++,
		"ⵠΔⲆᐃⲆⲆⵠ": ⵠⲆ++,
		"ᐃⲆᐃᐃᐃⵠᐃ": ⵠⲆ++,
		"ⵠⵠΔΔᐃⵠⵠ": ⵠⲆ++,
		"ⵠΔⵠⲆᐃⵠΔ": ⵠⲆ++,
		"ΔⲆⵠᐃΔⲆᐃ": ⵠⲆ++,
		"ⲆᐃᐃⵠⵠⲆΔ": ⵠⲆ++,
		"ⲆⲆⲆⵠᐃΔⲆ": ⵠⲆ++,
		"ⵠⵠⲆⵠΔᐃⵠ": ⵠⲆ++,
		"ⵠⲆⲆⵠⵠ": ⵠⲆ++,
		"ΔΔⲆⵠΔⲆⲆ": ⵠⲆ++,
		"ΔⵠⲆⲆⲆΔᐃ": ⵠⲆ++,
		"ΔⵠΔᐃΔ": ⵠⲆ++,
		"ᐃⵠᐃⵠⵠΔΔⵠΔ": ⵠⲆ++,
		"ⲆⵠⵠⵠΔΔⵠ": ⵠⲆ++,
		"Δⵠᐃⵠᐃ": ⵠⲆ++,
		"ⲆΔⵠΔⵠⵠⲆ": ⵠⲆ++,
		"ᐃⵠⲆΔᐃⲆⵠ": ⵠⲆ++,
		"ⲆⵠΔⵠΔⵠΔ": ⵠⲆ++,
		"ⵠⵠΔⲆᐃΔⲆ": ⵠⲆ++,
		"ⲆⲆⵠΔΔⲆⲆ": ⵠⲆ++,
		"ΔⵠΔⲆⵠΔΔ": ⵠⲆ++,
		"ⲆⵠᐃΔᐃΔⵠ": ⵠⲆ++,
		"ᐃᐃⲆⲆΔᐃΔ": ⵠⲆ++,
		"ᐃⵠⵠᐃΔΔⲆ": ⵠⲆ++,
		"ⵠⵠⲆᐃⲆᐃⲆ": ⵠⲆ++,
		"ⲆΔⵠΔΔΔⲆ": ⵠⲆ++,
		"ΔᐃᐃⲆᐃ": ⵠⲆ++,
		"ΔᐃⵠⲆᐃ": ⵠⲆ++,
		"ᐃⵠⵠᐃⵠ": ⵠⲆ++,
		"ⲆᐃᐃⲆⵠ": ⵠⲆ++,
		"ⲆⲆΔΔΔ": ⵠⲆ++,
		"ᐃⲆᐃΔⵠⵠᐃ": ⵠⲆ++,
		"ᐃᐃⲆⲆⵠⵠᐃ": ⵠⲆ++,
		"ΔᐃⲆⵠⲆⵠᐃ": ⵠⲆ++,
		"ⲆⵠⵠᐃⲆᐃᐃ": ⵠⲆ++,
		"ⲆᐃᐃⲆⵠΔⵠ": ⵠⲆ++,
		"ΔⵠᐃⲆΔΔᐃ": ⵠⲆ++,
		"ΔⲆᐃΔⲆⵠΔ": ⵠⲆ++,
		"ⲆⲆᐃⲆΔⲆᐃ": ⵠⲆ++,
		"ᐃᐃⲆΔΔⵠⵠ": ⵠⲆ++,
		"ⵠᐃⲆⵠΔⵠᐃ": ⵠⲆ++,
		"ᐃᐃⵠᐃΔΔⲆ": ⵠⲆ++,
		"ᐃΔᐃᐃⵠΔᐃ": ⵠⲆ++,
		"ⵠⵠⵠⵠⲆᐃΔ": ⵠⲆ++,
		"ᐃᐃΔᐃΔᐃᐃ": ⵠⲆ++,
		"ⵠᐃⲆⲆⵠⵠΔ": ⵠⲆ++,
		"ΔΔᐃΔΔΔⵠ": ⵠⲆ++,
		"ⲆⵠⵠΔⲆⲆΔ": ⵠⲆ++,
		"ΔⵠᐃⵠΔⵠⲆ": ⵠⲆ++,
		"ΔΔⲆΔᐃⵠⵠ": ⵠⲆ++,
		"ⵠⲆⲆⵠΔΔⲆ": ⵠⲆ++,
		"ΔΔⲆⲆⲆΔᐃ": ⵠⲆ++,
		"ᐃᐃⲆᐃⵠⲆⵠ": ⵠⲆ++,
		"ᐃⵠⲆΔᐃⵠΔ": ⵠⲆ++,
		"ⵠΔⵠⵠᐃᐃⵠ": ⵠⲆ++,
		"ΔΔΔΔⵠⵠΔ": ⵠⲆ++,
		"ᐃᐃⲆⲆΔΔΔᐃⲆ": ⵠⲆ++,
		"ΔᐃⲆᐃᐃⵠⵠ": ⵠⲆ++,
		"ΔΔΔⲆᐃᐃΔ": ⵠⲆ++,
		"ⵠᐃⲆᐃᐃⲆⲆ": ⵠⲆ++,
		"ⵠΔⲆᐃⲆᐃᐃ": ⵠⲆ++,
		"ΔⵠΔΔᐃᐃΔ": ⵠⲆ++,
		"ᐃΔᐃⵠᐃⵠⵠ": ⵠⲆ++,
		"ᐃⵠᐃΔⵠᐃᐃ": ⵠⲆ++,
		"ⵠⲆᐃⵠᐃᐃᐃ": ⵠⲆ++,
		"ⲆⲆΔⵠⵠΔᐃ": ⵠⲆ++,
		"ΔΔⲆᐃΔⵠⲆ": ⵠⲆ++,
		"ⲆΔᐃⵠⲆⲆΔ": ⵠⲆ++,
		"ⲆᐃⲆⵠΔΔⵠ": ⵠⲆ++,
		"ΔⲆⵠⲆⲆΔΔ": ⵠⲆ++,
		"ⵠᐃΔⲆⲆⲆⵠ": ⵠⲆ++,
		"ᐃⲆⲆⲆΔΔⵠ": ⵠⲆ++,
		"ⵠⵠⲆΔⲆⵠΔ": ⵠⲆ++,
		"ᐃⲆⵠⵠⵠⵠⲆ": ⵠⲆ++,
		"ᐃⲆⵠΔⲆⲆΔ": ⵠⲆ++,
		"ⵠⵠΔᐃⵠⵠⵠ": ⵠⲆ++,
		"ΔΔⵠᐃΔᐃⵠ": ⵠⲆ++,
		"ᐃⵠⲆⵠⲆⲆΔ": ⵠⲆ++,
		"ⲆⵠⲆⲆⵠⲆⲆ": ⵠⲆ++,
		"ⲆⲆⲆⵠⲆⵠᐃ": ⵠⲆ++,
		"ΔΔΔΔⲆΔⵠ": ⵠⲆ++,
		"ⲆⵠᐃᐃⲆⵠⲆ": ⵠⲆ++,
		"ΔⲆⵠⲆⲆᐃⵠ": ⵠⲆ++,
		"ΔⵠᐃΔΔΔΔ": ⵠⲆ++,
		"ΔⲆΔⲆⵠΔⵠ": ⵠⲆ++,
		"ⵠⲆⵠⵠᐃⲆᐃ": ⵠⲆ++,
		"ⵠᐃⲆⵠⵠⵠᐃ": ⵠⲆ++,
		"ⵠⵠⵠᐃⲆΔᐃ": ⵠⲆ++,
		"ⲆⵠᐃⲆⲆᐃⵠ": ⵠⲆ++,
		"ⲆⵠⲆⲆᐃⲆⲆ": ⵠⲆ++,
		"ᐃᐃΔⵠΔⵠⲆ": ⵠⲆ++,
		"ⲆᐃⵠᐃⲆⲆᐃ": ⵠⲆ++,
		"ⲆⲆᐃⵠⵠⲆⲆ": ⵠⲆ++,
		"ⲆᐃᐃᐃⲆⵠᐃ": ⵠⲆ++,
		"ΔⵠⵠΔΔΔᐃ": ⵠⲆ++,
		"ΔᐃⵠⲆⲆⲆⲆ": ⵠⲆ++,
		"ΔⵠᐃⲆⵠΔⲆ": ⵠⲆ++,
		"ΔⵠᐃΔⲆⲆΔ": ⵠⲆ++,
		"ᐃΔⵠΔⵠΔⲆ": ⵠⲆ++,
		"ΔᐃΔⵠⵠᐃᐃ": ⵠⲆ++,
		"ΔⲆⵠᐃⵠⵠᐃ": ⵠⲆ++,
		"ⵠᐃⲆΔΔⲆⵠ": ⵠⲆ++,
		"ⵠᐃⲆⲆΔᐃᐃ": ⵠⲆ++,
		"ⲆⲆⵠΔΔⵠᐃ": ⵠⲆ++,
		"ΔᐃᐃⵠⵠⲆΔ": ⵠⲆ++,
		"ⲆᐃΔᐃⵠᐃⲆ": ⵠⲆ++,
		"ⵠⲆⵠⲆⵠⲆⲆ": ⵠⲆ++,
		"ΔΔᐃᐃⵠᐃΔ": ⵠⲆ++,
		"ⲆⲆⵠᐃⲆΔΔ": ⵠⲆ++,
		"ᐃⵠⵠⲆΔⲆΔ": ⵠⲆ++,
		"ⲆⵠᐃⲆⲆⲆⲆ": ⵠⲆ++,
		"ⵠΔΔᐃⵠΔⵠ": ⵠⲆ++,
		"ⲆⲆᐃⲆⲆⲆⵠ": ⵠⲆ++,
		"ⵠⵠⵠΔⲆⵠΔ": ⵠⲆ++,
		"ⲆⵠΔⲆᐃᐃⵠ": ⵠⲆ++,
		"ΔⵠΔΔΔⲆΔ": ⵠⲆ++,
		"ΔᐃΔⲆΔⲆᐃ": ⵠⲆ++,
		"ⲆⲆᐃⵠⲆᐃⵠ": ⵠⲆ++,
		"ΔⲆⲆᐃⲆᐃᐃ": ⵠⲆ++,
		"ΔΔⵠᐃΔΔΔ": ⵠⲆ++,
		"ⵠⵠᐃᐃⵠΔⲆ": ⵠⲆ++,
		"ⵠᐃⵠΔᐃⵠⲆ": ⵠⲆ++,
		"ΔⵠⵠⵠⲆⵠᐃ": ⵠⲆ++,
		"ⲆΔΔⵠΔⵠⵠ": ⵠⲆ++,
		"ᐃᐃⲆⲆᐃⲆΔ": ⵠⲆ++,
		"ⵠⵠⲆᐃᐃΔΔ": ⵠⲆ++,
		"ⵠᐃⲆⵠⵠΔΔ": ⵠⲆ++,
		"ΔᐃΔΔᐃⵠⵠ": ⵠⲆ++,
		"ᐃⲆⲆⲆᐃ": ⵠⲆ++,
		"ΔⵠᐃⲆⲆⲆΔ": ⵠⲆ++,
		"ΔᐃᐃⲆⵠⵠⵠ": ⵠⲆ++,
		"ⵠⵠΔⲆᐃ": ⵠⲆ++,
		"ⵠΔⲆⵠⵠⵠⵠ": ⵠⲆ++,
		"ᐃΔⵠⲆΔᐃⵠ": ⵠⲆ++,
		"ΔΔᐃⵠⲆⲆⵠ": ⵠⲆ++,
		"ⵠⲆⵠⲆⲆΔᐃ": ⵠⲆ++,
		"ⲆᐃΔⲆᐃΔᐃ": ⵠⲆ++,
		"ΔⲆⵠⲆⵠ": ⵠⲆ++,
		"ⵠⲆΔⵠΔΔⵠ": ⵠⲆ++,
		"ΔΔⲆΔⵠⵠⵠᐃⲆ": ⵠⲆ++,
		"ⲆⵠⲆΔⵠⲆᐃⲆΔ": ⵠⲆ++,
		"ᐃⲆⵠⵠⲆⵠΔⵠᐃ": ⵠⲆ++,
		"ΔᐃΔΔⵠⵠᐃᐃᐃ": ⵠⲆ++,
		"ᐃⵠⲆⲆⲆⲆᐃ": ⵠⲆ++,
		"ΔΔΔᐃΔᐃᐃ": ⵠⲆ++,
		"ⵠⲆⵠⵠⵠΔᐃ": ⵠⲆ++,
		"ᐃⵠΔΔⵠⲆᐃ": ⵠⲆ++,
		"ⵠΔⵠⵠⵠⵠᐃ": ⵠⲆ++,
		"ⲆΔΔᐃΔⲆⲆ": ⵠⲆ++,
		"Δᐃⵠᐃⵠⵠⵠ": ⵠⲆ++,
		"ΔᐃⵠΔⲆᐃᐃ": ⵠⲆ++,
		"ⲆⵠⲆⵠⲆⵠⵠ": ⵠⲆ++,
		"ⲆⲆⵠⵠᐃⵠⲆ": ⵠⲆ++,
		"ᐃⲆΔᐃⲆ": ⵠⲆ++,
		"ΔᐃⲆᐃᐃ": ⵠⲆ++,
		"ΔΔⵠᐃΔⲆᐃ": ⵠⲆ++,
		"ⲆⵠᐃⵠΔᐃΔ": ⵠⲆ++,
		"ⲆⲆⵠᐃΔᐃᐃ": ⵠⲆ++,
		"ᐃⵠⵠⵠⵠΔⵠ": ⵠⲆ++,
		"ⲆΔΔᐃΔΔⲆ": ⵠⲆ++,
		"ⵠⵠⲆⵠⵠⲆᐃ": ⵠⲆ++,
		"ᐃⲆΔΔᐃⲆⵠ": ⵠⲆ++,
		"ⲆⲆΔⲆⲆⵠⲆ": ⵠⲆ++,
		"ⲆⲆⲆΔΔⲆᐃ": ⵠⲆ++,
		"ΔᐃⵠⵠⲆᐃⲆ": ⵠⲆ++,
		"ⵠⵠΔⵠⲆⲆΔ": ⵠⲆ++,
		"ⲆⵠⲆⲆⲆΔⵠ": ⵠⲆ++,
		"ⲆⲆⵠΔᐃⵠΔⲆΔ": ⵠⲆ++,
		"ⵠⵠΔΔᐃΔⵠΔⲆ": ⵠⲆ++,
		"ⲆⵠΔⵠᐃⵠΔ": ⵠⲆ++,
		"ᐃⵠᐃᐃⵠᐃᐃ": ⵠⲆ++,
		"ΔᐃⲆΔᐃΔⲆ": ⵠⲆ++,
		"ᐃⲆΔⵠⵠᐃᐃ": ⵠⲆ++,
		"ⵠᐃⲆΔⵠᐃⲆ": ⵠⲆ++,
		"ᐃΔΔᐃⲆⲆⲆ": ⵠⲆ++,
		"ⲆⲆⵠⵠⲆΔᐃ": ⵠⲆ++,
		"ΔΔⲆⵠⲆⵠⲆ": ⵠⲆ++,
		"ⲆⲆⲆⲆΔⲆⵠ": ⵠⲆ++,
		"ⵠΔᐃⵠⵠⲆᐃ": ⵠⲆ++,
		"ᐃⵠᐃⲆΔⲆΔ": ⵠⲆ++,
		"ΔΔᐃⲆⵠΔᐃ": ⵠⲆ++,
		"ΔⲆⲆⲆΔᐃᐃ": ⵠⲆ++,
		"ᐃⲆⲆⲆΔⲆⲆ": ⵠⲆ++,
		"ⲆᐃⲆⵠΔᐃΔ": ⵠⲆ++,
		"ΔΔⵠᐃⵠⲆⵠ": ⵠⲆ++,
		"ⲆⲆΔᐃᐃⵠᐃ": ⵠⲆ++,
		"ΔΔΔᐃΔⲆΔ": ⵠⲆ++,
		"ⲆⵠⲆⵠᐃⲆΔⵠΔ": ⵠⲆ++,
		"ⵠᐃᐃⲆⵠΔⲆ": ⵠⲆ++,
		"ΔᐃᐃⵠΔ": ⵠⲆ++,
		"ᐃᐃΔⵠⵠᐃΔⵠᐃ": ⵠⲆ++,
		"ΔᐃⲆᐃΔⲆΔΔΔ": ⵠⲆ++,
		"ⲆⵠΔⲆᐃⲆᐃⵠⵠ": ⵠⲆ++,
		"ⵠΔΔⵠⲆⲆⲆᐃⵠ": ⵠⲆ++,
		"ⲆᐃⲆⵠᐃᐃΔ": ⵠⲆ++,
		"ΔⲆⲆⲆⵠⵠᐃ": ⵠⲆ++,
		"ⲆⵠⵠⵠΔⵠⲆ": ⵠⲆ++,
		"ᐃᐃⲆⲆΔΔΔ": ⵠⲆ++,
		"ᐃᐃᐃⲆⵠⵠⵠ": ⵠⲆ++,
		"ⲆⲆᐃᐃΔⵠΔᐃΔ": ⵠⲆ++,
		"ⲆᐃⵠⲆΔⲆΔ": ⵠⲆ++,
		"ⲆΔᐃⲆᐃⲆⵠ": ⵠⲆ++,
		"ⲆⲆⲆⵠΔⵠⵠ": ⵠⲆ++,
		"ⵠⲆⵠⵠⲆΔⲆ": ⵠⲆ++,
		"ⵠⵠᐃⲆᐃΔΔ": ⵠⲆ++,
		"ⵠᐃⵠΔⲆΔⵠ": ⵠⲆ++,
		"ⵠΔⵠⵠᐃΔΔ": ⵠⲆ++,
		"ᐃⲆⵠᐃⲆ": ⵠⲆ++,
		"ᐃⲆᐃᐃΔⲆⲆⵠⵠ": ⵠⲆ++,
		"ⵠᐃⵠⲆᐃΔΔ": ⵠⲆ++,
		"ΔⵠⲆᐃⵠⵠΔ": ⵠⲆ++,
		"ᐃΔΔⵠⵠΔᐃ": ⵠⲆ++,
		"ⵠⵠΔⲆⵠⵠⵠ": ⵠⲆ++,
		"ⲆΔⲆⲆⲆΔⵠ": ⵠⲆ++,
		"ⲆⲆᐃⲆΔᐃΔ": ⵠⲆ++,
		"ΔⲆᐃᐃⲆⲆⲆ": ⵠⲆ++,
		"ᐃⲆΔΔⵠⵠΔ": ⵠⲆ++,
		"ΔⲆᐃⵠⵠⲆΔ": ⵠⲆ++,
		"ⲆΔΔⲆⲆⵠΔ": ⵠⲆ++,
		"ⵠΔᐃⵠⵠΔⲆ": ⵠⲆ++,
		"ⲆᐃⲆⲆⵠⵠⲆ": ⵠⲆ++,
		"ᐃⵠΔΔⵠᐃⵠ": ⵠⲆ++,
		"ΔΔᐃΔⲆ": ⵠⲆ++,
		"ⵠⵠⲆⲆⲆᐃᐃ": ⵠⲆ++,
		"ΔⵠᐃⲆᐃⲆⲆ": ⵠⲆ++,
		"ⵠⵠᐃΔⵠⲆⵠ": ⵠⲆ++,
		"ⲆᐃᐃΔⲆⵠΔ": ⵠⲆ++,
		"ⵠⵠⵠⵠⲆⲆⵠ": ⵠⲆ++,
		"ᐃΔᐃΔΔΔⵠ": ⵠⲆ++,
		"ΔⵠⵠᐃΔΔᐃ": ⵠⲆ++,
		"ⵠΔⲆⵠⲆΔⵠ": ⵠⲆ++,
		"ⲆⵠΔⵠⵠⵠⵠ": ⵠⲆ++,
		"ᐃΔⲆⲆΔⵠⵠ": ⵠⲆ++,
		"ΔΔᐃⲆΔᐃᐃ": ⵠⲆ++,
		"ΔᐃⲆᐃΔⲆΔ": ⵠⲆ++,
		"ⵠΔⵠΔΔⲆΔ": ⵠⲆ++,
		"ⵠⵠᐃΔⲆᐃᐃ": ⵠⲆ++,
		"ΔᐃΔᐃᐃΔᐃ": ⵠⲆ++,
		"ⵠⲆΔⵠⲆΔⵠ": ⵠⲆ++,
		"ᐃⲆᐃⵠᐃᐃⵠ": ⵠⲆ++,
		"ⲆΔΔⲆⵠⲆⲆ": ⵠⲆ++,
		"ⵠⵠΔΔⲆⵠⵠ": ⵠⲆ++,
		"ΔⲆΔⲆΔⲆΔ": ⵠⲆ++,
		"ΔⵠⲆᐃⵠⵠⲆ": ⵠⲆ++,
		"ⲆᐃᐃⲆΔΔⵠ": ⵠⲆ++,
		"ⲆⲆΔΔᐃᐃᐃ": ⵠⲆ++,
		"ΔΔΔᐃᐃᐃⵠ": ⵠⲆ++,
		"ΔⵠᐃⵠᐃᐃⲆ": ⵠⲆ++,
		"ⲆⵠΔⲆⵠⵠⲆ": ⵠⲆ++,
		"ᐃⵠᐃⲆΔᐃΔᐃᐃ": ⵠⲆ++,
		"ΔⲆΔⲆΔⲆⵠΔΔ": ⵠⲆ++,
		"ΔⲆⵠⲆΔⲆᐃΔᐃ": ⵠⲆ++,
		"ᐃⲆⲆⵠᐃΔⲆᐃᐃ": ⵠⲆ++,
		"ⲆⲆⵠⵠⲆΔΔ": ⵠⲆ++,
		"ᐃⵠᐃⲆΔΔᐃ": ⵠⲆ++,
		"ⵠΔⲆⲆΔ": ⵠⲆ++,
		"ΔⲆⲆΔᐃⲆⲆ": ⵠⲆ++,
		"ΔᐃΔⲆᐃᐃᐃ": ⵠⲆ++,
		"ⵠᐃΔᐃⵠⵠⲆ": ⵠⲆ++,
		"ⵠᐃⲆᐃⵠⲆⵠ": ⵠⲆ++,
		"ⵠⵠᐃⲆᐃᐃⵠ": ⵠⲆ++,
		"ⵠⲆᐃⵠΔΔᐃ": ⵠⲆ++,
		"ⵠⵠΔΔΔΔⲆ": ⵠⲆ++,
		"ⵠⲆⲆⲆΔΔⵠ": ⵠⲆ++,
		"ⲆⵠⵠΔⵠⲆᐃ": ⵠⲆ++,
		"ⵠⵠΔⵠᐃᐃⵠ": ⵠⲆ++,
		"ⲆⲆΔΔΔᐃΔ": ⵠⲆ++,
		"ΔᐃⲆⵠᐃⵠⵠ": ⵠⲆ++,
		"ΔⵠᐃⲆΔᐃⲆ": ⵠⲆ++,
		"ⵠⵠᐃⵠΔᐃᐃ": ⵠⲆ++,
		"ΔΔΔᐃⲆⲆᐃ": ⵠⲆ++,
		"ΔΔⲆΔⵠⲆᐃ": ⵠⲆ++,
		"ⵠΔᐃᐃⲆⲆΔ": ⵠⲆ++,
		"ΔⲆᐃΔΔᐃᐃ": ⵠⲆ++,
		"ⲆⵠⲆⵠΔⲆᐃ": ⵠⲆ++,
		"ᐃⲆΔⲆᐃⵠᐃⲆⵠ": ⵠⲆ++,
		"Δᐃᐃⵠⵠ": ⵠⲆ++,
		"ⲆⵠⲆⵠΔᐃΔ": ⵠⲆ++,
		"ⲆΔᐃᐃΔΔⲆ": ⵠⲆ++,
		"ⵠᐃᐃᐃⲆᐃΔ": ⵠⲆ++,
		"ⲆⲆΔⵠᐃΔⲆ": ⵠⲆ++,
		"ΔⵠⲆⲆⵠⲆⵠ": ⵠⲆ++,
		"ΔᐃⲆⲆⵠⲆᐃ": ⵠⲆ++,
		"ΔΔⲆⵠⲆΔⲆ": ⵠⲆ++,
		"ᐃᐃΔⵠⵠⵠΔ": ⵠⲆ++,
		"ΔⵠⵠΔᐃⲆᐃ": ⵠⲆ++,
		"ⲆⵠᐃⵠⲆⲆᐃ": ⵠⲆ++,
		"ⲆⵠΔᐃⲆΔΔ": ⵠⲆ++,
		"ᐃⲆⲆΔΔⵠⲆ": ⵠⲆ++,
		"ᐃᐃΔⲆⲆⲆΔ": ⵠⲆ++,
		"ⲆΔⵠΔⲆΔᐃ": ⵠⲆ++,
		"ᐃⲆⵠᐃΔᐃⵠ": ⵠⲆ++,
		"ⵠᐃⲆⵠⲆⲆᐃ": ⵠⲆ++,
		"ⵠⵠⲆᐃⲆⵠᐃ": ⵠⲆ++,
		"ᐃⵠᐃⵠⲆΔᐃ": ⵠⲆ++,
		"ⲆⵠⵠᐃⲆᐃΔ": ⵠⲆ++,
		"ΔⲆⵠⲆᐃⵠⵠ": ⵠⲆ++,
		"ⲆⲆⵠᐃᐃⵠⵠ": ⵠⲆ++,
		"ⵠᐃⲆᐃⵠⵠⲆ": ⵠⲆ++,
		"ⲆⵠⲆⵠⵠᐃⲆⵠⵠ": ⵠⲆ++,
		"ΔⲆΔᐃᐃᐃⵠ": ⵠⲆ++,
		"ᐃⲆᐃⲆΔⵠᐃ": ⵠⲆ++,
		"ΔⵠⵠΔᐃΔᐃ": ⵠⲆ++,
		"ΔⲆᐃᐃⵠΔᐃ": ⵠⲆ++,
		"ΔΔⲆΔⲆΔⵠ": ⵠⲆ++,
		"ⲆⲆᐃⲆⵠΔᐃ": ⵠⲆ++,
		"ⵠⲆᐃⵠΔⲆΔ": ⵠⲆ++,
		"ⵠⵠᐃᐃΔᐃⲆ": ⵠⲆ++,
		"ⵠⵠᐃΔⵠᐃᐃ": ⵠⲆ++,
		"ⵠⵠᐃΔⵠᐃΔ": ⵠⲆ++,
		"ᐃⵠⲆΔⲆⵠΔ": ⵠⲆ++,
		"ⲆΔⵠᐃΔⲆΔ": ⵠⲆ++,
		"ⵠΔⵠⵠⲆⲆⲆ": ⵠⲆ++,
		"ΔΔⲆⵠⲆⲆᐃ": ⵠⲆ++,
		"ΔⲆᐃᐃΔⲆᐃ": ⵠⲆ++,
		"ⵠⲆᐃᐃⵠᐃᐃ": ⵠⲆ++,
		"ᐃⲆᐃⲆΔΔⲆ": ⵠⲆ++,
		"ᐃᐃᐃΔᐃⵠᐃ": ⵠⲆ++,
		"ΔᐃⵠⵠΔᐃⲆ": ⵠⲆ++,
		"Ⲇⵠⵠⵠᐃⵠⵠ": ⵠⲆ++,
		"ⵠⵠΔⲆᐃᐃᐃ": ⵠⲆ++,
		"ⲆⵠΔᐃⵠⲆⲆ": ⵠⲆ++,
		"ⲆⵠⲆⵠΔⵠⲆ": ⵠⲆ++,
		"ⲆⲆᐃᐃⲆΔⵠ": ⵠⲆ++,
		"ⵠⵠⲆᐃⲆ": ⵠⲆ++,
		"ⵠΔⵠΔᐃΔⵠ": ⵠⲆ++,
		"ⲆΔΔⲆⵠΔΔ": ⵠⲆ++,
		"ⲆⵠⵠⵠΔΔⲆ": ⵠⲆ++,
		"ΔⵠᐃΔᐃⲆΔ": ⵠⲆ++,
		"ᐃⲆᐃⲆⲆⲆⵠ": ⵠⲆ++,
		"ⲆⲆᐃᐃΔⵠΔ": ⵠⲆ++,
		"ⲆⲆⲆⲆⵠᐃⲆ": ⵠⲆ++,
		"ᐃᐃᐃⲆΔⵠΔ": ⵠⲆ++,
		"ⲆⵠᐃⲆⲆᐃⲆ": ⵠⲆ++,
		"ⲆΔΔᐃⵠΔⲆ": ⵠⲆ++,
		"ⵠᐃⲆᐃΔΔⲆ": ⵠⲆ++,
		"ⵠⵠⲆᐃΔΔᐃ": ⵠⲆ++,
		"ⵠᐃΔΔⲆⵠᐃ": ⵠⲆ++,
		"ᐃⲆⲆΔⲆⲆⲆ": ⵠⲆ++,
		"ᐃⲆⵠᐃΔⲆΔ": ⵠⲆ++,
		"ΔΔᐃⵠⵠⲆⵠ": ⵠⲆ++,
		"ᐃⲆᐃΔΔⲆⵠ": ⵠⲆ++,
		"ᐃΔⲆΔΔΔᐃ": ⵠⲆ++,
		"ⲆⲆⵠⵠΔⵠᐃ": ⵠⲆ++,
		"ᐃⲆⵠΔΔⵠᐃ": ⵠⲆ++,
		"ⲆΔᐃᐃⵠⵠⵠ": ⵠⲆ++,
		"ᐃΔⵠΔⵠⵠⲆ": ⵠⲆ++,
		"ⲆⲆΔⲆΔⲆⲆ": ⵠⲆ++,
		"ΔⲆⵠᐃΔᐃΔ": ⵠⲆ++,
		"ΔᐃⲆΔΔΔΔ": ⵠⲆ++,
		"ᐃᐃⲆᐃᐃⵠΔ": ⵠⲆ++,
		"ΔⵠΔⵠᐃᐃΔ": ⵠⲆ++,
		"ⲆΔΔᐃⲆᐃⵠ": ⵠⲆ++,
		"ⲆⵠⲆⲆⵠΔⲆ": ⵠⲆ++,
		"ΔⵠⲆΔΔⲆⵠ": ⵠⲆ++,
		"ΔⵠⲆⵠⲆⲆⵠ": ⵠⲆ++,
		"ⵠⲆⵠᐃⵠⵠΔ": ⵠⲆ++,
		"ⲆᐃⲆΔⲆᐃⵠ": ⵠⲆ++,
		"ᐃⲆⲆᐃⲆⵠⲆ": ⵠⲆ++,
		"ⲆΔⵠⵠ": ⵠⲆ++,
		"ⲆⲆΔⵠ": ⵠⲆ++,
		"ΔⵠΔᐃⵠΔⲆ": ⵠⲆ++,
		"ⲆᐃΔΔⲆᐃⲆ": ⵠⲆ++,
		"ΔⲆΔΔⲆᐃⲆ": ⵠⲆ++,
		"ⵠⲆⵠᐃⲆⵠⵠ": ⵠⲆ++,
		"ΔΔΔⲆΔᐃⵠ": ⵠⲆ++,
		"ΔΔⲆᐃⵠΔⵠ": ⵠⲆ++,
		"ΔⵠΔᐃⲆⲆΔ": ⵠⲆ++,
		"Δⵠⵠᐃⵠ": ⵠⲆ++,
		"ᐃᐃⲆⵠⲆᐃᐃ": ⵠⲆ++,
		"ⵠᐃⲆⵠⵠ": ⵠⲆ++,
		"ⵠⵠᐃⵠⵠⵠᐃ": ⵠⲆ++,
		"ᐃᐃⵠΔⲆ": ⵠⲆ++,
		"ᐃᐃⲆᐃⲆⵠᐃ": ⵠⲆ++,
		"ⲆΔⲆⲆᐃ": ⵠⲆ++,
		"ΔⵠⲆⲆΔⵠⲆ": ⵠⲆ++,
		"ΔⲆΔⲆΔ": ⵠⲆ++,
		"ⵠⵠᐃᐃⵠ": ⵠⲆ++,
		"ΔΔⲆΔⲆⵠΔ": ⵠⲆ++,
		"ⲆⲆΔΔᐃᐃⲆ": ⵠⲆ++,
		"ⲆⵠⵠⵠᐃⲆⵠ": ⵠⲆ++,
		"ΔᐃⲆⲆΔⵠᐃ": ⵠⲆ++,
		"ⲆᐃΔⵠⲆΔᐃ": ⵠⲆ++,
		"ΔᐃΔⵠⲆΔⵠ": ⵠⲆ++,
		"ᐃⲆΔⵠⵠⵠᐃ": ⵠⲆ++,
		"ᐃᐃᐃⵠᐃⵠⲆ": ⵠⲆ++,
		"ᐃᐃⵠΔⲆⵠᐃ": ⵠⲆ++,
		"ⵠⲆᐃⲆΔ": ⵠⲆ++,
		"ᐃᐃΔⵠᐃΔⵠ": ⵠⲆ++,
		"ᐃᐃⵠⵠᐃ": ⵠⲆ++,
		"ⵠⲆΔᐃᐃⲆΔ": ⵠⲆ++,
		"ⵠᐃΔᐃΔⲆΔ": ⵠⲆ++,
		"ⵠΔᐃⵠⵠⵠⵠ": ⵠⲆ++,
		"ⲆⵠⲆⵠΔⲆⵠ": ⵠⲆ++,
		"ⲆΔΔᐃⲆⲆΔ": ⵠⲆ++,
		"ⵠΔᐃⲆᐃΔᐃ": ⵠⲆ++,
		"ΔᐃⵠΔⲆⲆⲆΔΔ": ⵠⲆ++,
		"ⲆⵠⲆⵠᐃⲆⲆ": ⵠⲆ++,
		"ⵠᐃⲆᐃᐃⲆΔ": ⵠⲆ++,
		"ⲆⲆᐃᐃᐃⵠΔⲆⵠ": ⵠⲆ++,
		"ⵠⵠⲆⲆᐃΔᐃ": ⵠⲆ++,
		"ΔΔΔᐃᐃΔᐃ": ⵠⲆ++,
		"ⲆᐃⵠⵠⵠⵠⲆ": ⵠⲆ++,
		"ⵠᐃⵠⵠΔΔᐃ": ⵠⲆ++,
		"ⵠᐃⲆΔⲆ": ⵠⲆ++,
		"ΔⲆⲆⲆⲆⲆΔ": ⵠⲆ++,
		"ΔⲆΔΔᐃⵠⲆ": ⵠⲆ++,
		"ᐃⵠⵠᐃⲆⲆΔ": ⵠⲆ++,
		"ⲆΔⲆⵠⵠΔᐃ": ⵠⲆ++,
		"ᐃᐃⵠⲆΔΔⲆ": ⵠⲆ++,
		"ΔⵠⲆᐃⵠΔⵠ": ⵠⲆ++,
		"ⲆΔᐃΔΔⵠΔ": ⵠⲆ++,
		"ⲆᐃᐃⲆⲆᐃᐃ": ⵠⲆ++,
		"ⲆⲆⲆᐃᐃΔⲆ": ⵠⲆ++,
		"ᐃΔⵠⲆⲆᐃⵠ": ⵠⲆ++,
		"ⲆΔⲆⲆⵠΔΔ": ⵠⲆ++,
		"ⵠⵠᐃⲆᐃᐃⲆ": ⵠⲆ++,
		"ΔⵠΔΔᐃⵠᐃ": ⵠⲆ++,
		"ⲆΔⲆΔⲆⲆⵠ": ⵠⲆ++,
		"ⲆΔᐃⲆΔ": ⵠⲆ++,
		"ⲆⲆⲆⵠΔⵠᐃ": ⵠⲆ++,
		"ⵠⵠᐃⲆΔⵠⲆ": ⵠⲆ++,
		"ⲆᐃΔⲆᐃᐃⲆ": ⵠⲆ++,
		"ΔΔΔⵠΔⵠⵠ": ⵠⲆ++,
		"ⵠⵠⵠⵠⵠΔᐃ": ⵠⲆ++,
		"ⲆⲆΔΔⵠⲆⲆ": ⵠⲆ++,
		"ᐃⵠⲆⲆⵠΔᐃ": ⵠⲆ++,
		"ᐃⵠⵠΔⵠᐃⵠ": ⵠⲆ++,
		"ᐃⲆᐃⲆⲆⲆᐃ": ⵠⲆ++,
		"ⵠⲆΔⲆⲆΔⲆ": ⵠⲆ++,
		"ⲆΔᐃΔⵠᐃⲆ": ⵠⲆ++,
		"ΔΔΔⲆᐃΔⵠ": ⵠⲆ++,
		"ⵠΔᐃⲆⲆΔΔ": ⵠⲆ++,
		"ⵠⵠⲆΔⵠΔⵠ": ⵠⲆ++,
		"ΔⲆⵠΔᐃ": ⵠⲆ++,
		"ΔΔΔⵠΔⲆⲆ": ⵠⲆ++,
		"ᐃⲆᐃᐃⲆᐃⵠ": ⵠⲆ++,
		"ⲆⵠⲆΔᐃᐃⲆ": ⵠⲆ++,
		"ΔⲆΔᐃⵠⲆᐃ": ⵠⲆ++,
		"ⵠΔⲆΔΔⵠᐃ": ⵠⲆ++,
		"ΔⵠΔΔΔⲆᐃ": ⵠⲆ++,
		"ⲆⲆⵠⲆⲆⲆⵠ": ⵠⲆ++,
		"ᐃⵠⵠⵠⲆⲆⲆ": ⵠⲆ++,
		"ᐃⲆᐃΔⵠᐃⵠ": ⵠⲆ++,
		"ⵠⵠⵠᐃⲆᐃⲆ": ⵠⲆ++,
		"ⲆΔΔⲆⵠⲆᐃ": ⵠⲆ++,
		"ΔⲆΔⲆΔⲆⵠ": ⵠⲆ++,
		"ᐃᐃⵠⵠᐃⲆⵠ": ⵠⲆ++,
		"ⲆⵠᐃΔⵠⲆΔ": ⵠⲆ++,
		"ᐃⲆᐃΔⲆⲆΔ": ⵠⲆ++,
		"ΔᐃΔΔⲆⲆΔ": ⵠⲆ++,
		"ⲆᐃⵠΔΔⲆᐃ": ⵠⲆ++,
		"ⵠᐃᐃⵠΔΔΔ": ⵠⲆ++,
		"ⵠΔᐃΔⵠⵠⲆ": ⵠⲆ++,
		"ⲆΔⵠᐃⲆⵠᐃ": ⵠⲆ++,
		"ⵠⵠΔᐃⵠ": ⵠⲆ++,
		"ⵠⲆⲆⲆΔⲆᐃ": ⵠⲆ++,
		"ΔⵠⲆᐃΔⲆⲆ": ⵠⲆ++,
		"Ⲇⵠⵠᐃᐃⵠᐃ": ⵠⲆ++,
		"ⲆᐃΔᐃΔⲆⵠ": ⵠⲆ++,
		"ΔⵠᐃᐃⲆΔⲆ": ⵠⲆ++,
		"ΔΔᐃΔⲆⲆⲆ": ⵠⲆ++,
		"ΔΔᐃⵠⲆΔⵠ": ⵠⲆ++,
		"ⲆΔⵠᐃΔⵠⵠ": ⵠⲆ++,
		"ᐃⲆⲆΔΔᐃᐃ": ⵠⲆ++,
		"ᐃᐃΔΔⵠᐃΔ": ⵠⲆ++,
		"ⵠᐃⲆᐃⲆⲆⵠ": ⵠⲆ++,
		"ΔΔⵠᐃΔᐃΔ": ⵠⲆ++,
		"ᐃᐃᐃⲆⵠⵠⲆ": ⵠⲆ++,
		"ᐃⲆⲆᐃⲆⲆΔ": ⵠⲆ++,
		"ΔⵠΔⲆⲆᐃⵠ": ⵠⲆ++,
		"ᐃΔⵠΔΔⲆΔ": ⵠⲆ++,
		"ⲆᐃΔⵠᐃΔΔ": ⵠⲆ++,
		"ⵠᐃᐃⲆΔΔⲆ": ⵠⲆ++,
		"ⵠᐃⵠⲆⵠⲆⲆ": ⵠⲆ++,
		"ⲆᐃⵠΔᐃΔⵠ": ⵠⲆ++,
		"ⲆⵠᐃᐃⲆᐃⵠ": ⵠⲆ++,
		"ΔⵠᐃᐃⵠⵠΔ": ⵠⲆ++,
		"ⲆᐃⲆΔⲆⲆⲆ": ⵠⲆ++,
		"ⲆΔᐃⵠᐃⲆΔ": ⵠⲆ++,
		"ⵠᐃᐃⵠⵠΔⲆ": ⵠⲆ++,
		"ΔⲆΔⵠⲆⵠⵠ": ⵠⲆ++,
		"ᐃⲆⲆΔⵠⵠⵠ": ⵠⲆ++,
		"ⲆⵠᐃᐃᐃᐃΔ": ⵠⲆ++,
		"ᐃΔΔⲆⵠᐃΔ": ["#E9CF96", "#144940"],
		"ⲆΔⲆⵠΔΔᐃ": ⵠⲆ++,
		"ΔⲆⵠᐃΔⵠΔ": ⵠⲆ++,
		"ᐃⵠΔⲆᐃⵠⵠ": ⵠⲆ++,
		"ΔⵠⵠⲆⲆⵠⵠ": ⵠⲆ++,
		"ΔᐃΔⲆᐃⵠΔ": ⵠⲆ++,
		"ΔΔⲆᐃΔΔⵠ": ⵠⲆ++,
		"ΔⲆᐃⲆⵠⲆⲆ": ⵠⲆ++,
		"ᐃΔΔⲆΔ": ⵠⲆ++,
		"ⲆᐃⲆⵠᐃΔⵠ": ⵠⲆ++,
		"ΔᐃΔᐃⵠᐃᐃ": ⵠⲆ++,
		"ⲆⲆᐃᐃⲆΔΔ": ⵠⲆ++,
		"ΔⲆⲆΔΔΔᐃ": ⵠⲆ++,
		"ⲆⵠⲆᐃΔⲆⲆ": ⵠⲆ++,
		"ΔᐃⲆᐃᐃⲆⵠ": ⵠⲆ++,
		"ⵠⲆΔΔΔⵠⲆ": ⵠⲆ++,
		"ⵠⲆΔⲆᐃΔᐃ": ⵠⲆ++,
		"ⲆᐃⲆΔᐃᐃⲆ": ⵠⲆ++,
		"ΔᐃⵠΔΔᐃΔ": ⵠⲆ++,
		"ⵠⲆᐃΔᐃⵠⲆ": ⵠⲆ++,
		"ΔⵠⵠᐃΔᐃΔ": ⵠⲆ++,
		"ΔⵠᐃΔᐃⲆᐃ": ⵠⲆ++,
		"ᐃⲆΔⵠᐃⵠᐃ": ⵠⲆ++,
		"ⵠⵠᐃⵠⵠⲆⵠ": ⵠⲆ++,
		"ⵠΔⲆΔᐃᐃΔ": ⵠⲆ++,
		"ⵠⵠᐃⵠᐃⲆⵠ": ⵠⲆ++,
		"ⲆⲆⲆΔⲆⲆⵠ": ⵠⲆ++,
		"ⵠⲆⲆⵠⵠⲆᐃ": ⵠⲆ++,
		"ᐃⵠⵠⲆⲆⲆⲆ": ⵠⲆ++,
		"ᐃΔΔΔᐃᐃⵠ": ⵠⲆ++,
		"ⲆᐃⲆⲆΔᐃⲆ": ⵠⲆ++,
		"ΔᐃᐃⵠΔᐃⲆ": ⵠⲆ++,
		"ΔⲆⵠⵠΔᐃᐃ": ⵠⲆ++,
		"ⵠⵠΔⲆⲆΔⲆ": ⵠⲆ++,
		"ΔᐃⵠΔᐃᐃⲆ": ⵠⲆ++,
		"ᐃⵠⲆΔΔⲆᐃ": ⵠⲆ++,
		"ΔΔⲆⲆⵠΔΔ": ⵠⲆ++,
		"ΔⵠᐃⵠΔΔⲆ": ⵠⲆ++,
		"ΔⲆⲆⵠⵠⲆᐃ": ⵠⲆ++,
		"ⲆᐃⲆᐃᐃⵠΔ": ⵠⲆ++,
		"ΔΔⵠⲆⵠΔⵠ": ⵠⲆ++,
		"ᐃⲆΔⲆⵠΔΔ": ⵠⲆ++,
		"ᐃΔⵠᐃᐃⲆⲆ": ⵠⲆ++,
		"ᐃⲆⲆᐃⲆᐃⵠ": ⵠⲆ++,
		"ⲆᐃᐃⵠⲆᐃΔ": ⵠⲆ++,
		"ⲆⵠⲆᐃⵠΔⵠ": ⵠⲆ++,
		"ΔⲆⵠᐃᐃΔⵠ": ⵠⲆ++,
		"ⲆᐃᐃᐃⲆⲆᐃ": ⵠⲆ++,
		"ΔΔᐃΔΔⲆᐃ": ⵠⲆ++,
		"ⵠⵠΔⲆⵠΔᐃ": ⵠⲆ++,
		"ⲆⵠⲆⵠⵠΔᐃ": ⵠⲆ++,
		"ⲆᐃΔΔᐃᐃⵠ": ⵠⲆ++,
		"ⵠᐃΔⵠᐃΔᐃ": ⵠⲆ++,
		"ᐃⵠΔᐃᐃⲆᐃ": ⵠⲆ++,
		"ⵠⵠⲆΔⵠⵠⲆ": ⵠⲆ++,
		"ᐃΔⲆⲆΔΔᐃ": ⵠⲆ++,
		"ΔⲆⲆΔᐃᐃᐃ": ⵠⲆ++,
		"ⵠⲆⲆⵠⲆⲆⲆ": ⵠⲆ++,
		"ⵠᐃⵠΔⲆᐃΔ": ⵠⲆ++,
		"ⲆΔⲆⵠⲆⵠⲆ": ⵠⲆ++,
		"ΔΔⲆᐃᐃⵠΔ": ⵠⲆ++,
		"ⵠᐃⲆΔΔᐃΔ": ⵠⲆ++,
		"ΔⲆΔᐃⲆⵠⵠ": ⵠⲆ++,
		"ⵠᐃⲆⲆⲆⵠⲆ": ⵠⲆ++,
		"ⵠΔᐃⵠⲆⲆᐃ": ⵠⲆ++,
		"ⵠⵠⲆⵠⵠⵠΔ": ⵠⲆ++,
		"ⵠⲆⲆⲆᐃᐃⲆ": ⵠⲆ++,
		"ⵠⲆᐃⵠⵠΔΔ": ⵠⲆ++,
		"ᐃⵠⵠⲆΔᐃᐃ": ⵠⲆ++,
		"ⵠⵠᐃᐃᐃⵠΔ": ⵠⲆ++,
		"ⵠᐃⲆᐃΔ": ⵠⲆ++,
		"ⲆΔᐃⵠⵠΔⲆ": ⵠⲆ++,
		"ᐃΔⲆΔⵠ": ⵠⲆ++,
		"ⲆⲆᐃⲆΔΔᐃ": ⵠⲆ++,
		"ᐃⲆⲆᐃⵠΔⲆ": ⵠⲆ++,
		"ᐃΔⲆⵠⵠⲆᐃ": ⵠⲆ++,
		"ᐃⵠⵠᐃΔⲆΔ": ⵠⲆ++,
		"ΔΔⵠΔᐃⵠΔ": ⵠⲆ++,
		"ⲆᐃⵠⲆᐃᐃⲆ": ⵠⲆ++,
		"ᐃᐃⲆⲆⵠⲆΔ": ⵠⲆ++,
		"ⲆΔⵠⵠᐃⲆⲆ": ⵠⲆ++,
		"Ⲇᐃᐃⵠⵠⵠᐃ": ⵠⲆ++,
		"ΔⲆⵠᐃⵠᐃᐃ": ⵠⲆ++,
		"ⲆᐃᐃⵠᐃᐃⲆ": ⵠⲆ++,
		"ᐃΔⲆⲆᐃᐃΔ": ⵠⲆ++,
		"ⲆⵠΔΔⵠⲆᐃ": ⵠⲆ++,
		"ⲆᐃΔⵠⵠΔⲆ": ⵠⲆ++,
		"ᐃⲆᐃⵠΔⲆᐃ": ⵠⲆ++,
		"ᐃⲆΔⵠⲆᐃⲆ": ⵠⲆ++,
		"ⲆΔⲆⵠⵠᐃⲆ": ⵠⲆ++,
		"ᐃᐃΔᐃⲆⲆⵠ": ⵠⲆ++,
		"ⲆⲆⲆⵠⵠⵠⵠ": ⵠⲆ++,
		"ΔⵠᐃΔⵠⲆΔ": ⵠⲆ++,
		"ⵠᐃⲆᐃⵠᐃⵠ": ⵠⲆ++,
		"ΔᐃΔⵠΔᐃᐃ": ⵠⲆ++,
		"ⲆΔΔΔⲆⲆΔ": ⵠⲆ++,
		"ΔᐃⵠⲆΔⲆⲆ": ⵠⲆ++,
		"ᐃⵠⲆᐃⵠⲆⲆ": ⵠⲆ++,
		"ΔⵠΔᐃᐃⲆⵠ": ⵠⲆ++,
		"ΔⵠⲆⲆᐃᐃΔ": ⵠⲆ++,
		"ΔⵠⲆᐃᐃᐃⲆ": ⵠⲆ++,
		"ΔⲆⵠΔⲆΔᐃ": ⵠⲆ++,
		"ᐃᐃⵠⵠⵠᐃⵠ": ⵠⲆ++,
		"ᐃΔΔⲆⵠΔᐃ": ⵠⲆ++,
		"ⲆⲆᐃⲆⲆᐃⲆ": ⵠⲆ++,
		"ⲆᐃᐃⵠΔΔⵠ": ⵠⲆ++,
		"ᐃⲆⵠᐃΔΔᐃ": ⵠⲆ++,
		"ΔⵠⵠⲆΔⲆᐃ": ⵠⲆ++,
		"ΔΔⵠⵠᐃⲆΔ": ⵠⲆ++,
		"ⵠΔⵠⲆⵠⵠΔ": ⵠⲆ++,
		"ⲆᐃΔΔᐃᐃΔ": ⵠⲆ++,
		"ΔⵠⵠΔΔⵠⵠ": ⵠⲆ++,
		"ⲆΔΔᐃᐃᐃᐃ": ⵠⲆ++,
		"ⵠⲆⲆᐃⵠᐃⲆ": ⵠⲆ++,
		"ᐃⵠΔΔⵠΔᐃ": ⵠⲆ++,
		"ΔⵠΔΔⲆᐃᐃ": ⵠⲆ++,
		"ⲆⵠᐃⲆᐃᐃⲆ": ⵠⲆ++,
		"ᐃΔᐃⵠᐃⲆⲆ": ⵠⲆ++,
		"ᐃΔⲆⵠⲆⵠⵠ": ⵠⲆ++,
		"ᐃⵠᐃᐃΔⵠⲆ": ⵠⲆ++,
		"ⵠⵠΔⲆΔⵠᐃ": ⵠⲆ++,
		"ᐃΔᐃΔⲆⲆᐃ": ⵠⲆ++,
		"ⵠⲆⵠᐃᐃⲆⲆ": ⵠⲆ++,
		"ΔΔⲆᐃᐃⲆⲆ": ⵠⲆ++,
		"ⲆΔⲆⵠⵠⲆᐃ": ⵠⲆ++,
		"ⲆΔΔⵠΔⲆΔ": ⵠⲆ++
	};
	var ⵠⲆ = ⵠⲆᐃ;
	const ΔᐃⲆⲆⲆΔΔ = ΔᐃΔᐃⵠ;
	const ᐃⵠᐃⲆⲆⵠⲆ = ᐃⵠⵠⲆⲆ;
	const ⵠⲆΔⲆᐃ = ⵠᐃⵠᐃⵠ;
	var ⲆΔⵠ = {
		"ⲆⵠⲆⲆᐃ": ⵠⲆ++,
		"ᐃᐃⲆΔᐃ": ⵠⲆ++,
		"Δⵠⵠⵠⵠ": ⵠⲆ++,
		"ⵠⵠᐃⲆⵠ": ⵠⲆ++,
		"ⲆΔⲆⵠΔ": ⵠⲆ++,
		"ᐃⲆΔⵠᐃ": ⵠⲆ++,
		"Ⲇⵠᐃᐃᐃ": ⵠⲆ++,
		"ⵠᐃⲆⲆᐃ": ⵠⲆ++,
		"ⲆᐃΔⵠⲆ": ⵠⲆ++,
		"ΔⵠᐃᐃⲆ": ⵠⲆ++,
		"ΔΔΔⲆⲆ": ⵠⲆ++,
		"ⲆᐃᐃⵠⲆ": ⵠⲆ++,
		"ⵠᐃΔΔᐃ": ⵠⲆ++,
		"ⵠΔⲆⵠⵠ": ⵠⲆ++,
		"ⵠΔⵠⵠΔ": ⵠⲆ++,
		"ⲆⵠⲆΔΔ": ⵠⲆ++,
		"ⵠⲆΔⵠᐃ": ⵠⲆ++,
		"ⵠⲆⵠⵠᐃ": ⵠⲆ++,
		"ⵠᐃΔⵠⵠ": ⵠⲆ++,
		"ⵠⲆΔᐃⲆ": ⵠⲆ++,
		"ⵠⵠⲆⲆΔ": ⵠⲆ++,
		"ⲆⵠⲆᐃΔ": ⵠⲆ++,
		"ⲆⵠΔᐃΔ": ⵠⲆ++,
		"ⲆᐃΔᐃΔ": ⵠⲆ++,
		"Δⵠᐃᐃⵠ": ⵠⲆ++,
		"ΔᐃⵠᐃⲆ": ⵠⲆ++,
		"ⵠᐃⵠⵠΔ": ⵠⲆ++,
		"ⵠΔⲆⲆᐃ": ⵠⲆ++,
		"ᐃⵠᐃⵠⲆ": ⵠⲆ++,
		"ⵠⲆⲆⲆΔ": ⵠⲆ++,
		"ᐃⲆⵠᐃΔ": ⵠⲆ++,
		"ⵠᐃⵠⲆᐃ": ⵠⲆ++,
		"ΔⵠᐃⵠΔ": ⵠⲆ++,
		"ᐃⵠᐃᐃⲆ": ⵠⲆ++,
		"ΔᐃΔΔΔ": ⵠⲆ++,
		"ⵠⲆᐃⲆⵠ": ⵠⲆ++,
		"ⲆⲆⲆΔΔ": ⵠⲆ++,
		"ᐃΔᐃᐃⲆ": ⵠⲆ++,
		"ⵠΔⵠⵠᐃ": ⵠⲆ++,
		"ᐃⲆΔⵠⵠ": ⵠⲆ++,
		"ⲆΔΔΔⵠ": ⵠⲆ++,
		"ΔΔᐃⲆⵠ": ⵠⲆ++,
		"Ⲇⵠⵠⵠⵠ": ⵠⲆ++,
		"ᐃᐃⲆⲆᐃ": ⵠⲆ++,
		"ᐃⵠΔᐃⲆ": ⵠⲆ++,
		"ᐃⲆⲆᐃⵠ": ⵠⲆ++,
		"ⲆᐃⲆⵠᐃ": ⵠⲆ++,
		"ΔⵠⲆᐃΔ": ⵠⲆ++,
		"ᐃᐃⵠⲆⲆ": ⵠⲆ++,
		"ΔΔᐃΔⵠ": ⵠⲆ++,
		"ᐃⵠⵠᐃⲆ": ⵠⲆ++,
		"ᐃⵠⲆᐃⵠ": ⵠⲆ++,
		"ΔᐃᐃᐃⲆ": ⵠⲆ++,
		"ΔᐃⲆΔⵠ": ⵠⲆ++,
		"ⲆⲆΔΔᐃ": ⵠⲆ++,
		"ⲆᐃⲆⲆⲆ": ⵠⲆ++,
		"ΔⲆⵠΔⵠ": ⵠⲆ++,
		"ⵠⲆⵠⵠΔ": ⵠⲆ++,
		"ⲆⵠⵠⲆΔ": ⵠⲆ++,
		"ᐃᐃΔᐃᐃ": ⵠⲆ++,
		"ⲆᐃⵠᐃΔ": ⵠⲆ++,
		"ⵠΔⵠⲆⵠ": ⵠⲆ++,
		"ΔⵠᐃΔΔ": ⵠⲆ++,
		"ᐃΔⲆᐃΔ": ⵠⲆ++,
		"ⵠⵠᐃⵠⲆ": ⵠⲆ++,
		"ᐃⵠᐃⲆΔ": ⵠⲆ++,
		"ΔᐃΔⲆⲆ": ⵠⲆ++,
		"ᐃⵠᐃⲆᐃ": ⵠⲆ++,
		"ⵠⵠΔᐃᐃ": ⵠⲆ++,
		"ΔᐃΔⵠⵠ": ⵠⲆ++,
		"ⲆⲆΔᐃᐃ": ⵠⲆ++,
		"ⵠᐃΔΔⵠ": ⵠⲆ++,
		"ⵠⲆⵠΔᐃ": ⵠⲆ++,
		"ⲆⲆᐃⵠⵠ": ⵠⲆ++,
		"ⲆΔⵠⲆⵠ": ⵠⲆ++,
		"ᐃⲆⵠΔⲆ": ⵠⲆ++,
		"ⵠΔΔⲆⲆ": ⵠⲆ++,
		"ΔⵠⵠⲆΔ": ⵠⲆ++,
		"ΔΔΔⲆᐃ": ⵠⲆ++,
		"ᐃⵠΔⵠΔ": ⵠⲆ++,
		"ΔⵠⵠⲆⲆ": ⵠⲆ++,
		"ᐃΔᐃΔΔ": ⵠⲆ++,
		"ⵠΔᐃⵠⵠ": ⵠⲆ++,
		"ⲆⲆⵠⲆⲆ": ⵠⲆ++,
		"ᐃⵠⲆΔᐃ": ⵠⲆ++,
		"ⲆⲆᐃᐃΔ": ⵠⲆ++,
		"ΔᐃⲆⲆᐃ": ⵠⲆ++,
		"ᐃΔᐃΔⲆ": ⵠⲆ++,
		"ᐃⲆⲆⵠΔ": ⵠⲆ++,
		"ⵠΔΔΔΔ": ⵠⲆ++,
		"ⲆᐃⵠΔΔ": ⵠⲆ++,
		"ΔⲆΔⲆⵠ": ⵠⲆ++,
		"ⲆᐃΔΔⲆ": ⵠⲆ++,
		"ΔⵠⲆᐃⲆ": ⵠⲆ++,
		"ΔⵠΔᐃⵠ": ⵠⲆ++,
		"ⵠᐃⵠΔⲆ": ⵠⲆ++,
		"ⵠΔⲆᐃΔ": ⵠⲆ++,
		"ⲆΔΔᐃⵠ": ⵠⲆ++,
		"ⵠᐃⲆⲆΔ": ⵠⲆ++,
		"ΔⲆᐃⲆⵠ": ⵠⲆ++,
		"ⲆⲆⲆⲆ": ⵠⲆ++,
		"ⲆΔΔᐃᐃ": ⵠⲆ++,
		"ᐃⵠΔⲆⲆ": ⵠⲆ++,
		"ᐃⲆΔⵠⲆ": ⵠⲆ++,
		"ⵠⵠⵠΔⲆ": ⵠⲆ++,
		"ᐃΔΔⵠᐃ": ⵠⲆ++,
		"ⲆΔⵠᐃᐃ": ⵠⲆ++,
		"ⵠΔⵠᐃΔ": ⵠⲆ++,
		"ⲆᐃⲆΔᐃ": ⵠⲆ++,
		"ΔΔⲆᐃⲆ": ⵠⲆ++,
		"ΔⲆⵠⲆⲆ": ⵠⲆ++,
		"ΔΔⲆⲆᐃ": ⵠⲆ++,
		"ⲆⲆⵠⲆⲆⲆⲆ": ⵠⲆ++,
		"ᐃⵠΔᐃᐃᐃΔ": ⵠⲆ++,
		"ᐃᐃᐃⵠᐃ": ⵠⲆ++,
		"ⵠΔⲆΔᐃ": ⵠⲆ++,
		"ΔΔⵠⲆⵠ": ⵠⲆ++,
		"ⲆⵠΔⵠⵠ": ⵠⲆ++,
		"ᐃⵠⵠΔⵠ": ⵠⲆ++,
		"ᐃⵠⵠⵠΔ": ⵠⲆ++,
		"ΔⲆᐃΔᐃ": ⵠⲆ++,
		"ᐃⲆΔᐃΔ": ⵠⲆ++,
		"ᐃⵠᐃᐃⵠ": ⵠⲆ++,
		"ⵠⵠⵠⵠΔ": ⵠⲆ++,
		"ⲆⲆᐃⲆᐃ": ⵠⲆ++,
		"ⲆⲆΔⵠⵠ": ⵠⲆ++,
		"ΔⵠΔⵠⲆ": ⵠⲆ++,
		"ᐃᐃᐃᐃⵠ": ⵠⲆ++,
		"ΔΔⲆΔⲆ": ⵠⲆ++,
		"ᐃⵠΔᐃᐃ": ⵠⲆ++,
		"ⲆⵠⲆⲆⵠ": ⵠⲆ++,
		"ⲆⵠⲆⵠᐃ": ⵠⲆ++,
		"ⵠⵠΔΔᐃ": ⵠⲆ++,
		"ⵠΔΔΔᐃ": ⵠⲆ++,
		"ΔᐃᐃΔᐃ": ⵠⲆ++,
		"ⵠⵠⵠⲆⲆ": ⵠⲆ++,
		"ΔΔⲆⲆΔ": ⵠⲆ++,
		"ⵠᐃⵠᐃΔ": ⵠⲆ++,
		"ᐃΔⲆᐃⲆ": ⵠⲆ++,
		"ΔΔⵠⵠⲆ": ⵠⲆ++,
		"ⵠⲆⵠⵠⵠ": ⵠⲆ++,
		"ⵠⵠⲆᐃΔ": ⵠⲆ++,
		"ᐃⵠΔⵠᐃ": ⵠⲆ++,
		"ⲆΔᐃⵠΔ": ⵠⲆ++,
		"ΔⲆΔⵠΔ": ⵠⲆ++,
		"ⲆⲆΔⲆⲆ": ⵠⲆ++,
		"ⵠⲆⲆⲆᐃ": ⵠⲆ++,
		"ⲆⲆⲆΔⵠ": ⵠⲆ++,
		"ΔⵠᐃᐃΔ": ⵠⲆ++,
		"ᐃΔΔⲆⵠ": ⵠⲆ++,
		"ΔⵠᐃⲆᐃ": ⵠⲆ++,
		"ⲆᐃⲆᐃΔ": ⵠⲆ++,
		"ᐃᐃⵠⲆⵠ": ⵠⲆ++,
		"ΔᐃⲆⵠᐃ": ⵠⲆ++,
		"ᐃΔΔᐃⵠ": ⵠⲆ++,
		"ⵠⵠⵠᐃᐃ": ⵠⲆ++,
		"ΔⵠΔⲆⵠ": ⵠⲆ++,
		"ΔΔΔΔΔ": ⵠⲆ++,
		"ΔΔⵠΔΔ": ⵠⲆ++,
		"ΔΔΔⵠΔ": ⵠⲆ++,
		"ⵠⲆⲆΔⵠ": ⵠⲆ++,
		"ᐃΔΔⵠⵠ": ⵠⲆ++,
		"ⵠⲆⵠΔΔ": ⵠⲆ++,
		"ᐃΔⵠΔΔ": ⵠⲆ++,
		"ⲆᐃΔⲆⲆ": ⵠⲆ++,
		"ᐃⲆᐃΔᐃ": ⵠⲆ++,
		"ⵠⲆⲆΔᐃ": ⵠⲆ++,
		"ΔΔⲆⵠᐃ": ⵠⲆ++,
		"ⲆᐃⵠⲆΔ": ⵠⲆ++,
		"ⲆⲆΔⵠᐃ": ⵠⲆ++,
		"ⵠⵠⲆⲆⲆ": ⵠⲆ++,
		"ⵠⲆⲆᐃᐃ": ⵠⲆ++,
		"ⲆΔΔⲆⲆ": ⵠⲆ++,
		"ΔⵠᐃⵠⲆ": ⵠⲆ++,
		"ⲆᐃΔⲆΔ": ⵠⲆ++,
		"Δᐃᐃᐃⵠ": ⵠⲆ++,
		"ⲆⲆⲆΔⲆ": ⵠⲆ++
	};
	const ᐃΔΔⵠ = ᐃⵠⲆⵠ;
	const ⵠⵠᐃΔᐃ = ⵠᐃᐃⲆⵠ;
	const ᐃΔⵠⵠⵠ = ᐃⵠᐃⲆⵠ;
	var ⵠⲆ = 0;
	var Ⲇᐃ = {
		"ⵠⲆᐃⲆⵠ": ⵠⲆ++,
		"ᐃⲆΔⵠᐃ": ⵠⲆ++,
		"ΔⲆⵠΔⲆ": ⵠⲆ++,
		"Ⲇⵠᐃᐃᐃ": ⵠⲆ++,
		"ⵠᐃⲆⲆᐃ": ⵠⲆ++,
		"ⲆⲆⲆΔΔ": ⵠⲆ++,
		"ᐃΔᐃᐃⲆ": ⵠⲆ++,
		"Ⲇᐃᐃⵠᐃ": ⵠⲆ++,
		"ⲆΔⲆⵠΔ": ⵠⲆ++,
		"ᐃᐃⲆⲆⲆ": ⵠⲆ++,
		"ⲆⲆⵠⲆⲆ": ⵠⲆ++,
		"ᐃⵠⲆΔᐃ": ⵠⲆ++,
		"ΔᐃⵠᐃⲆ": ⵠⲆ++,
		"ⵠᐃⵠⵠΔ": ⵠⲆ++,
		"ⵠΔⲆⲆᐃ": ⵠⲆ++,
		"ᐃⵠᐃⵠⲆ": ⵠⲆ++,
		"ⵠᐃⵠⲆᐃ": ⵠⲆ++,
		"ΔⵠᐃⵠΔ": ⵠⲆ++,
		"ᐃⵠᐃᐃⲆ": ⵠⲆ++,
		"ᐃⲆΔⵠⵠ": ⵠⲆ++,
		"ⵠᐃⵠΔⲆ": ⵠⲆ++,
		"ⵠΔⲆᐃΔ": ⵠⲆ++,
		"ⲆΔΔᐃⵠ": ⵠⲆ++,
		"ΔⵠⵠⲆⲆ": ⵠⲆ++,
		"ᐃΔᐃΔΔ": ⵠⲆ++,
		"ᐃⲆⲆⵠΔ": ⵠⲆ++,
		"ⵠΔΔΔΔ": ⵠⲆ++,
		"ⲆᐃⵠΔΔ": ⵠⲆ++,
		"Δⵠᐃᐃⵠ": ⵠⲆ++,
		"ⲆⲆⲆⲆ": ⵠⲆ++,
		"ⵠΔⵠⵠᐃ": ⵠⲆ++,
		"ⲆᐃΔⵠⲆ": ⵠⲆ++,
		"ΔⵠᐃᐃⲆ": ⵠⲆ++,
		"ⵠⲆⲆⲆΔ": ⵠⲆ++,
		"ᐃⲆⵠᐃΔ": ⵠⲆ++,
		"ΔΔΔⲆⲆ": ⵠⲆ++,
		"ⲆᐃᐃⵠⲆ": ⵠⲆ++,
		"ⵠᐃΔΔᐃ": ⵠⲆ++,
		"ⵠΔⲆⵠⵠ": ⵠⲆ++,
		"ⵠΔⵠⵠΔ": ⵠⲆ++,
		"ⲆⲆᐃᐃΔ": ⵠⲆ++,
		"ᐃᐃⵠΔΔ": ⵠⲆ++,
		"ⵠᐃᐃΔⵠ": ⵠⲆ++,
		"ΔⲆΔⲆⵠ": ⵠⲆ++,
		"ⲆᐃΔΔⲆ": ⵠⲆ++,
		"ⲆⵠⲆΔΔ": ⵠⲆ++,
		"ⵠⲆΔⵠᐃ": ⵠⲆ++,
		"ΔⵠΔᐃⵠ": ⵠⲆ++,
		"ΔⵠⲆᐃⲆ": ⵠⲆ++,
		"ⲆⵠⲆᐃΔ": ⵠⲆ++,
		"ⵠⲆⵠⵠᐃ": ⵠⲆ++,
		"ⵠᐃΔⵠⵠ": ⵠⲆ++,
		"ⵠⲆΔᐃⲆ": ⵠⲆ++,
		"ⲆⵠΔᐃΔ": ⵠⲆ++,
		"ⲆᐃΔᐃΔ": ⵠⲆ++,
		"ᐃⵠᐃᐃⵠ": ⵠⲆ++,
		"ⵠⵠⵠⵠΔ": ⵠⲆ++,
		"ΔᐃΔΔΔ": ⵠⲆ++,
		"ᐃΔᐃΔⲆ": ⵠⲆ++,
		"ΔⵠΔⵠⲆ": ⵠⲆ++,
		"ᐃᐃᐃᐃⵠ": ⵠⲆ++,
		"ΔΔⲆΔⲆ": ⵠⲆ++,
		"ᐃⵠΔᐃᐃ": ⵠⲆ++,
		"ⲆⵠⲆⲆⵠ": ⵠⲆ++,
		"ⲆⵠⲆⵠᐃ": ⵠⲆ++,
		"ⵠΔΔΔᐃ": ⵠⲆ++,
		"ⵠⵠⵠⲆⲆ": ⵠⲆ++,
		"ⵠᐃⵠᐃΔ": ⵠⲆ++,
		"ΔΔⵠⵠⲆ": ⵠⲆ++,
		"ⵠⵠⲆᐃΔ": ⵠⲆ++,
		"ⲆΔᐃⵠΔ": ⵠⲆ++,
		"ⲆⲆΔⲆⲆ": ⵠⲆ++,
		"ⵠⲆⲆⲆᐃ": ⵠⲆ++,
		"ⲆⲆⲆΔⵠ": ⵠⲆ++,
		"ΔⵠᐃᐃΔ": ⵠⲆ++,
		"ᐃΔΔⲆⵠ": ⵠⲆ++,
		"ΔⵠᐃⲆᐃ": ⵠⲆ++,
		"ⲆᐃⲆᐃΔ": ⵠⲆ++,
		"ᐃᐃⵠⲆⵠ": ⵠⲆ++,
		"ΔᐃⲆⵠᐃ": ⵠⲆ++,
		"ⵠᐃⲆⲆΔ": ⵠⲆ++,
		"ΔⲆᐃⲆⵠ": ⵠⲆ++,
		"ⵠΔᐃⵠⵠ": ⵠⲆ++,
		"ᐃΔΔᐃⵠ": ⵠⲆ++,
		"ⵠⵠⵠᐃᐃ": ⵠⲆ++,
		"ΔⵠΔⲆⵠ": ⵠⲆ++,
		"ΔΔΔΔΔ": ⵠⲆ++,
		"ⵠⵠᐃⲆⲆ": ⵠⲆ++,
		"ΔᐃⲆⲆᐃ": ⵠⲆ++,
		"ᐃⲆᐃΔᐃ": ⵠⲆ++,
		"ΔⵠᐃⵠⲆ": ⵠⲆ++,
		"ⲆⲆⲆΔⲆ": ⵠⲆ++,
		"ⲆᐃΔⲆΔ": ⵠⲆ++,
		"Δᐃᐃᐃⵠ": ⵠⲆ++,
		"ΔΔⲆⵠᐃ": ⵠⲆ++,
		"ⲆᐃⵠⲆΔ": ⵠⲆ++,
		"ⲆⲆΔⵠᐃ": ⵠⲆ++,
		"ⵠⵠⲆⲆⲆ": ⵠⲆ++,
		"ⵠⲆⲆᐃᐃ": ⵠⲆ++,
		"ⲆΔΔⲆⲆ": ⵠⲆ++,
		"ⲆᐃΔⵠᐃ": ⵠⲆ++,
		"ⵠⵠΔΔᐃ": ⵠⲆ++,
		"ΔᐃᐃΔᐃ": ⵠⲆ++,
		"ΔΔⲆⲆΔ": ⵠⲆ++,
		"ᐃΔⲆᐃⲆ": ⵠⲆ++,
		"ⵠⲆⵠⵠⵠ": ⵠⲆ++,
		"ᐃⵠΔⵠᐃ": ⵠⲆ++,
		"ΔⲆΔⵠΔ": ⵠⲆ++,
		"ᐃⵠᐃᐃ": ⵠⲆ++,
		"ᐃⲆΔⲆ": ⵠⲆ++,
		"ⲆⲆⲆᐃⵠ": ⵠⲆ++,
		"ᐃⵠⵠᐃ": ⵠⲆ++,
		"ⵠⲆᐃᐃ": ⵠⲆ++,
		"ⲆⵠⲆⲆᐃ": ⵠⲆ++,
		"ⵠⵠᐃⲆⵠ": ⵠⲆ++,
		"ⲆΔΔΔⵠ": ⵠⲆ++,
		"ⵠⵠᐃⵠΔ": ⵠⲆ++,
		"ΔΔᐃΔⵠ": ⵠⲆ++,
		"ᐃᐃⲆΔᐃ": ⵠⲆ++,
		"Δⵠⵠⵠⵠ": ⵠⲆ++,
		"ⲆΔΔᐃᐃ": ⵠⲆ++,
		"ᐃΔⲆᐃ": ⵠⲆ++,
		"ᐃᐃΔᐃᐃ": ⵠⲆ++,
		"ⵠᐃΔΔⵠ": ⵠⲆ++,
		"ᐃⵠᐃⲆΔ": ⵠⲆ++,
		"ⲆΔⵠᐃᐃ": ⵠⲆ++,
		"ⲆᐃᐃΔⵠ": ⵠⲆ++,
		"ΔΔⲆⲆᐃ": ⵠⲆ++,
		"ΔⲆⵠⲆⲆ": ⵠⲆ++,
		"ⵠⵠⵠΔΔ": ⵠⲆ++,
		"ⵠⵠⲆⲆΔ": ⵠⲆ++,
		"ⵠΔⲆⲆⵠ": ⵠⲆ++,
		"ΔΔᐃⲆⵠ": ⵠⲆ++,
		"ΔᐃᐃᐃⲆ": ⵠⲆ++,
		"ⲆᐃΔᐃᐃ": ⵠⲆ++,
		"ᐃᐃᐃⵠᐃ": ⵠⲆ++,
		"ΔᐃⲆΔⵠ": ⵠⲆ++,
		"ᐃᐃⵠⲆᐃ": ⵠⲆ++,
		"ᐃⵠⵠᐃⲆ": ⵠⲆ++,
		"ΔⵠⵠᐃⲆ": ⵠⲆ++,
		"ⵠᐃΔⲆΔ": ⵠⲆ++,
		"ΔΔⲆᐃⲆ": ⵠⲆ++,
		"ᐃᐃᐃⵠⲆ": ⵠⲆ++,
		"ᐃⵠⲆᐃⵠ": ⵠⲆ++,
		"ⲆⲆᐃⲆᐃ": ⵠⲆ++,
		"ⲆⲆΔⵠⵠ": ⵠⲆ++,
		"ⲆⲆⲆᐃΔ": ⵠⲆ++,
		"ᐃⵠΔⲆⲆ": ⵠⲆ++,
		"ᐃⲆΔⵠⲆ": ⵠⲆ++,
		"ᐃᐃᐃⵠΔ": ⵠⲆ++,
		"ⵠⲆᐃΔⵠ": ⵠⲆ++,
		"ⵠΔⲆΔᐃ": ⵠⲆ++,
		"ΔΔⵠⲆⵠ": ⵠⲆ++,
		"ⲆⵠΔⵠⵠ": ⵠⲆ++,
		"ᐃⵠⵠΔⵠ": ⵠⲆ++,
		"ᐃⵠⵠⵠΔ": ⵠⲆ++,
		"ΔⲆᐃΔᐃ": ⵠⲆ++,
		"ᐃⲆΔᐃΔ": ⵠⲆ++,
		"ⵠⵠⵠΔⲆ": ⵠⲆ++,
		"ᐃΔΔⵠᐃ": ⵠⲆ++,
		"ᐃⵠᐃⲆᐃ": ⵠⲆ++,
		"ⲆⵠⲆⵠⵠ": ⵠⲆ++,
		"ⲆᐃⲆⲆⲆ": ⵠⲆ++,
		"ΔⲆⵠΔⵠ": ⵠⲆ++,
		"ⵠⲆⵠⵠΔ": ⵠⲆ++,
		"ⲆⵠⵠⲆΔ": ⵠⲆ++,
		"ⵠΔⵠⲆⵠ": ⵠⲆ++,
		"ᐃⵠΔⵠΔ": ⵠⲆ++,
		"ⵠⵠΔᐃᐃ": ⵠⲆ++,
		"ΔᐃΔⵠⵠ": ⵠⲆ++,
		"ⲆⲆΔᐃᐃ": ⵠⲆ++,
		"ΔⵠᐃΔΔ": ⵠⲆ++,
		"ᐃΔⲆᐃΔ": ⵠⲆ++,
		"ⵠⵠᐃⵠⲆ": ⵠⲆ++,
		"ⵠⲆⲆⲆⵠ": ⵠⲆ++,
		"ⲆⵠⵠᐃΔ": ⵠⲆ++,
		"ᐃᐃⲆᐃⲆ": ⵠⲆ++,
		"ⵠᐃᐃⲆΔ": ⵠⲆ++,
		"ΔᐃⵠΔᐃ": ⵠⲆ++,
		"ᐃⵠΔᐃⵠ": ⵠⲆ++,
		"ΔΔⵠΔΔ": ⵠⲆ++,
		"ΔΔΔⵠΔ": ⵠⲆ++,
		"ⵠⲆⲆΔⵠ": ⵠⲆ++,
		"ᐃΔΔⵠⵠ": ⵠⲆ++,
		"ⵠⲆⲆⵠᐃ": ⵠⲆ++,
		"ΔᐃⲆᐃⲆ": ⵠⲆ++,
		"ᐃΔⵠᐃΔ": ⵠⲆ++,
		"ⵠⵠⵠⵠⲆ": ⵠⲆ++,
		"Ⲇⵠⵠⵠⵠ": ⵠⲆ++,
		"ΔⲆⵠᐃᐃ": ⵠⲆ++,
		"ⵠΔⵠᐃΔ": ⵠⲆ++,
		"ᐃᐃⲆⲆᐃ": ⵠⲆ++,
		"ΔⵠᐃⲆΔ": ⵠⲆ++,
		"ᐃⵠΔᐃⲆ": ⵠⲆ++,
		"ⵠΔⵠΔⵠ": ⵠⲆ++,
		"ⲆⲆΔΔᐃ": ⵠⲆ++,
		"ⲆⵠΔⵠⲆ": ⵠⲆ++,
		"ᐃΔⲆᐃᐃ": ⵠⲆ++,
		"ⵠⲆⵠΔΔ": ⵠⲆ++,
		"ⲆᐃᐃⵠΔ": ⵠⲆ++,
		"ᐃⵠΔᐃΔ": ⵠⲆ++,
		"ⲆⵠⵠⲆᐃ": ⵠⲆ++,
		"Ⲇⵠⵠᐃ": ⵠⲆ++,
		"ⵠΔΔⵠⲆ": ⵠⲆ++,
		"ᐃⲆⲆᐃⵠ": ⵠⲆ++,
		"ᐃⲆΔⲆⲆ": ⵠⲆ++,
		"ⲆᐃⲆⵠᐃ": ⵠⲆ++,
		"ⵠᐃⲆΔᐃ": ⵠⲆ++,
		"ΔⵠⲆᐃΔ": ⵠⲆ++,
		"ᐃᐃⵠᐃᐃ": ⵠⲆ++,
		"ᐃᐃⵠⲆⲆ": ⵠⲆ++,
		"ⲆⲆⲆⵠⵠ": ⵠⲆ++,
		"ⲆⲆᐃⵠⵠ": ⵠⲆ++,
		"ⲆΔⵠⲆⵠ": ⵠⲆ++,
		"ᐃⲆⵠΔⲆ": ⵠⲆ++,
		"ⵠΔΔⲆⲆ": ⵠⲆ++,
		"ΔⵠⵠⲆΔ": ⵠⲆ++,
		"ⲆᐃⵠᐃΔ": ⵠⲆ++,
		"ΔᐃΔⲆⲆ": ⵠⲆ++,
		"ⵠⲆⵠΔᐃ": ⵠⲆ++,
		"ΔΔΔⲆᐃ": ⵠⲆ++,
		"ⲆᐃⲆΔᐃ": ⵠⲆ++,
		"ⵠⵠⲆΔΔ": ⵠⲆ++,
		"ᐃΔⵠΔΔ": ⵠⲆ++,
		"ⲆᐃΔⲆⲆ": ⵠⲆ++,
		"ⵠⵠΔⵠⲆ": ⵠⲆ++,
		"ᐃᐃⵠⵠᐃ": ⵠⲆ++,
		"ⵠᐃⲆΔⲆ": ⵠⲆ++,
		"ⲆΔᐃⲆΔ": ⵠⲆ++,
		"ΔⲆⵠΔᐃ": ⵠⲆ++,
		"ⵠⲆⲆΔᐃ": ⵠⲆ++,
		"ᐃⵠⲆⲆΔ": ⵠⲆ++,
		"ⲆⵠᐃⲆΔ": ⵠⲆ++,
		"ⵠⵠⲆᐃⲆ": ⵠⲆ++,
		"ΔᐃΔⵠΔ": ⵠⲆ++,
		"ᐃᐃⵠᐃⲆᐃᐃ": ⵠⲆ++,
		"ᐃᐃΔᐃⲆⵠⲆ": ⵠⲆ++,
		"ΔⲆⵠᐃⲆ": ⵠⲆ++,
		"ΔᐃⲆⲆΔ": ⵠⲆ++,
		"ᐃΔⲆΔⵠ": ⵠⲆ++,
		"ᐃⵠᐃᐃΔ": ⵠⲆ++
	};
	const ΔΔⲆᐃⵠⵠⵠ = ᐃΔⲆⵠᐃᐃⵠ;
	const ⵠⲆᐃᐃⵠⵠᐃ = ΔⲆⲆⵠΔ;
	var ᐃⵠⲆΔ = {
		"ΔΔΔΔᐃ": 4,
		"ᐃⲆⵠⵠⵠ": ⵠΔΔΔ,
		"ᐃΔΔΔᐃ": ⲆⲆΔΔ,
		"ΔⲆⲆΔⲆ": 0,
		"ΔⲆⲆΔᐃ": 3,
		"ᐃᐃΔⲆ": ⵠΔΔ
	};
	const ⲆⵠⲆⲆⲆ = ΔᐃΔⵠ;
	const ⵠⵠΔᐃ = ⵠⲆᐃ;
	const ⲆⲆⲆΔΔΔⵠ = ΔⲆΔᐃΔ;
	var ΔⵠΔⲆ = [];
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⲆΔⲆ] = {
		name: "Wood",
		"ⵠΔ": ⵠ.ⵠΔΔⵠⲆᐃⵠ,
		"ⲆΔⵠⲆ": ᐃΔΔ,
		"ᐃΔᐃΔ": ⵠⲆⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠᐃᐃ] = {
		name: "Stone",
		"ⵠΔ": ⵠ.ⵠⵠⵠᐃⵠⵠΔ,
		"ⲆΔⵠⲆ": ⵠⲆᐃ,
		"ᐃΔᐃΔ": ⵠᐃΔ
	};
	const ΔⲆⲆⲆⲆⵠⲆ = ᐃΔⲆⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠⵠᐃ] = {
		name: "Gold",
		"ⵠΔ": ⵠ.ⵠⵠⵠᐃᐃⵠΔ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": ᐃΔΔ
	};
	const ΔᐃⵠⲆΔᐃⵠ = ⵠⲆᐃⵠᐃⲆⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆᐃᐃ] = {
		name: "Diamond",
		"ⵠΔ": ⵠ.ⲆⵠⲆΔⵠΔⲆ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": ⲆᐃⲆ
	};
	const ⵠⵠᐃᐃᐃⵠᐃ = ⲆΔⵠᐃⲆⵠⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔⲆᐃ] = {
		name: "Amethyst",
		"ⵠΔ": ⵠ.ᐃΔᐃⲆⲆⲆⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⲆⵠΔⲆ] = {
		name: "Rabbit fur",
		"ⵠΔ": ⵠ.ⲆᐃΔⵠΔⵠᐃ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": ⵠⵠΔᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆⲆⲆⵠ] = {
		name: "Wolf fur",
		"ⵠΔ": ⵠ.ᐃΔΔΔⲆΔΔ,
		"ⲆΔⵠⲆ": ᐃΔΔ,
		"ᐃΔᐃΔ": 0
	};
	const ᐃᐃᐃⵠΔⲆΔ = ΔΔⵠᐃⲆ;
	const ΔᐃⲆΔⲆᐃⲆⲆⲆ = "";

	function ⵠΔⵠΔⵠᐃⵠ(ΔⲆΔⲆᐃᐃⵠ) {
		if (ΔⲆΔⲆᐃᐃⵠ > 0) return ΔⲆΔⲆᐃᐃⵠ * ΔⲆΔⲆᐃᐃⵠ;
		else return ΔⲆΔⲆᐃᐃⵠ
	}

	function ⵠⲆΔΔΔΔⲆ(ⵠᐃⵠⵠᐃΔΔ) {
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ.String.fromCharCode(ⵠᐃⵠⵠᐃΔΔ)
	}

	function ΔᐃⵠⲆⲆⲆΔⵠᐃ(ΔⵠⲆⵠΔΔⲆΔⲆ) {
		return ΔⵠⲆⵠΔΔⲆΔⲆ.map(ⵠⲆΔΔΔΔⲆ).join(ΔᐃⲆΔⲆᐃⲆⲆⲆ)
	}

	function ⲆΔᐃⲆⵠⵠΔᐃⵠ(ⵠΔⵠⵠⵠ) {
		const ⲆᐃⵠⵠΔⲆⲆ = ⵠΔⵠΔⵠᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[27]]();
		const Δⵠᐃⵠ = ⲆᐃⵠⵠΔⲆⲆ.indexOf(ⵠΔⵠⵠⵠ);
		return Δⵠᐃⵠ !== -1 ? 1 : 0
	}
	const ᐃᐃⵠᐃⲆⲆᐃ = ⲆΔᐃⲆⵠⵠΔᐃⵠ(ΔᐃⵠⲆⲆⲆΔⵠᐃ([11616, 916, 11616, 916, 11616, 5123, 11616]));
	if (ᐃᐃⵠᐃⲆⲆᐃ === 0) {
		const ᐃᐃⵠᐃⲆⲆᐃ = Math.random;
		const ⵠΔⵠΔⵠᐃⵠ = [];
		const Δⵠᐃⵠ = function() {
			for (let ΔⲆΔⲆᐃᐃⵠ = 0; ΔⲆΔⲆᐃᐃⵠ < 7485; ΔⲆΔⲆᐃᐃⵠ++) ⵠΔⵠΔⵠᐃⵠ.push(ΔⲆΔⲆᐃᐃⵠ);
			return ᐃᐃⵠᐃⲆⲆᐃ()
		};
		Math.random = Δⵠᐃⵠ
	}
	const ᐃᐃΔᐃᐃΔⵠⵠᐃ = ⲆⲆⲆᐃⲆⲆᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔⲆⵠᐃⲆ] = {
		name: "Boar fur",
		"ⵠΔ": ⵠ.ΔᐃⲆᐃᐃⲆⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠⲆᐃ
	};
	const ᐃΔᐃⲆⲆ = ⲆΔⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃΔⵠᐃ] = {
		name: "Firefly",
		"ⵠΔ": ⵠ.ⵠⲆΔⲆᐃΔᐃ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": ⵠⲆⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠΔΔᐃ] = {
		name: "Wood arrow",
		"ⵠΔ": ⵠ.ΔᐃⵠΔΔᐃΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": Δᐃᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔᐃᐃΔᐃ] = {
		name: "Stone arrow",
		"ⵠΔ": ⵠ.ΔⵠᐃΔᐃⲆᐃ,
		"ⲆΔⵠⲆ": ⵠⲆⵠ,
		"ᐃΔᐃΔ": ᐃⵠⵠ
	};
	const ⵠⲆᐃᐃⲆ = ᐃΔⵠᐃⵠ;
	const ⵠⲆⲆᐃⵠ = ᐃᐃΔⵠⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔⲆⲆΔ] = {
		name: "Gold arrow",
		"ⵠΔ": ⵠ.ⵠΔⲆΔᐃᐃΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆΔᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔⲆᐃⲆ] = {
		name: "Diamond arrow",
		"ⵠΔ": ⵠ.ⵠⲆⲆⵠⵠⲆᐃ,
		"ⲆΔⵠⲆ": ⵠⲆᐃ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆⵠⵠⵠ] = {
		name: "Amethyst arrow",
		"ⵠΔ": ⵠ.ⲆᐃⲆⲆΔᐃⲆ,
		"ⲆΔⵠⲆ": ᐃΔΔ,
		"ᐃΔᐃΔ": 1
	};
	const ΔᐃᐃΔⵠⵠⵠ = ⲆΔⲆⵠᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠΔⵠᐃ] = {
		name: "Reidite arrow",
		"ⵠΔ": ⵠ.ⵠⵠΔⲆⲆΔⲆ,
		"ⲆΔⵠⲆ": ⵠᐃΔ,
		"ᐃΔᐃΔ": ᐃⵠⵠ
	};
	const ⵠⲆⲆⵠᐃΔᐃ = ᐃⵠᐃⲆⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔⲆΔⵠΔ] = {
		name: "Dragon arrow",
		"ⵠΔ": ⵠ.ΔΔⲆⲆⵠΔΔ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆⲆᐃΔ] = {
		name: "Winter fur",
		"ⵠΔ": ⵠ.ⵠΔΔⵠΔⲆⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": Δⵠⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠᐃᐃΔ] = {
		name: "Fur mammoth",
		"ⵠΔ": ⵠ.ⲆⵠΔΔⵠⲆᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠⲆᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⵠⲆⵠⵠ] = {
		name: "Web",
		"ⵠΔ": ⵠ.ⵠⵠΔΔᐃΔᐃ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠᐃⵠΔ] = {
		name: "Meat",
		"ⵠΔ": ⵠ.ⲆΔⲆᐃᐃΔⵠ,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ,
		"ᐃΔᐃΔ": 0
	};
	const ᐃᐃⵠΔⵠⲆⲆ = ⵠⵠⵠⵠⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃⵠⲆᐃ] = {
		name: "Fish",
		"ⵠΔ": ⵠ.ᐃΔᐃⵠᐃΔᐃ,
		"ⲆΔⵠⲆ": ⵠⲆᐃ,
		"ᐃΔᐃΔ": Δⵠⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠⵠΔΔ] = {
		name: "Kraken skin",
		"ⵠΔ": ⵠ.ⵠΔΔⵠⲆⲆⲆ,
		"ⲆΔⵠⲆ": ᐃΔΔ,
		"ᐃΔᐃΔ": ᐃΔΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠⵠᐃⲆ] = {
		name: "Piranha scales",
		"ⵠΔ": ⵠ.ΔΔⲆⵠΔⲆⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆᐃⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃᐃⵠⲆ] = {
		name: "Ice",
		"ⵠΔ": ⵠ.ΔΔΔΔΔΔⵠ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": ΔᐃΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃᐃΔⵠ] = {
		name: "Sand",
		"ⵠΔ": ⵠ.ᐃᐃᐃᐃΔⵠⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠⲆᐃ
	};
	const ᐃⲆⲆⵠⲆⵠⵠ = ⲆᐃⲆᐃⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃΔⲆΔ] = {
		name: "Dirt",
		"ⵠΔ": ⵠ.ΔⵠⵠⲆᐃΔⵠ,
		"ⲆΔⵠⲆ": ⵠⲆᐃ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆⲆᐃⵠ] = {
		name: "Berrie",
		"ⵠΔ": ⵠ.ⲆⵠⲆΔⵠⵠⲆ,
		"ⲆΔⵠⲆ": ⵠⲆᐃ,
		"ᐃΔᐃΔ": 0
	};
	const ΔⵠᐃⲆΔⲆⵠ = ⲆⲆΔⲆⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔⲆⲆⵠ] = {
		name: "Flour",
		"ⵠΔ": ⵠ.ΔΔⲆⲆᐃᐃⲆ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": ⵠⲆⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃΔᐃᐃ] = {
		name: "Flour",
		"ⵠΔ": ⵠ.ⲆΔΔᐃⵠⵠⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠⲆᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔᐃⵠΔᐃ] = {
		name: "Special fur peasant",
		"ⵠΔ": ⵠ.ⵠΔᐃⲆΔᐃⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	const ᐃᐃⵠΔⵠ = ⵠᐃⵠΔΔ;
	const ⲆᐃⵠⲆ = ⲆᐃᐃΔ;
	const ⵠᐃΔⵠΔ = ⵠⵠⵠⲆⵠ;
	const ᐃᐃᐃⵠⲆⲆᐃ = ᐃᐃⵠᐃⵠ;
	const ⵠΔΔᐃⲆ = ⲆΔᐃⵠⵠ;
	const ᐃᐃⵠⵠⲆⲆⲆ = ⲆⲆᐃⵠⲆ;
	const ⵠᐃΔΔΔ = ΔⵠⲆᐃ;
	const ⵠⲆⲆⵠᐃⲆᐃᐃⲆ = ᐃΔⲆⵠⵠΔⲆ;
	const ᐃⵠⵠⵠⵠⵠⲆ = ⲆⲆΔⵠⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠΔᐃⵠ] = {
		name: "Special fur hood",
		"ⵠΔ": ⵠ.ΔⲆᐃⵠⲆⵠⲆ,
		"ⲆΔⵠⲆ": ᐃΔΔ,
		"ᐃΔᐃΔ": ⵠⵠΔᐃ
	};
	const ⲆⲆΔᐃᐃⲆⵠ = ΔᐃΔⵠⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔⲆⵠᐃᐃ] = {
		name: "Pumpkin",
		"ⵠΔ": ⵠ.Δᐃⵠᐃⵠⵠⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ΔᐃΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠᐃⲆΔ] = {
		name: "Garlic",
		"ⵠΔ": ⵠ.ⲆⲆⵠⵠⲆΔᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆᐃⲆ
	};
	const ⲆⲆᐃΔᐃ = ⵠΔΔⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔⵠΔⵠ] = {
		name: "Thornbush",
		"ⵠΔ": ⵠ.ⲆⲆΔᐃᐃⵠᐃ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⲆΔⲆⲆ] = {
		name: "Carrot",
		"ⵠΔ": ⵠ.ⲆΔⵠΔⲆΔᐃ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": ⵠⲆᐃ
	};
	const ⵠΔΔⲆΔ = ⲆΔΔΔΔ;
	const ᐃⵠᐃΔⲆᐃΔⲆΔ = ΔᐃᐃᐃⲆᐃΔ;
	const ⲆΔΔⲆ = ⵠᐃⲆᐃ;
	const ⲆⵠⵠᐃⲆΔΔ = ΔⵠΔⵠⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃⲆΔᐃ] = {
		name: "Tomato",
		"ⵠΔ": ⵠ.ΔⲆΔᐃᐃᐃⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃⵠᐃᐃ] = {
		name: "Watermelon",
		"ⵠΔ": ⵠ.ⵠⵠᐃᐃΔᐃⲆ,
		"ⲆΔⵠⲆ": ⵠᐃΔ,
		"ᐃΔᐃΔ": ⵠⲆⵠ
	};
	const ⵠΔᐃᐃΔ = ΔΔⲆⵠⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆⲆⵠⵠ] = {
		name: "Aloe Vera",
		"ⵠΔ": ⵠ.ⲆⵠⲆⵠΔⵠⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	const ⵠΔⲆΔⵠ = ᐃΔⲆΔᐃ;
	const ΔⲆΔΔᐃ = ΔᐃⲆⵠⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠⲆΔΔ] = {
		name: "Penguin Feather",
		"ⵠΔ": ⵠ.ⵠᐃⲆⵠⵠ,
		"ⲆΔⵠⲆ": ⵠⲆⵠ,
		"ᐃΔᐃΔ": ⵠⲆⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠⲆⲆΔ] = {
		name: "Hawk Feather",
		"ⵠΔ": ⵠ.ᐃᐃⵠΔⲆ,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⵠᐃⲆΔ] = {
		name: "Vulture Feather",
		"ⵠΔ": ⵠ.ⲆΔⲆⲆᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠⲆᐃⲆ] = {
		name: Δ[225],
		"ⵠΔ": ⵠ.ΔΔⲆᐃΔΔⵠ,
		"ⲆΔⵠⲆ": ⵠᐃΔ,
		"ᐃΔᐃΔ": ᐃΔΔ
	};
	const ΔⵠⲆⵠⲆ = ⲆⵠⲆᐃ;
	const ᐃΔΔⲆⲆ = ⲆⵠΔⲆⵠ;
	const ᐃᐃᐃⲆΔᐃΔ = ΔΔⲆᐃⵠⵠⵠ;
	const ⲆΔⲆⵠ = ⵠΔᐃ;
	const ⵠΔⵠᐃⲆⵠⵠ = ⵠⵠᐃᐃⲆ;
	const ᐃⲆⵠⵠΔ = ᐃᐃΔᐃⲆ;
	const ᐃΔⵠΔᐃ = ⵠⵠΔⲆ;
	const ⲆⵠⵠᐃⵠΔⵠ = ⵠⵠᐃᐃΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃΔᐃⲆⵠⲆ] = {
		name: Δ[225],
		"ⵠΔ": ⵠ.ΔⲆⲆΔΔΔᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃⵠᐃⲆᐃᐃ] = {
		name: "Pitchfork Part",
		"ⵠΔ": ⵠ.ΔᐃΔᐃⵠᐃᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠᐃΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔᐃⲆⲆΔ] = {
		name: Δ[322],
		"ⵠΔ": ⵠ.ⲆᐃⲆᐃᐃⵠΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠᐃΔ
	};
	const ⵠⵠΔᐃᐃΔⲆⲆΔ = 677866;

	function ᐃᐃⵠΔΔᐃᐃ(ⲆΔⲆΔᐃΔⲆ) {
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ.String.fromCharCode(ⲆΔⲆΔᐃΔⲆ)
	}

	function ᐃΔⲆΔᐃⲆⵠⵠᐃ(ⲆΔΔⲆᐃⵠΔ) {
		return ⲆΔΔⲆᐃⵠΔ.map(ᐃᐃⵠΔΔᐃᐃ).join("")
	}
	const ⲆⵠΔⲆⲆ = function() {
		const ΔⲆⲆⵠⲆΔⲆᐃΔ = ᐃΔⲆΔᐃⲆⵠⵠᐃ([11616, 11616, 916, 5123, 5123, 916, 11398, 11398, 916]);
		const ᐃΔⲆΔᐃⵠΔ = {
			"ⵠⲆⵠⲆΔΔΔⵠⵠ": 1518608,
			"ⲆᐃᐃΔⵠⵠᐃ": 3473604,
			"ⵠⵠΔᐃᐃΔⲆⲆΔ": 13171591,
			"ᐃᐃᐃⵠⵠᐃΔ": 2930093
		};
		if (ᐃΔⲆΔᐃⵠΔ[ΔⲆⲆⵠⲆΔⲆᐃΔ] !== ᐃΔⲆΔᐃⵠΔ.ⵠⵠΔᐃᐃΔⲆⲆΔ) {
			const ⵠⵠΔᐃᐃΔⲆⲆΔ = ⵠΔΔⲆⲆⵠᐃᐃⵠ.setInterval;
			const ᐃᐃⵠΔΔᐃᐃ = ⵠⵠΔᐃᐃΔⲆⲆΔ;
			const ⲆΔⲆΔᐃΔⲆ = function() {
				ⵠⵠΔᐃᐃΔⲆⲆΔ(ⲆΔⲆΔᐃΔⲆ, 3538);
				ᐃᐃⵠΔΔᐃᐃ(ⲆΔⲆΔᐃΔⲆ, 9255)
			};
			ⲆΔⲆΔᐃΔⲆ()
		}
	};
	ⲆⵠΔⲆⲆ();
	const ⵠⵠⵠΔ = ᐃⲆΔ;
	const ⲆⵠⲆⵠᐃᐃⲆ = ᐃⵠⵠⵠⵠⵠⲆ;
	const ᐃᐃⵠⵠⲆᐃⵠ = ΔᐃᐃⲆΔ;
	const ᐃᐃᐃΔⵠ = ΔᐃΔⵠ;
	const ᐃⵠⲆⵠᐃⵠΔ = ⲆⲆᐃⵠΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔᐃΔⵠΔ] = {
		name: "Emerald",
		"ⵠΔ": ⵠ.ᐃΔΔⲆΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠⲆⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃⵠΔΔ] = {
		name: "Christmas Hat",
		"ⵠΔ": ⵠ.ΔⲆᐃᐃⲆⲆⲆ,
		"ᐃΔᐃΔ": ⵠⵠΔᐃ
	};
	const ⵠⲆΔΔᐃ = ⲆΔᐃⵠⵠ;
	const ⵠⵠⲆᐃᐃ = ⵠᐃᐃⵠⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃᐃΔⵠ] = {
		name: "Elf Hat",
		"ⵠΔ": ⵠ.ΔⲆᐃⵠⵠⲆΔ,
		"ᐃΔᐃΔ": ⵠⲆᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⵠⵠⲆᐃ] = {
		name: "Garland",
		"ⵠΔ": ⵠ.ⵠᐃⵠΔⲆΔⵠ,
		"ᐃΔᐃΔ": 0,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠΔᐃΔ] = {
		name: "Candy",
		"ⵠΔ": ⵠ.ᐃⲆΔⵠᐃⲆΔ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃᐃⵠΔ] = {
		name: "Sugar Cane",
		"ⵠΔ": ⵠ.ⲆᐃⵠⲆΔⲆΔ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃⲆⲆⲆ] = {
		name: "Pirate Sword",
		"ⵠΔ": ⵠ.ΔⲆⲆⲆⵠⵠᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ΔᐃΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⵠΔⵠⲆ] = {
		name: "Crab Stick",
		"ⵠΔ": ⵠ.ⲆΔⲆⵠⲆᐃᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ΔᐃΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.Ⲇⵠⵠᐃ] = {
		name: "Reidite",
		"ⵠΔ": ⵠ.ΔⲆᐃΔΔᐃᐃ,
		"ⲆΔⵠⲆ": ⵠᐃΔ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔΔⵠⲆ] = {
		name: "Flame",
		"ⵠΔ": ⵠ.ΔΔⲆΔⵠⲆᐃ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": 0
	};
	const ⲆⵠΔⲆ = ⵠⵠᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⵠⲆⲆᐃ] = {
		name: "Campfire",
		"ⵠΔ": ⵠ.ⵠⵠᐃᐃᐃΔᐃ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": ⲆⵠΔⲆ
	};
	const ⵠⵠⵠⵠ = ᐃΔᐃⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆⵠΔΔ] = {
		name: Δ[514],
		"ⵠΔ": ⵠ.ⲆᐃᐃⲆΔΔⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠⵠᐃ
	};
	const ΔⵠⲆΔⵠⵠⵠ = ⵠⵠⲆⵠⲆ;
	const ᐃⲆᐃⵠⵠᐃⵠ = ΔΔⵠᐃⲆ;
	const Ⲇᐃⵠⵠⵠ = ΔΔᐃⵠΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠᐃⲆⵠ] = {
		name: "Workbench",
		"ⵠΔ": ⵠ.ⵠᐃⵠⵠⵠⲆⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆᐃⲆⵠ] = {
		name: "Stone sword",
		"ⵠΔ": ⵠ.ΔⵠᐃΔⲆᐃⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	const ᐃΔⲆⵠ = ⵠΔᐃⵠ;
	const ⲆΔΔᐃⲆᐃΔ = ⲆⵠⲆⵠᐃᐃⲆ;
	const ⲆⲆᐃΔⵠΔⲆ = ⵠⲆⵠᐃⲆ;
	const ⲆⲆΔⵠⲆⵠⲆ = ⵠⲆⵠⲆΔᐃⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⲆΔⵠᐃ] = {
		name: "Stone pick",
		"ⵠΔ": ⵠ.ᐃⲆΔⲆᐃⵠⲆ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆΔΔΔⵠ] = {
		name: "Berries bush",
		"ⵠΔ": ⵠ.ⵠⲆΔᐃΔᐃⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.Ⲇⵠᐃᐃᐃ] = {
		name: "Gold pick",
		"ⵠΔ": ⵠ.ΔⲆⵠⵠⵠᐃⲆ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": 1
	};
	const ᐃⲆᐃᐃΔ = ⵠⲆΔΔᐃ;
	const ΔⲆᐃⲆⵠᐃⵠ = ⵠⲆⵠⲆΔᐃⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃⲆⲆᐃ] = {
		name: "Diamond pick",
		"ⵠΔ": ⵠ.ᐃⵠΔᐃⵠⲆⲆ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": ⲆⵠⲆ
	};
	const ⲆⲆΔⲆΔⵠᐃⵠΔ = ΔⵠⲆⲆᐃⵠᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔᐃΔΔΔ] = {
		name: "Wood sword",
		"ⵠΔ": ⵠ.ⵠⵠΔⵠⲆⲆΔ,
		"ⲆΔⵠⲆ": ⵠⲆᐃ,
		"ᐃΔᐃΔ": 1
	};
	const ⵠⲆⲆⵠⲆ = ⵠᐃΔᐃⵠ;
	const ΔⲆᐃᐃΔΔⵠ = ᐃΔⵠⵠΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆⲆΔΔ] = {
		name: "Gold sword",
		"ⵠΔ": ⵠ.ΔΔΔΔΔᐃⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	const ᐃΔΔΔ = ᐃΔᐃⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔᐃᐃⲆ] = {
		name: "Diamond sword",
		"ⵠΔ": ⵠ.ⲆⵠΔᐃΔⲆⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆΔⲆⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆΔⲆⵠΔ] = {
		name: "Wood pick",
		"ⵠΔ": ⵠ.ᐃⲆⲆΔⵠᐃᐃ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": 1
	};
	const ⵠᐃΔⲆ = ⲆᐃⲆ;
	const ᐃⲆΔᐃᐃΔⵠ = ⵠᐃᐃᐃⲆᐃⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃⲆⲆⲆ] = {
		name: "Wood wall",
		"ⵠΔ": ⵠ.ΔⲆⵠᐃᐃΔⲆ,
		"ⲆΔⵠⲆ": ⵠᐃΔⲆ,
		"ᐃΔᐃΔ": 1
	};
	const ΔΔⲆⵠΔ = ⲆⵠᐃΔᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠᐃⲆᐃ] = {
		name: "Wood spike",
		"ⵠΔ": ⵠ.ⵠⵠⵠⵠⵠΔⵠ,
		"ⲆΔⵠⲆ": ⵠⲆⵠ,
		"ᐃΔᐃΔ": 1
	};
	const ΔᐃⲆⲆΔⲆᐃ = ᐃᐃⵠΔⵠⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔᐃΔⵠ] = {
		name: "Cooked meat",
		"ⵠΔ": ⵠ.ᐃⵠΔⲆΔᐃᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃⲆΔᐃ] = {
		name: "Big campfire",
		"ⵠΔ": ⵠ.ΔⵠΔⵠΔⵠⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠⵠᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆΔΔᐃ] = {
		name: "Bandage",
		"ⵠΔ": ⵠ.ⲆᐃⵠⵠⲆᐃⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆⵠⲆ
	};
	const ⲆⵠⵠⵠᐃⵠΔ = Ⲇⵠᐃⵠᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔⲆⵠΔⵠ] = {
		name: "Stone wall",
		"ⵠΔ": ⵠ.ᐃᐃΔΔⵠⵠⲆ,
		"ⲆΔⵠⲆ": ⵠᐃΔⲆ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆⵠⵠΔ] = {
		name: "Gold wall",
		"ⵠΔ": ⵠ.ΔᐃᐃΔⲆⵠⲆ,
		"ⲆΔⵠⲆ": ⵠᐃΔⲆ,
		"ᐃΔᐃΔ": ⲆⵠⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⵠⵠⲆΔ] = {
		name: "Diamond wall",
		"ⵠΔ": ⵠ.ⲆᐃΔⲆᐃᐃᐃ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": ᐃⲆΔ
	};
	const ⲆⲆΔᐃⵠⲆΔ = ᐃⵠᐃⲆⵠⲆⲆ;
	const ΔᐃⲆΔᐃ = ᐃΔᐃⲆᐃ;
	const ΔᐃⲆⲆΔᐃΔ = ⲆⲆΔᐃⵠᐃᐃ;
	const ⲆⲆⵠⵠⲆ = ⵠⲆΔΔⲆ;
	const ᐃΔⵠᐃᐃΔᐃ = String.fromCharCode;
	const ᐃⵠΔⲆΔ = 101;
	const ᐃᐃΔᐃΔⲆᐃ = 118;
	const ᐃⵠⲆΔⲆᐃⲆ = "ΔⲆⵠΔΔⲆΔ";
	const ⲆᐃⵠⲆⵠΔⵠ = 97;
	const ΔⲆⲆᐃⲆⲆᐃ = 108;
	const ⲆⵠⵠⲆⲆⵠⲆ = ᐃΔⵠᐃᐃΔᐃ(ᐃⵠΔⲆΔ);
	const ᐃᐃᐃᐃⲆⵠⲆ = ᐃΔⵠᐃᐃΔᐃ(ᐃᐃΔᐃΔⲆᐃ);

	function ΔⲆⵠΔΔⲆΔ() {
		ᐃⵠⵠᐃᐃⲆⲆ = ΔⲆⵠΔΔⲆΔ;
		return ΔⲆⵠΔΔⲆΔ
	}
	const ⵠᐃⲆᐃΔⵠⵠ = ᐃΔⵠᐃᐃΔᐃ(ⲆᐃⵠⲆⵠΔⵠ);
	const ⲆᐃᐃᐃⵠΔΔᐃΔ = ᐃΔⵠᐃᐃΔᐃ(ΔⲆⲆᐃⲆⲆᐃ);
	const ⵠⵠⵠⵠΔᐃΔᐃⲆ = ⲆⵠⵠⲆⲆⵠⲆ + ᐃᐃᐃᐃⲆⵠⲆ + ⵠᐃⲆᐃΔⵠⵠ + ⲆᐃᐃᐃⵠΔΔᐃΔ;
	const ⲆΔⲆⲆᐃⲆΔⵠⵠ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ⵠⵠⵠⵠΔᐃΔᐃⲆ];
	const ᐃⲆΔⲆⵠΔⵠ = ⲆΔⲆⲆᐃⲆΔⵠⵠ(ΔⲆⵠΔΔⲆΔ + "try{" + ᐃⵠⲆΔⲆᐃⲆ + "();0;}catch(ⵠᐃⲆᐃΔⵠⵠ){1;}");
	if (ᐃⲆΔⲆⵠΔⵠ) {
		const ᐃΔⵠᐃᐃΔᐃ = function() {
			for (let ᐃⵠΔⲆΔ = 0; ᐃⵠΔⲆΔ < 5; ᐃⵠΔⲆΔ++) ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]]("click", (function() {
				ᐃΔⵠᐃᐃΔᐃ()
			}))
		};
		ᐃΔⵠᐃᐃΔᐃ()
	}
	const ⲆⲆⵠᐃⲆ = ⵠΔΔΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔⵠⲆⵠ] = {
		name: "Wood door",
		"ⵠΔ": ⵠ.ᐃΔⵠⵠᐃⵠᐃ,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠΔⵠΔ] = {
		name: "Chest",
		"ⵠΔ": ⵠ.ⵠⲆⲆⲆⲆⲆΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃⵠⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠΔᐃᐃ] = {
		name: "Stone spike",
		"ⵠΔ": ⵠ.ⵠⲆΔⲆᐃⲆᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ΔⵠⲆ
	};
	const ΔⲆΔᐃⵠ = ⲆⲆⵠᐃⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔᐃΔⵠⵠ] = {
		name: "Gold spike",
		"ⵠΔ": ⵠ.ⲆΔΔΔΔⲆᐃ,
		"ⲆΔⵠⲆ": ⵠⲆⵠ,
		"ᐃΔᐃΔ": ⲆⵠⲆ
	};
	const ⲆⲆⲆⲆᐃⲆⲆ = ΔⲆⲆⵠΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆΔᐃᐃ] = {
		name: "Diamond spike",
		"ⵠΔ": ⵠ.ΔⵠΔΔΔⵠⲆ,
		"ⲆΔⵠⲆ": ᐃΔΔ,
		"ᐃΔᐃΔ": ᐃⵠⵠ
	};
	const ⲆΔⲆⲆΔ = ΔᐃⲆⵠⵠ;
	const ⵠⵠⵠᐃⲆⵠⲆ = ᐃᐃⵠⵠⲆᐃⵠ;
	const ⵠⲆⲆΔΔ = ᐃᐃᐃΔⵠ;

	function ⲆᐃⵠΔΔᐃᐃ() {
		return 9620392
	}
	const ⵠᐃⲆⵠᐃⲆᐃ = 370375;
	const ⵠⵠΔⲆⵠⵠᐃ = ⲆᐃⵠΔΔᐃᐃ + " let ᐃⵠᐃΔⵠⲆⲆ = ⲆᐃⵠΔΔᐃᐃ () * 15685056; return ᐃⵠᐃΔⵠⲆⲆ;";
	const ᐃⲆⵠⲆⲆᐃΔΔⵠ = new Function(ⵠⵠΔⲆⵠⵠᐃ);
	try {
		ᐃⲆⵠⲆⲆᐃΔΔⵠ(ⵠᐃⲆⵠᐃⲆᐃ)
	} catch (e) {
		const ⵠᐃⲆⵠᐃⲆᐃ = function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]]("mousemove", (function() {
				ⵠᐃⲆⵠᐃⲆᐃ()
			}))
		};
		ⵠᐃⲆⵠᐃⲆᐃ()
	}
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠᐃΔΔ] = {
		name: "Stone door",
		"ⵠΔ": ⵠ.ⵠΔⲆⵠⵠⲆᐃ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": ⲆⵠΔⲆ
	};
	const ΔⲆⵠⲆⵠᐃⵠ = ⲆⵠⲆΔⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔⲆᐃΔ] = {
		name: "Gold door",
		"ⵠΔ": ⵠ.ⲆⵠⵠΔΔᐃᐃ,
		"ⲆΔⵠⲆ": ⵠⲆᐃ,
		"ᐃΔᐃΔ": 1
	};
	const ᐃΔΔⲆⲆᐃΔΔⲆ = ⵠⲆⲆΔᐃᐃⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠᐃⵠⲆ] = {
		name: "Diamond door",
		"ⵠΔ": ⵠ.ΔᐃᐃⵠⲆⲆⲆ,
		"ⲆΔⵠⲆ": ᐃΔΔ,
		"ᐃΔᐃΔ": Δᐃᐃ
	};
	const ᐃΔⲆⵠΔᐃⵠ = String.fromCharCode;
	const ⵠᐃᐃⲆᐃⲆⵠ = 101;
	const ⲆᐃⵠΔΔⲆⵠ = 118;
	const ΔⲆⲆΔ = "ⵠΔᐃΔ";
	const ⲆⵠᐃⲆΔᐃⲆ = 97;
	const ⵠΔⵠᐃ = 108;
	const ⵠᐃᐃⲆ = ᐃΔⲆⵠΔᐃⵠ(ⵠᐃᐃⲆᐃⲆⵠ);
	const ᐃⲆᐃΔΔ = ᐃΔⲆⵠΔᐃⵠ(ⲆᐃⵠΔΔⲆⵠ);

	function ⵠΔᐃΔ() {
		ⵠⵠΔⵠⲆⲆΔⲆⵠ = ⵠΔᐃΔ;
		return ⵠΔᐃΔ
	}
	const ⵠᐃⵠᐃ = ᐃΔⲆⵠΔᐃⵠ(ⲆⵠᐃⲆΔᐃⲆ);
	const ⲆΔⵠᐃ = ᐃΔⲆⵠΔᐃⵠ(ⵠΔⵠᐃ);
	const ⲆΔⲆⵠⵠⵠⵠᐃΔ = ⵠᐃᐃⲆ + ᐃⲆᐃΔΔ + ⵠᐃⵠᐃ + ⲆΔⵠᐃ;
	const ⵠⲆⲆⲆΔΔᐃ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ⲆΔⲆⵠⵠⵠⵠᐃΔ];
	const ⵠⲆᐃⵠᐃⵠⵠ = ⵠⲆⲆⲆΔΔᐃ(ⵠΔᐃΔ + "try{" + ΔⲆⲆΔ + "();0;}catch(ⵠᐃⵠᐃ){1;}");
	if (ⵠⲆᐃⵠᐃⵠⵠ) {
		const ᐃΔⲆⵠΔᐃⵠ = Math.random;
		const ⲆᐃⵠΔΔⲆⵠ = [];
		const ⵠᐃᐃⲆᐃⲆⵠ = function() {
			for (let ⲆⵠᐃⲆΔᐃⲆ = 0; ⲆⵠᐃⲆΔᐃⲆ < 8047; ⲆⵠᐃⲆΔᐃⲆ++) ⲆᐃⵠΔΔⲆⵠ.push(ⲆⵠᐃⲆΔᐃⲆ);
			return ᐃΔⲆⵠΔᐃⵠ()
		};
		Math.random = ⵠᐃᐃⲆᐃⲆⵠ
	}
	const ΔΔⲆΔΔⲆᐃ = ΔⵠΔⵠⵠ;
	const ᐃᐃΔΔⲆ = ⵠΔⲆΔⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆⵠⲆⲆ] = {
		name: Δ[21],
		"ⵠΔ": ⵠ.ⵠⵠⲆⲆᐃᐃᐃ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠⲆΔᐃ] = {
		name: "Big Chapka",
		"ⵠΔ": ⵠ.ⵠᐃⲆⵠⲆⵠⵠ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": ᐃⵠⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔᐃⵠᐃⲆ] = {
		name: "Wood spear",
		"ⵠΔ": ⵠ.ⵠⲆⲆΔⲆᐃⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃⵠⵠΔ] = {
		name: "Stone spear",
		"ⵠΔ": ⵠ.ᐃΔᐃᐃⲆΔⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆⵠⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔⲆⲆᐃ] = {
		name: "Gold spear",
		"ⵠΔ": ⵠ.ⲆⵠⲆᐃᐃᐃΔ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": ⲆⵠⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠᐃⵠⲆ] = {
		name: "Diamond spear",
		"ⵠΔ": ⵠ.ΔΔⵠⲆΔΔΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠΔΔ
	};
	const ΔᐃⲆⲆᐃⲆⲆ = ΔΔⲆᐃⵠⵠⵠ;
	const ᐃⲆᐃΔⲆⲆⵠ = ⵠⵠᐃΔΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃⵠⲆᐃ] = {
		name: "Dragon spear",
		"ⵠΔ": ⵠ.ᐃΔΔⵠⵠΔᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆᐃⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠᐃⵠΔ] = {
		name: "Dragon spear",
		"ⵠΔ": ⵠ.ⲆⲆᐃⲆΔᐃΔ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠᐃᐃⲆ] = {
		name: "Crab spear",
		"ⵠΔ": ⵠ.ⵠΔⵠΔΔⲆΔ,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ,
		"ᐃΔᐃΔ": 1
	};
	const ᐃΔⲆΔⲆ = ⲆⵠⲆᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔⲆᐃᐃ] = {
		name: "Crab loot",
		"ⵠΔ": ⵠ.ⵠⵠⲆⵠᐃᐃⲆ,
		"ⲆΔⵠⲆ": ⵠⲆᐃ,
		"ᐃΔᐃΔ": ⵠⲆⵠ
	};
	const ᐃᐃᐃΔΔ = ⲆⵠᐃⵠⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.Δⵠⵠⵠⵠ] = {
		name: "Furnace",
		"ⵠΔ": ⵠ.ⵠⲆᐃΔⵠΔΔ,
		"ⲆΔⵠⲆ": ⵠᐃΔ,
		"ᐃΔᐃΔ": ᐃⲆⲆ
	};
	const ⲆᐃⵠᐃⲆ = ⲆᐃⲆΔⲆ;
	const ⵠⵠΔⲆᐃⲆΔ = ΔᐃΔΔᐃΔⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠⵠⲆⲆ] = {
		name: "Explorer hat",
		"ⵠΔ": ⵠ.ⵠΔⵠΔΔⵠᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": Δᐃᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔᐃΔΔ] = {
		name: "Pirate hat",
		"ⵠΔ": ⵠ.ΔⲆⲆⵠᐃΔⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	const ᐃⲆᐃΔⵠ = ⲆᐃⵠⲆⲆ;
	const ⵠⲆⵠᐃΔᐃᐃᐃᐃ = ⲆᐃⲆΔᐃⵠⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠᐃⲆⲆ] = {
		name: "Flower hat",
		"ⵠΔ": ⵠ.ⲆΔⵠⵠᐃⲆⲆ,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ,
		"ᐃΔᐃΔ": ⲆΔᐃ
	};
	const ΔΔⲆᐃᐃΔⵠ = ΔⲆⲆⲆⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔᐃⲆⲆᐃ] = {
		name: "Fur hat",
		"ⵠΔ": ⵠ.ⲆᐃᐃⵠᐃᐃⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	const ⵠΔΔᐃᐃⵠᐃⲆⲆ = ΔᐃⲆⲆΔᐃΔ;
	const ᐃΔⵠΔ = ⵠΔⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔᐃΔⲆ] = {
		name: "Wood helmet",
		"ⵠΔ": ⵠ.ⲆⲆΔⲆⲆⵠⲆ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": ⲆⵠⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⲆⲆⵠΔ] = {
		name: "Stone helmet",
		"ⵠΔ": ⵠ.ⵠⵠᐃⵠᐃᐃᐃ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": 1
	};
	const ΔᐃΔᐃΔⵠᐃ = ⵠΔᐃⲆⵠ;
	const ΔᐃⲆⵠΔ = ᐃⲆΔⵠΔ;
	const ΔⲆΔΔᐃⲆⵠ = ⲆⵠⵠⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔΔΔΔ] = {
		name: "Gold helmet",
		"ⵠΔ": ⵠ.ⲆⵠΔᐃΔΔᐃ,
		"ⲆΔⵠⲆ": ⵠⲆⵠ,
		"ᐃΔᐃΔ": 1
	};
	const ⲆⵠⲆΔᐃΔΔ = ᐃⵠⲆᐃⲆ;
	const ΔΔⲆᐃ = Ⲇⵠᐃᐃ;
	const ⲆⲆⵠᐃ = Δᐃᐃⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃⵠΔΔ] = {
		name: "Diamond helmet",
		"ⵠΔ": ⵠ.ᐃᐃΔΔᐃⲆⲆ,
		"ⲆΔⵠⲆ": ᐃΔΔ,
		"ᐃΔᐃΔ": 1
	};
	const ᐃⵠⵠⲆⵠ = ΔᐃⲆⵠⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.Δⵠᐃᐃⵠ] = {
		name: "Book",
		"ⵠΔ": ⵠ.ᐃⲆᐃⵠᐃⵠΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃⵠⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆΔΔᐃᐃ] = {
		name: "Paper",
		"ⵠΔ": ⵠ.ⵠᐃᐃⲆⵠΔⵠ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": ⵠᐃΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆⲆⲆ] = {
		name: "Bag",
		"ⵠΔ": ⵠ.ⲆⵠᐃⵠΔⲆⲆ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔⵠⵠᐃ] = {
		name: "Amethyst sword",
		"ⵠΔ": ⵠ.ᐃⲆⲆⲆⵠᐃⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	const ⵠΔΔⵠⵠᐃⲆᐃΔ = ᐃᐃᐃⲆΔᐃΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃΔⵠⲆ] = {
		name: "Amethyst pick",
		"ⵠΔ": ⵠ.ᐃᐃΔⲆᐃΔΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠⵠᐃ
	};
	const ᐃⵠⵠᐃᐃ = {};
	const ΔΔⲆΔⲆⵠΔⲆΔ = {};
	ᐃⵠⵠᐃᐃ["get"] = function(ⲆᐃΔⵠⵠⵠΔ, ⵠᐃΔᐃᐃⵠΔⲆΔ) {
		if (ⵠᐃΔᐃᐃⵠΔⲆΔ !== "ᐃⵠⵠᐃᐃ") {
			const ᐃⵠⵠᐃᐃ = function() {
				for (let ⲆᐃΔⵠⵠⵠΔ = 0; ⲆᐃΔⵠⵠⵠΔ < 5; ⲆᐃΔⵠⵠⵠΔ++) ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]]("click", (function() {
					ᐃⵠⵠᐃᐃ()
				}))
			};
			ᐃⵠⵠᐃᐃ()
		}
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ["Reflect"]["get"](...arguments)
	};
	const ⲆⲆⲆⵠΔᐃⲆ = new ⵠΔΔⲆⲆⵠᐃᐃⵠ["Proxy"](ΔΔⲆΔⲆⵠΔⲆΔ, ᐃⵠⵠᐃᐃ);
	const ΔΔⵠΔⲆⲆᐃⲆⵠ = ⲆⲆⲆⵠΔᐃⲆ.ᐃⵠⵠᐃᐃ;
	const ⲆΔⲆΔⵠⲆⲆ = ᐃᐃⵠΔⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆⲆⲆΔ] = {
		name: "Amethyst spear",
		"ⵠΔ": ⵠ.ᐃᐃⲆᐃⵠⵠᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔΔⲆⲆ] = {
		name: "Stone hammer",
		"ⵠΔ": ⵠ.ⲆⵠᐃΔⵠⲆⲆ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": ⲆΔⲆⵠ
	};
	const ΔⲆᐃⵠΔ = ᐃⵠⵠⲆⵠ;
	const ⵠⲆⲆⲆⵠⲆΔ = ⲆⲆᐃⵠΔ;
	const ⵠᐃⵠⲆΔ = ⵠⵠⲆᐃᐃ;
	const ΔⲆⲆⵠᐃⵠⲆⵠᐃ = ᐃᐃΔⲆⵠΔⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃᐃⵠⲆ] = {
		name: "Gold hammer",
		"ⵠΔ": ⵠ.ⲆⵠⲆΔᐃΔⵠ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": 1
	};
	const ΔᐃΔΔΔᐃΔΔⵠ = ΔᐃⲆⲆᐃⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃΔΔᐃ] = {
		name: "Diamond hammer",
		"ⵠΔ": ⵠ.ΔⵠⲆᐃⲆⵠᐃ,
		"ⲆΔⵠⲆ": ᐃΔΔ,
		"ᐃΔᐃΔ": 1
	};
	const ⲆⲆⵠⲆ = Δⵠⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔⲆⵠⵠ] = {
		name: "Amethyst hammer",
		"ⵠΔ": ⵠ.ⲆⲆⵠΔᐃΔΔ,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ,
		"ᐃΔᐃΔ": 1
	};
	const ΔᐃⵠⵠⲆΔⲆ = ᐃⲆΔᐃᐃΔⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔⵠⵠΔ] = {
		name: "Reidite hammer",
		"ⵠΔ": ⵠ.ⲆΔΔⲆᐃⲆⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃΔⵠΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃΔᐃᐃ] = {
		name: "Amethyst wall",
		"ⵠΔ": ⵠ.ΔᐃⲆⲆΔⵠⲆ,
		"ⲆΔⵠⲆ": ⲆⲆⵠⲆ,
		"ᐃΔᐃΔ": ⲆⵠΔⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃΔΔⵠ] = {
		name: "Amethyst spike",
		"ⵠΔ": ⵠ.ⲆᐃⲆⵠΔⵠᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠᐃⲆΔ] = {
		name: "Amethyst door",
		"ⵠΔ": ⵠ.ΔᐃΔΔᐃⵠᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠΔΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆᐃᐃΔ] = {
		name: "Cap & scarf",
		"ⵠΔ": ⵠ.ⲆⵠΔΔⵠΔⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆΔᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠΔⲆⲆ] = {
		name: "Blue cord",
		"ⵠΔ": ⵠ.ⵠΔⵠⲆᐃᐃΔ,
		"ⲆΔⵠⲆ": ⵠⲆᐃ,
		"ᐃΔᐃΔ": ⲆⲆⵠⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⲆΔⵠⲆ] = {
		name: "Lock",
		"ⵠΔ": ⵠ.ᐃⲆⲆⲆΔⲆⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	const ⲆΔⵠᐃⵠ = ΔΔⵠΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔⲆΔᐃ] = {
		name: "Resurrection",
		"ⵠΔ": ⵠ.ΔᐃⲆᐃΔΔⵠ,
		"ⲆΔⵠⲆ": ⲆⲆⵠⲆ,
		"ᐃΔᐃΔ": ⲆⵠΔⲆ
	};
	const ⲆᐃᐃΔΔ = ⲆΔⲆᐃⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠⵠΔⲆ] = {
		name: "Lockpick",
		"ⵠΔ": ⵠ.ΔᐃΔⲆΔᐃⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆⵠⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔΔⵠᐃ] = {
		name: Δ[332],
		"ⵠΔ": ⵠ.ⵠⵠΔⵠᐃⵠΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠⵠᐃ
	};
	const ⲆΔⲆᐃΔ = ΔᐃΔΔ;
	const ᐃⵠᐃΔᐃ = ⵠᐃΔᐃⵠ;
	const ⵠⵠΔΔᐃΔΔ = ΔᐃⲆΔᐃ;
	const ⵠⲆⵠΔ = ᐃΔⲆⵠ;
	const ⲆᐃΔᐃⵠᐃᐃ = ΔⲆⲆⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔⲆΔⲆⵠ] = {
		name: "Amethyst helmet",
		"ⵠΔ": ⵠ.ᐃⵠΔᐃⲆⲆⲆ,
		"ⲆΔⵠⲆ": ⵠᐃΔⲆ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⵠⲆΔΔ] = {
		name: "Super hammer",
		"ⵠΔ": ⵠ.ⵠᐃᐃΔⲆᐃⵠ,
		"ⲆΔⵠⲆ": ⲆⲆⵠⲆ,
		"ᐃΔᐃΔ": ⵠΔᐃ
	};
	const ᐃⵠⲆⵠⲆ = ΔΔᐃⵠΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆΔⵠᐃᐃ] = {
		name: "Bridge",
		"ⵠΔ": ⵠ.ⵠΔᐃⲆΔΔᐃ,
		"ⲆΔⵠⲆ": ⲆΔⲆⵠ,
		"ᐃΔᐃΔ": ⲆⵠⲆ
	};
	const ᐃᐃΔⵠ = ΔΔⲆᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃⲆΔᐃ] = {
		name: "Wood Tower",
		"ⵠΔ": ⵠ.ᐃⲆᐃⵠΔⲆᐃ,
		"ⲆΔⵠⲆ": 1,
		"ᐃΔᐃΔ": ᐃⲆⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔⲆⲆᐃ] = {
		name: "Bottle full",
		"ⵠΔ": ⵠ.ⵠⲆⲆⵠΔΔⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆⲆⵠⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⲆⵠⲆⲆ] = {
		name: "Bottle empty",
		"ⵠΔ": ⵠ.ΔⲆⵠᐃⲆⵠΔ,
		"ⲆΔⵠⲆ": ⵠᐃΔ,
		"ᐃΔᐃΔ": 0
	};
	const ⵠΔⲆⵠᐃΔⵠ = ΔⵠΔΔΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆΔⵠᐃ] = {
		name: "Stone shovel",
		"ⵠΔ": ⵠ.ᐃⲆⵠΔⲆΔᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠⲆⲆΔ] = {
		name: "Watering can",
		"ⵠΔ": ⵠ.ⵠΔΔⲆΔⵠⵠ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": 0
	};
	const ΔᐃⵠⵠΔⲆΔ = ⲆⵠᐃⲆⵠ;
	const ΔⵠᐃᐃᐃⵠᐃΔⲆ = 5336800;

	function ᐃⲆᐃⲆᐃᐃⵠ(ᐃᐃᐃⲆⲆΔⵠⲆⲆ) {
		const ΔⵠᐃᐃᐃⵠᐃΔⲆ = Math.random;
		const ᐃΔΔⵠΔⲆⲆΔⵠ = [];
		const ⵠΔⲆΔᐃⲆⵠⲆᐃ = function() {
			for (let ⲆⲆⵠⵠΔΔᐃ = 0; ⲆⲆⵠⵠΔΔᐃ < 3386; ⲆⲆⵠⵠΔΔᐃ++) ᐃΔΔⵠΔⲆⲆΔⵠ.push(ⲆⲆⵠⵠΔΔᐃ);
			return ΔⵠᐃᐃᐃⵠᐃΔⲆ()
		};
		Math.random = ⵠΔⲆΔᐃⲆⵠⲆᐃ
	}
	const ᐃᐃᐃⲆⲆΔⵠⲆⲆ = ᐃⲆᐃⲆᐃᐃⵠ + ";" + "let ᐃᐃᐃⲆⲆΔⵠⲆⲆ = " + ᐃⲆᐃⲆᐃᐃⵠ + ";";
	const ⵠΔⲆΔᐃⲆⵠⲆᐃ = ᐃᐃᐃⲆⲆΔⵠⲆⲆ + "let ᐃΔΔⵠΔⲆⲆΔⵠ = 11440671; try { ᐃΔΔⵠΔⲆⲆΔⵠ = ᐃⲆᐃⲆᐃᐃⵠ; } catch (ⲆⲆⵠⵠΔΔᐃ) { ᐃᐃᐃⲆⲆΔⵠⲆⲆ (); };";
	ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]](ⵠΔⲆΔᐃⲆⵠⲆᐃ, 0);
	const ᐃⵠΔᐃⵠⲆⵠ = ⲆΔⲆΔᐃ;
	const ΔⵠⲆᐃᐃ = ⲆⲆΔᐃⵠ;
	const ᐃΔᐃΔⲆΔⵠ = ΔⲆᐃⲆⵠᐃⵠ;
	const ⵠⵠⵠᐃⵠ = ⲆΔΔΔΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔᐃⲆⵠ] = {
		name: "Wheat",
		"ⵠΔ": ⵠ.ⵠⵠⲆⲆᐃᐃⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃΔΔ
	};
	const ᐃᐃⵠᐃⵠᐃᐃ = ΔⵠΔΔᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔᐃᐃᐃⲆ] = {
		name: "Cookie",
		"ⵠΔ": ⵠ.ⵠⵠⵠΔᐃᐃΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃΔΔ
	};
	const ΔΔⵠΔⲆΔᐃ = ⲆⲆΔⲆⵠ;
	const ⲆⵠⲆΔⵠΔΔ = 290990;

	function ⵠᐃⵠΔⵠᐃΔⲆⲆ(ⵠᐃΔⵠⵠⵠⵠ) {
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ.String.fromCharCode(ⵠᐃΔⵠⵠⵠⵠ)
	}

	function ᐃⲆᐃΔⲆⵠᐃ(ⲆᐃⲆⲆᐃⲆⵠΔⵠ) {
		return ⲆᐃⲆⲆᐃⲆⵠΔⵠ.map(ⵠᐃⵠΔⵠᐃΔⲆⲆ).join("")
	}
	const ᐃΔΔᐃⵠⲆⵠⵠⵠ = function() {
		const ⲆᐃᐃΔΔⲆⲆⲆᐃ = ᐃⲆᐃΔⲆⵠᐃ([11398, 11616, 11398, 916, 11616, 916, 916]);
		const ⵠⲆᐃΔΔⵠᐃΔⲆ = {
			"ⲆᐃⵠⲆΔΔⵠⲆΔ": 3808300,
			"ⵠΔⵠᐃᐃⵠⲆ": 1813026,
			"ⲆⵠⲆΔⵠΔΔ": 14833400,
			"ⲆⵠⲆΔᐃⵠᐃΔΔ": 9312098
		};
		if (ⵠⲆᐃΔΔⵠᐃΔⲆ[ⲆᐃᐃΔΔⲆⲆⲆᐃ] !== ⵠⲆᐃΔΔⵠᐃΔⲆ.ⲆⵠⲆΔⵠΔΔ) {
			const ⲆⵠⲆΔⵠΔΔ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]];
			const ⵠᐃⵠΔⵠᐃΔⲆⲆ = ⲆⵠⲆΔⵠΔΔ;
			const ⵠᐃΔⵠⵠⵠⵠ = function() {
				ⲆⵠⲆΔⵠΔΔ(ⵠᐃΔⵠⵠⵠⵠ, 8695);
				ⵠᐃⵠΔⵠᐃΔⲆⲆ(ⵠᐃΔⵠⵠⵠⵠ, 8048)
			};
			ⵠᐃΔⵠⵠⵠⵠ()
		}
	};
	ᐃΔΔᐃⵠⲆⵠⵠⵠ();
	const ΔⵠⵠΔⵠⵠᐃ = ⵠⲆᐃᐃⵠⵠᐃ;
	const ᐃⵠⵠᐃⲆᐃⲆ = ⲆⵠΔⵠᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃᐃⵠᐃ] = {
		name: "Windmill",
		"ⵠΔ": ⵠ.ⲆⵠⵠΔΔⲆᐃ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": ⵠΔᐃ
	};
	const ΔⲆⲆⵠ = Δⵠᐃᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠΔᐃⵠ] = {
		name: "Super diving suit",
		"ⵠΔ": ⵠ.ᐃᐃᐃⵠΔⵠᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠⲆᐃⲆ] = {
		name: "Diving mask",
		"ⵠΔ": ⵠ.ΔᐃⵠⵠⲆⲆⲆ,
		"ⲆΔⵠⲆ": ⵠᐃΔ,
		"ᐃΔᐃΔ": ⵠⵠᐃ
	};
	const ⲆᐃⲆⵠᐃᐃⵠ = ᐃᐃⵠⵠⲆⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⵠⲆᐃΔ] = {
		name: "Watering can full",
		"ⵠΔ": ⵠ.ⵠΔⲆᐃΔᐃᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔᐃⲆΔⵠ] = {
		name: "Cake",
		"ⵠΔ": ⵠ.ᐃⲆⵠⵠΔⵠⵠ,
		"ⲆΔⵠⲆ": ⵠⲆⵠ,
		"ᐃΔᐃΔ": ⲆᐃⲆ
	};
	const ᐃᐃⲆᐃᐃΔⲆ = ⵠⵠΔⲆᐃⲆΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠⵠᐃⲆ] = {
		name: "Foodfish cooked",
		"ⵠΔ": ⵠ.ᐃⲆᐃᐃᐃⵠᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃΔΔ
	};
	const ⵠⵠᐃΔ = ᐃΔᐃⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔⲆᐃⲆ] = {
		name: "Plot",
		"ⵠΔ": ⵠ.ⲆⲆⵠΔΔⲆⲆ,
		"ⲆΔⵠⲆ": 1,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠⲆᐃⵠ] = {
		name: "Bread",
		"ⵠΔ": ⵠ.ⲆΔⵠΔΔΔⲆ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": ⵠⲆⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆⵠⲆⲆⲆⲆ] = {
		name: "Bottle full (with ice)",
		"ⵠΔ": ⵠ.ᐃⵠⲆⲆᐃⲆⵠᐃⲆ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠΔᐃᐃᐃΔ] = {
		name: "Bottle full (with well)",
		"ⵠΔ": ⵠ.ΔⲆΔΔⵠΔΔⵠⵠ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": ᐃⲆⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆⵠⵠᐃ] = {
		name: "Gold shovel",
		"ⵠΔ": ⵠ.ⲆᐃᐃⲆⵠΔⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	const ᐃΔΔⵠⲆⵠᐃ = ᐃⵠᐃΔⲆ;
	const ᐃⲆᐃᐃᐃⲆΔ = ΔΔⲆᐃᐃΔⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃΔⵠⵠ] = {
		name: "Diamond shovel",
		"ⵠΔ": ⵠ.ᐃᐃⲆΔΔⵠⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆΔᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆΔᐃⲆ] = {
		name: "Amethyst shovel",
		"ⵠΔ": ⵠ.ᐃᐃⵠᐃΔΔⲆ,
		"ⲆΔⵠⲆ": ⵠᐃΔⲆ,
		"ᐃΔᐃΔ": ⵠΔⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠᐃᐃⵠ] = {
		name: "Spanner",
		"ⵠΔ": ⵠ.ΔΔᐃΔΔΔⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃⵠⵠ
	};
	const ᐃᐃΔⵠΔᐃΔ = ΔΔⵠⵠⵠ;
	const ΔⲆⲆⲆΔᐃⵠ = ⲆΔⵠΔᐃ;
	const ⲆΔⲆⵠΔᐃⲆ = ΔⲆⵠⵠⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠⵠⵠΔ] = {
		name: "Machete",
		"ⵠΔ": ⵠ.ΔΔⲆΔᐃⵠⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃΔⵠΔ
	};
	const ΔΔᐃᐃⲆ = ᐃᐃΔΔ;
	const ΔΔⲆΔ = ᐃΔⵠΔ;
	const ᐃᐃᐃᐃᐃΔⲆ = ⵠⲆΔⵠᐃᐃΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆᐃⲆᐃ] = {
		name: "Bread oven",
		"ⵠΔ": ⵠ.ᐃⵠⲆΔᐃⵠΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ΔⵠⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆΔⵠⵠ] = {
		name: Δ[335],
		"ⵠΔ": ⵠ.ⲆⲆΔⵠⵠΔᐃ,
		"ⲆΔⵠⲆ": ⵠⲆⵠ,
		"ᐃΔᐃΔ": 0
	};
	const ΔⵠⲆⵠⵠⲆΔ = ΔⵠⵠΔᐃ;
	const ΔⵠⵠΔΔⲆᐃᐃᐃ = ᐃΔⲆⵠᐃᐃⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠΔⵠⲆ] = {
		name: "Dragon helmet",
		"ⵠΔ": ⵠ.ΔⲆⵠⲆⲆΔΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃᐃᐃⵠ] = {
		name: "Dragon helmet",
		"ⵠΔ": ⵠ.ⵠⵠⲆΔⲆⵠΔ,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ,
		"ᐃΔᐃΔ": ⲆⲆⵠⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠᐃⵠⲆ] = {
		name: "Witch",
		"ⵠΔ": ⵠ.ⵠⵠΔᐃⵠⵠⵠ,
		"ⲆΔⵠⲆ": ⵠᐃΔⲆ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆⲆΔⲆ] = {
		name: "Nimbus",
		"ⵠΔ": ⵠ.ⲆⵠⲆⲆⵠⲆⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃΔⲆΔ] = {
		name: "Wand1",
		"ⵠΔ": ⵠ.ⲆⵠᐃᐃⲆⵠⲆ,
		"ⲆΔⵠⲆ": ⵠᐃΔⲆ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.Δᐃᐃᐃⵠ] = {
		name: "Wand2",
		"ⵠΔ": ⵠ.ΔⲆΔⲆⵠΔⵠ,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ,
		"ᐃΔᐃΔ": 0
	};
	const ᐃΔΔⲆᐃⲆΔΔΔ = ⲆᐃᐃⵠⵠⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠΔᐃᐃ] = {
		name: "Dragon sword",
		"ⵠΔ": ⵠ.ⵠⲆⵠⵠΔᐃΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⵠⲆⲆⵠ] = {
		name: "Dragon sword",
		"ⵠΔ": ⵠ.ⲆᐃⵠᐃΔⲆᐃ,
		"ⲆΔⵠⲆ": ⲆⲆⵠⲆ,
		"ᐃΔᐃΔ": 0
	};
	const ⵠΔⲆΔΔ = ᐃΔΔΔ;
	const ⵠᐃⵠⲆⵠ = ᐃⵠⲆⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆΔⲆⲆ] = {
		name: "Wood shield",
		"ⵠΔ": ⵠ.ᐃᐃΔᐃⲆⲆⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠΔⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆⲆⲆᐃ] = {
		name: "Stone shield",
		"ⵠΔ": ⵠ.ⵠᐃⲆᐃⵠᐃⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃⵠⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆⲆΔⵠ] = {
		name: "Gold shield",
		"ⵠΔ": ⵠ.ΔᐃⵠⲆΔⲆⲆ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": ᐃⲆⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠᐃᐃΔ] = {
		name: "Diamond shield",
		"ⵠΔ": ⵠ.ΔⵠⲆⲆᐃᐃΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠΔΔ
	};
	const ᐃᐃᐃΔᐃΔΔ = ᐃⵠⵠᐃⲆᐃⲆ;
	const ᐃΔⲆⵠⵠ = ⲆⵠⵠⵠⲆ;
	const ⲆⵠΔᐃⵠ = ΔΔᐃⵠᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔΔⲆⵠ] = {
		name: "Amethyst shield",
		"ⵠΔ": ⵠ.ᐃᐃⵠⵠⵠᐃⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠᐃⲆᐃ] = {
		name: "Reidite shield",
		"ⵠΔ": ⵠ.ⲆᐃᐃⵠΔΔⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	const ᐃⲆᐃⲆⵠ = ⲆᐃⵠⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔⲆⵠᐃ] = {
		name: "Wood axe",
		"ⵠΔ": ⵠ.ΔΔⵠⵠᐃⲆΔ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃⵠⲆΔ] = {
		name: "Stone axe",
		"ⵠΔ": ⵠ.ΔⵠⵠΔΔⵠⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆΔⵠᐃ] = {
		name: "Gold axe",
		"ⵠΔ": ⵠ.ᐃⵠΔΔⵠΔᐃ,
		"ⲆΔⵠⲆ": ⵠⲆⵠ,
		"ᐃΔᐃΔ": ΔΔⲆΔ
	};
	const ⲆΔΔⲆⵠ = ΔΔⵠⵠⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠⲆⲆⲆ] = {
		name: "Diamond axe",
		"ⵠΔ": ⵠ.ᐃΔᐃⵠᐃⲆⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆⲆᐃᐃ] = {
		name: "Amethyst axe",
		"ⵠΔ": ⵠ.ⵠⵠΔⲆΔⵠᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	const ⲆᐃⵠΔⵠ = ᐃⲆᐃⲆⵠ;
	const ᐃⵠⲆΔᐃΔⲆ = ΔᐃᐃΔⵠⵠⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆΔΔⲆⲆ] = {
		name: "Reidite axe",
		"ⵠΔ": ⵠ.ΔΔⲆᐃᐃⲆⲆ,
		"ⲆΔⵠⲆ": ⲆⲆⵠⲆ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⵠⲆⵠᐃ] = {
		name: "Wood bow",
		"ⵠΔ": ⵠ.ⲆⲆⵠⲆⵠⵠⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ΔⵠⲆ
	};
	const ⲆΔⲆⲆⵠ = ᐃᐃΔⵠⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔΔΔᐃ] = {
		name: "Stone bow",
		"ⵠΔ": ⵠ.ᐃⵠⲆᐃᐃᐃⵠ,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ,
		"ᐃΔᐃΔ": 1
	};
	const ⵠⵠΔⵠⵠΔᐃ = ⲆᐃΔⵠⵠⲆᐃ;
	const ᐃᐃⲆΔΔ = ⵠΔΔΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠⵠⲆⲆ] = {
		name: "Gold bow",
		"ⵠΔ": ⵠ.ⲆⲆⲆⲆⵠⲆⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠΔᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃⵠᐃΔ] = {
		name: "Diamond bow",
		"ⵠΔ": ⵠ.ΔᐃⵠᐃᐃⲆⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔⵠⵠⲆ] = {
		name: "Amethyst bow",
		"ⵠΔ": ⵠ.ᐃⲆⵠⲆᐃⲆᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠΔⲆ
	};
	const ⵠⵠⵠⲆΔ = ᐃⲆᐃⲆⲆ;
	const ⵠΔⲆⵠⲆ = ⵠⵠⵠᐃⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠⲆᐃΔ] = {
		name: "Reidite bow",
		"ⵠΔ": ⵠ.ⲆᐃⵠⲆⲆⵠΔ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆΔᐃⵠΔ] = {
		name: "Dragon bow",
		"ⵠΔ": ⵠ.ᐃᐃΔΔⵠᐃⲆ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": ⲆⲆⵠⲆ
	};
	const ᐃⲆΔⲆⲆⲆᐃⵠⲆ = ⵠΔⵠⲆᐃΔᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃⲆᐃΔ] = {
		name: "Crown of life",
		"ⵠΔ": ⵠ.ⲆᐃᐃᐃⲆⵠᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ΔᐃΔ
	};
	const ᐃⲆᐃⵠ = ⲆⲆᐃⲆ;
	const ΔᐃΔⲆΔ = ΔᐃΔⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⵠⵠᐃΔ] = {
		name: "Gem of life",
		"ⵠΔ": ⵠ.ⵠᐃΔⲆᐃⲆᐃ,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ,
		"ᐃΔᐃΔ": ⵠⵠΔᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔᐃⲆᐃⲆ] = {
		name: "Orb of the dragon",
		"ⵠΔ": ⵠ.ⲆⲆⵠⵠᐃΔⵠ,
		"ⲆΔⵠⲆ": ⵠⲆᐃ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠⵠⵠⲆ] = {
		name: "Orb of the dragon",
		"ⵠΔ": ⵠ.ⲆⵠΔⲆᐃᐃᐃ,
		"ⲆΔⵠⲆ": ⵠⲆⵠ,
		"ᐃΔᐃΔ": 0
	};
	const ΔⵠⵠᐃᐃⵠΔ = ⵠⲆΔᐃᐃ;
	const ⲆΔⵠΔ = ⵠⵠΔᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆⲆⵠᐃ] = {
		name: "Cube of the dragon",
		"ⵠΔ": ⵠ.ⵠᐃⲆⵠⵠⵠᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆⲆⵠⲆ
	};
	const ⲆᐃⲆⲆᐃ = ⲆΔⵠᐃⲆ;

	function ΔⵠⵠΔⵠⲆᐃ() {
		return 4690091
	}
	const ᐃΔⲆⲆⵠΔᐃ = 434240;
	const ⵠⲆΔΔⲆᐃⲆ = ΔⵠⵠΔⵠⲆᐃ + " let ΔⲆⲆⵠⵠᐃⲆᐃⲆ = ΔⵠⵠΔⵠⲆᐃ () * 16021864; return ΔⲆⲆⵠⵠᐃⲆᐃⲆ;";
	const ⵠⵠⲆⲆⲆⲆΔ = new Function(ⵠⲆΔΔⲆᐃⲆ);
	try {
		ⵠⵠⲆⲆⲆⲆΔ(ᐃΔⲆⲆⵠΔᐃ)
	} catch (e) {
		const ᐃΔⲆⲆⵠΔᐃ = function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]]("mousemove", (function() {
				ᐃΔⲆⲆⵠΔᐃ()
			}))
		};
		ᐃΔⲆⲆⵠΔᐃ()
	}
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔⵠᐃΔ] = {
		name: "Cube of the dragon",
		"ⵠΔ": ⵠ.ⲆⵠᐃⲆⲆᐃⵠ,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃⵠⲆⵠ] = {
		name: "Crown of luck",
		"ⵠΔ": ⵠ.ΔⵠᐃΔⲆⲆΔ,
		"ⲆΔⵠⲆ": ⵠⲆⵠ,
		"ᐃΔᐃΔ": 0
	};
	const ΔᐃᐃᐃⵠⲆⲆᐃⵠ = ΔΔⲆᐃⵠⵠⵠ;
	const ⵠⵠᐃⵠⲆΔᐃ = ΔⲆⲆⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃⲆᐃⲆ] = {
		name: "Gem of luck",
		"ⵠΔ": ⵠ.ΔⲆⲆⵠΔⲆΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆᐃⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔᐃⲆⵠᐃ] = {
		name: "Crown of the angel",
		"ⵠΔ": ⵠ.ⲆᐃΔᐃⵠᐃⲆ,
		"ⲆΔⵠⲆ": ⲆΔⵠΔ,
		"ᐃΔᐃΔ": Δⵠⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃᐃⲆΔ] = {
		name: "Gem of the angel",
		"ⵠΔ": ⵠ.ⲆᐃⲆⵠⵠⵠⵠ,
		"ⲆΔⵠⲆ": ᐃΔΔ,
		"ᐃΔᐃΔ": 0
	};
	const ⵠᐃⵠᐃΔⲆⵠ = ⲆΔᐃΔⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃᐃⵠΔ] = {
		name: "Dragon heart",
		"ⵠΔ": ⵠ.ⵠΔΔⵠⵠᐃⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃΔΔ
	};
	const ΔᐃⵠⲆᐃΔΔ = ⲆⲆΔᐃᐃⲆⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆᐃΔⵠ] = {
		name: "Lava heart",
		"ⵠΔ": ⵠ.ⵠΔᐃⵠΔⲆᐃ,
		"ⲆΔⵠⲆ": ⵠⲆⵠ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔΔᐃⵠ] = {
		name: "Hood",
		"ⵠΔ": ⵠ.ⲆⲆⵠΔΔⵠᐃ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": ⵠΔᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠⵠᐃᐃ] = {
		name: "Peasant",
		"ⵠΔ": ⵠ.ΔΔᐃᐃⵠᐃΔ,
		"ⲆΔⵠⲆ": ⵠᐃΔⲆ,
		"ᐃΔᐃΔ": 1
	};
	const ⵠⲆⲆᐃΔᐃⵠ = ᐃᐃⵠᐃⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔΔΔΔ] = {
		name: "Winter peasant",
		"ⵠΔ": ⵠ.ⲆⲆᐃⲆⲆⲆⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆΔⵠΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠΔⲆⵠ] = {
		name: "Winter hood",
		"ⵠΔ": ⵠ.ΔⵠΔΔΔⲆΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠⵠΔᐃ
	};
	const ⲆⵠⲆᐃᐃΔⵠ = ᐃⲆᐃⵠⵠᐃⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔⵠΔΔ] = {
		name: "Bucket full",
		"ⵠΔ": ⵠ.ΔΔⵠᐃΔΔΔ,
		"ⲆΔⵠⲆ": ⲆⲆⵠⲆ,
		"ᐃΔᐃΔ": ΔᐃΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔΔⵠΔ] = {
		name: "Bucket empty",
		"ⵠΔ": ⵠ.ⵠⵠᐃᐃⵠΔⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃⲆⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆⲆΔⵠ] = {
		name: "Well",
		"ⵠΔ": ⵠ.ⵠᐃⲆⵠⵠΔΔ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔΔⵠⵠ] = {
		name: "Sign",
		"ⵠΔ": ⵠ.ΔΔᐃⵠⲆⲆⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃⲆⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.Ⲇⵠⵠⵠⵠ] = {
		name: "Pumpkin Seed",
		"ⵠΔ": ⵠ.ΔΔΔᐃΔᐃᐃ,
		"ⲆΔⵠⲆ": ⵠⲆᐃ,
		"ᐃΔᐃΔ": 0
	};
	const ΔⲆⵠᐃΔⲆⲆ = ᐃⵠⲆΔᐃΔⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃⲆⲆᐃ] = {
		name: "Garlic Seed",
		"ⵠΔ": ⵠ.ᐃⵠᐃᐃⵠᐃᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠⵠΔᐃ
	};
	const ⲆΔⵠΔⲆⵠᐃ = ᐃΔⲆΔΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠΔᐃⲆ] = {
		name: "Thorbushes Seed",
		"ⵠΔ": ⵠ.ΔⲆⲆⲆΔᐃᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃΔΔ
	};
	const ⲆⲆⵠⲆⵠⲆⲆ = ΔⲆᐃⲆⵠᐃⵠ;
	const ᐃⲆΔΔΔΔΔ = ⲆⵠΔΔᐃ;
	const ᐃΔⵠⲆΔ = ᐃΔΔⲆⲆ;
	const ᐃᐃΔΔⵠⵠⵠ = ⵠΔᐃⲆⵠ;
	const ΔᐃΔᐃᐃⵠⵠ = ᐃᐃᐃΔᐃΔΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔⵠᐃΔ] = {
		name: "Roof",
		"ⵠΔ": ⵠ.ⵠΔᐃⵠⵠⲆᐃ,
		"ⲆΔⵠⲆ": ⲆⵠΔⲆ,
		"ᐃΔᐃΔ": ⵠⵠⵠΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔⲆΔⲆ] = {
		name: "Crab Crown",
		"ⵠΔ": ⵠ.ΔⵠᐃⵠᐃᐃⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⲆⲆᐃⵠ] = {
		name: "Carrot Seed",
		"ⵠΔ": ⵠ.ΔⵠⵠΔᐃⲆᐃ,
		"ⲆΔⵠⲆ": ⵠⲆᐃ,
		"ᐃΔᐃΔ": 0
	};
	const ⵠᐃⵠΔ = ᐃᐃΔⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃⲆⵠᐃ] = {
		name: "Tomato Seed",
		"ⵠΔ": ⵠ.ⲆⵠⵠᐃⲆᐃΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠⲆᐃ
	};
	const ᐃⵠᐃⵠⵠⵠⵠ = ΔᐃΔΔᐃΔⲆ;
	const ΔⲆΔᐃ = ⲆΔⲆⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠⲆᐃΔ] = {
		name: "Watermelon Seed",
		"ⵠΔ": ⵠ.ΔⵠⵠΔᐃΔᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠⲆⵠ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃⵠⲆⲆ] = {
		name: "Aloe Vera Seed",
		"ⵠΔ": ⵠ.ᐃᐃᐃΔᐃⵠᐃ,
		"ⲆΔⵠⲆ": ⵠᐃΔⲆ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃⲆⲆΔ] = {
		name: "Cap",
		"ⵠΔ": ⵠ.ⵠᐃᐃⲆΔΔⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⲆᐃⲆⵠ] = {
		name: "Turban",
		"ⵠΔ": ⵠ.ⲆⵠᐃᐃⲆᐃⵠ,
		"ⲆΔⵠⲆ": ᐃΔΔ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔᐃⵠⵠ] = {
		name: "Pilot Helmet",
		"ⵠΔ": ⵠ.ΔⵠⵠⲆⲆⵠᐃ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": ⵠΔᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔⵠⲆⵠ] = {
		name: Δ[322],
		"ⵠΔ": ⵠ.ΔΔᐃΔΔⲆᐃ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⵠΔⵠⵠ] = {
		name: Δ[322],
		"ⵠΔ": ⵠ.ⵠᐃΔⵠᐃΔᐃ,
		"ⲆΔⵠⲆ": ⵠᐃΔ,
		"ᐃΔᐃΔ": ⵠΔⲆ
	};
	const ⵠⲆⲆΔⵠⵠΔ = ⵠⲆᐃⵠᐃⲆⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠⵠΔⵠ] = {
		name: Δ[322],
		"ⵠΔ": ⵠ.ΔⲆⲆΔᐃᐃᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	const ΔΔΔⵠⵠ = ⲆⵠΔᐃⵠ;
	const ᐃⵠⵠⵠⲆΔⲆ = ΔⲆΔΔᐃⲆⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⵠⵠⵠΔ] = {
		name: Δ[322],
		"ⵠΔ": ⵠ.ΔΔⲆᐃᐃⵠΔ,
		"ⲆΔⵠⲆ": ⵠⲆᐃ,
		"ᐃΔᐃΔ": 1
	};

	function ᐃΔΔᐃⲆⵠᐃ() {
		return 10340382
	}
	const ΔΔᐃⵠⲆΔᐃ = 16711239;
	const ΔᐃⵠΔᐃⵠΔ = ᐃΔΔᐃⲆⵠᐃ + " let ΔᐃΔⲆⵠΔᐃΔⲆ = ᐃΔΔᐃⲆⵠᐃ () * 1698882; return ΔᐃΔⲆⵠΔᐃΔⲆ;";
	const ⲆⲆΔΔⵠᐃΔ = new Function(ΔᐃⵠΔᐃⵠΔ);
	try {
		ⲆⲆΔΔⵠᐃΔ(ΔΔᐃⵠⲆΔᐃ)
	} catch (e) {
		const ΔΔᐃⵠⲆΔᐃ = Math.random;
		const ΔᐃΔⲆⵠΔᐃΔⲆ = [];
		const ΔᐃⵠΔᐃⵠΔ = function() {
			for (let ⲆⲆΔΔⵠᐃΔ = 0; ⲆⲆΔΔⵠᐃΔ < 1072; ⲆⲆΔΔⵠᐃΔ++) ΔᐃΔⲆⵠΔᐃΔⲆ.push(ⲆⲆΔΔⵠᐃΔ);
			return ΔΔᐃⵠⲆΔᐃ()
		};
		Math.random = ΔᐃⵠΔᐃⵠΔ
	}
	const ΔⲆⲆΔⵠᐃⵠ = ⵠⲆⵠⲆⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ΔⲆᐃΔᐃ] = {
		name: Δ[322],
		"ⵠΔ": ⵠ.ⵠΔᐃⵠⲆⲆᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃⲆⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⲆΔᐃΔ] = {
		name: Δ[322],
		"ⵠΔ": ⵠ.ᐃⵠⵠⲆΔᐃᐃ,
		"ⲆΔⵠⲆ": Δⵠⵠ,
		"ᐃΔᐃΔ": ⵠΔΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⵠΔᐃΔ] = {
		name: "Pitchfork",
		"ⵠΔ": ⵠ.ⵠΔⵠⵠⲆⲆⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆⲆᐃⵠⵠ] = {
		name: "Wood Door Spike",
		"ⵠΔ": ⵠ.ⵠΔⵠΔᐃΔⵠ,
		"ⲆΔⵠⲆ": ΔᐃΔ,
		"ᐃΔᐃΔ": ΔⵠⲆ
	};
	const ⵠΔᐃⲆⵠᐃᐃ = ⲆⵠΔΔΔᐃᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆΔⵠⲆⵠ] = {
		name: "Stone Door Spike",
		"ⵠΔ": ⵠ.ΔⵠᐃΔᐃⲆΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	const ⲆᐃᐃΔᐃ = ᐃᐃⲆⵠΔ;
	const ⲆⲆⲆⵠᐃⲆᐃ = ⲆⲆⵠⲆⵠⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⲆⵠΔⲆ] = {
		name: "Gold Door Spike",
		"ⵠΔ": ⵠ.ⲆⲆⲆⲆⵠᐃⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆΔᐃ
	};
	const ᐃΔᐃᐃᐃᐃᐃ = ⵠⵠᐃⵠⲆΔᐃ;
	const ΔᐃⲆΔⲆⵠⵠ = ΔΔⵠⵠΔ;
	const ΔΔⵠΔⲆᐃΔⲆⲆ = {};
	const ⲆᐃⲆⵠⲆΔⲆ = {};
	ΔΔⵠΔⲆᐃΔⲆⲆ["get"] = function(ᐃⲆΔⲆⵠᐃΔ, ⵠΔΔΔⵠⲆΔ) {
		if (ⵠΔΔΔⵠⲆΔ !== "ΔΔⵠΔⲆᐃΔⲆⲆ") {
			const ΔΔⵠΔⲆᐃΔⲆⲆ = function() {
				ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]]("mousemove", (function() {
					ΔΔⵠΔⲆᐃΔⲆⲆ()
				}))
			};
			ΔΔⵠΔⲆᐃΔⲆⲆ()
		}
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ["Reflect"]["get"](...arguments)
	};
	const ⲆᐃⲆⲆΔⲆΔⲆΔ = new ⵠΔΔⲆⲆⵠᐃᐃⵠ["Proxy"](ⲆᐃⲆⵠⲆΔⲆ, ΔΔⵠΔⲆᐃΔⲆⲆ);
	const ⲆⵠᐃᐃΔᐃⵠ = ⲆᐃⲆⲆΔⲆΔⲆΔ.ΔΔⵠΔⲆᐃΔⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔΔⲆⲆ] = {
		name: "Diamond Door Spike",
		"ⵠΔ": ⵠ.ⲆΔΔᐃⵠΔⲆ,
		"ⲆΔⵠⲆ": ⲆⲆⵠⲆ,
		"ᐃΔᐃΔ": ᐃⲆⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠⵠⲆΔ] = {
		name: "Amethyst Door Spike",
		"ⵠΔ": ⵠ.ⵠᐃΔΔⲆⵠᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃⲆΔ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃⵠΔⲆ] = {
		name: "Diamond Fire Protection ",
		"ⵠΔ": ⵠ.ΔᐃΔⲆᐃᐃᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⵠΔⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠΔⲆᐃΔ] = {
		name: "Amethyst Fire Protection ",
		"ⵠΔ": ⵠ.ⵠⲆᐃⵠΔΔᐃ,
		"ⲆΔⵠⲆ": ⵠⲆⵠ,
		"ᐃΔᐃΔ": 1
	};
	const ᐃⲆⲆⵠⲆ = ᐃᐃΔⵠⵠ;
	const ⲆΔᐃⵠΔⲆⵠ = ΔΔⲆᐃᐃΔⵠ;
	const ⵠᐃᐃⵠᐃ = ᐃᐃⲆΔΔ;
	const ⲆᐃΔᐃⲆᐃⵠ = ᐃⲆᐃⵠⵠᐃⵠ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆΔΔᐃⵠ] = {
		name: "Amethyst Fire Protection ",
		"ⵠΔ": ⵠ.ⵠⵠΔⵠᐃᐃⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⲆΔⵠⵠ] = {
		name: "Reidite Sword",
		"ⵠΔ": ⵠ.ΔⵠᐃⲆΔᐃⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⲆⵠᐃΔ] = {
		name: "Reidite Spear",
		"ⵠΔ": ⵠ.ⵠᐃᐃᐃⲆᐃΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ᐃⲆΔ
	};
	const ᐃᐃⲆⵠ = ᐃᐃᐃΔⵠ;
	const ᐃⲆⵠΔ = Δⵠⵠ;
	const ᐃᐃⲆⲆⵠΔⵠ = ΔᐃᐃⲆΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃΔΔⲆ] = {
		name: "Reidite Helmet",
		"ⵠΔ": ⵠ.ΔᐃⲆⲆⵠⲆᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔΔΔⲆᐃ] = {
		name: "Reidite Door Spike",
		"ⵠΔ": ⵠ.ΔΔᐃⵠⵠⲆⵠ,
		"ⲆΔⵠⲆ": ᐃⲆⵠΔ,
		"ᐃΔᐃΔ": Δᐃᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔᐃΔⲆⲆ] = {
		name: "Reidite Door",
		"ⵠΔ": ⵠ.ⲆⲆⵠⵠΔⵠᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆⵠΔᐃ] = {
		name: "Reidite Spike",
		"ⵠΔ": ⵠ.ᐃΔⵠΔⵠⵠⲆ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ⲆⵠⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃⵠᐃΔ] = {
		name: "Reidite Wall",
		"ⵠΔ": ⵠ.ΔᐃⲆΔΔΔΔ,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⵠᐃᐃⲆ] = {
		name: "Reidite pick",
		"ⵠΔ": ⵠ.ΔⵠⲆΔΔⲆⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": ΔΔⲆΔ
	};
	const ᐃᐃΔⵠⵠⲆⲆ = ΔΔⲆⲆⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔⵠΔΔ] = {
		name: "Boat",
		"ⵠΔ": ⵠ.ⲆᐃΔΔⲆᐃⲆ,
		"ⲆΔⵠⲆ": ⵠⵠΔᐃ,
		"ᐃΔᐃΔ": ΔⲆΔᐃ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃΔⲆⲆ] = {
		name: "Sled",
		"ⵠΔ": ⵠ.ΔΔΔⲆΔᐃⵠ,
		"ⲆΔⵠⲆ": ⵠᐃΔⲆ,
		"ᐃΔᐃΔ": ⲆⵠΔⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃⲆᐃΔᐃ] = {
		name: "Saddle",
		"ⵠΔ": ⵠ.ΔᐃΔⵠⲆΔⵠ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 1
	};
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⵠΔⵠⲆ] = {
		name: "Mount Boar",
		"ⵠΔ": ⵠ.ᐃᐃⵠΔⲆⵠᐃ,
		"ⲆΔⵠⲆ": ⲆⲆⵠⲆ,
		"ᐃΔᐃΔ": ⲆᐃⲆ
	};
	ΔⵠΔⲆ[Ⲇᐃ.ᐃᐃⵠⵠᐃ] = {
		name: "Mount King Crab",
		"ⵠΔ": ⵠ.ᐃⲆⲆᐃⲆᐃⵠ,
		"ⲆΔⵠⲆ": ⲆᐃⲆ,
		"ᐃΔᐃΔ": 0
	};
	const ⲆΔᐃΔ = ⵠⵠⵠΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠᐃⲆΔⲆ] = {
		name: "Mount Baby Dragon",
		"ⵠΔ": ⵠ.ΔⵠΔΔᐃⵠᐃ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	const ⲆΔⵠᐃΔ = ΔᐃΔⵠ;
	const ᐃⲆⵠΔⲆᐃⲆⲆⵠ = ᐃᐃᐃᐃᐃΔⲆ;
	const ΔΔⲆⲆ = ⵠⲆᐃ;
	const ⵠⲆⵠΔⵠᐃᐃ = ⲆΔⲆΔⵠ;
	const ⲆΔΔⵠⵠ = ᐃⲆⵠⵠᐃ;
	const ⵠⲆⲆΔᐃⲆⵠ = ⵠΔⲆⵠⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆΔᐃⲆΔ] = {
		name: "Mount Baby Lava",
		"ⵠΔ": ⵠ.ⵠΔᐃⲆⲆΔΔ,
		"ⲆΔⵠⲆ": 0,
		"ᐃΔᐃΔ": 0
	};
	ΔⵠΔⲆ[Ⲇᐃ.ΔⲆⵠΔᐃ] = {
		name: "Mount Hawk",
		"ⵠΔ": ⵠ.ᐃᐃⵠⵠᐃⲆⵠ,
		"ⲆΔⵠⲆ": ᐃΔΔ,
		"ᐃΔᐃΔ": 0
	};
	const ΔⲆᐃΔΔⵠⵠΔΔ = ᐃᐃᐃⲆΔᐃΔ;
	const ᐃᐃΔΔΔΔΔ = ΔᐃⵠⲆᐃΔΔ;
	ΔⵠΔⲆ[Ⲇᐃ.ⵠⲆⲆΔᐃ] = {
		name: "Plane",
		"ⵠΔ": ⵠ.ⲆᐃⵠΔΔⲆᐃ,
		"ⲆΔⵠⲆ": ⲆΔⵠΔ,
		"ᐃΔᐃΔ": 0
	};
	const ᐃᐃᐃᐃ = ⲆⲆⵠᐃ;
	ΔⵠΔⲆ[Ⲇᐃ.ⲆᐃΔᐃΔ] = {
		name: "Pitchfork 2",
		"ⵠΔ": ⵠ.ⵠⲆᐃᐃⵠᐃᐃ,
		"ⲆΔⵠⲆ": ΔΔⲆⲆ,
		"ᐃΔᐃΔ": 0
	};
	const ⵠⵠⵠⲆᐃ = ⵠΔⲆΔⵠ;
	const ᐃᐃⵠⲆⲆⲆⲆ = ⲆⲆᐃΔⵠΔⲆ;
	ΔⵠΔⲆ[Ⲇᐃ.ᐃΔⲆΔⵠ] = {
		name: "Baby Mammoth",
		"ⵠΔ": ⵠ.ⲆᐃⵠⲆᐃᐃⲆ,
		"ⲆΔⵠⲆ": ΔΔⲆⲆ,
		"ᐃΔᐃΔ": ⵠⲆⵠ
	};
	const ΔᐃᐃⲆⲆⵠⲆ = ⵠΔᐃⲆⵠ;
	const ΔΔⲆⲆⵠ = ⲆΔⲆⲆⵠ;
	const ⲆᐃⵠⲆΔΔⵠ = ΔⲆⵠᐃΔⲆⲆ;
	var ᐃⲆΔᐃΔⲆᐃ = undefined;
	var ΔⵠΔⲆΔ = [{
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 25],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 5]
		],
		w: ΔᐃΔ,
		f: ⵠⲆⵠ,
		"ᐃΔⲆ": Δⵠⵠ,
		e: ⲆᐃⲆ,
		id: ⲆΔⵠ.ⲆⵠⲆⲆᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⵠⲆⲆᐃ,
		time: ⲆⵠⲆ / ⲆΔⲆⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⲆⵠⲆⲆᐃ, 1],
			[Ⲇᐃ.ᐃⲆΔⲆ, 35],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 10]
		],
		w: ᐃⲆⵠΔ,
		f: 0,
		"ᐃΔⲆ": ⵠⲆⵠ,
		e: 0,
		id: ⲆΔⵠ.ᐃᐃⲆΔᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃᐃⲆΔᐃ,
		time: ΔΔⲆΔ / 5,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 150],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 50],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 15]
		],
		w: 1,
		f: ⵠᐃΔ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.Δⵠⵠⵠⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.Δⵠⵠⵠⵠ,
		time: ⵠΔΔ / ᐃᐃⵠⵠⲆⲆⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 20],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 10]
		],
		w: ⲆⲆⵠⲆ,
		f: ⲆΔⵠΔ,
		"ᐃΔⲆ": ᐃⲆⵠΔ,
		e: ᐃΔΔ,
		id: ⲆΔⵠ.ⵠⵠᐃⲆⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⵠᐃⲆⵠ,
		time: .16666666666666666,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, ⲆᐃⲆⲆᐃ]
		],
		w: 0,
		f: ⵠⲆᐃ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆΔⲆⵠΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆΔⲆⵠΔ,
		time: ⵠΔᐃ / 3,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⲆΔⲆⵠΔ, 1],
			[Ⲇᐃ.ᐃⲆΔⲆ, 50],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 15]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ᐃⲆⵠΔ,
		id: ⲆΔⵠ.ᐃⲆΔⵠᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⲆΔⵠᐃ,
		time: ⲆΔⲆⵠ / ⲆΔΔⲆⵠ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 40],
			[Ⲇᐃ.ᐃⵠⵠᐃ, ⲆⲆᐃⵠⲆ],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 30],
			[Ⲇᐃ.ᐃⲆΔⵠᐃ, ΔΔⲆΔ]
		],
		w: 1,
		f: ᐃⲆⵠΔ,
		"ᐃΔⲆ": ᐃΔΔ,
		e: 0,
		id: ⲆΔⵠ.Ⲇⵠᐃᐃᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.Ⲇⵠᐃᐃᐃ,
		time: ⵠΔᐃ / 12,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆᐃᐃ, ΔⵠⵠᐃᐃⵠΔ],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 50],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 80],
			[Ⲇᐃ.Ⲇⵠᐃᐃᐃ, 1]
		],
		w: Δᐃᐃ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⵠᐃⲆⲆᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠᐃⲆⲆᐃ,
		time: ⵠⵠᐃ / 20,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆᐃᐃ, 40],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 60],
			[Ⲇᐃ.ᐃΔⲆᐃ, 30],
			[Ⲇᐃ.ⵠᐃⲆⲆᐃ, 1]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ⵠⲆⵠ,
		e: ⵠᐃΔ,
		id: ⲆΔⵠ.ⲆᐃΔⵠⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆᐃΔⵠⲆ,
		time: .016666666666666666,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃΔⲆᐃ, 30],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 40],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 30],
			[Ⲇᐃ.ⲆᐃΔⵠⲆ, ⲆⵠΔⲆ]
		],
		w: ⵠⵠᐃ,
		f: ⵠⲆⵠ,
		"ᐃΔⲆ": 0,
		e: ᐃⲆⵠΔ,
		id: ⲆΔⵠ.ΔⵠᐃᐃⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⵠᐃᐃⲆ,
		time: ᐃⵠⵠ / 90,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 90],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 50]
		],
		w: ⵠΔⲆ,
		f: ⵠᐃΔ,
		"ᐃΔⲆ": ᐃΔΔ,
		e: ⵠⲆⵠ,
		id: ⲆΔⵠ.ΔΔΔⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔΔⲆⲆ,
		time: ⲆⵠⲆ / 10,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 160],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 120],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 80],
			[Ⲇᐃ.ΔΔΔⲆⲆ, ⵠΔⲆ]
		],
		w: ᐃⲆΔ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆᐃᐃⵠⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆᐃᐃⵠⲆ,
		time: ΔⵠⲆ / 15,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆᐃᐃ, 80],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 200],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 150],
			[Ⲇᐃ.ⲆᐃᐃⵠⲆ, 1]
		],
		w: 1,
		f: ΔᐃΔ,
		"ᐃΔⲆ": ᐃΔΔ,
		e: 0,
		id: ⲆΔⵠ.ⵠᐃΔΔᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠᐃΔΔᐃ,
		time: 1 / ⲆᐃⵠⲆᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆᐃᐃ, 160],
			[Ⲇᐃ.ᐃΔⲆᐃ, 60],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 250],
			[Ⲇᐃ.ⵠᐃΔΔᐃ, ᐃⲆΔ]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ⵠⲆᐃ,
		e: ΔΔⲆⲆ,
		id: ⲆΔⵠ.ⵠΔⲆⵠⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠΔⲆⵠⵠ,
		time: ᐃⵠⵠ / 60,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃΔⲆᐃ, 160],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 60],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 250],
			[Ⲇᐃ.ⵠΔⲆⵠⵠ, ᐃⲆΔ]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ΔΔⲆⲆ,
		e: ᐃΔΔ,
		id: ⲆΔⵠ.ⵠΔⵠⵠΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠΔⵠⵠΔ,
		time: 1 / 90,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠΔⵠⵠΔ, ΔΔⲆΔ],
			[Ⲇᐃ.ΔΔⲆⲆᐃ, ⵠΔᐃ],
			[Ⲇᐃ.ⵠⵠⵠΔΔ, 1],
			[Ⲇᐃ.ΔⵠⵠᐃⲆ, ⵠᐃᐃⵠⵠ],
			[Ⲇᐃ.ᐃΔⲆᐃ, ᐃⵠΔᐃⵠⲆⵠ]
		],
		w: 1,
		f: ΔΔⲆΔ,
		"ᐃΔⲆ": Δⵠⵠ,
		e: 0,
		id: ⲆΔⵠ.ⲆⵠⲆΔΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⵠⲆΔΔ,
		time: ᐃⲆΔ / 120,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 30],
			[Ⲇᐃ.ᐃⵠᐃᐃ, ⵠᐃⵠΔΔ]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⲆᐃⲆ,
		id: ⲆΔⵠ.ⵠⲆΔⵠᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⲆΔⵠᐃ,
		time: 1 / Δᐃⵠᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆΔⵠᐃ, 1],
			[Ⲇᐃ.ᐃⵠⵠᐃ, ᐃⵠⲆᐃΔ],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 30],
			[Ⲇᐃ.ᐃⲆΔⲆ, 40]
		],
		w: 1,
		f: ⵠⲆᐃ,
		"ᐃΔⲆ": ⵠⲆⵠ,
		e: 0,
		id: ⲆΔⵠ.ⵠⲆⵠⵠᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⲆⵠⵠᐃ,
		time: ⵠⵠⵠΔ / ⵠⵠⲆᐃᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆⵠⵠᐃ, ⵠΔΔ],
			[Ⲇᐃ.ⵠⲆᐃᐃ, ⲆⲆᐃⵠⲆ],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 50],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 80]
		],
		w: 1,
		f: ⵠⵠΔᐃ,
		"ᐃΔⲆ": 0,
		e: ⵠⲆᐃ,
		id: ⲆΔⵠ.ⵠᐃΔⵠⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠᐃΔⵠⵠ,
		time: 1 / ᐃΔⲆΔᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠᐃΔⵠⵠ, 1],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 60],
			[Ⲇᐃ.ᐃΔⲆᐃ, 30],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 40]
		],
		w: ᐃΔⵠΔ,
		f: ⵠⲆⵠ,
		"ᐃΔⲆ": 0,
		e: ⲆᐃⲆ,
		id: ⲆΔⵠ.ⵠⲆΔᐃⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⲆΔᐃⲆ,
		time: .025,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 50]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⲆᐃⲆ,
		id: ⲆΔⵠ.ⵠⵠⲆⲆΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⵠⲆⲆΔ,
		time: ΔⲆΔᐃ / ⵠⵠΔⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⵠⲆⲆΔ, 1]
		],
		w: 0,
		f: ⵠᐃΔ,
		"ᐃΔⲆ": Δᐃᐃ,
		e: ΔᐃΔ,
		id: ⲆΔⵠ.ⲆⵠⲆᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⵠⲆᐃΔ,
		time: ⵠΔᐃ / 5,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, ⵠᐃⵠⲆⵠ],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 50]
		],
		w: ⵠΔᐃ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆⵠΔᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⵠΔᐃΔ,
		time: .1,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⲆⵠΔᐃΔ, 1],
			[Ⲇᐃ.ᐃᐃⵠᐃⲆᐃᐃ, 1]
		],
		w: ᐃⵠⵠ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆᐃΔᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆᐃΔᐃΔ,
		time: 1 / 60,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⲆΔΔᐃᐃ, ᐃᐃᐃΔⵠ],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, 4],
			[Ⲇᐃ.ⵠⲆⲆⲆⵠ, ΔⵠⲆᐃ]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⵠᐃΔ,
		id: ⲆΔⵠ.Δⵠᐃᐃⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.Δⵠᐃᐃⵠ,
		time: ᐃΔⵠΔ / 15,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 40]
		],
		w: 0,
		f: ΔΔⲆⲆ,
		"ᐃΔⲆ": ᐃΔΔ,
		e: ⲆᐃⲆ,
		id: ⲆΔⵠ.ΔᐃⵠᐃⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔᐃⵠᐃⲆ,
		time: .2,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ΔᐃⵠᐃⲆ, 1],
			[Ⲇᐃ.ᐃⲆΔⲆ, 60],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 10]
		],
		w: 1,
		f: Δⵠⵠ,
		"ᐃΔⲆ": ᐃΔΔ,
		e: 0,
		id: ⲆΔⵠ.ⵠᐃⵠⵠΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠᐃⵠⵠΔ,
		time: ⲆⵠⲆ / ΔⲆⲆΔΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 80],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 30],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 30],
			[Ⲇᐃ.ⵠᐃⵠⵠΔ, 1]
		],
		w: 1,
		f: ΔΔⲆⲆ,
		"ᐃΔⲆ": ΔΔⲆⲆ,
		e: 0,
		id: ⲆΔⵠ.ⵠΔⲆⲆᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠΔⲆⲆᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ,
		time: .05
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 200],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 40],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 60],
			[Ⲇᐃ.ⵠΔⲆⲆᐃ, ⲆΔᐃΔ]
		],
		w: 1,
		f: ΔΔⲆⲆ,
		"ᐃΔⲆ": ⵠᐃΔ,
		e: 0,
		id: ⲆΔⵠ.ᐃⵠᐃⵠⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠᐃⵠⲆ,
		time: .03333333333333333,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃΔⲆᐃ, 40],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 80],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 90],
			[Ⲇᐃ.ᐃⵠᐃⵠⲆ, 1]
		],
		w: ⵠⵠᐃ,
		f: ΔᐃΔ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⵠⲆⲆⲆΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⲆⲆⲆΔ,
		time: 1 / 60,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 40],
			[Ⲇᐃ.ᐃΔⲆᐃ, 80],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 90],
			[Ⲇᐃ.ⵠⲆⲆⲆΔ, ⵠΔᐃ]
		],
		w: 1,
		f: ΔᐃΔ,
		"ᐃΔⲆ": ⵠⲆⵠ,
		e: ⵠⲆᐃ,
		id: ⲆΔⵠ.ᐃⲆⵠᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⲆⵠᐃΔ,
		time: .011111111111111112,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, ⵠΔⲆΔⵠ],
			[Ⲇᐃ.ΔᐃⲆᐃⲆ, ⲆⵠΔⲆ],
			[Ⲇᐃ.ᐃΔⲆᐃ, ⵠⲆΔᐃΔ],
			[Ⲇᐃ.ᐃᐃᐃⵠΔ, ΔⵠᐃⲆ]
		],
		w: ΔⵠⲆ,
		f: 1,
		"ᐃΔⲆ": 1,
		e: ΔΔⲆⲆ,
		id: ⲆΔⵠ.ⵠᐃⵠⲆᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠᐃⵠⲆᐃ,
		time: ⵠⵠⵠΔ / 120,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠᐃⵠⲆᐃ, ΔⵠⲆ],
			[Ⲇᐃ.ⵠⵠⵠⵠⲆ, ΔⵠⲆ],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 100],
			[Ⲇᐃ.ⵠⲆᐃΔⵠ, 2]
		],
		w: ⲆⵠΔⲆ,
		f: ΔΔⲆΔ,
		"ᐃΔⲆ": 1,
		e: 0,
		id: ⲆΔⵠ.ΔⵠᐃⵠΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⵠᐃⵠΔ,
		time: .005,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ΔᐃⵠᐃⲆ, ⵠⵠⵠΔ],
			[Ⲇᐃ.ᐃΔⲆᐃᐃ, ⵠΔΔΔ],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, ΔⲆⵠΔΔ]
		],
		w: 1,
		f: ᐃⲆⵠΔ,
		"ᐃΔⲆ": 0,
		e: ⲆᐃⲆ,
		id: ⲆΔⵠ.ᐃⵠᐃᐃⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠᐃᐃⲆ,
		time: ⵠΔΔ / 30,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 30]
		],
		w: 0,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ΔΔⲆⲆ,
		id: ⲆΔⵠ.ΔᐃΔΔΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔᐃΔΔΔ,
		time: .2,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 50],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 25],
			[Ⲇᐃ.ΔᐃΔΔΔ, 1]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ⵠⲆⵠ,
		e: ⵠᐃΔⲆ,
		id: ⲆΔⵠ.ⵠⲆᐃⲆⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⲆᐃⲆⵠ,
		time: 1 / ᐃⲆᐃⲆᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 60],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 40],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 50],
			[Ⲇᐃ.ⵠⲆᐃⲆⵠ, ᐃΔⵠΔ]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆⲆⲆΔΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⲆⲆΔΔ,
		time: ⲆΔⲆⵠ / 20,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆᐃᐃ, 40],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 60],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 80],
			[Ⲇᐃ.ⲆⲆⲆΔΔ, 1]
		],
		w: ᐃⲆΔ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ᐃΔᐃᐃⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃΔᐃᐃⲆ,
		time: ΔΔⲆΔ / 30,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆᐃᐃ, 60],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 100],
			[Ⲇᐃ.ᐃΔⲆᐃ, 40],
			[Ⲇᐃ.ᐃΔᐃᐃⲆ, 1]
		],
		w: ᐃΔⵠΔ,
		f: ΔΔⲆⲆ,
		"ᐃΔⲆ": 0,
		e: Δⵠⵠ,
		id: ⲆΔⵠ.ⵠΔⵠⵠᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠΔⵠⵠᐃ,
		time: ⵠΔΔ / 60,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆᐃᐃ, 100],
			[Ⲇᐃ.ᐃΔⲆᐃ, 80],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 40],
			[Ⲇᐃ.ⵠΔⵠⵠᐃ, ᐃⲆⲆ]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⵠⲆⵠ,
		id: ⲆΔⵠ.ᐃⲆΔⵠⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⲆΔⵠⵠ,
		time: .011111111111111112,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⲆⲆⲆᐃⵠ, 3]
		],
		w: ⲆΔⵠΔ,
		f: 1,
		"ᐃΔⲆ": 0,
		e: ⵠⵠΔᐃ,
		id: ⲆΔⵠ.ⲆΔΔΔⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆΔΔΔⵠ,
		time: ⵠΔⲆ / ᐃᐃⲆΔΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⲆᐃΔᐃᐃ, ᐃⵠⲆⵠ]
		],
		w: 0,
		f: ⵠΔΔ,
		"ᐃΔⲆ": ᐃΔΔ,
		e: 0,
		id: ⲆΔⵠ.ΔΔᐃⲆⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔᐃⲆⵠ,
		time: ⵠⵠⵠΔ / ⲆΔⵠᐃⵠ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ΔⲆⵠᐃᐃ, 8]
		],
		w: ⵠⵠΔᐃ,
		f: 1,
		"ᐃΔⲆ": 0,
		e: ΔᐃΔ,
		id: ⲆΔⵠ.Ⲇⵠⵠⵠⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.Ⲇⵠⵠⵠⵠ,
		time: 1 / ⵠΔΔΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ΔⵠᐃⲆΔ, ⲆΔⵠΔⲆⵠᐃ]
		],
		w: ᐃΔΔ,
		f: ᐃⲆΔ,
		"ᐃΔⲆ": ᐃⲆⵠΔ,
		e: 0,
		id: ⲆΔⵠ.ᐃᐃⲆⲆᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃᐃⲆⲆᐃ,
		time: ΔⵠⲆ / ⲆΔⵠᐃⵠ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠΔⵠΔⵠ, 8]
		],
		w: 0,
		f: ⲆΔⲆⵠ,
		"ᐃΔⲆ": ⵠⵠΔᐃ,
		e: 0,
		id: ⲆΔⵠ.ᐃⵠΔᐃⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠΔᐃⲆ,
		time: .2,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆⲆ, ⲆⲆΔᐃΔ]
		],
		w: 0,
		f: 1,
		"ᐃΔⲆ": Δⵠⵠ,
		e: ᐃΔΔ,
		id: ⲆΔⵠ.ᐃⲆⲆᐃⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⲆⲆᐃⵠ,
		time: 1 / ⲆΔΔΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠᐃⲆΔᐃ, ⵠⲆΔⲆᐃ]
		],
		w: ⵠᐃΔ,
		f: ᐃⲆΔ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆᐃⲆⵠᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆᐃⲆⵠᐃ,
		time: ⵠΔΔ / ᐃᐃⲆΔΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃᐃⵠᐃᐃ, ⵠⲆᐃᐃⵠⵠᐃ]
		],
		w: Δⵠⵠ,
		f: 1,
		"ᐃΔⲆ": ᐃΔΔ,
		e: 0,
		id: ⲆΔⵠ.ΔⵠⲆᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⵠⲆᐃΔ,
		time: .2,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⲆⲆⲆⵠⵠ, 16]
		],
		w: 0,
		f: 1,
		"ᐃΔⲆ": 0,
		e: ⲆⲆⵠⲆ,
		id: ⲆΔⵠ.ᐃᐃⵠⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃᐃⵠⲆⲆ,
		time: 1 / ⲆΔⲆⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠⵠᐃⵠΔ, 1]
		],
		w: 0,
		f: 1,
		"ᐃΔⲆ": 0,
		e: ΔΔⲆⲆ,
		id: ⲆΔⵠ.ΔΔᐃΔⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔᐃΔⵠ,
		time: 1 / 5,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃᐃⵠⲆᐃ, ⵠⵠⵠΔ]
		],
		w: ⵠⲆᐃ,
		f: 1,
		"ᐃΔⲆ": 0,
		e: ⵠⲆᐃ,
		id: ⲆΔⵠ.ᐃⵠⵠᐃⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠⵠᐃⲆ,
		time: ⲆΔⲆⵠ / ΔⵠᐃⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠΔⲆⲆⵠ, 3]
		],
		w: ⲆΔⵠΔ,
		f: ⲆΔⲆⵠ,
		"ᐃΔⲆ": ⵠᐃΔⲆ,
		e: ⲆΔⵠΔ,
		id: ⲆΔⵠ.ᐃⵠⲆᐃⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠⲆᐃⵠ,
		time: ⲆΔᐃ / Ⲇⵠᐃᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠΔⲆⲆⵠ, ΔⵠⲆⲆ],
			[Ⲇᐃ.ⲆⲆⲆᐃⵠ, 1]
		],
		w: 0,
		f: 1,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ΔᐃᐃᐃⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔᐃᐃᐃⲆ,
		time: ⲆΔᐃΔ / 3,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠΔⲆⲆⵠ, ΔΔⵠΔ],
			[Ⲇᐃ.ⲆⲆⲆᐃⵠ, 2],
			[Ⲇᐃ.ᐃᐃᐃⵠⲆ, ᐃΔⲆⵠ]
		],
		w: ⲆⲆⵠⲆ,
		f: 1,
		"ᐃΔⲆ": 0,
		e: ᐃΔΔ,
		id: ⲆΔⵠ.ΔᐃⲆΔⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔᐃⲆΔⵠ,
		time: .2,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, 2]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⵠⵠΔᐃ,
		id: ⲆΔⵠ.ⲆⲆΔΔᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⲆΔΔᐃ,
		time: 1 / ⲆΔΔΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 20]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⵠⲆⵠ,
		id: ⲆΔⵠ.ⲆᐃⲆⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆᐃⲆⲆⲆ,
		time: ⲆΔⲆⵠ / 5,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ⲆᐃⲆⲆⲆ, 1],
			[Ⲇᐃ.ᐃⵠᐃᐃ, ΔᐃᐃΔⵠⵠⵠ]
		],
		w: 1,
		f: Δⵠⵠ,
		"ᐃΔⲆ": ⲆΔⵠΔ,
		e: ᐃⲆⵠΔ,
		id: ⲆΔⵠ.ΔⲆⵠΔⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⲆⵠΔⵠ,
		time: .2,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ΔⲆⵠΔⵠ, ⲆΔᐃ],
			[Ⲇᐃ.ᐃⵠⵠᐃ, ⲆⲆⵠⲆⵠⲆⲆ]
		],
		w: ⲆⵠⲆ,
		f: ⲆΔⵠΔ,
		"ᐃΔⲆ": ⲆⲆⵠⲆ,
		e: ⵠⲆᐃ,
		id: ⲆΔⵠ.ⵠⲆⵠⵠΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⲆⵠⵠΔ,
		time: ΔΔⲆΔ / ΔⲆΔᐃⵠ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆⵠⵠΔ, ᐃⲆⲆ],
			[Ⲇᐃ.ⵠⲆᐃᐃ, ΔᐃⲆⲆΔⲆᐃ]
		],
		w: 1,
		f: ⵠⵠΔᐃ,
		"ᐃΔⲆ": ⵠⲆⵠ,
		e: ⵠⲆᐃ,
		id: ⲆΔⵠ.ⲆⵠⵠⲆΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⵠⵠⲆΔ,
		time: ⲆⵠⲆ / ᐃᐃⲆΔΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ⲆⵠⵠⲆΔ, ΔⲆΔᐃ],
			[Ⲇᐃ.ᐃΔⲆᐃ, 8]
		],
		w: 1,
		f: ⵠⲆⵠ,
		"ᐃΔⲆ": ⲆΔⵠΔ,
		e: ᐃΔΔ,
		id: ⲆΔⵠ.ᐃᐃΔᐃᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃᐃΔᐃᐃ,
		time: 1 / ⵠΔΔΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ᐃᐃΔᐃᐃ, 1],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, ᐃΔⵠΔᐃ]
		],
		w: 1,
		f: ΔᐃΔ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆᐃⵠᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆᐃⵠᐃΔ,
		time: ⲆΔⲆⵠ / ⲆΔΔΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 30]
		],
		w: ΔΔⲆΔ,
		f: ⵠᐃΔ,
		"ᐃΔⲆ": ⲆᐃⲆ,
		e: 0,
		id: ⲆΔⵠ.ⵠΔⵠⲆⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠΔⵠⲆⵠ,
		time: ᐃⵠⵠ / 8,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ⵠΔⵠⲆⵠ, ⲆΔⲆⵠ],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 27]
		],
		w: 1,
		f: Δⵠⵠ,
		"ᐃΔⲆ": ⵠᐃΔⲆ,
		e: ᐃΔΔ,
		id: ⲆΔⵠ.ΔⵠᐃΔΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⵠᐃΔΔ,
		time: ᐃⲆΔ / 8,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ΔⵠᐃΔΔ, ⲆΔᐃ],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 24]
		],
		w: 1,
		f: ⵠⲆⵠ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ᐃΔⲆᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃΔⲆᐃΔ,
		time: 1 / 8,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ᐃΔⲆᐃΔ, 1],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 21]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ΔᐃΔ,
		e: 0,
		id: ⲆΔⵠ.ⵠⵠᐃⵠⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⵠᐃⵠⲆ,
		time: 1 / ⲆᐃⵠᐃⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ⵠⵠᐃⵠⲆ, ⲆⵠⲆ],
			[Ⲇᐃ.ᐃΔⲆᐃ, 18]
		],
		w: ⲆⵠΔⲆ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⲆΔⵠΔ,
		id: ⲆΔⵠ.ᐃⵠᐃⲆΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠᐃⲆΔ,
		time: 1 / ⲆᐃⲆΔⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠᐃⲆΔ, 1],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, ⲆⲆᐃⵠΔ]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⲆⲆⵠⲆ,
		id: ⲆΔⵠ.ΔᐃΔⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔᐃΔⲆⲆ,
		time: .125,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ⲆᐃⲆⲆⲆ, 1],
			[Ⲇᐃ.ᐃⲆΔⲆ, 40],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 30]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ΔᐃΔ,
		e: 0,
		id: ⲆΔⵠ.ᐃⵠᐃⲆᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠᐃⲆᐃ,
		time: ⵠΔΔ / 20,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ΔⲆⵠΔⵠ, 1],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 70]
		],
		w: ⵠΔⲆ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⵠⵠΔᐃᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⵠΔᐃᐃ,
		time: 1 / ⵠΔⲆΔⵠ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆⵠⵠΔ, ᐃⵠⵠ],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 40],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 30]
		],
		w: 1,
		f: Δⵠⵠ,
		"ᐃΔⲆ": ⵠᐃΔ,
		e: ᐃⲆⵠΔ,
		id: ⲆΔⵠ.ΔᐃΔⵠⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔᐃΔⵠⵠ,
		time: ⲆⵠΔⲆ / 20,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ⲆⵠⵠⲆΔ, 1],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 40],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 30]
		],
		w: 1,
		f: ⲆᐃⲆ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆⲆΔᐃᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⲆΔᐃᐃ,
		time: ⵠΔᐃ / 20,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ᐃᐃΔᐃᐃ, Δᐃᐃ],
			[Ⲇᐃ.ᐃΔⲆᐃ, 40],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 30]
		],
		w: ᐃⵠⵠ,
		f: 0,
		"ᐃΔⲆ": ⲆᐃⲆ,
		e: ᐃⲆⵠΔ,
		id: ⲆΔⵠ.ⵠᐃΔΔⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠᐃΔΔⵠ,
		time: .05,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ⲆᐃⵠᐃΔ, 1],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 40],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 30]
		],
		w: ⵠΔΔ,
		f: 0,
		"ᐃΔⲆ": ⵠⲆᐃ,
		e: ⵠᐃΔ,
		id: ⲆΔⵠ.ⵠⲆⵠΔᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⲆⵠΔᐃ,
		time: 1 / ⲆⲆᐃⵠⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ⵠΔⵠⲆⵠ, 1],
			[Ⲇᐃ.ᐃⲆΔⲆ, 80],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 60]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ⵠⲆᐃ,
		e: ⲆⲆⵠⲆ,
		id: ⲆΔⵠ.ⲆⲆᐃⵠⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⲆᐃⵠⵠ,
		time: ⵠΔΔ / 20,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ΔⵠᐃΔΔ, 1],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 140]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ⲆⲆⵠⲆ,
		e: 0,
		id: ⲆΔⵠ.ⲆΔⵠⲆⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆΔⵠⲆⵠ,
		time: ᐃⲆⲆ / ᐃⵠⲆᐃΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ᐃΔⲆᐃΔ, 1],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 80],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 60]
		],
		w: ⲆΔⲆⵠ,
		f: ⲆⲆⵠⲆ,
		"ᐃΔⲆ": ᐃΔΔ,
		e: 0,
		id: ⲆΔⵠ.ᐃⲆⵠΔⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⲆⵠΔⲆ,
		time: ΔⵠⲆ / ⵠⵠⵠⲆᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ⵠⵠᐃⵠⲆ, 1],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 80],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 60]
		],
		w: ᐃΔⵠΔ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⵠⲆⵠ,
		id: ⲆΔⵠ.ⵠΔΔⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠΔΔⲆⲆ,
		time: 1 / ΔⵠⵠᐃᐃⵠΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠᐃⲆΔ, ⵠΔᐃ],
			[Ⲇᐃ.ᐃΔⲆᐃ, 80],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 60]
		],
		w: ᐃⲆΔ,
		f: ⵠⲆⵠ,
		"ᐃΔⲆ": ⲆⲆⵠⲆ,
		e: ⵠᐃΔⲆ,
		id: ⲆΔⵠ.ΔⵠⵠⲆΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⵠⵠⲆΔ,
		time: ΔⲆΔᐃ / 20,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ΔᐃΔⲆⲆ, 1],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 80],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 60]
		],
		w: ᐃⲆⲆ,
		f: 0,
		"ᐃΔⲆ": ΔΔⲆⲆ,
		e: 0,
		id: ⲆΔⵠ.ΔΔΔⲆᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔΔⲆᐃ,
		time: 1 / ᐃᐃⵠⵠⲆⲆⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 25],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 2]
		],
		w: ⵠΔΔ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ᐃⵠΔⵠΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠΔⵠΔ,
		time: ⵠΔⲆ / ΔΔⵠΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⲆΔΔᐃᐃ, 1],
			[Ⲇᐃ.ΔⲆⵠΔⲆ, ΔⲆΔᐃ],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, ⲆⲆΔΔ]
		],
		w: 1,
		f: ᐃⲆⵠΔ,
		"ᐃΔⲆ": ᐃΔΔ,
		e: ΔΔⲆⲆ,
		id: ⲆΔⵠ.ΔⵠⵠⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⵠⵠⲆⲆ,
		time: 1 / 5,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⲆΔΔᐃᐃ, 5],
			[Ⲇᐃ.ⵠⵠⲆΔΔ, ⲆΔⲆΔᐃ],
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, ΔΔⵠΔ],
			[Ⲇᐃ.ΔⲆⵠΔⲆ, 5]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ⵠⲆᐃ,
		e: ⲆⲆⵠⲆ,
		id: ⲆΔⵠ.ᐃΔᐃΔΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃΔᐃΔΔ,
		time: 1 / 30,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃᐃΔᐃⲆⵠⲆ, 1],
			[Ⲇᐃ.ᐃⵠⲆⲆΔ, ⲆᐃⲆⵠⲆ],
			[Ⲇᐃ.ⲆⵠᐃⲆΔ, ⵠⲆΔⲆᐃ],
			[Ⲇᐃ.ⵠⵠⲆΔΔ, 8],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, ᐃΔⵠⲆⵠ]
		],
		w: 1,
		f: ΔΔⲆⲆ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⵠΔᐃⵠⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠΔᐃⵠⵠ,
		time: ⲆΔᐃ / 60,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ΔⲆⵠΔⲆ, 1],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, 2]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ⵠᐃΔⲆ,
		e: 0,
		id: ⲆΔⵠ.ⲆⲆⵠⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⲆⵠⲆⲆ,
		time: 1 / 5,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⲆⲆⵠⲆⲆ, 1],
			[Ⲇᐃ.ⵠⲆⲆⲆⵠ, ⵠⵠⲆⵠ],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, 4]
		],
		w: ᐃⲆΔ,
		f: Δⵠⵠ,
		"ᐃΔⲆ": Δⵠⵠ,
		e: 0,
		id: ⲆΔⵠ.ᐃⵠⲆΔᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠⲆΔᐃ,
		time: ⲆΔᐃΔ / 12,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠⲆΔᐃ, 1],
			[Ⲇᐃ.ⲆⲆⲆᐃΔ, ⲆΔⲆⲆ],
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, 4]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⵠᐃΔ,
		id: ⲆΔⵠ.ⲆⲆᐃᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⲆᐃᐃΔ,
		time: ⵠΔⲆ / 30,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⲆⲆᐃᐃΔ, 1],
			[Ⲇᐃ.ⲆⲆⲆᐃΔ, ⲆΔΔΔ],
			[Ⲇᐃ.ᐃⵠᐃᐃΔ, ⵠⵠⲆᐃᐃ],
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, 4]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": Δⵠⵠ,
		e: 0,
		id: ⲆΔⵠ.ΔᐃⲆⲆᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔᐃⲆⲆᐃ,
		time: ⲆΔᐃ / 50,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 50]
		],
		w: 0,
		f: ᐃΔΔ,
		"ᐃΔⲆ": ⵠⵠΔᐃ,
		e: 0,
		id: ⲆΔⵠ.ᐃΔᐃΔⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃΔᐃΔⲆ,
		time: 1 / ⵠᐃᐃⵠᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠᐃᐃ, 75],
			[Ⲇᐃ.ᐃⲆΔⲆ, 75],
			[Ⲇᐃ.ᐃΔᐃΔⲆ, 1]
		],
		w: 1,
		f: ⵠᐃΔⲆ,
		"ᐃΔⲆ": 0,
		e: ⵠᐃΔ,
		id: ⲆΔⵠ.ᐃⲆⲆⵠΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⲆⲆⵠΔ,
		time: 1 / ⵠⲆΔΔⵠ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠᐃᐃ, 90],
			[Ⲇᐃ.ᐃⲆΔⲆ, 90],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 90],
			[Ⲇᐃ.ᐃⲆⲆⵠΔ, ⵠΔΔ]
		],
		w: ᐃⲆΔ,
		f: ⵠᐃΔⲆ,
		"ᐃΔⲆ": ⲆΔⵠΔ,
		e: ⵠⵠΔᐃ,
		id: ⲆΔⵠ.ⵠΔΔΔΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠΔΔΔΔ,
		time: ᐃⵠⵠ / ⵠⵠⵠⲆᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠᐃᐃ, 100],
			[Ⲇᐃ.ᐃⵠⵠᐃ, ᐃᐃⲆⵠΔ],
			[Ⲇᐃ.ⵠⲆᐃᐃ, ᐃⵠⲆⲆⲆ],
			[Ⲇᐃ.ⵠΔΔΔΔ, ⲆⵠΔⲆ]
		],
		w: 1,
		f: ⵠᐃΔ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆᐃⵠΔΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆᐃⵠΔΔ,
		time: .03333333333333333,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃΔⲆᐃ, 80],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 150],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 120],
			[Ⲇᐃ.ⲆᐃⵠΔΔ, 1]
		],
		w: 1,
		f: ΔΔⲆⲆ,
		"ᐃΔⲆ": 0,
		e: ΔΔⲆⲆ,
		id: ⲆΔⵠ.ΔⲆΔⲆⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⲆΔⲆⵠ,
		time: ΔⵠⲆ / 60,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 80],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 150],
			[Ⲇᐃ.ᐃΔⲆᐃ, 120],
			[Ⲇᐃ.ΔⲆΔⲆⵠ, ⲆΔᐃΔ]
		],
		w: 1,
		f: 1,
		"ᐃΔⲆ": ⵠᐃΔ,
		e: 0,
		id: ⲆΔⵠ.ⲆᐃΔΔⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆᐃΔΔⲆ,
		time: ΔΔⲆΔ / 90,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ΔⵠⵠᐃⲆ, Δⵠᐃᐃ],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 40],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, ⲆⵠⲆⲆⲆ]
		],
		w: ⵠΔᐃ,
		f: 0,
		"ᐃΔⲆ": ⵠⲆᐃ,
		e: 0,
		id: ⲆΔⵠ.ΔⵠⲆᐃⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⵠⲆᐃⲆ,
		time: .05,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ΔⵠⲆᐃⲆ, 1],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 80],
			[Ⲇᐃ.ⵠⵠⵠΔΔ, ᐃⲆⲆ],
			[Ⲇᐃ.ᐃΔⲆᐃ, 20]
		],
		w: ⲆⵠⲆ,
		f: ⵠᐃΔ,
		"ᐃΔⲆ": ⵠᐃΔ,
		e: ⵠⲆᐃ,
		id: ⲆΔⵠ.ΔⵠΔᐃⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⵠΔᐃⵠ,
		time: ⵠΔΔ / 90,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠΔΔⵠⲆ, 5],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 50],
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, 5]
		],
		w: 1,
		f: 1,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⵠᐃⵠΔⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠᐃⵠΔⲆ,
		time: 1 / ⲆᐃⵠⲆᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠᐃⵠΔⲆ, 1],
			[Ⲇᐃ.ⵠΔΔⵠⲆ, ⲆⵠΔΔⵠ],
			[Ⲇᐃ.ᐃΔⲆᐃ, 50]
		],
		w: 1,
		f: ⵠΔᐃ,
		"ᐃΔⲆ": ᐃΔΔ,
		e: ΔᐃΔ,
		id: ⲆΔⵠ.ⵠΔⲆᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠΔⲆᐃΔ,
		time: ΔⲆΔᐃ / 60,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠΔⲆᐃΔ, ᐃΔⵠΔ],
			[Ⲇᐃ.ⵠΔΔⵠⲆ, 15],
			[Ⲇᐃ.ᐃΔⲆᐃ, 50],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 50]
		],
		w: 1,
		f: 1,
		"ᐃΔⲆ": ΔᐃΔ,
		e: 0,
		id: ⲆΔⵠ.ⲆΔΔᐃⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆΔΔᐃⵠ,
		time: ⲆΔᐃ / 90,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, 4],
			[Ⲇᐃ.ΔⲆⵠᐃⲆ, ᐃΔⲆⵠ]
		],
		w: ⲆΔᐃΔ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⲆΔⵠΔ,
		id: ⲆΔⵠ.ⵠᐃⲆⲆΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠᐃⲆⲆΔ,
		time: ⵠⵠⵠΔ / 15,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠᐃⲆⲆΔ, ⲆΔᐃ],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, ᐃΔⲆⵠⵠ],
			[Ⲇᐃ.ΔⲆⵠᐃⲆ, 4],
			[Ⲇᐃ.ⲆⵠᐃⲆΔ, ᐃⵠᐃⵠⵠ],
			[Ⲇᐃ.ⵠⵠⲆΔΔ, ⲆΔⲆᐃΔ]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ΔⲆᐃⲆⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⲆᐃⲆⵠ,
		time: ⲆΔⲆⵠ / 150,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, ⲆⵠᐃΔᐃ],
			[Ⲇᐃ.ⵠⲆⲆⲆⵠ, 5]
		],
		w: ⵠⵠᐃ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⲆΔⵠΔ,
		id: ⲆΔⵠ.ⲆⲆⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⲆⲆⲆ,
		time: .06666666666666667,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, ⲆⵠⵠΔⵠ]
		],
		w: 0,
		f: 1,
		"ᐃΔⲆ": ΔᐃΔ,
		e: ⲆⲆⵠⲆ,
		id: ⲆΔⵠ.ⲆΔΔᐃᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆΔΔᐃᐃ,
		time: 1 / ᐃⵠᐃⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆᐃᐃ, ⲆⵠⲆ],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, 1]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ΔΔⲆⲆ,
		e: 0,
		id: ⲆΔⵠ.ᐃⵠΔⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠΔⲆⲆ,
		time: 1 / 3,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠⵠᐃ, ⲆΔⲆᐃⵠ]
		],
		w: ⵠΔΔ,
		f: ⵠⵠΔᐃ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ᐃⲆΔⵠⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⲆΔⵠⲆ,
		time: 1 / ⵠΔΔΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠⵠᐃ, 250]
		],
		w: ᐃⵠⵠ,
		f: ⲆⲆⵠⲆ,
		"ᐃΔⲆ": 0,
		e: Δⵠⵠ,
		id: ⲆΔⵠ.ⵠⵠⵠΔⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⵠⵠΔⲆ,
		time: ⲆⵠⲆ / 60,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 50]
		],
		w: ᐃⲆΔ,
		f: 0,
		"ᐃΔⲆ": Δⵠⵠ,
		e: 0,
		id: ⲆΔⵠ.ᐃΔΔⵠᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃΔΔⵠᐃ,
		time: ᐃⲆⲆ / ᐃᐃΔⵠⵠ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 15]
		],
		w: 1,
		f: ⵠⲆᐃ,
		"ᐃΔⲆ": 0,
		e: ⲆᐃⲆ,
		id: ⲆΔⵠ.ⲆΔⵠᐃᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆΔⵠᐃᐃ,
		time: .2,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 30]
		],
		w: ⵠΔⲆ,
		f: ΔᐃΔ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⵠΔⵠᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠΔⵠᐃΔ,
		time: ⲆΔᐃΔ / Δᐃⵠᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 120]
		],
		w: ⲆⵠΔⲆ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆᐃⲆΔᐃ,
		time: ᐃⲆΔ / ΔᐃⲆⲆⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, ᐃⵠⲆᐃΔ],
			[Ⲇᐃ.ⵠᐃΔⲆΔ, 15]
		],
		w: ⲆⵠΔⲆ,
		f: 0,
		"ᐃΔⲆ": ⲆΔⵠΔ,
		e: 0,
		id: ⲆΔⵠ.ΔΔⲆᐃⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔⲆᐃⲆ,
		time: .2,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⲆᐃᐃΔⵠ, 25]
		],
		w: ΔⲆΔᐃ,
		f: ⵠΔΔ,
		"ᐃΔⲆ": Δⵠⵠ,
		e: ⵠᐃΔ,
		id: ⲆΔⵠ.ΔⲆⵠⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⲆⵠⲆⲆ,
		time: ᐃⲆΔ / ⲆΔΔΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ΔⲆⵠⲆⲆ, 1]
		],
		w: ⲆᐃⲆ,
		f: 0,
		"ᐃΔⲆ": 1,
		e: 0,
		id: ⲆΔⵠ.ΔΔⲆⲆᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔⲆⲆᐃ,
		time: .2,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃᐃᐃⵠⲆ, 20],
			[Ⲇᐃ.ΔⲆⵠⲆⲆ, ⲆΔᐃ]
		],
		w: 0,
		f: ⵠⵠⵠΔ,
		"ᐃΔⲆ": ⲆΔⵠΔ,
		e: ⵠᐃΔ,
		id: ⲆΔⵠ.ⲆⲆⵠⲆⲆⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔⲆⲆᐃ,
		time: ᐃⵠⵠ / 10,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ΔⲆⵠⲆⲆ, ΔΔⲆΔ]
		],
		w: ⵠᐃΔⲆ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 1,
		id: ⲆΔⵠ.ᐃⵠΔᐃᐃᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔⲆⲆᐃ,
		time: ⲆⵠΔⲆ / 3,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 60],
			[Ⲇᐃ.ᐃⵠᐃᐃ, ⲆⵠⵠΔⵠ],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, 2]
		],
		w: 1,
		f: ⲆⲆⵠⲆ,
		"ᐃΔⲆ": 0,
		e: ⲆΔⵠΔ,
		id: ⲆΔⵠ.ᐃᐃᐃⵠᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃᐃᐃⵠᐃ,
		time: ⲆΔᐃ / ⲆΔⲆⲆⵠ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆᐃᐃ, 40],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 45]
		],
		w: 1,
		f: ᐃΔΔ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⵠΔⲆΔᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠΔⲆΔᐃ,
		time: .05,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠΔⲆΔᐃ, ⲆΔᐃ],
			[Ⲇᐃ.ΔᐃΔⵠΔ, 40],
			[Ⲇᐃ.ΔᐃⲆⲆΔ, 1]
		],
		w: 1,
		f: 1,
		"ᐃΔⲆ": 1,
		e: ⵠⲆᐃ,
		id: ⲆΔⵠ.ΔΔⵠⲆⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔⵠⲆⵠ,
		time: ⵠⵠⵠΔ / 200,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 50],
			[Ⲇᐃ.ᐃⵠᐃᐃ, ᐃᐃⲆⵠΔ]
		],
		w: ⵠΔΔ,
		f: ΔᐃΔ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆⵠΔⵠⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⵠΔⵠⵠ,
		time: .011111111111111112,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠᐃᐃ, 60],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 120]
		],
		w: ⲆⵠⲆ,
		f: ⲆⲆⵠⲆ,
		"ᐃΔⲆ": ⵠⲆⵠ,
		e: ΔᐃΔ,
		id: ⲆΔⵠ.ᐃⵠⵠΔⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠⵠΔⵠ,
		time: ᐃⲆⲆ / 90,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠⵠᐃ, 70],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 140]
		],
		w: ⵠΔΔ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⵠᐃΔ,
		id: ⲆΔⵠ.ᐃⵠⵠⵠΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠⵠⵠΔ,
		time: ᐃⵠⵠ / 90,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆᐃᐃ, 80],
			[Ⲇᐃ.ᐃΔⲆᐃ, 160]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ΔⲆᐃΔᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⲆᐃΔᐃ,
		time: ᐃΔⵠΔ / 90,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃΔⲆᐃ, 90],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 180]
		],
		w: ᐃⵠⵠ,
		f: ᐃΔΔ,
		"ᐃΔⲆ": ⲆᐃⲆ,
		e: 0,
		id: ⲆΔⵠ.ᐃⲆΔᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⲆΔᐃΔ,
		time: ⲆΔⲆⵠ / 90,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠᐃᐃ, 70]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ᐃⵠᐃᐃⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠᐃᐃⵠ,
		time: 1 / 10,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠᐃᐃ, 70],
			[Ⲇᐃ.ᐃⲆΔⲆ, 50]
		],
		w: ⲆΔᐃ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⵠⵠⵠⵠΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⵠⵠⵠΔ,
		time: ⵠΔᐃ / 10,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 40],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 40]
		],
		w: ᐃⲆΔ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆⲆᐃⲆᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⲆᐃⲆᐃ,
		time: 1 / ⲆΔⵠᐃⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠⲆᐃⵠ, ᐃⵠⵠ],
			[Ⲇᐃ.ΔΔᐃΔⵠ, ⵠΔⲆ]
		],
		w: 0,
		f: ⲆΔⵠΔ,
		"ᐃΔⲆ": ᐃΔΔ,
		e: ⵠⵠΔᐃ,
		id: ⲆΔⵠ.ⲆⲆΔⵠⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⲆΔⵠⵠ,
		time: 1 / 3,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, 30],
			[Ⲇᐃ.ⵠⲆⲆⵠᐃ, ⵠⵠᐃ],
			[Ⲇᐃ.ᐃΔⲆᐃ, 150],
			[Ⲇᐃ.ᐃᐃᐃⵠΔ, 3]
		],
		w: Δᐃᐃ,
		f: ΔⵠⲆ,
		"ᐃΔⲆ": 1,
		e: ⵠⵠΔᐃ,
		id: ⲆΔⵠ.ΔⵠΔⵠⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⵠΔⵠⲆ,
		time: 1 / 120,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ΔⵠΔⵠⲆ, 1],
			[Ⲇᐃ.ᐃΔⵠᐃΔ, 1],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 150],
			[Ⲇᐃ.ⵠⲆᐃΔⵠ, ⲆⲆᐃⲆ]
		],
		w: 1,
		f: 1,
		"ᐃΔⲆ": ⲆΔⲆⵠ,
		e: 0,
		id: ⲆΔⵠ.ᐃᐃᐃᐃⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃᐃᐃᐃⵠ,
		time: ⵠΔᐃ / 180,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠΔΔΔΔ, 1],
			[Ⲇᐃ.ᐃΔⲆᐃᐃ, ⲆΔⵠᐃⲆ],
			[Ⲇᐃ.ⲆⵠΔⵠⲆ, 10],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, ΔΔⲆⲆⵠ]
		],
		w: 1,
		f: ΔᐃΔ,
		"ᐃΔⲆ": ⵠᐃΔⲆ,
		e: 0,
		id: ⲆΔⵠ.ΔΔⲆΔⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔⲆΔⲆ,
		time: .016666666666666666,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, 20],
			[Ⲇᐃ.ΔᐃⲆᐃⲆ, ⵠⵠⵠΔ],
			[Ⲇᐃ.ᐃΔⲆᐃ, 150],
			[Ⲇᐃ.ᐃᐃᐃⵠΔ, 3]
		],
		w: 1,
		f: 1,
		"ᐃΔⲆ": 1,
		e: 0,
		id: ⲆΔⵠ.ᐃⵠΔᐃᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠΔᐃᐃ,
		time: ⵠⵠⵠΔ / 120,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠΔᐃᐃ, ᐃⲆΔ],
			[Ⲇᐃ.ⵠⵠⵠⵠⲆ, ⲆⵠΔⲆ],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 150],
			[Ⲇᐃ.ⵠⲆᐃΔⵠ, 2]
		],
		w: ⲆΔᐃ,
		f: ΔⵠⲆ,
		"ᐃΔⲆ": 1,
		e: ⵠⲆᐃ,
		id: ⲆΔⵠ.ⲆⵠⲆⲆⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⵠⲆⲆⵠ,
		time: .005555555555555556,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, ⵠⲆⲆⵠᐃΔᐃ],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, 4]
		],
		w: ⵠΔΔ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆⵠⲆⵠᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⵠⲆⵠᐃ,
		time: 1 / ⲆⲆᐃᐃᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 30]
		],
		w: ΔⵠⲆ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⲆΔⵠΔ,
		id: ⲆΔⵠ.ⵠⵠΔΔᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⵠΔΔᐃ,
		time: ΔⵠⲆ / 5,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠᐃᐃ, 200],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, ⲆⲆΔᐃΔ],
			[Ⲇᐃ.ⵠⵠⲆΔΔ, 4],
			[Ⲇᐃ.ⲆⵠⲆⵠᐃ, 1]
		],
		w: ⲆⵠΔⲆ,
		f: ⲆΔⵠΔ,
		"ᐃΔⲆ": ⲆⲆⵠⲆ,
		e: 0,
		id: ⲆΔⵠ.ⵠΔΔΔᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠΔΔΔᐃ,
		time: .04,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠᐃᐃ, 20],
			[Ⲇᐃ.ᐃⵠⲆⲆΔ, 1]
		],
		w: ⲆΔᐃ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ΔΔⲆⲆ,
		id: ⲆΔⵠ.ΔᐃᐃΔᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔᐃᐃΔᐃ,
		time: ΔΔⲆΔ / 5,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠⵠᐃ, 200],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, 12],
			[Ⲇᐃ.ᐃⵠⲆⲆΔ, ᐃᐃᐃΔⵠ],
			[Ⲇᐃ.ⵠⵠⲆΔΔ, ΔᐃΔⲆΔ],
			[Ⲇᐃ.ⵠΔΔΔᐃ, ᐃⲆΔ]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⵠⵠⵠⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⵠⵠⲆⲆ,
		time: .03333333333333333,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠⵠᐃ, 20],
			[Ⲇᐃ.ⵠⵠⲆΔΔ, ⲆⵠⲆ]
		],
		w: ⲆΔⲆⵠ,
		f: 0,
		"ᐃΔⲆ": ⲆᐃⲆ,
		e: 0,
		id: ⲆΔⵠ.ΔΔⲆⲆΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔⲆⲆΔ,
		time: ⲆΔᐃ / 10,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆᐃᐃ, 200],
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, ᐃⵠᐃᐃᐃ],
			[Ⲇᐃ.ᐃⵠⲆⲆΔ, ᐃΔⲆΔΔ],
			[Ⲇᐃ.ⵠⵠⲆΔΔ, ⲆΔΔⲆⵠ],
			[Ⲇᐃ.ⵠⵠⵠⲆⲆ, 1]
		],
		w: ᐃⲆⲆ,
		f: ⵠⲆⵠ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⵠᐃⵠᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠᐃⵠᐃΔ,
		time: ⵠΔᐃ / 35,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆᐃᐃ, 10],
			[Ⲇᐃ.ⵠⵠⲆΔΔ, ⵠΔΔ]
		],
		w: Δᐃᐃ,
		f: 0,
		"ᐃΔⲆ": ΔᐃΔ,
		e: ᐃΔΔ,
		id: ⲆΔⵠ.ᐃΔⲆᐃⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃΔⲆᐃⲆ,
		time: .1,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃΔⲆᐃ, 200],
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, 10],
			[Ⲇᐃ.ⵠⵠⲆΔΔ, ⵠΔᐃᐃΔ],
			[Ⲇᐃ.ⲆⵠᐃⲆΔ, ⲆᐃⵠⲆⵠ],
			[Ⲇᐃ.ⵠᐃⵠᐃΔ, 1]
		],
		w: 1,
		f: ᐃΔΔ,
		"ᐃΔⲆ": ⵠᐃΔⲆ,
		e: ⵠⵠΔᐃ,
		id: ⲆΔⵠ.ΔΔⵠⵠⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔⵠⵠⲆ,
		time: ⲆⵠⲆ / 40,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃΔⲆᐃ, ΔΔⲆⲆⵠ],
			[Ⲇᐃ.ⲆⵠᐃⲆΔ, ⵠⵠᐃ]
		],
		w: ᐃⵠⵠ,
		f: 0,
		"ᐃΔⲆ": ⲆⲆⵠⲆ,
		e: 0,
		id: ⲆΔⵠ.ⵠⲆⵠⵠⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⲆⵠⵠⵠ,
		time: ᐃⲆΔ / ᐃᐃᐃⵠⲆⲆᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 200],
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, ⵠⵠⲆᐃᐃ],
			[Ⲇᐃ.ⵠⵠⵠΔΔ, 1],
			[Ⲇᐃ.ΔΔⵠⵠⲆ, ⵠⵠⵠΔ]
		],
		w: 1,
		f: ᐃⲆⵠΔ,
		"ᐃΔⲆ": 0,
		e: ᐃⲆⵠΔ,
		id: ⲆΔⵠ.ⵠⵠⲆᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⵠⲆᐃΔ,
		time: .022222222222222223,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 10],
			[Ⲇᐃ.ⲆⵠᐃⲆΔ, ⲆⵠⲆ],
			[Ⲇᐃ.ⵠΔΔⵠⲆ, ᐃⲆⲆ]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ⲆᐃⲆ,
		e: ⵠⲆⵠ,
		id: ⲆΔⵠ.ᐃⵠΔⵠᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⵠΔⵠᐃ,
		time: ⲆⵠΔⲆ / ⵠⵠᐃᐃⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ΔᐃΔⵠΔ, 200],
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, 10],
			[Ⲇᐃ.ΔᐃⲆᐃⲆ, ⵠⵠᐃ],
			[Ⲇᐃ.ⵠⵠⲆᐃΔ, ΔⲆΔᐃ]
		],
		w: ⲆΔᐃΔ,
		f: ⵠᐃΔⲆ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⲆΔᐃⵠΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆΔᐃⵠΔ,
		time: .02,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ΔᐃΔⵠΔ, 10],
			[Ⲇᐃ.ΔᐃⲆⲆΔ, 1]
		],
		w: ⲆⵠΔⲆ,
		f: ᐃΔΔ,
		"ᐃΔⲆ": 0,
		e: ᐃⲆⵠΔ,
		id: ⲆΔⵠ.ΔⲆΔⵠΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⲆΔⵠΔ,
		time: 1 / ⲆᐃⵠⲆᐃ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 100]
		],
		w: 1,
		f: ⲆⲆⵠⲆ,
		"ᐃΔⲆ": ⵠⲆᐃ,
		e: 0,
		id: ⲆΔⵠ.ⲆⲆΔⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⲆΔⲆⲆ,
		time: .04,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⲆⲆΔⲆⲆ, 1],
			[Ⲇᐃ.ᐃⵠᐃᐃ, ⲆᐃᐃΔᐃ],
			[Ⲇᐃ.ᐃⲆΔⲆ, 50]
		],
		w: ⲆⵠΔⲆ,
		f: 0,
		"ᐃΔⲆ": ⲆΔⵠΔ,
		e: 0,
		id: ⲆΔⵠ.ⵠⲆⲆⲆᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⲆⲆⲆᐃ,
		time: Δᐃᐃ / 40,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆⲆⲆᐃ, 1],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 50],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 50],
			[Ⲇᐃ.ᐃⲆΔⲆ, 50]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ⲆΔⵠΔ,
		e: ᐃΔΔ,
		id: ⲆΔⵠ.ⲆⲆⲆΔⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⲆⲆΔⵠ,
		time: ΔⲆΔᐃ / 50,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⲆⲆⲆΔⵠ, ᐃⲆⲆ],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 50],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 50],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 50]
		],
		w: 1,
		f: ΔΔⲆⲆ,
		"ᐃΔⲆ": 0,
		e: ᐃⲆⵠΔ,
		id: ⲆΔⵠ.ΔⵠᐃᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⵠᐃᐃΔ,
		time: .014285714285714285,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ΔⵠᐃᐃΔ, 1],
			[Ⲇᐃ.ᐃΔⲆᐃ, 50],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 50],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 50]
		],
		w: ΔⵠⲆ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ᐃΔΔⲆⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃΔΔⲆⵠ,
		time: 1 / 90,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃΔΔⲆⵠ, 1],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 50],
			[Ⲇᐃ.ᐃΔⲆᐃ, 50],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 50]
		],
		w: ⵠΔΔ,
		f: 0,
		"ᐃΔⲆ": Δⵠⵠ,
		e: 0,
		id: ⲆΔⵠ.ΔⵠᐃⲆᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⵠᐃⲆᐃ,
		time: .008333333333333333,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⲆⵠⵠᐃΔ, 1],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 200]
		],
		w: 1,
		f: ⵠΔΔ,
		"ᐃΔⲆ": 1,
		e: ⵠⲆᐃ,
		id: ⲆΔⵠ.ⲆᐃⲆᐃΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆᐃⲆᐃΔ,
		time: .016666666666666666,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃᐃⲆᐃⲆ, ΔⵠⲆ],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 200]
		],
		w: ⲆΔᐃ,
		f: 1,
		"ᐃΔⲆ": 1,
		e: ᐃΔΔ,
		id: ⲆΔⵠ.ᐃᐃⵠⲆⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃᐃⵠⲆⵠ,
		time: ⵠⵠⵠΔ / 60,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠᐃᐃⲆΔ, 1],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 200],
			[Ⲇᐃ.ᐃᐃᐃⵠΔ, 1]
		],
		w: ᐃⲆΔ,
		f: 1,
		"ᐃΔⲆ": ΔΔⲆΔ,
		e: ⲆᐃⲆ,
		id: ⲆΔⵠ.ΔᐃⲆⵠᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔᐃⲆⵠᐃ,
		time: ⵠⵠᐃ / 60,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆⲆⲆⵠ, 10],
			[Ⲇᐃ.ΔⲆⵠΔⲆ, ᐃΔⵠΔᐃ],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, ⵠΔΔⲆΔ]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⵠⲆᐃ,
		id: ⲆΔⵠ.ᐃΔΔᐃⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃΔΔᐃⵠ,
		time: 1 / 10,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ΔⲆⵠΔⲆ, ᐃΔΔΔ],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, 2]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⵠⵠⵠᐃᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⵠⵠᐃᐃ,
		time: ΔⵠⲆ / 10,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃΔΔᐃⵠ, ΔⲆΔᐃ],
			[Ⲇᐃ.ᐃⵠΔᐃⵠ, ᐃⵠⵠ],
			[Ⲇᐃ.ⲆⲆⲆᐃΔ, ⵠⵠΔⲆⵠ],
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, Δᐃⵠᐃ],
			[Ⲇᐃ.ⵠⵠⲆΔΔ, ⵠΔᐃᐃΔ]
		],
		w: 1,
		f: ⵠⲆᐃ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ΔⵠΔⲆⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔⵠΔⲆⵠ,
		time: .016666666666666666,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⵠⵠⵠᐃᐃ, 1],
			[Ⲇᐃ.ΔᐃⵠΔᐃ, 1],
			[Ⲇᐃ.ⲆⲆⲆᐃΔ, ᐃᐃΔⵠⵠ],
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, 5],
			[Ⲇᐃ.ⵠⵠⲆΔΔ, 8]
		],
		w: 1,
		f: ᐃⲆⵠΔ,
		"ᐃΔⲆ": 0,
		e: ⵠᐃΔⲆ,
		id: ⲆΔⵠ.ΔΔΔΔΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔΔΔΔ,
		time: ᐃⲆΔ / 60,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ΔΔΔⵠΔ, 1]
		],
		w: ᐃⲆⵠΔ,
		f: ⲆΔⵠΔ,
		"ᐃΔⲆ": 1,
		e: 0,
		id: ⲆΔⵠ.ΔΔⵠΔΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔⵠΔΔ,
		time: .2,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 20],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, ⵠΔⲆ]
		],
		w: ⲆΔᐃΔ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ⲆᐃⲆ,
		id: ⲆΔⵠ.ΔΔΔⵠΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔΔⵠΔ,
		time: ⲆⵠΔⲆ / ⲆΔⲆⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔⲆⲆΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ᐃⵠᐃᐃ, 100],
			[Ⲇᐃ.ⵠᐃΔⲆΔ, 30]
		],
		w: 1,
		f: 1,
		"ᐃΔⲆ": ⵠᐃΔ,
		e: 0,
		id: ⲆΔⵠ.ⵠⲆⲆΔⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⲆⲆΔⵠ,
		time: 1 / ᐃⲆⲆⵠⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 20]
		],
		w: 1,
		f: ᐃΔΔ,
		"ᐃΔⲆ": 0,
		e: ⲆᐃⲆ,
		id: ⲆΔⵠ.ᐃΔΔⵠⵠ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃΔΔⵠⵠ,
		time: 1 / ⲆΔⲆⲆ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, Δᐃⵠⵠⵠ],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 50],
			[Ⲇᐃ.ΔⲆⵠΔⲆ, 5],
			[Ⲇᐃ.ⵠⲆⲆⲆⵠ, 5],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, 6]
		],
		w: 1,
		f: ⵠⵠΔᐃ,
		"ᐃΔⲆ": Δⵠⵠ,
		e: ᐃΔΔ,
		id: ⲆΔⵠ.ⵠⲆⵠΔΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⲆⵠΔΔ,
		time: 1 / ΔⵠⵠᐃᐃⵠΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 250],
			[Ⲇᐃ.ᐃⵠΔⲆⲆ, 10],
			[Ⲇᐃ.ⲆⲆⲆᐃΔ, ⲆⲆᐃⲆ],
			[Ⲇᐃ.ΔⵠⵠᐃⲆ, ᐃΔⲆⵠ]
		],
		w: ⲆⵠⲆ,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ᐃΔⵠΔΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃΔⵠΔΔ,
		time: .02,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 250],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, 10],
			[Ⲇᐃ.ⲆⲆⲆᐃΔ, 2],
			[Ⲇᐃ.ⵠⵠⲆΔΔ, ⵠΔᐃᐃΔ]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": ⵠⲆⵠ,
		e: 0,
		id: ⲆΔⵠ.ⲆᐃΔⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆᐃΔⲆⲆ,
		time: ⲆⵠΔⲆ / 50,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, ⲆΔⵠᐃⲆ],
			[Ⲇᐃ.ⵠⲆⲆⲆⵠ, ᐃΔⵠⲆⵠ],
			[Ⲇᐃ.ΔⲆⵠΔⲆ, ⵠΔΔⵠ],
			[Ⲇᐃ.ⲆᐃᐃΔⵠ, 50]
		],
		w: 1,
		f: Δⵠⵠ,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ᐃⲆᐃΔᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ᐃⲆᐃΔᐃ,
		time: 1 / ΔΔᐃⲆΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 250],
			[Ⲇᐃ.ⲆⵠⲆⵠⵠ, 10],
			[Ⲇᐃ.ⲆΔΔᐃᐃ, ᐃᐃΔⵠⵠ],
			[Ⲇᐃ.ᐃⵠⲆⲆΔ, ⲆᐃⲆΔⲆ]
		],
		w: ⵠⵠᐃ,
		f: ⵠⲆᐃ,
		"ᐃΔⲆ": 0,
		e: ⲆΔⵠΔ,
		id: ⲆΔⵠ.ⵠⲆⲆΔᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⲆⲆΔᐃ,
		time: .02,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ΔΔΔΔᐃ
	}, {
		r: [
			[Ⲇᐃ.ᐃⲆΔⲆ, 40]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: ΔᐃΔ,
		id: ⲆΔⵠ.ΔΔⲆⵠᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ΔΔⲆⵠᐃ,
		time: ⵠⵠᐃ / ⲆΔΔΔ,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ΔΔⲆⵠᐃ, ⲆⵠⲆ],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 40],
			[Ⲇᐃ.ᐃⲆΔⲆ, 50]
		],
		w: 1,
		f: ⲆⲆⵠⲆ,
		"ᐃΔⲆ": ⵠⵠΔᐃ,
		e: ⵠⵠΔᐃ,
		id: ⲆΔⵠ.ⲆᐃⵠⲆΔ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆᐃⵠⲆΔ,
		time: .1,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⲆᐃⵠⲆΔ, 1],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 40],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 50],
			[Ⲇᐃ.ᐃⲆΔⲆ, 60]
		],
		w: ⲆⵠⲆ,
		f: ΔΔⲆⲆ,
		"ᐃΔⲆ": ᐃΔΔ,
		e: 0,
		id: ⲆΔⵠ.ⲆⲆΔⵠᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆⲆΔⵠᐃ,
		time: ᐃⵠⵠ / 20,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⲆⲆΔⵠᐃ, 1],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 40],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 70],
			[Ⲇᐃ.ᐃⵠᐃᐃ, 80]
		],
		w: 1,
		f: 0,
		"ᐃΔⲆ": 0,
		e: 0,
		id: ⲆΔⵠ.ⵠⵠⲆⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⵠⲆⲆⲆ,
		time: ΔΔⲆΔ / 30,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⵠⲆⲆⲆ, ΔⵠⲆ],
			[Ⲇᐃ.ᐃΔⲆᐃ, 40],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 70],
			[Ⲇᐃ.ᐃⵠⵠᐃ, 110]
		],
		w: ⵠΔᐃ,
		f: 0,
		"ᐃΔⲆ": Δⵠⵠ,
		e: 0,
		id: ⲆΔⵠ.ⵠⲆⲆᐃᐃ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⵠⲆⲆᐃᐃ,
		time: .016666666666666666,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}, {
		r: [
			[Ⲇᐃ.ⵠⲆⲆᐃᐃ, ᐃⲆΔ],
			[Ⲇᐃ.Ⲇⵠⵠᐃ, 50],
			[Ⲇᐃ.ᐃΔⲆᐃ, 80],
			[Ⲇᐃ.ⵠⲆᐃᐃ, 110]
		],
		w: Δᐃᐃ,
		f: ⵠⲆᐃ,
		"ᐃΔⲆ": 0,
		e: ⲆΔⵠΔ,
		id: ⲆΔⵠ.ⲆΔΔⲆⲆ,
		"ⵠⵠⲆᐃ": Ⲇᐃ.ⲆΔΔⲆⲆ,
		time: ⲆⵠⲆ / 90,
		"ΔⲆᐃ": ᐃⵠⲆΔ.ᐃᐃΔⲆ
	}];
	const ΔⵠⵠⲆΔᐃΔ = ⲆⲆⵠᐃΔ;

	function ⲆᐃⵠⲆⲆΔⲆ(ΔⵠΔⲆⲆⲆⵠ, ⵠⲆⲆⲆΔⵠΔ) {
		const ⵠΔⲆᐃΔᐃⵠ = (ΔⵠΔⲆⲆⲆⵠ + 57152) % 65399;
		const ΔΔⵠΔᐃΔΔ = (12345 + (62536 + ⵠⲆⲆⲆΔⵠΔ) * 1103515245) % 2147483648;
		const ΔᐃΔᐃΔΔⲆ = ᐃᐃⲆᐃⵠⲆᐃ(ⵠΔⲆᐃΔᐃⵠ, ΔΔⵠΔᐃΔΔ, ⵠΔⲆᐃΔᐃⵠ, ΔΔⵠΔᐃΔΔ, ⵠΔⲆᐃΔᐃⵠ);
		const ⲆⲆΔΔⵠᐃΔΔΔ = ⲆⲆΔⲆΔⵠⲆ(ΔΔⵠΔᐃΔΔ, ⵠΔⲆᐃΔᐃⵠ, ΔΔⵠΔᐃΔΔ, ⵠΔⲆᐃΔᐃⵠ, ΔΔⵠΔᐃΔΔ, ⵠΔⲆᐃΔᐃⵠ);
		const ⲆⲆΔᐃΔᐃⵠ = ΔᐃΔᐃΔΔⲆ ^ 61941;
		return ⲆⲆΔᐃΔᐃⵠ
	}
	const ⵠΔΔΔⲆ = ⵠⲆΔᐃΔ;

	function ᐃⲆΔΔΔᐃᐃ(ΔᐃⵠⲆᐃⲆⵠ, ⲆΔⵠⲆΔⵠᐃ, ΔΔⲆΔⵠ, ΔⲆᐃΔⲆΔᐃ) {
		const ⲆⲆΔⲆⲆΔⵠ = (8 << (ΔᐃⵠⲆᐃⲆⵠ >> 8 & 255)) + (24 << (ΔᐃⵠⲆᐃⲆⵠ >> 24 & 255)) + (0 << (ΔᐃⵠⲆᐃⲆⵠ >> 0 & 255)) + (16 << (ΔᐃⵠⲆᐃⲆⵠ >> 16 & 255));
		const ΔΔⲆΔⵠᐃⵠ = ⲆΔⵠⲆΔⵠᐃ ^ 5644;
		const ⲆΔᐃΔⵠᐃΔ = ~(31068 & ΔΔⲆΔⵠ) & ΔΔⲆΔⵠ | ~(ΔΔⲆΔⵠ & 31068) & 31068;
		const ΔⵠᐃᐃⲆΔⵠ = ~(ΔⲆᐃΔⲆΔᐃ & 64994) & 64994 | ~(64994 & ΔⲆᐃΔⲆΔᐃ) & ΔⲆᐃΔⲆΔᐃ;
		const ⵠΔⲆᐃΔΔᐃ = ΔⵠⵠΔⲆΔᐃ(ⲆⲆΔⲆⲆΔⵠ, ΔΔⲆΔⵠᐃⵠ);
		const ΔⲆᐃⵠᐃⲆᐃ = ᐃΔᐃᐃΔᐃΔ(ⲆΔᐃΔⵠᐃΔ, ΔⵠᐃᐃⲆΔⵠ, ⲆⲆΔⲆⲆΔⵠ, ΔΔⲆΔⵠᐃⵠ, ⲆΔᐃΔⵠᐃΔ);
		const ᐃᐃⲆⵠⲆᐃⲆ = (24 << ((ⵠΔⲆᐃΔΔᐃ ^ ΔⲆᐃⵠᐃⲆᐃ) >> 16 & 255)) + (0 << ((ⵠΔⲆᐃΔΔᐃ ^ ΔⲆᐃⵠᐃⲆᐃ) >> 0 & 255)) + (16 << ((ⵠΔⲆᐃΔΔᐃ ^ ΔⲆᐃⵠᐃⲆᐃ) >> 8 & 255)) + (8 << ((ⵠΔⲆᐃΔΔᐃ ^ ΔⲆᐃⵠᐃⲆᐃ) >> 24 & 255));
		return ᐃᐃⲆⵠⲆᐃⲆ
	}
	const ΔΔΔᐃΔΔΔ = ⵠΔⲆᐃⲆ;
	const ΔⵠⵠᐃΔⵠⵠ = ΔᐃΔⵠᐃ;

	function ΔᐃⵠⲆᐃᐃⵠ(ΔⵠⲆⲆⲆⵠⲆ, ΔᐃⵠΔⲆΔᐃ, ΔΔⲆⵠΔⲆⵠ, ⵠᐃᐃᐃᐃ) {
		const ΔⵠΔΔⲆᐃⲆ = (ΔⵠⲆⲆⲆⵠⲆ | 45672) & ~(ΔⵠⲆⲆⲆⵠⲆ & 45672);
		const ᐃᐃⲆⵠΔⲆΔ = ΔᐃⵠΔⲆΔᐃ ^ 47155;
		const ⲆΔⲆΔΔᐃⵠ = (2147483587 + 2147483629 * (48758 + ΔΔⲆⵠΔⲆⵠ)) % 2147483647;
		const ΔⲆⵠΔⵠᐃⲆ = (16 << (ⵠᐃᐃᐃᐃ >> 24 & ⲆⵠΔᐃᐃᐃⲆ)) + (24 << (ⵠᐃᐃᐃᐃ >> 16 & 255)) + (8 << (ⵠᐃᐃᐃᐃ >> 0 & 255)) + (0 << (ⵠᐃᐃᐃᐃ >> 8 & 255));
		const ⲆᐃᐃΔⲆᐃⵠ = ⲆⵠⵠⵠᐃΔΔ(ΔⵠΔΔⲆᐃⲆ, ᐃᐃⲆⵠΔⲆΔ, ⲆΔⲆΔΔᐃⵠ);
		const ᐃⵠᐃᐃⲆΔᐃ = ⲆΔⵠⵠΔⵠⵠ(ΔⲆⵠΔⵠᐃⲆ, ΔⵠΔΔⲆᐃⲆ, ᐃᐃⲆⵠΔⲆΔ, ⲆΔⲆΔΔᐃⵠ);
		const ᐃⵠⵠΔΔΔⵠ = ((58471 + (ⲆᐃᐃΔⲆᐃⵠ ^ ᐃⵠᐃᐃⲆΔᐃ)) * 214013 + 2531011) % 4294967296;
		return ᐃⵠⵠΔΔΔⵠ
	}
	const ΔⲆⲆᐃⵠⵠᐃ = ⵠᐃΔⵠⲆ;
	var ⵠⲆ = 300;
	ΔΔΔΔ = {
		"ΔⲆᐃᐃⲆⲆⵠ": ⵠⲆ++,
		"ΔⲆΔᐃⵠΔⲆ": ⵠⲆ++,
		"ⲆⵠⲆⵠᐃⵠΔ": ⵠⲆ++,
		"ᐃⲆⲆΔⵠᐃΔ": ⵠⲆ++,
		"ΔΔⵠΔⲆⵠΔ": ⵠⲆ++,
		"ⵠⵠⵠⲆᐃⵠΔ": ⵠⲆ++,
		"ΔⵠᐃⲆⵠᐃᐃ": ⵠⲆ++,
		"ⲆᐃⵠΔᐃᐃᐃ": ⵠⲆ++,
		"ⲆᐃΔᐃΔⲆⲆ": ⵠⲆ++,
		"ⵠⵠⲆⲆΔⲆᐃ": ⵠⲆ++,
		"ᐃⵠᐃⲆΔᐃⲆ": ⵠⲆ++,
		"ⵠⲆᐃⲆΔΔⵠ": ⵠⲆ++,
		EMPTY: ⵠⲆ++,
		"ⵠΔⲆⵠᐃⵠⵠ": ⵠⲆ++,
		"ΔⲆΔᐃᐃⵠⵠ": ⵠⲆ++,
		"ⲆᐃⵠⵠᐃⲆΔ": ⵠⲆ++,
		"ᐃᐃⲆⵠⲆΔΔ": ⵠⲆ++,
		"ΔΔⵠΔⵠᐃⲆ": ⵠⲆ++,
		"ⵠⲆᐃᐃⲆⲆⲆ": ⵠⲆ++,
		"ᐃΔⵠⵠΔⲆᐃ": ⵠⲆ++,
		"ᐃᐃⵠⲆⲆΔⵠ": ⵠⲆ++,
		"ᐃΔΔᐃⵠᐃⲆ": ⵠⲆ++,
		"ᐃⵠΔΔᐃ": ⵠⲆ++,
		"ᐃΔⲆⲆΔᐃΔ": ⵠⲆ++,
		"ᐃⲆⲆⲆ": ⵠⲆ++,
		"ᐃⵠΔⵠΔᐃΔ": ⵠⲆ++,
		"ⲆⵠΔᐃⲆⲆⵠ": ⵠⲆ++,
		"ᐃΔΔⲆΔⵠⲆ": ⵠⲆ++,
		"ⵠⵠⲆⵠⲆᐃⵠ": ⵠⲆ++,
		"ᐃⲆΔΔᐃⲆᐃ": ⵠⲆ++,
		"ΔᐃΔᐃⲆΔⵠ": ⵠⲆ++,
		"ⵠΔⵠⲆⵠⲆᐃ": ⵠⲆ++,
		POINTS: ⵠⲆ++,
		"ᐃⵠⲆⵠΔΔΔ": ⵠⲆ++,
		"ⲆΔⵠᐃᐃᐃⵠ": ⵠⲆ++,
		"ⵠⲆⵠᐃⲆⲆΔ": ⵠⲆ++,
		"ⲆᐃⲆⲆⵠᐃᐃ": ⵠⲆ++,
		"ⲆΔⲆⲆΔⵠᐃ": ⵠⲆ++,
		"ⲆⵠⲆᐃⲆΔⲆ": ⵠⲆ++,
		"ⲆⵠⲆΔⲆⵠⵠ": ⵠⲆ++,
		"ⲆⲆⲆⵠⲆΔⵠ": ⵠⲆ++,
		"ΔⵠⲆⵠΔⵠⲆ": ⵠⲆ++,
		"ⵠⲆⵠΔⲆᐃΔ": ⵠⲆ++,
		"ⵠⲆⲆⵠΔᐃⲆ": ⵠⲆ++
	};

	function ⲆⵠⵠⵠᐃΔΔ(ⵠᐃᐃΔᐃⵠⲆ, ΔⲆⵠⵠⲆΔⵠ, ⵠᐃΔⵠⵠΔᐃ) {
		const ⲆΔⵠᐃⵠΔⵠ = (16 << (ⵠᐃᐃΔᐃⵠⲆ >> 24 & ⲆⵠⲆⵠᐃᐃⲆ)) + (Δⵠⵠ << (ⵠᐃᐃΔᐃⵠⲆ >> 8 & 255)) + (24 << (ⵠᐃᐃΔᐃⵠⲆ >> 16 & 255)) + (8 << (ⵠᐃᐃΔᐃⵠⲆ >> 0 & 255));
		const ΔⲆΔᐃⲆⲆᐃ = (24 << (ΔⲆⵠⵠⲆΔⵠ >> 16 & ⲆΔΔᐃⲆᐃΔ)) + (0 << (ΔⲆⵠⵠⲆΔⵠ >> 8 & 255)) + (16 << (ΔⲆⵠⵠⲆΔⵠ >> 0 & 255)) + (8 << (ΔⲆⵠⵠⲆΔⵠ >> 24 & 255));
		const ᐃᐃᐃΔⲆΔⵠ = ((ⵠᐃΔⵠⵠΔᐃ + 48969) * 22695477 + 1) % 4294967296;
		const ΔⵠⵠΔΔⵠΔ = ⲆΔⵠⵠⵠᐃᐃ(ⲆΔⵠᐃⵠΔⵠ, ΔⲆΔᐃⲆⲆᐃ, ᐃᐃᐃΔⲆΔⵠ, ⲆΔⵠᐃⵠΔⵠ);
		const ΔⵠⵠⵠⲆⲆΔ = ⲆⲆᐃᐃᐃᐃⲆ(ΔⲆΔᐃⲆⲆᐃ, ᐃᐃᐃΔⲆΔⵠ, ⲆΔⵠᐃⵠΔⵠ, ΔⲆΔᐃⲆⲆᐃ, ᐃᐃᐃΔⲆΔⵠ);
		const ⲆⲆᐃΔⵠⵠⲆ = (8 << ((ΔⵠⵠΔΔⵠΔ ^ ΔⵠⵠⵠⲆⲆΔ) >> 24 & ᐃΔᐃⵠΔⲆᐃ)) + (0 << ((ΔⵠⵠΔΔⵠΔ ^ ΔⵠⵠⵠⲆⲆΔ) >> 0 & 255)) + (24 << ((ΔⵠⵠΔΔⵠΔ ^ ΔⵠⵠⵠⲆⲆΔ) >> 16 & ⵠⵠᐃᐃᐃⵠᐃ)) + (ᐃⵠᐃⲆⲆⵠⲆ << ((ΔⵠⵠΔΔⵠΔ ^ ΔⵠⵠⵠⲆⲆΔ) >> 8 & ⵠⵠᐃᐃᐃⵠᐃ));
		return ⲆⲆᐃΔⵠⵠⲆ
	}

	function ᐃᐃⲆᐃⵠⲆᐃ(ᐃⲆΔⲆΔⵠᐃ, ᐃⲆᐃⲆᐃⲆⵠ, ᐃⲆⵠⲆⵠⲆⵠ, ΔΔⲆᐃⲆⲆᐃ, ⵠᐃΔⵠⵠᐃᐃ) {
		const ⲆⵠⵠΔΔⲆⵠ = (ᐃⲆΔⲆΔⵠᐃ + 9052) % 65314;
		const ⵠΔⲆⲆⵠᐃΔ = ᐃⲆᐃⲆᐃⲆⵠ ^ 52255;
		const ⵠΔⲆᐃⵠᐃᐃ = ~(15215 & ᐃⲆⵠⲆⵠⲆⵠ) & (15215 | ᐃⲆⵠⲆⵠⲆⵠ);
		const ⵠⵠⵠⵠᐃᐃⵠ = 64138 ^ ΔΔⲆᐃⲆⲆᐃ;
		const ΔᐃᐃΔⵠᐃⲆ = (1013904223 + (ⵠᐃΔⵠⵠᐃᐃ + 55167) * 1664525) % 4294967296;
		const ⵠⵠⵠΔᐃᐃᐃ = ΔⲆⲆᐃΔΔΔ(ⲆⵠⵠΔΔⲆⵠ, ⵠΔⲆⲆⵠᐃΔ, ⵠΔⲆᐃⵠᐃᐃ, ⵠⵠⵠⵠᐃᐃⵠ, ΔᐃᐃΔⵠᐃⲆ);
		const ⵠⵠⲆΔᐃᐃⲆΔⲆ = ⵠΔⲆⲆᐃΔⵠ(ⲆⵠⵠΔΔⲆⵠ, ⵠΔⲆⲆⵠᐃΔ, ⵠΔⲆᐃⵠᐃᐃ, ⵠⵠⵠⵠᐃᐃⵠ);
		const ΔⵠⵠⵠⵠᐃΔ = (3727 | ⵠⵠⵠΔᐃᐃᐃ) & ~(ⵠⵠⵠΔᐃᐃᐃ & 3727);
		return ΔⵠⵠⵠⵠᐃΔ
	}
	var ᐃᐃᐃᐃⵠΔⵠ = function() {
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔⲆⲆ] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆᐃᐃ] = ["Amethyst Axe", "Purple and powerful", Δ[178], "Shield Penetration: 5"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⲆⲆⲆ] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔⵠᐃ] = ["Gold Axe", "Chop 'til it drops!", Δ[251], "Shield Penetration: 3"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⵠⲆΔ] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆⵠᐃ] = ["Wood Axe", "Eco-friendly deforestation!", Δ[579], "Shield Penetration: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠΔⵠⵠ] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", Δ[222]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠΔⵠ] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", Δ[222]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠⵠΔ] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", Δ[222]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆᐃΔᐃ] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", Δ[222]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔᐃΔ] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", Δ[222]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃⲆᐃ] = ["Reidite Shield", "A must for the pros of the getaway", Δ[94], "Damage: 6", "Players Defense: 6"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⲆⵠ] = ["Amethyst Shield", "Because you know how to run away in style", Δ[94], Δ[470], "Players Defense: 5"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃᐃΔ] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", Δ[94], Δ[485], Δ[328]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆΔⵠ] = ["Gold Shield", "When it's golden, it's always better.", Δ[94], Δ[280], "Players Defense: 3"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆᐃ] = ["Stone Shield", "Protects you a bit more", Δ[94], Δ[112], "Players Defense: 2"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔⲆⲆ] = ["Wood Shield", "Protects you a bit", Δ[94], Δ[377], "Players Defense: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠⵠΔ] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆΔᐃ] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆΔⵠΔ] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔᐃⵠΔ] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⵠᐃ] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⲆᐃΔ] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠⵠ] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⵠⵠⲆ] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃⲆ] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", Δ[178], "Mobs Damage: 300", "Building Damage: 30"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠᐃΔ] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆⲆΔ] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠⲆⲆ] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃᐃΔᐃ] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", Δ[197], "Mobs Damage: 100", "Building Damage: 20"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔΔΔᐃ] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠΔΔᐃ] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⵠᐃ] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⵠⲆⵠ] = [Δ[322], "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠᐃⲆ] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃΔ] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠᐃⲆΔ] = ["Vulture Feather", "From a deadly vulture"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔⵠΔ] = ["Emerald", "How many golden breads can you get from it?"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆⲆΔ] = ["Sand Worm Juice", "I don't want to know how you got this."];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⲆⲆΔ] = ["Turban", "Useful to survive in the desert."];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆᐃⲆⵠ] = ["Ninja outfit", "Essential to survive in the desert"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔᐃⵠⵠ] = ["Pilot Hat", "Take off and land with flying objects much faster."];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃΔᐃⲆⵠⲆ] = ["Pilot Glasses"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠΔⵠⲆ] = ["Tamed Boar", "Fast on lands and slow on water."];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆΔⵠ] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⵠᐃ] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⲆΔⲆ] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", Δ[480], Δ[146]];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔᐃⲆΔ] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", Δ[480], Δ[146]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔᐃ] = ["Tamed Hawk", "You can fly with it.", Δ[480], Δ[146]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆᐃΔᐃ] = ["Saddle", "Hit a boar with it to tame it."];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃⵠⲆ] = ["Witch Hat", "You're a wizard Starvy!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆΔⲆ] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔⲆΔ] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
		ΔⲆⲆ[Ⲇᐃ.Δᐃᐃᐃⵠ] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔⵠᐃ] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃΔΔ] = ["Pirate hat", "You are faster with it in a boat", Δ[521]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔⲆⲆ] = ["Sled", "You are faster with it in the snow"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⵠΔΔ] = ["Boat", "You are faster with it in the water"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆΔᐃ] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", Δ[480], Δ[146]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⵠΔ] = ["Reidite Hammer", Δ[506], "Damage: 6", "Building Damage: 70"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⲆΔΔ] = ["Penguin Feather", "From a deadly cute penguin."];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆⲆΔ] = ["Hawk Feather", "From a deadly hawk."];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⲆᐃⲆ] = [Δ[225], "Food : 20", "Water : 10"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆⵠⵠ] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆⲆ] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠᐃᐃ] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⲆᐃΔ] = ["Watermelon Seed", "Grows into Watermelon", Δ[512], "Growth: 180s", "Need water: 3min 20s", Δ[261], Δ[88]];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔⲆⲆ] = ["Reidite Door", "Noboby can destroy it. Except very reckless", Δ[470], "On-Hit Damage: 1", "Durability: 4000"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⵠᐃΔ] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠΔᐃ] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⲆᐃ] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", Δ[222]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃᐃⲆ] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", Δ[475]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃⵠⵠ] = ["Wood Door Spike", "Can be opened or closed by you or your friends", Δ[470], "On-Hit Damage: 1", "Durability: 100"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⵠⲆⵠ] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆⵠΔⲆ] = ["Gold Door Spike", 'Are you rebuilding the "el dorado?"', "Damage: 15", "On-Hit Damage: 2", Δ[261]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔΔⲆⲆ] = ["Diamond Door Spike", "For a shining house", "Damage: 25", Δ[203], "Durability: 800"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠⲆΔ] = ["Amethyst Door Spike", "Is your house a locked safe?", Δ[178], Δ[203], "Durability: 1600"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⲆⲆ] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⲆΔᐃ] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆⲆᐃⵠ] = ["Carrot Seed", "Grows into Carrot", Δ[512], "Growth: 30s", "Need water: 1min 40s", Δ[467], Δ[88]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆⵠᐃ] = ["Tomato Seed", "Grows into Tomato", Δ[512], "Growth: 30s", "Need water: 1min 40s", Δ[467], Δ[88]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠΔᐃΔ] = ["Pitchfork", "Perfect for gathering"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔᐃΔ] = ["Golden Pitchfork", "Essential for a real farmer."];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠᐃⲆᐃᐃ] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆⵠΔⵠ] = [Δ[59], "Eat it or sell it in exchange for wood or stone", "Food : 12"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⲆⵠΔⵠ] = [Δ[59], "Eat it or sell it in exchange for gold", "Food : 25"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃΔⲆⵠΔ] = [Δ[59], "Eat it or sell it in exchange for diamond", "Food : 50"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⵠᐃᐃⵠΔ] = [Δ[59], "Eat it or sell it in exchange for amethyst", "Food : 75"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃΔⲆⲆⵠ] = [Δ[59], "Eat it or sell it in exchange for reidite", "Food : 100"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⵠᐃΔ] = ["Lava Cube", "You feel an immense power emanating from this cube"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠⵠⲆ] = ["Lava Orb", "You feel an immense power emanating from this orb"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⲆⵠ] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃⵠΔ] = ["Lava Spear", "Doing good or doing evil", Δ[251], "Building Damage: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃΔⵠ] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃᐃⵠ] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆⵠᐃΔ] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠⵠ] = ["Reidite Sword", "Really useful against Lava Monsters", Δ[178], "Building Damage: 10"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔΔⵠⲆ] = ["Flame", "It's hot!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠΔⲆ] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆᐃΔ] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔᐃⵠ] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠⵠᐃ] = ["Reidite", "The ultimate ore"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⵠᐃ] = ["Dragon Cube", "You feel a great power emanating from this cube"];
		ⲆⵠⲆⵠ[22] = [Δ[562]];
		ⲆⵠⲆⵠ[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
		ⲆⵠⲆⵠ[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
		ⲆⵠⲆⵠ[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
		ⲆⵠⲆⵠ[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
		ⲆⵠⲆⵠ[27] = ['You were trampled by that boar. From now on, your new nickname is "the doormat".'];
		ⲆⵠⲆⵠ[28] = ['With a force of 3300 newtons, the shock wave from the closing of the crab king\'s claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the "crab rave"'];
		ⲆⵠⲆⵠ[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
		ⲆⵠⲆⵠ[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
		ⲆⵠⲆⵠ[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
		ⲆⵠⲆⵠ[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
		ⲆⵠⲆⵠ[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
		ⲆⵠⲆⵠ[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
		ⲆⵠⲆⵠ[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
		ⲆⵠⲆⵠ[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
		ⲆⵠⲆⵠ[37] = ['You hear "Avada Kedavra!" before you turn to ashes.'];
		ⲆⵠⲆⵠ[38] = ["You died crushed by an angry baby mammoth."];
		ⲆⵠⲆⵠ[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
		ⲆⵠⲆⵠ[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠΔⵠⲆ] = [Δ[479], Δ[181], Δ[155]];
		ΔⲆⲆ[ΔΔΔΔ.ΔⵠⲆⵠΔⵠⲆ] = "A sandstorm is approaching in a few seconds.";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⲆⲆⵠⲆΔⵠ] = "The sandstorm will soon stop.";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆⲆⵠΔᐃⲆ] = "A blizzard is approaching in a few seconds.";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆⵠΔⲆᐃΔ] = "The blizzard will soon stop.";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⵠⲆᐃⵠ] = Δ[23];
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆΔΔᐃⲆᐃ] = Δ[455];
		ΔⲆⲆ[ΔΔΔΔ.ΔᐃΔᐃⲆΔⵠ] = Δ[327];
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⵠⲆⵠⲆᐃ] = Δ[365];
		ΔⲆⲆ[ΔΔΔΔ.POINTS] = Δ[449];
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠⲆⵠΔΔΔ] = Δ[219];
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⵠᐃᐃᐃⵠ] = Δ[576];
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆⵠᐃⲆⲆΔ] = Δ[525];
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⲆⲆⵠᐃᐃ] = Δ[202];
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⲆⲆΔⵠᐃ] = Δ[ᐃΔⲆⵠ];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃᐃ] = [Δ[308], Δ[508], Δ[29]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⲆ] = [Δ[368], Δ[187], "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", Δ[579], Δ[22]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆΔⲆ] = [Δ[550], Δ[25], Δ[310], Δ[167], "Players Defense: 5", "Animals Defense: 19"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠΔΔ] = [Δ[514], Δ[97], Δ[267], Δ[185], Δ[261]];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[123])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[371];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[443])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[346];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[545])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[136];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[158])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[256];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[303])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[366];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[253])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = " Collect 1 dragon heart inside the cave";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[290])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[515];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[183])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[284];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[238])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[34];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[489])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[50];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[134])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "100 bread in winter, alone, without come back";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[493])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[518];
		for (var Δᐃ = ⲆⲆⵠⲆ; 7 > Δᐃ; Δᐃ++) document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[19] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[491];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[359])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[522];
		ΔⲆⲆ[Ⲇᐃ.Ⲇᐃᐃⵠᐃ] = ["Hand"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⲆΔ] = ["Dirt", "Dirty!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃΔⵠ] = ["Sand", "I got it in my eyes!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⲆ] = ["Wood", "You can't get enough of it!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃ] = ["Stone", "Also called a rock"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃ] = ["Gold", "Be generous, give it to others"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃᐃ] = ["Diamond", "What will you make with it?"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃ] = ["Amethyst", "It's Mauve like Lapa"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆⵠ] = ["Flour", "Used in cooking"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃᐃᐃⲆ] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆΔⵠ] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠΔ] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃΔⵠ] = ["Cooked meat", "A rare steak, please", "Food: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆᐃ] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃⲆ] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆᐃⵠ] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔⵠⵠ] = [Δ[335], "Tastes like Krabby Patty", "Food: 100"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃΔ] = ["Candies", "Only for children!", Δ[155]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠΔ] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆᐃ] = ["Garland", "Perfect decoration for roofs"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔΔⵠ] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", Δ[467], Δ[88]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃⵠ] = ["Berry", "Berry tasty!", Δ[29]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃⲆⵠ] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", Δ[467], Δ[88]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔᐃᐃ] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠⵠⵠⵠ] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", Δ[467], Δ[88]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠᐃᐃ] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆᐃ] = ["Garlic Seed", "Very dangerous for vampires", Δ[197], Δ[512], "Growth: 1min 10s", "Need water: 1min 40s", Δ[467], Δ[88]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃⲆΔ] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⲆ] = ["Thorn bush Seed", "Can damage your enemies", Δ[197], Δ[512], "Growth: 15s", "Need water: 3min", Δ[35], Δ[88]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠΔⵠ] = ["Thorn bush", "It stings!"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆᐃⲆ] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", Δ[222]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠⲆ] = ["Ice", "Useful for making cakes and water"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⵠ] = ["Wrench", "To repair doors, walls and spike", Δ[112]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆⵠ] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⲆ] = ["Rabbit Fur", "That rabbit was so cute..."];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠΔᐃ] = ["Pure Fur", "You're a bread factory"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⵠ] = ["Dark Fur", "You get ready to do something wrong"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃΔ] = ["Winter Fur", "These animals just wanted a hug..."];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠᐃⲆ] = ["Scales", "It smells like fish!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔΔ] = ["Kraken Skin", "Weren't you too scared?"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⲆᐃ] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆΔᐃ] = ["Big Firecamp", "Warm you up more time!", Δ[261], "Lifetime: 6min"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⲆⵠ] = ["Workbench", "Very useful to craft all kinds of objects"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⵠⵠ] = ["Cord", "Used in crafting Hats and Bag"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⲆⲆ] = ["Diamond Cord", "Used in crafting Special Hats"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⵠΔ] = ["Chest", "Allows you to store items", "Durability: 500"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔΔΔ] = ["Wood Sword", "Does that work?", "Damage: 12", Δ[22]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃⲆⵠ] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆΔΔ] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃᐃⲆ] = ["Diamond Sword", "You can feel the power", Δ[251], "Building Damage: 8"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆⲆ] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", Δ[251], "Building Damage: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⵠᐃ] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃᐃ] = ["Dragon Sword", "No mercy!", Δ[178], "Building Damage: 10"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⲆᐃ] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⲆⵠΔ] = ["Wood Pickaxe", "Can harvest only stone and wood", Δ[377]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠᐃ] = ["Stone Pickaxe", "Can harvest wood, stone and gold", Δ[112]];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠᐃᐃᐃ] = ["Gold Pickaxe", "Can also harvest diamond", Δ[280], Δ[475]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⲆⲆᐃ] = ["Diamond Pickaxe", "Can also harvest amethyst", Δ[485], Δ[475]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔⵠⲆ] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", Δ[470], Δ[475]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⲆⲆ] = ["Stone Hammer", Δ[506], "Doesn't work well on diamond or amethyst", Δ[112], "Building Damage: 20"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠⲆ] = ["Gold Hammer", Δ[506], "Doesn't work well on amethyst", Δ[280], "Building Damage: 30"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔᐃ] = ["Diamond Hammer", Δ[506], Δ[485], "Building Damage: 40"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⵠⵠ] = ["Amethyst Hammer", Δ[506], Δ[470], "Building Damage: 50"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆΔΔ] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 95"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠᐃⲆ] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⵠΔ] = ["Stone Spear", "The beginning of evolution!", Δ[579], Δ[22]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆᐃ] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⵠⲆ] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆΔ] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔⵠᐃ] = ["Stone Shovel", Δ[214], Δ[385], Δ[112]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠᐃ] = ["Gold Shovel", Δ[214], Δ[385], Δ[280], "Buildings Damage: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⵠⵠ] = ["Diamond Shovel", Δ[214], Δ[385], Δ[485], "Buildings Damage: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔᐃⲆ] = ["Amethyst Shovel", Δ[214], Δ[385], Δ[470], "Buildings Damage: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃΔⲆ] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆⲆⵠΔ] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔΔΔΔ] = ["Gold Helmet", "AKA the helmet of the savages", Δ[328], Δ[140]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⵠΔΔ] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆΔⲆⵠ] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔΔⲆ] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⵠⲆ] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠⲆⲆ] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", Δ[521], "You also calm down aggressive monsters twice as fast"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠΔΔ] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", Δ[521]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃΔⵠ] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", Δ[521]];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔᐃⵠ] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", Δ[521]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⵠⲆⲆ] = ["Earmuffs", "Some kind of little chapka.", Δ[521]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆΔᐃ] = [Δ[21], "Also called a coat.", "Warmer outside water and in winter"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃᐃΔ] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆⲆᐃ] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠᐃᐃ] = ["Peasant", "Your plants grow faster", Δ[521]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⲆⵠ] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", Δ[521]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔΔΔ] = ["Winter Peasant", "Your plants grow faster", Δ[521]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⲆᐃⲆ] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔᐃⵠ] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", Δ[172]];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆᐃⲆ] = ["Dragon Orb", Δ[240]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠΔ] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠᐃΔ] = ["Green Gemstone", "You didn't cheat, promise?"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆᐃⲆ] = ["Orange Gemstone", "Only a real pirate can find it!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃⲆΔ] = ["Blue Gemstone", "For too kind people"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆᐃΔ] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", Δ[172]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆⵠ] = ["Orange Crown", "You suddenly feel very lucky", Δ[172]];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆⵠᐃ] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", Δ[172]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⵠΔΔ] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⵠΔ] = ["Empty Bucket", "You need to fill this bucket near a water source"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆⲆᐃ] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠⲆⲆ] = ["Empty Bottle", "You can fill this bottle near a water source"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⲆⲆΔ] = ["Empty Watering Can", "You must fill it with a water source to use it"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆᐃΔ] = ["Watering Can", "Allows watering of plants", Δ[377]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆⲆ] = ["Bag", "More space for your items!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔᐃᐃ] = ["Paper", "Used in book-crafting"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠᐃᐃⵠ] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", Δ[377]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔΔᐃ] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠⲆ] = ["Lock", "Allow you to lock your chest"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔⲆ] = ["Lock-pick", "Allows you to unlock one chest"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠᐃ] = [Δ[332], "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⵠᐃᐃ] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠⵠ] = ["Sign", "Leave a message to others", "Durability: 200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠᐃΔ] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆΔⵠ] = ["Well", "Allows bottle filling", Δ[35]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆⲆⲆ] = ["Wood Wall", "It's just a wall", Δ[35]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⵠ] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠΔ] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", Δ[222]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆΔ] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃΔᐃᐃ] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆᐃ] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠΔᐃᐃ] = ["Stone Spike", "I wouldn't want to be your enemy.", Δ[197], Δ[203], "Durability: 300"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔⵠⵠ] = ["Gold Spike", "You're so cruel.", Δ[178], Δ[203], "Durability: 600"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔᐃᐃ] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔⵠ] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⲆⵠ] = ["Wood Door", "Can be opened or closed by you or your friends", Δ[35]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃΔΔ] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃΔ] = ["Gold Door", 'Are you rebuilding the "el dorado?"', Δ[222]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠⲆ] = ["Diamond Door", "For a shining house", "Durability: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆΔ] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠⵠⵠⵠ] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", Δ[35]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠᐃ] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", Δ[222]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃⲆᐃ] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", Δ[222]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆΔᐃ] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆᐃᐃⲆⲆⵠ] = "You cannot join this server";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃⵠΔⲆ] = "Kicked: ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠⲆⵠᐃⵠΔ] = "Your key is already used by someone else";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆΔⵠᐃΔ] = "Your key is wrong";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⲆⵠΔ] = "You have an old version, you need to clear your cache";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠⲆᐃⲆΔⲆ] = "Your client version is too recent for this server. The server is being updated";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠⲆΔⲆⵠⵠ] = "Wrong password! To enter a password: https://starve.io/?password=...";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⵠⲆᐃⵠΔ] = "There are no more new resources";
		ΔⲆⲆ[ΔΔΔΔ.ΔⵠᐃⲆⵠᐃᐃ] = "You survived 1 day";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠΔᐃᐃᐃ] = "You survived ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃΔᐃΔⲆⲆ] = " days";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⲆΔⲆᐃ] = "You are dead ;-;";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠᐃⲆΔᐃⲆ] = "Server cannot find spawn location! Spam the play button!";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃⲆΔΔⵠ] = "Server is full! Spam the play button!";
		ΔⲆⲆ[ΔΔΔΔ.EMPTY] = "Resource is empty";
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⲆⵠᐃⵠⵠ] = "Inventory is full (right-click to empty items)";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃᐃⵠⵠ] = " is dead";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠⵠᐃⲆΔ] = "This is not the right tool";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⲆⵠⲆΔΔ] = "You joined a team";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⵠᐃⲆ] = '<span style="color: red;">You are dead</span>';
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃᐃⲆⲆⲆ] = " joined the team";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⵠⵠΔⲆᐃ] = "Your team was destroyed";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⵠⲆⲆΔⵠ] = "You left the team";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔᐃⵠᐃⲆ] = " left the team";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔΔᐃ] = "Someone stole your token :>";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⲆⲆΔᐃΔ] = "Choose a server";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆⲆ] = "players";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔⵠΔᐃΔ] = "total players";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠΔᐃⲆⲆⵠ] = "players on this mode";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔⲆΔⵠⲆ] = "Coming soon...";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[39]).placeholder = "Nickname";
		ⲆⵠⲆⵠ[ΔᐃΔ] = ["You were killed for no reason"];
		ⲆⵠⲆⵠ[1] = ["You starved to death, as the name of the game implies"];
		ⲆⵠⲆⵠ[ᐃⵠΔⲆ] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
		ⲆⵠⲆⵠ[ⲆΔΔⲆ] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
		ⲆⵠⲆⵠ[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
		ⲆⵠⲆⵠ[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
		ⲆⵠⲆⵠ[ᐃΔΔⵠΔ] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
		ⲆⵠⲆⵠ[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
		ⲆⵠⲆⵠ[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
		ⲆⵠⲆⵠ[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
		ⲆⵠⲆⵠ[ⵠⲆⲆᐃⵠ] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
		ⲆⵠⲆⵠ[ΔΔⵠⵠΔ] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
		ⲆⵠⲆⵠ[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
		ⲆⵠⲆⵠ[ΔⵠⵠΔᐃ] = ["You died of thirst. Better drink your own piss."];
		ⲆⵠⲆⵠ[ΔΔⲆΔΔ] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
		ⲆⵠⲆⵠ[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
		ⲆⵠⲆⵠ[ᐃⵠⵠⲆⲆ] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
		ⲆⵠⲆⵠ[ⲆᐃⵠⲆΔΔⵠ] = ["Your skin's falling apart, the sun killed you."];
		ⲆⵠⲆⵠ[ΔⵠⵠᐃΔⵠⵠ] = ["Garlic stored in your pockets boiled your brain."];
		ⲆⵠⲆⵠ[ⵠⲆⵠⲆⵠ] = ["As a vampire, don't stand near the garlic cloves."];
		ⲆⵠⲆⵠ[20] = ["You ate garlic as a vampire, what did you expect?"];
		ⲆⵠⲆⵠ[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
		ᐃⵠᐃΔΔ = Δ[102];
		ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", Δ[44], "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"]
	};
	const ΔΔᐃΔΔ = ⲆᐃⵠᐃⲆ;

	function ΔⲆᐃΔⵠⲆⵠ(ΔⲆΔᐃⲆ, ⲆⵠⵠΔⲆᐃⵠ, ⲆᐃⲆⲆⲆⲆᐃ, ᐃⵠⵠΔᐃⵠΔ) {
		const ΔΔᐃⲆⲆᐃⲆ = ~(ΔⲆΔᐃⲆ & 18734) & 18734 | ~(18734 & ΔⲆΔᐃⲆ) & ΔⲆΔᐃⲆ;
		const ΔᐃⲆᐃΔⲆⲆ = (1 + 22695477 * (ⲆⵠⵠΔⲆᐃⵠ + 45231)) % 4294967296;
		const ᐃΔⲆⵠⲆⲆΔ = (22695477 * (21388 + ⲆᐃⲆⲆⲆⲆᐃ) + 1) % 4294967296;
		const ⲆⲆⲆⵠⲆⲆⵠ = (ᐃⵠⵠΔᐃⵠΔ | 11128) & ~(ᐃⵠⵠΔᐃⵠΔ & 11128);
		const ⵠΔᐃⵠⵠⵠⲆ = ΔⵠΔⲆΔᐃⲆ(ΔΔᐃⲆⲆᐃⲆ, ΔᐃⲆᐃΔⲆⲆ, ᐃΔⲆⵠⲆⲆΔ, ⲆⲆⲆⵠⲆⲆⵠ, ΔΔᐃⲆⲆᐃⲆ);
		const ⲆᐃΔⲆⲆΔᐃ = ΔⲆᐃᐃᐃⵠᐃ(ΔᐃⲆᐃΔⲆⲆ, ᐃΔⲆⵠⲆⲆΔ, ⲆⲆⲆⵠⲆⲆⵠ, ΔΔᐃⲆⲆᐃⲆ, ΔᐃⲆᐃΔⲆⲆ, ᐃΔⲆⵠⲆⲆΔ);
		const ⲆᐃΔΔⵠⵠΔ = (38565 + (ⵠΔᐃⵠⵠⵠⲆ ^ ⲆᐃΔⲆⲆΔᐃ)) % 65443;
		return ⲆᐃΔΔⵠⵠΔ
	}
	const ᐃⲆᐃᐃΔⵠᐃ = ᐃΔⵠⵠⵠ;

	function ΔⵠⵠΔⲆΔᐃ(ⲆⵠᐃΔⵠ, ᐃᐃΔΔΔ) {
		const ΔΔᐃⲆⵠⲆᐃ = (40901 | ⲆⵠᐃΔⵠ) & ~(ⲆⵠᐃΔⵠ & 40901);
		const ⵠᐃⵠΔⵠᐃⵠ = (0 << (ᐃᐃΔΔΔ >> 8 & 255)) + (24 << (ᐃᐃΔΔΔ >> 24 & 255)) + (8 << (ᐃᐃΔΔΔ >> 16 & 255)) + (16 << (ᐃᐃΔΔΔ >> 0 & 255));
		const ΔⲆΔⲆᐃⲆⵠ = ᐃᐃⲆᐃⵠⲆᐃ(ΔΔᐃⲆⵠⲆᐃ, ⵠᐃⵠΔⵠᐃⵠ, ΔΔᐃⲆⵠⲆᐃ, ⵠᐃⵠΔⵠᐃⵠ, ΔΔᐃⲆⵠⲆᐃ);
		const ΔΔᐃΔⲆⵠⵠ = ΔᐃⵠⲆᐃᐃⵠ(ⵠᐃⵠΔⵠᐃⵠ, ΔΔᐃⲆⵠⲆᐃ, ⵠᐃⵠΔⵠᐃⵠ, ΔΔᐃⲆⵠⲆᐃ);
		const ΔⵠⲆᐃⲆⲆⲆ = (6282 + (ΔⲆΔⲆᐃⲆⵠ ^ ΔΔᐃΔⲆⵠⵠ)) % 65463;
		return ΔⵠⲆᐃⲆⲆⲆ
	}
	var ΔⲆᐃⵠⵠⵠⲆ = function() {
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⵠᐃ] = [Δ[240]];
		ⲆⵠⲆⵠ[22] = [Δ[562]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠΔⵠⲆ] = [Δ[479], Δ[181], Δ[155]];
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⵠⲆᐃⵠ] = Δ[23];
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆΔΔᐃⲆᐃ] = Δ[455];
		ΔⲆⲆ[ΔΔΔΔ.ΔᐃΔᐃⲆΔⵠ] = Δ[327];
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⵠⲆⵠⲆᐃ] = Δ[365];
		ΔⲆⲆ[ΔΔΔΔ.POINTS] = Δ[449];
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠⲆⵠΔΔΔ] = Δ[219];
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⵠᐃᐃᐃⵠ] = Δ[576];
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆⵠᐃⲆⲆΔ] = Δ[525];
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⲆⲆⵠᐃᐃ] = Δ[202];
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⲆⲆΔⵠᐃ] = Δ[ⵠⲆⵠΔ];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃᐃ] = [Δ[308], Δ[508], Δ[29]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⲆ] = [Δ[368], Δ[187], Δ[579], Δ[22]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆΔⲆ] = [Δ[550], Δ[25], Δ[310], Δ[167], Δ[328], Δ[140]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠΔΔ] = [Δ[514], Δ[97], Δ[267], Δ[185], Δ[261]];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[123])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[371];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[443])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[346];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[545])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[136];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[158])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[256];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[303])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[366];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[253])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[27];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[290])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[515];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[183])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[284];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[238])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[34];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[489])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[50];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[134])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[374];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[493])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[518];
		for (var Δᐃ = ⵠᐃΔⲆ; ⲆⵠΔⲆⵠ > Δᐃ; Δᐃ++) document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[ΔⲆⵠⵠⵠ] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[491];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[359])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[522];
		ΔⲆⲆ[Ⲇᐃ.Ⲇᐃᐃⵠᐃ] = ["Рука"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⲆΔ] = ["Земля", "Грязно!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃΔⵠ] = ["Песок", "Он в моих глазах!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⲆ] = ["Дерево", "Постоянно нужно больше!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃ] = ["Камень", "Твердый"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃ] = ["Золото", "Будьте щедры, давайте его другим"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃᐃ] = ["Алмаз", "Что вы создадите с помощью него?"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃ] = ["Аметист", "Он сиреневый, как Lapa"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆⵠ] = ["Мука", "Используется в готовке"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃᐃᐃⲆ] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆΔⵠ] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠΔ] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃΔⵠ] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆᐃ] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃⲆ] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆᐃⵠ] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔⵠⵠ] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃΔ] = ["Конфеты", "Только для детей!", "Еда: 20"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠΔ] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆᐃ] = ["Гирлянда", "Прекрасная декорация для крыши"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔΔⵠ] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", Δ[497], Δ[46]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃⵠ] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃⲆⵠ] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", Δ[497], Δ[46]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔᐃᐃ] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠⵠⵠⵠ] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", Δ[497], Δ[46]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠᐃᐃ] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆᐃ] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", Δ[497], Δ[46]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃⲆΔ] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⲆ] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", Δ[166], Δ[46]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠΔⵠ] = ["Колючий Куст", "Это больно!"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆᐃⲆ] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", Δ[271]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠⲆ] = ["Лёд", "Используется для изготовления тортов и воды"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⵠ] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", Δ[488]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆⵠ] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⲆ] = ["Шкура Зайца", "Этот кролик был таким милым..."];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠΔᐃ] = ["Чистая Шкура", "Вы - фабрика хлеба"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⵠ] = ["Чёрная Шкура", "Вы готовы делать зло."];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃΔ] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠᐃⲆ] = ["Чешуя", "Она пахнет рыбой!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔΔ] = ["Шкура Кракена", "Вы не испугались?"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⲆᐃ] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆΔᐃ] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⲆⵠ] = ["Верстак", "Необходим для создания многих предметов"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⵠⵠ] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⲆⲆ] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⵠΔ] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔΔΔ] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃⲆⵠ] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆΔΔ] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃᐃⲆ] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆⲆ] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⵠᐃ] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃᐃ] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⲆᐃ] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⲆⵠΔ] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠᐃ] = ["Каменная Кирка", "Может добывать дерево, камень и золото", Δ[488]];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠᐃᐃᐃ] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", Δ[107]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⲆⲆᐃ] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", Δ[107]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔⵠⲆ] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", Δ[107]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⲆⲆ] = ["Каменный молот", Δ[516], "Плохо разрушает алмазные и аметистовые здания", Δ[488], "Урон по строениям: 20"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠⲆ] = ["Золотой Молот", Δ[516], "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔᐃ] = ["Алмазный Молот", Δ[516], "Урон: 4", "Урон по строениям: 40"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⵠⵠ] = ["Аметистовый Молот", Δ[516], "Урон: 5", "Урон по строениям: 50"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆΔΔ] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠᐃⲆ] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⵠΔ] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆᐃ] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⵠⲆ] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆΔ] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔⵠᐃ] = ["Каменная Лопата", Δ[431], Δ[404], Δ[488]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠᐃ] = ["Золотая Лопата", Δ[431], Δ[404], "Урон: 3", Δ[107]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⵠⵠ] = ["Алмазная Лопата", Δ[431], Δ[404], "Урон: 4", Δ[107]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔᐃⲆ] = ["Аметистовая Лопата", Δ[431], Δ[404], "Урон: 5", "Урон по стреониям: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃΔⲆ] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆⲆⵠΔ] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔΔΔΔ] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⵠΔΔ] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆΔⲆⵠ] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⵠⲆ] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠⲆⲆ] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", Δ[80]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠΔΔ] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", Δ[80]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃΔⵠ] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", Δ[80]];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔᐃⵠ] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", Δ[80]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⵠⲆⲆ] = ["Теплые Наушники", "Какая-то маленькая шапка.", Δ[80]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆΔᐃ] = ["Шапка", "Так же называется пальтом.", Δ[80]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃᐃΔ] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠᐃᐃ] = ["Крестьянская Туника", "Ваши растения растут быстрее", Δ[80]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⲆⵠ] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", Δ[80]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔΔΔ] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", Δ[80]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⲆᐃⲆ] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔᐃⵠ] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", Δ[468]];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆᐃⲆ] = ["Шар Дракона", "Даётся за квест"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠΔ] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠᐃΔ] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆᐃⲆ] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃⲆΔ] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆᐃΔ] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", Δ[468]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆⵠ] = ["Оранжевая Корона", "Вам очень повезло", Δ[468]];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆⵠᐃ] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", Δ[468]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⵠΔΔ] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⵠΔ] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆⲆᐃ] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠⲆⲆ] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⲆⲆΔ] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆᐃΔ] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆⲆ] = ["Рюкзак", "Больше места для ваших предметов!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔᐃᐃ] = ["Бумага", "Используется при создании книги"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠᐃᐃⵠ] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔΔᐃ] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠⲆ] = ["Замок", "Позволяет вам закрыть ваш сундук"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔⲆ] = ["Ключ", "Даёт вам открыть один запертый сундук"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠᐃ] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⵠᐃᐃ] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠⵠ] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠᐃΔ] = ["Крыша", "Немного скрывает вас и согревает!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆΔⵠ] = ["Колодец", "Позволяет заполнить бутылку", Δ[166]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆⲆⲆ] = ["Деревянная Стена", "Это просто стена", Δ[166]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⵠ] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠΔ] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", Δ[271]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆΔ] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃΔᐃᐃ] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆᐃ] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠΔᐃᐃ] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔⵠⵠ] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔᐃᐃ] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔⵠ] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⲆⵠ] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", Δ[166]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃΔΔ] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃΔ] = ["Золотая Дверь", 'Вы перестраиваете "Эль Дорадо?"', Δ[271]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠⲆ] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆΔ] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠⵠⵠⵠ] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", Δ[166]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠᐃ] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", Δ[271]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃⲆᐃ] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", Δ[271]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆΔᐃ] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆᐃᐃⲆⲆⵠ] = "Вы не можете зайти на этот сервер";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃⵠΔⲆ] = "Выгнаны: ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠⲆⵠᐃⵠΔ] = "Ваш ключ уже используется кем-то";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆΔⵠᐃΔ] = "Ваш ключ неправильный";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⲆⵠΔ] = "У вас старая версия, вам нужно очистить кеш";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⵠⲆᐃⵠΔ] = "Ресурсов больше нет";
		ΔⲆⲆ[ΔΔΔΔ.ΔⵠᐃⲆⵠᐃᐃ] = "Вы выжили 1 день";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠΔᐃᐃᐃ] = "Вы выжили ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃΔᐃΔⲆⲆ] = " дней";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⲆΔⲆᐃ] = "Вы умерли ;-;";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠᐃⲆΔᐃⲆ] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃⲆΔΔⵠ] = "Сервер заполнен! Спамьте кнопку играть!";
		ΔⲆⲆ[ΔΔΔΔ.EMPTY] = "Ресурсы закончились";
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⲆⵠᐃⵠⵠ] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃᐃⵠⵠ] = " умер";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠⵠᐃⲆΔ] = "Это не тот инструмент";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⲆⵠⲆΔΔ] = "Вы вошли в команду";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⵠᐃⲆ] = "Вы умерли";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃᐃⲆⲆⲆ] = " вошёл в команду";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⵠⵠΔⲆᐃ] = "Ваша команда была разрушена";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⵠⲆⲆΔⵠ] = "Вы покинули команду";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔᐃⵠᐃⲆ] = " покинул команду";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔΔᐃ] = "Кто-то использует ваш токен :>";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⲆⲆΔᐃΔ] = "Выберите сервер";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆⲆ] = "игроков";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔⵠΔᐃΔ] = "игроков всего";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠΔᐃⲆⲆⵠ] = "игроков в этом режиме";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔⲆΔⵠⲆ] = "Скоро...";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[39]).placeholder = "Имя";
		ⲆⵠⲆⵠ[0] = ["Вы были убиты без причины"];
		ⲆⵠⲆⵠ[1] = ["Вы умерли от голода, как название игры подразумевает это"];
		ⲆⵠⲆⵠ[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
		ⲆⵠⲆⵠ[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
		ⲆⵠⲆⵠ[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
		ⲆⵠⲆⵠ[ⵠᐃᐃⵠᐃ] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
		ⲆⵠⲆⵠ[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
		ⲆⵠⲆⵠ[ⵠⵠᐃΔᐃ] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
		ⲆⵠⲆⵠ[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
		ⲆⵠⲆⵠ[ΔΔΔᐃΔΔΔ] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
		ⲆⵠⲆⵠ[ⲆΔⲆⲆⵠ] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
		ⲆⵠⲆⵠ[ⲆⵠΔΔᐃ] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
		ⲆⵠⲆⵠ[ᐃⲆⵠΔⵠ] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
		ⲆⵠⲆⵠ[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
		ⲆⵠⲆⵠ[ⵠⲆⵠⲆΔᐃⵠ] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
		ⲆⵠⲆⵠ[ΔⲆΔⵠⲆ] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
		ⲆⵠⲆⵠ[ᐃⲆⲆᐃΔ] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
		ⲆⵠⲆⵠ[17] = ["Твоя кожа разваливается, солнце убило тебя"];
		ⲆⵠⲆⵠ[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
		ⲆⵠⲆⵠ[ΔⲆⵠⵠⵠ] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
		ⲆⵠⲆⵠ[ᐃΔⲆΔᐃ] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
		ⲆⵠⲆⵠ[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
		ᐃⵠᐃΔΔ = Δ[102];
		ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", Δ[44], "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"]
	};
	const ⵠΔΔⵠⲆⵠᐃ = ⲆⵠⵠⵠΔᐃΔ;
	var ⵠⵠΔⵠⵠᐃᐃ = function() {
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⵠᐃ] = [Δ[240]];
		ⲆⵠⲆⵠ[22] = [Δ[562]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠΔⵠⲆ] = [Δ[479], Δ[181], Δ[155]];
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⵠⲆᐃⵠ] = Δ[23];
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆΔΔᐃⲆᐃ] = Δ[455];
		ΔⲆⲆ[ΔΔΔΔ.ΔᐃΔᐃⲆΔⵠ] = Δ[327];
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⵠⲆⵠⲆᐃ] = Δ[365];
		ΔⲆⲆ[ΔΔΔΔ.POINTS] = Δ[449];
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠⲆⵠΔΔΔ] = Δ[219];
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⵠᐃᐃᐃⵠ] = Δ[576];
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆⵠᐃⲆⲆΔ] = Δ[525];
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⲆⲆⵠᐃᐃ] = Δ[202];
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⲆⲆΔⵠᐃ] = Δ[ΔⲆᐃⲆ];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃᐃ] = [Δ[308], Δ[508], Δ[29]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⲆ] = [Δ[368], Δ[187], Δ[579], Δ[22]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆΔⲆ] = [Δ[550], Δ[25], Δ[310], Δ[167], Δ[328], Δ[140]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠΔΔ] = [Δ[514], Δ[97], Δ[267], Δ[185], Δ[261]];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[123])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[371];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[443])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[346];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[545])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[136];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[158])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[256];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[303])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[366];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[253])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[27];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[290])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[515];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[183])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[284];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[238])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[34];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[489])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[50];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[134])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[374];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[493])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[518];
		for (var Δᐃ = ⵠⲆᐃ; ⵠⵠⵠⲆΔ > Δᐃ; Δᐃ++) document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[ⵠᐃⵠᐃΔⲆⵠ] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[491];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[359])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[522];
		ΔⲆⲆ[Ⲇᐃ.Ⲇᐃᐃⵠᐃ] = ["mão"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⲆΔ] = ["terra", "está sujo!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃΔⵠ] = ["areia", "entrou nos meus olhos!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⲆ] = ["madeira", "você não pode pegar o suficiente disso!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃ] = ["pedra", "também chamado rocha"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃ] = ["ouro", "seja generoso, dê para outros"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃᐃ] = ["diamante", "o que você irá fazer com isso?"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃ] = ["ametista", "é mauve como lapa"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆⵠ] = ["farinha", "usada na cozinha"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃᐃᐃⲆ] = ["biscoito", "biscoito da vovó", "comida: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆΔⵠ] = ["bolo", "bolo dos sonhos para gourmets", Δ[330]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠΔ] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃΔⵠ] = ["carne assada", "um mal passado, por favor", "comida: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆᐃ] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃⲆ] = ["peixe assado", "com limão é perfeito", "comida: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆᐃⵠ] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔⵠⵠ] = ["sanduíche", "saboroso com rissol de krabby", Δ[330]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃΔ] = ["doces", "apenas para crianças!", Δ[330]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠΔ] = ["cana-de-açúcar", "prove, é delicioso!", Δ[330]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆᐃ] = ["pisca-pisca", "decoração perfeita de telhado"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔΔⵠ] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", Δ[538], "tempo de vida: 8 dias"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃⵠ] = ["berry", "Berry saborosa!", "comida: 10"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃⲆⵠ] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", Δ[538], "tempo de vida: 8 days"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔᐃᐃ] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠⵠⵠⵠ] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", Δ[538], "tempo de vida: 8 dias"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠᐃᐃ] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆᐃ] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", Δ[538], "tempo de vida: 8 dias"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃⲆΔ] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⲆ] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", Δ[399], "tempo de vida: 8 days"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠΔⵠ] = ["mato de espinhos", "pica!"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆᐃⲆ] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", Δ[323]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠⲆ] = ["gelo", "útil para fazer bolo e água"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⵠ] = ["chave inglesa", "para reparar portas, muros e muros com espinho", Δ[111]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆⵠ] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⲆ] = ["pele de coelho", "o coelho era tão fofo..."];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠΔᐃ] = ["pele pura", "você é uma fábrica de pão"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⵠ] = ["pele negra", "você está pronto para fazer algo errado"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃΔ] = ["pele de inverno", "ele só queria um abraço"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠᐃⲆ] = ["escala", "é pequeno como peixe!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔΔ] = ["pele do kraken", "você não está com medo?"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⲆᐃ] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆΔᐃ] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⲆⵠ] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⵠⵠ] = ["linha", "usada para fazer chapéus e mochila"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⲆⲆ] = ["linha de diamante", "usada para fazer chapéus especiais"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⵠΔ] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔΔΔ] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃⲆⵠ] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆΔΔ] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃᐃⲆ] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆⲆ] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⵠᐃ] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃᐃ] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⲆᐃ] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⲆⵠΔ] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔⲆᐃⲆΔⲆᐃ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", Δ[111]];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠᐃᐃᐃ] = ["picareta de ouro", "pode coletar diamante", "dano: 3", Δ[451]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⲆⲆᐃ] = ["picareta de diamante", "pode coletar tudo", "dano: 4", Δ[451]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔⵠⲆ] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", Δ[451]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⲆⲆ] = ["martelo de pedra", Δ[221], "não funciona bem no diamante e na ametista", Δ[111], "dano em construções: 20"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠⲆ] = ["martelo de ouro", Δ[221], "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔᐃ] = ["martelo de diamante", Δ[221], "dano: 4", "dano em construções: 40"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⵠⵠ] = ["martelo de ametista", Δ[221], "dano: 5", "dano em construções: 50"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆΔΔ] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠᐃⲆ] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⵠΔ] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆᐃ] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⵠⲆ] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆΔ] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔⵠᐃ] = ["pá de pedral", Δ[62], Δ[390], Δ[111]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠᐃ] = ["pá de ouro", Δ[62], Δ[390], "dano: 3", Δ[451]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⵠⵠ] = ["pá de diamante", Δ[62], Δ[390], "dano: 4", Δ[451]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔᐃⲆ] = ["pá de ametista", Δ[62], Δ[390], "dano: 5", Δ[451]];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃΔⲆ] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆⲆⵠΔ] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔΔΔΔ] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⵠΔΔ] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆΔⲆⵠ] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⵠⲆ] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠⲆⲆ] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠΔΔ] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃΔⵠ] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔᐃⵠ] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⵠⲆⲆ] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆΔᐃ] = [Δ[21], "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃᐃΔ] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠᐃᐃ] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⲆⵠ] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔΔΔ] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⲆᐃⲆ] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔᐃⵠ] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", Δ[412]];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆᐃⲆ] = ["esfera do dragão", "dado na questt"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠΔ] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠᐃΔ] = ["pedra verde", "você não vai trapacear, promete?"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆᐃⲆ] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃⲆΔ] = ["pedra azul", "para pessoas muito gentis"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆᐃΔ] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", Δ[412]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆⵠ] = ["coroa laranja", "de repente você se sente muito sortudo", Δ[412]];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆⵠᐃ] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", Δ[412]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⵠΔΔ] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⵠΔ] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆⲆᐃ] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠⲆⲆ] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⲆⲆΔ] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆᐃΔ] = ["regador", "permite regar as plantas", "dano: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆⲆ] = ["mochila", "mais espaço para seus itens!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔᐃᐃ] = ["papel", "usado para fazer o livro"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠᐃᐃⵠ] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔΔᐃ] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠⲆ] = ["fechadura", "permite você trancar seu baú"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔⲆ] = ["chave", "permite destrancar um baú"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠᐃ] = [Δ[332], "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⵠᐃᐃ] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠⵠ] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠᐃΔ] = ["telhado", "esconde você um pouco e te esquenta!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆΔⵠ] = ["poço", "permite encher garrafas", Δ[399]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆⲆⲆ] = ["muro de madeira", "você sabia que o muro dança?", Δ[399]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⵠ] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠΔ] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", Δ[323]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆΔ] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃΔᐃᐃ] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆᐃ] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠΔᐃᐃ] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔⵠⵠ] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔᐃᐃ] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔⵠ] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⲆⵠ] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", Δ[399]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃΔΔ] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃΔ] = ["porta de ouro", "você está re-construindo o el dorado?", Δ[323]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠⲆ] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆΔ] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠⵠⵠⵠ] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", Δ[399]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠᐃ] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", Δ[323]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃⲆᐃ] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", Δ[323]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆΔᐃ] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆᐃᐃⲆⲆⵠ] = "você não pode entrar no servidor";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃⵠΔⲆ] = "kickado: ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠⲆⵠᐃⵠΔ] = "sua chave está em uso por outra pessoa";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆΔⵠᐃΔ] = "sua chave está errada";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⲆⵠΔ] = "você tem uma versão velha, limpe seu cache";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⵠⲆᐃⵠΔ] = "não tem mais recursos";
		ΔⲆⲆ[ΔΔΔΔ.ΔⵠᐃⲆⵠᐃᐃ] = "você sobreviveu 1 dia";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠΔᐃᐃᐃ] = "você sobreviveu ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃΔᐃΔⲆⲆ] = " dias";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⲆΔⲆᐃ] = "você está morto ;-;";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠᐃⲆΔᐃⲆ] = "servidor não pôde achar um local de spawn! spam o botão de play!";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃⲆΔΔⵠ] = "servidor está cheio! spam o botão de play!";
		ΔⲆⲆ[ΔΔΔΔ.EMPTY] = "não tem recursos";
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⲆⵠᐃⵠⵠ] = "inventário está cheio (botão direito para deletar itens)";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃᐃⵠⵠ] = " está morto";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠⵠᐃⲆΔ] = "essa não é a ferramenta certa";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⲆⵠⲆΔΔ] = "você entrou no time";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⵠᐃⲆ] = "você está morto";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃᐃⲆⲆⲆ] = "entrou no time";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⵠⵠΔⲆᐃ] = "seu time foi destruido";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⵠⲆⲆΔⵠ] = "você saiu do time";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔᐃⵠᐃⲆ] = " saiu do time";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔΔᐃ] = "alguém roubou sua ficha :>";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⲆⲆΔᐃΔ] = "escolha um servidor";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆⲆ] = "jogadores";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔⵠΔᐃΔ] = "jogadores totais";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠΔᐃⲆⲆⵠ] = "jogadores nesse modo";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔⲆΔⵠⲆ] = "Coming soon...";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[39]).placeholder = "Apelido";
		ⲆⵠⲆⵠ[Δⵠⵠ] = ["você morreu sem motivo"];
		ⲆⵠⲆⵠ[1] = ["você morreu de fome, como o jogo diz"];
		ⲆⵠⲆⵠ[ⲆⲆᐃⲆ] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
		ⲆⵠⲆⵠ[ᐃⵠᐃⲆ] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
		ⲆⵠⲆⵠ[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
		ⲆⵠⲆⵠ[ᐃΔᐃⲆⲆ] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
		ⲆⵠⲆⵠ[ᐃΔⲆⵠⵠ] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
		ⲆⵠⲆⵠ[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
		ⲆⵠⲆⵠ[ⵠⲆΔⲆᐃ] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
		ⲆⵠⲆⵠ[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
		ⲆⵠⲆⵠ[ᐃⲆᐃⲆᐃ] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
		ⲆⵠⲆⵠ[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
		ⲆⵠⲆⵠ[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
		ⲆⵠⲆⵠ[ΔᐃΔᐃΔⵠᐃ] = ["você morreu de sede. melhor beber sua própria urina."];
		ⲆⵠⲆⵠ[ⲆⲆⲆⵠᐃⲆᐃ] = ["você sabia que você morre afogado? agora você sabe."];
		ⲆⵠⲆⵠ[ⲆΔⲆΔⵠⲆⲆ] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
		ⲆⵠⲆⵠ[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
		ⲆⵠⲆⵠ[ΔⲆⲆⲆⵠ] = ["sua pele caindo aos pedaços, o sol te matou."];
		ⲆⵠⲆⵠ[ⲆⲆΔᐃⵠⲆΔ] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
		ⲆⵠⲆⵠ[ΔⲆⵠⵠⵠ] = ["como vampiro, não chegue perto do alho."];
		ⲆⵠⲆⵠ[20] = ["você comeu alho como vampiro, o que você esperava?"];
		ⲆⵠⲆⵠ[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
		ᐃⵠᐃΔΔ = Δ[102];
		ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", Δ[44], "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"]
	};
	const ᐃⲆⲆΔⵠΔⲆ = ΔΔⵠΔⲆΔᐃ;

	function ΔⵠⵠᐃΔⲆΔ(ⵠⲆᐃΔⵠⲆⵠ, ΔⲆᐃⲆΔᐃΔ) {
		ⲆⲆᐃⲆᐃⵠⵠ(ᐃΔⲆⲆᐃ, ⵠⲆᐃΔⵠⲆⵠ, ΔⲆᐃⲆΔᐃΔ);
		const ⲆᐃⲆⲆⵠᐃⲆ = ⵠΔΔⵠⵠΔᐃ(ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[0]);
		const ᐃⲆⲆⵠΔⲆⲆⵠⲆ = ⲆΔⵠΔᐃΔⵠ(ᐃⲆⵠᐃ[ΔΔⲆΔ], ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[1]);
		const ᐃⲆⲆΔᐃⲆᐃ = ~(ⲆᐃⲆⲆⵠᐃⲆ & 17949) & (17949 | ⲆᐃⲆⲆⵠᐃⲆ);
		return ᐃⲆⲆΔᐃⲆᐃ
	}
	const Ⲇⵠᐃᐃⵠ = ΔΔⲆⵠΔ;

	function ᐃⵠΔⵠⲆⵠⲆ(ⵠⲆᐃΔⵠⲆⵠ, ΔⲆᐃⲆΔᐃΔ, ⲆΔᐃΔᐃΔⵠ, ⲆΔᐃᐃⵠΔᐃ) {
		const ᐃⵠΔᐃⵠⵠΔ = ~(ⵠⲆᐃΔⵠⲆⵠ & 4843) & (4843 | ⵠⲆᐃΔⵠⲆⵠ);
		const ⲆᐃᐃᐃΔΔΔ = (24 << (ΔⲆᐃⲆΔᐃΔ >> 24 & 255)) + (16 << (ΔⲆᐃⲆΔᐃΔ >> 0 & 255)) + (0 << (ΔⲆᐃⲆΔᐃΔ >> 16 & 255)) + (8 << (ΔⲆᐃⲆΔᐃΔ >> 8 & 255));
		const ⲆΔᐃⵠⲆⵠᐃ = ⲆΔᐃΔᐃΔⵠ ^ 26600;
		const ΔΔᐃⲆᐃⲆΔ = (2147483587 + (ⲆΔᐃᐃⵠΔᐃ + 37574) * 2147483629) % 2147483647;
		const ᐃⵠᐃΔⲆᐃΔ = Ⲇⵠᐃⵠⵠⵠᐃ(ᐃⵠΔᐃⵠⵠΔ, ⲆᐃᐃᐃΔΔΔ, ⲆΔᐃⵠⲆⵠᐃ, ΔΔᐃⲆᐃⲆΔ, ᐃⵠΔᐃⵠⵠΔ, ⲆᐃᐃᐃΔΔΔ);
		const ᐃⵠᐃⵠⵠⲆΔ = ᐃᐃⲆΔΔΔⲆ(ⲆΔᐃⵠⲆⵠᐃ, ΔΔᐃⲆᐃⲆΔ, ᐃⵠΔᐃⵠⵠΔ);
		const ⵠΔᐃⲆΔⵠᐃ = ((41434 + (ᐃⵠᐃΔⲆᐃΔ ^ ᐃⵠᐃⵠⵠⲆΔ)) * 2147483629 + 2147483587) % 2147483647;
		return ⵠΔᐃⲆΔⵠᐃ
	}

	function ΔⵠⵠΔⵠⲆⲆ(ᐃΔⲆᐃⵠΔⲆ, ᐃΔⵠⵠⵠⲆⵠ, ᐃᐃⵠⵠⵠ, ᐃᐃᐃᐃⲆⵠⵠ, ᐃⵠⵠⵠᐃⲆⲆ) {
		ⵠᐃΔⲆΔΔΔ(ᐃΔⲆⲆᐃ, ᐃΔⲆᐃⵠΔⲆ, ᐃΔⵠⵠⵠⲆⵠ, ᐃᐃⵠⵠⵠ, ᐃᐃᐃᐃⲆⵠⵠ, ᐃⵠⵠⵠᐃⲆⲆ);
		const ⵠᐃᐃΔᐃΔⲆ = ((163 + (ᐃⲆⵠᐃ[0] ^ ᐃⲆⵠᐃ[1])) * 48271 + 0) % 2147483647;
		const ⲆΔⵠⵠᐃΔⲆ = ⵠᐃᐃΔᐃΔⲆ ^ 54821;
		const ΔᐃⲆᐃⲆⲆⲆ = ⲆΔⵠⵠᐃΔⲆ ^ 20673;
		const ⵠᐃⵠᐃⲆᐃΔ = ~(ΔᐃⲆᐃⲆⲆⲆ & 47928) & 47928 | ~(47928 & ΔᐃⲆᐃⲆⲆⲆ) & ΔᐃⲆᐃⲆⲆⲆ;
		return ⵠᐃⵠᐃⲆᐃΔ
	}
	var ΔⵠΔⵠΔⵠΔ = function() {
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⵠᐃ] = [Δ[240]];
		ⲆⵠⲆⵠ[22] = [Δ[562]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠΔⵠⲆ] = [Δ[479], Δ[181], Δ[155]];
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⵠⲆᐃⵠ] = Δ[23];
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆΔΔᐃⲆᐃ] = Δ[455];
		ΔⲆⲆ[ΔΔΔΔ.ΔᐃΔᐃⲆΔⵠ] = Δ[327];
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⵠⲆⵠⲆᐃ] = Δ[365];
		ΔⲆⲆ[ΔΔΔΔ.POINTS] = Δ[449];
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠⲆⵠΔΔΔ] = Δ[219];
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⵠᐃᐃᐃⵠ] = Δ[576];
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆⵠᐃⲆⲆΔ] = Δ[525];
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⲆⲆⵠᐃᐃ] = Δ[202];
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⲆⲆΔⵠᐃ] = Δ[ⲆⲆᐃⲆ];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃᐃ] = [Δ[308], Δ[508], Δ[29]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⲆ] = [Δ[368], Δ[187], Δ[579], Δ[22]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆΔⲆ] = [Δ[550], Δ[25], Δ[310], Δ[167], Δ[328], Δ[140]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠΔΔ] = [Δ[514], Δ[97], Δ[267], Δ[185], Δ[261]];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[123])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[371];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[443])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[346];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[545])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[136];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[158])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[ⵠⲆⲆΔⵠⵠΔ];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[303])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[366];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[253])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[27];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[290])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[515];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[183])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[284];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[238])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[34];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[489])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[50];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[134])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[374];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[493])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[518];
		for (var Δᐃ = 0; 7 > Δᐃ; Δᐃ++) document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[ⲆΔⲆⵠΔᐃⲆ] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[491];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[359])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[522];
		ΔⲆⲆ[Ⲇᐃ.Ⲇᐃᐃⵠᐃ] = ["Mano"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⲆΔ] = ["Tierra", "¡Tan limpia como mis manos!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃΔⵠ] = ["Arena", "¡Tengo arena en mis ojos!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⲆ] = ["Madera", "¡Nunca hay suficiente!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃ] = ["Piedra", "También llamada roca."];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃ] = ["Oro", "Sé generoso, compártelo con los otros"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃᐃ] = ["Diamante", "¿Que vas a hacer con él?"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃ] = ["Amatista", "Es Mauve como Lapa"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆⵠ] = ["Harina", "Usada para cocinar."];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃᐃᐃⲆ] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆΔⵠ] = ["Tarta", "¡Cumpleaños Feliz!", Δ[233]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠΔ] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃΔⵠ] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆᐃ] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃⲆ] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆᐃⵠ] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔⵠⵠ] = ["Bocadillo", "Sabe como un Krabby Patty", Δ[233]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃΔ] = ["Caramelos", "¡Solo para niños/as!", Δ[233]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠΔ] = ["Caña de Azúcar", "Pruébala, es deliciosa", Δ[233]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆᐃ] = ["Guirnalda", "Perfecta para decorar el techo"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔΔⵠ] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", Δ[382], "Tiempo de vida: 8 Días"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃⵠ] = ["Baya", "No es venenosa.", "Comida: 10"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃⲆⵠ] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", Δ[382], "Tiempo de vida: 8 Días"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔᐃᐃ] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠⵠⵠⵠ] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", Δ[382], "Tiempo de vida: 8 Días"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠᐃᐃ] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆᐃ] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", Δ[382], "Tiempo de Vida: 8 Días"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃⲆΔ] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⲆ] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", Δ[568], "Tiempo de Vida: 8 Días"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠΔⵠ] = ["Planta de Espinas", "¡Te daña!"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆᐃⲆ] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", Δ[524]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠⲆ] = ["Hielo", "Bueno para hacer tartas y agua"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⵠ] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", Δ[273]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆⵠ] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⲆ] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠΔᐃ] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⵠ] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃΔ] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠᐃⲆ] = ["Escamas", "¡Huele a pescado!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔΔ] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⲆᐃ] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆΔᐃ] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⲆⵠ] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⵠⵠ] = ["Hilo", "Usado para craftear ropa y mochila"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⲆⲆ] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⵠΔ] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔΔΔ] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃⲆⵠ] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆΔΔ] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃᐃⲆ] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆⲆ] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⵠᐃ] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃᐃ] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⲆᐃ] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⲆⵠΔ] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠᐃ] = ["Pico de Piedra", "Puede minar hasta oro", Δ[273]];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠᐃᐃᐃ] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", Δ[28]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⲆⲆᐃ] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", Δ[28]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔⵠⲆ] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", Δ[28]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⲆⲆ] = ["Martillo de Piedra", Δ[40], "No funciona bien con diamante y amatista", Δ[273], "Daño para estructuras: 20"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠⲆ] = ["Martillo de Oro", Δ[40], "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔᐃ] = ["Martillo de Diamante", Δ[40], "Daño: 4", "Daño para estructuras: 40"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⵠⵠ] = ["Martillo de Amatista", Δ[40], "Daño: 5", "Daño para estructuras: 50"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆΔΔ] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠᐃⲆ] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⵠΔ] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆᐃ] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⵠⲆ] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆΔ] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔⵠᐃ] = ["Pala de Piedra", Δ[494], Δ[226], Δ[273]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠᐃ] = ["Pala de Oro", Δ[494], Δ[226], "Daño: 3", Δ[28]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⵠⵠ] = ["Pala de Diamante", Δ[494], Δ[226], "Daño: 4", Δ[28]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔᐃⲆ] = ["Pala de Amatista", Δ[494], Δ[226], "Daño: 5", Δ[28]];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃΔⲆ] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆⲆⵠΔ] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔΔΔΔ] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⵠΔΔ] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆΔⲆⵠ] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⵠⲆ] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠⲆⲆ] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠΔΔ] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃΔⵠ] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔᐃⵠ] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", Δ[541]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⵠⲆⲆ] = ["Orejeras", "Como un abrigo pequeño.", Δ[541]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆΔᐃ] = [Δ[21], "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃᐃΔ] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠᐃᐃ] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⲆⵠ] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", Δ[541]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔΔΔ] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", Δ[541]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⲆᐃⲆ] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔᐃⵠ] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆᐃⲆ] = ["Esfera del Dragón", "Dada en la misión"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠΔ] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠᐃΔ] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆᐃⲆ] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃⲆΔ] = ["Gema Azul", "Para gente muy amable"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆᐃΔ] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆⵠ] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆⵠᐃ] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⵠΔΔ] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⵠΔ] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆⲆᐃ] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠⲆⲆ] = ["Botella Vacia", "La puedes llenar de agua"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⲆⲆΔ] = ["Regadera Vacía", "La tienes que llenar de agua"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆᐃΔ] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆⲆ] = ["Mochila", "¡Mas espacio para tus cosas!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔᐃᐃ] = ["Hoja", "Usada para hacer un libro"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠᐃᐃⵠ] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔΔᐃ] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠⲆ] = ["Cerradura", "Te permite cerrar tu cofre"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔⲆ] = ["Llave", "Te permite abrir un cofre cerrado"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠᐃ] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⵠᐃᐃ] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠⵠ] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠᐃΔ] = ["Techo", "Te esconde un poco y te protege del frío"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆΔⵠ] = ["Fuente", "Permite rellenar botellas", Δ[568]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆⲆⲆ] = ["Pared de Madera", "Es solo una pared.", Δ[568]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⵠ] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠΔ] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", Δ[524]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆΔ] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃΔᐃᐃ] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆᐃ] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠΔᐃᐃ] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔⵠⵠ] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔᐃᐃ] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔⵠ] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⲆⵠ] = ["Puerta de Madera", "Puedes abrir y cerrarla ", Δ[568]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃΔΔ] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃΔ] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", Δ[524]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠⲆ] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆΔ] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠⵠⵠⵠ] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", Δ[568]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠᐃ] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", Δ[524]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃⲆᐃ] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", Δ[524]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆΔᐃ] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆᐃᐃⲆⲆⵠ] = "No puedes unirte a este servidor";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃⵠΔⲆ] = "Expulsado: ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠⲆⵠᐃⵠΔ] = "Tu llave ya está usada";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆΔⵠᐃΔ] = "Tu llave está mal";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⲆⵠΔ] = "Tienes una versión antigua, limpia tu cache";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⵠⲆᐃⵠΔ] = "No hay mas recursos";
		ΔⲆⲆ[ΔΔΔΔ.ΔⵠᐃⲆⵠᐃᐃ] = "Has sobrevivido 1 día";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠΔᐃᐃᐃ] = "Has sobrevivido ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃΔᐃΔⲆⲆ] = " días";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⲆΔⲆᐃ] = "Estás muerto ;-;";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠᐃⲆΔᐃⲆ] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃⲆΔΔⵠ] = "El servidor esta lleno, ¡spamea el botón de jugar!";
		ΔⲆⲆ[ΔΔΔΔ.EMPTY] = "Recurso vacio";
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⲆⵠᐃⵠⵠ] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃᐃⵠⵠ] = " está muerto";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠⵠᐃⲆΔ] = "Esta no es la herramienta correcta";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⲆⵠⲆΔΔ] = "Te has unido a un equipo";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⵠᐃⲆ] = "Estás muerto";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃᐃⲆⲆⲆ] = " se unió al equipo";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⵠⵠΔⲆᐃ] = "Tu equipo ha sido destruido";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⵠⲆⲆΔⵠ] = "Has dejado el equipo";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔᐃⵠᐃⲆ] = " dejo el equipo ";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔΔᐃ] = "Alguien te robó tu token :>";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⲆⲆΔᐃΔ] = "Elige un servidor";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆⲆ] = "jugadores";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔⵠΔᐃΔ] = "total de jugadores";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠΔᐃⲆⲆⵠ] = "Jugadores en este modo de juego";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔⲆΔⵠⲆ] = "Próximamente...";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[39]).placeholder = "Apodo";
		ⲆⵠⲆⵠ[ⲆⲆⵠⲆ] = ["Has muerto por ninguna razón"];
		ⲆⵠⲆⵠ[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
		ⲆⵠⲆⵠ[ⲆⲆΔΔ] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
		ⲆⵠⲆⵠ[ⵠⵠⵠⵠ] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
		ⲆⵠⲆⵠ[ⵠΔΔⵠ] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
		ⲆⵠⲆⵠ[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
		ⲆⵠⲆⵠ[Δᐃᐃⵠᐃ] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
		ⲆⵠⲆⵠ[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
		ⲆⵠⲆⵠ[ΔΔⵠⵠⵠ] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
		ⲆⵠⲆⵠ[ⵠᐃΔΔⲆ] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
		ⲆⵠⲆⵠ[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
		ⲆⵠⲆⵠ[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
		ⲆⵠⲆⵠ[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
		ⲆⵠⲆⵠ[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
		ⲆⵠⲆⵠ[ⲆⲆᐃⵠΔⵠⵠ] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
		ⲆⵠⲆⵠ[ΔⲆⵠⲆⵠᐃⵠ] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
		ⲆⵠⲆⵠ[ΔᐃⵠΔⵠ] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
		ⲆⵠⲆⵠ[17] = ["Tu piel se cayó, el sol te quemó."];
		ⲆⵠⲆⵠ[ⲆⲆΔᐃⵠⲆΔ] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
		ⲆⵠⲆⵠ[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
		ⲆⵠⲆⵠ[ᐃᐃⵠⵠⲆⲆⲆ] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
		ⲆⵠⲆⵠ[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
		ᐃⵠᐃΔΔ = Δ[102];
		ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", Δ[44], "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"]
	};
	const ΔᐃⵠΔΔ = ⲆⵠᐃΔᐃ;

	function ⵠΔΔⵠⵠΔᐃ(ΔᐃΔⲆᐃⲆⵠ, ⵠᐃᐃΔⲆΔⵠ, ⵠⵠⲆΔΔᐃΔ) {
		ΔⵠⲆᐃΔᐃⲆ(ᐃΔⲆⲆᐃ, ΔᐃΔⲆᐃⲆⵠ, ⵠᐃᐃΔⲆΔⵠ, ⵠⵠⲆΔΔᐃΔ);
		const ᐃΔᐃⵠᐃⵠⲆ = ⵠΔᐃΔΔⲆΔ(ᐃⲆⵠᐃ[ⵠᐃΔⲆ], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[ⵠⲆⵠΔ], ᐃⲆⵠᐃ[ⵠⵠΔᐃ]);
		const ᐃⲆΔΔΔΔⲆ = ΔⲆⵠⲆⲆⲆΔ(ᐃⲆⵠᐃ[Δᐃᐃ], ᐃⲆⵠᐃ[ⲆⲆⵠᐃ]);
		const ᐃΔᐃⵠΔⲆΔ = ((240 + (ᐃΔᐃⵠᐃⵠⲆ ^ ᐃⲆΔΔΔΔⲆ)) * 16807 + 0) % 2147483647;
		return ᐃΔᐃⵠΔⲆΔ
	}
	const ⵠⵠᐃⵠⲆΔⲆ = ΔᐃⲆⵠΔᐃᐃ;

	function ⲆⲆᐃᐃⵠΔᐃ(ᐃᐃⲆⲆᐃⲆⲆ, ᐃΔΔΔⵠᐃΔ, ⵠΔⲆⵠⵠΔⲆ, ΔⵠΔⲆΔⲆᐃ) {
		ΔΔΔⵠⲆⵠⲆ(ᐃΔⲆⲆᐃ, ᐃᐃⲆⲆᐃⲆⲆ, ᐃΔΔΔⵠᐃΔ, ⵠΔⲆⵠⵠΔⲆ, ΔⵠΔⲆΔⲆᐃ);
		const ⵠᐃⲆⲆⲆⲆⵠ = ⲆⲆΔΔᐃⲆⵠ(ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[ⲆⵠΔⲆ], ᐃⲆⵠᐃ[ᐃᐃᐃᐃ], ᐃⲆⵠᐃ[3]);
		const ⵠⲆⲆᐃᐃⵠⵠⵠᐃ = ⵠΔΔⵠⵠΔᐃ(ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[ⲆⵠⲆ], ᐃⲆⵠᐃ[Δⵠᐃᐃ]);
		const ΔᐃᐃΔᐃΔⲆ = (9107 | ⵠᐃⲆⲆⲆⲆⵠ) & ~(9107 & ⵠᐃⲆⲆⲆⲆⵠ);
		return ΔᐃᐃΔᐃΔⲆ
	}
	let ᐃⲆⵠᐃ = ⵠᐃΔᐃⲆ;
	let ᐃΔⲆⲆᐃ = ΔᐃᐃⵠⲆ;
	const ᐃⲆᐃΔⵠΔⲆ = ⵠⲆΔⵠᐃⵠⲆ;
	ⵠⲆΔⵠᐃⵠⲆ = function() {
		ᐃΔⲆⲆᐃ = ⲆΔⲆⵠⲆⲆⲆ(ⲆᐃⲆⵠⵠⲆᐃ(11));
		ᐃⲆⵠᐃ = ΔⵠⵠⲆΔᐃᐃ(ᐃΔⲆⲆᐃ);
		if (ᐃⲆᐃΔⵠΔⲆ) ᐃⲆᐃΔⵠΔⲆ()
	};
	const ⵠᐃⵠⲆ = ⲆⲆᐃⲆ;

	function ΔⲆᐃΔΔΔᐃ(ᐃᐃᐃⲆᐃᐃᐃ, ΔᐃⲆⲆⵠⲆⵠ, ᐃΔⵠΔⲆⵠΔ, ⵠΔΔⲆᐃⲆΔ, ᐃⲆΔⲆΔᐃⲆ) {
		const ΔⵠᐃⲆᐃⲆΔ = (29754 | ᐃᐃᐃⲆᐃᐃᐃ) & ~(29754 & ᐃᐃᐃⲆᐃᐃᐃ);
		const ⵠᐃΔΔⵠⲆⵠ = ~(10006 & ΔᐃⲆⲆⵠⲆⵠ) & ΔᐃⲆⲆⵠⲆⵠ | ~(ΔᐃⲆⲆⵠⲆⵠ & 10006) & 10006;
		const ΔᐃΔᐃᐃⵠΔ = (0 << (ᐃΔⵠΔⲆⵠΔ >> 8 & ⲆⲆΔⵠⲆ)) + (8 << (ᐃΔⵠΔⲆⵠΔ >> 16 & 255)) + (ΔⵠⵠⲆΔᐃΔ << (ᐃΔⵠΔⲆⵠΔ >> 0 & ⵠᐃᐃᐃⲆᐃⲆ)) + (24 << (ᐃΔⵠΔⲆⵠΔ >> 24 & 255));
		const ᐃᐃⵠᐃΔΔΔ = ⵠΔΔⲆᐃⲆΔ ^ 4559;
		const ΔⵠⵠΔⲆⵠΔ = (ΔⲆᐃΔΔ << (ᐃⲆΔⲆΔᐃⲆ >> 16 & 255)) + (16 << (ᐃⲆΔⲆΔᐃⲆ >> 24 & 255)) + (24 << (ᐃⲆΔⲆΔᐃⲆ >> 0 & 255)) + (0 << (ᐃⲆΔⲆΔᐃⲆ >> ⲆⲆΔᐃΔ & 255));
		const ᐃΔᐃΔᐃΔΔ = ᐃΔⵠⵠⲆⲆΔ(ΔⵠᐃⲆᐃⲆΔ, ⵠᐃΔΔⵠⲆⵠ, ΔᐃΔᐃᐃⵠΔ, ᐃᐃⵠᐃΔΔΔ, ΔⵠⵠΔⲆⵠΔ, ΔⵠᐃⲆᐃⲆΔ);
		const ⲆⵠᐃᐃⵠⲆⵠ = ⲆⲆΔⲆΔⵠⲆ(ⵠᐃΔΔⵠⲆⵠ, ΔᐃΔᐃᐃⵠΔ, ᐃᐃⵠᐃΔΔΔ, ΔⵠⵠΔⲆⵠΔ, ΔⵠᐃⲆᐃⲆΔ, ⵠᐃΔΔⵠⲆⵠ);
		const ⲆⵠΔΔⲆΔⲆ = (22695477 * ((ᐃΔᐃΔᐃΔΔ ^ ⲆⵠᐃᐃⵠⲆⵠ) + 30058) + 1) % 4294967296;
		return ⲆⵠΔΔⲆΔⲆ
	}

	function ⵠΔⲆⲆᐃΔⵠ(ⵠᐃⵠⵠⲆⵠⵠ, ⵠⲆᐃᐃⵠΔΔ, ⵠⵠⲆΔⲆⲆᐃ, ⲆΔΔᐃΔⵠⵠ) {
		const ⲆᐃⲆΔᐃΔΔ = (8 << (ⵠᐃⵠⵠⲆⵠⵠ >> 16 & ΔᐃⵠⵠⲆΔⲆ)) + (16 << (ⵠᐃⵠⵠⲆⵠⵠ >> 24 & 255)) + (0 << (ⵠᐃⵠⵠⲆⵠⵠ >> 8 & 255)) + (24 << (ⵠᐃⵠⵠⲆⵠⵠ >> 0 & 255));
		const ⵠⲆⲆΔⵠⲆΔⵠΔ = 61556 ^ ⵠⲆᐃᐃⵠΔΔ;
		const ᐃᐃⲆⲆᐃᐃⲆ = (24 << (ⵠⵠⲆΔⲆⲆᐃ >> 24 & 255)) + (16 << (ⵠⵠⲆΔⲆⲆᐃ >> ΔᐃΔ & 255)) + (0 << (ⵠⵠⲆΔⲆⲆᐃ >> ⲆᐃⵠⲆⵠ & 255)) + (8 << (ⵠⵠⲆΔⲆⲆᐃ >> 16 & ᐃⲆΔᐃᐃΔⵠ));
		const ᐃᐃⵠⵠⲆⵠⵠ = ~(36500 & ⲆΔΔᐃΔⵠⵠ) & ⲆΔΔᐃΔⵠⵠ | ~(ⲆΔΔᐃΔⵠⵠ & 36500) & 36500;
		const ᐃΔⲆᐃΔΔⵠ = ~(6221 & ⲆᐃⲆΔᐃΔΔ) & 6221 | ~(6221 & ⲆᐃⲆΔᐃΔΔ) & ⲆᐃⲆΔᐃΔΔ;
		const ΔⵠⲆΔΔⲆᐃ = (16 << ((ᐃΔⲆᐃΔΔⵠ ^ ᐃᐃⲆⲆᐃᐃⲆ) >> 0 & 255)) + (8 << ((ᐃΔⲆᐃΔΔⵠ ^ ᐃᐃⲆⲆᐃᐃⲆ) >> 8 & 255)) + (0 << ((ᐃΔⲆᐃΔΔⵠ ^ ᐃᐃⲆⲆᐃᐃⲆ) >> 24 & 255)) + (24 << ((ᐃΔⲆᐃΔΔⵠ ^ ᐃᐃⲆⲆᐃᐃⲆ) >> ΔΔⵠᐃⲆ & 255));
		const ⲆⲆᐃⲆⵠⲆⵠ = ((19222 + (ΔⵠⲆΔΔⲆᐃ ^ ᐃᐃⵠⵠⲆⵠⵠ)) * 1103515245 + 12345) % 2147483648;
		return ⲆⲆᐃⲆⵠⲆⵠ
	}
	var ΔⲆⵠⲆⲆⲆⲆ = function() {
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⵠᐃ] = [Δ[240]];
		ⲆⵠⲆⵠ[22] = [Δ[562]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠΔⵠⲆ] = [Δ[479], Δ[181], Δ[155]];
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⵠⲆᐃⵠ] = Δ[23];
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆΔΔᐃⲆᐃ] = Δ[455];
		ΔⲆⲆ[ΔΔΔΔ.ΔᐃΔᐃⲆΔⵠ] = Δ[327];
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⵠⲆⵠⲆᐃ] = Δ[365];
		ΔⲆⲆ[ΔΔΔΔ.POINTS] = Δ[449];
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠⲆⵠΔΔΔ] = Δ[219];
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⵠᐃᐃᐃⵠ] = Δ[576];
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆⵠᐃⲆⲆΔ] = Δ[525];
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⲆⲆⵠᐃᐃ] = Δ[202];
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⲆⲆΔⵠᐃ] = Δ[ⲆⲆΔΔ];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃᐃ] = [Δ[308], Δ[508], Δ[29]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⲆ] = [Δ[368], Δ[187], Δ[579], Δ[22]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆΔⲆ] = [Δ[550], Δ[25], Δ[310], Δ[167], Δ[328], Δ[140]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠΔΔ] = [Δ[514], Δ[97], Δ[267], Δ[185], Δ[261]];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[123])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[371];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[443])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[346];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[545])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[136];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[158])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[ⵠⲆⲆΔⵠⵠΔ];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[303])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[366];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[253])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[27];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[290])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[515];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[183])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[284];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[238])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[34];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[489])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[50];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[134])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[374];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[493])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[518];
		for (var Δᐃ = ⵠᐃΔⲆ; 7 > Δᐃ; Δᐃ++) document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[ΔΔⲆΔΔⲆᐃ] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[491];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[359])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[522];
		ΔⲆⲆ[Ⲇᐃ.Ⲇᐃᐃⵠᐃ] = ["Hand"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⲆΔ] = ["Boden", "Dreckig!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃΔⵠ] = ["Sand", "Ich habe es in meine Augen bekommen!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⲆ] = ["Holz", "Du kannst niemals zu viel haben!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃ] = ["Stein", "Auch Fels gennant"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃ] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃᐃ] = ["Diamant", "Was wirst du daraus machen?"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃ] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆⵠ] = ["Mehl", "wird fürs Backen gebraucht"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃᐃᐃⲆ] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆΔⵠ] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", Δ[57]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠΔ] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃΔⵠ] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆᐃ] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃⲆ] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆᐃⵠ] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔⵠⵠ] = [Δ[335], "Schmeckt wie Krabbenburger", Δ[57]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃΔ] = ["Süßigkeiten", "Nur für Kinder!", Δ[57]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠΔ] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", Δ[57]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆᐃ] = ["Girlande", "perfekter Schmuck für Dächer"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔΔⵠ] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", Δ[114], Δ[195]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃⵠ] = ["Beere", "Beeren lecker!", "Essen: 10"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃⲆⵠ] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", Δ[114], Δ[195]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔᐃᐃ] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠⵠⵠⵠ] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", Δ[114], Δ[195]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠᐃᐃ] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆᐃ] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", Δ[114], Δ[195]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃⲆΔ] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⲆ] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", Δ[264], Δ[195]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠΔⵠ] = ["Dornenbusch", "Es sticht!"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆᐃⲆ] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", Δ[174]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠⲆ] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⵠ] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", Δ[572]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆⵠ] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⲆ] = ["Hasenfell", "Der Hase war so süß..."];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠΔᐃ] = ["Klares Fell", "Du bist eine Brotfabrik"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⵠ] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃΔ] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠᐃⲆ] = ["Schuppen", "Es riecht wie Fisch!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔΔ] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⲆᐃ] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆΔᐃ] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⲆⵠ] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⵠⵠ] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⲆⲆ] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⵠΔ] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔΔΔ] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃⲆⵠ] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆΔΔ] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃᐃⲆ] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆⲆ] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⵠᐃ] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃᐃ] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⲆᐃ] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⲆⵠΔ] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠᐃ] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", Δ[572]];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠᐃᐃᐃ] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", Δ[501]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⲆⲆᐃ] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", Δ[501]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔⵠⲆ] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", Δ[501]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⲆⲆ] = ["Steinhammer", Δ[179], "Funktioniert nicht gut gegen Diamant oder Amethyst", Δ[572], "Schaden an Gebäuden: 20"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠⲆ] = ["Goldhammer", Δ[179], "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔᐃ] = ["Diamanthammer", Δ[179], "Schaden: 4", "Schaden an Gebäuden: 40"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⵠⵠ] = ["Amethysthammer", Δ[179], "Schaden: 5", "Schaden an Gebäuden: 50"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆΔΔ] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠᐃⲆ] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⵠΔ] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆᐃ] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⵠⲆ] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆΔ] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔⵠᐃ] = ["Steinschaufel", Δ[1], Δ[376], Δ[572]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠᐃ] = ["Goldschaufel", Δ[ⲆΔⲆⵠ], Δ[376], "Schaden: 3", Δ[501]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⵠⵠ] = ["Diamantschaufel", Δ[1], Δ[376], "Schaden: 4", Δ[501]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔᐃⲆ] = ["Amethystschaufel", Δ[ᐃⲆΔ], Δ[376], "Schaden: 5", Δ[501]];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃΔⲆ] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆⲆⵠΔ] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔΔΔΔ] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⵠΔΔ] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆΔⲆⵠ] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⵠⲆ] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠⲆⲆ] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", Δ[425]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠΔΔ] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", Δ[425]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃΔⵠ] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", Δ[425]];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔᐃⵠ] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", Δ[425]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⵠⲆⲆ] = ["Ohrwärmer", "Eine Art kleiner chapka.", Δ[425]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆΔᐃ] = [Δ[21], "Auch Mantel genannt.", Δ[425]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃᐃΔ] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠᐃᐃ] = ["Bauer", "Deine Pflanzen wachsen schneller", Δ[425]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⲆⵠ] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", Δ[425]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔΔΔ] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", Δ[425]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⲆᐃⲆ] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔᐃⵠ] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", Δ[113]];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆᐃⲆ] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠΔ] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠᐃΔ] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆᐃⲆ] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃⲆΔ] = ["Blauer Edelstein", "Für sehr nette Leute"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆᐃΔ] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", Δ[113]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆⵠ] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", Δ[113]];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆⵠᐃ] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", Δ[113]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⵠΔΔ] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⵠΔ] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆⲆᐃ] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠⲆⲆ] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⲆⲆΔ] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆᐃΔ] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆⲆ] = ["Rucksack", "Mehr Platz im Inventar!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔᐃᐃ] = ["Papier", "Wird fürs Büchermachen verwendet"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠᐃᐃⵠ] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔΔᐃ] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠⲆ] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔⲆ] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠᐃ] = [Δ[332], "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⵠᐃᐃ] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠⵠ] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠᐃΔ] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆΔⵠ] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", Δ[264]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆⲆⲆ] = ["Holzwand", "Kennst du den Wandtanz?", Δ[264]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⵠ] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠΔ] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", Δ[174]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆΔ] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃΔᐃᐃ] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆᐃ] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠΔᐃᐃ] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔⵠⵠ] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔᐃᐃ] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔⵠ] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⲆⵠ] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", Δ[264]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃΔΔ] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃΔ] = ["Goldtür", "Baust du el dorado?", Δ[174]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠⲆ] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆΔ] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠⵠⵠⵠ] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", Δ[264]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠᐃ] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", Δ[174]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃⲆᐃ] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", Δ[174]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆΔᐃ] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆᐃᐃⲆⲆⵠ] = "Du kannst diesem Server nicht beitreten";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃⵠΔⲆ] = "Gekickt: ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠⲆⵠᐃⵠΔ] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆΔⵠᐃΔ] = "Dein Schlüssel ist falsch";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⲆⵠΔ] = "Deine Version ist veraltet, säubere dein Cache";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⵠⲆᐃⵠΔ] = "Es gibt keine neuen Ressourcen";
		ΔⲆⲆ[ΔΔΔΔ.ΔⵠᐃⲆⵠᐃᐃ] = "Du hast einen Tag überlebt";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠΔᐃᐃᐃ] = "Du hast überlebt ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃΔᐃΔⲆⲆ] = " Tage";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⲆΔⲆᐃ] = "Du bist gestorben ;-;";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠᐃⲆΔᐃⲆ] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃⲆΔΔⵠ] = "Server ist voll! Drücke immer wieder auf spielen!";
		ΔⲆⲆ[ΔΔΔΔ.EMPTY] = "Ressource ist leer";
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⲆⵠᐃⵠⵠ] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃᐃⵠⵠ] = " ist gestorben";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠⵠᐃⲆΔ] = "Das ist nicht das richtige Werkzeug";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⲆⵠⲆΔΔ] = "Du bist einem Team beigetreten";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⵠᐃⲆ] = "Du bist gestorben";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃᐃⲆⲆⲆ] = " ist dem Team beigetreten";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⵠⵠΔⲆᐃ] = "Dein Team wurde zerstört";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⵠⲆⲆΔⵠ] = "Du hast das Team verlassen";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔᐃⵠᐃⲆ] = " hat das Team verlassen";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔΔᐃ] = "Jemand hat dein Token gestohlen :>";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⲆⲆΔᐃΔ] = "Suche dir ein Server aus";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆⲆ] = "Spieler";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔⵠΔᐃΔ] = "alle Spieler";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠΔᐃⲆⲆⵠ] = "Spieler in diesem Modus";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔⲆΔⵠⲆ] = "Bald verfügbar...";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[39]).placeholder = "Spitzname";
		ⲆⵠⲆⵠ[0] = ["Du wurdest ohne Grund getötet"];
		ⲆⵠⲆⵠ[ⵠⵠᐃ] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
		ⲆⵠⲆⵠ[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
		ⲆⵠⲆⵠ[ᐃΔΔΔ] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
		ⲆⵠⲆⵠ[ⲆΔⲆᐃΔ] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
		ⲆⵠⲆⵠ[ⵠⵠΔⲆ] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
		ⲆⵠⲆⵠ[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
		ⲆⵠⲆⵠ[ⵠⵠᐃΔᐃ] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
		ⲆⵠⲆⵠ[ⲆᐃⵠⲆⵠ] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
		ⲆⵠⲆⵠ[Ⲇᐃᐃⵠⵠ] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
		ⲆⵠⲆⵠ[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
		ⲆⵠⲆⵠ[ⵠⵠⵠⵠⵠ] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
		ⲆⵠⲆⵠ[ᐃᐃᐃΔᐃΔΔ] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
		ⲆⵠⲆⵠ[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
		ⲆⵠⲆⵠ[ᐃⲆᐃⲆΔ] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
		ⲆⵠⲆⵠ[ⲆⲆᐃⵠΔ] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
		ⲆⵠⲆⵠ[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
		ⲆⵠⲆⵠ[ΔᐃᐃΔⵠⵠⵠ] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
		ⲆⵠⲆⵠ[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
		ⲆⵠⲆⵠ[ΔⲆⲆΔⵠᐃⵠ] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
		ⲆⵠⲆⵠ[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
		ⲆⵠⲆⵠ[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
		ᐃⵠᐃΔΔ = Δ[102];
		ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", Δ[44], "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"]
	};
	const ΔⲆΔΔ = Ⲇⵠᐃᐃ;

	function ᐃⲆᐃⲆΔⲆΔ(ⵠᐃᐃΔᐃⵠⲆ, ΔⲆⵠⵠⲆΔⵠ, ⵠᐃΔⵠⵠΔᐃ, ⵠᐃⲆⲆⵠⲆᐃ, ⲆΔᐃⲆⲆⲆⲆ, ⲆⵠⵠⵠⲆΔⲆ) {
		ᐃⵠᐃᐃᐃⵠⵠ(ᐃΔⲆⲆᐃ, ⵠᐃᐃΔᐃⵠⲆ, ΔⲆⵠⵠⲆΔⵠ, ⵠᐃΔⵠⵠΔᐃ, ⵠᐃⲆⲆⵠⲆᐃ, ⲆΔᐃⲆⲆⲆⲆ, ⲆⵠⵠⵠⲆΔⲆ);
		const ᐃΔⲆΔⲆⵠΔ = ⲆⲆΔΔᐃⲆⵠ(ᐃⲆⵠᐃ[ΔΔⲆⲆ], ᐃⲆⵠᐃ[ⲆΔⲆⵠ], ᐃⲆⵠᐃ[ⵠⲆⵠΔ], ᐃⲆⵠᐃ[3]);
		const ⲆᐃᐃⵠⲆⲆⵠ = ΔᐃⲆΔⲆⲆᐃ(ᐃⲆⵠᐃ[ΔⵠⲆᐃ], ᐃⲆⵠᐃ[ⵠⵠⲆⵠ], ᐃⲆⵠᐃ[ΔᐃΔ], ᐃⲆⵠᐃ[ΔΔⲆΔ], ᐃⲆⵠᐃ[Δⵠᐃᐃ]);
		const ᐃⲆΔⲆΔᐃⵠ = (ⲆⲆΔᐃΔ << ((ᐃΔⲆΔⲆⵠΔ ^ ⲆᐃᐃⵠⲆⲆⵠ) >> 0 & 255)) + (24 << ((ᐃΔⲆΔⲆⵠΔ ^ ⲆᐃᐃⵠⲆⲆⵠ) >> ΔΔᐃΔΔ & 255)) + (16 << ((ᐃΔⲆΔⲆⵠΔ ^ ⲆᐃᐃⵠⲆⲆⵠ) >> 16 & 255)) + (0 << ((ᐃΔⲆΔⲆⵠΔ ^ ⲆᐃᐃⵠⲆⲆⵠ) >> 24 & 255));
		return ᐃⲆΔⲆΔᐃⵠ
	}
	const ΔΔᐃᐃ = ᐃⲆᐃⵠ;
	var ᐃΔᐃⵠΔⲆⲆ = function() {
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⵠᐃ] = [Δ[240]];
		ⲆⵠⲆⵠ[22] = [Δ[562]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠΔⵠⲆ] = [Δ[479], Δ[181], Δ[155]];
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⵠⲆᐃⵠ] = Δ[23];
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆΔΔᐃⲆᐃ] = Δ[455];
		ΔⲆⲆ[ΔΔΔΔ.ΔᐃΔᐃⲆΔⵠ] = Δ[327];
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⵠⲆⵠⲆᐃ] = Δ[365];
		ΔⲆⲆ[ΔΔΔΔ.POINTS] = Δ[449];
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠⲆⵠΔΔΔ] = Δ[219];
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⵠᐃᐃᐃⵠ] = Δ[576];
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆⵠᐃⲆⲆΔ] = Δ[525];
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⲆⲆⵠᐃᐃ] = Δ[202];
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⲆⲆΔⵠᐃ] = Δ[ⲆⲆᐃⲆ];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃᐃ] = [Δ[308], Δ[508], Δ[29]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⲆ] = [Δ[368], Δ[187], Δ[579], Δ[22]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆΔⲆ] = [Δ[550], Δ[25], Δ[310], Δ[167], Δ[328], Δ[140]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠΔΔ] = [Δ[514], Δ[97], Δ[267], Δ[185], Δ[261]];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[123])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[371];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[443])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[346];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[545])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[136];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[158])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[ΔᐃΔΔΔΔΔ];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[303])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[366];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[253])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[27];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[290])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[515];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[183])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[284];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[238])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[34];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[489])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[50];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[134])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[374];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[493])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[518];
		for (var Δᐃ = 0; Δᐃ < 7; Δᐃ++) document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[19] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[491];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[359])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Δ[522];
		ΔⲆⲆ[Ⲇᐃ.Ⲇᐃᐃⵠᐃ] = ["Ręka"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⲆΔ] = ["Ziemia", "Brudna!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃΔⵠ] = ["Piasek", "Mam go w oczach!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⲆ] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃ] = ["Kamień", "Także nazywany skałą"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃ] = ["Złoto", "Bądź hojny, daj trochę innym"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃᐃ] = ["Diament", "Co z nim zrobisz?"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃ] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆⵠ] = ["Mąka", "Używana w gotowaniu"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃᐃᐃⲆ] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆΔⵠ] = ["Ciasto", "Raj dla smakoszy", Δ[504]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠΔ] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃΔⵠ] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆᐃ] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃⲆ] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆᐃⵠ] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔⵠⵠ] = ["Kanapka", "Smakuje jak kraboburger", Δ[504]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃΔ] = ["Cukierki", "Tylko dla dzieci!", Δ[504]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠΔ] = ["Laska cukrowa", "Spróbuj, jest przepyszna", Δ[504]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆᐃ] = ["Girlanda", "Idealna do dekorowania dachów"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔΔⵠ] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", Δ[379], Δ[355]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃⵠ] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃⲆⵠ] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", Δ[379], Δ[355]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔᐃᐃ] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠⵠⵠⵠ] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", Δ[379], Δ[355]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠᐃᐃ] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆᐃ] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", Δ[379], Δ[355]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃⲆΔ] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⲆ] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", Δ[58], Δ[355]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠΔⵠ] = ["Kolczasty krzew", "Kłuje!"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆᐃⲆ] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", Δ[73]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠⲆ] = ["Lód", "Użyteczny do robienia ciast i wody"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⵠ] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆⵠ] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⲆ] = ["Skóra królika", "Ten królik był taki słodziutki..."];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠΔᐃ] = ["Skóra", "Jesteś fabryką chleba"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⵠ] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃΔ] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠᐃⲆ] = ["Łuski", "Pachnie jak ryba!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔΔ] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⲆᐃ] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆΔᐃ] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⲆⵠ] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⵠⵠ] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⲆⲆ] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⵠΔ] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔΔΔ] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃⲆⵠ] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆΔΔ] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃᐃⲆ] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆⲆ] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⵠᐃ] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃᐃ] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⲆᐃ] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⲆⵠΔ] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠᐃ] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠᐃᐃᐃ] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", Δ[263]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⲆⲆᐃ] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", Δ[263]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔⵠⲆ] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", Δ[263]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⲆⲆ] = ["Kamienny młot", Δ[56], "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠⲆ] = ["Złoty młot", Δ[56], "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔᐃ] = ["Diamentowy młot", Δ[56], "Obrażenia: 4", "Obrażenia do budowli: 40"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⵠⵠ] = ["Ametystowy młot", Δ[56], "Obrażenia: 5", "Obrażenia do budowli: 50"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆΔΔ] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠᐃⲆ] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⵠΔ] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆᐃ] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⵠⲆ] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆΔ] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔⵠᐃ] = ["Kamienna łopata", Δ[ⲆΔⲆΔⵠⲆⲆ], Δ[72], "Obrażenia: 2"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠᐃ] = ["Złota łopata", Δ[ⲆΔⲆΔⵠⲆⲆ], Δ[72], "Obrażenia: 3", Δ[263]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⵠⵠ] = ["Diamentowa łopata", Δ[15], Δ[72], "Obrażenia: 4", Δ[263]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔᐃⲆ] = ["Ametystowa łopata", Δ[15], Δ[72], "Obrażenia: 5", Δ[263]];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃΔⲆ] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆⲆⵠΔ] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔΔΔΔ] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⵠΔΔ] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆΔⲆⵠ] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⵠⲆ] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠⲆⲆ] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", Δ[569]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠΔΔ] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", Δ[569]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃΔⵠ] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", Δ[569]];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔᐃⵠ] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⵠⲆⲆ] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", Δ[569]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆΔᐃ] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃᐃΔ] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠᐃᐃ] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⲆⵠ] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔΔΔ] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", Δ[569]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⲆᐃⲆ] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔᐃⵠ] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", Δ[364]];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆᐃⲆ] = ["Smocza kula", "Zdobyta podczas zadania"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠΔ] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠᐃΔ] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆᐃⲆ] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃⲆΔ] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆᐃΔ] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", Δ[364]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆⵠ] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", Δ[364]];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆⵠᐃ] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", Δ[364]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⵠΔΔ] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⵠΔ] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆⲆᐃ] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠⲆⲆ] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⲆⲆΔ] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆᐃΔ] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆⲆ] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔᐃᐃ] = ["Papier", "Używany w tworzeniu książki"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠᐃᐃⵠ] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔΔᐃ] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠⲆ] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔⲆ] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠᐃ] = [Δ[332], "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⵠᐃᐃ] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠⵠ] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠᐃΔ] = ["Dach", "Trochę cie ogrzewa i chowa!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆΔⵠ] = ["Studnia", "Umożliwia napełnienie butelki", Δ[58]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆⲆⲆ] = ["Drewniany mur", "Znasz taniec ścian?", Δ[58]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⵠ] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠΔ] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", Δ[73]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆΔ] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃΔᐃᐃ] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆᐃ] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠΔᐃᐃ] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔⵠⵠ] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔᐃᐃ] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔⵠ] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⲆⵠ] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", Δ[58]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃΔΔ] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃΔ] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", Δ[73]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠⲆ] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆΔ] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠⵠⵠⵠ] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", Δ[58]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠᐃ] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", Δ[73]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃⲆᐃ] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", Δ[73]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆΔᐃ] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆᐃᐃⲆⲆⵠ] = "Nie możesz dołączyć do tego serwera";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃⵠΔⲆ] = "Wyrzucony: ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠⲆⵠᐃⵠΔ] = "Twój klucz jest aktualnie używany przez innego gracza";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆΔⵠᐃΔ] = "Twój klucz jest nieprawidłowy";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⲆⵠΔ] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⵠⲆᐃⵠΔ] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
		ΔⲆⲆ[ΔΔΔΔ.ΔⵠᐃⲆⵠᐃᐃ] = "Przeżyłeś 1 dzień";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠΔᐃᐃᐃ] = "Przeżyłeś ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃΔᐃΔⲆⲆ] = " dni";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⲆΔⲆᐃ] = "Jesteś martwy ;-;";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠᐃⲆΔᐃⲆ] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃⲆΔΔⵠ] = "Serwer jest pełny! Spamuj przycisk zagraj!";
		ΔⲆⲆ[ΔΔΔΔ.EMPTY] = "Źródło jest puste";
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⲆⵠᐃⵠⵠ] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃᐃⵠⵠ] = " jest martwy";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠⵠᐃⲆΔ] = "To nie jest właściwe narzędzie";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⲆⵠⲆΔΔ] = "Dołączyłeś do drużyny";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⵠᐃⲆ] = "Jesteś martwy";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃᐃⲆⲆⲆ] = " dołączył do drużyny";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⵠⵠΔⲆᐃ] = "Twoja drużyna została zniszczona";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⵠⲆⲆΔⵠ] = " Opuściłeś drużynę";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔᐃⵠᐃⲆ] = " opuścił drużynę";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔΔᐃ] = "Ktoś ukradł twój żeton :>";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⲆⲆΔᐃΔ] = "Wybierz serwer";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆⲆ] = "graczy";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔⵠΔᐃΔ] = "wszystkich graczy";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠΔᐃⲆⲆⵠ] = "graczy w tym trybie";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔⲆΔⵠⲆ] = "Już wkrótce...";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[39]).placeholder = "Przydomek";
		ⲆⵠⲆⵠ[0] = ["Zostałeś zabity bez powodu"];
		ⲆⵠⲆⵠ[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
		ⲆⵠⲆⵠ[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
		ⲆⵠⲆⵠ[ⲆΔΔⲆ] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
		ⲆⵠⲆⵠ[ΔⵠⲆᐃ] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
		ⲆⵠⲆⵠ[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
		ⲆⵠⲆⵠ[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
		ⲆⵠⲆⵠ[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
		ⲆⵠⲆⵠ[ⵠⲆΔⲆᐃ] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
		ⲆⵠⲆⵠ[ΔⲆⲆⲆⲆ] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
		ⲆⵠⲆⵠ[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
		ⲆⵠⲆⵠ[ᐃᐃΔΔΔΔΔ] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
		ⲆⵠⲆⵠ[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
		ⲆⵠⲆⵠ[ΔΔᐃⲆⲆⲆΔ] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
		ⲆⵠⲆⵠ[ⲆⲆⲆⵠᐃⲆᐃ] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
		ⲆⵠⲆⵠ[ⵠᐃⲆᐃᐃ] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
		ⲆⵠⲆⵠ[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
		ⲆⵠⲆⵠ[ΔᐃᐃΔⵠⵠⵠ] = ["Twoja skóra odpada, słońce cię zabija."];
		ⲆⵠⲆⵠ[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
		ⲆⵠⲆⵠ[ΔⵠΔⵠⵠ] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
		ⲆⵠⲆⵠ[ΔⵠⵠᐃᐃⵠΔ] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
		ⲆⵠⲆⵠ[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
		ᐃⵠᐃΔΔ = Δ[102];
		ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", Δ[44], "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"]
	};

	function ᐃᐃⲆⵠⵠⵠΔ(ⲆΔΔⵠⵠⲆΔ, ⲆΔⲆⲆⲆ) {
		const ⵠⲆⵠⲆⲆΔⲆ = ~(ⲆΔΔⵠⵠⲆΔ & 32699) & 32699 | ~(32699 & ⲆΔΔⵠⵠⲆΔ) & ⲆΔΔⵠⵠⲆΔ;
		const ⵠΔᐃⵠᐃᐃⵠ = (16 << (ⲆΔⲆⲆⲆ >> 8 & 255)) + (8 << (ⲆΔⲆⲆⲆ >> 16 & 255)) + (0 << (ⲆΔⲆⲆⲆ >> 24 & 255)) + (24 << (ⲆΔⲆⲆⲆ >> ⲆΔⵠΔ & 255));
		const ᐃΔᐃΔᐃΔⲆ = ⲆⵠⲆΔⲆⲆΔ(ⵠⲆⵠⲆⲆΔⲆ, ⵠΔᐃⵠᐃᐃⵠ, ⵠⲆⵠⲆⲆΔⲆ, ⵠΔᐃⵠᐃᐃⵠ, ⵠⲆⵠⲆⲆΔⲆ);
		const ⵠΔⲆᐃⵠⵠⵠ = ⵠᐃⲆⵠⲆⵠΔ(ⵠΔᐃⵠᐃᐃⵠ, ⵠⲆⵠⲆⲆΔⲆ, ⵠΔᐃⵠᐃᐃⵠ, ⵠⲆⵠⲆⲆΔⲆ, ⵠΔᐃⵠᐃᐃⵠ);
		const ᐃⵠᐃⲆⲆⵠᐃ = (16 << ((ᐃΔᐃΔᐃΔⲆ ^ ⵠΔⲆᐃⵠⵠⵠ) >> ⲆⲆⵠᐃΔ & ⲆⵠⲆⵠᐃᐃⲆ)) + (24 << ((ᐃΔᐃΔᐃΔⲆ ^ ⵠΔⲆᐃⵠⵠⵠ) >> 24 & 255)) + (8 << ((ᐃΔᐃΔᐃΔⲆ ^ ⵠΔⲆᐃⵠⵠⵠ) >> 0 & 255)) + (0 << ((ᐃΔᐃΔᐃΔⲆ ^ ⵠΔⲆᐃⵠⵠⵠ) >> 8 & 255));
		return ᐃⵠᐃⲆⲆⵠᐃ
	}
	const Ⲇⵠᐃⵠ = ⲆⲆΔΔ;

	function ⵠΔⵠⲆᐃⵠⵠ(ᐃⵠΔⲆΔⵠΔ, ⵠΔΔⲆⲆⵠᐃ, ⵠⲆⵠᐃⵠⲆⵠ) {
		const ᐃᐃΔᐃΔΔᐃ = (8 << (ᐃⵠΔⲆΔⵠΔ >> ΔⵠⵠΔⵠⵠᐃ & 255)) + (0 << (ᐃⵠΔⲆΔⵠΔ >> ΔⲆΔⲆⲆ & 255)) + (16 << (ᐃⵠΔⲆΔⵠΔ >> 24 & 255)) + (24 << (ᐃⵠΔⲆΔⵠΔ >> 0 & 255));
		const ⲆⲆΔΔⲆⲆⵠ = (2147483587 + (ⵠΔΔⲆⲆⵠᐃ + 38281) * 2147483629) % 2147483647;
		const ᐃⵠⲆⲆⵠⲆΔ = ~(ⵠⲆⵠᐃⵠⲆⵠ & 21585) & ⵠⲆⵠᐃⵠⲆⵠ | ~(ⵠⲆⵠᐃⵠⲆⵠ & 21585) & 21585;
		const ΔΔΔⲆᐃⲆⵠ = ⲆⲆΔⲆΔⵠⲆ(ᐃᐃΔᐃΔΔᐃ, ⲆⲆΔΔⲆⲆⵠ, ᐃⵠⲆⲆⵠⲆΔ, ᐃᐃΔᐃΔΔᐃ, ⲆⲆΔΔⲆⲆⵠ, ᐃⵠⲆⲆⵠⲆΔ);
		const ΔΔⵠⲆΔᐃΔ = ᐃᐃⲆⵠⵠⵠΔ(ᐃᐃΔᐃΔΔᐃ, ⲆⲆΔΔⲆⲆⵠ);
		const ΔⲆΔΔⲆⲆⵠ = (43243 + (ΔΔΔⲆᐃⲆⵠ ^ ΔΔⵠⲆΔᐃΔ)) % 65362;
		return ΔⲆΔΔⲆⲆⵠ
	}
	const ⵠⵠΔⲆᐃΔⵠ = ΔΔⲆⲆⲆ;
	const ⵠΔⲆⲆ = ᐃΔΔΔ;
	const ᐃΔⲆΔⲆᐃᐃ = ᐃΔⲆΔΔ;

	function Δⵠⵠⵠⵠⵠⵠ(ⵠΔᐃΔᐃᐃⲆ, ᐃΔⵠᐃⵠΔⲆ, ᐃⵠⵠᐃᐃΔⵠ, ⲆⵠᐃΔΔⲆᐃ) {
		const ⵠⵠΔⵠⲆᐃΔ = (2147483587 + 2147483629 * (ⵠΔᐃΔᐃᐃⲆ + 64104)) % 2147483647;
		const ⵠⵠΔᐃᐃᐃⵠ = ~(32623 & ᐃΔⵠᐃⵠΔⲆ) & ᐃΔⵠᐃⵠΔⲆ | ~(ᐃΔⵠᐃⵠΔⲆ & 32623) & 32623;
		const ⲆⵠᐃᐃΔᐃᐃ = (57992 | ᐃⵠⵠᐃᐃΔⵠ) & ~(ᐃⵠⵠᐃᐃΔⵠ & 57992);
		const ⲆⵠⵠᐃᐃΔΔ = (1 + 22695477 * (15660 + ⲆⵠᐃΔΔⲆᐃ)) % 4294967296;
		const ⵠⵠⲆⵠⵠⲆⵠ = ΔΔⲆᐃΔᐃⵠ(ⵠⵠΔⵠⲆᐃΔ, ⵠⵠΔᐃᐃᐃⵠ);
		const ΔⵠΔⵠᐃⵠⲆᐃⲆ = ΔⲆᐃΔΔΔᐃ(ⲆⵠᐃᐃΔᐃᐃ, ⲆⵠⵠᐃᐃΔΔ, ⵠⵠΔⵠⲆᐃΔ, ⵠⵠΔᐃᐃᐃⵠ, ⲆⵠᐃᐃΔᐃᐃ);
		const ᐃⲆⵠᐃⵠⵠⵠ = ~(ⵠⵠⲆⵠⵠⲆⵠ & 49023) & 49023 | ~(49023 & ⵠⵠⲆⵠⵠⲆⵠ) & ⵠⵠⲆⵠⵠⲆⵠ;
		return ᐃⲆⵠᐃⵠⵠⵠ
	}
	const ΔⲆᐃⲆⲆ = ᐃᐃΔΔⲆ;
	const ⲆⲆᐃᐃⲆΔⲆᐃΔ = ⵠΔΔⵠⲆⵠᐃ;
	const ⲆΔᐃΔⵠᐃⵠ = ⲆⵠΔΔᐃ;
	const ⲆⵠᐃⲆΔᐃⵠⲆᐃ = ΔᐃⲆⲆΔᐃΔ;

	function Ⲇⵠᐃⵠⵠⵠᐃ(ⵠⲆᐃⲆᐃⲆⲆ, ⵠᐃᐃⵠΔⲆᐃ, ⲆⲆⲆⲆΔᐃᐃ, ᐃⵠⲆⵠⲆⵠΔ, ᐃᐃᐃΔᐃⵠΔ, ⵠⵠᐃΔⵠΔΔ) {
		const ⲆⲆᐃΔᐃᐃⵠ = ((ⵠⲆᐃⲆᐃⲆⲆ + 48538) * 214013 + 2531011) % 4294967296;
		const ΔΔΔⲆᐃᐃⲆ = (0 << (ⵠᐃᐃⵠΔⲆᐃ >> 8 & ⵠᐃᐃᐃⲆᐃⲆ)) + (16 << (ⵠᐃᐃⵠΔⲆᐃ >> 24 & 255)) + (8 << (ⵠᐃᐃⵠΔⲆᐃ >> 16 & ⲆⵠⲆΔᐃΔΔ)) + (24 << (ⵠᐃᐃⵠΔⲆᐃ >> 0 & ⵠΔⵠΔΔ));
		const ⲆΔᐃⵠⵠⲆⲆ = ~(ⲆⲆⲆⲆΔᐃᐃ & 57732) & 57732 | ~(57732 & ⲆⲆⲆⲆΔᐃᐃ) & ⲆⲆⲆⲆΔᐃᐃ;
		const ⵠⵠΔⵠΔΔⲆ = (8 << (ᐃⵠⲆⵠⲆⵠΔ >> 8 & 255)) + (ΔⲆⲆⲆⲆⵠⲆ << (ᐃⵠⲆⵠⲆⵠΔ >> 24 & 255)) + (24 << (ᐃⵠⲆⵠⲆⵠΔ >> 0 & 255)) + (0 << (ᐃⵠⲆⵠⲆⵠΔ >> 16 & ⵠⵠᐃᐃᐃⵠᐃ));
		const ⲆⵠΔΔⲆΔΔ = (1013904223 + (59202 + ᐃᐃᐃΔᐃⵠΔ) * 1664525) % 4294967296;
		const ᐃⵠⲆᐃᐃΔⲆ = (56126 + ⵠⵠᐃΔⵠΔΔ) % 65388;
		const ᐃᐃⲆⲆⲆᐃΔ = ⲆΔᐃΔᐃⲆⲆ(ⲆⲆᐃΔᐃᐃⵠ, ΔΔΔⲆᐃᐃⲆ, ⲆΔᐃⵠⵠⲆⲆ, ⵠⵠΔⵠΔΔⲆ);
		const ᐃⲆΔⵠᐃⲆⲆ = ⲆⲆΔⲆΔⵠⲆ(ⲆⵠΔΔⲆΔΔ, ᐃⵠⲆᐃᐃΔⲆ, ⲆⲆᐃΔᐃᐃⵠ, ΔΔΔⲆᐃᐃⲆ, ⲆΔᐃⵠⵠⲆⲆ, ⵠⵠΔⵠΔΔⲆ);
		const ⲆᐃΔᐃⲆⵠⵠ = (50444 + (ᐃᐃⲆⲆⲆᐃΔ ^ ᐃⲆΔⵠᐃⲆⲆ)) % 65297;
		return ⲆᐃΔᐃⲆⵠⵠ
	}
	const ⲆⲆᐃⵠΔⲆᐃ = ⵠᐃΔΔⲆ;
	var ᐃⲆΔᐃᐃⵠᐃ = function() {
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⵠᐃ] = [Δ[240]];
		ⲆⵠⲆⵠ[22] = [Δ[562]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠΔⵠⲆ] = [Δ[479], Δ[181], Δ[155]];
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⵠⲆᐃⵠ] = " RETOUR AU JEU";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆΔΔᐃⲆᐃ] = " Partage sur Twitter";
		ΔⲆⲆ[ΔΔΔΔ.ΔᐃΔᐃⲆΔⵠ] = " Partage sur Facebook";
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⵠⲆⵠⲆᐃ] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
		ΔⲆⲆ[ΔΔΔΔ.POINTS] = Δ[449];
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠⲆⵠΔΔΔ] = Δ[219];
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⵠᐃᐃᐃⵠ] = "Tués";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆⵠᐃⲆⲆΔ] = "Jours survécus";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⲆⲆⵠᐃᐃ] = "Mode de construction: Libre. Appuie sur G pour changer";
		ΔⲆⲆ[ΔΔΔΔ.ⲆΔⲆⲆΔⵠᐃ] = "Mode de construction: Grille. Appuie sur G pour changer";
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃᐃ] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", Δ[29]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⲆ] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", Δ[579], Δ[22]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆΔⲆ] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", Δ[328], Δ[140]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠΔΔ] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", Δ[261]];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[123])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "Chrono Quêtes";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[443])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "Temps Restant";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[545])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = " Contraintes";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[158])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = " Résultat";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[303])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = " Récompenses";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[253])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = " Collecte 1 Cœur de dragon dans la cave";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[290])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = " Récolte 1 améthyste";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[183])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "Survis sans perdre de vie";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[238])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = " Ouvre 5 coffres au trésor";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[489])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = " Sois pacifique";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[134])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[493])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = " Après 1 jour, survis en hiver";
		for (var Δᐃ = 0; ΔᐃⲆΔᐃ > Δᐃ; Δᐃ++) document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[ΔⵠΔⵠⵠ] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "RÉCOMPENSE!";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[359])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = " QUITTER";
		ΔⲆⲆ[Ⲇᐃ.Ⲇᐃᐃⵠᐃ] = ["Main"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⲆΔ] = ["Terre", "C'est sale!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃΔⵠ] = ["Sable", "J'en ai dans les yeux"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⲆ] = ["Bois", "Tu n'en auras jamais trop!"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃ] = ["Pierre", "Aussi appelée roche"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃ] = ["Or", "Sois généreux, donne en aux autres"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃᐃ] = ["Diamant", "Comme tes yeux! wesh"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃ] = ["Améthyste", "C'est Mauve comme Lapa"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆⵠ] = ["Farine", "Utile pour la cuisine"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃᐃᐃⲆ] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆΔⵠ] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠΔ] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃΔⵠ] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆᐃ] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⵠᐃⲆ] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆᐃⵠ] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔⵠⵠ] = [Δ[335], "Le Jambon Beurre vaincra", "Nourriture: 100"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃΔ] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠΔ] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆᐃ] = ["Guirlandes", "Utilisable sur les toits"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔΔⵠ] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", Δ[530], Δ[466]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃⵠ] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔᐃⲆⵠ] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", Δ[530], Δ[466]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔᐃᐃ] = ["Blé", "Peut être transformé en farine dans les moulins"];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠⵠⵠⵠ] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", Δ[530], Δ[466]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠᐃᐃ] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆᐃ] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", Δ[530], Δ[466]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃⲆΔ] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⲆ] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", Δ[232], Δ[466]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠΔⵠ] = ["Ronces", "Ça pique!"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆᐃⲆ] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", Δ[135]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠⲆ] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃᐃⵠ] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", Δ[319]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆⵠ] = ["Peau de loup", "Il était où le gentil ti Youki?"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⲆ] = ["Peau de lapin", "Vous êtes un monstre"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠΔᐃ] = ["Fourrure blanche", "Tu es une usine à pain"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃⵠ] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆᐃΔ] = ["Fourrure d'hiver", "Il voulait juste un calin"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠᐃⲆ] = ["Écailles", "Ça sent le poisson!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔΔ] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⲆᐃ] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆΔᐃ] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⲆⵠ] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆⵠⵠ] = ["Fil", "Utile pour faire des chapeaux et un sac"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⲆⲆ] = ["Fil de diamant", "Utile pour faire des chapeaux"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔⵠΔ] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔΔΔ] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆᐃⲆⵠ] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆΔΔ] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃᐃⲆ] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆⲆⲆ] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⵠᐃ] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠΔᐃᐃ] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⲆᐃ] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⲆⵠΔ] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠᐃ] = ["Pioche en pierre", "Peut aussi récolter de l'or", Δ[319]];
		ΔⲆⲆ[Ⲇᐃ.Ⲇⵠᐃᐃᐃ] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⲆⲆᐃ] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃΔⵠⲆ] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⲆⲆ] = ["Marteau en pierre", Δ[198], "Ne marche pas bien sur du diamant et améthyste", Δ[319], "Démolition: 20"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃᐃⵠⲆ] = ["Marteau en or", Δ[198], "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔᐃ] = ["Marteau en diamant", Δ[198], "Dégâts: 4", "Démolition: 40"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⵠⵠ] = ["Marteau en améthyste", Δ[198], "Dégâts: 5", "Démolition: 50"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆΔΔ] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⵠᐃⲆ] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃⵠⵠΔ] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆⲆᐃ] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⵠⲆ] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆⲆΔ] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔⵠᐃ] = ["Pelle en pierre", Δ[410], Δ[31], Δ[319]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠᐃ] = ["Pelle en or", Δ[410], Δ[31], "Dégâts: 3", "Buildings Dégâts: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔⵠⵠ] = ["Pelle en diamant", Δ[410], Δ[31], "Dégâts: 4", "Buildings Dégâts: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆΔᐃⲆ] = ["Pelle en améthyste", Δ[410], Δ[31], "Dégâts: 5", "Buildings Dégâts: 1"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔᐃΔⲆ] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆⲆⵠΔ] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔΔΔΔ] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⵠΔΔ] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆΔⲆⵠ] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⵠⲆ] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⵠⲆⲆ] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", Δ[338]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠΔΔ] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", Δ[338]];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃΔⵠ] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", Δ[338]];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔᐃⵠ] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", Δ[338]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⵠⲆⲆ] = ["Cache-oreilles", "Une sorte de petite chapka.", Δ[338]];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠⲆΔᐃ] = [Δ[21], "Comment ça va, camarade?", Δ[338]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃᐃΔ] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠᐃᐃ] = ["Tunique", "Les plantes poussent plus vite", Δ[338]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔⲆⵠ] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", Δ[338]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔΔΔ] = ["Tunique d'hiver", "Tes plantes poussent plus vite", Δ[338]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠⲆᐃⲆ] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠΔᐃⵠ] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", Δ[300]];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆᐃⲆ] = ["Orbe du Dragon", "Donné en Quête"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠΔ] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠᐃΔ] = ["Gemme verte", "Tu n'as pas triché, promis?"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⲆᐃⲆ] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃᐃⲆΔ] = ["Gemme bleue", "Pour les gens trop gentils"];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆᐃΔ] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", Δ[300]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃⵠⲆⵠ] = ["Couronne orange", "Tu te sens soudainement très chanceux", Δ[300]];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃⲆⵠᐃ] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", Δ[300]];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⵠΔΔ] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔΔⵠΔ] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
		ΔⲆⲆ[Ⲇᐃ.ΔΔⲆⲆᐃ] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠⲆⲆ] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⲆⲆΔ] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⲆᐃΔ] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆⲆⲆ] = ["Sac", "Plus de place dans ton inventaire!"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔΔᐃᐃ] = ["Papier", "Pour fabriquer toute sorte d'objets"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠᐃᐃⵠ] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔΔᐃ] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⲆΔⵠⲆ] = ["Cadenas", "Pour verrouiller un coffre"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠⵠΔⲆ] = ["Clé", "Pour déverrouiller un coffre"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠᐃ] = [Δ[332], "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
		ΔⲆⲆ[Ⲇᐃ.ⲆΔⵠᐃᐃ] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔΔⵠⵠ] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠᐃΔ] = ["Toit", "Te cache un peu et te réchauffe"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⲆΔⵠ] = ["Puit", "Permet de remplir des bouteilles", Δ[232]];
		ΔⲆⲆ[Ⲇᐃ.ⲆᐃⲆⲆⲆ] = ["Mur en bois", "Tu connais la danse des murs?", Δ[232]];
		ΔⲆⲆ[Ⲇᐃ.ΔⲆⵠΔⵠ] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⲆⵠⵠΔ] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", Δ[135]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⵠⵠⲆΔ] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃΔᐃᐃ] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆᐃ] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠΔᐃᐃ] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
		ΔⲆⲆ[Ⲇᐃ.ΔᐃΔⵠⵠ] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆΔᐃᐃ] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
		ΔⲆⲆ[Ⲇᐃ.ⵠᐃΔΔⵠ] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⵠⲆⵠ] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", Δ[232]];
		ΔⲆⲆ[Ⲇᐃ.ΔⵠᐃΔΔ] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃΔⲆᐃΔ] = ["Porte en or", "Tu reconstruis l'el dorado?", Δ[135]];
		ΔⲆⲆ[Ⲇᐃ.ⵠⵠᐃⵠⲆ] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
		ΔⲆⲆ[Ⲇᐃ.ᐃⵠᐃⲆΔ] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
		ΔⲆⲆ[Ⲇᐃ.Δⵠⵠⵠⵠ] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", Δ[232]];
		ΔⲆⲆ[Ⲇᐃ.ᐃᐃᐃⵠᐃ] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", Δ[135]];
		ΔⲆⲆ[Ⲇᐃ.ⲆⲆᐃⲆᐃ] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", Δ[135]];
		ΔⲆⲆ[Ⲇᐃ.ⵠΔⲆΔᐃ] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆᐃᐃⲆⲆⵠ] = "Tu ne peux pas rejoindre le serveur";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃⵠΔⲆ] = "Expulsé: ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠⲆⵠᐃⵠΔ] = "Ta clé est déjà utilisée par quelqu'un d'autre";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆΔⵠᐃΔ] = "Ta clé est fausse";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⲆⵠΔ] = "Tu as une vieille version, rafraichis tes caches";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⵠⲆᐃⵠΔ] = "Il n'y a plus de nouvelles ressources";
		ΔⲆⲆ[ΔΔΔΔ.ΔⵠᐃⲆⵠᐃᐃ] = "Tu as survécu 1 jour";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠΔᐃᐃᐃ] = "Tu as survécu ";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃΔᐃΔⲆⲆ] = " jours";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⲆΔⲆᐃ] = "Tu es mort ;-;";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠᐃⲆΔᐃⲆ] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃⲆΔΔⵠ] = "Le serveur est complet! Spam le bouton jouer";
		ΔⲆⲆ[ΔΔΔΔ.EMPTY] = "Cette ressource est vide";
		ΔⲆⲆ[ΔΔΔΔ.ⵠΔⲆⵠᐃⵠⵠ] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
		ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃᐃⵠⵠ] = " est mort";
		ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠⵠᐃⲆΔ] = "Ce n'est pas le bon outil";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⲆⵠⲆΔΔ] = "Tu as rejoins une équipe";
		ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⵠᐃⲆ] = "Tu es mort";
		ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃᐃⲆⲆⲆ] = " a rejoint l'équipe";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⵠⵠΔⲆᐃ] = "Ton équipe a été détruite";
		ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⵠⲆⲆΔⵠ] = "Tu as quitté l'équipe";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔᐃⵠᐃⲆ] = " a quitté l'équipe";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔΔᐃ] = "Quelqu'un a volé ton token :>";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔⲆⲆΔᐃΔ] = "Choisis un serveur";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆⲆ] = "joueurs";
		ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔⵠΔᐃΔ] = "joueurs";
		ΔⲆⲆ[ΔΔΔΔ.ⲆⵠΔᐃⲆⲆⵠ] = "joueurs dans ce mode";
		ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔⲆΔⵠⲆ] = "Bientôt...";
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[39]).placeholder = "Surnom";
		ⲆⵠⲆⵠ[ΔΔⲆⲆ] = ["Tu as été tué sans raison particulière, juste comme ça"];
		ⲆⵠⲆⵠ[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
		ⲆⵠⲆⵠ[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
		ⲆⵠⲆⵠ[ΔⵠᐃⲆ] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
		ⲆⵠⲆⵠ[ΔⵠⲆᐃ] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
		ⲆⵠⲆⵠ[ⲆⲆⵠᐃⲆ] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
		ⲆⵠⲆⵠ[ᐃⲆⵠⲆⲆ] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
		ⲆⵠⲆⵠ[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
		ⲆⵠⲆⵠ[ⲆᐃⲆⵠⲆ] = ["Cet ours voulait juste un câlin."];
		ⲆⵠⲆⵠ[ᐃⵠⲆⲆᐃ] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
		ⲆⵠⲆⵠ[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
		ⲆⵠⲆⵠ[ᐃⲆᐃΔⲆⲆⵠ] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
		ⲆⵠⲆⵠ[ᐃⲆⵠⵠΔ] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
		ⲆⵠⲆⵠ[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
		ⲆⵠⲆⵠ[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
		ⲆⵠⲆⵠ[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
		ⲆⵠⲆⵠ[ⲆⵠⲆᐃᐃΔⵠ] = ["Un kraken a 'kraké' tes os."];
		ⲆⵠⲆⵠ[ᐃᐃᐃΔᐃ] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
		ⲆⵠⲆⵠ[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
		ⲆⵠⲆⵠ[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
		ⲆⵠⲆⵠ[ᐃᐃⵠⵠⲆⲆⲆ] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
		ⲆⵠⲆⵠ[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
		ᐃⵠᐃΔΔ = Δ[102];
		ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", Δ[44], "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"]
	};
	var ΔⲆⲆ = [];
	for (var Δᐃ = 0; Δᐃ < ⵠⲆ; Δᐃ++) ΔⲆⲆ[Δᐃ] = "";
	var ⲆⵠⲆⵠ = [];
	$(".md-languages").on(Δ[507], (function() {
		$(this).toggleClass(Δ[378])
	}));
	$(".md-languages ul li").on(Δ[507], (function() {
		var ⲆᐃΔ = $(this).text();
		if (ⲆᐃΔ === "English") ᐃᐃᐃᐃⵠΔⵠ();
		else if (ⲆᐃΔ === "Français") ᐃⲆΔᐃᐃⵠᐃ();
		else if ("Deutsch" === ⲆᐃΔ) ΔⲆⵠⲆⲆⲆⲆ();
		else if (ⲆᐃΔ === "Español") ΔⵠΔⵠΔⵠΔ();
		else if ("Português" === ⲆᐃΔ) ⵠⵠΔⵠⵠᐃᐃ();
		else if (ⲆᐃΔ === "Русский") ΔⲆᐃⵠⵠⵠⲆ();
		else ⲆᐃΔ === "Polski" && ᐃΔᐃⵠΔⲆⲆ();
		ⲆⲆΔΔⵠ = [];
		ⵠⵠⵠ.ⲆΔᐃⵠ.label = [];
		$(".md-languages ul li").removeClass(Δ[378]);
		$(this).addClass(Δ[378]);
		$(Δ[194]).text(ⲆᐃΔ)
	}));
	const ⵠᐃⲆⵠᐃᐃⲆ = ⲆⵠⵠᐃⲆΔΔ;
	const ⵠΔⵠⲆ = ᐃΔΔ;
	var ΔⲆⵠⵠⲆ = "EN";
	const ⲆΔΔᐃⵠⵠⵠ = ΔᐃⲆΔⲆⵠⵠ;
	const ᐃⲆⵠΔΔ = ⵠᐃᐃⵠⵠ;
	var ⵠᐃⵠΔⲆⲆᐃ = navigator.language || navigator.userLanguage;
	switch (ⵠᐃⵠΔⲆⲆᐃ) {
		case "ru":
			ΔⲆⵠⵠⲆ = "RU";
			break;
		case "en":
			ΔⲆⵠⵠⲆ = "EN";
			break;
		case "es":
			ΔⲆⵠⵠⲆ = "SP";
			break;
		case "fr":
			ΔⲆⵠⵠⲆ = "FR";
			break;
		case "pl":
			ΔⲆⵠⵠⲆ = "PL";
			break;
		case "de":
			ΔⲆⵠⵠⲆ = "DE";
			break;
		case "pt":
			ΔⲆⵠⵠⲆ = "PT";
			break
	}
	const ΔⵠⲆᐃⵠ = ᐃᐃⲆΔΔ;
	var ⲆΔⵠⲆⲆᐃΔ;
	const ⵠΔᐃⵠΔᐃⵠ = ⲆⲆᐃⵠΔⲆᐃ;
	if (ΔⲆⵠⵠⲆ === "FR") {
		$(Δ[194]).text("Français");
		ⲆΔⵠⲆⲆᐃΔ = ᐃⲆΔᐃᐃⵠᐃ
	} else if (ΔⲆⵠⵠⲆ === "PL") {
		$(Δ[194]).text("Polski");
		ⲆΔⵠⲆⲆᐃΔ = ᐃΔᐃⵠΔⲆⲆ
	} else if ("PT" === ΔⲆⵠⵠⲆ) {
		$(Δ[194]).text("Português");
		ⲆΔⵠⲆⲆᐃΔ = ⵠⵠΔⵠⵠᐃᐃ
	} else if ("SP" === ΔⲆⵠⵠⲆ) {
		$(Δ[194]).text("Español");
		ⲆΔⵠⲆⲆᐃΔ = ΔⵠΔⵠΔⵠΔ
	} else if ("RU" === ΔⲆⵠⵠⲆ) {
		$(Δ[194]).text("Русский");
		ⲆΔⵠⲆⲆᐃΔ = ΔⲆᐃⵠⵠⵠⲆ
	} else "DE" === ΔⲆⵠⵠⲆ ? ($(Δ[194]).text("Deutsch"), ⲆΔⵠⲆⲆᐃΔ = ΔⲆⵠⲆⲆⲆⲆ) : ($(Δ[194]).text("English"), ⲆΔⵠⲆⲆᐃΔ = ᐃᐃᐃᐃⵠΔⵠ);

	function ⵠᐃⵠⵠⲆⲆᐃ(ΔⵠΔⲆⲆⲆⵠ, ⵠⲆⲆⲆΔⵠΔ, ΔΔⵠΔⲆⲆⵠ, ᐃΔΔΔⵠΔΔ) {
		ΔΔΔᐃⲆᐃⵠ(ᐃΔⲆⲆᐃ, ΔⵠΔⲆⲆⲆⵠ, ⵠⲆⲆⲆΔⵠΔ, ΔΔⵠΔⲆⲆⵠ, ᐃΔΔΔⵠΔΔ);
		const ⲆᐃⲆΔΔⲆⵠ = ⲆⲆΔΔᐃⲆⵠ(ᐃⲆⵠᐃ[ⲆᐃⲆ], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[2], ᐃⲆⵠᐃ[ⵠΔⲆΔΔ]);
		const ⵠᐃⲆΔΔΔᐃ = ΔⲆⵠⲆⲆⲆΔ(ᐃⲆⵠᐃ[ⲆᐃⲆ], ᐃⲆⵠᐃ[ⵠΔᐃ]);
		const ⵠᐃᐃⵠⵠⲆⲆ = ((149 + (ⲆᐃⲆΔΔⲆⵠ ^ ⵠᐃⲆΔΔΔᐃ)) * 48271 + 0) % 2147483647;
		return ⵠᐃᐃⵠⵠⲆⲆ
	}
	ΔⲆ = {
		"ⲆΔᐃⲆᐃⵠⲆᐃΔ": "img/logo.png",
		"ⵠⲆⲆΔΔᐃⵠ": "img/mapday.png",
		"ⲆΔⲆΔΔᐃΔ": "img/mapnight.png",
		"ⵠᐃΔⵠΔΔΔᐃⵠ": "img/bigzday.png",
		"ⵠΔⲆⵠⵠⵠⲆΔΔ": "img/bigznight.png",
		"ΔⲆΔⵠⲆⲆΔ": "img/bigday-river1.png",
		"ᐃⲆⲆⵠⵠⵠΔᐃΔ": "img/bigday-lake.png",
		"ᐃⲆⲆⵠᐃΔⵠ": "img/bigday-berry.png",
		"ᐃⵠᐃΔⵠⲆΔ": "img/bigday-stone1.png",
		"ⲆᐃᐃΔᐃⵠΔ": "img/bigday-stone2.png",
		"ⵠΔΔΔᐃΔⲆ": "img/bigday-gold1.png",
		"ⲆⲆᐃΔⲆⲆⵠ": "img/bigday-gold2.png",
		"ⲆⲆᐃⲆᐃΔᐃ": "img/bigday-emerald1.png",
		"ΔⲆᐃᐃΔᐃΔ": "img/bigday-emerald2.png",
		"ⵠΔΔⵠⲆⲆΔ": "img/bigday-amethyst.png",
		"ⵠᐃⲆⲆⲆΔⲆ": "img/bigday-bear.png",
		"ⵠᐃᐃⲆΔⲆⵠ": "img/bigday-cave.png",
		"ᐃⵠⵠᐃΔᐃⵠ": "img/bigday-diamond.png",
		"ᐃⲆⲆΔⵠⲆᐃ": "img/bigday-island.png",
		"ΔΔᐃⵠᐃⲆⲆ": "img/bigday-reidite.png",
		"ᐃΔᐃᐃΔᐃⲆ": "img/bigday-spider.png",
		"ⲆᐃⵠⵠⵠⲆⵠ": "img/bigday-wolf.png",
		"ⲆΔᐃᐃⲆⲆᐃ": "img/bigday-fir-tree.png",
		"ΔⵠΔΔⵠᐃⲆ": "img/bigday-fox.png",
		"ᐃⵠᐃᐃΔᐃⲆ": "img/bigday-kraken.png",
		"ⵠΔⲆⲆⲆⵠⵠ": "img/bigday-piranha.png",
		"ΔᐃⲆⵠΔᐃⲆ": "img/bigday-cactus.png",
		"ᐃΔⵠΔⵠⲆΔ": "img/bigday-magma.png",
		"Δᐃᐃᐃⵠᐃᐃ": "img/bigday-river1.png",
		"ΔΔΔΔⲆᐃⲆΔᐃ": "img/bignight-lake.png",
		"ⵠΔᐃΔⲆⲆⵠⵠᐃ": "img/bignight-berry.png",
		"ⲆⲆΔᐃΔΔΔ": "img/bignight-stone1.png",
		"ⵠⵠⲆⵠΔⵠⵠ": "img/bignight-stone2.png",
		"ⲆⲆΔᐃⲆⵠᐃ": "img/bignight-gold1.png",
		"ΔⵠⲆᐃⲆⵠΔ": "img/bignight-gold2.png",
		"ᐃⵠᐃΔᐃⲆΔ": "img/bignight-emerald1.png",
		"ᐃⵠΔⵠᐃⲆΔ": "img/bignight-emerald2.png",
		"ΔⵠⵠⵠΔⵠⵠ": "img/bignight-amethyst.png",
		"ᐃⵠᐃΔⲆᐃᐃ": "img/bignight-bear.png",
		"ⵠΔⲆᐃⵠΔⵠ": "img/bignight-cave.png",
		"ΔⲆⵠΔᐃⵠᐃ": "img/bignight-diamond.png",
		"ⲆΔⲆᐃⲆᐃⲆ": "img/bignight-island.png",
		"ⵠᐃⵠⵠΔⲆΔ": "img/bignight-reidite.png",
		"ⵠⲆΔᐃᐃⵠᐃ": "img/bignight-spider.png",
		"ᐃⲆᐃΔᐃⵠⵠ": "img/bignight-wolf.png",
		"ⵠⵠⲆΔᐃⵠᐃ": "img/bignight-fir-tree.png",
		"ᐃΔⵠⲆⲆᐃΔ": "img/bignight-fox.png",
		"ⲆⵠⲆⲆΔΔΔ": "img/bignight-kraken.png",
		"ᐃⵠⲆᐃᐃⲆᐃ": "img/bignight-piranha.png",
		"ΔⵠΔΔΔⲆⵠ": "img/bignight-cactus.png",
		"ᐃΔᐃⵠⲆᐃⲆ": "img/bignight-magma.png",
		"ᐃⲆᐃⵠΔΔΔ": "img/bigday-desert.png",
		"ⲆᐃΔⲆⲆᐃⵠ": "img/bigday-winter.png",
		"ᐃⲆᐃⵠⲆᐃⵠ": "img/bigday-lava.png",
		"ⲆⲆᐃⵠΔⵠᐃ": "img/bigday-forest.png",
		"ΔΔΔⲆᐃΔⲆ": "img/bignight-desert.png",
		"ⲆⲆᐃᐃᐃⵠⲆ": "img/bignight-winter.png",
		"ⲆΔΔⵠⵠᐃΔ": "img/bignight-lava.png",
		"ⲆᐃⵠΔⲆΔⲆ": "img/bignight-forest.png",
		"ⵠⲆΔᐃᐃᐃᐃ": "img/day-river-wave.png",
		"ΔⵠΔⵠⵠᐃⵠ": "img/night-river-wave.png",
		"ᐃΔΔⵠⲆΔᐃ": "img/day-fog0.png",
		"ⵠᐃΔⵠᐃᐃΔ": "img/day-fog1.png",
		"ⲆⲆⲆᐃᐃΔᐃ": "img/day-fog2.png",
		"ᐃᐃⵠⵠⵠΔⲆ": "img/night-fog0.png",
		"ⲆⲆⵠⵠⲆΔⵠ": "img/night-fog1.png",
		"ⲆⲆⵠᐃⲆⵠⵠ": "img/night-fog2.png",
		"ΔⵠⲆΔᐃΔΔ": "img/day-fogdesert0.png",
		"ⲆⵠᐃⵠⲆⵠⲆ": "img/day-fogdesert1.png",
		"ΔᐃⵠΔⵠᐃΔ": "img/day-fogdesert2.png",
		"ⲆⲆΔⵠΔⵠⵠ": "img/night-fogdesert0.png",
		"ᐃⲆΔᐃⵠⵠΔ": "img/night-fogdesert1.png",
		"ⵠᐃⵠⲆᐃᐃΔ": "img/night-fogdesert2.png",
		"ΔⵠΔⵠᐃⵠᐃ": "img/day-cross-server.png",
		"ᐃⲆΔᐃⵠᐃⵠ": "img/day-here-server.png",
		"ΔⵠⵠΔΔᐃΔ": "img/day-finish-server.png",
		"ⲆΔΔΔΔⲆⲆ": "img/day-item-server.png",
		"ⵠⲆⲆΔⲆⵠⵠ": "img/day-skull-server.png",
		"ⵠᐃᐃΔⵠΔᐃ": "img/night-cross-server.png",
		"ΔΔⲆⲆⲆⵠΔ": "img/night-here-server.png",
		"ᐃⵠΔⵠⲆⲆΔ": "img/night-finish-server.png",
		"ΔⲆΔⲆΔⲆⲆ": "img/night-item-server.png",
		"ΔⲆⲆΔⵠΔᐃ": "img/night-skull-server.png",
		"ᐃᐃΔⵠⵠⲆΔ": "img/day-reidite0.png",
		"ΔⲆΔⲆΔⵠⲆ": "img/night-reidite0.png",
		"ⵠⲆⲆⲆⵠⵠⲆ": "img/day-reidite1.png",
		"ⵠⵠⲆⵠⵠΔᐃ": "img/night-reidite1.png",
		"ᐃΔΔᐃΔⵠΔ": "img/day-reidite2.png",
		"ⵠᐃⵠΔᐃⲆᐃ": "img/night-reidite2.png",
		"ᐃΔⲆⵠᐃⲆΔ": "img/day-lava1.png",
		"ΔΔΔΔⲆᐃⲆ": "img/night-lava1.png",
		"ΔⵠⲆΔΔⲆⲆ": "img/day-lava2.png",
		"ΔⲆⵠΔᐃᐃΔ": "img/night-lava2.png",
		"ⵠΔᐃΔⲆᐃⲆ": "img/day-lava3.png",
		"ⲆⵠᐃⲆᐃΔⵠ": "img/night-lava3.png",
		"ΔᐃᐃΔⵠⵠᐃ": "img/day-lava4.png",
		"ΔⵠⵠᐃΔΔΔ": "img/night-lava4.png",
		"ⵠⵠΔᐃΔⲆᐃ": "img/day-lava5.png",
		"ⵠⲆⵠⲆΔⵠᐃ": "img/night-lava5.png",
		"ΔⲆⲆᐃΔᐃⲆ": "img/day-lava6.png",
		"ΔΔᐃᐃⵠΔⲆ": "img/night-lava6.png",
		"ⲆΔΔΔΔΔⵠ": "img/day-lava-ground1.png",
		"ΔΔΔᐃⵠΔΔ": "img/night-lava-ground1.png",
		"ⲆⵠΔᐃⲆᐃⲆ": "img/day-lava-ground2.png",
		"ΔⵠΔⲆᐃⵠᐃ": "img/night-lava-ground2.png",
		"ᐃⵠΔᐃⵠᐃⲆ": "img/day-lava-ground3.png",
		"ⵠᐃⵠΔⵠⲆⲆ": "img/night-lava-ground3.png",
		"ᐃᐃⲆⵠⵠΔΔ": "img/day-lava-ground4.png",
		"ΔΔⲆΔᐃⲆⵠ": "img/night-lava-ground4.png",
		"ⲆⲆⵠⵠΔⲆᐃ": "img/day-lava-ground5.png",
		"ᐃΔΔⵠΔⵠⵠ": "img/night-lava-ground5.png",
		"ᐃᐃᐃⲆⲆᐃᐃ": "img/day-lava-ground6.png",
		"ΔⲆᐃⲆⵠΔⲆ": "img/night-lava-ground6.png",
		"ⲆᐃⲆΔⵠⵠᐃ": "img/day-fire-mob.png",
		"ΔⵠΔⵠⵠⲆⵠ": "img/night-fire-mob.png",
		"ⲆⲆΔⵠⲆⲆⵠ": "img/hurt-fire-mob.png",
		"ⵠᐃᐃᐃⲆᐃᐃ": "img/day-diamond-protection.png",
		"ᐃᐃⲆΔΔΔᐃ": "img/night-diamond-protection.png",
		"ᐃΔᐃᐃᐃⵠⲆ": "img/day-hand-diamond-protection.png",
		"ⵠΔⲆⲆΔⵠⵠ": "img/night-hand-diamond-protection.png",
		"ΔΔⵠⲆΔΔⲆ": "img/inv-diamond-protection-out.png",
		"ⲆⵠΔΔⲆⲆⵠ": "img/inv-diamond-protection-in.png",
		"ⵠΔΔᐃⵠΔΔ": "img/inv-diamond-protection-click.png",
		"ⵠⲆⵠⵠⲆΔᐃ": "img/day-amethyst-protection.png",
		"ⵠΔᐃⵠᐃᐃᐃ": "img/night-amethyst-protection.png",
		"ⵠᐃᐃⲆᐃⵠΔⵠⵠ": "img/day-hand-amethyst-protection.png",
		"ⵠⲆⵠⵠΔᐃΔΔⲆ": "img/night-hand-amethyst-protection.png",
		"ᐃᐃΔΔΔΔⵠ": "img/inv-amethyst-protection-out.png",
		"ⵠΔⵠⲆΔⵠᐃ": "img/inv-amethyst-protection-in.png",
		"ⵠⵠᐃⲆⲆⵠᐃ": "img/inv-amethyst-protection-click.png",
		"ⵠⵠΔΔⲆᐃⲆ": "img/day-reidite-sword.png",
		"ⲆΔⲆⵠᐃⲆᐃ": "img/night-reidite-sword.png",
		"ⲆΔΔᐃᐃΔᐃ": "img/inv-reidite-sword-out.png",
		"ⲆⵠⲆⵠᐃⲆᐃ": "img/inv-reidite-sword-in.png",
		"ΔⵠΔΔⲆᐃⵠ": "img/inv-reidite-sword-click.png",
		"ᐃⲆΔᐃΔΔᐃ": "img/inv-reidite-out.png",
		"ᐃⲆᐃⵠᐃⲆⵠ": "img/inv-reidite-in.png",
		"ᐃᐃΔⵠⲆᐃΔ": "img/inv-reidite-click.png",
		"ΔᐃᐃᐃⲆⲆᐃ": "img/inv-flame-out.png",
		"ⵠᐃΔΔⵠⵠᐃ": "img/inv-flame-in.png",
		"ⵠⲆΔⲆⲆΔⵠ": "img/inv-flame-click.png",
		"ΔⵠⲆΔⲆᐃⵠ": "img/day-magma-buble0.png",
		"ΔⲆⲆᐃⵠΔⲆ": "img/night-magma-buble0.png",
		"ΔΔⲆᐃᐃᐃⲆ": "img/day-magma-buble1.png",
		"ⵠⵠⲆⵠᐃΔΔ": "img/night-magma-buble1.png",
		"ⵠⲆⵠᐃᐃΔΔ": "img/day-magma-buble2.png",
		"ΔⵠⲆᐃⵠⲆⲆ": "img/night-magma-buble2.png",
		"ⵠⲆΔⲆΔⵠⲆ": "img/day-lava-dragon.png",
		"ⵠⲆᐃΔᐃΔⵠ": "img/night-lava-dragon.png",
		"ᐃΔᐃⵠΔᐃⵠⵠⵠ": "img/day-fire-dragon.png",
		"ΔⲆⵠⲆΔⵠΔᐃⵠ": "img/night-fire-dragon.png",
		"ⲆΔⵠᐃⵠⵠᐃ": "img/hurt-lava-dragon.png",
		"ⲆΔⵠⵠΔⲆⲆ": "img/day-lava-wing-left.png",
		"ΔΔᐃᐃΔᐃⲆ": "img/night-lava-wing-left.png",
		"ⵠⵠᐃᐃΔⵠᐃ": "img/day-lava-wing-right.png",
		"ΔⵠᐃⵠⵠⵠⲆ": "img/night-lava-wing-right.png",
		"ΔⲆᐃⵠⲆᐃⲆ": "img/hurt-lava-wing-left.png",
		"ΔⲆΔⵠⲆΔΔ": "img/hurt-lava-wing-right.png",
		"ᐃⵠΔᐃᐃΔᐃ": "img/day-reidite-spear.png",
		"ⵠⵠΔⵠⵠᐃΔ": "img/night-reidite-spear.png",
		"ⲆΔⵠᐃⵠΔⲆ": "img/inv-reidite-spear-out.png",
		"ᐃⵠⲆⲆΔⲆⲆ": "img/inv-reidite-spear-in.png",
		"ⲆⵠⲆᐃΔⲆΔ": "img/inv-reidite-spear-click.png",
		"ΔⲆᐃΔᐃΔⲆ": "img/day-reidite-helmet.png",
		"ⲆⵠⵠⲆⵠⲆΔ": "img/night-reidite-helmet.png",
		"ⲆᐃⲆΔΔᐃⵠ": "img/inv-reidite-helmet-out.png",
		"ⵠⵠⲆΔΔΔΔ": "img/inv-reidite-helmet-in.png",
		"ΔⵠⲆⵠΔⵠᐃ": "img/inv-reidite-helmet-click.png",
		"ⵠᐃⲆΔΔⵠⲆ": "img/day-hand-reidite-protection.png",
		"ΔⵠᐃⵠⵠΔᐃ": "img/night-hand-reidite-protection.png",
		"ⲆΔᐃⲆⲆⵠⵠ": "img/day-reidite-protection.png",
		"ΔΔⵠᐃⵠΔⵠ": "img/night-reidite-protection.png",
		"ⵠΔⲆᐃᐃⲆᐃ": "img/inv-reidite-protection-out.png",
		"ᐃᐃᐃᐃᐃⲆⵠ": "img/inv-reidite-protection-in.png",
		"ᐃΔⵠⲆⵠⲆⵠ": "img/inv-reidite-protection-click.png",
		"ᐃⲆⲆⵠⵠⲆⲆ": "img/day-lava-dragon-sword.png",
		"ⲆΔΔⲆᐃᐃΔ": "img/night-lava-dragon-sword.png",
		"ⵠᐃⲆⵠΔⲆⵠ": "img/inv-lava-dragon-sword-out.png",
		"ᐃᐃᐃΔᐃᐃⵠ": "img/inv-lava-dragon-sword-in.png",
		"ⵠⲆΔᐃᐃΔⵠ": "img/inv-lava-dragon-sword-click.png",
		"ⵠⵠⲆⲆⵠᐃᐃ": "img/day-lava-spear.png",
		"ⵠⲆⵠⲆⲆΔΔ": "img/night-lava-spear.png",
		"ᐃᐃⲆⲆⵠⲆⲆ": "img/inv-lava-spear-out.png",
		"ΔⲆΔⲆⲆᐃΔ": "img/inv-lava-spear-in.png",
		"ⵠᐃⲆᐃᐃⵠⵠ": "img/inv-lava-spear-click.png",
		"ⵠΔⲆⲆⲆΔⲆ": "img/day-lava-helmet.png",
		"ΔᐃΔⲆⵠⲆⲆ": "img/night-lava-helmet.png",
		"ⲆⲆΔᐃΔᐃᐃ": "img/inv-lava-helmet-out.png",
		"ⲆⲆᐃΔΔᐃΔ": "img/inv-lava-helmet-in.png",
		"ⵠΔⲆⵠΔⲆᐃ": "img/inv-lava-helmet-click.png",
		"ᐃΔⲆΔⵠⵠⲆ": "img/day-witch-hat.png",
		"ᐃⵠⵠⵠⲆᐃⵠ": "img/night-witch-hat.png",
		"ᐃⵠⵠⲆⵠΔᐃ": "img/inv-witch-hat-out.png",
		"ⵠᐃⲆⵠᐃⵠᐃ": "img/inv-witch-hat-in.png",
		"ᐃᐃΔⲆⲆⵠⲆ": "img/inv-witch-hat-click.png",
		"ΔⲆⲆⵠᐃⵠⲆ": "img/day-nimbus2000.png",
		"ⵠᐃᐃⲆⲆΔᐃ": "img/night-nimbus2000.png",
		"ⵠᐃΔⵠⵠⲆᐃ": "img/inv-nimbus2000-out.png",
		"ⲆᐃⲆⵠΔΔᐃ": "img/inv-nimbus2000-in.png",
		"ΔᐃΔⵠᐃⵠΔ": "img/inv-nimbus2000-click.png",
		"ΔᐃΔΔΔᐃⵠ": "img/day-accessory1-pacques.png",
		"ⲆⲆⵠᐃΔⵠⲆ": "img/night-accessory1-pacques.png",
		"ΔᐃⲆⲆΔΔΔ": "img/day-accessory2-pacques.png",
		"ΔⵠᐃΔⲆΔᐃ": "img/night-accessory2-pacques.png",
		"ⲆⵠⲆⲆΔⵠΔ": "img/day-accessory3-pacques.png",
		"ΔᐃΔΔΔᐃΔ": "img/night-accessory3-pacques.png",
		"ΔⵠⲆⵠⲆⲆᐃ": "img/day-accessory5-pacques.png",
		"ᐃᐃΔⲆⵠⲆᐃ": "img/night-accessory5-pacques.png",
		"ⵠⵠᐃⵠᐃⵠⵠ": "img/day-accessory6-pacques.png",
		"ⵠⲆᐃᐃⲆᐃᐃ": "img/night-accessory6-pacques.png",
		"ⵠᐃᐃᐃⲆⲆᐃ": "img/day-accessory7-pacques.png",
		"ᐃⲆΔⵠⵠⲆΔ": "img/night-accessory7-pacques.png",
		"ΔΔᐃΔΔⲆΔ": "img/day-accessory8-pacques.png",
		"ᐃᐃⵠᐃⲆⲆΔ": "img/night-accessory8-pacques.png",
		"ᐃⲆⵠⲆᐃΔᐃ": "img/day-bag-pacques.png",
		"ΔΔⲆⵠⵠⵠⵠ": "img/night-bag-pacques.png",
		"ᐃⵠΔᐃⵠΔΔ": "img/day-carrot.png",
		"ⵠᐃⲆⲆΔΔΔ": "img/night-carrot.png",
		"ΔᐃⲆᐃᐃᐃⵠ": "img/day-carrot-dried.png",
		"ⲆⲆΔΔΔΔΔ": "img/night-carrot-dried.png",
		"ⵠᐃⲆⵠᐃΔᐃ": "img/day-tomato-herb.png",
		"ᐃΔΔᐃᐃᐃΔ": "img/night-tomato-herb.png",
		"ⵠΔΔΔΔΔΔ": "img/day-tomato-herb-dried.png",
		"ᐃⲆⲆΔΔⵠⵠ": "img/night-tomato-herb-dried.png",
		"ΔⵠⵠⵠⵠⲆΔ": "img/day-tomato.png",
		"ⵠⲆᐃⲆⲆⲆΔ": "img/night-tomato.png",
		"ΔⵠⵠⵠΔᐃⲆ": "img/inv-carrot-out.png",
		"ⵠⵠᐃⵠΔΔᐃ": "img/inv-carrot-in.png",
		"ⵠΔᐃΔΔⵠⵠ": "img/inv-carrot-click.png",
		"ΔΔᐃΔΔᐃⲆ": "img/inv-tomato-out.png",
		"ΔΔⲆᐃᐃΔΔ": "img/inv-tomato-in.png",
		"ⲆΔⵠᐃⲆⲆⲆ": "img/inv-tomato-click.png",
		"ⲆᐃⵠΔᐃⵠⵠ": "img/day-player0.png",
		"ⲆᐃⲆⵠⲆΔΔ": "img/night-player0.png",
		"ΔΔᐃΔⵠᐃⵠ": "img/day-player1.png",
		"ⵠΔⲆⵠⵠⵠᐃ": "img/night-player1.png",
		"ⲆⲆⲆⵠΔⵠⲆ": "img/day-player2.png",
		"ᐃΔⲆΔⲆΔⵠ": "img/night-player22.png",
		"ⵠⵠⲆΔΔᐃⵠ": "img/day-player3.png",
		"ⵠΔΔⲆⲆΔΔ": "img/night-player33.png",
		"ⲆΔⲆΔⲆᐃΔ": "img/day-player4.png",
		"ΔⵠⲆⲆΔⲆⲆ": "img/night-player4.png",
		"ⲆⲆⵠⵠⲆᐃⵠ": "img/day-player5.png",
		"ΔᐃᐃⲆⲆᐃⵠ": "img/night-player5.png",
		"ΔΔⵠⲆᐃⲆⲆ": "img/day-player6.png",
		"ⲆᐃⲆⲆᐃⵠⵠ": "img/night-player6.png",
		"ⵠᐃⵠⲆⲆⵠⵠ": "img/day-player7.png",
		"ⲆⲆΔⲆⲆⵠⵠ": "img/night-player7.png",
		"ⲆⵠᐃΔⵠΔⲆ": "img/day-player8.png",
		"ΔΔᐃⲆΔⲆΔ": "img/night-player8.png",
		"ΔΔⵠᐃΔⲆⵠ": "img/day-player9.png",
		"ⲆⲆᐃⲆⲆΔⵠ": "img/night-player9.png",
		"ⲆⵠⵠⲆᐃΔΔ": "img/day-player10.png",
		"ⵠΔⲆⵠⲆΔᐃ": "img/night-player10.png",
		"ᐃⵠⲆΔⵠⵠⲆ": "img/day-player11.png",
		"ᐃⵠⲆᐃᐃⲆΔ": "img/night-player11.png",
		"ⲆᐃᐃΔⲆⲆᐃ": "img/day-player12.png",
		"ᐃᐃᐃⲆᐃⵠΔ": "img/night-player12.png",
		"ΔⵠⵠᐃⲆΔᐃ": "img/day-player13.png",
		"ᐃⲆᐃⲆᐃⵠΔ": "img/night-player13.png",
		"ᐃⵠⲆΔΔᐃΔ": "img/day-player14.png",
		"ⲆⲆΔⲆⵠⵠᐃ": "img/night-player14.png",
		"ᐃᐃⲆⲆᐃⵠᐃ": "img/day-player15.png",
		"ᐃᐃⲆⵠᐃⲆⲆ": "img/night-player15.png",
		"ᐃⵠⵠΔΔⲆᐃ": "img/day-player16.png",
		"ᐃⵠⵠⲆΔⵠᐃ": "img/night-player16.png",
		"ΔⵠᐃⵠΔⲆⵠ": "img/day-player17.png",
		"ⲆⵠⲆΔⵠⵠⵠ": "img/night-player17.png",
		"ⵠⵠⲆⵠᐃⲆᐃ": "img/day-player18.png",
		"ⲆᐃᐃᐃΔⲆⲆ": "img/night-player18.png",
		"ᐃⵠᐃᐃΔΔΔ": "img/day-player19.png",
		"ΔⲆᐃⲆⵠⲆᐃ": "img/night-player19.png",
		"ⲆⵠⲆⲆΔⵠⵠ": "img/day-hand-player0.png",
		"ΔⲆᐃⲆᐃΔΔ": "img/night-hand-player0.png",
		"ⲆⲆΔᐃᐃⵠⵠ": "img/day-hand-player1.png",
		"ΔΔΔᐃⲆᐃᐃ": "img/night-hand-player1.png",
		"ΔⵠⲆⲆΔᐃᐃ": "img/day-hand-player2.png",
		"ⲆⵠⵠⵠⵠⲆΔ": "img/night-hand-player22.png",
		"ΔΔΔᐃᐃⵠⲆ": "img/day-hand-player3.png",
		"ⵠΔⲆΔΔΔᐃ": "img/night-hand-player33.png",
		"ΔⲆⵠⲆⲆⲆᐃ": "img/day-hand-player4.png",
		"ᐃΔᐃᐃᐃⲆⲆ": "img/night-hand-player4.png",
		"ᐃᐃΔⵠᐃⲆᐃ": "img/day-hand-player5.png",
		"ᐃⲆᐃᐃⲆᐃⲆ": "img/night-hand-player5.png",
		"ΔⲆΔⲆᐃⲆⲆ": "img/day-hand-player6.png",
		"ᐃᐃⲆⵠΔᐃΔ": "img/night-hand-player6.png",
		"ⲆⲆⲆΔⲆΔᐃ": "img/day-hand-player7.png",
		"ⵠⵠΔΔΔⲆⲆ": "img/night-hand-player7.png",
		"ΔᐃΔᐃᐃΔΔ": "img/day-hand-player8.png",
		"ⲆᐃΔⲆΔᐃⵠ": "img/night-hand-player8.png",
		"ΔΔᐃⲆΔΔᐃ": "img/day-hand-player9.png",
		"ⲆᐃΔⲆΔⵠⵠ": "img/night-hand-player9.png",
		"ΔΔᐃΔⵠⵠⵠ": "img/day-hand-player10.png",
		"ⲆⵠⵠᐃⲆᐃⲆ": "img/night-hand-player10.png",
		"ⵠⲆⵠⲆΔΔⲆ": "img/day-hand-player11.png",
		"ΔΔⲆⲆᐃⲆᐃ": "img/night-hand-player11.png",
		"ⲆΔᐃᐃΔΔᐃ": "img/day-hand-player12.png",
		"ⲆⲆᐃΔᐃᐃⲆ": "img/night-hand-player12.png",
		"ᐃⲆⵠⵠᐃⵠⵠ": "img/day-hand-player13.png",
		"ⵠΔⵠΔᐃᐃⵠ": "img/night-hand-player13.png",
		"ⲆᐃΔⲆΔⲆᐃ": "img/day-hand-player14.png",
		"ᐃⲆⵠΔⲆΔⲆ": "img/night-hand-player14.png",
		"ⵠⲆΔⵠⲆⵠᐃ": "img/day-hand-player15.png",
		"ΔⲆΔᐃᐃⵠΔ": "img/night-hand-player15.png",
		"ᐃⵠⵠΔΔⵠΔ": "img/day-hand-player16.png",
		"ⵠᐃΔᐃᐃΔᐃ": "img/night-hand-player16.png",
		"ⵠᐃᐃⲆⲆᐃⲆ": "img/day-hand-player17.png",
		"ⵠᐃⵠⵠᐃᐃⵠ": "img/night-hand-player17.png",
		"ΔΔⵠⵠᐃⵠΔ": "img/day-hand-player18.png",
		"ΔⵠⲆᐃⲆⵠⲆ": "img/night-hand-player18.png",
		"ⵠᐃΔᐃⵠⲆⵠ": "img/day-hand-player19.png",
		"ΔᐃⲆⲆⲆⲆⵠ": "img/night-hand-player19.png",
		"ΔΔⲆⲆᐃⵠⵠ": "img/day-accessory4.png",
		"ⲆⵠⵠⵠⲆⲆⲆ": "img/night-accessory4.png",
		"ⵠⵠⲆᐃᐃΔⵠ": "img/day-accessory9.png",
		"ⲆΔΔⵠⲆᐃΔ": "img/night-accessory9.png",
		"ⲆⲆΔⲆⵠᐃᐃ": "img/day-accessory10.png",
		"ΔᐃⵠᐃΔⲆⲆ": "img/night-accessory10.png",
		"ᐃᐃⵠΔⵠΔᐃ": "img/day-accessory11.png",
		"ⲆⲆᐃⲆⵠᐃΔ": "img/night-accessory11.png",
		"ⲆⲆΔⲆΔⵠⵠ": "img/day-accessory12.png",
		"ⵠⵠⲆᐃⵠⲆⵠ": "img/night-accessory12.png",
		"ᐃⵠⲆᐃⵠΔⵠ": "img/day-bag.png",
		"ᐃᐃⵠΔⵠⲆΔ": "img/night-bag.png",
		"ⵠᐃΔᐃⲆⵠⲆ": "img/inv-bag-out.png",
		"ᐃⵠΔⵠΔⵠᐃ": "img/inv-bag-in.png",
		"ⲆⲆⵠⲆᐃⲆⵠ": "img/inv-bag-click.png",
		"ᐃⲆᐃᐃⵠⲆᐃ": "img/day-pitchfork.png",
		"ⵠⲆⲆΔΔⵠΔ": "img/night-pitchfork.png",
		"ⵠⵠΔᐃΔΔᐃ": "img/inv-pitchfork-out.png",
		"ΔᐃΔΔⲆⵠⲆ": "img/inv-pitchfork-in.png",
		"ⵠⵠᐃΔⲆᐃⵠ": "img/inv-pitchfork-click.png",
		"ΔᐃⲆⲆΔᐃᐃ": "img/inv-wood-spike-door-out.png",
		"ΔⲆⵠⵠᐃΔⲆ": "img/inv-wood-spike-door-in.png",
		"ᐃᐃᐃΔⲆⲆⵠ": "img/inv-wood-spike-door-click.png",
		"ⵠⵠᐃΔᐃΔⲆ": "img/inv-stone-spike-door-out.png",
		"ⵠⵠⵠᐃⵠⵠⵠ": "img/inv-stone-spike-door-in.png",
		"ⵠⵠᐃⵠⲆⵠΔ": "img/inv-stone-spike-door-click.png",
		"ⵠⵠᐃᐃⲆΔᐃ": "img/inv-gold-spike-door-out.png",
		"ᐃᐃΔᐃᐃᐃⵠ": "img/inv-gold-spike-door-in.png",
		"ᐃⲆᐃΔⲆΔⵠ": "img/inv-gold-spike-door-click.png",
		"ᐃᐃⲆⲆⲆᐃⵠ": "img/inv-diamond-spike-door-out.png",
		"ⲆᐃᐃᐃⵠⵠΔ": "img/inv-diamond-spike-door-in.png",
		"ⵠⵠⵠᐃⲆⵠΔ": "img/inv-diamond-spike-door-click.png",
		"ⵠΔᐃⵠⵠΔⵠ": "img/inv-amethyst-spike-door-out.png",
		"ⲆⵠⲆⲆᐃⵠᐃ": "img/inv-amethyst-spike-door-in.png",
		"ⵠΔⲆᐃΔⲆⲆ": "img/inv-amethyst-spike-door-click.png",
		"ᐃⲆᐃⵠⵠⲆᐃ": "img/day-wood-spike-door.png",
		"ᐃⵠΔΔⵠⲆⲆ": "img/night-wood-spike-door.png",
		"ⲆᐃⵠⲆᐃⲆᐃ": "img/day-stone-spike-door.png",
		"ⲆΔΔᐃᐃᐃⲆ": "img/night-stone-spike-door.png",
		"ΔΔⵠⵠΔⲆⵠ": "img/day-gold-spike-door.png",
		"ⲆⲆᐃΔΔⲆⵠ": "img/night-gold-spike-door.png",
		"ⵠⲆΔᐃⲆᐃⵠ": "img/day-diamond-spike-door.png",
		"ᐃⵠᐃⵠⲆⲆΔ": "img/night-diamond-spike-door.png",
		"ᐃΔⵠⵠΔⲆΔ": "img/day-amethyst-spike-door.png",
		"ⵠΔⵠⵠⵠⲆΔ": "img/night-amethyst-spike-door.png",
		"ΔΔⵠΔⲆΔⲆ": "img/inv-reidite-spike-door-out.png",
		"ⵠⵠⵠᐃⲆⲆΔ": "img/inv-reidite-spike-door-in.png",
		"ᐃⵠΔᐃⲆΔⲆ": "img/inv-reidite-spike-door-click.png",
		"ⲆⵠᐃᐃΔⵠΔ": "img/inv-reidite-door-out.png",
		"ⲆⵠΔΔᐃⲆⵠ": "img/inv-reidite-door-in.png",
		"ᐃᐃⲆⵠΔΔΔ": "img/inv-reidite-door-click.png",
		"ᐃᐃᐃᐃⲆᐃΔ": "img/inv-reidite-spike-out.png",
		"ΔᐃⲆΔⵠΔᐃ": "img/inv-reidite-spike-in.png",
		"ΔᐃⵠⲆΔᐃΔ": "img/inv-reidite-spike-click.png",
		"ⵠᐃⵠᐃⲆΔΔ": "img/inv-reidite-wall-out.png",
		"ᐃᐃⲆᐃᐃΔᐃ": "img/inv-reidite-wall-in.png",
		"ΔⲆⲆΔⵠⵠⲆ": "img/inv-reidite-wall-click.png",
		"ΔΔⲆᐃⲆᐃⲆ": "img/day-reidite-wall.png",
		"ⲆⲆⲆⲆΔⲆΔ": "img/night-reidite-wall.png",
		"ⲆⵠᐃⵠⵠⲆⵠ": "img/day-reidite-door.png",
		"ΔⵠⲆⲆⵠⵠΔ": "img/night-reidite-door.png",
		"ᐃⵠⵠⵠⲆΔᐃ": "img/day-reidite-spike.png",
		"ᐃᐃⲆⵠⵠⲆᐃ": "img/night-reidite-spike.png",
		"ⵠⵠⲆⵠΔΔΔ": "img/day-reidite-spike-door.png",
		"ⵠᐃⵠⲆΔᐃᐃ": "img/night-reidite-spike-door.png",
		"ΔᐃⵠΔΔΔⲆ": "img/inv-reidite-pickaxe-out.png",
		"ΔⲆΔᐃⲆΔⲆ": "img/inv-reidite-pickaxe-in.png",
		"ⵠⲆⲆΔⲆᐃᐃ": "img/inv-reidite-pickaxe-click.png",
		"ΔΔⲆⵠᐃⲆⲆ": "img/day-reidite-pickaxe.png",
		"ⲆᐃⵠΔⲆΔⵠ": "img/night-reidite-pickaxe.png",
		"ᐃΔᐃⵠᐃᐃⵠ": "img/inv-reidite-hammer-out.png",
		"ⵠⵠΔΔΔΔᐃ": "img/inv-reidite-hammer-in.png",
		"ⵠⵠΔΔᐃᐃᐃ": "img/inv-reidite-hammer-click.png",
		"ⲆⲆΔᐃᐃᐃⲆ": "img/day-reidite-hammer.png",
		"ΔᐃᐃⲆΔᐃᐃ": "img/night-reidite-hammer.png",
		"Ⲇⵠᐃⵠⵠᐃᐃ": "img/day-watermelon1.png",
		"ΔⲆⵠΔⵠⲆΔ": "img/night-watermelon1.png",
		"ⵠΔⵠⲆᐃⵠⲆ": "img/day-watermelon-dried1.png",
		"ⲆᐃⲆᐃⵠᐃⲆ": "img/night-watermelon-dried1.png",
		"Δⵠᐃᐃⵠⵠⵠ": "img/inv-watermelon-out.png",
		"ΔΔᐃᐃᐃᐃᐃ": "img/inv-watermelon-in.png",
		"ᐃⵠⵠᐃΔⵠⵠ": "img/inv-watermelon-click.png",
		"ᐃΔᐃᐃᐃΔⲆ": "img/day-boat.png",
		"ⵠΔΔⵠⲆΔⵠ": "img/night-boat.png",
		"ⲆⲆⵠⵠⵠΔΔ": "img/day-boat-wave.png",
		"ΔⲆΔᐃⵠⵠᐃ": "img/night-boat-wave.png",
		"ΔΔᐃⵠᐃΔᐃ": "img/inv-boat-out.png",
		"ⲆⲆⵠΔᐃⵠᐃ": "img/inv-boat-in.png",
		"ᐃᐃᐃⲆᐃⲆΔ": "img/inv-boat-click.png",
		"ⲆⵠⲆᐃᐃⲆΔ": "img/day-plane.png",
		"ⲆᐃΔⵠⲆⵠᐃ": "img/night-plane.png",
		"ⲆⵠᐃⲆΔⲆⲆ": "img/inv-plane-out.png",
		"ΔⲆⲆⲆⲆΔΔ": "img/inv-plane-in.png",
		"ᐃᐃⵠΔⵠᐃᐃ": "img/inv-plane-click.png",
		"ᐃᐃΔⲆⵠⵠΔ": "img/day-sled.png",
		"ᐃⲆᐃⲆᐃᐃΔ": "img/night-sled.png",
		"ⲆⵠᐃΔⵠΔⵠ": "img/day-sled-wave.png",
		"ⲆⲆⵠⵠΔⵠΔ": "img/night-sled-wave.png",
		"ΔⲆΔⲆᐃᐃΔ": "img/inv-sled-out.png",
		"ⵠᐃⲆⲆⵠᐃᐃ": "img/inv-sled-in.png",
		"ΔᐃⵠⲆᐃᐃᐃ": "img/inv-sled-click.png",
		"ᐃⵠΔⲆⵠⵠⵠ": "img/day-pirate-hat.png",
		"ⵠⲆᐃᐃᐃⲆⵠ": "img/night-pirate-hat.png",
		"ᐃᐃⲆⵠⵠΔᐃ": "img/inv-pirate-hat-out.png",
		"ΔⵠⵠⲆᐃΔᐃ": "img/inv-pirate-hat-in.png",
		"ΔⲆⲆᐃⲆᐃΔ": "img/inv-pirate-hat-click.png",
		"ᐃᐃΔⵠᐃⲆⲆ": "img/day-penguin.png",
		"ΔⲆᐃΔᐃⲆⵠ": "img/night-penguin.png",
		"ᐃᐃⲆⵠⲆᐃᐃ": "img/hurt-penguin.png",
		"ⵠᐃⲆⵠⵠ": "img/inv-penguin-feather-click.png",
		"ᐃᐃⵠΔⲆ": "img/inv-hawk-feather-click.png",
		"ⵠᐃⲆⵠᐃⲆΔ": "img/day-boar1.png",
		"ⲆΔΔᐃᐃΔⲆ": "img/day-boar1-tamed.png",
		"ᐃⲆΔⵠΔᐃᐃ": "img/day-boar1-angry.png",
		"ⵠΔⲆⲆⵠⲆⵠ": "img/night-boar1.png",
		"ⵠᐃᐃΔⵠᐃⲆ": "img/night-boar1-tamed.png",
		"ⵠⵠⵠΔΔΔΔ": "img/night-boar1-angry.png",
		"ⵠⲆΔⲆΔᐃΔ": "img/inv-mount-boar-out.png",
		"ΔⵠᐃᐃⵠⲆⵠ": "img/inv-mount-boar-in.png",
		"ⵠᐃⵠⵠΔᐃΔ": "img/inv-mount-boar-click.png",
		"ⲆⵠⵠⵠᐃⲆⵠ": "img/day-hurt-boar1.png",
		"ΔᐃⵠⵠΔⵠᐃ": "img/boar1-step.png",
		"ⵠΔΔᐃᐃᐃⲆ": "img/day-saddle1.png",
		"ⵠᐃΔΔⵠᐃⲆ": "img/night-saddle1.png",
		"ᐃⵠⵠⲆΔΔᐃ": "img/inv-saddle-out.png",
		"ΔⵠⲆᐃⵠⲆᐃ": "img/inv-saddle-in.png",
		"ΔΔⵠⵠⵠⵠⲆ": "img/inv-saddle-click.png",
		"ΔⲆᐃΔᐃᐃⵠ": "img/day-magic-wand0.png",
		"ᐃΔⵠΔΔⵠΔ": "img/night-magic-wand0.png",
		"ⲆΔᐃⲆⵠⲆᐃ": "img/day-light-wand1.png",
		"ᐃᐃΔΔᐃΔⲆ": "img/night-light-wand1.png",
		"ᐃⲆᐃⵠᐃΔⲆ": "img/inv-magic-wand0-out.png",
		"ⲆΔᐃⲆⲆᐃΔ": "img/inv-magic-wand0-in.png",
		"ⲆᐃᐃΔΔᐃⲆ": "img/inv-magic-wand0-click.png",
		"ⲆⲆⲆⵠⵠⵠΔ": "img/day-magic-wand1.png",
		"ΔᐃΔⲆⲆⵠΔ": "img/night-magic-wand1.png",
		"ᐃᐃⵠΔΔᐃⵠ": "img/day-light-wand0.png",
		"ⲆᐃΔᐃⲆΔⲆ": "img/night-light-wand0.png",
		"ⲆⵠⲆⵠᐃΔΔ": "img/inv-magic-wand1-out.png",
		"ⲆⲆⵠᐃᐃᐃⵠ": "img/inv-magic-wand1-in.png",
		"ᐃⵠⲆᐃⲆⲆΔ": "img/inv-magic-wand1-click.png",
		"ᐃⲆⵠᐃⵠⲆΔ": "img/day-firefly.png",
		"ᐃⵠⲆΔᐃⲆΔ": "img/night-firefly.png",
		"ΔⵠᐃⵠⲆΔΔ": "img/hurt-firefly.png",
		"ᐃΔⲆᐃⵠⲆᐃ": "img/inv-firefly-out.png",
		"ⲆⵠᐃⵠⲆⵠᐃ": "img/inv-firefly-in.png",
		"ⲆᐃᐃⲆⵠⵠᐃ": "img/inv-firefly-click.png",
		"ⲆᐃᐃΔᐃⲆⵠ": "img/day-baby-dragon.png",
		"ⵠᐃⲆⲆⵠⵠᐃ": "img/night-baby-dragon.png",
		"ⲆΔⲆΔⵠᐃΔ": "img/day-baby-dragon-angry.png",
		"ΔΔΔⲆΔⵠⵠ": "img/night-baby-dragon-angry.png",
		"ⲆΔⲆⲆⵠᐃⵠ": "img/day-baby-dragon-tamed.png",
		"ᐃⵠⵠⲆᐃⲆΔ": "img/night-baby-dragon-tamed.png",
		"ᐃᐃⲆᐃⲆⵠΔ": "img/day-wing-dragon-left-angry.png",
		"ⵠΔΔⵠⵠᐃⵠ": "img/night-dragon-wing-left-angry.png",
		"ᐃᐃΔⲆᐃᐃⵠ": "img/day-wing-dragon-right-angry.png",
		"ⵠᐃᐃᐃᐃΔⵠ": "img/night-dragon-wing-right-angry.png",
		"ⲆⲆᐃᐃⲆⲆΔ": "img/day-wing-dragon-left-tamed.png",
		"ᐃⲆⲆΔΔΔΔ": "img/night-dragon-wing-left-tamed.png",
		"ΔⲆⲆⲆΔⵠᐃ": "img/day-wing-dragon-right-tamed.png",
		"ΔⵠⲆⵠⲆᐃⵠ": "img/night-wing-dragon-right-tamed.png",
		"ΔΔᐃΔⲆᐃⵠ": "img/day-wing-dragon-left.png",
		"ᐃⵠⲆⲆᐃⲆᐃ": "img/night-dragon-wing-left.png",
		"ⵠⲆᐃⵠⵠⲆⲆ": "img/day-wing-dragon-right.png",
		"ⲆᐃᐃⲆᐃᐃᐃ": "img/night-wing-dragon-right.png",
		"ⲆᐃᐃⲆⲆᐃᐃ": "img/hurt-baby-dragon.png",
		"ⲆⲆⲆᐃᐃΔⲆ": "img/hurt-baby-dragon-wing-left.png",
		"ᐃΔⵠⲆⲆᐃⵠ": "img/hurt-baby-dragon-wing-right.png",
		"ΔⲆΔΔΔΔᐃ": "img/inv-baby-dragon-out.png",
		"ⲆⵠΔᐃⵠᐃΔ": "img/inv-baby-dragon-in.png",
		"ⲆⲆΔΔⲆⵠᐃ": "img/inv-baby-dragon-click.png",
		"ᐃⵠⲆⲆᐃΔᐃ": "img/day-baby-lava.png",
		"ⲆⲆⲆⵠᐃΔⵠ": "img/night-baby-lava.png",
		"ⲆⵠⵠΔᐃⲆⵠ": "img/day-baby-lava-angry.png",
		"ⵠⲆⵠⲆΔᐃⲆ": "img/night-baby-lava-angry.png",
		"ⲆΔⲆⵠΔΔⲆ": "img/day-baby-lava-tamed.png",
		"ΔΔⵠⵠⵠⵠΔ": "img/night-baby-lava-tamed.png",
		"ⵠⲆΔⲆΔΔⵠ": "img/day-wing-lava-left-angry.png",
		"ᐃⲆᐃⲆⵠΔΔ": "img/night-wing-lava-left-angry.png",
		"ᐃⲆᐃᐃᐃΔⵠ": "img/day-wing-lava-right-angry.png",
		"ᐃᐃΔᐃᐃᐃΔ": "img/night-wing-lava-right-angry.png",
		"ⵠⵠⲆⵠⲆᐃⲆ": "img/day-wing-lava-left-tamed.png",
		"ᐃᐃᐃⲆᐃᐃⵠ": "img/night-wing-lava-left-tamed.png",
		"ⵠⲆⵠⵠⵠⵠⲆ": "img/day-wing-lava-right-tamed.png",
		"ⵠΔⲆᐃⵠΔⲆ": "img/night-wing-lava-right-tamed.png",
		"ⲆΔΔΔⲆⵠᐃ": "img/day-wing-lava-left.png",
		"ΔⲆⵠⵠⲆⵠⵠ": "img/night-wing-lava-left.png",
		"ⲆⲆⲆᐃⵠⲆⵠ": "img/day-wing-lava-right.png",
		"ⵠΔⲆⲆΔⵠᐃ": "img/night-wing-lava-right.png",
		"ᐃⵠⵠΔⵠᐃⵠ": "img/hurt-baby-lava.png",
		"ᐃⲆᐃⲆⲆⲆᐃ": "img/hurt-baby-lava-wing-left.png",
		"ⵠⲆΔⲆⲆΔⲆ": "img/hurt-baby-lava-wing-right.png",
		"ᐃΔᐃᐃⵠΔⲆ": "img/inv-baby-lava-out.png",
		"ⵠⲆᐃᐃⲆΔⲆ": "img/inv-baby-lava-in.png",
		"ᐃᐃΔᐃⵠⵠⲆ": "img/inv-baby-lava-click.png",
		"ᐃᐃΔᐃᐃⲆᐃ": "img/day-falcon.png",
		"ΔⵠⵠΔΔΔⵠ": "img/night-falcon.png",
		"ⲆⲆⲆⵠΔΔΔ": "img/day-falcon-angry.png",
		"Ⲇⵠᐃᐃⵠⵠⵠ": "img/night-falcon-angry.png",
		"ⵠⲆΔⵠΔᐃⵠ": "img/day-falcon-ground.png",
		"ᐃᐃⲆᐃⵠᐃⵠ": "img/night-falcon-ground.png",
		"ⲆⵠΔⵠᐃΔⲆ": "img/day-falcon-ground-angry.png",
		"ᐃΔΔᐃᐃΔⵠ": "img/night-falcon-ground-angry.png",
		"ᐃΔᐃⵠⲆᐃⵠ": "img/day-falcon-wings-left.png",
		"ΔⵠⵠⵠⵠⲆᐃ": "img/night-falcon-wings-left.png",
		"ⵠᐃⲆᐃⵠΔⵠ": "img/day-falcon-wings-right.png",
		"ⵠΔⲆⲆᐃⲆⵠ": "img/night-falcon-wings-right.png",
		"ΔⵠΔⲆΔⵠⵠ": "img/day-falcon-angry-wings-left.png",
		"ⲆΔⵠᐃⵠᐃΔ": "img/night-falcon-angry-wings-left.png",
		"ΔⲆⵠᐃⲆΔⲆ": "img/day-falcon-angry-wings-right.png",
		"ᐃⵠΔⲆⵠⲆᐃ": "img/night-falcon-angry-wings-right.png",
		"ᐃⲆⲆⲆⲆⵠᐃ": "img/day-falcon-wings-left-tamed.png",
		"ⵠⵠΔΔⲆΔᐃ": "img/night-falcon-wings-left-tamed.png",
		"ΔΔⲆΔΔΔᐃ": "img/day-falcon-wings-right-tamed.png",
		"ᐃⵠⲆⲆⲆⲆⵠ": "img/night-falcon-wings-right-tamed.png",
		"ⵠᐃᐃⲆⵠᐃᐃ": "img/day-falcon-tamed.png",
		"ᐃΔΔΔΔᐃⵠ": "img/night-falcon-tamed.png",
		"ΔᐃΔΔⲆⲆΔ": "img/hurt-falcon-ground.png",
		"ᐃⵠⵠⵠⲆⲆⲆ": "img/hurt-falcon.png",
		"ᐃⲆᐃΔⵠᐃⵠ": "img/hurt-falcon-wings-left.png",
		"ⵠⵠⵠᐃⲆᐃⲆ": "img/hurt-falcon-wings-right.png",
		"ⲆΔⲆⲆᐃⲆⲆ": "img/inv-falcon-out.png",
		"ⵠⲆⲆᐃⵠᐃᐃ": "img/inv-falcon-in.png",
		"ⲆᐃᐃᐃⵠⵠⲆ": "img/inv-falcon-click.png",
		"ᐃⵠᐃᐃⵠᐃⵠ": "img/day-crab-boss.png",
		"ᐃᐃΔᐃⲆΔⲆ": "img/night-crab-boss.png",
		"ⵠⵠⵠΔᐃᐃⵠ": "img/day-crab-boss-angry.png",
		"ᐃⵠⲆⵠⵠΔⵠ": "img/night-crab-boss-angry.png",
		"ⵠⲆΔⵠΔⲆᐃ": "img/day-crab-boss-tamed.png",
		"ⵠⵠΔᐃΔᐃⵠ": "img/night-crab-boss-tamed.png",
		"ⵠᐃᐃΔᐃᐃⲆ": "img/day-crab-boss-claw-left-attack.png",
		"ⲆⵠⵠⲆᐃⲆΔ": "img/night-crab-boss-claw-left-attack.png",
		"ⲆⵠΔⵠⵠᐃᐃ": "img/day-crab-boss-claw-right-attack.png",
		"ⵠⵠᐃΔΔᐃⵠ": "img/night-crab-boss-claw-right-attack.png",
		"ⵠⲆΔᐃᐃⲆΔᐃⵠ": "img/day-crab-boss-claw-left-tamed.png",
		"ᐃⲆᐃⲆⵠΔΔΔΔ": "img/night-crab-boss-claw-left-tamed.png",
		"ᐃⵠⵠᐃΔⵠⲆⵠⵠ": "img/day-crab-boss-claw-right-tamed.png",
		"ᐃΔΔᐃⲆᐃᐃⲆΔ": "img/night-crab-boss-claw-right-tamed.png",
		"ⲆⵠⲆⲆΔⲆΔ": "img/day-crab-boss-claw-left.png",
		"ᐃΔΔᐃᐃᐃⲆ": "img/night-crab-boss-claw-left.png",
		"ⵠⲆΔΔⵠΔⵠ": "img/day-crab-boss-claw-right.png",
		"ᐃⵠΔᐃⲆⲆᐃ": "img/night-crab-boss-claw-right.png",
		"ⵠᐃΔᐃΔⲆΔ": "img/hurt-crab-boss.png",
		"ⵠΔᐃⵠⵠⵠⵠ": "img/hurt-crab-boss-claw-left.png",
		"ⲆⵠⲆⵠΔⲆⵠ": "img/hurt-crab-boss-claw-right.png",
		"ⵠⵠⲆⲆᐃΔᐃ": "img/heal-crab-boss.png",
		"ΔΔΔᐃᐃΔᐃ": "img/heal-crab-boss-claw-left.png",
		"ⲆᐃⵠⵠⵠⵠⲆ": "img/heal-crab-boss-claw-right.png",
		"ΔⲆⲆⲆⵠΔⵠ": "img/crab-step.png",
		"ΔΔΔⵠⲆⵠᐃ": "img/inv-crab-boss-out.png",
		"Ⲇᐃⵠᐃⵠⵠᐃ": "img/inv-crab-boss-in.png",
		"ⲆᐃΔⲆᐃⵠⵠ": "img/inv-crab-boss-click.png",
		"ΔᐃⲆᐃⵠⲆᐃ": "img/day-cactus10.png",
		"ᐃⵠⲆⲆᐃᐃᐃ": "img/night-cactus10.png",
		"ᐃΔᐃᐃⲆᐃⵠ": "img/inv-cactus-out.png",
		"ⵠⲆᐃⲆⲆⲆᐃ": "img/inv-cactus-in.png",
		"ⵠⲆⵠᐃⵠⲆΔ": "img/inv-cactus-click.png",
		"ΔⲆⲆΔⵠⲆᐃ": "img/day-scorpion.png",
		"ⲆΔⲆⵠⲆΔⲆ": "img/night-scorpion.png",
		"ΔᐃᐃⵠΔᐃᐃ": "img/day-scorpion-hand-left.png",
		"ⲆⲆⲆΔⵠΔⲆ": "img/night-scorpion-hand-left.png",
		"ⲆⲆᐃⵠᐃⲆᐃ": "img/day-scorpion-hand-right.png",
		"ⲆⵠⲆⲆⲆⵠΔ": "img/night-scorpion-hand-right.png",
		"ⲆΔᐃⵠᐃⲆΔ": "img/hurt-scorpion.png",
		"ᐃⲆⲆΔⵠⵠⵠ": "img/hurt-scorpion-hand-left.png",
		"ⲆⵠᐃᐃᐃᐃΔ": "img/hurt-scorpion-hand-right.png",
		"ⵠΔⲆΔΔⲆΔ": "img/day-vulture.png",
		"ΔⲆⵠΔⵠΔᐃ": "img/night-vulture.png",
		"ⲆᐃᐃⲆᐃⵠⵠ": "img/day-vulture-angry.png",
		"ⵠⲆⵠⲆⵠⲆⵠ": "img/night-vulture-angry.png",
		"ΔΔᐃⵠΔΔⵠ": "img/day-vulture-ground.png",
		"ⲆⲆⲆⵠⵠⵠᐃ": "img/night-vulture-ground.png",
		"ⵠΔⲆᐃⲆⵠⲆ": "img/day-vulture-ground-angry.png",
		"ⵠⵠⲆᐃΔⲆⵠ": "img/night-vulture-ground-angry.png",
		"ᐃΔᐃΔⲆⵠⲆ": "img/day-vulture-wings-left.png",
		"ΔΔⲆΔᐃⵠⲆ": "img/night-vulture-wings-left.png",
		"ΔⵠΔΔⵠΔⵠ": "img/day-vulture-wings-right.png",
		"ᐃΔⲆΔΔΔⵠ": "img/night-vulture-wings-right.png",
		"ᐃᐃⵠΔΔⵠⵠ": "img/day-vulture-angry-wings-left.png",
		"ᐃΔᐃⲆⵠᐃᐃ": "img/night-vulture-angry-wings-left.png",
		"ᐃⲆᐃⲆᐃΔΔ": "img/day-vulture-angry-wings-right.png",
		"ᐃⵠΔⵠΔΔᐃ": "img/night-vulture-angry-wings-right.png",
		"ⲆᐃᐃᐃⲆⲆⲆ": "img/day-vulture-wings-left-tamed.png",
		"ΔΔⲆᐃⵠⲆᐃ": "img/night-vulture-wings-left-tamed.png",
		"ΔⵠΔᐃᐃᐃⲆ": "img/day-vulture-wings-right-tamed.png",
		"ᐃΔΔΔᐃⲆⲆ": "img/night-vulture-wings-right-tamed.png",
		"ΔⵠᐃΔᐃΔⵠ": "img/day-vulture-tamed.png",
		"ΔᐃΔⵠⲆⵠΔ": "img/night-vulture-tamed.png",
		"ᐃΔⵠΔΔⲆΔ": "img/hurt-vulture-ground.png",
		"ⲆΔⵠᐃΔⵠⵠ": "img/hurt-vulture.png",
		"ᐃⲆⲆΔΔᐃᐃ": "img/hurt-vulture-wings-left.png",
		"ᐃᐃΔΔⵠᐃΔ": "img/hurt-vulture-wings-right.png",
		"ⵠⲆⵠΔΔⵠΔ": "img/day-aloe-vera.png",
		"ⲆᐃⲆⵠΔᐃⵠ": "img/night-aloe-vera.png",
		"ⵠᐃⵠⲆⵠΔᐃ": "img/inv-aloe-vera-out.png",
		"ΔⲆᐃᐃⲆᐃⵠ": "img/inv-aloe-vera-in.png",
		"ΔΔΔᐃΔⲆⵠ": "img/inv-aloe-vera-click.png",
		"ΔΔΔΔᐃⵠᐃ": "img/day-aloe-vera-grown.png",
		"ᐃⲆⵠⵠᐃⲆᐃ": "img/night-aloe-vera-grown.png",
		"ⵠⵠᐃΔᐃⵠⲆ": "img/day-aloe-vera-dried.png",
		"ⲆΔᐃΔⲆⵠᐃ": "img/night-aloe-vera-dried.png",
		"ⲆⵠΔⲆΔⵠΔ": "img/day-turban1.png",
		"ΔⵠⲆⵠⲆⲆΔ": "img/night-turban1.png",
		"ΔⵠΔᐃΔΔΔ": "img/day-turban2.png",
		"ΔⲆⵠⲆⵠⲆΔ": "img/night-turban2.png",
		"ΔᐃⲆΔΔⲆⵠ": "img/inv-turban2-out.png",
		"ⵠᐃⲆᐃᐃΔΔ": "img/inv-turban2-in.png",
		"ⵠΔⲆⲆⵠⵠⲆ": "img/inv-turban2-click.png",
		"ᐃⲆΔᐃΔᐃⵠ": "img/inv-turban1-out.png",
		"ᐃΔⵠᐃΔᐃⵠ": "img/inv-turban1-in.png",
		"ⵠⵠⲆⲆⲆᐃⲆ": "img/inv-turban1-click.png",
		"ᐃⲆᐃⵠⵠΔⲆ": "img/day-pitchfork2.png",
		"ⵠΔⵠⵠᐃⲆᐃ": "img/night-pitchfork2.png",
		"ᐃⵠⵠᐃⲆᐃⵠ": "img/inv-pitchfork2-out.png",
		"ΔⵠⵠᐃⲆⲆᐃ": "img/inv-pitchfork2-in.png",
		"ⲆΔΔΔⲆᐃⵠ": "img/inv-pitchfork2-click.png",
		"ᐃⲆⲆⵠΔⵠⵠ": "img/inv-gold-fork-click.png",
		"ΔⵠⲆⲆⲆⵠⵠ": "img/inv-pilot-glasses-click.png",
		"ΔᐃΔⵠΔΔΔ": "img/day-pilot-helmet.png",
		"ⵠΔⲆⲆⵠᐃⲆ": "img/night-pilot-helmet.png",
		"ⵠᐃⲆᐃΔⲆᐃ": "img/inv-pilot-helmet-out.png",
		"ΔⲆⲆᐃΔⲆⲆ": "img/inv-pilot-helmet-in.png",
		"ᐃΔⲆΔᐃⵠⲆ": "img/inv-pilot-helmet-click.png",
		"ⵠΔⲆΔⲆⲆᐃᐃᐃ": "img/day-sandworm0.png",
		"ΔⲆⵠᐃᐃⵠΔ": "img/day-sandworm1.png",
		"ⵠⲆⲆᐃⲆⲆⲆ": "img/day-sandworm2.png",
		"ᐃᐃΔⲆΔⲆⲆΔⵠ": "img/night-sandworm0.png",
		"ⵠⵠΔⵠΔᐃᐃ": "img/night-sandworm1.png",
		"ⵠᐃⲆⲆⲆᐃⵠ": "img/night-sandworm2.png",
		"ⲆΔⲆⵠΔΔᐃ": "img/hurt-sandworm0.png",
		"ᐃⵠΔⲆᐃⵠⵠ": "img/hurt-sandworm1.png",
		"ΔᐃΔⲆᐃⵠΔ": "img/hurt-sandworm2.png",
		"ⲆΔⲆⲆᐃ": "img/inv-vulture-feather-click.png",
		"ΔΔⲆΔⲆΔΔ": "img/day-emerald0.png",
		"ᐃⲆⵠⵠⵠⲆⲆ": "img/night-emerald0.png",
		"ⵠⵠⵠⲆᐃⵠⲆ": "img/day-emerald1.png",
		"ⲆⵠᐃΔⵠᐃΔ": "img/night-emerald1.png",
		"ⲆⲆΔᐃⲆΔⲆ": "img/day-emerald2.png",
		"ⲆᐃᐃΔⲆᐃⲆ": "img/night-emerald2.png",
		"ᐃΔΔⲆΔ": "img/inv-emerald-click.png",
		"ⲆᐃⵠΔⵠⵠⵠ": "img/inv-sworm-juice-out.png",
		"ⵠᐃΔⵠᐃⲆⲆ": "img/inv-sworm-juice-in.png",
		"ⵠΔΔΔⵠⲆⲆ": "img/inv-sworm-juice-click.png",
		"ᐃⵠΔⲆⵠⲆΔ": "img/day-point-machine.png",
		"ⵠᐃⵠᐃⲆⲆΔ": "img/night-point-machine.png",
		"ᐃᐃⵠΔⵠⵠᐃ": "img/day-point-machine-hole.png",
		"ΔⵠⵠⲆⲆΔⲆ": "img/night-point-machine-hole.png",
		"ᐃⲆᐃΔᐃⲆⵠ": "img/day-point-machine-ground.png",
		"ᐃΔᐃΔΔⲆᐃ": "img/night-point-machine-ground.png",
		"ᐃΔⲆⲆΔⲆⲆ": "img/day-point-machine-rotate.png",
		"ⵠⵠⲆⲆⵠⵠᐃ": "img/night-point-machine-rotate.png",
		"ⵠⲆⲆΔΔΔⲆ": "img/inv-point-machine-out.png",
		"ⵠΔⵠᐃⵠΔΔ": "img/inv-point-machine-in.png",
		"ΔΔΔΔⲆᐃⵠ": "img/inv-point-machine-click.png",
		"ΔⲆᐃⵠᐃᐃΔ": "img/day-extractor-machine0-stone.png",
		"ᐃᐃΔᐃᐃⵠᐃ": "img/night-extractor-machine0-stone.png",
		"ΔᐃΔᐃΔⵠΔ": "img/day-extractor-machine-stone.png",
		"ᐃⲆⲆⵠⲆⲆᐃ": "img/night-extractor-machine-stone.png",
		"ΔⵠⲆᐃᐃᐃᐃ": "img/inv-extractor-machine-stone-out.png",
		"ⲆΔⵠⲆΔⲆⵠ": "img/inv-extractor-machine-stone-in.png",
		"ⵠΔⲆⲆᐃⲆᐃ": "img/inv-extractor-machine-stone-click.png",
		"ΔᐃΔᐃⲆΔΔ": "img/day-extractor-machine0-gold.png",
		"ᐃᐃⲆⵠᐃΔΔ": "img/night-extractor-machine0-gold.png",
		"ⵠⵠΔⲆΔΔⵠ": "img/day-extractor-machine-gold.png",
		"ⲆⲆᐃⵠᐃΔᐃ": "img/night-extractor-machine-gold.png",
		"ⵠⲆᐃΔᐃⲆΔ": "img/inv-extractor-machine-gold-out.png",
		"ᐃΔⲆΔⵠᐃΔ": "img/inv-extractor-machine-gold-in.png",
		"ⵠΔⵠΔᐃⵠΔ": "img/inv-extractor-machine-gold-click.png",
		"ΔⵠⲆΔᐃⲆΔ": "img/day-extractor-machine0-diamond.png",
		"ⵠᐃⲆⲆΔⲆⵠ": "img/night-extractor-machine0-diamond.png",
		"ΔⲆⲆᐃᐃⵠᐃ": "img/day-extractor-machine-diamond.png",
		"ⵠΔⲆΔΔΔⲆ": "img/night-extractor-machine-diamond.png",
		"ΔⵠⵠⵠⵠⵠⲆ": "img/inv-extractor-machine-diamond-out.png",
		"ⲆⵠΔᐃⲆΔⵠ": "img/inv-extractor-machine-diamond-in.png",
		"ⵠⲆⵠΔΔᐃᐃ": "img/inv-extractor-machine-diamond-click.png",
		"ⲆᐃⲆᐃⲆⲆᐃ": "img/day-extractor-machine0-amethyst.png",
		"ΔⲆΔᐃⲆᐃΔ": "img/night-extractor-machine0-amethyst.png",
		"ⲆⵠΔⲆᐃΔΔ": "img/day-extractor-machine-amethyst.png",
		"ᐃᐃⵠⵠⲆᐃⲆ": "img/night-extractor-machine-amethyst.png",
		"ⵠᐃᐃΔΔΔⵠ": "img/inv-extractor-machine-amethyst-out.png",
		"ⲆⲆⵠᐃᐃΔⲆ": "img/inv-extractor-machine-amethyst-in.png",
		"ⲆᐃΔᐃⵠᐃⵠ": "img/inv-extractor-machine-amethyst-click.png",
		"ⵠⵠΔⵠΔΔⵠ": "img/day-extractor-machine0-reidite.png",
		"ΔᐃⲆⵠΔⵠⵠ": "img/night-extractor-machine0-reidite.png",
		"ᐃⵠΔᐃⲆᐃᐃ": "img/day-extractor-machine-reidite.png",
		"ⵠΔΔᐃΔᐃⲆ": "img/night-extractor-machine-reidite.png",
		"ⲆⵠΔⵠΔⵠⲆ": "img/inv-extractor-machine-reidite-out.png",
		"ᐃΔⲆⲆΔᐃⲆ": "img/inv-extractor-machine-reidite-in.png",
		"ⲆᐃⵠᐃⲆⵠᐃ": "img/inv-extractor-machine-reidite-click.png",
		"ᐃⲆⲆΔᐃᐃᐃ": "img/extractor-cases.png",
		"ΔⵠⲆⵠᐃᐃΔ": "img/day-golden-hen.png",
		"ⲆⵠⲆᐃΔΔΔ": "img/night-golden-hen.png",
		"ⵠΔᐃᐃⲆⲆⲆ": "img/day-golden-chicken.png",
		"ⲆⵠⲆᐃᐃⵠᐃ": "img/night-golden-chicken.png",
		"ⲆᐃⲆΔⲆᐃⵠ": "img/hurt-golden-hen.png",
		"ᐃⲆⲆᐃⲆⵠⲆ": "img/hurt-golden-chicken.png",
		"ⵠᐃⵠᐃⲆⵠᐃ": "img/logo-interface.png",
		"ΔⵠᐃⲆⲆⵠΔ": "img/forest-mode-hover.png",
		"ᐃᐃᐃΔΔΔΔ": "img/normal-mode-hover.png",
		"ΔⲆᐃⵠΔⵠⵠ": "img/vampire-mode-hover.png",
		"ⵠΔΔⲆΔΔⲆ": "img/zombie-mode-hover.png",
		"ⵠΔⲆⵠⵠΔᐃ": "img/community-mode-hover2.png",
		"ᐃⵠᐃᐃⲆΔⵠ": "img/experimental-mode-hover.png",
		"ΔΔⵠᐃⵠⵠⲆ": "img/zombie-mode-out.png",
		"ΔᐃᐃᐃⵠⵠΔ": "img/zombie-mode-in.png",
		"ⲆⲆᐃⲆⵠⵠⵠ": "img/zombie-mode-click.png",
		"ⵠⲆⲆΔⵠⵠⵠ": "img/vampire-mode-out.png",
		"ᐃΔⲆᐃᐃⵠᐃ": "img/vampire-mode-in.png",
		"ΔⲆᐃᐃᐃᐃΔ": "img/vampire-mode-click.png",
		"ΔⲆⵠᐃΔᐃⲆ": "img/normal-mode-out.png",
		"ᐃⵠᐃᐃΔⵠⵠ": "img/normal-mode-in.png",
		"ⲆᐃΔᐃⵠΔⲆ": "img/normal-mode-click.png",
		"ⵠⵠⵠⵠΔΔⲆ": "img/forest-mode-out.png",
		"ᐃⵠⵠᐃᐃᐃΔ": "img/forest-mode-in.png",
		"ᐃⲆⲆⲆⵠᐃΔ": "img/forest-mode-click.png",
		"ⵠⲆⵠΔᐃⵠΔ": "img/community-mode-out.png",
		"ΔⵠⲆΔⵠᐃΔ": "img/community-mode-in.png",
		"ⲆᐃΔΔΔΔΔ": "img/community-mode-click.png",
		"ⵠⵠᐃᐃΔⵠΔ": "img/experimental-modes-out.png",
		"ⲆⵠΔΔΔᐃⵠ": "img/experimental-modes-in.png",
		"ⵠΔⲆᐃΔᐃⲆ": "img/experimental-modes-click.png",
		"ⲆⲆᐃᐃΔᐃⲆ": "img/youtube-button-out.png",
		"ΔΔⲆⲆᐃΔⵠ": "img/youtube-button-in.png",
		"ᐃᐃⵠⲆⲆⵠⲆ": "img/youtube-button-click.png",
		"ᐃⵠⲆⵠⵠⵠⲆ": "img/wiki-button-out.png",
		"ⵠΔᐃⵠᐃᐃΔ": "img/wiki-button-in.png",
		"ᐃᐃᐃⵠΔᐃⵠ": "img/wiki-button-click.png",
		"ⵠΔⵠᐃᐃᐃᐃ": "img/twitter-button-out.png",
		"ⵠΔΔᐃⲆⲆᐃ": "img/twitter-button-in.png",
		"ᐃⲆⵠᐃⵠⵠΔ": "img/twitter-button-click.png",
		"ⲆᐃΔᐃΔΔΔ": "img/facebook-button-out.png",
		"ⵠΔᐃⲆᐃⵠΔ": "img/facebook-button-in.png",
		"ⵠⲆΔⲆᐃΔⲆ": "img/facebook-button-click.png",
		"ⵠⵠᐃⲆⵠⲆΔ": "img/reddit-button-out.png",
		"ΔᐃᐃᐃⲆᐃⵠ": "img/reddit-button-in.png",
		"ΔⵠⲆΔⲆⲆᐃ": "img/reddit-button-click.png",
		"ⲆΔΔᐃⲆⵠⲆ": "img/discord-button-out.png",
		"ΔᐃᐃⵠⲆᐃΔ": "img/discord-button-in.png",
		"ⲆᐃΔΔⵠᐃⵠ": "img/discord-button-click.png",
		"ᐃᐃⲆⲆΔⲆⲆ": "img/merch-button-out.png",
		"ⵠⲆᐃᐃⲆⲆⵠ": "img/merch-button-in.png",
		"ΔⲆΔᐃⵠⵠⲆ": "img/merch-button-click.png",
		"ᐃΔᐃⲆⲆᐃⵠⲆⲆ": "img/terminal-button-out.png",
		"ΔⵠᐃⵠⵠᐃⵠⲆⲆ": "img/terminal-button-in.png",
		"ΔΔᐃⲆᐃⲆΔⲆⵠ": "img/terminal-button-click.png",
		"ⲆⲆⵠΔⵠΔᐃ": "img/restart-out.png",
		"ⲆΔᐃᐃⵠᐃⲆ": "img/restart-in.png",
		"ΔⵠΔⵠⵠⲆᐃ": "img/restart-click.png",
		"ⲆⲆⲆⵠⲆΔᐃ": "img/reboot-out.png",
		"ⵠⵠΔᐃᐃΔⵠ": "img/reboot-in.png",
		"ⲆΔᐃⲆⵠΔᐃ": "img/reboot-click.png",
		"ⵠΔⲆΔΔᐃᐃ": "img/guide-out.png",
		"ᐃΔΔⲆⲆⵠⵠ": "img/guide-in.png",
		"ᐃᐃᐃⲆᐃᐃΔ": "img/guide-click.png",
		"ⵠⲆⲆⵠᐃⲆⵠ": "img/copy-paste-out.png",
		"ᐃᐃΔⵠⵠⵠⲆ": "img/copy-paste-in.png",
		"ΔᐃⵠΔⲆᐃΔ": "img/copy-paste-click.png",
		"ⲆⲆⲆΔⵠᐃΔ": "img/link-buttons-bg.png",
		"ΔⵠⲆⵠᐃᐃᐃ": "img/changelog-box2.png",
		"ᐃᐃⵠⵠᐃⵠᐃ": "img/changelog_31.png",
		"ⲆⵠⲆⵠⲆᐃⵠ": "img/banner-taming.png",
		"ⲆΔᐃΔⲆΔᐃ": "img/profile-button-out.png",
		"ⵠⵠΔⵠΔⵠΔ": "img/profile-button-in.png",
		"ⲆᐃᐃⲆΔⵠᐃ": "img/profile-button-click.png",
		"ᐃⵠⲆΔⲆΔⵠ": "img/login-button-out.png",
		"ΔΔⵠᐃⲆⲆᐃ": "img/login-button-in.png",
		"ⵠᐃΔΔⲆⲆⵠ": "img/login-button-click.png",
		"ⵠⵠᐃᐃⲆᐃⵠ": "img/login-google-out.png",
		"ΔⵠⲆⲆᐃⵠⵠ": "img/login-google-in.png",
		"ΔⵠⵠΔⲆⲆⲆ": "img/login-google-click.png",
		"ΔⲆⵠⲆΔⲆᐃ": "img/login-facebook-out.png",
		"ⲆⵠΔⵠⲆⵠΔ": "img/login-facebook-in.png",
		"ⵠⲆⲆⵠⲆⵠⲆ": "img/login-facebook-click.png",
		"ΔⲆⵠⲆΔⲆΔ": "img/account-box.png",
		"ᐃⵠΔΔΔΔΔᐃΔ": "img/account-under-maintenance.png",
		"ⵠⵠᐃᐃΔⵠⵠ": "img/close-button-account-out.png",
		"ⲆΔⵠⲆⵠΔⵠ": "img/close-button-account-in.png",
		"ᐃᐃⵠΔⲆΔⲆ": "img/close-button-account-click.png",
		"ⲆᐃΔᐃⲆⲆⵠ": "img/play-button-out.png",
		"ⵠΔⲆᐃΔⵠᐃ": "img/play-button-in.png",
		"ⵠⲆⵠⵠⵠⵠⵠ": "img/play-button-click.png",
		"ΔᐃΔᐃⵠΔⵠⵠⲆ": "img/app-store-badge.png",
		"ⵠⲆᐃⵠⲆⲆᐃΔΔ": "img/play-store-badge.png",
		"ⵠΔᐃΔᐃΔΔΔᐃ": "img/mobile-boxad.png",
		"ΔⲆΔⵠⵠᐃᐃ": "img/modify-name-out.png",
		"ⲆΔᐃᐃΔⲆⵠ": "img/modify-name-in.png",
		"ΔᐃⵠᐃᐃΔⲆ": "img/modify-name-click.png",
		"ΔΔⵠⵠᐃⲆⵠ": "img/copy-id-button-out.png",
		"ΔⵠⲆⵠⲆᐃᐃ": "img/copy-id-button-hover.png",
		"ⲆⲆⲆⲆΔⵠΔ": "img/copy-id-button-active.png",
		"ⵠⲆᐃⲆⲆᐃΔ": "img/yes-button-out.png",
		"ΔⲆⲆⵠᐃⵠⵠ": "img/yes-button-in.png",
		"ᐃⵠᐃⵠΔⲆⲆ": "img/yes-button-click.png",
		"ⲆᐃⲆᐃΔⵠⵠ": "img/yes-300-button-out.png",
		"ⲆⲆⵠΔᐃΔᐃ": "img/yes-300-button-in.png",
		"ᐃᐃⵠⲆⵠⲆⲆ": "img/yes-300-button-click.png",
		"ⲆⲆᐃⵠⵠΔⵠ": "img/no-button-out.png",
		"ᐃΔᐃᐃᐃΔᐃ": "img/no-button-in.png",
		"ⲆⲆΔᐃᐃⲆⲆ": "img/no-button-click.png",
		"ⲆⲆᐃⲆΔⵠᐃ": "img/no-thanks-button-out.png",
		"ⲆⵠᐃΔΔΔⲆ": "img/no-thanks-button-in.png",
		"ⵠΔᐃᐃⲆⵠΔ": "img/no-thanks-button-click.png",
		"ⵠⵠΔⲆⲆⵠᐃ": "img/shop-button-out.png",
		"ΔⲆⵠⲆᐃⲆⲆ": "img/shop-button-in.png",
		"ⵠⲆⵠᐃᐃΔⵠ": "img/shop-button-click.png",
		"ᐃΔᐃᐃΔⵠⵠ": "img/logout-out.png",
		"ᐃⲆⵠⵠⵠⵠⵠ": "img/logout-in.png",
		"ⵠΔⵠⲆⲆᐃΔ": "img/logout-click.png",
		"ⲆᐃᐃⲆΔⵠⲆ": "img/terms-button-out.png",
		"ΔᐃᐃΔΔᐃⲆ": "img/terms-button-in.png",
		"ΔⵠⲆᐃⵠⵠᐃ": "img/terms-button-click.png",
		"ⵠᐃⵠⵠⲆⲆΔ": "img/tutorial-icon.png",
		"ⵠⲆⵠⵠΔΔΔ": "img/skins-icon.png",
		"ⵠⲆⵠⲆⲆⵠⵠ": "img/shop-icon.png",
		"ⵠΔⵠᐃΔⵠⵠⲆⲆ": "img/paint-icon.png",
		"ΔΔᐃⲆⲆⵠΔ": "img/leaderboard-icon.png",
		"ⵠⵠⲆⵠⵠᐃΔ": "img/start-icon.png",
		"ΔΔᐃⲆΔⵠⲆ": "img/profile-icon.png",
		"ⲆᐃⵠΔⵠΔⲆ": "img/server-access-icon2.png",
		"ᐃᐃⵠⲆⲆᐃΔ": "img/button-homepage-bg-out.png",
		"ΔΔⵠΔⵠⲆᐃ": "img/button-homepage-bg-in.png",
		"ⲆⲆⲆΔΔⵠⵠ": "img/button-homepage-bg-click.png",
		"ⵠΔᐃⵠⵠᐃⵠ": "img/button-bottom-homepage-bg-out.png",
		"ᐃⲆⵠᐃΔᐃΔ": "img/button-bottom-homepage-bg-in.png",
		"ⵠᐃΔᐃⲆᐃΔ": "img/button-bottom-homepage-bg-click.png",
		"ⲆⵠΔᐃⲆᐃⵠ": "img/lvl-player.png",
		"ⵠᐃΔⵠᐃΔⲆ": "img/avatar-player.png",
		"ⵠⵠⲆΔᐃⲆᐃ": "img/avatar-player1.png",
		"ⵠⵠΔᐃᐃⵠⵠ": "img/avatar-player2.png",
		"ΔᐃⲆⲆᐃΔⲆ": "img/avatar-player3.png",
		"ⵠⲆⲆᐃΔᐃΔ": "img/avatar-player4.png",
		"ⲆΔΔⲆⲆΔᐃ": "img/avatar-player5.png",
		"ⲆᐃᐃΔΔⵠΔ": "img/avatar-player6.png",
		"ᐃΔᐃⲆⲆΔᐃ": "img/avatar-player7.png",
		"ⵠᐃⲆᐃⵠΔΔ": "img/avatar-player8.png",
		"ΔΔⵠⲆΔⲆⲆ": "img/avatar-player9.png",
		"ᐃᐃⵠΔΔΔⲆ": "img/avatar-player10.png",
		"ᐃΔⵠⵠⲆⲆⵠ": "img/avatar-player11.png",
		"ⵠΔΔΔⵠⵠΔ": "img/avatar-player12.png",
		"ⵠⲆⵠᐃᐃⵠΔ": "img/avatar-player13.png",
		"ᐃΔᐃΔΔΔⲆ": Δ[542],
		"ⵠⲆⵠⲆᐃⵠΔ": Δ[542],
		"ΔᐃᐃⵠⲆᐃⵠ": Δ[542],
		"ᐃΔᐃⲆⲆᐃⵠ": Δ[542],
		"ᐃⵠⵠⲆΔⵠᐃΔⲆ": "img/golden-bread.png",
		"ⲆΔᐃΔΔᐃⲆ": "img/buy-bread-out.png",
		"ⲆⵠΔⵠΔΔᐃ": "img/buy-bread-in.png",
		"ΔⵠⲆΔᐃⵠⲆ": "img/buy-bread-click.png",
		"ᐃᐃᐃΔⲆⲆⲆ": "img/gauge.png",
		"ᐃΔᐃⵠΔⲆⲆᐃᐃ": "img/season-4-out.png",
		"ⵠΔΔΔΔᐃⵠΔⲆ": "img/season-4-in.png",
		"ⲆΔᐃⲆⲆᐃᐃᐃⲆ": "img/season-4-click.png",
		"ⵠᐃⲆⲆⲆⵠⲆⲆᐃ": "img/season4-box.png",
		"ᐃⲆⲆᐃᐃᐃⵠΔᐃ": "img/season-5-out.png",
		"ⲆΔΔⵠᐃⵠΔᐃᐃ": "img/season-5-in.png",
		"ΔⲆⲆΔⵠⲆⲆᐃΔ": "img/season-5-click.png",
		"ⵠᐃⲆⲆΔΔⵠⲆⲆ": "img/season5-box.png",
		"ΔⲆΔᐃΔΔΔ": "img/season-6-out.png",
		"ᐃⵠⲆⵠⵠᐃΔ": "img/season-6-in.png",
		"ΔⵠⵠᐃᐃᐃⲆ": "img/season-6-click.png",
		"ⵠⲆᐃΔⵠᐃⵠ": "img/season6-box.png",
		"ⲆⵠΔⲆⵠᐃᐃ": "img/profile3-box.png",
		"ⵠⵠΔᐃᐃᐃⲆ": "img/skins-box.png",
		"ᐃΔΔΔⲆⵠᐃ": "img/shop-box.png",
		"ⵠⵠᐃⲆᐃΔΔⵠⲆ": "img/private-server-box.png",
		"ⲆⲆΔⲆΔⲆΔ": "img/location-box.png",
		"ⲆⲆⲆᐃⲆⵠᐃ": "img/server-duration-box.png",
		"ⲆΔⵠⲆᐃⵠᐃ": "img/tutorial-box.png",
		"ⲆΔᐃᐃⲆᐃΔ": "img/leaderboard2-box.png",
		"ⵠⲆⲆⵠⲆΔⵠ": "img/buy-breads-box.png",
		"ᐃⲆⲆⵠⵠΔⲆ": "img/bag-box.png",
		"ⲆⲆᐃⵠⲆⲆⲆ": "img/deadbox-box.png",
		"ⲆΔΔΔΔⵠⵠ": "img/book-box.png",
		"ⲆⵠΔⵠΔᐃᐃ": "img/accessories-box.png",
		"ⲆᐃⲆⵠΔⲆΔ": "img/customskin-box.png",
		"ᐃⲆΔᐃⲆⵠᐃ": "img/bag-lasts.png",
		"ᐃᐃⵠᐃᐃⲆᐃ": "img/server-lasts.png",
		"ⲆⲆΔΔⲆⵠⲆ": "img/server-access-box3.png",
		"ΔⵠⲆᐃⲆΔⵠ": "img/lootbox-box.png",
		"ⲆᐃΔⵠΔΔᐃ": "img/change-nickname0.png",
		"ᐃⵠⲆⵠᐃⲆⵠ": "img/change-nickname1.png",
		"ⲆⲆᐃⲆΔⵠⵠ": "img/cheating-box.png",
		"ΔΔΔⵠⲆᐃᐃΔⵠ": "img/daily-quest-box.png",
		"ΔΔⲆⵠⲆⲆⵠᐃⲆ": "img/daily-5-bread.png",
		"ΔⲆΔΔΔⵠᐃⲆΔ": "img/daily-10-bread.png",
		"ⲆΔΔᐃᐃⲆᐃᐃⲆ": "img/daily-valid.png",
		"ᐃᐃⲆⲆⲆΔⵠ": "img/normal-profile-out.png",
		"ΔΔᐃⵠᐃᐃΔ": "img/normal-profile-in.png",
		"ⵠⲆᐃᐃᐃⵠⲆ": "img/normal-profile-click.png",
		"ⵠᐃᐃᐃᐃⲆⵠ": "img/forest-profile-out.png",
		"ΔᐃⲆⵠⲆⲆᐃ": "img/forest-profile-in.png",
		"ⲆΔⲆΔⲆᐃⵠ": "img/forest-profile-click.png",
		"ᐃⵠᐃΔⲆⲆⲆ": "img/zombie-profile-out.png",
		"ⲆΔⲆΔⵠΔᐃ": "img/zombie-profile-in.png",
		"ᐃᐃΔᐃⲆᐃΔ": "img/zombie-profile-click.png",
		"Δⵠⵠⵠⵠⵠᐃ": "img/vampire-profile-out.png",
		"ⲆΔΔⵠⲆⵠΔ": "img/vampire-profile-in.png",
		"ΔⵠⵠΔᐃᐃᐃ": "img/vampire-profile-click.png",
		"ΔⵠᐃⵠⵠᐃΔ": "img/total-profile-out.png",
		"ᐃᐃⵠᐃⵠΔⵠ": "img/total-profile-in.png",
		"ⲆⲆⵠΔⲆⲆⵠ": "img/total-profile-click.png",
		"ᐃᐃⲆⲆΔⵠⵠ": "img/season1-out.png",
		"ᐃΔΔᐃⵠΔⵠ": "img/season1-in.png",
		"ΔⵠⲆΔᐃΔⵠ": "img/season1-click.png",
		"ᐃᐃΔⲆⵠΔⵠ": "img/season2-out.png",
		"ⲆΔⵠΔᐃⵠⵠ": "img/season2-in.png",
		"ΔⵠⵠⵠⵠΔΔ": "img/season2-click.png",
		"ⵠⲆᐃⵠⵠᐃᐃ": "img/season3-out.png",
		"ΔⲆΔⵠΔᐃⵠ": "img/season3-in.png",
		"ⲆⵠΔΔΔⲆΔ": "img/season3-click.png",
		"ΔᐃⲆᐃⵠᐃᐃ": "img/season4-out.png",
		"ⲆΔⵠⲆⲆᐃⲆ": "img/season4-in.png",
		"ⲆⲆⲆΔᐃⵠⲆ": "img/season4-click.png",
		"ⵠᐃⵠⲆⲆΔᐃ": "img/season5-out.png",
		"ⵠΔⲆⲆΔᐃΔ": "img/season5-in.png",
		"ΔⵠᐃⲆᐃᐃⲆ": "img/season5-click.png",
		"ⲆⵠⵠΔⲆⵠⵠ": "img/season6-out.png",
		"ΔⵠⲆⲆⵠⲆΔ": "img/season6-in.png",
		"ⵠⲆΔΔΔᐃⵠ": "img/season6-click.png",
		"ΔΔΔⵠⲆᐃⵠ": "img/locked-skin-alert.png",
		"ΔⵠᐃⲆⵠⵠⵠ": "img/locked-custom-alert.png",
		"ᐃⵠΔⲆⲆⵠΔ": "img/bg-red-locked.png",
		"ⵠⲆⵠⲆⵠᐃⵠ": "img/skin-button-out.png",
		"ⵠᐃⵠᐃⵠᐃᐃ": "img/skin-button-in.png",
		"ᐃᐃⲆᐃΔⲆⲆ": "img/skin-button-click.png",
		"ΔⲆⵠΔΔⵠⲆ": "img/accessory-button-out.png",
		"ᐃᐃΔⲆᐃᐃⲆ": "img/accessory-button-in.png",
		"ΔⲆⲆᐃᐃⲆⲆ": "img/accessory-button-click.png",
		"ⵠⲆⲆᐃᐃΔᐃ": "img/bag-button-out.png",
		"ᐃⲆⵠΔΔⲆⵠ": "img/bag-button-in.png",
		"ᐃᐃΔⵠᐃᐃⵠ": "img/bag-button-click.png",
		"ᐃΔⵠΔⵠⲆᐃ": "img/book-button-out.png",
		"ⲆΔΔⲆΔⲆⵠ": "img/book-button-in.png",
		"ΔᐃⲆᐃᐃΔⲆ": "img/book-button-click.png",
		"ΔⲆⲆⵠⲆΔΔ": "img/deadbox-button-out.png",
		"ⲆᐃⵠⵠⵠⲆᐃ": "img/deadbox-button-in.png",
		"ⵠⵠⲆⲆⲆⲆᐃ": "img/deadbox-button-click.png",
		"ⵠᐃⵠΔΔⵠᐃ": "img/loot-button-out.png",
		"ΔⲆⲆᐃᐃⵠⲆ": "img/loot-button-in.png",
		"ᐃⲆᐃⲆᐃᐃⲆ": "img/loot-button-click.png",
		"ΔⲆᐃᐃΔᐃⵠ": "img/free-item-out.png",
		"ⵠⵠⲆΔⵠⲆⲆ": "img/free-item-in.png",
		"ⲆΔΔⲆΔⵠⵠ": "img/free-item-click.png",
		"ᐃⲆⲆΔ": "img/wood-item-out.png",
		"ⵠᐃΔΔ": "img/wood-item-in.png",
		"ⵠⵠᐃᐃ": "img/wood-item-click.png",
		"ⲆᐃⵠΔⵠᐃᐃ": "img/stone-item.png",
		"ΔΔⵠΔΔΔⲆ": "img/stone-item-in.png",
		"ⵠΔᐃᐃⵠᐃΔ": "img/stone-item-click.png",
		"ᐃΔΔⲆⵠΔⵠ": "img/gold-item.png",
		"ⲆᐃΔᐃⵠᐃΔ": "img/gold-item-in.png",
		"ᐃⲆᐃⵠᐃΔΔ": "img/gold-item-click.png",
		"ᐃΔⲆⵠᐃΔⵠ": "img/diamond-item.png",
		"ⲆⲆΔⵠⵠΔΔ": "img/diamond-item-in.png",
		"ΔⵠⲆⵠⵠΔⲆ": "img/diamond-item-click.png",
		"ⵠⵠΔΔⵠⵠⲆ": "img/amethyst-item.png",
		"ΔⵠΔⵠΔᐃⵠ": "img/amethyst-item-in.png",
		"ⵠⵠᐃⵠᐃΔᐃ": "img/amethyst-item-click.png",
		"ⵠΔⲆⵠᐃᐃⵠ": "img/reidite-item.png",
		"ⵠᐃΔⲆΔᐃᐃ": "img/reidite-item-in.png",
		"ⵠⲆⵠⲆⲆⵠΔ": "img/reidite-item-click.png",
		"ΔΔⲆⲆΔΔⲆ": "img/special-item-out.png",
		"ᐃⵠΔⲆⲆᐃΔ": "img/special-item-in.png",
		"ᐃⲆΔᐃⵠΔΔ": "img/special-item-click.png",
		"ⵠᐃΔΔⵠⲆΔ": "img/level-item-out.png",
		"ΔⵠΔΔΔⵠΔ": "img/level-item-in.png",
		"ⵠΔⲆᐃⵠⲆᐃ": "img/level-item-click.png",
		"ᐃⵠⵠΔᐃΔΔ": "img/skin-previous-out.png",
		"ⵠΔᐃᐃΔΔⲆ": "img/skin-previous-in.png",
		"ΔΔᐃⲆⲆⲆⲆ": "img/skin-previous-click.png",
		"ᐃΔΔⵠⵠᐃⵠ": "img/skin-next-out.png",
		"ᐃᐃᐃⲆⲆᐃΔ": "img/skin-next-in.png",
		"ⵠΔⵠⲆⵠⲆⲆ": "img/skin-next-click.png",
		"ΔΔⵠΔⵠ": "img/back-button-out.png",
		"ⲆⲆⵠΔⲆ": "img/back-button-in.png",
		"ⵠⵠⲆⲆⵠ": "img/back-button-click.png",
		"ⲆⵠΔⵠᐃΔᐃ": "img/get-more-button-out.png",
		"ᐃⲆⵠⲆⲆⵠⲆ": "img/get-more-button-in.png",
		"ⲆᐃⵠΔⲆᐃΔ": "img/get-more-button-click.png",
		"ⲆᐃⵠΔⲆΔΔ": "img/currency1-out.png",
		"ⵠᐃΔΔⲆⲆᐃ": "img/currency1-in.png",
		"ⲆⵠⵠΔΔΔⲆ": "img/currency1-click.png",
		"ⲆᐃⲆⲆΔⲆⵠ": "img/currency2-out.png",
		"ΔᐃΔΔⲆᐃᐃ": "img/currency2-in.png",
		"ⵠⵠⵠΔⵠΔᐃ": "img/currency2-click.png",
		"ᐃⲆᐃΔᐃⵠΔ": "img/currency3-out.png",
		"ᐃⵠΔᐃΔⲆΔ": "img/currency3-in.png",
		"ΔⲆᐃΔᐃⵠⵠ": "img/currency3-click.png",
		"ⵠΔⲆᐃⲆᐃⵠ": "img/currency4-out.png",
		"ᐃᐃΔᐃⵠᐃⵠ": "img/currency4-in.png",
		"ΔⵠΔⵠⲆⵠⵠ": "img/currency4-click.png",
		"ΔᐃᐃⵠⵠΔᐃ": "img/currency5-out.png",
		"ⵠᐃᐃⲆⵠⵠΔ": "img/currency5-in.png",
		"ⵠᐃⵠΔΔᐃⵠ": "img/currency5-click.png",
		"ⲆⲆⵠⲆⵠⵠΔ": "img/price1-out.png",
		"ⲆⵠᐃᐃΔⲆⵠ": "img/price1-in.png",
		"ᐃⲆᐃᐃᐃⲆⲆ": "img/price1-click.png",
		"ⲆᐃⲆᐃᐃⲆᐃ": "img/price2-out.png",
		"ΔᐃᐃⵠΔΔᐃ": "img/price2-in.png",
		"ⵠⲆΔⵠⲆⵠⵠ": "img/price2-click.png",
		"ⵠᐃΔΔⵠΔΔ": "img/price3-out.png",
		"ΔⲆⵠΔᐃⵠⲆ": "img/price3-in.png",
		"ⵠⲆΔⵠⵠΔᐃ": "img/price3-click.png",
		"ⲆᐃⲆΔⲆᐃⲆ": "img/price4-out.png",
		"ᐃᐃⵠⲆΔⲆⲆ": "img/price4-in.png",
		"ᐃⵠⲆⲆⲆΔⲆ": "img/price4-click.png",
		"ⵠⵠⵠⲆΔⲆⲆ": "img/price5-out.png",
		"ᐃⵠⲆⵠⵠΔΔ": "img/price5-in.png",
		"ⵠⵠΔⵠⵠⵠⵠ": "img/price5-click.png",
		"ᐃᐃᐃⵠⵠⲆΔΔⲆ": "img/buy-private-server-out.png",
		"ⵠⵠΔΔᐃΔΔᐃΔ": "img/buy-private-server-in.png",
		"ⲆᐃΔᐃⵠⵠⲆⵠⵠ": "img/buy-private-server-click.png",
		"ⵠΔⵠᐃⲆⵠᐃ": "img/atlanta-button-out.png",
		"ᐃΔΔᐃΔᐃⵠ": "img/atlanta-button-in.png",
		"ⲆⲆΔⲆᐃⲆⵠ": "img/atlanta-button-click.png",
		"ᐃⵠΔⵠⵠⵠⵠ": "img/los-angeles-button-out.png",
		"ΔᐃΔᐃⵠⵠΔ": "img/los-angeles-button-in.png",
		"ⵠᐃⵠⵠΔΔⲆ": "img/los-angeles-button-click.png",
		"ⲆⵠⲆⵠΔΔⲆ": "img/sydney-button-out.png",
		"ᐃⲆⵠΔⲆⲆⵠ": "img/sydney-button-in.png",
		"ⵠΔⵠᐃⵠΔⵠ": "img/sydney-button-click.png",
		"ⲆΔΔᐃⲆΔⵠ": "img/frankfurt-button-out.png",
		"ΔᐃⲆΔⲆΔᐃ": "img/frankfurt-button-in.png",
		"ⵠⵠᐃᐃⲆᐃΔ": "img/frankfurt-button-click.png",
		"ⲆᐃᐃᐃᐃΔⵠ": "img/osaka-button-out.png",
		"ΔⵠΔᐃⲆⵠⲆ": "img/osaka-button-in.png",
		"ⵠⲆⲆᐃⲆᐃᐃ": "img/osaka-button-click.png",
		"ⲆΔⵠᐃⲆⲆᐃⲆᐃ": "img/yes-location-out.png",
		"ᐃΔⵠⲆᐃⵠⲆⵠΔ": "img/yes-location-in.png",
		"ⲆⲆⵠⵠⲆΔᐃⵠᐃ": "img/yes-location-click.png",
		"Ⲇⵠⵠⵠⵠᐃⵠ": "img/3days-button-out.png",
		"ⲆⵠΔⲆⵠᐃΔ": "img/3days-button-in.png",
		"ⲆⵠⵠᐃΔΔΔ": "img/3days-button-click.png",
		"ΔΔⲆⵠⲆⵠΔ": "img/7days-button-out.png",
		"ⲆᐃᐃΔᐃΔΔ": "img/7days-button-in.png",
		"ΔᐃᐃⵠⲆⵠⲆ": "img/7days-button-click.png",
		"ⵠⲆΔⲆⲆⲆⵠ": "img/30days-button-out.png",
		"ᐃΔⵠⵠⵠⵠᐃ": "img/30days-button-in.png",
		"ΔΔⵠᐃⲆᐃⵠ": "img/30days-button-click.png",
		"ⵠⲆΔⲆᐃᐃⵠ": "img/90days-button-out.png",
		"ᐃⲆΔⲆⲆⵠΔ": "img/90days-button-in.png",
		"ΔⵠᐃⵠΔⵠⵠ": "img/90days-button-click.png",
		"ΔΔΔⲆⵠⲆΔ": "img/spin1.png",
		"ⵠⲆΔΔⵠⵠⲆ": "img/spin2.png",
		"ᐃᐃⵠᐃⵠⵠⲆ": "img/spin3.png",
		"ⵠⲆⵠⲆᐃΔⵠ": "img/spin4.png",
		"ⲆΔΔΔⲆⲆⵠ": "img/spin5.png",
		"ⲆᐃΔⵠᐃᐃᐃ": "img/spin6.png",
		"ⵠⲆᐃⲆⲆⲆⵠ": "img/arrow-spin.png",
		"ᐃᐃⲆⵠⲆⲆⵠ": "img/spin-button-1-out.png",
		"ⲆΔⲆⲆΔⵠⵠ": "img/spin-button-1-in.png",
		"ΔΔᐃⵠⵠΔΔ": "img/spin-button-1-click.png",
		"ⵠᐃᐃⵠΔΔⲆ": "img/spin-button-2-out.png",
		"ΔᐃΔⵠⲆⵠⲆ": "img/spin-button-2-in.png",
		"ⵠⲆⲆΔΔᐃⲆ": "img/spin-button-2-click.png",
		"ⲆᐃᐃΔⵠⵠΔ": "img/spin-button-3-out.png",
		"ⲆΔⵠⵠΔᐃⲆ": "img/spin-button-3-in.png",
		"ᐃΔΔⲆΔⵠΔ": "img/spin-button-3-click.png",
		"ⲆΔⲆⲆᐃᐃⲆ": "img/spin-button-4-out.png",
		"ⵠⵠΔⲆⵠᐃⵠ": "img/spin-button-4-in.png",
		"ΔᐃⲆⲆⵠΔⲆ": "img/spin-button-4-click.png",
		"ᐃΔⵠⲆⵠᐃⵠ": "img/spin-button-5-out.png",
		"ᐃΔΔⲆᐃΔⲆ": "img/spin-button-5-in.png",
		"ᐃᐃⵠⲆᐃᐃⲆ": "img/spin-button-5-click.png",
		"Ⲇᐃⵠⵠᐃⵠⵠ": "img/spin-light.png",
		"ΔΔᐃΔΔⵠᐃ": "img/tuto-wiki-out.png",
		"ᐃΔᐃΔⵠⲆᐃ": "img/tuto-wiki-in.png",
		"ᐃⲆᐃⵠⵠⵠⵠ": "img/tuto-wiki-click.png",
		"ᐃⲆΔⲆⵠⲆᐃ": "img/tuto-previous-out.png",
		"ᐃⲆⲆⵠⲆⵠⲆ": "img/tuto-previous-in.png",
		"ⵠⲆⵠⲆⲆⵠⲆ": "img/tuto-previous-click.png",
		"ᐃΔⵠᐃΔΔⵠ": "img/tuto-next-out.png",
		"ⲆⲆⵠᐃⵠⲆᐃ": "img/tuto-next-in.png",
		"ⲆᐃⲆΔᐃⲆᐃ": "img/tuto-next-click.png",
		"ⲆᐃⵠⵠᐃⲆⵠ": "img/time-leaderboard-out.png",
		"ⵠΔᐃⵠᐃᐃⲆ": "img/time-leaderboard-in.png",
		"ᐃⵠᐃⵠⲆᐃᐃ": "img/time-leaderboard-click.png",
		"ⲆΔΔⵠⵠΔᐃ": "img/score-leaderboard-out.png",
		"ΔⲆⵠⲆΔᐃᐃ": "img/score-leaderboard-in.png",
		"ⲆⵠⵠⲆⵠΔᐃ": "img/score-leaderboard-click.png",
		"ΔΔᐃᐃⲆⵠⲆ": "img/lvl-leaderboard-out.png",
		"ⲆⵠⵠᐃᐃⵠⲆ": "img/lvl-leaderboard-in.png",
		"ⲆᐃΔⲆⵠᐃΔ": "img/lvl-leaderboard-click.png",
		"ⵠΔΔⲆᐃΔΔ": "img/kill-leaderboard-out.png",
		"ⲆᐃⵠᐃΔⲆⲆ": "img/kill-leaderboard-in.png",
		"ⲆⲆⵠⵠΔⵠⲆ": "img/kill-leaderboard-click.png",
		"ⲆᐃΔΔΔⲆᐃ": "img/all-leaderboard-out.png",
		"ⲆⲆⲆΔⵠⵠⵠ": "img/all-leaderboard-in.png",
		"ᐃΔᐃᐃᐃⵠΔ": "img/all-leaderboard-click.png",
		"ⲆΔᐃᐃΔᐃⲆ": "img/today-leaderboard-out.png",
		"ⲆΔΔⲆⲆⲆΔ": "img/today-leaderboard-in.png",
		"ⲆᐃΔᐃΔΔⲆ": "img/today-leaderboard-click.png",
		"ⲆᐃᐃⵠᐃⲆΔ": "img/week-leaderboard-out.png",
		"ᐃΔⵠΔΔᐃᐃ": "img/week-leaderboard-in.png",
		"ⵠΔᐃΔᐃⲆᐃ": "img/week-leaderboard-click.png",
		"ΔⲆᐃⵠΔΔⲆ": "img/season1-out.png",
		"ΔΔⵠⵠⲆᐃΔ": "img/season1-in.png",
		"ΔᐃΔⲆᐃᐃⲆ": "img/season1-click.png",
		"ⲆᐃᐃΔⲆᐃΔ": "img/season2-out.png",
		"ᐃⵠⵠᐃⵠΔⲆ": "img/season2-in.png",
		"ⵠΔΔⲆⲆⵠⲆ": "img/season2-click.png",
		"ⲆⲆⲆⵠᐃⵠΔ": "img/season3-out.png",
		"ⲆⵠⵠⲆⲆΔⵠ": "img/season3-in.png",
		"ⲆΔⲆⲆⵠΔⵠ": "img/season3-click.png",
		"ⲆⲆΔⲆⲆᐃⵠ": "img/season4-out.png",
		"ⵠΔⲆⲆΔⵠⲆ": "img/season4-in.png",
		"ΔⲆΔⵠⲆᐃᐃ": "img/season4-click.png",
		"ᐃⵠⲆᐃⵠⲆᐃ": "img/season5-out.png",
		"ΔᐃΔᐃΔⲆΔ": "img/season5-in.png",
		"ⲆᐃⲆᐃᐃΔⵠ": "img/season5-click.png",
		"ΔⲆⲆΔΔᐃΔ": "img/season6-out.png",
		"ⲆΔⵠΔᐃΔᐃ": "img/season6-in.png",
		"ᐃⵠⵠⲆⲆΔⵠ": "img/season6-click.png",
		"ᐃᐃⲆⲆᐃᐃⵠ": "img/total-lead-out.png",
		"ᐃΔΔᐃⲆΔᐃ": "img/total-lead-in.png",
		"ΔΔΔΔᐃΔᐃ": "img/total-lead-click.png",
		"ᐃᐃⵠΔⵠΔⲆ": "img/normal-lead-out.png",
		"ΔᐃⵠⵠᐃΔᐃ": "img/normal-lead-in.png",
		"ᐃΔΔᐃⲆΔⵠ": "img/normal-lead-click.png",
		"ΔⵠΔΔⲆⲆᐃ": "img/forest-lead-out.png",
		"ⵠΔᐃᐃⲆΔⲆ": "img/forest-lead-in.png",
		"ᐃΔᐃⲆⵠᐃΔ": "img/forest-lead-click.png",
		"ΔΔᐃⵠΔⵠⲆ": "img/vampire-lead-out.png",
		"ᐃⵠᐃⲆᐃⵠΔ": "img/vampire-lead-in.png",
		"ΔⵠⲆΔᐃᐃⲆ": "img/vampire-lead-click.png",
		"ᐃΔⲆⲆᐃⲆΔ": "img/zombie-lead-out.png",
		"ᐃΔⵠⲆⲆⵠⲆ": "img/zombie-lead-in.png",
		"ⲆᐃᐃⲆΔᐃⲆ": "img/zombie-lead-click.png",
		"ⵠΔΔⲆΔⵠΔ": "img/day-level5.png",
		"ᐃᐃⵠⵠΔⲆᐃ": "img/night-level5.png",
		"ᐃⲆⲆΔΔΔⲆ": "img/day-level10.png",
		"ΔⲆΔΔΔᐃⲆ": "img/night-level10.png",
		"ⲆᐃⲆⵠⵠΔⲆ": "img/day-level15.png",
		"ⲆⵠΔⵠⲆⵠⲆ": "img/night-level15.png",
		"ΔΔⵠΔⵠⵠⵠ": "img/day-level20.png",
		"ⲆⲆⲆᐃᐃᐃΔ": "img/night-level20.png",
		"ᐃΔΔᐃⵠⲆⵠ": "img/day-level25.png",
		"ⵠⲆᐃᐃⵠⲆⵠ": "img/night-level25.png",
		"ΔⵠⲆᐃΔⲆⵠ": "img/day-level30.png",
		"ΔⵠⵠΔᐃⵠᐃ": "img/night-level30.png",
		"ⵠΔⵠⵠⲆⵠΔ": "img/day-level35.png",
		"ΔⵠⲆⲆⵠᐃⵠ": "img/night-level35.png",
		"ⵠΔᐃⵠⲆΔΔ": "img/day-level40.png",
		"ᐃⵠⵠⲆΔΔⲆ": "img/night-level40.png",
		"ΔⲆⲆᐃⲆᐃⵠ": "img/day-level45.png",
		"ⵠᐃⲆᐃΔᐃΔ": "img/night-level45.png",
		"ᐃΔⵠᐃⵠᐃΔ": "img/day-level50.png",
		"ᐃΔΔΔΔΔⲆ": "img/night-level50.png",
		"ⲆΔⲆⵠΔⵠⵠ": "img/day-level55.png",
		"ⵠΔᐃⵠⵠⲆΔ": "img/night-level55.png",
		"ⵠᐃⲆΔⵠᐃⵠ": "img/day-level60.png",
		"ⵠΔⲆⲆⲆΔΔ": "img/night-level60.png",
		"ᐃⲆᐃᐃⵠⵠᐃ": "img/day-skin-devast0.png",
		"ᐃᐃⲆⵠⲆᐃⵠ": "img/night-skin-devast0.png",
		"ⵠⲆΔⲆⵠⲆⵠ": "img/day-hand-devaster.png",
		"ᐃΔΔᐃⵠⲆⲆ": "img/night-hand-devaster.png",
		"ⲆⲆⵠⲆⵠᐃΔ": "img/day-skin-star0.png",
		"ⵠⲆⲆΔⵠⲆΔ": "img/night-skin-star0.png",
		"ΔᐃⵠΔΔⲆⲆ": "img/day-hand-star0.png",
		"ⲆΔⲆΔᐃⲆΔ": "img/night-hand-star0.png",
		"ᐃⵠΔᐃⲆⵠΔ": "img/day-vampire.png",
		"ᐃⲆᐃⲆⵠⵠⲆ": "img/night-vampire.png",
		"ⵠᐃⵠΔᐃΔⲆ": "img/day-hand-vampire.png",
		"ⲆΔΔΔΔΔᐃ": "img/night-hand-vampire.png",
		"ⲆⲆⵠⲆΔⵠΔ": "img/day-zombie.png",
		"ᐃΔⲆΔᐃⲆⲆ": "img/night-zombie.png",
		"ⵠΔΔᐃᐃΔΔ": "img/day-hand-zombie.png",
		"ⵠᐃΔⵠΔᐃΔ": "img/night-hand-zombie.png",
		"ⲆᐃᐃⲆⵠⲆᐃ": "img/day-skin113.png",
		"ⵠⲆⵠΔᐃᐃⲆ": "img/night-skin113.png",
		"ΔΔᐃⵠⲆⵠᐃ": "img/day-hand-skin113.png",
		"ᐃⲆᐃⲆΔᐃⲆ": "img/night-hand-skin113.png",
		"ΔᐃΔΔᐃᐃᐃ": "img/day-skin0.png",
		"ΔΔⵠⵠΔΔᐃ": "img/night-skin0.png",
		"ⲆⵠΔⲆⲆΔΔ": "img/day-skin1.png",
		"ⵠᐃⲆᐃᐃΔⵠ": "img/night-skin1.png",
		"Ⲇⵠᐃᐃⵠᐃᐃ": "img/day-skin2.png",
		"ⲆΔⲆⵠΔΔΔ": "img/night-skin2.png",
		"ⵠⵠⵠᐃᐃΔᐃ": "img/day-skin3.png",
		"ᐃᐃᐃⵠⵠⵠᐃ": "img/night-skin3.png",
		"ΔⲆⵠⲆᐃᐃⵠ": "img/day-skin4.png",
		"ΔΔⵠⲆΔⵠΔ": "img/night-skin4.png",
		"ᐃᐃᐃⵠⲆᐃΔ": "img/day-skin5.png",
		"ⵠΔΔΔΔⵠΔ": "img/night-skin5.png",
		"ⵠⵠⵠΔⲆᐃΔ": "img/day-skin6.png",
		"ⲆⵠᐃΔΔⲆⲆ": "img/night-skin6.png",
		"ⵠⲆⲆⵠΔΔΔ": "img/day-skin7.png",
		"ⲆᐃⲆⵠᐃΔΔ": "img/night-skin7.png",
		"ᐃΔᐃΔΔᐃΔ": "img/day-skin8.png",
		"ΔΔΔᐃᐃᐃⲆ": "img/night-skin8.png",
		"ⲆᐃΔᐃᐃⲆΔ": "img/day-skin9.png",
		"ᐃᐃᐃΔⵠΔⲆ": "img/night-skin9.png",
		"ⲆⵠⲆΔᐃⵠΔ": "img/day-skin10.png",
		"ΔΔⲆΔᐃⵠᐃ": "img/night-skin10.png",
		"ΔⲆⲆᐃⵠⵠⲆ": "img/day-skin11.png",
		"ΔⲆᐃⲆᐃⵠΔ": "img/night-skin11.png",
		"ⲆᐃᐃᐃΔⵠΔ": "img/day-skin12.png",
		"ΔᐃⲆⵠΔⲆᐃ": "img/night-skin12.png",
		"ΔΔᐃᐃᐃⵠⲆ": "img/day-skin13.png",
		"ⵠⲆΔΔΔⵠᐃ": "img/night-skin13.png",
		"ⲆⵠᐃⲆⵠⲆᐃ": "img/day-skin14.png",
		"ᐃⵠΔⵠⵠΔΔ": "img/night-skin14.png",
		"Ⲇⵠⵠⵠⵠⵠⵠ": "img/day-skin15.png",
		"ⵠⲆⵠⵠⲆⲆⲆ": "img/night-skin15.png",
		"ⵠⵠᐃΔⲆᐃⲆ": "img/day-skin16.png",
		"ⲆⵠⲆᐃᐃⲆᐃ": "img/night-skin16.png",
		"ΔⲆᐃᐃᐃⵠΔ": "img/day-skin17.png",
		"ⵠΔᐃᐃⵠᐃⵠ": "img/night-skin17.png",
		"ᐃⵠⵠᐃⲆΔΔ": "img/day-skin18.png",
		"ⲆⵠΔⵠⵠΔⲆ": "img/night-skin18.png",
		"ᐃΔΔᐃⵠΔΔ": "img/day-skin19.png",
		"ᐃⵠᐃΔⲆⵠΔ": "img/night-skin19.png",
		"ⵠΔⲆΔⵠⵠⲆ": "img/day-skin20.png",
		"ⲆΔΔᐃⵠⲆΔ": "img/night-skin20.png",
		"ᐃⲆⵠᐃᐃΔᐃ": "img/day-skin21.png",
		"ᐃᐃⲆⲆΔᐃⲆ": "img/night-skin21.png",
		"ⵠⲆⵠⲆᐃΔΔ": "img/day-skin22.png",
		"ΔΔⵠⵠᐃΔⵠ": "img/night-skin22.png",
		"ⵠⲆᐃⲆⵠΔⵠ": "img/day-skin23.png",
		"ᐃᐃᐃΔⵠᐃⲆ": "img/night-skin23.png",
		"ΔΔⲆᐃⵠⵠᐃ": "img/day-skin24.png",
		"ⵠΔⵠⵠⵠⲆⲆ": "img/night-skin24.png",
		"ⲆⵠⲆΔΔⲆΔ": "img/day-skin25.png",
		"ᐃᐃᐃΔᐃⲆᐃ": "img/night-skin25.png",
		"ΔⲆΔΔᐃⵠᐃ": "img/day-skin26.png",
		"ⵠᐃⲆⵠΔⵠⲆ": "img/night-skin26.png",
		"ⲆᐃⲆΔⲆⲆᐃ": "img/day-skin27.png",
		"ᐃⵠⵠᐃΔⲆⵠ": "img/night-skin27.png",
		"ⲆᐃⲆᐃⵠᐃᐃ": "img/day-skin28.png",
		"ᐃⵠⲆⲆᐃⲆΔ": "img/night-skin28.png",
		"ΔⵠⵠΔⵠᐃⵠ": "img/day-skin29.png",
		"ⵠⲆᐃΔⲆᐃΔ": "img/night-skin29.png",
		"ΔᐃⵠⲆᐃᐃⲆ": "img/day-skin30.png",
		"ΔᐃᐃⲆΔΔΔ": "img/night-skin30.png",
		"ⵠΔΔⵠⲆΔᐃ": "img/day-skin31.png",
		"ⵠΔᐃⵠΔⵠⲆ": "img/night-skin31.png",
		"ⲆΔᐃΔⲆΔⲆ": "img/day-skin32.png",
		"ᐃⲆⵠⲆⲆΔᐃ": "img/night-skin32.png",
		"ᐃᐃⵠΔⵠᐃΔ": "img/day-skin33.png",
		"ⲆΔⵠⵠⵠⲆΔ": "img/night-skin33.png",
		"ΔⵠⲆᐃᐃᐃⵠ": "img/day-skin34.png",
		"ᐃᐃⵠⵠᐃⵠΔ": "img/night-skin34.png",
		"ᐃⵠⲆⲆⲆⵠΔ": "img/day-skin35.png",
		"ⲆⵠΔᐃᐃᐃⵠ": "img/night-skin35.png",
		"ΔΔⲆⵠⵠⲆᐃ": "img/day-skin36.png",
		"ⵠΔⲆᐃⲆΔΔ": "img/night-skin36.png",
		"ᐃⲆᐃᐃⲆᐃΔ": "img/day-skin37.png",
		"ⵠⲆⲆⲆⲆⲆⲆ": "img/night-skin37.png",
		"ⲆᐃⲆᐃᐃⲆⵠ": "img/day-skin38.png",
		"ⲆⲆᐃⲆΔⵠⲆ": "img/night-skin38.png",
		"ΔᐃᐃⲆΔΔⲆ": "img/day-skin39.png",
		"ⲆⲆⲆΔΔᐃⲆ": "img/night-skin39.png",
		"ⲆⵠΔⲆΔⲆⲆ": "img/day-skin40.png",
		"ᐃⲆᐃⵠⵠⵠᐃ": "img/night-skin40.png",
		"ⲆⵠΔⵠᐃᐃⵠ": "img/day-skin41.png",
		"ⲆΔⵠᐃⲆᐃᐃ": "img/night-skin41.png",
		"ΔᐃᐃⵠΔⲆⲆ": "img/day-skin42.png",
		"ⵠΔᐃΔΔⲆⵠ": "img/night-skin42.png",
		"ⲆⵠᐃᐃΔΔⲆ": "img/day-skin43.png",
		"ⲆΔᐃⵠⵠΔΔ": "img/night-skin43.png",
		"ⵠⵠᐃᐃⵠᐃⲆ": "img/day-skin44.png",
		"ⲆᐃᐃᐃⲆᐃⵠ": "img/night-skin44.png",
		"ⵠⲆⲆⲆⲆᐃΔ": "img/day-skin45.png",
		"ᐃᐃⲆᐃΔⵠⵠ": "img/night-skin45.png",
		"ᐃᐃⲆⵠΔΔᐃ": "img/day-skin46.png",
		"ᐃⵠΔᐃⵠᐃⵠ": "img/night-skin46.png",
		"ⲆᐃᐃⵠΔⲆΔ": "img/day-skin47.png",
		"ΔᐃⵠⲆᐃⲆᐃ": "img/night-skin47.png",
		"ⵠᐃΔⲆⵠᐃⲆ": "img/day-skin48.png",
		"ⵠⵠᐃⵠⲆⲆⲆ": "img/night-skin48.png",
		"ⲆΔⵠᐃΔⵠΔ": "img/day-skin49.png",
		"ⲆΔⲆᐃΔⵠⵠ": "img/night-skin49.png",
		"ⲆΔⲆⲆⲆⵠⲆ": "img/day-skin50.png",
		"ⵠᐃⲆΔⵠᐃᐃ": "img/night-skin50.png",
		"ΔᐃⲆΔΔΔᐃ": "img/day-skin51.png",
		"ⲆΔΔⵠⲆΔⵠ": "img/night-skin51.png",
		"ⲆⲆⵠⵠⵠⵠⵠ": "img/day-skin52.png",
		"ΔΔΔᐃⵠⵠᐃ": "img/night-skin52.png",
		"ⲆΔΔΔΔᐃΔ": "img/day-skin53.png",
		"ⵠΔⲆᐃᐃᐃⵠ": "img/night-skin53.png",
		"ⲆⵠⵠⲆᐃⲆⲆ": "img/day-skin54.png",
		"ΔᐃⵠⲆⵠⲆᐃ": "img/night-skin54.png",
		"ΔᐃᐃΔⲆⲆΔ": "img/day-skin55.png",
		"ⵠⲆΔⲆΔⵠⵠ": "img/night-skin55.png",
		"ΔΔⲆⲆⲆᐃᐃ": "img/day-skin56.png",
		"ⲆΔᐃⵠᐃⲆᐃ": "img/night-skin56.png",
		"ⲆΔΔⵠⲆΔΔ": "img/day-skin57.png",
		"ⲆΔᐃⲆⲆⵠᐃ": "img/night-skin57.png",
		"ᐃΔⲆΔᐃⲆΔ": "img/day-skin58.png",
		"ⵠΔⲆΔⵠΔΔ": "img/night-skin58.png",
		"ΔⲆⲆΔⵠⵠΔ": "img/day-skin59.png",
		"ΔᐃⲆⲆΔᐃⲆ": "img/night-skin59.png",
		"ⲆΔⵠΔΔⵠⵠ": "img/day-skin60.png",
		"ᐃⵠⲆⵠᐃΔⲆ": "img/night-skin60.png",
		"ᐃⵠΔⵠΔⲆΔ": "img/day-skin61.png",
		"ⲆΔⵠᐃΔΔⲆ": "img/night-skin61.png",
		"ΔΔᐃⵠᐃⵠᐃ": "img/day-skin62.png",
		"ⲆΔⵠΔΔΔΔ": "img/night-skin62.png",
		"ⲆΔⵠⵠΔᐃⵠ": "img/day-skin63.png",
		"ⲆΔΔᐃᐃⲆⵠ": "img/night-skin63.png",
		"ᐃᐃΔⵠΔᐃᐃ": "img/day-skin64.png",
		"ΔΔᐃⵠⵠⵠΔ": "img/night-skin64.png",
		"ⵠⵠᐃᐃᐃⵠⲆ": "img/day-skin65.png",
		"ᐃᐃΔⵠⲆⵠⲆ": "img/night-skin65.png",
		"ᐃⲆΔⵠⵠⵠⵠ": "img/day-skin66.png",
		"ᐃᐃⵠⲆⲆⲆΔ": "img/night-skin66.png",
		"ⲆⵠⵠⲆΔⵠⵠ": "img/day-skin67.png",
		"ⲆΔⵠⵠⵠΔᐃ": "img/night-skin67.png",
		"ⵠᐃᐃᐃⵠⵠⵠ": "img/day-skin68.png",
		"ⲆᐃΔⵠⵠⲆⵠ": "img/night-skin68.png",
		"ΔᐃΔⲆΔⲆⲆ": "img/day-skin69.png",
		"ΔΔΔΔⲆⵠΔ": "img/night-skin69.png",
		"ᐃⲆⲆⲆᐃⲆᐃ": "img/day-skin70.png",
		"ᐃⵠΔΔΔⵠⵠ": "img/night-skin70.png",
		"ⲆⲆⲆΔⲆⲆᐃ": "img/day-skin71.png",
		"ⲆᐃⵠⵠⲆⵠⲆ": "img/night-skin71.png",
		"Ⲇⵠᐃᐃᐃⵠⵠ": "img/day-skin72.png",
		"ΔΔΔΔⲆΔΔ": "img/night-skin72.png",
		"ᐃⵠᐃᐃΔᐃΔ": "img/day-skin73.png",
		"ᐃᐃᐃᐃⵠΔᐃ": "img/night-skin73.png",
		"ⲆⲆᐃⵠΔΔⲆ": "img/day-skin74.png",
		"ΔΔᐃⲆΔⵠⵠ": "img/night-skin74.png",
		"ᐃΔΔᐃⵠⵠΔ": "img/day-skin75.png",
		"ᐃⲆΔⵠⲆⵠΔ": "img/night-skin75.png",
		"ⲆΔᐃⲆΔΔⵠ": "img/day-skin76.png",
		"ΔⲆᐃⲆⵠᐃⲆ": "img/night-skin76.png",
		"ᐃⲆⲆⲆΔⵠΔ": "img/day-skin77.png",
		"ⵠⲆⵠᐃⵠⵠⲆ": "img/night-skin77.png",
		"ⲆⲆⲆΔⵠᐃⵠ": "img/day-skin78.png",
		"ⲆⲆⲆⵠᐃᐃⲆ": "img/night-skin78.png",
		"ΔΔⵠⵠⵠᐃᐃ": "img/day-skin79.png",
		"ΔⵠᐃⵠΔᐃᐃ": "img/night-skin79.png",
		"ⵠⲆⲆΔΔⵠⲆ": "img/day-skin80.png",
		"ⵠᐃⵠⵠΔΔΔ": "img/night-skin80.png",
		"ⲆΔⲆΔⲆⵠⲆ": "img/day-skin81.png",
		"ΔⵠΔⵠΔⲆᐃ": "img/night-skin81.png",
		"ⵠⵠΔᐃⲆⲆᐃ": "img/day-skin82.png",
		"ᐃⵠᐃⵠΔⲆΔ": "img/night-skin82.png",
		"ΔΔΔᐃΔΔⵠ": "img/day-skin83.png",
		"ⲆΔⲆΔΔᐃⲆ": "img/night-skin83.png",
		"ⲆᐃᐃⲆⲆΔΔ": "img/day-skin84.png",
		"ᐃⵠⵠⵠⲆⲆⵠ": "img/night-skin84.png",
		"ⵠΔΔⲆⵠΔᐃ": "img/day-skin85.png",
		"ⲆΔⲆⵠⵠⵠΔ": "img/night-skin85.png",
		"ᐃΔᐃⵠⲆΔⲆ": "img/day-skin86.png",
		"ΔᐃᐃⲆⲆⵠΔ": "img/night-skin86.png",
		"ⲆᐃⲆΔΔⵠⲆ": "img/day-skin87.png",
		"ⵠᐃΔⲆᐃΔⵠ": "img/night-skin87.png",
		"ᐃΔΔⵠᐃΔΔ": "img/day-skin88.png",
		"ᐃⲆⵠⵠⲆΔΔ": "img/night-skin88.png",
		"ⲆΔⲆΔⲆᐃⲆ": "img/day-skin89.png",
		"ᐃⲆⲆⵠⵠᐃⵠ": "img/night-skin89.png",
		"ᐃΔᐃᐃⵠᐃᐃ": "img/day-skin90.png",
		"ⲆⲆⵠᐃᐃⲆᐃ": "img/night-skin90.png",
		"ⲆΔⲆᐃΔᐃΔ": "img/day-skin91.png",
		"ΔⲆⵠⲆᐃⲆΔ": "img/night-skin91.png",
		"ⵠⲆⵠⲆΔⵠⵠ": "img/day-skin92.png",
		"ⵠⲆⲆⲆΔⲆⲆ": "img/night-skin92.png",
		"ΔᐃⵠΔⵠⲆⵠ": "img/day-skin93.png",
		"ⵠΔⲆΔᐃΔΔ": "img/night-skin93.png",
		"ⵠⲆΔⲆⲆᐃΔ": "img/day-skin94.png",
		"ⲆᐃⲆⵠᐃᐃᐃ": "img/night-skin94.png",
		"ᐃΔᐃΔΔⲆⵠ": "img/day-skin95.png",
		"ⲆⲆⲆΔᐃΔᐃ": "img/night-skin95.png",
		"ΔΔᐃⵠΔⵠᐃ": "img/day-skin96.png",
		"ΔᐃᐃΔⲆΔᐃ": "img/night-skin96.png",
		"ΔⲆⲆᐃΔⲆᐃ": "img/day-skin97.png",
		"ᐃΔᐃΔⲆᐃΔ": "img/night-skin97.png",
		"ⵠⲆⲆΔᐃᐃᐃ": "img/day-skin98.png",
		"ΔⲆΔⲆⲆⲆⲆ": "img/night-skin98.png",
		"ⲆᐃⵠⵠⲆⵠΔ": "img/day-skin99.png",
		"ⲆⲆᐃⵠⲆΔᐃ": "img/night-skin99.png",
		"ⵠⵠⵠⲆⵠᐃΔ": "img/day-skin100.png",
		"ⵠᐃⵠΔᐃⲆΔ": "img/night-skin100.png",
		"ᐃⵠᐃΔᐃⵠⲆ": "img/day-skin101.png",
		"ᐃᐃⵠⵠⲆⵠΔ": "img/night-skin101.png",
		"ⲆⲆⲆΔⵠⲆⵠ": "img/day-skin102.png",
		"ᐃᐃΔᐃΔᐃΔ": "img/night-skin102.png",
		"ⲆⲆᐃᐃᐃⲆΔ": "img/day-skin103.png",
		"ᐃΔⵠⵠΔⵠⲆ": "img/night-skin103.png",
		"ⲆᐃᐃΔⲆΔΔ": "img/day-skin104.png",
		"ⲆᐃⲆⲆᐃⵠᐃ": "img/night-skin104.png",
		"ⲆΔⲆⲆⲆᐃΔ": "img/day-skin105.png",
		"ΔᐃⲆΔΔᐃΔ": "img/night-skin105.png",
		"ᐃⵠⵠⲆⵠⲆᐃ": "img/day-skin106.png",
		"ⲆⲆⲆΔⲆⲆⲆ": "img/night-skin106.png",
		"ΔⲆⵠⵠⲆᐃⵠ": "img/day-skin107.png",
		"ᐃⲆΔⲆⵠⵠⵠ": "img/night-skin107.png",
		"ⵠⲆΔᐃⵠΔᐃ": "img/day-skin108.png",
		"ᐃᐃⲆⲆΔⲆΔ": "img/night-skin108.png",
		"ⵠⲆᐃⵠⲆΔⲆ": "img/day-skin109.png",
		"ⵠᐃᐃᐃⵠⵠΔ": "img/night-skin109.png",
		"ᐃⵠⵠⲆᐃⲆⲆ": "img/day-skin110.png",
		"ⵠⵠⲆⲆⵠΔⲆ": "img/night-skin110.png",
		"ᐃΔΔⵠΔⵠΔ": "img/day-skin111.png",
		"ⵠⲆⲆᐃᐃⲆΔ": "img/night-skin111.png",
		"ⵠⵠᐃᐃΔᐃⵠ": "img/day-skin112.png",
		"ΔΔⵠⲆⲆⲆⲆ": "img/night-skin112.png",
		"ᐃΔⵠᐃΔᐃΔⵠⲆ": "img/day-skin113.png",
		"ΔⵠᐃⲆⵠⲆΔⵠᐃ": "img/night-skin113.png",
		"ⲆᐃⲆⲆΔⵠᐃ": "img/day-skin114.png",
		"ⵠⵠⲆᐃⲆⲆᐃ": "img/night-skin114.png",
		"ⲆᐃΔⲆΔᐃⲆ": "img/day-skin115.png",
		"ⵠⲆΔΔΔⵠⵠ": "img/night-skin115.png",
		"ΔⵠⲆΔⵠⲆⵠ": "img/day-skin116.png",
		"ⲆⲆⵠΔᐃΔⲆ": "img/night-skin116.png",
		"ΔΔΔⵠⲆᐃⲆ": "img/day-skin117.png",
		"ᐃⲆΔΔⲆΔᐃ": "img/night-skin117.png",
		"ΔⵠᐃⵠΔⵠΔ": "img/day-skin118.png",
		"ΔⵠᐃᐃΔⵠⵠ": "img/night-skin118.png",
		"ⵠⵠⲆⵠᐃⲆΔ": "img/day-skin119.png",
		"ᐃⵠⲆᐃⵠⲆⵠ": "img/night-skin119.png",
		"ⵠᐃⵠⲆⲆⲆᐃ": "img/day-skin120.png",
		"ⵠⲆΔⵠⵠΔⵠ": "img/night-skin120.png",
		"ΔⵠⲆΔⲆⲆΔ": "img/day-skin121.png",
		"ⵠⲆᐃⵠⲆᐃⲆ": "img/night-skin121.png",
		"ᐃⲆΔⵠᐃΔᐃ": "img/day-skin122.png",
		"ᐃⵠⵠⲆᐃⵠᐃ": "img/night-skin122.png",
		"ΔⵠΔᐃⵠᐃⲆ": "img/day-skin123.png",
		"ⲆᐃⵠⵠΔᐃⵠ": "img/night-skin123.png",
		"ⵠⲆⲆᐃᐃᐃᐃ": "img/day-skin124.png",
		"ⵠΔᐃⵠⲆⲆΔ": "img/night-skin124.png",
		"ⵠᐃⵠⵠⲆᐃΔ": "img/day-skin125.png",
		"ᐃᐃⲆᐃᐃⲆⵠ": "img/night-skin125.png",
		"ⲆⲆⵠⲆΔⵠⲆ": "img/day-skin126.png",
		"ⲆᐃΔΔᐃΔⵠ": "img/night-skin126.png",
		"ⵠΔⲆⵠᐃⵠⲆ": "img/day-skin127.png",
		"ᐃⵠⵠⲆΔⵠⲆ": "img/night-skin127.png",
		"ⵠⲆⲆΔⲆᐃⵠ": "img/day-skin128.png",
		"ᐃᐃΔⵠⲆΔΔ": "img/night-skin128.png",
		"ⲆⲆⲆΔᐃΔⲆ": "img/day-skin129.png",
		"ᐃⵠᐃⲆΔⲆⵠ": "img/night-skin129.png",
		"ΔΔⵠⵠⵠⲆⲆ": "img/day-skin130-1.png",
		"ⵠⲆⵠᐃΔᐃΔ": "img/night-skin130-1.png",
		"ᐃⵠΔⵠᐃᐃⵠ": "img/day-skin131.png",
		"ⵠᐃᐃΔⵠᐃᐃ": "img/night-skin131.png",
		"ΔΔⵠⵠⲆⵠΔ": "img/day-skin132.png",
		"ⲆⲆⲆΔᐃⲆᐃ": "img/night-skin132.png",
		"ⵠΔᐃᐃᐃⲆΔ": "img/day-skin133.png",
		"ᐃⲆⲆⵠⲆΔⵠ": "img/night-skin133.png",
		"ΔⵠⲆⵠⵠⵠΔ": "img/day-skin134.png",
		"ΔΔΔⵠⲆᐃΔ": "img/night-skin134.png",
		"ⲆⲆⲆⵠΔΔⵠ": "img/day-skin135.png",
		"ⵠᐃⲆⵠⲆΔᐃ": "img/night-skin135.png",
		"ᐃⵠⲆᐃΔᐃᐃ": "img/day-skin136.png",
		"ᐃΔΔⲆᐃⵠΔ": "img/night-skin136.png",
		"ⲆⵠΔⵠᐃⵠⵠ": "img/day-skin137.png",
		"ⵠΔΔᐃΔΔᐃ": "img/night-skin137.png",
		"ΔⲆⲆⲆΔᐃΔ": "img/day-skin138.png",
		"ᐃⲆⵠΔⲆᐃᐃ": "img/night-skin138.png",
		"ΔⵠⵠᐃΔⲆᐃ": "img/day-skin139.png",
		"ᐃΔⵠΔⲆⵠⲆ": "img/night-skin139.png",
		"ΔⲆⲆΔⵠΔΔ": "img/day-skin140.png",
		"ᐃⵠᐃΔΔΔᐃ": "img/night-skin140.png",
		"ᐃⵠΔⵠΔⲆⲆ": "img/day-skin141.png",
		"ⲆΔⵠⲆᐃΔᐃ": "img/night-skin141.png",
		"ΔᐃⲆΔⲆⲆⵠ": "img/day-skin142.png",
		"ⲆⵠᐃⲆΔⵠⵠ": "img/night-skin142.png",
		"ΔᐃⲆⵠᐃⲆⵠ": "img/day-skin143.png",
		"ⲆᐃᐃΔΔΔᐃ": "img/night-skin143.png",
		"ⵠⲆΔⵠⵠⲆΔ": "img/day-skin144.png",
		"ⲆⵠⲆⲆⲆⵠⵠ": "img/night-skin144.png",
		"ᐃᐃⲆᐃⵠᐃᐃ": "img/day-skin145.png",
		"ΔᐃⵠΔᐃᐃᐃ": "img/night-skin145.png",
		"ᐃⲆⵠⲆⵠⲆⲆ": "img/day-skin146.png",
		"ⵠⵠΔΔΔⵠⵠ": "img/night-skin146.png",
		"ΔᐃᐃΔⲆⲆⲆ": "img/day-skin147.png",
		"ⵠΔᐃᐃⵠⲆᐃ": "img/night-skin147.png",
		"ⵠⵠⵠΔⲆᐃⲆ": "img/day-skin148.png",
		"ᐃᐃᐃᐃΔΔᐃ": "img/night-skin148.png",
		"ΔᐃⵠⵠⵠΔⲆ": "img/day-skin149.png",
		"ⵠΔΔᐃΔⵠⲆ": "img/night-skin149.png",
		"ᐃⵠᐃⵠⲆΔΔ": "img/day-skin150.png",
		"ᐃΔⵠⲆΔΔⲆ": "img/night-skin150.png",
		"ⲆΔᐃⵠΔⵠⵠ": "img/day-skin151.png",
		"ⲆΔⵠⲆᐃⲆⲆ": "img/night-skin151.png",
		"ᐃⵠΔⲆⲆⵠⲆ": "img/day-skin152.png",
		"ΔΔᐃᐃⲆΔᐃ": "img/night-skin152.png",
		"ᐃⵠΔⵠᐃᐃᐃ": "img/day-skin153.png",
		"ⵠΔᐃΔΔᐃΔ": "img/night-skin153.png",
		"ΔⵠⵠΔⲆᐃΔ": "img/day-skin154.png",
		"ΔᐃⵠΔⲆⲆΔ": "img/night-skin154.png",
		"ᐃΔⲆⲆⲆΔᐃ": "img/day-skin155.png",
		"ᐃⲆᐃᐃᐃΔΔ": "img/night-skin155.png",
		"ⵠᐃⵠⵠⲆᐃᐃ": "img/day-skin156.png",
		"ⵠᐃΔᐃΔΔΔ": "img/night-skin156.png",
		"ΔⵠᐃⲆᐃⵠⲆ": "img/day-skin157.png",
		"ΔⵠⵠⲆⲆᐃⵠ": "img/night-skin157.png",
		"ᐃⲆⵠΔΔⲆΔ": "img/day-skin158.png",
		"ⵠⵠᐃⲆᐃⵠᐃ": "img/night-skin158.png",
		"ⵠⲆΔΔΔⲆⵠ": "img/day-skin159.png",
		"ΔⵠⲆΔᐃⵠⵠ": "img/night-skin159.png",
		"ⲆⲆᐃⵠΔᐃⲆ": "img/day-skin160.png",
		"ᐃⲆⵠⲆᐃΔⵠ": "img/night-skin160.png",
		"ᐃΔΔΔΔⵠΔ": "img/day-skin161.png",
		"ⵠᐃⵠⲆⲆⵠⲆ": "img/night-skin161.png",
		"ᐃⲆΔⵠΔΔⵠ": "img/day-skin162.png",
		"ⲆⲆΔΔΔΔⲆ": "img/night-skin162.png",
		"ΔⵠⵠⲆⵠⲆⵠ": "img/day-skin163.png",
		"ΔᐃⵠⲆⵠⵠᐃ": "img/night-skin163.png",
		"ⲆⲆⵠᐃΔΔⲆ": "img/day-skin164.png",
		"ⵠⲆᐃᐃΔⲆⵠ": "img/night-skin164.png",
		"ΔᐃⵠΔⲆΔΔ": "img/day-skin165.png",
		"ᐃΔΔⲆⲆΔΔ": "img/night-skin165.png",
		"ᐃΔᐃᐃΔⲆⲆ": "img/day-skin166.png",
		"ΔᐃΔᐃⵠⵠⲆ": "img/night-skin166.png",
		"ΔΔᐃᐃΔΔΔ": "img/day-skin167.png",
		"ⵠⵠⵠⵠⵠᐃⲆ": "img/night-skin167.png",
		"ⵠΔᐃⲆᐃⲆΔ": "img/day-skin168.png",
		"ᐃⲆⲆⲆᐃᐃᐃ": "img/night-skin168.png",
		"ΔⵠⵠⲆᐃⵠⲆ": "img/day-skin169.png",
		"ⵠᐃⵠΔⵠᐃΔ": "img/night-skin169.png",
		"ⲆΔⵠⵠΔⵠⲆ": "img/day-skin170.png",
		"ΔᐃⵠⵠⲆΔᐃ": "img/night-skin170.png",
		"ⲆΔⲆᐃⵠⲆᐃ": "img/day-skin171.png",
		"ⵠⵠΔⵠⵠⲆΔ": "img/night-skin171.png",
		"ΔⲆΔⲆⵠⵠⵠ": "img/day-skin172.png",
		"ⵠᐃⵠΔⲆΔⲆ": "img/night-skin172.png",
		"ΔᐃᐃΔᐃᐃᐃ": "img/day-skin173.png",
		"ⵠⵠⵠⲆⲆⵠᐃ": "img/night-skin173.png",
		"ⵠΔᐃⲆⲆΔⲆ": "img/day-skin174.png",
		"ΔⲆᐃΔⵠΔⲆ": "img/night-skin174.png",
		"ᐃᐃⵠΔΔⲆⵠ": "img/day-skin175.png",
		"ΔⵠⲆⲆⵠᐃΔ": "img/night-skin175.png",
		"ⲆᐃΔⲆᐃⲆᐃ": "img/day-skin176.png",
		"ⲆΔⵠΔⵠⲆᐃ": "img/night-skin176.png",
		"ᐃΔⵠⲆⲆᐃⲆ": "img/day-skin177.png",
		"ΔⲆⲆΔΔⲆΔ": "img/night-skin177.png",
		"ᐃΔΔᐃΔΔᐃ": "img/day-skin178.png",
		"ᐃⲆΔⲆⵠᐃⵠ": "img/night-skin178.png",
		"ⲆⲆⲆⲆᐃΔΔ": "img/day-skin179.png",
		"ⲆⲆΔΔᐃⲆᐃ": "img/night-skin179.png",
		"ⵠΔΔⲆⵠᐃᐃ": "img/day-skin180.png",
		"ΔⵠⵠⲆⲆⵠΔ": "img/night-skin180.png",
		"ΔᐃΔᐃⵠᐃⵠ": "img/day-skin181.png",
		"ⲆΔⲆⵠⲆⲆⵠ": "img/night-skin181.png",
		"ⲆΔⲆᐃⵠΔᐃ": "img/day-skin182.png",
		"ⵠⵠᐃᐃᐃⲆᐃ": "img/night-skin182.png",
		"ⵠᐃᐃΔΔᐃⲆ": "img/day-skin183.png",
		"ⵠⵠΔΔᐃⵠⲆ": "img/night-skin183.png",
		"ⵠⵠᐃⲆᐃᐃΔ": "img/day-skin184.png",
		"ᐃⵠⲆᐃᐃⲆⵠ": "img/night-skin184.png",
		"ΔᐃⲆⵠⵠⵠⵠ": "img/day-skin185.png",
		"ΔⲆⵠⵠⲆΔᐃ": "img/night-skin185.png",
		"ⲆⲆⲆⲆⵠⵠΔ": "img/day-skin186.png",
		"ⵠⲆΔⲆΔΔⲆ": "img/night-skin186.png",
		"ΔΔᐃΔΔΔΔ": "img/day-skin187.png",
		"ᐃⲆΔⲆⲆⵠⲆ": "img/night-skin187.png",
		"ᐃⵠⲆᐃⲆΔΔ": "img/day-skin188.png",
		"ⲆᐃΔⵠⲆⵠΔ": "img/night-skin188.png",
		"ᐃⲆⵠⲆᐃⵠⵠ": "img/day-skin189.png",
		"ⲆᐃᐃΔⵠᐃⵠ": "img/night-skin189.png",
		"ᐃⲆⲆⵠΔΔᐃ": "img/day-skin190.png",
		"ⲆᐃⲆΔⲆΔⵠ": "img/night-skin190.png",
		"ⲆᐃᐃΔΔΔⵠ": "img/day-skin191.png",
		"ᐃⲆᐃⵠⲆΔⵠ": "img/night-skin191.png",
		"ⲆᐃΔⲆᐃΔⲆ": "img/day-skin192.png",
		"ΔⲆᐃⲆΔΔⵠ": "img/night-skin192.png",
		"ΔΔᐃΔΔᐃᐃ": "img/day-skin193.png",
		"ᐃⵠⲆⵠⵠⲆΔ": "img/night-skin193.png",
		"ⲆⵠⲆⲆⵠᐃⲆ": "img/day-skin194.png",
		"ⲆⲆΔΔⵠⵠⵠ": "img/night-skin194.png",
		"ⲆᐃᐃᐃⵠΔΔ": "img/day-skin195.png",
		"ᐃᐃᐃΔⵠᐃΔ": "img/night-skin195.png",
		"ⲆᐃⲆΔⲆⵠᐃ": "img/day-skin196.png",
		"ᐃΔᐃⲆΔΔⵠ": "img/night-skin196.png",
		"ⵠⲆⵠΔⲆⵠⵠ": "img/day-skin197.png",
		"ⲆⵠⲆⵠᐃΔⲆ": "img/night-skin197.png",
		"ⵠΔΔⵠⵠⲆᐃ": "img/day-skin198.png",
		"ᐃⵠᐃᐃΔⲆᐃ": "img/night-skin198.png",
		"ΔΔΔⲆΔΔⵠ": "img/day-skin199.png",
		"ΔⵠⲆⵠⵠⲆⲆ": "img/night-skin199.png",
		"ⵠΔΔⵠⲆⲆⵠ": "img/day-skin200.png",
		"ⲆⲆⲆⵠⲆⲆΔ": "img/night-skin200.png",
		"ⵠⵠⵠⲆᐃⲆⲆ": "img/day-skin201.png",
		"ⲆΔΔᐃᐃΔΔ": "img/night-skin201.png",
		"ⲆⲆⵠⵠΔⲆⵠ": "img/day-skin202.png",
		"ΔΔᐃΔⲆⲆⵠ": "img/night-skin202.png",
		"ⲆΔΔⲆᐃᐃⵠ": "img/day-skin203.png",
		"ΔᐃΔᐃⲆⵠᐃ": "img/night-skin203.png",
		"ΔᐃᐃⲆⲆᐃⲆ": "img/day-skin204.png",
		"ΔⲆⲆⲆΔΔΔ": "img/night-skin204.png",
		"ⲆΔᐃⲆᐃΔⲆ": "img/day-skin205.png",
		"ᐃⵠⲆᐃᐃΔΔ": "img/night-skin205.png",
		"ΔⵠⲆΔΔᐃⵠ": "img/day-skin206.png",
		"ᐃⲆⲆΔᐃⲆΔ": "img/night-skin206.png",
		"ΔⵠⵠΔⵠΔΔ": "img/day-skin207.png",
		"ᐃⲆΔΔⵠΔᐃ": "img/night-skin207.png",
		"ᐃⵠⲆΔⲆᐃΔ": "img/day-skin208.png",
		"ⲆⵠⵠΔⵠΔⵠ": "img/night-skin208.png",
		"ⵠΔⲆᐃⵠΔΔ": "img/day-skin209.png",
		"ΔΔⵠΔΔᐃᐃ": "img/night-skin209.png",
		"ΔΔⵠⲆΔᐃⲆ": "img/day-skin210.png",
		"ᐃⵠΔΔⵠᐃⲆ": "img/night-skin210.png",
		"ᐃⲆᐃΔΔᐃⲆ": "img/day-skin211.png",
		"Ⲇᐃⵠⵠⵠᐃᐃ": "img/night-skin211.png",
		"ᐃⵠⵠΔⵠⲆⲆ": "img/day-skin212.png",
		"ⵠᐃΔⲆⵠᐃΔ": "img/night-skin212.png",
		"ⲆΔΔΔⲆΔⲆ": "img/day-skin213.png",
		"ΔⵠᐃΔΔΔⵠ": "img/night-skin213.png",
		"ᐃᐃᐃΔⲆᐃΔ": "img/day-skin214.png",
		"ⵠⲆΔⲆᐃⲆⲆ": "img/night-skin214.png",
		"ⵠΔΔⲆᐃⵠⲆ": "img/day-hand-skin0.png",
		"ᐃⵠⵠⲆΔΔΔ": "img/night-hand-skin0.png",
		"ΔⵠⲆⵠΔΔⲆ": "img/day-hand-skin1.png",
		"ⲆⲆΔᐃⵠⵠⲆ": "img/night-hand-skin1.png",
		"Ⲇᐃᐃᐃⵠᐃⵠ": "img/day-hand-skin2.png",
		"ΔⲆᐃΔⲆⵠⲆ": "img/night-hand-skin2.png",
		"ⲆΔⲆᐃⵠᐃⵠ": "img/day-hand-skin3.png",
		"ΔⲆΔᐃⲆΔΔ": "img/night-hand-skin3.png",
		"ⵠⵠΔⲆΔⲆⲆ": "img/day-hand-skin4.png",
		"ⲆⲆᐃΔᐃΔᐃ": "img/night-hand-skin4.png",
		"ⲆⵠⵠᐃⵠⵠΔ": "img/day-hand-skin5.png",
		"ᐃΔᐃⲆⲆᐃΔ": "img/night-hand-skin5.png",
		"ΔᐃⲆⲆⲆⲆᐃ": "img/day-hand-skin6.png",
		"ⵠΔΔᐃⲆⵠΔⵠᐃ": "img/night-hand-skin6.png",
		"ΔᐃⵠⲆΔⲆᐃ": "img/day-hand-skin6.png",
		"ⵠᐃΔⵠⵠᐃΔ": "img/night-hand-skin6.png",
		"ⲆⲆΔΔⲆⵠΔ": "img/day-hand-skin8.png",
		"ΔᐃⲆⲆⲆᐃᐃ": "img/night-hand-skin8.png",
		"ⲆⲆΔΔⵠⵠⲆ": "img/day-hand-skin9.png",
		"ᐃⵠᐃΔⵠᐃⲆ": "img/night-hand-skin9.png",
		"ⲆᐃΔⵠⲆΔⵠ": "img/day-hand-skin10.png",
		"ⵠⲆᐃΔᐃⲆᐃ": "img/night-hand-skin10.png",
		"ᐃᐃᐃⵠⵠΔⲆ": "img/day-hand-skin11.png",
		"ΔᐃⲆⲆᐃᐃⵠ": "img/night-hand-skin11.png",
		"ᐃᐃⲆⵠΔᐃᐃ": "img/day-hand-skin12.png",
		"ΔⵠⵠⲆⵠᐃᐃ": "img/night-hand-skin12.png",
		"ᐃⵠⵠⵠⵠⵠΔ": "img/day-hand-skin13.png",
		"ᐃᐃᐃᐃᐃⲆⲆ": "img/night-hand-skin13.png",
		"ⲆΔᐃΔⵠΔⵠ": "img/day-hand-skin14.png",
		"ΔⵠⵠⵠΔΔᐃ": "img/night-hand-skin14.png",
		"ΔⵠⵠᐃⵠΔⲆ": "img/day-hand-skin15.png",
		"ΔΔᐃᐃⵠⲆⵠ": "img/night-hand-skin15.png",
		"ⲆⲆΔⵠᐃⲆⵠ": "img/day-hand-skin16.png",
		"ⲆⲆⵠᐃⵠΔⵠ": "img/night-hand-skin16.png",
		"ΔⲆΔⲆⵠᐃⲆ": "img/day-hand-skin17.png",
		"ᐃᐃᐃⵠⵠᐃⲆ": "img/night-hand-skin17.png",
		"ⵠⲆΔⵠᐃΔⲆ": "img/day-hand-skin18.png",
		"ΔΔⵠⲆⲆΔᐃ": "img/night-hand-skin18.png",
		"ᐃᐃᐃΔΔⵠⵠ": "img/day-hand-skin19.png",
		"ⲆᐃⲆⲆᐃⵠⲆ": "img/night-hand-skin19.png",
		"ⲆⲆᐃᐃᐃⲆⲆ": "img/day-hand-skin20.png",
		"ⲆΔⲆⲆΔᐃⲆ": "img/night-hand-skin20.png",
		"ⲆΔᐃⲆⲆⵠΔ": "img/day-hand-skin21.png",
		"ΔΔⵠΔⲆᐃⵠ": "img/night-hand-skin21.png",
		"ⵠⲆᐃⲆᐃⵠⵠ": "img/day-hand-skin22.png",
		"ᐃⲆΔᐃⲆⵠΔ": "img/night-hand-skin22.png",
		"ⵠᐃᐃⵠΔᐃᐃ": "img/day-hand-skin23.png",
		"ΔⵠⵠΔᐃᐃⲆ": "img/night-hand-skin23.png",
		"ⲆⲆᐃΔⵠⲆΔ": "img/day-hand-skin24.png",
		"ᐃᐃΔΔⵠⲆⵠ": "img/night-hand-skin24.png",
		"ⲆⵠᐃⲆⲆⵠΔ": "img/day-hand-skin25.png",
		"ᐃⵠᐃΔᐃⵠᐃ": "img/night-hand-skin25.png",
		"ᐃΔⵠΔⲆᐃⵠ": "img/day-hand-skin26.png",
		"ⵠᐃΔΔᐃⲆΔ": "img/night-hand-skin26.png",
		"ⲆᐃⲆⲆⵠᐃΔ": "img/day-hand-skin27.png",
		"ⵠΔⵠⲆⲆᐃⵠ": "img/night-hand-skin27.png",
		"ⲆⵠⲆᐃⲆⲆⲆ": "img/day-hand-skin28.png",
		"ⵠⲆᐃᐃᐃᐃⲆ": "img/night-hand-skin28.png",
		"ΔⲆΔⵠΔᐃⲆ": "img/day-hand-skin29.png",
		"ⵠᐃᐃⵠᐃᐃⵠ": "img/night-hand-skin29.png",
		"ⲆⲆᐃⲆᐃⲆⲆ": "img/day-hand-skin30.png",
		"ᐃᐃΔΔᐃΔᐃ": "img/night-hand-skin30.png",
		"ΔⵠᐃⲆΔᐃᐃ": "img/day-hand-skin31.png",
		"Ⲇⵠⵠⵠⵠⵠᐃ": "img/night-hand-skin31.png",
		"ᐃΔⵠΔΔᐃΔ": "img/day-hand-skin32.png",
		"ᐃᐃⵠᐃⲆᐃⵠ": "img/night-hand-skin32.png",
		"ⵠⲆΔᐃⵠΔΔ": "img/day-hand-skin33.png",
		"ᐃΔΔΔᐃⵠⵠ": "img/night-hand-skin33.png",
		"ⵠΔⵠⵠΔΔᐃ": "img/day-hand-skin34.png",
		"ⵠΔⲆᐃᐃΔⲆ": "img/night-hand-skin34.png",
		"ⵠᐃΔΔⵠⵠΔ": "img/day-hand-skin35.png",
		"ⵠΔΔᐃΔⲆᐃ": "img/night-hand-skin35.png",
		"ⲆⲆΔⲆΔⵠΔ": "img/day-hand-skin36.png",
		"ⲆⲆⲆΔⲆᐃⲆ": "img/night-hand-skin36.png",
		"ΔΔⵠᐃⲆⲆⵠ": "img/day-hand-skin37.png",
		"ᐃᐃΔᐃᐃΔᐃ": "img/night-hand-skin37.png",
		"ⲆᐃⲆΔⵠᐃΔ": "img/day-hand-skin38.png",
		"ᐃᐃⵠⵠⵠΔⵠ": "img/night-hand-skin38.png",
		"ⵠΔⵠᐃⵠⲆΔ": "img/day-hand-skin39.png",
		"ΔⵠⲆᐃⲆⲆᐃ": "img/night-hand-skin39.png",
		"ⲆⲆⲆᐃⵠⲆΔ": "img/day-hand-skin40.png",
		"ⲆΔᐃᐃΔΔΔ": "img/night-hand-skin40.png",
		"ⲆⲆⲆᐃⵠⵠⲆ": "img/day-hand-skin41.png",
		"ΔᐃᐃᐃΔⵠΔ": "img/night-hand-skin41.png",
		"ⵠⵠΔᐃΔΔⲆ": "img/day-hand-skin42.png",
		"ΔⵠⲆΔΔᐃΔ": "img/night-hand-skin42.png",
		"ⲆⵠⲆΔⵠⲆⵠ": "img/day-hand-skin43.png",
		"ᐃⲆⲆᐃΔⵠⲆ": "img/night-hand-skin43.png",
		"ᐃⲆⲆΔⵠΔᐃ": "img/day-hand-skin16.png",
		"ΔᐃⲆᐃⲆΔⲆ": "img/night-hand-skin16.png",
		"ΔᐃᐃⲆΔⵠⵠ": "img/day-hand-skin45.png",
		"ΔΔᐃΔⵠⲆΔ": "img/night-hand-skin45.png",
		"ᐃⵠᐃΔⵠΔᐃ": "img/day-hand-skin46.png",
		"ⵠΔⲆᐃᐃⲆΔ": "img/night-hand-skin46.png",
		"ⵠᐃΔⵠⵠⲆⲆ": "img/day-hand-skin47.png",
		"ᐃⵠᐃᐃᐃⲆⲆ": "img/night-hand-skin47.png",
		"ΔᐃⵠⲆⵠΔⲆ": "img/day-hand-skin48.png",
		"ⵠΔⵠⵠⲆᐃΔ": "img/night-hand-skin48.png",
		"ᐃᐃⵠⵠⵠᐃᐃ": "img/day-hand-skin49.png",
		"ΔⵠΔⵠⵠⲆΔ": "img/night-hand-skin49.png",
		"ⲆⲆᐃᐃᐃΔⵠ": "img/day-hand-skin49.png",
		"ΔΔⵠᐃΔᐃᐃ": "img/night-hand-skin49.png",
		"ΔΔᐃⵠⵠⲆⲆ": "img/day-hand-skin51.png",
		"Ⲇᐃᐃᐃᐃᐃᐃ": "img/night-hand-skin51.png",
		"ⲆᐃΔⵠⵠᐃⵠ": "img/day-hand-skin52.png",
		"ᐃⲆΔⲆΔⲆⲆ": "img/night-hand-skin52.png",
		"ΔⲆᐃΔⲆᐃⵠ": "img/day-hand-skin53.png",
		"ΔΔⵠΔⵠᐃⵠ": "img/night-hand-skin53.png",
		"ᐃΔⵠⵠⲆⵠᐃ": "img/day-hand-skin53.png",
		"ΔᐃⲆᐃⲆΔᐃ": "img/night-hand-skin53.png",
		"ⵠⲆⲆᐃΔΔΔ": "img/day-hand-skin55.png",
		"ᐃⲆⲆⵠⵠᐃΔ": "img/night-hand-skin55.png",
		"ΔΔΔΔᐃⵠⲆ": "img/day-hand-skin56.png",
		"ΔⵠᐃⲆⵠᐃΔ": "img/night-hand-skin56.png",
		"ⲆⲆⵠΔⲆΔⲆ": "img/day-hand-skin57.png",
		"ⵠᐃᐃⲆⵠΔΔ": "img/night-hand-skin57.png",
		"ⵠᐃᐃⵠΔⲆⲆ": "img/day-hand-skin58.png",
		"ⵠΔΔᐃⲆΔΔ": "img/night-hand-skin58.png",
		"ΔΔⵠᐃⵠⲆΔ": "img/day-hand-skin59.png",
		"ΔΔᐃⲆⵠⵠΔ": "img/night-hand-skin59.png",
		"ⵠⵠⲆΔᐃΔᐃ": "img/day-hand-skin61.png",
		"ᐃⵠⲆΔⵠⲆⵠ": "img/night-hand-skin61.png",
		"ΔᐃⵠΔΔⵠᐃ": "img/day-hand-skin61.png",
		"ⲆᐃⲆⵠⵠⲆΔ": "img/night-hand-skin61.png",
		"ⲆᐃⲆⲆΔⲆⲆ": "img/day-hand-skin62.png",
		"ⲆΔᐃⲆⲆΔⵠ": "img/night-hand-skin62.png",
		"ⲆΔΔⵠⵠΔⲆ": "img/day-hand-skin63.png",
		"ᐃⵠⲆΔⲆⲆᐃ": "img/night-hand-skin63.png",
		"ΔⵠᐃᐃΔᐃᐃ": "img/day-hand-skin64.png",
		"ⲆΔᐃⵠⵠΔⵠ": "img/night-hand-skin64.png",
		"ᐃᐃΔΔⵠΔᐃ": "img/day-hand-skin65.png",
		"ⵠⵠⲆᐃⲆⵠΔ": "img/night-hand-skin65.png",
		"ⲆᐃⲆⲆⲆⵠΔ": "img/day-hand-skin66.png",
		"ⲆΔⵠᐃᐃⵠⲆ": "img/night-hand-skin66.png",
		"ⵠᐃᐃⵠⲆⲆΔ": "img/day-hand-skin67.png",
		"ⲆΔⵠᐃⲆⲆΔ": "img/night-hand-skin67.png",
		"ⵠΔΔⲆⵠⵠᐃ": "img/day-hand-skin68.png",
		"ᐃΔⲆΔΔΔΔ": "img/night-hand-skin68.png",
		"ⲆⲆΔᐃᐃⵠⲆ": "img/day-hand-skin69.png",
		"ᐃⲆⲆⲆⲆΔⲆ": "img/night-hand-skin69.png",
		"ⲆⲆΔᐃᐃᐃⵠ": "img/day-hand-skin70.png",
		"ΔᐃᐃΔΔΔⵠ": "img/night-hand-skin70.png",
		"ⵠⵠⲆΔⵠⲆΔ": "img/day-hand-skin71.png",
		"ⵠᐃⲆⵠΔΔΔ": "img/night-hand-skin71.png",
		"ᐃΔΔⵠⵠᐃΔ": "img/day-hand-skin72.png",
		"Δᐃⵠᐃᐃᐃⵠ": "img/night-hand-skin72.png",
		"ᐃΔΔⵠᐃᐃᐃ": "img/day-hand-skin73.png",
		"ΔᐃⵠᐃᐃΔⵠ": "img/night-hand-skin73.png",
		"ⵠΔᐃᐃⲆΔΔ": "img/day-hand-skin74.png",
		"ΔⵠΔᐃⵠΔⵠ": "img/night-hand-skin74.png",
		"ᐃⲆΔⲆⵠⵠᐃ": "img/day-hand-skin75.png",
		"ᐃⵠΔᐃⵠΔⲆ": "img/night-hand-skin75.png",
		"ⲆᐃⲆᐃΔΔⵠ": "img/day-hand-skin76.png",
		"ⲆⵠⲆⲆᐃΔⲆ": "img/night-hand-skin76.png",
		"ⵠΔᐃⲆⵠᐃⲆ": "img/day-hand-skin77.png",
		"ᐃᐃᐃⲆᐃΔΔ": "img/night-hand-skin77.png",
		"ⲆΔⵠᐃⵠᐃᐃ": "img/day-hand-skin78.png",
		"ΔⵠⲆⵠᐃΔΔ": "img/night-hand-skin78.png",
		"ᐃⵠⲆⲆⲆᐃΔ": "img/day-hand-skin79.png",
		"ᐃᐃⲆΔᐃΔΔ": "img/night-hand-skin79.png",
		"ⵠⲆⵠⲆⲆⲆᐃ": "img/day-hand-skin80.png",
		"ᐃᐃΔⵠΔᐃⵠ": "img/night-hand-skin80.png",
		"ΔΔᐃᐃⲆΔⲆ": "img/day-hand-skin81.png",
		"ⲆⵠⲆᐃΔⵠⵠ": "img/night-hand-skin81.png",
		"ᐃⵠⵠΔΔΔΔ": "img/day-hand-skin82.png",
		"ᐃⵠᐃᐃⲆⲆⵠ": "img/night-hand-skin82.png",
		"ᐃⵠΔⵠⲆᐃΔ": "img/day-hand-skin83.png",
		"ⲆⵠⲆⲆⵠⲆⵠ": "img/night-hand-skin83.png",
		"ᐃⲆⲆΔΔΔᐃ": "img/day-hand-skin84.png",
		"ⲆᐃⵠᐃᐃⲆᐃ": "img/night-hand-skin84.png",
		"ⲆᐃΔⵠⲆᐃᐃ": "img/day-hand-skin85.png",
		"ᐃⵠⲆᐃⲆΔⲆ": "img/night-hand-skin85.png",
		"ⲆⵠᐃᐃⲆⵠⵠ": "img/day-hand-skin86.png",
		"ⲆⵠⲆⲆⲆⲆⲆ": "img/night-hand-skin86.png",
		"ⵠⵠⵠⵠᐃᐃⲆ": "img/day-hand-skin87.png",
		"ⵠⲆᐃⵠΔᐃΔ": "img/night-hand-skin87.png",
		"ⵠΔᐃⲆΔΔⲆ": "img/day-hand-skin88.png",
		"ⵠΔΔⲆⵠᐃΔ": "img/night-hand-skin88.png",
		"ⵠΔΔΔΔⲆᐃ": "img/day-hand-skin89.png",
		"ⲆⵠᐃΔⵠⵠⵠ": "img/night-hand-skin89.png",
		"ⲆⲆᐃⵠⵠⲆᐃ": "img/day-hand-skin90.png",
		"ΔᐃⵠᐃⲆⵠᐃ": "img/night-hand-skin90.png",
		"ΔⵠⵠⲆⵠΔᐃ": "img/day-hand-skin91.png",
		"ᐃᐃᐃᐃⵠⵠΔ": "img/night-hand-skin91.png",
		"ⲆᐃᐃⵠΔᐃΔ": "img/day-hand-skin92.png",
		"ΔⲆⵠⵠⵠⵠⵠ": "img/night-hand-skin92.png",
		"ⲆᐃΔΔᐃᐃᐃ": "img/day-hand-skin93.png",
		"ΔᐃⲆⵠᐃⵠⲆ": "img/night-hand-skin93.png",
		"ⵠΔⵠᐃⲆᐃᐃ": "img/day-hand-skin94.png",
		"ⲆⲆᐃΔⲆΔⵠ": "img/night-hand-skin94.png",
		"ⵠⲆᐃᐃΔΔᐃ": "img/day-hand-skin95.png",
		"ᐃⲆᐃⵠⵠⵠⲆ": "img/night-hand-skin95.png",
		"ΔᐃᐃΔⲆᐃΔ": "img/day-hand-skin96.png",
		"ΔⲆⲆⲆⲆⲆⵠ": "img/night-hand-skin96.png",
		"ⵠⵠⵠᐃⲆᐃᐃ": "img/day-hand-skin97.png",
		"ⲆᐃⲆᐃⵠΔᐃ": "img/night-hand-skin97.png",
		"ᐃⵠᐃΔⵠⵠΔ": "img/day-hand-skin98.png",
		"ΔᐃⲆⲆΔΔⵠ": "img/night-hand-skin98.png",
		"ⲆⲆΔⲆᐃⲆᐃ": "img/day-hand-skin99.png",
		"ᐃΔΔᐃΔⲆⲆ": "img/night-hand-skin99.png",
		"ᐃⲆᐃᐃⵠΔⵠ": "img/day-hand-skin100.png",
		"ᐃⲆΔⲆⲆⵠⵠ": "img/night-hand-skin100.png",
		"ⵠⲆΔᐃⲆΔᐃ": "img/day-hand-skin101.png",
		"ΔΔΔⲆΔᐃᐃ": "img/night-hand-skin101.png",
		"ⲆⲆⵠⲆᐃⵠᐃ": "img/day-hand-skin102.png",
		"ⲆᐃΔⵠⲆᐃⵠ": "img/night-hand-skin102.png",
		"ᐃΔⲆΔᐃⲆⵠ": "img/day-hand-skin103.png",
		"ΔⵠΔⵠⵠⵠᐃ": "img/night-hand-skin103.png",
		"ⲆⲆᐃᐃᐃᐃᐃ": "img/day-hand-skin104.png",
		"ΔᐃΔᐃᐃⲆⵠ": "img/night-hand-skin104.png",
		"ΔⲆⲆⲆⵠⲆⵠ": "img/day-hand-skin105.png",
		"ᐃᐃⵠⵠⲆⲆᐃ": "img/night-hand-skin105.png",
		"ᐃⵠⵠᐃⲆΔⵠ": "img/day-hand-skin106.png",
		"ΔᐃⲆⲆⲆΔⵠ": "img/night-hand-skin106.png",
		"ᐃΔⲆᐃΔⵠⲆ": "img/day-hand-skin107.png",
		"ᐃᐃᐃⲆⲆⵠⵠ": "img/night-hand-skin107.png",
		"ᐃᐃⵠᐃⵠᐃΔ": "img/day-hand-skin108.png",
		"ⲆΔᐃⵠⵠⵠⲆ": "img/night-hand-skin108.png",
		"ᐃⵠⵠⵠΔᐃⲆ": "img/day-hand-skin109.png",
		"ⵠΔΔᐃᐃⵠⵠ": "img/night-hand-skin109.png",
		"ⲆᐃⲆⲆⲆΔⲆ": "img/day-hand-skin110.png",
		"ⲆᐃᐃⲆⲆⵠᐃ": "img/night-hand-skin110.png",
		"ⵠΔⲆⵠΔΔⵠ": "img/day-hand-skin111.png",
		"ᐃΔᐃⵠⲆᐃΔ": "img/night-hand-skin111.png",
		"ᐃⵠⲆᐃᐃᐃⲆ": "img/day-hand-skin112.png",
		"ⵠᐃⵠⲆⲆΔⲆ": "img/night-hand-skin112.png",
		"ᐃⲆⲆΔⲆΔⲆΔⵠ": "img/day-hand-skin113.png",
		"ⲆⵠⲆⵠΔᐃᐃⲆΔ": "img/night-hand-skin113.png",
		"ᐃᐃΔⵠᐃΔⲆ": "img/day-hand-skin114.png",
		"ΔⲆⲆΔᐃⲆⵠ": "img/night-hand-skin114.png",
		"ΔⲆⵠΔⲆⲆⵠ": "img/day-hand-skin115.png",
		"ᐃᐃΔⵠΔΔⵠ": "img/night-hand-skin115.png",
		"ΔⵠⲆΔⲆᐃΔ": "img/day-hand-skin116.png",
		"ᐃΔⵠᐃⲆᐃⲆ": "img/night-hand-skin116.png",
		"ⲆΔᐃᐃⲆⲆΔ": "img/day-hand-skin117.png",
		"ⵠᐃΔᐃⵠⲆΔ": "img/night-hand-skin117.png",
		"Ⲇᐃᐃⵠᐃⵠᐃ": "img/day-hand-skin118.png",
		"ΔⵠᐃΔⵠⵠⲆ": "img/night-hand-skin118.png",
		"ⵠⵠΔΔΔⲆⵠ": "img/day-hand-skin119.png",
		"ⵠⵠⲆᐃⵠⲆᐃ": "img/night-hand-skin119.png",
		"ⲆⵠᐃⵠΔⲆⵠ": "img/day-hand-skin120.png",
		"ΔⵠᐃⲆᐃᐃᐃ": "img/night-hand-skin120.png",
		"ⲆΔⵠⵠⵠⲆⵠ": "img/day-hand-skin122.png",
		"ΔⵠΔΔᐃΔⵠ": "img/night-hand-skin122.png",
		"ᐃΔⵠⲆᐃⵠᐃ": "img/day-hand-skin122.png",
		"ⲆΔΔⲆⲆΔⵠ": "img/night-hand-skin122.png",
		"ⲆᐃΔⲆⵠⵠΔ": "img/day-hand-skin122.png",
		"ⲆΔᐃΔⵠⵠΔ": "img/night-hand-skin122.png",
		"ᐃⵠΔⵠᐃⵠⲆ": "img/day-hand-skin124.png",
		"ᐃⲆᐃᐃᐃᐃΔ": "img/night-hand-skin124.png",
		"ᐃⲆⵠⲆⵠⵠⲆ": "img/day-hand-skin125.png",
		"ⲆᐃⵠⵠⵠᐃⲆ": "img/night-hand-skin125.png",
		"ⵠᐃⲆᐃⲆⵠⲆ": "img/day-hand-skin126.png",
		"ⲆᐃⲆΔΔⲆⲆ": "img/night-hand-skin126.png",
		"ᐃΔⵠⵠΔᐃⵠ": "img/day-hand-skin127.png",
		"ⲆⲆᐃⵠᐃΔⲆ": "img/night-hand-skin127.png",
		"ⵠΔⵠᐃⵠⵠᐃ": "img/day-hand-skin128.png",
		"ᐃⲆᐃΔᐃⲆⲆ": "img/night-hand-skin128.png",
		"ⵠⲆᐃᐃᐃᐃⵠ": "img/day-hand-skin129.png",
		"ⲆⲆⲆᐃΔᐃⲆ": "img/night-hand-skin129.png",
		"ΔⲆⲆΔᐃΔᐃ": "img/day-hand-skin130.png",
		"ⵠⲆⵠⲆⲆᐃⵠ": "img/night-hand-skin130.png",
		"ⵠⲆΔⵠⲆⲆⲆ": "img/day-hand-skin131.png",
		"ᐃⵠⵠᐃᐃⲆΔ": "img/night-hand-skin131.png",
		"ⲆⲆⵠᐃᐃⵠᐃ": "img/day-hand-skin130.png",
		"ᐃⲆᐃⵠΔⲆΔ": "img/night-hand-skin130.png",
		"ⲆᐃΔᐃᐃⵠⲆ": "img/day-hand-skin133.png",
		"ᐃⲆᐃΔⲆΔᐃ": "img/night-hand-skin133.png",
		"ⵠⲆΔΔⲆⵠᐃ": "img/day-hand-skin134.png",
		"ΔⲆⵠΔⲆΔⲆ": "img/night-hand-skin134.png",
		"ⲆΔⵠⲆⵠⲆᐃ": "img/day-hand-skin135.png",
		"ΔⲆⲆⵠΔΔⵠ": "img/night-hand-skin135.png",
		"ΔΔⲆⲆⵠᐃⵠ": "img/day-hand-skin136.png",
		"ᐃⲆΔᐃᐃᐃⲆ": "img/night-hand-skin136.png",
		"ⲆⵠΔⲆᐃⵠⲆ": "img/day-hand-skin137.png",
		"ⵠᐃⵠΔⵠⵠⲆ": "img/night-hand-skin137.png",
		"ΔⵠΔⲆΔⲆⲆ": "img/day-hand-skin138.png",
		"ⲆᐃᐃᐃⲆᐃᐃ": "img/night-hand-skin138.png",
		"ⵠᐃⲆⲆΔΔᐃ": "img/day-hand-skin139.png",
		"ΔΔᐃⲆᐃᐃΔ": "img/night-hand-skin139.png",
		"ΔᐃᐃΔᐃΔᐃ": "img/day-hand-skin140.png",
		"ⲆⵠⲆⵠⲆⵠᐃ": "img/night-hand-skin140.png",
		"ᐃΔᐃⵠᐃⲆⵠ": "img/day-hand-skin141.png",
		"ᐃⲆⵠΔⲆⵠⲆ": "img/night-hand-skin141.png",
		"ΔΔⵠΔᐃⵠⵠ": "img/day-hand-skin142.png",
		"ΔⲆⲆⲆⲆᐃΔ": "img/night-hand-skin142.png",
		"ⵠⲆⵠⵠⵠⲆⵠ": "img/day-hand-skin143.png",
		"ᐃΔⲆᐃᐃⲆⲆ": "img/night-hand-skin143.png",
		"ΔᐃΔᐃⵠΔΔ": "img/day-hand-skin144.png",
		"ⲆᐃΔᐃΔⵠⲆ": "img/night-hand-skin144.png",
		"ⲆᐃΔᐃⵠⲆΔ": "img/day-hand-skin145.png",
		"ⵠⵠⵠⲆⵠΔⲆ": "img/night-hand-skin145.png",
		"ΔⲆⲆΔΔΔΔ": "img/day-hand-skin146.png",
		"ⲆΔΔⵠᐃᐃⲆ": "img/night-hand-skin146.png",
		"ᐃᐃⲆᐃⵠΔⲆ": "img/day-hand-skin147.png",
		"ⵠᐃⲆΔΔⲆⲆ": "img/night-hand-skin147.png",
		"ᐃΔⲆⵠⵠᐃⲆ": "img/day-hand-skin148.png",
		"ΔΔᐃⵠΔⲆⵠ": "img/night-hand-skin148.png",
		"ᐃᐃΔⵠⵠⲆᐃ": "img/day-hand-skin149.png",
		"ᐃΔⲆⲆᐃΔᐃ": "img/night-hand-skin149.png",
		"ⵠΔᐃΔⵠⲆⵠ": "img/day-hand-skin150.png",
		"ⵠᐃⵠⲆΔⲆⵠ": "img/night-hand-skin150.png",
		"Δⵠᐃᐃᐃᐃᐃ": "img/day-hand-skin151.png",
		"ⵠᐃⲆⵠΔⵠⵠ": "img/night-hand-skin151.png",
		"ⲆΔΔΔⵠⵠⲆ": "img/day-hand-skin152.png",
		"ⲆΔⵠⵠⲆⲆⲆ": "img/night-hand-skin152.png",
		"ⵠΔⲆΔⵠᐃⵠ": "img/day-hand-skin153.png",
		"ᐃⲆⲆᐃΔΔᐃ": "img/night-hand-skin153.png",
		"ᐃⲆⲆⲆΔᐃⲆ": "img/day-hand-skin154.png",
		"ⲆⵠᐃⵠⲆᐃⲆ": "img/night-hand-skin154.png",
		"ⵠΔΔⲆᐃⲆᐃ": "img/day-hand-skin155.png",
		"ⲆⲆᐃⲆΔᐃⲆ": "img/night-hand-skin155.png",
		"ᐃⵠⵠⵠΔⵠⲆ": "img/day-hand-skin156.png",
		"ⲆᐃⲆⵠⲆⵠᐃ": "img/night-hand-skin156.png",
		"ⲆᐃᐃᐃᐃⲆΔ": "img/day-hand-skin157.png",
		"ᐃᐃⵠᐃΔᐃΔ": "img/night-hand-skin157.png",
		"ᐃⲆⲆⲆΔᐃΔ": "img/day-hand-skin158.png",
		"ⵠⵠⵠⵠᐃΔⲆ": "img/night-hand-skin158.png",
		"ΔⵠᐃΔᐃⵠᐃ": "img/day-hand-skin159.png",
		"ᐃᐃᐃᐃⵠⵠⵠ": "img/night-hand-skin159.png",
		"ΔᐃⵠⲆⲆⲆΔ": "img/day-hand-skin160.png",
		"ΔⲆΔⵠᐃΔⲆ": "img/night-hand-skin160.png",
		"ᐃⲆᐃⵠΔⲆⲆ": "img/day-hand-skin161.png",
		"ΔⵠᐃᐃⵠΔⵠ": "img/night-hand-skin161.png",
		"ᐃΔⲆⲆⲆᐃⵠ": "img/day-hand-skin162.png",
		"ΔΔΔᐃⵠᐃⲆ": "img/night-hand-skin162.png",
		"ᐃⵠⵠⵠᐃΔⵠ": "img/day-hand-skin163.png",
		"ⲆΔᐃΔⵠⲆⵠ": "img/night-hand-skin163.png",
		"ⵠⲆᐃΔⵠⲆⲆ": "img/day-hand-skin164.png",
		"ᐃᐃⵠᐃⵠᐃⵠ": "img/night-hand-skin164.png",
		"ᐃΔᐃᐃⵠᐃⵠ": "img/day-hand-skin165.png",
		"ΔᐃⵠⲆΔΔΔ": "img/night-hand-skin165.png",
		"ΔⵠⵠᐃⲆⵠᐃ": "img/day-hand-skin166.png",
		"ᐃΔⲆⲆⵠⵠⵠ": "img/night-hand-skin166.png",
		"ⲆᐃᐃⲆⲆⲆᐃ": "img/day-hand-skin167.png",
		"ΔΔⲆⲆⲆΔⵠ": "img/night-hand-skin167.png",
		"ⵠᐃᐃᐃᐃΔⲆ": "img/day-hand-skin168.png",
		"ⵠᐃⲆΔΔⵠᐃ": "img/night-hand-skin168.png",
		"ⲆⵠⵠⵠⵠᐃΔ": "img/day-hand-skin169.png",
		"ⵠΔⲆΔⲆᐃᐃ": "img/night-hand-skin169.png",
		"ᐃΔᐃᐃⵠⲆⲆ": "img/day-hand-skin170.png",
		"ΔⲆᐃⲆΔᐃⲆ": "img/night-hand-skin170.png",
		"ᐃΔⵠⲆⲆⲆΔ": "img/day-hand-skin171.png",
		"ⵠᐃᐃⲆⵠΔᐃ": "img/night-hand-skin171.png",
		"ᐃΔⲆᐃΔⲆᐃ": "img/day-hand-skin172.png",
		"ⲆΔΔⵠΔΔⲆ": "img/night-hand-skin172.png",
		"ⵠᐃⲆⲆⲆⲆᐃ": "img/day-hand-skin173.png",
		"ΔⲆᐃΔᐃᐃⲆ": "img/night-hand-skin173.png",
		"ᐃΔᐃᐃΔᐃⵠ": "img/day-hand-skin174.png",
		"ᐃΔⲆᐃΔᐃⲆ": "img/night-hand-skin174.png",
		"ⲆᐃⲆᐃⵠᐃⵠ": "img/day-hand-skin175.png",
		"ⲆᐃⲆⲆⵠⲆⲆ": "img/night-hand-skin175.png",
		"ⲆᐃⲆⲆⲆⵠⵠ": "img/day-hand-skin176.png",
		"ᐃⲆΔΔⵠⵠⵠ": "img/night-hand-skin176.png",
		"ⵠᐃⵠᐃⵠᐃⲆ": "img/day-hand-skin177.png",
		"ΔⵠΔⵠᐃⲆⲆ": "img/night-hand-skin177.png",
		"ⲆᐃⵠΔⲆⵠⲆ": "img/day-hand-skin178.png",
		"ᐃᐃΔᐃᐃΔⵠ": "img/night-hand-skin178.png",
		"ⲆᐃΔᐃⲆΔⵠ": "img/day-hand-skin179.png",
		"ⲆⲆⵠᐃᐃⲆⲆ": "img/night-hand-skin179.png",
		"ΔⵠⵠⵠᐃⲆΔ": "img/day-hand-skin180.png",
		"ⵠᐃⵠⵠᐃᐃᐃ": "img/night-hand-skin180.png",
		"ⲆⵠᐃΔⵠᐃᐃ": "img/day-hand-skin181.png",
		"ΔΔⵠΔⲆⲆⲆ": "img/night-hand-skin181.png",
		"ⲆᐃΔⵠΔᐃΔ": "img/day-hand-skin182.png",
		"ⵠᐃⲆⲆᐃᐃⲆ": "img/night-hand-skin182.png",
		"ᐃⲆΔⲆᐃΔᐃ": "img/day-hand-skin183.png",
		"ᐃᐃⲆΔΔⵠΔ": "img/night-hand-skin183.png",
		"ΔᐃᐃⵠⲆΔΔ": "img/day-hand-skin184.png",
		"ⵠⲆΔⵠΔΔΔ": "img/night-hand-skin184.png",
		"ᐃᐃᐃΔΔᐃⵠ": "img/day-hand-skin185.png",
		"ⵠⲆᐃᐃΔⲆⲆ": "img/night-hand-skin185.png",
		"ⲆⲆΔᐃᐃᐃΔ": "img/day-hand-skin186.png",
		"ΔⲆⲆⲆⵠΔⲆ": "img/night-hand-skin186.png",
		"ᐃⵠⵠⵠΔⲆⲆ": "img/day-hand-skin187.png",
		"ⲆⵠᐃⲆᐃⵠⵠ": "img/night-hand-skin187.png",
		"ⲆΔᐃᐃⲆΔⲆ": "img/day-hand-skin188.png",
		"ⲆΔᐃⵠⵠᐃᐃ": "img/night-hand-skin188.png",
		"ΔⲆΔᐃⲆⲆΔ": "img/day-hand-skin189.png",
		"ΔⲆΔⵠⲆⵠⲆ": "img/night-hand-skin189.png",
		"ΔⵠⵠΔⵠⵠⲆ": "img/day-hand-skin190.png",
		"ΔΔⵠⵠᐃᐃⲆ": "img/night-hand-skin190.png",
		"ΔΔⲆΔΔΔⲆ": "img/day-hand-skin191.png",
		"ⲆΔⲆΔΔⲆΔ": "img/night-hand-skin191.png",
		"ⵠΔⲆΔᐃΔⵠ": "img/day-hand-skin192.png",
		"ⵠΔᐃⵠᐃⵠⵠ": "img/night-hand-skin192.png",
		"ⲆΔᐃΔΔᐃᐃ": "img/day-hand-skin193.png",
		"ΔⲆᐃᐃⵠⵠⵠ": "img/night-hand-skin193.png",
		"ⵠⲆΔⲆⲆⲆᐃ": "img/day-hand-skin194.png",
		"ᐃⲆᐃᐃⲆⲆᐃ": "img/night-hand-skin194.png",
		"ᐃᐃᐃΔᐃᐃⲆ": "img/day-hand-skin195.png",
		"ᐃⲆΔΔᐃᐃΔ": "img/night-hand-skin195.png",
		"ⲆᐃΔᐃᐃⵠᐃ": "img/day-hand-skin196.png",
		"ΔΔⲆⲆᐃⵠΔ": "img/night-hand-skin196.png",
		"ⵠᐃⵠΔᐃᐃⵠ": "img/day-hand-skin197.png",
		"ᐃΔⵠΔᐃⲆᐃ": "img/night-hand-skin197.png",
		"ΔⵠⲆⲆᐃⲆⵠ": "img/day-hand-skin198.png",
		"ΔΔᐃΔⵠⵠΔ": "img/night-hand-skin198.png",
		"ⲆⵠΔᐃΔⲆⲆ": "img/day-hand-skin199.png",
		"ⲆⲆΔⲆⲆⲆΔ": "img/night-hand-skin199.png",
		"ΔⲆⵠⵠΔⵠⵠ": "img/day-hand-skin200.png",
		"ᐃⵠΔⵠΔⲆⵠ": "img/night-hand-skin200.png",
		"ⲆⵠⵠⲆⵠᐃᐃ": "img/day-hand-skin201.png",
		"ΔΔΔΔΔⲆᐃ": "img/night-hand-skin201.png",
		"ΔⲆΔⵠⲆᐃⵠ": "img/day-hand-skin202.png",
		"ⵠⵠⲆᐃⵠᐃⲆ": "img/night-hand-skin202.png",
		"ⵠΔΔⵠΔⲆⲆ": "img/day-hand-skin203.png",
		"ΔⲆᐃᐃⵠⲆᐃ": "img/night-hand-skin203.png",
		"ᐃⵠΔⵠⲆᐃᐃ": "img/day-hand-skin204.png",
		"ᐃⲆⲆᐃΔΔⵠ": "img/night-hand-skin204.png",
		"ⲆⲆⵠⲆΔᐃᐃ": "img/day-hand-skin205.png",
		"ΔⲆⲆⲆᐃⲆⵠ": "img/night-hand-skin205.png",
		"ΔᐃⲆⵠⵠⵠⲆ": "img/day-hand-skin206.png",
		"ⲆⵠᐃΔⲆΔⵠ": "img/night-hand-skin206.png",
		"ⲆⲆⲆΔΔΔΔ": "img/day-hand-skin207.png",
		"ᐃⲆᐃⲆⲆⵠⵠ": "img/night-hand-skin207.png",
		"ⲆⵠΔⵠⲆⲆⲆ": "img/day-hand-skin208.png",
		"ⲆᐃⲆⵠᐃⲆⲆ": "img/night-hand-skin208.png",
		"ΔΔⵠⲆⲆⲆΔ": "img/day-hand-skin209.png",
		"ⵠⲆⲆⲆΔᐃᐃ": "img/night-hand-skin209.png",
		"ⲆΔᐃΔΔΔⵠ": "img/day-hand-skin210.png",
		"ᐃⵠⵠΔⵠᐃΔ": "img/night-hand-skin210.png",
		"ᐃⵠⵠⵠᐃⵠᐃ": "img/day-hand-skin211.png",
		"ⲆΔΔⲆⲆᐃΔ": "img/night-hand-skin211.png",
		"ᐃᐃⵠⵠᐃΔⵠ": "img/day-hand-skin212.png",
		"ⲆΔⵠᐃⵠⲆⲆ": "img/night-hand-skin212.png",
		"ⵠⲆⵠΔⲆᐃⵠ": "img/day-hand-skin213.png",
		"ᐃΔⲆΔᐃΔⵠ": "img/night-hand-skin213.png",
		"ⲆΔᐃΔᐃⵠᐃ": "img/day-hand-skin214.png",
		"ᐃⲆⲆⵠⲆⲆⵠ": "img/night-hand-skin214.png",
		"ΔΔᐃᐃⵠⲆⲆ": "img/day-bag-star0.png",
		"ⲆⵠᐃΔΔᐃⲆ": "img/night-bag-star0.png",
		"ΔΔᐃΔⲆⲆᐃ": "img/day-bag0.png",
		"ⵠΔΔⵠⵠⵠⲆ": "img/night-bag0.png",
		"ⲆᐃⵠⲆⵠᐃⲆ": "img/day-bag1.png",
		"ᐃⲆⵠⲆΔⵠⲆ": "img/night-bag1.png",
		"ⲆᐃΔΔⵠᐃᐃ": "img/day-bag2.png",
		"ΔⵠⲆⲆⵠΔⲆ": "img/night-bag2.png",
		"ⵠΔᐃⲆΔΔⵠ": "img/day-bag3.png",
		"ᐃⵠΔᐃⵠᐃᐃ": "img/night-bag3.png",
		"ᐃΔⲆⲆᐃᐃᐃ": "img/day-bag4.png",
		"ⲆΔⲆⵠⲆΔⵠ": "img/night-bag4.png",
		"ΔⲆΔⲆᐃⵠⲆ": "img/day-bag5.png",
		"ᐃΔΔᐃᐃᐃⵠ": "img/night-bag5.png",
		"ⲆᐃᐃΔⲆⲆⵠ": "img/day-bag6.png",
		"ᐃᐃᐃΔᐃⲆΔ": "img/night-bag6.png",
		"ΔΔΔⵠᐃᐃⵠ": "img/day-bag7.png",
		"ⵠⵠᐃⲆⲆΔⵠ": "img/night-bag7.png",
		"ⲆⲆΔⵠΔⲆⵠ": "img/day-bag8.png",
		"ⲆΔᐃⲆΔᐃᐃ": "img/night-bag8.png",
		"ΔⵠⵠⵠΔᐃⵠ": "img/day-bag9.png",
		"ⲆⵠΔΔⲆᐃΔ": "img/night-bag9.png",
		"ⲆᐃⵠΔⲆⲆⲆ": "img/day-bag10.png",
		"ᐃⲆⵠΔⵠⵠΔ": "img/night-bag10.png",
		"ⲆⵠᐃΔΔΔΔ": "img/day-bag11.png",
		"ᐃⵠⵠΔⵠΔΔ": "img/night-bag11.png",
		"ᐃΔᐃΔⲆᐃⲆ": "img/day-bag13.png",
		"ⲆⵠⵠⲆⵠⲆⲆ": "img/night-bag13.png",
		"ΔⵠⲆᐃΔⵠΔ": "img/day-bag14.png",
		"ⵠᐃΔⵠⲆⲆⲆ": "img/night-bag14.png",
		"ⲆᐃⲆᐃⵠⲆΔ": "img/day-bag16.png",
		"ⵠⵠⲆᐃΔⵠⵠ": "img/night-bag16.png",
		"ᐃΔⲆⲆᐃᐃⲆ": "img/day-bag17.png",
		"ᐃⲆᐃⲆⲆⵠΔ": "img/night-bag17.png",
		"ⵠⲆⲆᐃⲆⲆⵠ": "img/day-bag18.png",
		"ΔⵠᐃΔⵠⲆᐃ": "img/night-bag18.png",
		"ⲆⵠΔᐃΔΔΔ": "img/day-bag19.png",
		"ΔΔⲆΔᐃᐃᐃ": "img/night-bag19.png",
		"ΔⵠΔⲆᐃΔᐃ": "img/day-bag20.png",
		"ⵠⵠⲆΔⲆᐃⵠ": "img/night-bag20.png",
		"ⵠΔⲆⵠⲆᐃⵠ": "img/day-bag21.png",
		"ΔΔΔⵠⵠⵠΔ": "img/night-bag21.png",
		"ⵠⵠᐃⲆⵠⲆⵠ": "img/day-bag22.png",
		"ⵠⵠⲆᐃᐃⲆⵠ": "img/night-bag22.png",
		"ᐃⵠⲆΔⲆⵠᐃ": "img/day-bag23.png",
		"ᐃΔⲆΔⲆᐃΔ": "img/night-bag23.png",
		"ΔⵠⵠⵠᐃᐃⲆ": "img/day-bag24.png",
		"ΔⲆⵠᐃΔⵠⵠ": "img/night-bag24.png",
		"ⵠΔᐃⵠⵠᐃᐃ": "img/day-bag25.png",
		"ᐃⵠᐃΔⵠⵠⵠ": "img/night-bag25.png",
		"ⲆⵠΔⵠⵠⵠⲆ": "img/day-bag26.png",
		"ⵠΔⲆⵠⲆΔΔ": "img/night-bag26.png",
		"ᐃᐃᐃⵠᐃΔᐃ": "img/day-bag27.png",
		"ⵠⵠⲆᐃᐃⵠᐃ": "img/night-bag27.png",
		"ⵠΔⵠⲆⵠᐃⵠ": "img/day-bag28.png",
		"ⵠⲆⵠᐃⵠΔⲆ": "img/night-bag28.png",
		"ΔΔᐃΔⵠⵠⲆ": "img/day-bag29.png",
		"ΔΔⲆⲆⵠΔᐃ": "img/night-bag29.png",
		"ᐃᐃΔΔⲆⲆΔ": "img/day-bag30.png",
		"ΔΔᐃΔΔᐃⵠ": "img/night-bag30.png",
		"ⵠΔᐃΔΔᐃⲆ": "img/day-bag31.png",
		"ⵠᐃᐃⵠΔΔⵠ": "img/night-bag31.png",
		"ΔⵠᐃⵠΔᐃΔ": "img/day-bag32.png",
		"ᐃΔᐃⲆⵠⲆᐃ": "img/night-bag32.png",
		"ᐃⲆᐃⵠⵠⵠΔ": "img/day-bag33.png",
		"ⵠᐃⵠⲆᐃⲆⵠ": "img/night-bag33.png",
		"ⲆⵠⲆΔΔᐃᐃ": "img/day-bag34.png",
		"ᐃⲆⵠΔⲆⲆᐃ": "img/night-bag34.png",
		"ⵠᐃⲆᐃⵠⲆⲆ": "img/day-bag35.png",
		"ⵠⵠⲆⵠΔᐃⲆ": "img/night-bag35.png",
		"ⲆᐃᐃΔⵠⵠⲆ": "img/day-bag36.png",
		"ᐃⵠⵠᐃΔⵠΔ": "img/night-bag36.png",
		"ΔⲆᐃⲆΔᐃᐃ": "img/day-bag37.png",
		"ΔⲆⲆⵠΔᐃΔ": "img/night-bag37.png",
		"ᐃⵠⲆⵠⵠᐃᐃ": "img/day-bag38.png",
		"ᐃᐃⲆⲆΔΔᐃ": "img/night-bag38.png",
		"ⲆΔⵠΔⵠᐃⵠ": "img/day-bag39.png",
		"ΔⲆⲆⵠΔⲆⲆ": "img/night-bag39.png",
		"ⵠⵠᐃⵠΔⵠⵠ": "img/day-bag40.png",
		"ⵠΔⲆⵠⲆᐃΔ": "img/night-bag40.png",
		"ⲆΔⲆΔⲆᐃᐃ": "img/day-bag41.png",
		"ΔᐃᐃΔⵠⲆΔ": "img/night-bag41.png",
		"ᐃⵠⵠᐃᐃᐃᐃ": "img/day-bag42.png",
		"ᐃⲆⵠᐃⵠΔⵠ": "img/night-bag42.png",
		"ᐃⲆΔⲆⲆᐃⲆ": "img/day-bag43.png",
		"ⲆᐃⲆᐃⲆᐃⵠ": "img/night-bag43.png",
		"ⲆΔᐃⵠⲆⵠⲆ": "img/day-bag44.png",
		"ⲆⲆⲆⵠⲆⲆᐃ": "img/night-bag44.png",
		"ⵠⲆᐃⵠⵠⲆᐃ": "img/day-bag45.png",
		"ⲆⲆΔⵠⵠⵠⵠ": "img/night-bag45.png",
		"ⵠΔⲆⵠⵠᐃΔ": "img/day-bag46.png",
		"ⲆⵠⲆᐃⲆⲆⵠ": "img/night-bag46.png",
		"ⵠᐃᐃᐃΔᐃᐃ": "img/day-bag47.png",
		"ᐃⲆⲆⵠᐃⵠΔ": "img/night-bag47.png",
		"ᐃᐃⵠⲆⵠⲆΔ": "img/day-bag48.png",
		"ⲆΔⲆΔⲆΔⲆ": "img/night-bag48.png",
		"ⵠⲆⲆᐃᐃᐃⵠ": "img/day-bag49.png",
		"ᐃᐃⲆΔⲆᐃᐃ": "img/night-bag49.png",
		"ⲆΔᐃΔᐃΔΔ": "img/day-bag50.png",
		"ᐃⲆΔᐃᐃᐃᐃ": "img/night-bag50.png",
		"ⵠⵠⲆⲆⵠᐃΔ": "img/day-bag51.png",
		"ⲆΔⲆⲆⲆⲆᐃ": "img/night-bag51.png",
		"ᐃⵠᐃⲆΔᐃΔ": "img/day-bag52.png",
		"ⵠᐃⲆᐃⲆⵠᐃ": "img/night-bag52.png",
		"ᐃᐃⲆΔⲆⵠᐃ": "img/day-bag53.png",
		"ᐃᐃⲆΔᐃⲆΔ": "img/night-bag53.png",
		"ⲆᐃⵠⲆⲆⲆΔ": "img/day-bag54.png",
		"ⵠⲆΔΔⲆⲆⲆ": "img/night-bag54.png",
		"ᐃᐃⵠⵠⵠⵠΔ": "img/day-bag55.png",
		"ᐃΔᐃᐃⲆⵠᐃ": "img/night-bag55.png",
		"ⵠΔᐃⵠΔΔΔ": "img/day-bag56.png",
		"ᐃᐃⲆⵠΔΔⵠ": "img/night-bag56.png",
		"ᐃⵠⲆⵠᐃⵠⵠ": "img/day-bag57.png",
		"ᐃⵠⵠΔⵠⵠᐃ": "img/night-bag57.png",
		"ᐃⵠᐃᐃΔⵠΔ": "img/day-bag58.png",
		"ΔⲆⲆⵠⲆⵠⵠ": "img/night-bag58.png",
		"ⵠᐃΔᐃⵠᐃᐃ": "img/day-bag59.png",
		"ⵠᐃⲆΔᐃⵠⲆ": "img/night-bag59.png",
		"ⲆⲆⲆᐃⵠᐃΔ": "img/day-bag60.png",
		"ΔᐃⵠⲆᐃⵠΔ": "img/night-bag60.png",
		"ΔⵠⲆᐃⲆᐃΔ": "img/day-bag61.png",
		"ΔⲆⵠⵠⵠᐃⵠ": "img/night-bag61.png",
		"ΔⲆΔⲆⵠⵠⲆ": "img/day-bag62.png",
		"ΔᐃΔⲆΔΔⲆ": "img/night-bag62.png",
		"ᐃⵠΔⵠⵠⵠᐃ": "img/day-bag63.png",
		"ⵠᐃⵠΔⵠΔΔ": "img/night-bag63.png",
		"ΔΔΔᐃⲆΔⲆ": "img/day-bag64.png",
		"ΔⵠⵠᐃⵠⲆⲆ": "img/night-bag64.png",
		"ΔⲆᐃⵠᐃⲆⵠ": "img/day-bag65.png",
		"ⲆⲆΔⵠⲆᐃⵠ": "img/night-bag65.png",
		"ⲆⲆΔⵠⵠᐃⵠ": "img/day-bag66.png",
		"ⵠⲆΔᐃⲆΔⲆ": "img/night-bag66.png",
		"ΔΔⵠⵠᐃⲆⲆ": "img/day-bag67.png",
		"ᐃΔⵠΔⲆⵠⵠ": "img/night-bag67.png",
		"ⲆᐃⲆᐃᐃΔᐃ": "img/day-bag68.png",
		"ⲆⲆᐃΔⲆᐃᐃ": "img/night-bag68.png",
		"ᐃⵠⲆᐃᐃⲆⲆ": "img/day-bag69.png",
		"ᐃⵠᐃᐃΔΔⲆ": "img/night-bag69.png",
		"ⲆᐃᐃⵠⲆΔⵠ": "img/day-bag70.png",
		"ⵠⵠⲆⵠⲆΔᐃ": "img/night-bag70.png",
		"ⲆⵠᐃᐃⵠΔⲆ": "img/day-bag71.png",
		"ΔⵠΔΔⲆⵠΔ": "img/night-bag71.png",
		"ᐃⵠΔⲆⵠᐃⲆ": "img/day-bag72.png",
		"ᐃⵠⲆΔΔΔⵠ": "img/night-bag72.png",
		"ΔⲆⲆΔΔⵠⵠ": "img/day-bag73.png",
		"ΔΔⵠⲆⲆΔⲆ": "img/night-bag73.png",
		"ᐃᐃᐃΔⵠⵠⲆ": "img/day-bag74.png",
		"ⵠΔⲆᐃⵠⵠΔ": "img/night-bag74.png",
		"ⵠⵠⵠΔⵠⵠΔ": "img/day-bag75.png",
		"ⵠⲆⵠⵠⵠⲆΔ": "img/night-bag75.png",
		"ΔΔΔⲆⲆⲆᐃ": "img/day-bag76.png",
		"ⵠⲆᐃᐃᐃΔᐃ": "img/night-bag76.png",
		"ⲆⵠⵠⲆΔᐃΔ": "img/day-bag77.png",
		"ⵠⵠΔᐃⲆⲆⵠ": "img/night-bag77.png",
		"ΔⵠⵠΔΔⲆΔ": "img/day-bag78.png",
		"ⵠⲆᐃΔⵠⵠⲆ": "img/night-bag78.png",
		"ΔΔΔⲆⵠⵠⲆ": "img/day-bag79.png",
		"ᐃΔΔⲆᐃⲆⵠ": "img/night-bag79.png",
		"ᐃⲆⲆᐃⲆⲆⲆ": "img/day-bag80.png",
		"ΔⲆⵠΔΔⵠⵠ": "img/night-bag80.png",
		"ΔⵠΔⵠᐃᐃᐃ": "img/day-accessory0.png",
		"ᐃⵠⲆᐃΔⲆⲆ": "img/day-accessory0-pacques.png",
		"Δⵠᐃᐃᐃⵠᐃ": "img/night-accessory0-pacques.png",
		"ΔⵠᐃⵠΔΔⵠ": "img/day-accessory13.png",
		"ⵠᐃⵠΔᐃᐃᐃ": "img/night-accessory13.png",
		"ⵠΔΔⵠᐃⲆⲆ": "img/day-accessory14.png",
		"ᐃⵠᐃΔᐃᐃⲆ": "img/night-accessory14.png",
		"ΔⵠᐃᐃⵠΔᐃ": "img/day-accessory15.png",
		"ⵠⵠᐃᐃΔⵠⲆ": "img/night-accessory15.png",
		"ΔΔᐃⵠⲆⵠⵠ": "img/day-accessory16.png",
		"ⲆⲆᐃΔΔⵠΔ": "img/night-accessory16.png",
		"ⲆᐃΔᐃΔᐃⲆ": "img/day-accessory17.png",
		"ᐃⵠⵠⲆⵠᐃᐃ": "img/day-accessory17.png",
		"ⲆΔⵠᐃᐃⲆᐃ": "img/day-accessory19.png",
		"ⲆΔᐃᐃⵠᐃᐃ": "img/night-accessory19.png",
		"ᐃⲆΔᐃⵠᐃᐃ": "img/day-accessory20.png",
		"ᐃᐃⵠΔᐃΔΔ": "img/night-accessory20.png",
		"ⵠⵠᐃⲆⵠᐃᐃ": "img/day-accessory21.png",
		"ΔⲆᐃⵠΔⵠΔ": "img/night-accessory21.png",
		"ΔⲆᐃΔᐃⲆⲆ": "img/day-accessory22.png",
		"ⲆΔⲆᐃⲆΔⵠ": "img/night-accessory22.png",
		"ⲆᐃΔⵠᐃΔⵠ": "img/day-accessory23.png",
		"ⵠΔⵠⵠⵠΔⵠ": "img/night-accessory23.png",
		"ΔᐃᐃᐃᐃⵠⲆ": "img/day-accessory24.png",
		"ⲆΔᐃᐃᐃⲆⵠ": "img/night-accessory24.png",
		"ᐃΔⵠᐃⲆⵠΔ": "img/day-accessory25.png",
		"ΔᐃⲆᐃΔⲆᐃ": "img/night-accessory25.png",
		"ⲆⲆᐃΔⵠⵠᐃ": "img/day-accessory26.png",
		"ᐃⲆΔⵠΔⲆΔ": "img/night-accessory26.png",
		"ⲆᐃⵠⲆΔᐃⲆ": "img/day-accessory27.png",
		"ΔᐃΔᐃⵠⲆⲆ": "img/night-accessory27.png",
		"ⲆᐃⲆⵠΔⵠΔ": "img/day-accessory18.png",
		"ΔᐃⲆΔⵠⵠΔ": "img/night-accessory18.png",
		"ⲆⲆⲆⵠΔΔᐃ": "img/day-accessory29.png",
		"ΔⵠᐃⲆⵠⵠⲆ": "img/night-accessory29.png",
		"ᐃⵠⲆⲆⲆΔᐃ": "img/day-accessory30.png",
		"ⲆⲆᐃΔⵠⵠⵠ": "img/night-accessory30.png",
		"ΔⲆⵠᐃⲆᐃΔ": "img/day-accessory31.png",
		"ⵠΔⵠᐃᐃΔⲆ": "img/night-accessory31.png",
		"ⲆⵠⲆᐃⵠⵠᐃ": "img/day-accessory32.png",
		"ΔⵠⲆⲆᐃΔᐃ": "img/night-accessory32.png",
		"ⵠⲆⵠⲆᐃⲆᐃ": "img/day-accessory33.png",
		"ΔⵠⵠⲆΔⵠⲆ": "img/night-accessory33.png",
		"ⵠⲆΔⵠⲆᐃⲆ": "img/day-accessory34.png",
		"ᐃⲆⲆᐃᐃⵠᐃ": "img/night-accessory34.png",
		"ⲆΔⲆⵠⲆΔᐃ": "img/day-accessory35.png",
		"ⵠⵠᐃΔⵠⵠⲆ": "img/night-accessory35.png",
		"ⲆΔᐃΔΔΔΔ": "img/day-accessory28.png",
		"ΔᐃⲆΔⵠⲆⵠ": "img/night-accessory28.png",
		"ⲆⲆᐃΔΔⲆⲆ": "img/day-accessory36.png",
		"ᐃᐃⵠⲆⲆᐃⲆ": "img/night-accessory36.png",
		"ᐃⵠᐃⲆΔⵠΔ": "img/day-accessory37.png",
		"ⵠΔᐃᐃⵠΔⲆ": "img/night-accessory37.png",
		"ⵠᐃⵠΔⲆᐃⵠ": "img/day-accessory39.png",
		"ⵠⲆⲆⲆΔᐃⵠ": "img/night-accessory39.png",
		"ΔΔᐃΔⵠᐃΔ": "img/day-accessory40.png",
		"ⵠΔΔⲆⵠΔⵠ": "img/night-accessory40.png",
		"ⵠⵠᐃᐃⵠⵠⲆ": "img/day-accessory41.png",
		"ⲆⵠᐃⲆⲆⲆⵠ": "img/night-accessory41.png",
		"ⲆⲆⵠⵠⲆⵠΔ": "img/day-accessory42.png",
		"ⲆⵠᐃΔᐃᐃᐃ": "img/night-accessory42.png",
		"ΔΔⲆᐃΔᐃⲆ": "img/day-accessory43.png",
		"ⲆᐃⵠᐃⲆⵠΔ": "img/night-accessory43.png",
		"ΔᐃⵠᐃᐃΔΔ": "img/day-accessory44.png",
		"ⲆⵠΔⵠᐃⲆⲆ": "img/night-accessory44.png",
		"ΔⵠⲆΔⵠᐃᐃ": "img/day-accessory38.png",
		"ᐃⵠⲆΔᐃⵠⲆ": "img/night-accessory38.png",
		"ΔⵠⲆⵠᐃΔⵠ": "img/day-accessory46.png",
		"ⵠⲆⵠⲆᐃⲆⲆ": "img/night-accessory46.png",
		"ⵠⲆΔᐃⲆⲆⲆ": "img/day-accessory47.png",
		"ⲆⲆⲆⲆⲆⲆⵠ": "img/night-accessory47.png",
		"ⵠᐃⵠⲆᐃⵠΔ": "img/day-accessory48.png",
		"ᐃⵠᐃⵠΔⵠΔ": "img/night-accessory48.png",
		"ⵠΔᐃΔⲆΔᐃ": "img/day-accessory49.png",
		"ᐃΔⵠⵠⵠΔⲆ": "img/night-accessory49.png",
		"ΔᐃⵠΔᐃⲆΔ": "img/day-accessory45.png",
		"ᐃⲆΔⵠΔⲆⵠ": "img/night-accessory45.png",
		"ᐃΔⵠⲆᐃⵠⲆ": "img/day-accessory50.png",
		"ΔⵠⲆⲆⲆⵠᐃ": "img/night-accessory50.png",
		"ΔΔⲆⲆᐃᐃᐃ": "img/day-accessory51.png",
		"ΔⲆΔΔΔΔⵠ": "img/night-accessory51.png",
		"ⵠⵠⲆⲆΔⲆⲆ": "img/day-accessory52.png",
		"ⲆⲆⵠᐃΔΔⵠ": "img/night-accessory52.png",
		"ⵠⵠⲆᐃᐃᐃⲆ": "img/day-accessory53.png",
		"ⵠΔᐃⲆᐃᐃⵠ": "img/night-accessory53.png",
		"ΔᐃΔᐃⵠΔⲆ": "img/day-accessory54.png",
		"ᐃᐃⵠᐃⵠΔΔ": "img/night-accessory54.png",
		"ⲆⵠᐃⲆⲆⲆᐃ": "img/day-accessory55.png",
		"ⵠⵠΔᐃⵠᐃᐃ": "img/night-accessory55.png",
		"ⲆⲆΔΔⲆΔᐃ": "img/day-accessory56.png",
		"ᐃⵠᐃⲆⲆⲆᐃ": "img/night-accessory56.png",
		"ⵠΔᐃᐃΔⵠⵠ": "img/day-accessory57.png",
		"ᐃⲆⲆΔⲆΔⲆ": "img/night-accessory57.png",
		"ΔᐃⵠᐃᐃⲆᐃ": "img/day-accessory58.png",
		"ᐃⵠⲆⵠΔⲆⵠ": "img/night-accessory58.png",
		"ⵠΔᐃⵠᐃΔⲆ": "img/day-accessory59.png",
		"ⵠⵠⵠᐃᐃᐃᐃ": "img/night-accessory59.png",
		"ⵠᐃᐃᐃᐃⵠⵠ": "img/day-accessory60.png",
		"ⵠᐃΔΔⲆⵠⲆ": "img/night-accessory60.png",
		"ΔΔⲆᐃᐃᐃΔ": "img/day-accessory61.png",
		"ⵠᐃⵠΔⲆⵠᐃ": "img/night-accessory61.png",
		"ΔⵠⲆᐃΔΔᐃ": "img/day-accessory62.png",
		"ᐃΔⲆᐃΔᐃᐃ": "img/night-accessory62.png",
		"ΔⵠⵠΔⲆΔⵠ": "img/day-accessory63.png",
		"ᐃⵠⵠⵠΔⲆⵠ": "img/night-accessory63.png",
		"ⲆⵠΔⵠⲆⲆᐃ": "img/day-accessory64.png",
		"ΔⵠⲆⵠΔᐃᐃ": "img/night-accessory64.png",
		"ⵠⲆΔᐃᐃᐃⵠ": "img/day-accessory65.png",
		"ᐃΔⲆⲆᐃⵠⵠ": "img/night-accessory65.png",
		"ΔᐃᐃΔᐃⲆΔ": "img/day-accessory66.png",
		"ⲆᐃΔⵠΔⲆⵠ": "img/night-accessory66.png",
		"ⲆⵠⵠⲆΔΔⲆ": "img/day-accessory67.png",
		"ΔΔᐃΔⲆⵠΔ": "img/night-accessory67.png",
		"ΔⲆⵠⲆᐃᐃᐃ": "img/day-accessory68.png",
		"ᐃⵠΔᐃᐃΔⵠ": "img/night-accessory68.png",
		"ΔΔΔⲆⲆⵠⵠ": "img/day-accessory69.png",
		"ᐃᐃⲆΔⵠⵠⵠ": "img/night-accessory69.png",
		"ΔΔⲆⵠⵠⲆⲆ": "img/day-accessory70.png",
		"ΔⲆⲆᐃⵠⲆⵠ": "img/night-accessory70.png",
		"ᐃⵠⵠⵠΔΔⵠ": "img/day-accessory71.png",
		"ⵠⵠΔᐃⵠⵠⲆ": "img/night-accessory71.png",
		"ᐃⲆⲆⵠΔΔⲆ": "img/day-accessory72.png",
		"Δᐃᐃⵠⵠⵠⵠ": "img/night-accessory72.png",
		"ⲆⵠⲆᐃΔⵠⲆ": "img/day-accessory73.png",
		"ⲆⵠⵠΔᐃᐃⵠ": "img/night-accessory73.png",
		"ⵠᐃᐃⲆΔᐃⲆ": "img/day-accessory74.png",
		"ΔΔⲆΔⵠⵠⵠ": "img/night-accessory74.png",
		"ᐃᐃⵠΔⲆΔⵠ": "img/day-accessory75.png",
		"ΔⲆⲆⲆⲆⵠᐃ": "img/night-accessory75.png",
		"ⲆᐃⵠⵠⵠⵠΔ": "img/day-accessory76.png",
		"ᐃⲆᐃᐃⵠⲆⲆ": "img/night-accessory76.png",
		"ᐃΔⲆΔᐃⵠᐃ": "img/day-accessory77.png",
		"ΔΔⵠⲆⲆᐃⲆ": "img/night-accessory77.png",
		"ⲆᐃΔⵠΔΔΔ": "img/day-accessory78.png",
		"ᐃⵠΔⲆΔΔᐃ": "img/night-accessory78.png",
		"ⲆⲆᐃΔⲆⲆΔ": "img/day-accessory79.png",
		"ΔΔⲆⲆΔΔΔ": "img/night-accessory79.png",
		"ⵠΔΔΔΔᐃΔ": "img/day-accessory80.png",
		"ΔᐃⲆⲆⵠΔΔ": "img/night-accessory80.png",
		"ⲆᐃᐃⵠΔⵠᐃ": "img/day-accessory81.png",
		"ᐃⲆΔⲆᐃⵠᐃ": "img/night-accessory81.png",
		"ⲆⵠⲆᐃⵠᐃᐃ": "img/day-accessory83.png",
		"ⲆⵠⲆⵠᐃᐃΔ": "img/night-accessory83.png",
		"ⲆⵠᐃΔᐃΔⲆ": "img/day-accessory84.png",
		"ᐃᐃΔⵠΔⵠΔ": "img/night-accessory84.png",
		"ⲆⵠΔⵠⲆΔⵠ": "img/day-accessory85.png",
		"ΔⲆᐃⲆⵠⵠⵠ": "img/night-accessory85.png",
		"ⵠᐃⵠᐃⵠΔⵠ": "img/day-accessory86.png",
		"ᐃᐃΔΔⲆΔⲆ": "img/night-accessory86.png",
		"ᐃΔⵠⵠᐃΔΔ": "img/day-accessory87.png",
		"ΔΔᐃⵠᐃΔΔ": "img/night-accessory87.png",
		"ⲆΔⲆⵠⵠⵠⵠ": "img/day-accessory88.png",
		"ⵠᐃΔⲆᐃⵠΔ": "img/night-accessory88.png",
		"ΔΔᐃᐃⵠΔⵠ": "img/day-accessory89.png",
		"ᐃᐃⲆⲆⵠᐃΔ": "img/night-accessory89.png",
		"ⵠⲆⵠΔᐃⵠᐃ": "img/day-accessory90.png",
		"ΔⵠΔΔΔⲆⲆ": "img/night-accessory90.png",
		"ΔᐃⲆΔⵠΔΔ": "img/day-accessory91.png",
		"ⲆⵠΔΔⵠᐃᐃ": "img/night-accessory91.png",
		"ΔⲆᐃᐃΔⲆⵠ": "img/day-accessory92.png",
		"ΔΔΔⲆⲆᐃⵠ": "img/night-accessory92.png",
		"ΔⲆᐃΔΔⵠⲆ": "img/day-accessory93.png",
		"ⲆΔⲆΔⲆⵠᐃ": "img/night-accessory93.png",
		"ᐃΔⵠᐃⲆⵠᐃ": "img/day-accessory94.png",
		"ᐃᐃΔᐃΔⲆⲆ": "img/night-accessory94.png",
		"ᐃⲆⲆᐃⵠΔᐃ": "img/day-accessory95.png",
		"ΔⲆΔⲆᐃᐃⲆ": "img/night-accessory95.png",
		"ⲆⵠΔⵠⵠΔⵠ": "img/day-accessory96.png",
		"ΔⵠⲆⲆᐃⲆᐃ": "img/night-accessory96.png",
		"ᐃⵠΔᐃΔᐃΔ": "img/day-accessory97.png",
		"ⵠⵠᐃΔΔᐃΔ": "img/night-accessory97.png",
		"ⵠⵠⵠΔΔⵠⵠ": "img/day-accessory98.png",
		"ΔⲆⲆΔᐃⵠⲆ": "img/night-accessory98.png",
		"ᐃⲆⲆΔⵠⲆⵠ": "img/day-accessory99.png",
		"ᐃᐃᐃᐃΔⲆⲆ": "img/night-accessory99.png",
		"ⲆⲆⲆᐃⵠⵠᐃ": "img/day-accessory100.png",
		"ⵠⲆⵠⵠⵠᐃᐃ": "img/night-accessory100.png",
		"ᐃΔⲆΔᐃΔΔ": "img/day-accessory101.png",
		"ΔⵠⵠⵠⵠⲆⵠ": "img/night-accessory101.png",
		"ⲆⲆΔⵠⲆⲆⲆ": "img/day-accessory102.png",
		"ⵠⵠᐃΔⵠᐃⵠ": "img/night-accessory102.png",
		"ΔⵠⵠⲆⵠⲆΔ": "img/day-accessory103.png",
		"ⵠᐃᐃⵠⲆⲆⵠ": "img/night-accessory103.png",
		"ⲆⲆᐃⲆⵠⲆⲆ": "img/day-accessory104.png",
		"ⲆΔΔⲆᐃΔⲆ": "img/night-accessory104.png",
		"ΔⵠⲆⲆⵠΔᐃ": "img/day-accessory105.png",
		"ᐃⵠⵠⲆΔⵠΔ": "img/night-accessory105.png",
		"ⲆⵠΔⵠⵠⲆⵠᐃΔ": "img/day-accessory106.png",
		"ΔⲆΔΔΔᐃⵠᐃⵠ": "img/night-accessory106.png",
		"ⵠΔⲆⲆΔⵠⲆᐃⵠ": "img/day-accessory107.png",
		"ⵠⲆᐃᐃⲆⵠⵠΔⵠ": "img/night-accessory107.png",
		"ⵠΔⵠΔⵠⵠⲆ": "img/day-accessory82.png",
		"ⲆⵠⵠⲆΔⵠⲆ": "img/night-accessory82.png",
		"ᐃΔΔⲆⵠⲆᐃ": "img/day-book0.png",
		"ᐃⲆⵠⵠⲆΔⲆ": "img/night-book0.png",
		"ΔⲆᐃⵠᐃᐃᐃ": "img/day-book1.png",
		"ᐃⲆⲆᐃᐃⲆⵠ": "img/night-book1.png",
		"ⵠⲆⲆΔΔΔⵠ": "img/day-book2.png",
		"ⲆΔᐃΔⲆᐃⵠ": "img/night-book2.png",
		"ⲆᐃᐃⲆΔᐃᐃ": "img/day-book3.png",
		"ΔⵠΔᐃΔⵠΔ": "img/night-book3.png",
		"ⵠᐃΔⲆⵠΔΔ": "img/day-book4.png",
		"ⲆᐃⵠΔⵠᐃⵠ": "img/night-book4.png",
		"ⲆΔⵠⵠΔΔⵠ": "img/day-book5.png",
		"ᐃᐃΔⵠⲆⵠᐃ": "img/night-book5.png",
		"ⲆΔⵠⵠᐃΔᐃ": "img/day-book6.png",
		"ΔⲆⲆΔⲆΔⵠ": "img/night-book6.png",
		"ᐃΔⲆⲆⵠΔⵠ": "img/day-book7.png",
		"ΔᐃΔΔⵠΔⲆ": "img/night-book7.png",
		"ⲆΔⲆᐃᐃⵠᐃ": "img/day-book8.png",
		"ⵠᐃΔⲆⵠᐃᐃ": "img/night-book8.png",
		"ⵠⵠⲆⲆΔᐃΔ": "img/day-book9.png",
		"ⲆⵠⲆΔⲆΔᐃ": "img/night-book9.png",
		"ⵠᐃΔΔΔⲆⵠ": "img/day-book10.png",
		"ᐃⲆⲆΔⲆᐃᐃ": "img/night-book10.png",
		"ⵠⲆᐃΔΔⵠᐃ": "img/day-book11.png",
		"ⵠΔⵠΔᐃΔⲆ": "img/night-book11.png",
		"ⵠΔⵠᐃⵠⵠⲆ": "img/day-book12.png",
		"ΔΔⵠⲆᐃΔᐃ": "img/night-book12.png",
		"ⲆᐃΔⵠΔᐃⲆ": "img/day-book13.png",
		"ⲆΔᐃⲆⵠⲆⲆ": "img/night-book13.png",
		"ⲆΔⲆⲆⵠⲆᐃ": "img/day-book14.png",
		"ΔⲆᐃⲆⵠⲆΔ": "img/night-book14.png",
		"ΔΔᐃΔᐃΔΔ": "img/day-book15.png",
		"ⵠᐃⵠΔⲆᐃⲆ": "img/night-book15.png",
		"ΔⵠΔⵠΔⲆⵠ": "img/day-book16.png",
		"ΔΔⲆΔᐃⲆΔ": "img/night-book16.png",
		"ⲆᐃΔΔΔⲆⵠ": "img/day-book17.png",
		"ΔΔΔᐃⵠⵠⲆ": "img/night-book17.png",
		"ⲆᐃᐃΔΔⲆΔ": "img/day-book18.png",
		"ⲆᐃⲆΔᐃⵠᐃ": "img/night-book18.png",
		"ⲆⵠⲆᐃⵠⲆⵠ": "img/day-book19.png",
		"ⵠⵠⲆⵠⵠᐃᐃ": "img/night-book19.png",
		"ΔᐃⲆᐃⲆᐃⵠ": "img/day-book20.png",
		"ⲆᐃⵠⲆᐃⲆⲆ": "img/night-book20.png",
		"ⵠᐃΔᐃⵠⵠⵠ": "img/day-book21.png",
		"ᐃⲆΔⵠⲆᐃⵠ": "img/night-book21.png",
		"ᐃΔⲆΔⵠⵠΔ": "img/day-book22.png",
		"ⵠⵠⵠᐃΔΔΔ": "img/night-book22.png",
		"ⵠΔᐃⲆⲆⲆΔ": "img/day-book23.png",
		"ⲆΔⲆⵠᐃⵠΔ": "img/night-book23.png",
		"ᐃᐃΔᐃⲆΔΔ": "img/day-book24.png",
		"ⵠⲆᐃⲆⵠⲆⲆ": "img/night-book24.png",
		"ᐃᐃΔⵠⵠᐃΔ": "img/day-book25.png",
		"ⵠⲆⵠⲆⲆⲆΔ": "img/night-book25.png",
		"ⲆⲆⲆⵠᐃⲆⲆ": "img/day-book26.png",
		"ᐃⲆᐃⵠⲆᐃᐃ": "img/night-book26.png",
		"ΔⲆⵠⲆᐃⲆᐃ": "img/day-book27.png",
		"ⲆᐃⵠᐃⲆΔⲆ": "img/night-book27.png",
		"ⲆⵠⲆⵠᐃⲆⵠ": "img/day-book28.png",
		"ⲆᐃⲆᐃⲆΔⲆ": "img/night-book28.png",
		"ⵠᐃⲆⵠΔᐃΔ": "img/day-book29.png",
		"ᐃᐃⲆᐃⲆⲆᐃ": "img/night-book29.png",
		"ᐃⲆⲆⵠⲆΔᐃ": "img/day-book30.png",
		"ᐃΔΔⵠⵠⲆⲆ": "img/night-book30.png",
		"ⲆΔⲆᐃⲆⲆΔ": "img/day-book31.png",
		"ⲆΔᐃᐃⵠⲆⵠ": "img/night-book31.png",
		"ΔⲆⲆⵠΔⵠΔ": "img/day-book32.png",
		"ⲆⵠΔᐃΔⵠⲆ": "img/night-book32.png",
		"ΔᐃΔⵠΔⲆⲆ": "img/day-book33.png",
		"ⵠᐃⲆⲆᐃⵠⲆ": "img/night-book33.png",
		"ᐃⲆᐃᐃⵠⲆⵠ": "img/day-book34.png",
		"ⲆⲆⵠⲆⵠᐃᐃ": "img/night-book34.png",
		"ΔⵠⵠΔΔⲆⲆ": "img/day-book35.png",
		"ⲆⵠⲆΔᐃⵠᐃ": "img/night-book35.png",
		"ᐃΔⵠⵠᐃⵠΔ": "img/day-book36.png",
		"ᐃⲆΔⲆΔⵠΔ": "img/night-book36.png",
		"ⲆⲆᐃᐃᐃⲆⲆᐃΔ": "img/day-book37.png",
		"ⵠΔⵠⵠΔⲆᐃᐃΔ": "img/night-book37.png",
		"ⵠΔΔⵠᐃⵠΔ": "img/day-book38.png",
		"ΔΔᐃⲆⲆⵠᐃ": "img/night-book38.png",
		"ΔⵠⲆⲆΔⵠΔ": "img/day-book39.png",
		"ᐃⵠⲆᐃⲆᐃᐃ": "img/night-book39.png",
		"ᐃᐃᐃᐃΔⵠⲆ": "img/day-book40.png",
		"ⵠΔΔΔⲆΔᐃ": "img/night-book40.png",
		"ⵠⲆⲆΔⵠⵠⲆ": "img/day-book41.png",
		"ᐃᐃΔⵠᐃⵠᐃ": "img/night-book41.png",
		"ΔⲆᐃⵠⵠⵠᐃ": "img/day-book42.png",
		"ⵠⵠⵠΔΔΔⲆ": "img/night-book42.png",
		"ⲆⵠᐃⵠᐃΔΔ": "img/day-book43.png",
		"ⵠΔᐃⵠΔⵠᐃ": "img/night-book43.png",
		"ⲆⵠⲆⵠᐃⲆΔ": "img/day-book44.png",
		"ⵠΔΔΔⵠⵠⵠ": "img/night-book44.png",
		"ᐃⲆΔⲆⵠΔⲆ": "img/day-book45.png",
		"ΔⵠᐃΔᐃⲆⵠ": "img/night-book45.png",
		"ⵠᐃᐃⵠΔⲆΔ": "img/day-book46.png",
		"ⲆⵠⲆⵠⵠⲆⵠ": "img/night-book46.png",
		"ⵠⵠⲆⲆⲆⲆⲆ": "img/day-book47.png",
		"ⲆᐃᐃⲆᐃΔⵠ": "img/night-book47.png",
		"ⲆⲆᐃⵠⲆΔΔ": "img/day-book48.png",
		"ⲆᐃⵠⲆⵠⲆⵠ": "img/night-book48.png",
		"ⵠᐃⵠⲆⵠΔⲆ": "img/day-book49.png",
		"ⵠⲆⵠΔⲆᐃᐃ": "img/night-book49.png",
		"ⵠᐃΔΔΔᐃⲆ": "img/day-book50.png",
		"ⵠⵠΔⵠᐃⲆⲆ": "img/night-book50.png",
		"ⵠⲆⲆⵠⲆⲆᐃ": "img/day-crate1.png",
		"ⲆΔΔⵠⵠⵠᐃ": "img/night-crate1.png",
		"ⲆⲆᐃΔⲆΔΔ": "img/day-crate2.png",
		"ⲆⵠᐃⵠᐃΔᐃ": "img/night-crate2.png",
		"ⲆⵠᐃᐃᐃⲆⵠ": "img/day-crate3.png",
		"ΔΔᐃⵠⵠΔⵠ": "img/night-crate3.png",
		"ⲆᐃⲆΔⵠᐃᐃ": "img/day-crate4.png",
		"ᐃΔⵠⲆⵠⵠⵠ": "img/night-crate4.png",
		"ⲆᐃᐃΔΔΔⲆ": "img/day-crate5.png",
		"ᐃᐃᐃⲆⵠᐃⲆ": "img/night-crate5.png",
		"ΔⲆⲆⵠⲆΔⲆ": "img/day-crate6.png",
		"ΔΔⲆⵠᐃΔΔ": "img/night-crate6.png",
		"ⲆⵠⲆⲆᐃΔΔ": "img/day-crate7.png",
		"ⲆᐃΔⲆⲆⵠⵠ": "img/night-crate7.png",
		"ᐃⵠΔⲆⵠⵠⲆ": "img/day-crate8.png",
		"ⵠᐃᐃⵠᐃⵠΔ": "img/night-crate8.png",
		"ΔᐃᐃⲆᐃⵠⲆ": "img/day-crate9.png",
		"ΔᐃᐃᐃⲆΔⵠ": "img/night-crate9.png",
		"ΔⵠⵠᐃΔⵠᐃ": "img/day-crate10.png",
		"ⵠⲆΔⲆΔⲆΔ": "img/night-crate10.png",
		"ᐃⵠᐃΔΔⲆΔ": "img/day-crate11.png",
		"ᐃⲆᐃⲆΔⵠⵠ": "img/night-crate11.png",
		"ΔⵠᐃᐃⵠⲆᐃ": "img/day-crate12.png",
		"ᐃⵠⵠᐃⵠΔΔ": "img/night-crate12.png",
		"ⲆΔΔᐃᐃᐃΔ": "img/day-crate13.png",
		"ⲆⵠᐃⲆᐃⲆΔ": "img/night-crate13.png",
		"ᐃⲆΔᐃⵠΔⵠ": "img/day-crate14.png",
		"ⵠΔΔⵠⲆⵠⲆ": "img/night-crate14.png",
		"ΔΔⲆᐃⵠⲆⲆ": "img/day-crate15.png",
		"ΔᐃΔΔᐃⲆⲆ": "img/night-crate15.png",
		"ΔᐃᐃⵠⲆⲆΔ": "img/day-crate16.png",
		"ⵠᐃΔᐃΔⲆⲆ": "img/night-crate16.png",
		"ᐃⵠⵠⲆⲆⵠᐃ": "img/day-crate17.png",
		"ⵠΔᐃᐃⲆᐃᐃ": "img/night-crate17.png",
		"ⵠΔᐃΔⲆᐃⵠ": "img/day-crate18.png",
		"ΔΔⵠⲆⵠᐃΔ": "img/night-crate18.png",
		"ΔⵠΔⲆᐃⲆⵠ": "img/day-crate19.png",
		"ᐃΔⲆⵠⲆᐃΔ": "img/night-crate19.png",
		"ⵠΔⵠᐃᐃⲆᐃ": "img/day-crate20.png",
		"ΔΔⵠⵠΔⲆⲆ": "img/night-crate20.png",
		"ⲆΔⵠΔᐃΔΔ": "img/day-crate21.png",
		"ΔᐃⲆⲆⲆᐃⲆ": "img/night-crate21.png",
		"ᐃⵠᐃᐃΔⲆⲆ": "img/day-crate22.png",
		"ΔᐃⵠⵠᐃᐃⲆ": "img/night-crate22.png",
		"ⵠᐃⲆⵠⲆᐃΔ": "img/day-crate23.png",
		"ΔⵠᐃᐃⲆᐃᐃ": "img/night-crate23.png",
		"ⵠᐃⵠΔΔⲆⲆ": "img/day-crate24.png",
		"ΔᐃΔⲆⲆᐃΔ": "img/night-crate24.png",
		"ⵠⲆΔᐃΔⵠΔ": "img/day-crate25.png",
		"ᐃⲆⵠⵠⵠΔΔ": "img/night-crate25.png",
		"ΔᐃᐃΔᐃΔⵠ": "img/day-crate26.png",
		"ΔᐃⵠⵠⲆⵠΔ": "img/night-crate26.png",
		"ⵠΔⵠⵠᐃⲆΔ": "img/day-crate27.png",
		"ⵠⵠⲆⲆⵠⲆΔ": "img/night-crate27.png",
		"ⲆⲆⲆⵠᐃⵠⵠ": "img/day-crate28.png",
		"ᐃᐃᐃⲆΔΔΔ": "img/night-crate28.png",
		"ᐃⵠⵠᐃⵠΔᐃ": "img/day-crate29.png",
		"ᐃᐃΔⲆΔⲆᐃ": "img/night-crate29.png",
		"ΔⵠΔΔᐃᐃᐃ": "img/day-crate30.png",
		"ΔᐃⲆⵠᐃΔΔ": "img/night-crate30.png",
		"ᐃΔᐃΔⲆⲆⲆ": "img/day-crate31.png",
		"ΔΔⲆΔᐃΔⲆ": "img/night-crate31.png",
		"ΔΔᐃᐃᐃⲆΔ": "img/day-crate32.png",
		"ᐃⵠΔⵠⵠⵠΔ": "img/night-crate32.png",
		"ᐃᐃⵠⲆΔⵠΔ": "img/day-crate33.png",
		"ΔΔⵠⲆⵠᐃⲆ": "img/night-crate33.png",
		"ⲆᐃΔⵠⵠⲆⲆ": "img/day-crate34.png",
		"ⲆΔⵠΔΔⵠΔ": "img/night-crate34.png",
		"ᐃⲆⵠⲆⲆⵠΔ": "img/day-crate35.png",
		"ⵠᐃΔᐃΔΔᐃ": "img/night-crate35.png",
		"ⵠⲆΔⲆΔᐃᐃ": "img/day-crate36.png",
		"ΔΔΔΔⵠⲆⲆ": "img/night-crate36.png",
		"ⵠⲆⵠᐃᐃⵠⵠ": "img/day-crate37.png",
		"ᐃⲆΔⲆᐃⲆⵠ": "img/night-crate37.png",
		"ᐃⲆⵠⲆⵠⲆᐃ": "img/day-crate38.png",
		"ΔⲆⲆⲆⲆΔⵠ": "img/night-crate38.png",
		"ΔⲆᐃⲆⲆΔⲆ": "img/day-crate39.png",
		"ⲆΔΔⵠⲆᐃⲆ": "img/night-crate39.png",
		"ᐃΔⲆᐃᐃⲆΔ": "img/day-crate40.png",
		"ᐃᐃᐃⲆΔᐃⵠ": "img/night-crate40.png",
		"ⵠⲆⲆΔΔⵠᐃ": "img/day-crate41.png",
		"ᐃᐃⲆⲆᐃⲆᐃ": "img/night-crate41.png",
		"ⲆΔⲆΔⲆⵠⵠ": "img/day-crate42.png",
		"ΔⵠⲆᐃᐃΔⵠ": "img/night-crate42.png",
		"ⵠᐃⵠⵠΔΔⵠ": "img/day-crate43.png",
		"ᐃⲆⵠⵠΔΔⵠ": "img/night-crate43.png",
		"ΔⲆᐃᐃⲆᐃⲆ": "img/day-crate44.png",
		"ⵠⵠⲆⲆⵠΔᐃ": "img/night-crate44.png",
		"ⲆⵠⲆⲆΔⲆⲆ": "img/day-crate45.png",
		"ⲆᐃⲆⵠΔΔΔ": "img/night-crate45.png",
		"ⲆᐃΔⲆΔⲆΔ": "img/day-crate46.png",
		"ⲆⵠⲆᐃᐃᐃⲆ": "img/night-crate46.png",
		"ⲆⲆⲆⵠⲆⵠΔ": "img/day-crate47.png",
		"ⵠᐃⵠᐃΔⵠⵠ": "img/night-crate47.png",
		"ⵠᐃᐃΔⵠᐃⵠ": "img/day-crate48.png",
		"ΔⲆⲆⵠⵠⲆⲆ": "img/night-crate48.png",
		"ⵠⵠᐃⲆⲆᐃΔ": "img/day-crate49.png",
		"ⲆΔⲆᐃⲆⲆⵠ": "img/night-crate49.png",
		"ⲆⵠᐃΔΔⵠᐃ": "img/day-crate50.png",
		"ᐃᐃⲆΔⵠᐃⵠ": "img/night-crate50.png",
		"ᐃⲆΔⵠΔⲆⲆ": "img/day-crate51.png",
		"ⵠᐃᐃⵠⵠΔᐃ": "img/night-crate51.png",
		"ⵠᐃᐃⲆᐃΔⲆ": "img/day-crate52.png",
		"ⵠᐃΔⵠᐃⲆᐃ": "img/night-crate52.png",
		"ⵠⵠᐃⲆⲆⲆᐃ": "img/day-crate53.png",
		"Δⵠⵠⵠᐃⵠⵠ": "img/night-crate53.png",
		"ⲆⵠⵠΔⲆⵠΔ": "img/day-crate54.png",
		"ⵠΔⵠᐃΔⵠⲆ": "img/night-crate54.png",
		"ⲆΔⲆΔⵠᐃⲆ": "img/day-crate55.png",
		"ⵠⲆΔᐃΔΔΔ": "img/night-crate55.png",
		"ΔΔΔⵠΔⲆⵠ": "img/day-crate56.png",
		"ᐃⵠᐃⲆⵠⵠⵠ": "img/night-crate56.png",
		"ᐃⲆΔΔⲆΔⵠ": "img/day-crate57.png",
		"ⲆⵠⵠΔᐃᐃⲆ": "img/night-crate57.png",
		"ΔⵠⲆⵠⲆⲆⲆ": "img/day-crate58.png",
		"ⲆΔΔⲆⲆΔⲆ": "img/night-crate58.png",
		"ΔⵠⲆᐃⲆΔⲆ": "img/day-crate59.png",
		"ⵠⵠⵠⲆΔⵠⲆ": "img/night-crate59.png",
		"ⲆᐃΔᐃⲆᐃΔ": "img/day-crate60.png",
		"ⵠⲆⵠⵠᐃΔᐃ": "img/night-crate60.png",
		"ⵠᐃᐃΔⵠᐃΔ": "img/day-crate61.png",
		"ⵠᐃᐃΔΔⵠΔ": "img/night-crate61.png",
		"ⵠⵠᐃᐃᐃⲆⵠ": "img/day-crate62.png",
		"ΔⲆΔⲆΔᐃᐃ": "img/night-crate62.png",
		"ΔⵠⲆΔⲆΔᐃ": "img/day-crate63.png",
		"ΔⲆⲆᐃᐃΔⲆ": "img/night-crate63.png",
		"ⲆⲆⲆᐃᐃⵠⵠ": "img/day-crate64.png",
		"ΔΔΔⲆΔⲆΔ": "img/night-crate64.png",
		"ᐃⲆⵠΔⵠⵠⵠ": "img/day-crate65.png",
		"ᐃΔⵠΔᐃⵠΔ": "img/night-crate65.png",
		"ᐃΔΔᐃⵠᐃⵠ": "img/day-crate66.png",
		"ᐃΔⵠⵠᐃᐃⵠ": "img/night-crate66.png",
		"ΔⵠⲆᐃⲆᐃᐃ": "img/day-crate67.png",
		"ΔⲆⲆΔΔⵠΔ": "img/night-crate67.png",
		"ⵠⵠⵠΔᐃⵠⵠ": "img/day-crate68.png",
		"ᐃΔⵠΔᐃⵠⲆ": "img/night-crate68.png",
		"ⵠⵠᐃΔⵠⲆΔ": "img/day-crate69.png",
		"ⲆⲆⵠⲆⲆⲆᐃ": "img/night-crate69.png",
		"ΔΔⵠⵠⵠᐃⵠ": "img/day-crate70.png",
		"ΔⲆⲆᐃΔⵠⵠ": "img/night-crate70.png",
		"ᐃΔⲆᐃⲆᐃᐃ": "img/day-crate71.png",
		"ΔⵠⵠΔⲆⲆᐃ": "img/night-crate71.png",
		"ⵠⲆⲆΔⵠᐃⵠ": "img/day-crate72.png",
		"ΔⵠᐃΔⵠⵠΔ": "img/night-crate72.png",
		"ⵠᐃΔⲆΔⲆⲆ": "img/day-crate73.png",
		"ⲆᐃΔᐃΔᐃⵠ": "img/night-crate73.png",
		"ⲆΔᐃΔⵠⲆⲆ": "img/day-crate74.png",
		"ⵠⲆⲆⵠⲆᐃΔ": "img/night-crate74.png",
		"ⵠΔΔᐃⵠᐃⵠ": "img/day-crate75.png",
		"ᐃⵠΔⲆᐃⲆΔ": "img/night-crate75.png",
		"ⲆⲆⵠⵠⲆⲆⲆ": "img/day-crate76.png",
		"ⵠⵠⲆⵠⲆΔⵠ": "img/night-crate76.png",
		"ΔⲆΔⵠⲆⵠΔ": "img/day-crate77.png",
		"ᐃⵠⵠⵠΔΔⲆ": "img/night-crate77.png",
		"ᐃⲆⵠᐃΔΔⲆ": "img/day-crate78.png",
		"ⲆᐃᐃⵠᐃᐃΔ": "img/night-crate78.png",
		"Ⲇᐃⵠⵠᐃᐃᐃ": "img/day-crate79.png",
		"ⵠΔⵠⲆⲆᐃⲆ": "img/night-crate79.png",
		"ⵠΔⵠⵠᐃᐃⲆ": "img/day-herb0.png",
		"ΔⲆⲆⲆⲆᐃⵠ": "img/day-herb1.png",
		"ⲆⲆᐃⲆΔⲆΔ": "img/day-herb2.png",
		"ⲆΔⲆⵠⵠⵠⲆ": "img/day-herb3.png",
		"ΔⲆⵠⲆᐃᐃⲆ": "img/day-herb4.png",
		"ΔΔⵠΔⲆᐃᐃ": "img/day-herb5.png",
		"ⵠᐃᐃᐃⲆΔⵠ": "img/day-herb6.png",
		"ⵠⵠᐃⲆⲆᐃⲆ": "img/day-herb7.png",
		"ⲆᐃΔⲆⲆᐃΔ": "img/day-herb8.png",
		"ᐃⲆⵠⵠΔᐃⲆ": "img/day-herb9.png",
		"ⲆΔΔⲆⵠΔᐃ": "img/day-herb10.png",
		"ⲆⲆΔΔⵠΔⵠ": "img/day-herb11.png",
		"ΔⵠᐃᐃⲆⲆΔ": "img/day-herb12.png",
		"ᐃΔⵠᐃⵠⵠᐃ": "img/day-herb13.png",
		"ⵠⵠⲆⲆⲆΔᐃ": "img/day-herb14.png",
		"ΔⲆⵠⵠⵠⵠⲆ": "img/day-herb15.png",
		"ᐃᐃⲆⵠᐃⲆᐃ": "img/day-shell0.png",
		"ⲆⵠᐃᐃⵠΔΔ": "img/day-shell1.png",
		"ΔΔⵠᐃⲆⲆΔ": "img/day-shell2.png",
		"ⲆᐃᐃΔⵠᐃⲆ": "img/day-leaf1.png",
		"ⵠⲆⲆⲆⵠΔᐃ": "img/day-leaf2.png",
		"ⵠᐃΔⵠⵠⲆⵠ": "img/day-leaf3.png",
		"ⲆᐃⵠⵠᐃΔⵠ": "img/day-leaf4.png",
		"ΔᐃΔΔΔⵠΔ": "img/day-leaf5.png",
		"ⵠᐃΔⲆⲆΔⲆ": "img/day-leaf6.png",
		"ᐃⵠⲆⵠⲆᐃⲆ": "img/day-leaf7.png",
		"ᐃⲆⲆᐃΔⵠᐃ": "img/day-leaf8.png",
		"ⲆⲆᐃⲆΔᐃⵠ": "img/day-rock0.png",
		"ᐃᐃⵠⲆⵠⲆᐃ": "img/day-rock1.png",
		"ⲆΔⵠᐃΔᐃⵠ": "img/day-rock2.png",
		"ⵠᐃⲆΔⲆⲆΔ": "img/day-rock3.png",
		"ΔⵠⲆⲆΔⲆᐃ": "img/day-rock4.png",
		"ⵠΔᐃᐃᐃⵠⲆ": "img/day-rock5.png",
		"ⲆᐃⲆᐃΔⵠΔ": "img/day-rock6.png",
		"ΔᐃⵠΔᐃΔΔ": "img/day-rock7.png",
		"ⲆⵠΔᐃⵠΔⲆ": "img/day-rock8.png",
		"ⵠΔᐃⵠⵠⲆⲆ": "img/day-rock9.png",
		"ⵠΔⲆᐃⵠⲆⵠ": "img/day-rock10.png",
		"ΔΔᐃΔᐃᐃᐃ": "img/day-rock11.png",
		"ⲆᐃᐃΔᐃᐃⵠ": "img/day-rock12.png",
		"ΔᐃⲆⵠΔⵠⲆ": "img/day-rock13.png",
		"ⵠⵠΔⲆᐃΔΔ": "img/day-flower1.png",
		"ᐃΔΔΔⲆΔⵠ": "img/day-flower2.png",
		"ⲆⵠⲆⲆᐃᐃⲆ": "img/day-flower3.png",
		"ⵠᐃΔⵠΔⵠⵠ": "img/day-flower4.png",
		"ᐃⵠᐃⵠⲆⲆⲆ": "img/day-flower5.png",
		"ΔⵠⵠᐃⵠΔΔ": "img/day-flower6.png",
		"ΔᐃⲆΔᐃΔⵠ": "img/day-flower7.png",
		"ΔΔⵠⲆⲆΔⵠ": "img/day-flower8.png",
		"ᐃⵠᐃⲆⲆⲆΔ": "img/day-flower9.png",
		"ΔᐃⲆⵠⵠⲆΔ": "img/day-herb16.png",
		"ⲆᐃⵠᐃᐃΔᐃ": "img/day-herb17.png",
		"ᐃᐃⵠⵠΔⲆⵠ": "img/day-herb18.png",
		"ⵠᐃⲆⲆⵠⵠⲆ": "img/day-herb19.png",
		"ᐃᐃΔᐃΔⵠᐃ": "img/day-herb20.png",
		"ΔᐃⵠΔΔΔⵠ": "img/day-herb21.png",
		"ⲆⵠⲆⵠΔᐃⲆ": "img/night-herb0.png",
		"ⵠᐃᐃⵠⵠᐃᐃ": "img/night-herb1.png",
		"ⵠⵠᐃⵠⵠᐃΔ": "img/night-herb2.png",
		"ⲆⲆⵠᐃⵠⵠⲆ": "img/night-herb3.png",
		"ΔᐃⲆⵠⵠⲆⲆ": "img/night-herb4.png",
		"ⲆΔᐃⲆΔΔᐃ": "img/night-herb5.png",
		"ⲆᐃⵠⲆᐃΔᐃ": "img/night-herb6.png",
		"ⲆᐃⲆᐃΔΔΔ": "img/night-herb7.png",
		"ΔᐃⵠᐃⵠΔⲆ": "img/night-herb8.png",
		"ⲆᐃᐃᐃⲆΔΔ": "img/night-herb9.png",
		"ΔⲆⵠᐃᐃⵠᐃ": "img/night-herb10.png",
		"ⲆᐃⲆⲆⲆⵠⲆ": "img/night-herb11.png",
		"ΔᐃΔⲆΔⵠΔ": "img/night-herb12.png",
		"ᐃⵠΔⲆⵠⲆⵠ": "img/night-herb13.png",
		"ΔⲆⵠΔⲆⵠᐃ": "img/night-herb14.png",
		"ⲆᐃⲆᐃⵠⵠⲆ": "img/night-herb15.png",
		"ΔᐃⲆⲆΔΔᐃ": "img/night-shell0.png",
		"ΔⲆΔⵠᐃΔΔ": "img/night-shell1.png",
		"ΔᐃⵠⵠᐃΔⵠ": "img/night-shell2.png",
		"ᐃΔᐃⵠΔᐃⵠ": "img/night-leaf1.png",
		"ΔΔⲆⵠΔᐃᐃ": "img/night-leaf2.png",
		"ᐃⵠⲆᐃⲆᐃⵠ": "img/night-leaf3.png",
		"ΔᐃᐃⲆΔⲆⵠ": "img/night-leaf4.png",
		"ⲆΔⵠⲆᐃᐃΔ": "img/night-leaf5.png",
		"ⲆΔᐃⵠΔΔⵠ": "img/night-leaf6.png",
		"ᐃⵠΔΔⲆⵠΔ": "img/night-leaf7.png",
		"ⵠⲆⵠΔⲆΔⵠ": "img/night-leaf8.png",
		"ⲆᐃⲆⵠᐃΔⲆ": "img/night-rock0.png",
		"ⵠᐃⲆⲆᐃⲆᐃ": "img/night-rock1.png",
		"ᐃⲆΔⲆᐃᐃᐃ": "img/night-rock2.png",
		"ΔⵠᐃⵠⲆⲆⵠ": "img/night-rock3.png",
		"ⲆᐃᐃⲆᐃᐃⲆ": "img/night-rock4.png",
		"ΔⵠⲆⲆΔᐃΔ": "img/night-rock5.png",
		"ᐃΔⲆΔⵠⲆⲆ": "img/night-rock6.png",
		"ΔᐃⲆΔⲆⵠᐃ": "img/night-rock7.png",
		"ⲆΔⵠⵠΔΔΔ": "img/night-rock8.png",
		"ΔᐃᐃᐃΔⲆᐃ": "img/night-rock9.png",
		"ⵠⵠΔΔᐃᐃΔ": "img/night-rock10.png",
		"ⵠⲆΔΔⲆⵠΔ": "img/night-rock11.png",
		"ⵠⲆⲆᐃΔⵠⲆ": "img/night-rock12.png",
		"ᐃⵠΔⲆⲆⲆᐃ": "img/night-rock13.png",
		"ΔᐃᐃΔⲆⵠⵠ": "img/night-flower1.png",
		"ΔⲆⲆⵠΔΔΔ": "img/night-flower2.png",
		"ⵠⵠⲆΔⵠΔⲆ": "img/night-flower3.png",
		"ⵠΔᐃΔᐃⵠⵠ": "img/night-flower4.png",
		"ΔᐃⲆⲆⵠⵠⲆ": "img/night-flower5.png",
		"ΔⵠᐃⲆⲆⲆⲆ": "img/night-flower6.png",
		"ᐃᐃⲆᐃᐃⲆᐃ": "img/night-flower7.png",
		"ᐃΔⵠΔΔⵠᐃ": "img/night-flower8.png",
		"ᐃΔΔΔⵠΔⲆ": "img/night-flower9.png",
		"ΔⵠᐃⲆΔΔⵠ": "img/night-herb16.png",
		"ⲆⲆⲆⵠΔⲆⲆ": "img/night-herb17.png",
		"ΔⲆⵠⵠᐃⵠⲆ": "img/night-herb18.png",
		"ⵠΔΔⲆⲆⲆᐃ": "img/night-herb19.png",
		"ⲆⲆⵠⵠΔᐃⵠ": "img/night-herb20.png",
		"ⲆⲆⲆΔⲆΔΔ": "img/night-herb21.png",
		"ᐃⲆⵠΔᐃⵠᐃ": "img/day-river000-010-000.png",
		"ᐃⲆⲆΔᐃⵠΔ": "img/day-river000-010-010.png",
		"ᐃᐃⵠΔⵠᐃⵠ": "img/day-river000-011-000.png",
		"ᐃΔⵠⵠΔⵠΔ": "img/day-river000-011-010.png",
		"ΔᐃᐃⲆΔⲆᐃ": "img/day-river000-011-011.png",
		"ᐃⵠⲆΔᐃⵠᐃ": "img/day-river000-110-000.png",
		"ⵠⲆⲆⵠⵠΔⲆ": "img/day-river000-110-010.png",
		"ΔⲆⵠΔⵠΔⲆ": "img/day-river000-110-110.png",
		"ᐃΔⵠΔΔⲆⵠ": "img/day-river000-111-000.png",
		"ⵠᐃⵠᐃⵠⵠᐃ": "img/day-river000-111-010.png",
		"ⲆΔⵠⲆΔΔΔ": "img/day-river000-111-011.png",
		"ᐃᐃⵠⵠΔⲆΔ": "img/day-river000-111-110.png",
		"ΔΔⲆᐃⲆᐃΔ": "img/day-river000-111-111.png",
		"ⲆᐃΔⲆΔⲆⲆ": "img/day-river010-010-000.png",
		"ᐃᐃΔⲆⵠΔΔ": "img/day-river010-010-010.png",
		"ⵠᐃᐃⲆΔᐃΔ": "img/day-river010-011-000.png",
		"ΔⵠΔⲆⲆⲆΔ": "img/day-river010-011-010.png",
		"ⵠⵠⵠⲆⲆⵠⲆ": "img/day-river010-011-011.png",
		"ⲆᐃΔⵠⲆⲆΔ": "img/day-river010-110-000.png",
		"ⵠᐃⲆᐃⵠᐃᐃ": "img/day-river010-110-010.png",
		"ⵠΔΔⲆⲆᐃΔ": "img/day-river010-110-110.png",
		"ⵠⵠⵠⲆᐃⲆᐃ": "img/day-river010-111-000.png",
		"ᐃⵠᐃⵠⲆⵠΔ": "img/day-river010-111-010.png",
		"ᐃⲆΔΔⵠⲆⲆ": "img/day-river010-111-011.png",
		"ᐃΔᐃΔΔᐃⲆ": "img/day-river010-111-110.png",
		"ᐃΔᐃⵠⵠΔⵠ": "img/day-river010-111-111.png",
		"ᐃᐃᐃᐃΔᐃᐃ": "img/day-river011-011-000.png",
		"ᐃᐃΔᐃⵠⲆⵠ": "img/day-river011-011-010.png",
		"ⲆⵠΔᐃᐃᐃᐃ": "img/day-river011-011-011.png",
		"ᐃΔᐃⲆⵠΔⲆ": "img/day-river011-111-000.png",
		"ΔΔⲆᐃⲆⲆⲆ": "img/day-river011-111-010.png",
		"ⲆⲆᐃⵠᐃⲆⵠ": "img/day-river011-111-011.png",
		"ⵠᐃΔⲆⵠⲆΔ": "img/day-river011-111-110.png",
		"ᐃⵠᐃᐃⵠΔⲆ": "img/day-river011-111-111.png",
		"ᐃΔᐃᐃᐃΔⵠ": "img/day-river110-110-000.png",
		"ⵠᐃⵠⲆⲆⵠᐃ": "img/day-river110-110-010.png",
		"ⲆᐃⵠΔⲆⵠⵠ": "img/day-river110-110-110.png",
		"ⵠᐃΔᐃⲆⲆᐃ": "img/day-river110-111-000.png",
		"ΔᐃΔⲆⲆⲆⵠ": "img/day-river110-111-010.png",
		"ⵠⵠⲆᐃⵠΔⲆ": "img/day-river110-111-011.png",
		"ⲆⵠΔⵠⲆⲆⵠ": "img/day-river110-111-110.png",
		"ΔᐃΔⵠⵠᐃⵠ": "img/day-river110-111-111.png",
		"ᐃᐃⲆΔᐃⵠᐃ": "img/day-river111-111-011.png",
		"ᐃⵠΔΔΔⲆⵠ": "img/day-river111-111-110.png",
		"ᐃᐃⲆΔᐃⵠᐃ": "img/day-river111-111-011.png",
		"ⵠᐃΔⲆⵠΔⲆ": "img/day-river111-111-000.png",
		"ⲆⵠⵠⵠⵠΔⲆ": "img/day-river111-111-111.png",
		"ᐃⵠᐃⵠΔⵠᐃ": "img/day-river111-111-010.png",
		"ᐃⲆⵠΔᐃⵠΔ": "img/night-river000-010-000.png",
		"ᐃᐃⵠⵠᐃᐃΔ": "img/night-river000-010-010.png",
		"ᐃΔⵠⲆᐃΔΔ": "img/night-river000-011-000.png",
		"ⲆΔⵠΔⵠΔΔ": "img/night-river000-011-010.png",
		"ΔⲆⲆⲆΔⲆΔ": "img/night-river000-011-011.png",
		"ΔᐃⲆΔΔᐃⵠ": "img/night-river000-110-000.png",
		"ⲆΔⵠⲆⵠΔⲆ": "img/night-river000-110-010.png",
		"ΔΔⲆⵠⲆⵠⵠ": "img/night-river000-110-110.png",
		"ⲆⲆᐃᐃΔᐃΔ": "img/night-river000-111-000.png",
		"ΔΔⲆⲆⵠⵠΔ": "img/night-river000-111-010.png",
		"ΔⲆⲆⲆΔⲆᐃ": "img/night-river000-111-011.png",
		"ᐃᐃⲆΔⵠΔΔ": "img/night-river000-111-110.png",
		"ⲆΔⵠⲆⲆᐃᐃ": "img/night-river000-111-111.png",
		"ΔᐃⲆⵠⲆΔᐃ": "img/night-river010-010-000.png",
		"ⵠⵠⵠⲆⲆΔⲆ": "img/night-river010-010-010.png",
		"ᐃⵠⵠⲆΔᐃΔ": "img/night-river010-011-000.png",
		"ⵠΔⲆⲆᐃⵠΔ": "img/night-river010-011-010.png",
		"ᐃᐃⵠᐃⵠⲆΔ": "img/night-river010-011-011.png",
		"ⲆⲆᐃⵠⵠᐃⲆ": "img/night-river010-110-000.png",
		"ⲆⵠᐃⲆⲆⵠⵠ": "img/night-river010-110-010.png",
		"ⵠᐃⲆⵠⲆΔΔ": "img/night-river010-110-110.png",
		"ᐃΔⵠⲆⵠⵠᐃ": "img/night-river010-111-000.png",
		"ⵠΔᐃΔᐃΔᐃ": "img/night-river010-111-010.png",
		"ⵠⲆⲆⵠᐃᐃⲆ": "img/night-river010-111-011.png",
		"ᐃⲆᐃⵠΔᐃᐃ": "img/night-river010-111-110.png",
		"ⵠⵠΔⵠᐃΔΔ": "img/night-river010-111-111.png",
		"ⲆⲆⲆΔⵠⵠᐃ": "img/night-river011-011-000.png",
		"ⵠⵠΔᐃᐃᐃᐃ": "img/night-river011-011-010.png",
		"ⵠⲆΔⲆᐃⵠⵠ": "img/night-river011-011-011.png",
		"ΔⲆⲆᐃⵠⲆᐃ": "img/night-river011-111-000.png",
		"ΔΔⵠΔⲆⵠⵠ": "img/night-river011-111-010.png",
		"ⲆᐃᐃⵠⲆⲆᐃ": "img/night-river011-111-011.png",
		"ⵠⲆⵠⲆΔⵠΔ": "img/night-river011-111-110.png",
		"ⵠⲆⵠⵠΔᐃⵠ": "img/night-river011-111-111.png",
		"ΔᐃⵠΔⲆⵠΔ": "img/night-river110-110-000.png",
		"ⵠᐃΔᐃΔᐃⲆ": "img/night-river110-110-010.png",
		"Ⲇⵠᐃⵠᐃᐃᐃ": "img/night-river110-110-110.png",
		"ᐃΔⲆⵠⲆΔΔ": "img/night-river110-111-000.png",
		"ᐃⲆᐃⲆᐃⵠⲆ": "img/night-river110-111-010.png",
		"ⲆᐃΔᐃΔⵠᐃ": "img/night-river110-111-011.png",
		"ⵠⵠⲆᐃΔⲆⲆ": "img/night-river110-111-110.png",
		"ⲆΔⵠᐃⲆⵠΔ": "img/night-river110-111-111.png",
		"ⵠⵠΔⵠΔᐃΔ": "img/night-river111-111-011.png",
		"ᐃⵠⵠᐃᐃᐃⵠ": "img/night-river111-111-110.png",
		"ⵠⵠΔⵠΔᐃΔ": "img/night-river111-111-011.png",
		"ΔᐃⲆΔΔΔⲆ": "img/night-river111-111-000.png",
		"ⲆⲆⵠᐃᐃⲆΔ": "img/night-river111-111-111.png",
		"ᐃΔᐃⲆᐃᐃⵠ": "img/night-river111-111-010.png",
		"ᐃⲆⵠΔΔⲆᐃ": "img/day-pebblecompo1.png",
		"ΔΔΔᐃᐃ": "img/day-pebblecompo2.png",
		"Ⲇⵠⵠᐃᐃ": "img/day-pebblecompo3.png",
		"ᐃⵠⵠᐃⵠⵠⵠ": "img/day-pebblecompo4.png",
		"ⲆᐃΔⲆⵠ": "img/day-pebblecompo5.png",
		"ⵠΔΔⵠᐃ": "img/day-pebblecompo6.png",
		"ⵠⵠⵠⵠᐃ": "img/day-pebblecompo7.png",
		"ⲆⲆΔᐃᐃΔⵠ": "img/day-pebblecompo8.png",
		"ΔΔᐃᐃᐃᐃⲆ": "img/day-pebblecompo9.png",
		"ΔΔΔⲆΔⵠΔ": "img/day-pebblecompo10.png",
		"ⵠᐃⲆⵠᐃ": "img/day-pebblecompo11.png",
		"ⲆⵠᐃᐃΔΔᐃ": "img/day-pebblecompo12.png",
		"ⲆⵠΔᐃⵠΔΔ": "img/day-pebblecompo13.png",
		"ⵠⲆⲆⲆΔⲆⵠ": "img/day-pebblecompo14.png",
		"ΔΔΔⵠᐃΔΔ": "img/day-pebblecompo15.png",
		"ᐃⲆⵠⵠⲆΔⵠ": "img/day-pebblecompo16.png",
		"ΔᐃⲆᐃΔ": "img/day-pebblecompo17.png",
		"ᐃⲆᐃΔᐃᐃᐃ": "img/day-pebblecompo18.png",
		"ⵠᐃⵠⵠⵠΔΔ": "img/day-pebblecompo19.png",
		"ᐃⵠⲆⲆⵠ": "img/day-pebblecompo20.png",
		"ΔΔΔᐃⵠ": "img/day-pebblecompo21.png",
		"ⲆⵠⲆᐃⵠⲆΔ": "img/day-pebblecompo22.png",
		"ΔᐃⵠᐃΔᐃᐃ": "img/day-pebblecompo23.png",
		"ⲆⵠᐃⲆΔᐃᐃ": "img/day-pebblecompo24.png",
		"ⲆΔᐃⵠⲆ": "img/day-pebblecompo25.png",
		"ΔᐃᐃᐃΔ": "img/day-pebblecompo26.png",
		"ⲆⲆⵠᐃΔⲆⲆ": "img/day-pebblecompo27.png",
		"ⵠΔᐃⲆⲆ": "img/day-pebblecompo28.png",
		"ᐃᐃΔᐃΔΔⲆ": "img/night-pebblecompo1.png",
		"ᐃⵠⵠΔΔ": "img/night-pebblecompo2.png",
		"ⵠΔᐃⲆΔ": "img/night-pebblecompo3.png",
		"ⵠΔⵠΔⵠⲆΔ": "img/night-pebblecompo4.png",
		"ⵠᐃⲆΔⵠ": "img/night-pebblecompo5.png",
		"ᐃⲆⵠΔᐃ": "img/night-pebblecompo6.png",
		"Ⲇᐃⵠᐃⵠ": "img/night-pebblecompo7.png",
		"ⵠⵠⵠᐃⵠⲆⵠ": "img/night-pebblecompo8.png",
		"ⲆΔΔⵠⲆΔⲆ": "img/night-pebblecompo9.png",
		"ΔⵠΔⲆⵠᐃⵠ": "img/night-pebblecompo10.png",
		"ᐃᐃᐃᐃⲆ": "img/night-pebblecompo11.png",
		"ⵠⵠΔΔᐃΔⵠ": "img/night-pebblecompo12.png",
		"ⲆΔΔⲆᐃⲆΔ": "img/night-pebblecompo13.png",
		"ᐃⲆⵠΔⲆΔⵠ": "img/night-pebblecompo14.png",
		"ⲆΔⵠⵠⲆⵠᐃ": "img/night-pebblecompo15.png",
		"ⲆΔⵠᐃⵠᐃⲆ": "img/night-pebblecompo16.png",
		"ⵠⵠⵠΔᐃ": "img/night-pebblecompo17.png",
		"ᐃⲆⲆᐃⲆΔⵠ": "img/night-pebblecompo18.png",
		"ⲆᐃΔⵠΔⵠΔ": "img/night-pebblecompo19.png",
		"ΔΔᐃⲆⲆ": "img/night-pebblecompo20.png",
		"ᐃΔⲆᐃⵠ": "img/night-pebblecompo21.png",
		"ⵠΔΔⵠΔⵠⵠ": "img/night-pebblecompo22.png",
		"ⲆᐃΔⵠⲆᐃⲆ": "img/night-pebblecompo23.png",
		"ᐃⵠΔΔⵠᐃᐃ": "img/night-pebblecompo24.png",
		"ΔⵠⲆΔᐃ": "img/night-pebblecompo25.png",
		"ΔΔΔΔⵠ": "img/night-pebblecompo26.png",
		"ΔᐃΔᐃΔΔᐃ": "img/night-pebblecompo27.png",
		"ⲆᐃΔΔΔ": "img/night-pebblecompo28.png",
		"ⵠⵠⵠⲆⵠᐃⲆ": "img/day-baby-mammoth.png",
		"ΔⵠᐃⵠⲆⵠᐃ": "img/day-baby-mammoth-tamed.png",
		"ⲆⵠⵠⵠΔᐃⲆ": "img/day-baby-mammoth-angry.png",
		"ᐃⲆⲆⲆΔΔⲆ": "img/night-baby-mammoth.png",
		"ᐃΔΔⲆΔΔΔ": "img/night-baby-mammoth-tamed.png",
		"ᐃⵠΔⵠⲆⲆⲆ": "img/night-baby-mammoth-angry.png",
		"ΔᐃᐃΔⵠᐃΔ": "img/inv-mammoth-out.png",
		"ⵠⵠᐃΔΔΔⵠ": "img/inv-mammoth-in.png",
		"ΔⵠⲆⵠⵠᐃᐃ": "img/inv-mammoth-click.png",
		"ᐃΔⲆⵠⵠⲆᐃ": "img/hurt-baby-mammoth.png",
		"ⲆⲆⵠⵠⵠⵠΔ": "img/baby-mammoth-step.png",
		"ᐃⲆΔⲆᐃⲆⲆ": "img/day-flower-hat.png",
		"ΔⵠⲆⲆᐃᐃᐃ": "img/night-flower-hat.png",
		"ᐃⲆᐃΔΔΔⲆ": "img/inv-flower-hat-out.png",
		"ⵠΔⵠΔⲆⵠΔ": "img/inv-flower-hat-in.png",
		"ⵠⲆΔⲆᐃΔΔ": "img/inv-flower-hat-click.png",
		"ΔᐃᐃⲆᐃⵠΔ": "img/day-fur-hat.png",
		"ⲆⲆΔⲆΔⲆᐃ": "img/night-fur-hat.png",
		"ⵠⲆΔΔΔⲆΔ": "img/inv-fur-hat-out.png",
		"ᐃⵠᐃⵠΔΔΔ": "img/inv-fur-hat-in.png",
		"ⲆΔⲆⵠⲆⵠⵠ": "img/inv-fur-hat-click.png",
		"ⲆᐃⵠΔⲆᐃᐃ": "img/day-mammoth.png",
		"ⲆᐃΔⲆᐃⲆΔ": "img/night-mammoth.png",
		"ⲆΔᐃⵠⵠΔⲆ": "img/hurt-mammoth.png",
		"ⵠⵠᐃⲆΔⲆΔ": "img/inv-mammoth-fur-out.png",
		"ⲆᐃᐃⲆΔᐃⵠ": "img/inv-mammoth-fur-in.png",
		"ⵠⲆⲆᐃΔᐃⲆ": "img/inv-mammoth-fur-click.png",
		"ⲆⵠΔᐃⵠⵠΔ": "img/inv-wood-bow-out.png",
		"ΔΔⵠΔΔᐃⵠ": "img/inv-wood-bow-in.png",
		"ᐃⵠΔᐃⲆⵠⲆ": "img/inv-wood-bow-click.png",
		"ⲆΔⲆⲆΔΔⲆ": "img/inv-wood-arrow-out.png",
		"ΔᐃΔⲆⵠᐃⲆ": "img/inv-wood-arrow-in.png",
		"ᐃΔⲆⲆΔⵠⲆ": "img/inv-wood-arrow-click.png",
		"ᐃⵠΔᐃⵠⲆΔ": "img/day-wood-bow2.png",
		"ⵠⵠⵠΔⵠᐃᐃ": "img/night-wood-bow2.png",
		"ΔⵠⵠⲆᐃᐃᐃ": "img/day-wood-arrow.png",
		"ᐃΔⲆⲆΔΔⵠ": "img/night-wood-arrow.png",
		"ⵠᐃⲆⵠᐃⲆⵠ": "img/inv-stone-bow-out.png",
		"ⲆᐃᐃᐃᐃⲆᐃ": "img/inv-stone-bow-in.png",
		"ᐃⲆⲆⵠΔᐃᐃ": "img/inv-stone-bow-click.png",
		"ᐃΔΔᐃᐃⵠⵠ": "img/inv-stone-arrow-out.png",
		"ⵠΔᐃᐃⲆⵠⵠ": "img/inv-stone-arrow-in.png",
		"ΔⲆⵠᐃⲆΔⵠ": "img/inv-stone-arrow-click.png",
		"ᐃⵠᐃⵠΔⲆᐃ": "img/day-stone-bow.png",
		"ᐃᐃⲆΔⵠⲆⲆ": "img/night-stone-bow.png",
		"ΔⲆⲆᐃⲆⵠΔ": "img/day-stone-arrow.png",
		"ΔⵠᐃⲆⵠⲆΔ": "img/night-stone-arrow.png",
		"ⲆⵠΔⲆΔᐃΔ": "img/inv-gold-bow-out.png",
		"ΔΔᐃᐃⲆΔΔ": "img/inv-gold-bow-in.png",
		"ⵠᐃⵠΔΔΔᐃ": "img/inv-gold-bow-click.png",
		"ᐃΔᐃⲆⲆⲆᐃ": "img/inv-gold-arrow-out.png",
		"ΔⲆⵠΔⵠⲆⲆ": "img/inv-gold-arrow-in.png",
		"ᐃΔⲆΔⵠⲆⵠ": "img/inv-gold-arrow-click.png",
		"ΔⵠΔⲆᐃᐃⲆ": "img/day-gold-bow.png",
		"ⲆⵠⵠᐃᐃᐃⲆ": "img/night-gold-bow.png",
		"ᐃⵠⵠⲆⲆᐃⵠ": "img/day-gold-arrow.png",
		"ⵠᐃᐃΔᐃⲆⵠ": "img/night-gold-arrow.png",
		"ⲆⲆⵠⲆⲆᐃⲆ": "img/inv-diamond-bow-out.png",
		"ᐃΔⲆⵠᐃⲆᐃ": "img/inv-diamond-bow-in.png",
		"ⲆΔΔⵠⵠΔⵠ": "img/inv-diamond-bow-click.png",
		"ⲆΔᐃᐃⵠⲆᐃ": "img/inv-diamond-arrow-out.png",
		"ⵠⲆᐃᐃΔⲆΔ": "img/inv-diamond-arrow-in.png",
		"ⵠᐃⵠΔⵠΔⵠ": "img/inv-diamond-arrow-click.png",
		"ΔΔΔⲆⲆᐃᐃ": "img/day-diamond-bow.png",
		"ᐃⵠⲆⵠⵠⵠΔ": "img/night-diamond-bow.png",
		"ⵠⲆⵠⵠᐃᐃΔ": "img/day-diamond-arrow.png",
		"ⵠᐃΔᐃᐃⵠᐃ": "img/night-diamond-arrow.png",
		"ⵠⵠⲆⵠᐃΔⲆ": "img/inv-amethyst-bow-out.png",
		"ΔⲆⲆΔⵠⲆⲆ": "img/inv-amethyst-bow-in.png",
		"ⲆⵠⲆΔᐃᐃᐃ": "img/inv-amethyst-bow-click.png",
		"ⲆΔᐃΔΔⲆⲆ": "img/inv-amethyst-arrow-out.png",
		"ⵠⲆᐃΔᐃᐃᐃ": "img/inv-amethyst-arrow-in.png",
		"ΔΔⵠⲆΔΔⵠ": "img/inv-amethyst-arrow-click.png",
		"ⲆΔΔⵠΔᐃᐃ": "img/day-amethyst-bow.png",
		"ᐃΔⵠΔᐃᐃᐃ": "img/night-amethyst-bow.png",
		"Δⵠⵠⵠᐃᐃᐃ": "img/day-amethyst-arrow.png",
		"ⲆΔⲆⲆⵠᐃΔ": "img/night-amethyst-arrow.png",
		"ᐃΔⲆᐃⵠⵠΔ": "img/inv-dragon-bow-out.png",
		"ⲆⵠⲆⲆΔΔⵠ": "img/inv-dragon-bow-in.png",
		"ΔⵠᐃⵠⲆᐃΔ": "img/inv-dragon-bow-click.png",
		"ⲆⵠⲆΔᐃΔᐃ": "img/inv-dragon-arrow-out.png",
		"ⵠᐃᐃⲆⵠᐃΔ": "img/inv-dragon-arrow-in.png",
		"ᐃⵠΔᐃⵠΔᐃ": "img/inv-dragon-arrow-click.png",
		"ΔⵠⵠᐃΔⲆⵠ": "img/day-dragon-bow.png",
		"ΔᐃⵠᐃⲆⲆⵠ": "img/night-dragon-bow.png",
		"ⲆⲆⵠᐃΔⲆΔ": "img/day-dragon-arrow.png",
		"ΔΔⵠⵠⲆⲆⲆ": "img/night-dragon-arrow.png",
		"ΔΔΔⲆⵠΔΔ": "img/inv-reidite-bow-out.png",
		"ΔᐃⵠⲆΔⵠⵠ": "img/inv-reidite-bow-in.png",
		"ΔⲆⵠᐃⵠΔⵠ": "img/inv-reidite-bow-click.png",
		"ᐃⵠΔⲆⲆᐃⲆ": "img/inv-reidite-arrow-out.png",
		"ΔⲆⵠᐃᐃⲆΔ": "img/inv-reidite-arrow-in.png",
		"ᐃⲆⲆⵠⲆⵠΔ": "img/inv-reidite-arrow-click.png",
		"ⵠΔⲆⲆⲆⲆᐃ": "img/day-reidite-bow.png",
		"ⲆΔⵠⲆᐃⵠⲆ": "img/night-reidite-bow.png",
		"ΔⲆⵠΔⵠΔΔ": "img/day-reidite-arrow.png",
		"ᐃᐃⲆΔΔⲆᐃ": "img/night-reidite-arrow.png",
		"ᐃⵠᐃⵠⵠΔⲆ": "img/inv-wooden-axe-out.png",
		"ΔΔⵠᐃⲆᐃⲆ": "img/inv-wooden-axe-in.png",
		"Δⵠᐃⵠᐃⵠⵠ": "img/inv-wooden-axe-click.png",
		"ⵠⵠΔⲆⲆΔΔ": "img/day-wooden-axe.png",
		"ᐃΔⲆᐃΔΔⲆ": "img/night-wooden-axe.png",
		"ⵠⵠⵠᐃⵠⲆᐃ": "img/inv-stone-axe-out.png",
		"ⵠⲆⵠⵠⵠΔⵠ": "img/inv-stone-axe-in.png",
		"ᐃⲆᐃΔⵠΔᐃ": "img/inv-stone-axe-click.png",
		"ⲆⲆΔΔⵠⵠΔ": "img/day-stone-axe.png",
		"ᐃΔⲆⵠⲆⵠⲆ": "img/night-stone-axe.png",
		"ΔΔΔⵠⲆⲆⵠ": "img/inv-golden-axe-out.png",
		"ⲆΔⲆᐃΔⵠⲆ": "img/inv-golden-axe-in.png",
		"ᐃᐃᐃⲆΔΔⵠ": "img/inv-golden-axe-click.png",
		"ⵠΔΔΔᐃⲆΔ": "img/day-golden-axe.png",
		"ⲆΔⲆΔΔⲆⲆ": "img/night-golden-axe.png",
		"ΔΔⲆᐃⵠᐃⵠ": "img/inv-diamond-axe-out.png",
		"ᐃⲆᐃΔⲆᐃᐃ": "img/inv-diamond-axe-in.png",
		"ΔᐃΔⲆⵠΔⵠ": "img/inv-diamond-axe-click.png",
		"ᐃᐃⲆΔⲆᐃΔ": "img/day-diamond-axe.png",
		"ⵠᐃⲆᐃᐃᐃᐃ": "img/night-diamond-axe.png",
		"ⵠΔⵠⲆΔᐃⵠ": "img/inv-amethyst-axe-out.png",
		"ⲆᐃᐃΔⵠⵠⵠ": "img/inv-amethyst-axe-in.png",
		"ΔⵠⵠᐃⵠⵠⲆ": "img/inv-amethyst-axe-click.png",
		"ⲆᐃΔᐃΔΔⵠ": "img/day-amethyst-axe.png",
		"ᐃᐃⲆᐃΔⲆⲆΔⲆ": "img/night-amethyst-axe.png",
		"ⵠᐃⵠⲆᐃΔΔⲆᐃ": "img/inv-reidite-axe-out.png",
		"ΔᐃⲆΔⲆΔⲆⲆⵠ": "img/inv-reidite-axe-in.png",
		"ΔⲆⲆΔⲆⲆΔⵠⵠ": "img/inv-reidite-axe-click.png",
		"ⵠΔΔⵠⲆΔⲆⲆⲆ": "img/day-reidite-axe.png",
		"ΔᐃΔⵠⵠⲆᐃΔⵠ": "img/night-reidite-axe.png",
		"ⵠⲆⵠᐃΔⵠΔ": "img/bandage-activated.png",
		"ⲆΔᐃΔᐃΔᐃ": "img/auto-feed.png",
		"ⲆⵠᐃΔΔᐃᐃ": "img/stop-regeneration.png",
		"ⲆᐃⲆΔΔΔⲆ": "img/stop-regeneration2.png",
		"ΔΔⵠΔⲆΔⲆⵠᐃ": "img/day-wood-platform.png",
		"ⵠⲆΔᐃΔⵠⲆᐃⵠ": "img/night-wood-platform.png",
		"ⵠΔⲆΔᐃⵠⵠⲆⲆ": "img/inv-wood-platform-in.png",
		"ⲆⲆΔΔΔⲆⲆⵠΔ": "img/inv-wood-platform-out.png",
		"ΔⲆⲆⵠⲆⲆᐃⲆΔ": "img/inv-wood-platform-click.png",
		"ⵠⲆⵠⵠⵠᐃᐃⲆΔ": "img/day-wood-shield.png",
		"ⲆᐃⵠᐃⲆΔΔᐃΔ": "img/night-wood-shield.png",
		"ⲆⲆⲆⵠΔⵠᐃᐃΔ": "img/day-stone-shield.png",
		"ⲆΔΔⵠⵠⵠⵠⵠᐃ": "img/night-stone-shield.png",
		"ΔΔΔⵠⲆⵠΔⵠⵠ": "img/day-gold-shield.png",
		"ⲆᐃⲆΔⲆⲆᐃΔΔ": "img/night-gold-shield.png",
		"ᐃⵠΔⲆᐃⲆᐃⲆΔ": "img/day-diamond-shield.png",
		"ΔⵠΔΔⵠᐃⲆᐃⵠ": "img/night-diamond-shield.png",
		"ⵠᐃᐃⵠⵠᐃΔΔⲆ": "img/day-amethyst-shield.png",
		"ⵠᐃΔᐃⵠΔΔⵠΔ": "img/night-amethyst-shield.png",
		"ΔⲆᐃᐃⲆⲆᐃⲆΔ": "img/day-reidite-shield.png",
		"ⲆⵠⲆⵠᐃᐃⵠⵠᐃ": "img/night-reidite-shield.png",
		"ΔⵠⲆⲆᐃΔᐃᐃᐃ": "img/inv-wood-shield-in.png",
		"ⵠⲆᐃᐃⲆⵠⲆΔⲆ": "img/inv-wood-shield-out.png",
		"ⲆⵠᐃⲆⵠⲆᐃⲆⵠ": "img/inv-wood-shield-click.png",
		"ⵠΔΔΔᐃᐃⲆᐃᐃ": "img/inv-stone-shield-in.png",
		"ⲆΔⵠᐃᐃⵠᐃⲆⲆ": "img/inv-stone-shield-out.png",
		"ᐃΔⵠⵠⲆΔⵠⲆⵠ": "img/inv-stone-shield-click.png",
		"ⲆᐃᐃΔΔⲆΔⲆᐃ": "img/inv-gold-shield-in.png",
		"ⵠᐃⵠⵠΔΔΔⵠᐃ": "img/inv-gold-shield-out.png",
		"ᐃᐃᐃΔΔΔⵠΔΔ": "img/inv-gold-shield-click.png",
		"ᐃΔΔⵠΔⵠΔΔΔ": "img/inv-diamond-shield-in.png",
		"ΔⲆΔΔⲆⵠᐃⵠΔ": "img/inv-diamond-shield-out.png",
		"ᐃⲆᐃᐃᐃⲆⲆᐃΔ": "img/inv-diamond-shield-click.png",
		"ⲆⲆⲆⲆΔΔᐃⲆⲆ": "img/inv-amethyst-shield-in.png",
		"ⵠⵠΔⲆΔΔΔΔᐃ": "img/inv-amethyst-shield-out.png",
		"ⵠΔᐃⲆⲆᐃⲆΔᐃ": "img/inv-amethyst-shield-click.png",
		"ⵠⲆΔᐃⵠΔⲆΔⵠ": "img/inv-reidite-shield-in.png",
		"ⲆᐃⲆᐃⵠⲆΔⲆⲆ": "img/inv-reidite-shield-out.png",
		"ⵠΔᐃΔⲆΔⵠᐃᐃ": "img/inv-reidite-shield-click.png",
		"ⲆⲆⲆⵠᐃᐃᐃᐃⵠ": "img/day-machete.png",
		"ⵠᐃⲆᐃΔᐃⵠⲆⲆ": "img/night-machete.png",
		"ⵠᐃᐃΔᐃⵠᐃⵠⵠ": "img/inv-machete-in.png",
		"ᐃᐃⵠΔⲆᐃᐃⲆΔ": "img/inv-machete-out.png",
		"ⵠⲆⵠᐃⵠΔᐃⵠⲆ": "img/inv-machete-click.png"
	};
	ⲆΔⵠᐃᐃᐃⲆ = [{}];
	ⲆΔⵠᐃᐃᐃⲆ[ΔᐃΔ].stringify = function(ΔⵠⵠᐃΔⵠⲆ) {
		var ⵠᐃᐃᐃⵠᐃᐃ = new Uint8Array(new ArrayBuffer(ΔⵠⵠᐃΔⵠⲆ.length));
		for (var Δᐃ = 0; ΔⵠⵠᐃΔⵠⲆ.length > Δᐃ; Δᐃ++) ⵠᐃᐃᐃⵠᐃᐃ[Δᐃ] = ΔⵠⵠᐃΔⵠⲆ[Δᐃ];
		return ⵠᐃᐃᐃⵠᐃᐃ
	};
	ΔⲆΔⲆΔΔⵠ = {};
	ⵠⲆⲆⲆⲆΔⵠⵠᐃ = {};
	const ⲆᐃᐃΔΔᐃⵠ = ᐃⵠᐃⲆⵠⲆⲆ;
	for (var Δᐃ in ΔⲆ) ΔⲆΔⲆΔΔⵠ[Δᐃ] = ΔⲆ[Δᐃ];

	function ⵠΔⵠᐃⲆⲆᐃ(ⲆΔΔⲆΔ) {
		return ⲆⲆⲆΔΔⲆⲆ(ⲆΔΔⲆΔ, 42473, 64053, 59247, 43327, 41089)
	}

	function ⵠᐃᐃⲆⵠⵠΔⲆⵠ(ᐃΔⵠΔⵠΔΔ, ΔΔⵠᐃᐃΔⲆ, ⵠΔᐃⵠΔᐃᐃ, ᐃⵠⲆᐃΔᐃⵠ, ⲆᐃᐃⲆᐃᐃΔ, ΔⵠⲆⵠⲆᐃⲆ) {
		ⲆᐃⲆᐃᐃᐃᐃ(ᐃΔⲆⲆᐃ, ᐃΔⵠΔⵠΔΔ, ΔΔⵠᐃᐃΔⲆ, ⵠΔᐃⵠΔᐃᐃ, ᐃⵠⲆᐃΔᐃⵠ, ⲆᐃᐃⲆᐃᐃΔ, ΔⵠⲆⵠⲆᐃⲆ);
		const ᐃⲆⵠⵠΔΔΔΔᐃ = ⲆⲆᐃᐃⵠΔᐃ(ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[ᐃΔⵠΔ], ᐃⲆⵠᐃ[ⲆᐃⵠⲆ], ᐃⲆⵠᐃ[ᐃΔΔⵠ]);
		const ⲆⵠⲆⲆΔᐃΔⲆᐃ = ⵠΔᐃΔΔⲆΔ(ᐃⲆⵠᐃ[ᐃᐃΔΔ], ᐃⲆⵠᐃ[5], ᐃⲆⵠᐃ[ⵠⲆᐃ], ᐃⲆⵠᐃ[ⲆΔᐃΔ]);
		const ᐃⲆΔᐃⲆᐃᐃⲆⵠ = ((ᐃⲆⵠⵠΔΔΔΔᐃ ^ ⲆⵠⲆⲆΔᐃΔⲆᐃ) + 41392) % 65525;
		return ᐃⲆΔᐃⲆᐃᐃⲆⵠ
	}
	const ⲆⵠⵠΔᐃ = ⲆΔΔⵠⵠ;
	Ⲇⵠ = [];
	const sprite = Ⲇⵠ;
	sprite[1e4] = [new Image];
	sprite[10001] = [new Image];
	sprite[10002] = [new Image];
	sprite[10003] = [new Image];
	sprite[10004] = [new Image];
	sprite[10005] = [new Image];
	sprite[10006] = [new Image];
	sprite[10007] = [new Image];
	sprite[10008] = [new Image];
	sprite[10009] = [new Image];
	sprite[10010] = [new Image];
	sprite[10011] = [new Image];
	sprite[10012] = [new Image];
	sprite[10013] = [new Image];
	sprite[10014] = [new Image];
	sprite[10015] = [new Image];
	sprite[10016] = [new Image];
	sprite[10017] = [new Image];
	sprite[10018] = [new Image];
	sprite[10019] = [new Image];
	sprite[10020] = [new Image];
	sprite[10021] = [new Image];
	sprite[10022] = [new Image];
	sprite[10023] = [new Image];
	sprite[10024] = [new Image];
	sprite[10025] = [new Image];
	sprite[10026] = [new Image];
	sprite[10027] = [new Image];
	sprite[10028] = [new Image];
	sprite[10029] = [new Image];
	sprite[10030] = [new Image];
	sprite[10031] = [new Image];
	sprite[10032] = [new Image];
	sprite[10033] = [new Image];
	sprite[10034] = [new Image];
	sprite[10035] = [new Image];
	const switchColoredSpikesTextures = () => {
		switch (Settings.ColoredSpikes.textures) {
			case "1": {
				sprite[1e4][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-ally.png";
				sprite[10001][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-enemy.png";
				sprite[10002][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-ally.png";
				sprite[10003][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-enemy.png";
				sprite[10004][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-ally.png";
				sprite[10005][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-enemy.png";
				sprite[10006][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-ally.png";
				sprite[10007][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-enemy.png";
				sprite[10008][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-ally.png";
				sprite[10009][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-enemy.png";
				sprite[10010][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-ally.png";
				sprite[10011][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-enemy.png";
				sprite[10012][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood2.png";
				sprite[10013][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood1.png";
				sprite[10014][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone1.png";
				sprite[10015][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone2.png";
				sprite[10016][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold2.png";
				sprite[10017][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold1.png";
				sprite[10018][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond2.png";
				sprite[10019][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond1.png";
				sprite[10020][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst1.png";
				sprite[10021][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst2.png";
				sprite[10022][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite2.png";
				sprite[10023][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite1.png";
				sprite[10024][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-door-ally.png";
				sprite[10025][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-door-enemy.png";
				sprite[10026][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-door-ally.png";
				sprite[10027][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-door-enemy.png";
				sprite[10028][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-door-ally.png";
				sprite[10029][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-door-enemy.png";
				sprite[10030][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-door-ally.png";
				sprite[10031][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-door-enemy.png";
				sprite[10032][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-door-ally.png";
				sprite[10033][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-door-enemy.png";
				sprite[10034][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-door-ally.png";
				sprite[10035][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-door-enemy.png"
			};
			break;
			case "2": {
				sprite[1e4][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-enemy.png.111.png?raw=true";
				sprite[10001][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-enemy.png12312.png?raw=true";
				sprite[10002][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-ally.png312312.png?raw=true";
				sprite[10003][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-enemy.1213png1.png?raw=true";
				sprite[10004][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-ally.png?raw=true";
				sprite[10005][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-enemy.png1.png1.png?raw=true";
				sprite[10006][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-ally%20remaster%20by%20hersgori.png?raw=true";
				sprite[10007][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-enemy.png1132.png1.png?raw=true";
				sprite[10008][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-ally1.png?raw=true";
				sprite[10009][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-enemy.png1.png?raw=true";
				sprite[10010][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-all1232y.png?raw=true";
				sprite[10011][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-enemy.png123.png1.png?raw=true";
				sprite[10012][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood2.png";
				sprite[10013][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood1.png";
				sprite[10014][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone1.png";
				sprite[10015][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone2.png";
				sprite[10016][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold2.png";
				sprite[10017][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold1.png";
				sprite[10018][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond2.png";
				sprite[10019][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond1.png";
				sprite[10020][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst1.png";
				sprite[10021][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst2.png";
				sprite[10022][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite2.png";
				sprite[10023][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite1.png";
				sprite[10024][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-door-ally.png?raw=true";
				sprite[10025][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-door-enemy.png?raw=true";
				sprite[10026][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-door-ally.png?raw=true";
				sprite[10027][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-door-enemy.png?raw=true";
				sprite[10028][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-door-ally.png?raw=true";
				sprite[10029][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-door-enemy.png?raw=true";
				sprite[10030][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-door-ally.png?raw=true";
				sprite[10031][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-door-enemy.png?raw=true";
				sprite[10032][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-door-ally.png?raw=true";
				sprite[10033][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-door-enemy.png?raw=true";
				sprite[10034][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-door-ally%20remastered%20by%20hersgori.png?raw=true";
				sprite[10035][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-door-enemy.png?raw=true"
			};
			break
		}
	};
	switchColoredSpikesTextures();
	sprite[1e4][1] = sprite[1e4][0];
	sprite[10001][1] = sprite[10001][0];
	sprite[10002][1] = sprite[10002][0];
	sprite[10003][1] = sprite[10003][0];
	sprite[10004][1] = sprite[10004][0];
	sprite[10005][1] = sprite[10005][0];
	sprite[10006][1] = sprite[10006][0];
	sprite[10007][1] = sprite[10007][0];
	sprite[10008][1] = sprite[10008][0];
	sprite[10009][1] = sprite[10009][0];
	sprite[10010][1] = sprite[10010][0];
	sprite[10011][1] = sprite[10011][0];
	sprite[10012][1] = sprite[10012][0];
	sprite[10013][1] = sprite[10013][0];
	sprite[10014][1] = sprite[10014][0];
	sprite[10015][1] = sprite[10015][0];
	sprite[10016][1] = sprite[10016][0];
	sprite[10017][1] = sprite[10017][0];
	sprite[10018][1] = sprite[10018][0];
	sprite[10019][1] = sprite[10019][0];
	sprite[10020][1] = sprite[10020][0];
	sprite[10021][1] = sprite[10021][0];
	sprite[10022][1] = sprite[10022][0];
	sprite[10023][1] = sprite[10023][0];
	sprite[10024][1] = sprite[10024][0];
	sprite[10025][1] = sprite[10025][0];
	sprite[10026][1] = sprite[10026][0];
	sprite[10027][1] = sprite[10027][0];
	sprite[10028][1] = sprite[10028][0];
	sprite[10029][1] = sprite[10029][0];
	sprite[10030][1] = sprite[10030][0];
	sprite[10031][1] = sprite[10031][0];
	sprite[10032][1] = sprite[10032][0];
	sprite[10033][1] = sprite[10033][0];
	sprite[10034][1] = sprite[10034][0];
	sprite[10035][1] = sprite[10035][0];
	const ⵠᐃⵠⲆⲆ = ⵠΔΔΔⲆ;
	ⵠⲆⲆ = {};
	ⵠⲆⲆ.ⲆⲆⵠΔΔ = ⲆΔⵠΔ;
	const ⵠΔΔΔⵠ = ⲆⵠΔΔⵠ;
	ⵠⲆⲆ.ᐃⲆΔⲆ = ⲆΔᐃΔ;
	ⵠⲆⲆ.ᐃⵠᐃᐃ = ᐃᐃᐃᐃ;
	ⵠⲆⲆ.ᐃⵠⵠᐃ = 3;
	const ⵠⲆⲆⲆ = ⲆΔᐃ;
	ⵠⲆⲆ.ⵠⲆᐃᐃ = ⲆⵠⲆⲆⲆ;
	const ᐃⵠⲆⵠᐃᐃⲆᐃⲆ = ᐃΔⲆⵠᐃᐃⵠ;
	ⵠⲆⲆ.ᐃΔⲆᐃ = ΔΔⵠΔ;
	const ⵠᐃᐃⲆⲆΔⲆᐃⲆ = ⲆⲆⵠΔᐃ;
	ⵠⲆⲆ.Ⲇⵠⵠᐃ = ΔⲆⵠΔΔ;
	ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ = ⲆΔΔᐃΔ;
	const ⲆⲆΔⲆᐃΔⲆ = ᐃⲆΔΔⲆ;
	ⵠⲆⲆ.ΔⲆᐃⵠᐃ = ΔΔⲆⵠⵠ;
	const ᐃⵠⵠΔᐃΔᐃ = ΔᐃⲆΔᐃ;
	ᐃᐃⵠⵠ = {};
	Δⵠⵠⵠ = [];
	ⵠΔᐃΔⵠΔⲆ = function(ⲆᐃⲆⲆΔΔⲆ, ⵠᐃ) {
		for (var Δᐃ = ⵠⲆᐃ; Δᐃ < ⲆᐃⲆⲆΔΔⲆ.length; Δᐃ++) {
			if (ⵠᐃ === ⲆᐃⲆⲆΔΔⲆ[Δᐃ].id) return Δᐃ
		}
		return -ⲆⵠⲆ
	};
	const ⲆⲆⲆᐃ = ⲆΔᐃΔ;
	var ⲆᐃⲆⵠⲆᐃᐃ = [];

	function ΔⵠᐃΔⵠ(ᐃⵠⵠⵠ, ⲆⵠⲆᐃᐃ) {
		for (var Δᐃ = 0; ⲆᐃⲆⵠⲆᐃᐃ.length > Δᐃ; Δᐃ += ⲆⵠⲆᐃᐃ) {
			var ⵠᐃⵠ = ⲆᐃⲆⵠⲆᐃᐃ[Δᐃ];
			if (ᐃⵠⵠⵠ === ⵠᐃⵠ[0]) ΔΔᐃⲆⵠΔΔᐃⵠ(ⵠᐃⵠ[0], ⵠᐃⵠ[ⵠΔΔ], ⵠᐃⵠ[ⲆⲆⵠᐃ], ⵠᐃⵠ[ᐃⲆᐃⲆ])
		}
	}
	const ΔᐃΔⲆ = ΔⲆᐃⲆ;

	function ⵠⵠⲆᐃΔΔⲆΔᐃ() {
		ΔⵠᐃΔⵠ(Δ[361], 1);
		ΔⵠᐃΔⵠ(Δ[544], 20);
		ΔⵠᐃΔⵠ(Δ[526], ⲆⵠⲆ);
		ΔⵠᐃΔⵠ("c", ⲆΔⲆⵠ);
		ΔⵠᐃΔⵠ("s", ⵠΔⲆ);
		ΔⵠᐃΔⵠ("f", ⲆⲆⲆᐃ);
		ΔⵠᐃΔⵠ("p", 1);
		ΔⵠᐃΔⵠ("g", 1);
		ΔⵠᐃΔⵠ("d", 1);
		ΔⵠᐃΔⵠ("a", 1);
		ΔⵠᐃΔⵠ(Δ[156], 1);
		ΔⵠᐃΔⵠ("m", ΔⲆΔᐃ);
		ⲆᐃⲆⵠⲆᐃᐃ = []
	}
	const ⲆⲆⲆᐃⲆⲆⲆ = ⵠⲆΔⲆΔ;

	function ⵠⲆΔΔⲆⵠᐃΔᐃ(ᐃⵠⵠⵠ, ΔⲆⵠⲆΔ, Δᐃ, ᐃΔⵠⵠ) {
		ⲆᐃⲆⵠⲆᐃᐃ.push([ᐃⵠⵠⵠ, ΔⲆⵠⲆΔ, Δᐃ, ᐃΔⵠⵠ])
	}

	function ΔΔᐃⲆⵠΔΔᐃⵠ(ᐃⵠⵠⵠ, ΔⲆⵠⲆΔ, Δᐃ, ᐃΔⵠⵠ) {
		var ⲆⵠⲆΔⲆⵠᐃ = Δⵠⵠⵠ[ᐃⵠⵠⵠ];
		if (ⲆⵠⲆΔⲆⵠᐃ === undefined) return;
		for (var ΔΔᐃΔ = ⲆΔⵠΔ; ΔΔᐃΔ < 2; ΔΔᐃΔ++) {
			var ⵠΔ = ⲆⵠⲆΔⲆⵠᐃ[ΔⲆⵠⲆΔ][ΔΔᐃΔ];
			var ΔΔ = 193 * ᐃΔⵠⵠ / ⲆⲆⲆ.ᐃⵠⲆΔΔ;
			var ΔΔⵠ = 193 * Δᐃ / ⲆⲆⲆ.ΔᐃⵠⵠⲆ;
			var Δⵠᐃ = ⵠΔ.width / 3.5;
			var ⲆΔΔ = ⵠΔ.height / 3.5;
			Ⲇⵠ[ⵠ.ᐃⲆΔᐃⲆ][ΔΔᐃΔ].drawImage(ⵠΔ, ΔΔ - Δⵠᐃ / ⵠⲆⵠΔ, ΔΔⵠ - ⲆΔΔ / ⵠΔᐃⵠ, Δⵠᐃ, ⲆΔΔ);
			ΔΔ = 600 * ᐃΔⵠⵠ / ⲆⲆⲆ.ᐃⵠⲆΔΔ;
			ΔΔⵠ = 600 * Δᐃ / ⲆⲆⲆ.ΔᐃⵠⵠⲆ;
			Δⵠᐃ = ⵠΔ.width / 1.5;
			ⲆΔΔ = ⵠΔ.height / 1.5;
			Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃ][ΔΔᐃΔ].drawImage(ⵠΔ, ΔΔ - Δⵠᐃ / ⲆⲆⵠᐃ, ΔΔⵠ - ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ)
		}
	}
	ᐃΔⲆᐃᐃᐃⲆⵠΔ = function() {
		for (var Δᐃ = 0; ΔΔᐃᐃ > Δᐃ; Δᐃ++) {
			Ⲇⵠ[ⵠ.ᐃⲆΔᐃⲆ][Δᐃ].clearRect(ⵠⲆⵠ, 0, 193, 193);
			Ⲇⵠ[ⵠ.ᐃⲆΔᐃⲆ][Δᐃ].drawImage(Δⵠⵠⵠ["MAP"][Δᐃ], 0, 0, 193, 193);
			Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃ][Δᐃ].clearRect(Δⵠⵠ, ⵠⲆⵠ, 600, 600);
			Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃ][Δᐃ].drawImage(Δⵠⵠⵠ["MAP"][Δᐃ], 0, ⵠⲆⵠ, 600, 600);
			for (var ᐃΔⵠⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ.length - ⲆⵠΔⲆ; ᐃΔⵠⵠ >= ⵠⲆᐃ; ᐃΔⵠⵠ--) {
				var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[ᐃΔⵠⵠ];
				var ΔΔ = ⲆΔΔⵠ.x1 * 193 / (100 * ⲆⲆⲆ.ᐃⵠⲆΔΔ);
				var ΔΔⵠ = ⲆΔΔⵠ.y1 * 193 / (ΔⲆᐃⵠⵠ * ⲆⲆⲆ.ΔᐃⵠⵠⲆ);
				var Δⵠᐃ = ⲆΔΔⵠ.w * 193 / (100 * ⲆⲆⲆ.ᐃⵠⲆΔΔ);
				var ⲆΔΔ = ⲆΔΔⵠ.ⲆΔΔ * 193 / (ⲆⲆⲆ.ΔᐃⵠⵠⲆ * 100);
				var ⵠⲆⵠⵠⲆ = 600 * ⲆΔΔⵠ.x1 / (ⲆⲆⲆ.ᐃⵠⲆΔΔ * 100);
				var ᐃⵠⵠᐃΔ = ⲆΔΔⵠ.y1 * 600 / (ⵠᐃΔⲆᐃ * ⲆⲆⲆ.ΔᐃⵠⵠⲆ);
				var ⲆᐃⲆⲆⵠΔⵠ = 600 * ⲆΔΔⵠ.w / (100 * ⲆⲆⲆ.ᐃⵠⲆΔΔ);
				var ⵠⵠⲆⲆΔⵠΔ = ⲆΔΔⵠ.ⲆΔΔ * 600 / (ⲆⲆⲆ.ΔᐃⵠⵠⲆ * 100);
				if (ⲆⲆⲆ.ⵠΔⲆⵠᐃ === ⲆΔΔⵠ.ΔⲆᐃ) {
					Ⲇⵠ[ⵠ.ᐃⲆΔᐃⲆ][Δᐃ].drawImage(Δⵠⵠⵠ[Δ[383]][Δᐃ], ΔΔ, ΔΔⵠ, Δⵠᐃ, ⲆΔΔ);
					Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃ][Δᐃ].drawImage(Δⵠⵠⵠ[Δ[383]][Δᐃ], ⵠⲆⵠⵠⲆ, ᐃⵠⵠᐃΔ, ⲆᐃⲆⲆⵠΔⵠ, ⵠⵠⲆⲆΔⵠΔ)
				}
				if (ⲆΔΔⵠ.ΔⲆᐃ === ⲆⲆⲆ.ᐃⵠⲆⲆⵠⵠⵠ) {
					Ⲇⵠ[ⵠ.ᐃⲆΔᐃⲆ][Δᐃ].drawImage(Δⵠⵠⵠ[Δ[344]][Δᐃ], ΔΔ, ΔΔⵠ, Δⵠᐃ, ⲆΔΔ);
					Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃ][Δᐃ].drawImage(Δⵠⵠⵠ[Δ[344]][Δᐃ], ⵠⲆⵠⵠⲆ, ᐃⵠⵠᐃΔ, ⲆᐃⲆⲆⵠΔⵠ, ⵠⵠⲆⲆΔⵠΔ)
				}
				ⲆⲆⲆ.ΔᐃᐃⲆᐃⲆⲆ === ⲆΔΔⵠ.ΔⲆᐃ && (Ⲇⵠ[ⵠ.ᐃⲆΔᐃⲆ][Δᐃ].drawImage(Δⵠⵠⵠ[Δ[241]][Δᐃ], ΔΔ, ΔΔⵠ, Δⵠᐃ, ⲆΔΔ), Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃ][Δᐃ].drawImage(Δⵠⵠⵠ[Δ[241]][Δᐃ], ⵠⲆⵠⵠⲆ, ᐃⵠⵠᐃΔ, ⲆᐃⲆⲆⵠΔⵠ, ⵠⵠⲆⲆΔⵠΔ));
				ⲆⲆⲆ.ᐃⲆᐃᐃΔⵠⲆ === ⲆΔΔⵠ.ΔⲆᐃ && (Ⲇⵠ[ⵠ.ᐃⲆΔᐃⲆ][Δᐃ].drawImage(Δⵠⵠⵠ["CAVE"][Δᐃ], ΔΔ, ΔΔⵠ, Δⵠᐃ, ⲆΔΔ), Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃ][Δᐃ].drawImage(Δⵠⵠⵠ["CAVE"][Δᐃ], ⵠⲆⵠⵠⲆ, ᐃⵠⵠᐃΔ, ⲆᐃⲆⲆⵠΔⵠ, ⵠⵠⲆⲆΔⵠΔ));
				if (ⲆΔΔⵠ.ΔⲆᐃ === ⲆⲆⲆ.ⵠⲆΔΔⵠⲆⵠ) {
					Ⲇⵠ[ⵠ.ᐃⲆΔᐃⲆ][Δᐃ].drawImage(Δⵠⵠⵠ[Δ[437]][Δᐃ], ΔΔ, ΔΔⵠ, Δⵠᐃ, ⲆΔΔ);
					Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃ][Δᐃ].drawImage(Δⵠⵠⵠ[Δ[437]][Δᐃ], ⵠⲆⵠⵠⲆ, ᐃⵠⵠᐃΔ, ⲆᐃⲆⲆⵠΔⵠ, ⵠⵠⲆⲆΔⵠΔ)
				}
			}
		}
	};
	ΔᐃΔΔΔⲆᐃΔⵠ = function() {
		ᐃᐃⵠⵠ = {
			"ⵠᐃΔⲆⵠ": [{
				id: 0,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⵠΔᐃⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⲆⵠⲆΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⵠⲆⲆΔⵠⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆᐃⲆᐃΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[108],
				name: "Starver"
			}, {
				id: ⵠᐃⲆᐃ,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⲆΔΔᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔΔⲆⲆΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔΔᐃᐃⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠΔⲆΔΔΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[108],
				name: "Angry"
			}, {
				id: ⲆⲆᐃⲆ,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆⵠΔⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⲆΔⲆΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⵠⲆⲆΔᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⵠⵠⵠⵠⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[108],
				name: "Sad"
			}, {
				id: ΔΔΔᐃΔΔΔ,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⵠᐃΔⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆᐃⲆⲆΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔᐃⲆΔΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃΔⲆΔⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[108],
				name: "Happy 1"
			}, {
				id: 1,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃΔⵠᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⲆⵠⵠⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆΔᐃᐃⵠⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔΔᐃⲆᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "What?"
			}, {
				id: ⲆΔⵠᐃΔ,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆΔⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⲆⲆΔⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⲆⵠⲆⲆⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔᐃᐃᐃⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Suspicious"
			}, {
				id: 5,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⵠⵠⲆᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃᐃⲆⲆᐃⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃᐃΔⵠᐃⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆᐃᐃⲆᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Scar"
			}, {
				id: ΔⲆⵠΔΔ,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⵠⲆᐃⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⲆⲆᐃⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⲆΔⲆᐃⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃⲆⵠΔᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "In Trouble"
			}, {
				id: ⲆᐃᐃΔΔ,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⵠⲆⲆⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆΔⲆⲆⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆⲆΔⲆΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠⵠΔΔΔⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Cute"
			}, {
				id: 8,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠᐃΔⵠΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔΔᐃⲆΔⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔᐃΔᐃᐃΔΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃΔⲆΔᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Bored 1"
			}, {
				id: 10,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⵠⲆᐃΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⲆⵠⲆΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔᐃΔⵠⵠⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⵠⵠᐃⲆᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Happy 2"
			}, {
				id: 11,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⲆΔⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⲆᐃᐃⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆⵠⲆΔΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔⲆⲆᐃⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Crazy"
			}, {
				id: 12,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃΔⲆⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃᐃⲆᐃⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔᐃᐃΔΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⲆᐃΔᐃᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Happy 3"
			}, {
				id: 13,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠᐃⲆΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆᐃⲆᐃⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⲆⵠⵠᐃⵠⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠΔⵠΔᐃᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Very Cute"
			}, {
				id: 14,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⲆΔΔᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆΔⲆⵠⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃΔⲆΔⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆⵠΔⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Curious"
			}, {
				id: 15,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃⲆⲆᐃⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆⵠᐃⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆΔⵠⲆⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆΔᐃᐃⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Bored 2"
			}, {
				id: 16,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⵠΔΔⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠⲆΔⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠⵠΔΔⵠΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃΔᐃᐃΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Happy 4"
			}, {
				id: 17,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠᐃⵠΔⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⲆΔⵠⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃᐃⲆⲆᐃⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃⵠⵠᐃᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Scar 2"
			}, {
				id: ᐃᐃⲆᐃᐃΔⲆ,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⲆⵠᐃⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃᐃᐃΔⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔⵠⵠᐃⵠΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠⲆᐃⲆⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Sick"
			}, {
				id: Ⲇᐃᐃᐃᐃ,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠᐃᐃΔΔΔ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆᐃⲆⵠⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃΔᐃⵠⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃⲆⲆⲆⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Somnambule"
			}, {
				id: 24,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⲆⵠΔΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⲆⵠᐃΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔᐃⵠⲆΔⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃΔⵠⵠᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[212],
				name: "Feel Bad"
			}, {
				id: 23,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃΔΔᐃᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⵠⵠΔΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔΔⲆᐃⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⵠⵠⲆΔΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[212],
				name: "Mmmh."
			}, {
				id: 103,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆΔⵠᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⲆⵠᐃᐃⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔⵠᐃⵠᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠⲆⵠᐃΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[358],
				name: "Panic"
			}, {
				id: 105,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⲆΔΔⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⵠⵠΔΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆⵠⲆⲆⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃΔⵠΔᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[358],
				name: "Hypnotic"
			}, {
				id: 106,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆΔⲆⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠΔⵠΔⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔᐃᐃⲆΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⵠⲆᐃΔⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[358],
				name: "Stars in the eyes"
			}, {
				id: 220,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⵠΔⲆⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⲆⵠᐃΔⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃⵠΔᐃᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔⵠΔᐃⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Seams"
			}, {
				id: 104,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⵠⵠⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠᐃⵠΔᐃᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠⲆⲆⲆᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃⲆΔᐃΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Scared at night"
			}, {
				id: 20,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠΔᐃⲆⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆᐃⲆⵠⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃⵠΔᐃΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔΔΔΔΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Vampire"
			}, {
				id: 21,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⵠⲆΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⲆΔᐃⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔΔᐃᐃΔΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃΔⵠΔᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Zombie"
			}, {
				id: 22,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆᐃᐃⵠⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆⵠⲆᐃⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆΔⲆⵠⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔΔᐃⵠⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[212],
				name: "Devaster"
			}, {
				id: 116,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆᐃΔᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⵠⲆᐃⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⵠⵠⲆⵠΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃᐃᐃⵠⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": "Fukss",
				name: "Dead Devaster"
			}, {
				id: 27,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔΔᐃⵠΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠᐃΔⲆⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃᐃᐃΔΔⵠⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃⲆⲆᐃⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[505],
				name: Δ[225]
			}, {
				id: 28,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔⲆΔⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔΔᐃⵠⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆᐃᐃᐃⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔⲆⲆΔᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Bee"
			}, {
				id: 49,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⲆᐃⵠⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⵠⵠⵠⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆᐃΔⵠⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃΔΔⵠⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Camo Skin"
			}, {
				id: 58,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆᐃᐃᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⵠⵠᐃⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔⵠⵠΔΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠΔⲆᐃᐃΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Blue Limax Skin"
			}, {
				id: 59,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃⵠΔⵠᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⵠⵠⵠⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆΔᐃⵠΔΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔΔΔᐃⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Red Limax Skin"
			}, {
				id: 94,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃΔⲆΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔΔΔΔⲆⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆΔᐃᐃⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆⲆⲆⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Mr. Pumpkin"
			}, {
				id: 109,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃⲆⲆΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠⵠⲆⲆⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⲆⲆΔΔΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃⵠᐃᐃⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Wood"
			}, {
				id: 114,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆΔⲆᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⲆⵠⵠᐃⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔΔΔΔⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⵠᐃΔⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Zebra"
			}, {
				id: 120,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔᐃΔΔⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⲆΔᐃΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆᐃᐃΔΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆᐃⵠⵠⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[533],
				name: "Tiger"
			}, {
				id: 134,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆᐃⵠⲆΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃᐃᐃⵠⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠⵠⵠΔᐃⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠΔΔᐃᐃⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": "Franchestcreator",
				name: "Day or Night"
			}, {
				id: 135,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⵠⲆᐃⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⲆⲆⵠΔⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃⲆⲆⲆΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃᐃⲆⲆⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": "Poinet",
				name: "Square Starver"
			}, {
				id: 136,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔΔⵠΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⲆᐃᐃⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔⲆⵠΔΔⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔᐃⵠⲆᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Voodoo Doll"
			}, {
				id: 137,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃᐃΔᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⵠⲆⲆⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠⲆᐃᐃᐃⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃⵠⲆⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Frankenstein"
			}, {
				id: 138,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⲆⲆΔⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⲆᐃⲆⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃᐃΔⵠᐃΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆⲆΔᐃⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Old Mummy"
			}, {
				id: 139,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃΔⲆΔᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆΔΔΔⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⲆⵠΔⲆⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃΔⵠΔΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Werewolf"
			}, {
				id: 140,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆΔⵠⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⵠΔᐃΔⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⵠⲆΔⲆᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔⵠᐃⲆᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Old Cthulhu"
			}, {
				id: 141,
				"ⵠⵠⲆ": ΔⲆ.ΔΔΔⵠⲆᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔΔⲆΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔᐃᐃⲆⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃΔᐃⵠⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Sea Man"
			}, {
				id: 142,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠᐃⵠΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠᐃᐃΔⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.Ⲇᐃᐃⵠᐃⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠᐃΔⵠⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Old Pumpkin"
			}, {
				id: 148,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⲆᐃᐃᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔᐃⵠⲆⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠΔⵠᐃⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆᐃᐃᐃᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Old Snowman"
			}, {
				id: 149,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⵠⵠⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆᐃᐃⲆⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⲆⵠⲆⵠⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃⵠⵠⵠᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Old Christmas Tree Man"
			}, {
				id: 150,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⵠⲆΔⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃΔΔᐃΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃⲆᐃⲆⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃⲆΔΔⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Old Mrs Bell"
			}, {
				id: 151,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔⲆⵠᐃⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠⲆΔⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔⵠⵠΔᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⲆᐃⵠᐃΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Old Elfy"
			}, {
				id: 152,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⲆΔⲆᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃΔⵠⲆΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔⵠᐃⵠⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆᐃΔᐃⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Old Mr Present"
			}, {
				id: 153,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆΔᐃΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠᐃⲆΔⲆⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆᐃᐃᐃᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⲆⲆᐃΔᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "My Dear Old Deer"
			}, {
				id: 154,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⵠⵠⵠⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⵠᐃΔᐃΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⲆⲆΔᐃΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠⲆⵠⲆⲆᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr Angel"
			}, {
				id: 155,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠΔⵠᐃᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃᐃΔⵠᐃᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆΔⵠⲆⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⵠⵠᐃᐃⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr Ice Cube"
			}, {
				id: 156,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⵠⵠⲆⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⲆΔᐃⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆⵠᐃᐃⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆᐃⵠΔⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr Snowman"
			}, {
				id: 159,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆⵠΔΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⲆⵠⲆΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔⵠⲆⵠⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆⲆⵠΔΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[533],
				name: "Crystal Sky Skin"
			}, {
				id: 167,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⲆⵠᐃⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃᐃΔΔΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆⵠⵠⵠⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔⲆᐃᐃⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": "Franchestcreator",
				name: "Radioactive Starver"
			}, {
				id: 169,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⵠⲆⵠⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠΔΔΔⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⲆⲆΔΔΔΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔΔⵠᐃᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": "TheScaryBlaze",
				name: "Eaten Cookie"
			}, {
				id: 170,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃᐃΔⲆⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔᐃᐃⵠⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃᐃⲆᐃⵠΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃⲆΔΔⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[511],
				name: "Blob Thing"
			}, {
				id: 172,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⵠⵠⵠΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔΔᐃΔⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃᐃΔⵠⵠⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔⲆⲆᐃΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[511],
				name: "Machine Mask"
			}, {
				id: 184,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆᐃⵠΔᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⵠⲆᐃΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔᐃⵠⲆⲆⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆΔⵠᐃΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mad"
			}, {
				id: 206,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃᐃΔΔᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠΔΔᐃⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⲆΔⲆᐃΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃⲆΔΔⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Survivor"
			}, {
				id: 209,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆⲆⵠⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆΔⲆΔΔⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆΔᐃᐃᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆⲆⲆⵠΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Starverator"
			}, {
				id: 230,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠΔⵠΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔΔⵠΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆⲆΔΔΔΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆᐃⲆⲆⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: Δ[332]
			}, {
				id: 231,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⲆΔⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⵠΔⵠΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⵠΔⵠⲆⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃⲆⵠᐃⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Big Pile of Sand"
			}, {
				id: 232,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔⲆᐃⵠΔΔ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⵠΔΔᐃᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔⵠⲆⲆⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠⲆⲆⲆΔᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Big Pile of Dirt"
			}, {
				id: 235,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⵠⲆΔᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠΔΔⵠᐃⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔᐃΔΔΔⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⵠⵠΔⵠᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Sandstone"
			}, {
				id: 29,
				"ⵠⵠⲆ": ΔⲆ.Ⲇⵠᐃᐃⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⲆⵠΔΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.Ⲇᐃᐃᐃⵠᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆᐃΔⲆⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[212],
				name: "Lollipop 1"
			}, {
				id: 30,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⵠᐃᐃΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃᐃⵠⵠⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔⲆᐃⵠᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆΔᐃⲆΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Lollipop 2"
			}, {
				id: 31,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⵠⲆᐃᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⵠⲆΔⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⵠΔⲆΔⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⲆᐃΔᐃΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Lollipop 3"
			}, {
				id: 32,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃᐃⵠⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔΔΔΔⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⵠⵠᐃⵠⵠΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔᐃⲆⲆᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Lollipop 4"
			}, {
				id: 33,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔᐃΔΔᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ΔΔΔᐃᐃᐃⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆΔΔⲆⵠΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃⲆⲆⲆᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[249],
				name: "Yellow Bird"
			}, {
				id: 34,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃΔᐃᐃⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃᐃΔⵠΔⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆΔΔⵠⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⵠᐃΔⵠᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[249],
				name: "Red Bird"
			}, {
				id: 35,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⲆΔᐃⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⲆΔᐃⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃΔⵠⲆΔⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠⲆᐃΔᐃⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[249],
				name: "Blue Bird"
			}, {
				id: 37,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆᐃᐃᐃⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔᐃᐃⵠᐃⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⲆΔⲆⵠᐃⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃᐃⵠⵠᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[505],
				name: "Owl"
			}, {
				id: 52,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⲆΔⲆⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠᐃΔⲆⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃⲆⲆⵠᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠΔⵠⲆⲆᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Nemo"
			}, {
				id: 53,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⲆᐃⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⲆⲆᐃⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⵠⲆᐃⲆⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠⲆᐃᐃᐃᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr. Bread"
			}, {
				id: 74,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⵠᐃΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⲆᐃΔⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃᐃⵠⵠⵠᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠΔⵠⵠⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": "Communist & Taco4Life",
				name: "Mr. Bread 2"
			}, {
				id: 75,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆⲆⲆⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⲆΔⵠᐃᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆᐃᐃᐃΔⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔⵠᐃΔᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": "Communist & Taco4Life",
				name: "Mr. Bread 3"
			}, {
				id: 60,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⲆⲆⲆⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠΔᐃᐃᐃⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃΔΔⵠⵠΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠΔΔᐃΔⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Red Berry"
			}, {
				id: 61,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⲆⵠⵠⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⲆᐃⲆΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆΔⲆΔⵠΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⲆⲆΔⲆᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Old Berry"
			}, {
				id: 70,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⲆⲆⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆᐃΔⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔᐃᐃⲆΔⵠⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔᐃΔⵠⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Cake"
			}, {
				id: 71,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃⲆⵠΔΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠΔᐃⵠᐃⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠᐃΔⵠΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠΔⲆᐃᐃⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Christmas Cake"
			}, {
				id: 77,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⵠⵠⵠⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔΔΔᐃⵠⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃΔⵠⵠᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆΔⲆΔⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": "Pancakez",
				name: "Mr. Pancake"
			}, {
				id: 87,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃⵠᐃⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⵠΔΔΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃⲆⲆΔⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔᐃⲆⲆΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Mr. Taco"
			}, {
				id: 78,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔΔΔΔᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⲆᐃᐃᐃⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⲆᐃΔⲆᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔⵠΔⵠᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Mr. Bottle"
			}, {
				id: 79,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⵠⲆᐃⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⵠⲆⵠⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔⵠⵠⲆⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃⲆᐃⲆΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Mr. Bottle 2"
			}, {
				id: 97,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆΔⲆⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⵠⵠⲆⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⵠⲆΔⵠⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃⲆⵠΔΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Pink Rabbit"
			}, {
				id: 102,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⲆⲆΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⵠᐃⵠⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔᐃⲆⵠᐃⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃᐃⲆᐃΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Marshmallow"
			}, {
				id: 107,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠΔᐃⲆⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠᐃⵠΔⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠⵠΔΔΔΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⵠᐃᐃⲆⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Fox"
			}, {
				id: 132,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⵠⵠⲆᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔⲆⵠⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔⲆᐃΔⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃᐃⲆⲆⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Raccoon"
			}, {
				id: 111,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔᐃⵠⲆΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃᐃⲆⲆⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⵠᐃᐃⲆⵠⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⵠⲆⲆⲆⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Cloud"
			}, {
				id: 113,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔΔⵠᐃΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⵠⵠⲆΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔᐃⲆΔΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠΔΔⲆⵠᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Moon"
			}, {
				id: 117,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⵠⲆΔⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⲆⲆΔⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃᐃⵠΔᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆⵠⵠⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Mr. Panda"
			}, {
				id: 118,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⵠΔⵠⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⲆΔᐃΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃΔΔᐃᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃⲆⵠᐃⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Mr. Strawberry"
			}, {
				id: 119,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆΔⲆⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⲆⵠᐃᐃᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔⵠᐃⲆᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⲆᐃΔⲆΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": "eogito & Sushuui",
				name: "Mummy"
			}, {
				id: 122,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⲆᐃΔⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔᐃΔⲆᐃΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⵠⵠᐃⲆᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃⲆᐃⵠΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Dino"
			}, {
				id: 127,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆΔⵠⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃΔᐃΔᐃΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆⵠⲆᐃⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃΔⵠⲆᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[7],
				name: "Mr. Koala"
			}, {
				id: 160,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⲆᐃΔᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔΔⲆᐃⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔⲆⲆⵠᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆΔᐃᐃᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Bottle Protection"
			}, {
				id: 162,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⲆⲆΔᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⵠΔⲆᐃᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⵠΔⲆΔⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃᐃᐃⲆᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[533],
				name: "Leaf Man"
			}, {
				id: 166,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⲆΔⲆⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠᐃⲆΔⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔⵠΔᐃⵠⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆⲆⲆⲆᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Bubble"
			}, {
				id: 174,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃⲆᐃⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⵠΔᐃᐃᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃΔᐃⵠⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠⵠⵠⲆⵠΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[248],
				name: "Potato"
			}, {
				id: 171,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⵠΔⲆᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃᐃᐃΔΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔⲆⵠⵠᐃⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔᐃⵠΔⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[511],
				name: "Axolotl"
			}, {
				id: 178,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠΔⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⵠΔⲆⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⲆⲆⲆΔᐃⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⵠᐃⵠⲆᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Rusted Machine"
			}, {
				id: 179,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⲆⲆⲆΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆᐃᐃᐃΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔΔⲆᐃⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⲆᐃⲆΔᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Starving Machine"
			}, {
				id: 181,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠᐃⲆᐃⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⵠⲆⲆᐃⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃᐃᐃᐃⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃⵠᐃΔᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Night Stars"
			}, {
				id: 191,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃᐃΔΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⵠⵠⵠᐃⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃᐃⲆⲆⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔⲆⲆⲆΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Blue Jay"
			}, {
				id: 198,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔᐃⲆⲆΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆᐃΔⵠΔⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔᐃᐃΔᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔⲆᐃΔᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": "AWTP",
				name: "Dave"
			}, {
				id: 200,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃΔⲆᐃⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⵠΔⵠⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃⲆⲆⲆⵠⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆΔΔⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": "Jinty",
				name: "Smug"
			}, {
				id: 203,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆⲆᐃΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆΔΔᐃⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃΔᐃⲆΔⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⲆⵠᐃᐃⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Reclaimed"
			}, {
				id: 204,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔΔⲆⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⵠⲆⲆⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⵠⵠⵠᐃⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃⵠⵠᐃᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Legacy Wolf"
			}, {
				id: 211,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⲆᐃⲆΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃΔⵠⲆⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔᐃᐃⲆΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔᐃⵠⵠᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Starver of the Seas"
			}, {
				id: 213,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⲆⵠΔΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⲆΔⲆΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⵠⵠΔⵠⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔⵠⵠᐃᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Ice"
			}, {
				id: 219,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⲆΔⲆⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔᐃⲆΔΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃΔᐃᐃⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔⲆⲆᐃⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": "Ramil",
				name: "Sandwich Cookie"
			}, {
				id: 221,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔΔⵠⵠⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠᐃᐃΔⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⵠⲆⲆᐃⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔᐃΔⵠⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Purple Geode"
			}, {
				id: 222,
				"ⵠⵠⲆ": ΔⲆ.ΔΔΔⲆΔΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⲆⵠⵠⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⵠΔᐃΔⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⲆΔⲆⲆⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Cyan Geode"
			}, {
				id: 223,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔΔⵠⲆⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⲆⵠⲆⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⲆⵠⵠΔⵠⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⵠΔⵠΔⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Yellow Geode"
			}, {
				id: 228,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔᐃⲆᐃΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⲆᐃᐃΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆⵠⲆΔᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆⲆⲆᐃⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Furnace Head"
			}, {
				id: 229,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆΔΔᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⲆΔᐃⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔᐃⲆⵠⵠⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⵠᐃΔⲆΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Bag"
			}, {
				id: 227,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃᐃⲆⲆᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆⲆΔΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠΔⵠⲆᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆⲆᐃΔΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Lit Furnace Head"
			}, {
				id: 25,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⵠΔⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠᐃΔΔⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔᐃⲆⲆⲆⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⵠⵠⲆΔΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[212],
				name: "Test Dummy"
			}, {
				id: 41,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⵠⲆⵠᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⲆΔⵠⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔᐃⵠΔΔⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔⲆΔᐃⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Star-ver"
			}, {
				id: 43,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⲆᐃⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆᐃⲆᐃⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃᐃᐃⵠⵠΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃⲆⲆᐃᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[279],
				name: "Starver Chest"
			}, {
				id: 88,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⵠⵠΔᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔΔᐃᐃⲆⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔΔⵠⵠΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⵠⲆΔⲆⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[279],
				name: "Starver Workbench"
			}, {
				id: 121,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃⵠΔⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃᐃΔⲆΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔᐃᐃΔⲆᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆⲆⲆⲆⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[ⵠΔⵠΔᐃ],
				name: "Fish"
			}, {
				id: 39,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⵠⲆᐃΔΔ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⵠⵠᐃΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆᐃⲆᐃⵠⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆΔᐃⲆⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": "Negligent4Dia",
				name: "Crab"
			}, {
				id: 40,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆᐃⲆⵠΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃᐃΔⵠᐃⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃᐃⵠΔᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠⵠΔᐃᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": "Negligent4Dia",
				name: "Piranha"
			}, {
				id: 36,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃΔⲆᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⲆᐃᐃⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆΔⵠᐃⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⲆⵠᐃⵠΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Winter Fox"
			}, {
				id: 69,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃᐃⵠᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃᐃᐃⲆᐃⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⲆⲆΔⵠΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃⲆᐃⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": "Zed",
				name: "Baby Foxy"
			}, {
				id: 51,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆΔΔᐃⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⲆⵠΔⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔⵠΔⲆᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃΔΔᐃⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": "HOWI",
				name: "Winter Bear"
			}, {
				id: 133,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆΔᐃⵠΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆⲆΔⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃᐃⵠᐃⵠᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔᐃⵠⵠⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Hawk"
			}, {
				id: 55,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⵠⲆᐃᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃᐃⲆΔΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆᐃⲆᐃⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃΔΔᐃΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Nice Little Yuki"
			}, {
				id: 68,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠᐃᐃΔΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔᐃⵠⵠΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⵠⲆΔⵠⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆⲆᐃΔⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Baby Yuki"
			}, {
				id: 62,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆᐃᐃⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⲆⲆⲆⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔⵠᐃⲆⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃΔᐃᐃΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr. Carrot"
			}, {
				id: 56,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔΔⵠⲆΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔᐃⵠΔⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⵠᐃⲆΔᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.Ⲇⵠⵠⵠⵠⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Bat Limax"
			}, {
				id: 72,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃⵠΔⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⵠⲆᐃⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃΔⵠⵠⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⵠᐃᐃᐃⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Mr. Crate"
			}, {
				id: 73,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃΔⲆⵠᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠᐃⵠⲆⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔᐃⵠⲆⵠΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠΔⵠⵠⲆᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": "Taco4Life & eogito",
				name: "Mr. Spider"
			}, {
				id: 93,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃᐃᐃⵠⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃΔⵠⵠⲆⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔΔⲆⵠⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔⲆΔΔΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[70],
				name: "Mr. Spider 2"
			}, {
				id: 82,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔΔⵠⲆΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔᐃⲆⲆⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆⵠΔⲆΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃᐃⲆⵠΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr. Blue Starfish"
			}, {
				id: 83,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⲆΔᐃⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⲆΔⵠΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃᐃⵠΔⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠΔΔᐃⲆΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr. Orange Starfish"
			}, {
				id: 84,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⲆΔⵠⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⲆⲆΔᐃⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔⵠᐃⵠⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔᐃⲆⵠⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr. Pink Starfish"
			}, {
				id: 85,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⵠΔΔⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⲆⵠᐃΔⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⵠⲆΔᐃΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⵠⲆΔⵠⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr. ShellMauve"
			}, {
				id: 86,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠΔⵠΔⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⵠᐃΔΔⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔᐃⵠΔΔⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃⲆⵠⵠⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr. Shell Bead"
			}, {
				id: 96,
				"ⵠⵠⲆ": ΔⲆ.Ⲇⵠᐃᐃᐃⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔΔΔΔⲆΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔΔⵠⵠᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.Δᐃⵠᐃᐃᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": "Fukss",
				name: "Angry Crab"
			}, {
				id: 98,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠᐃᐃΔᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃᐃᐃⵠΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔΔⵠᐃᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃⵠᐃᐃΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Penguin"
			}, {
				id: 126,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠᐃΔᐃⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⵠⵠⲆⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆΔᐃⲆΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔΔⲆΔᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[70],
				name: "Mr. Boar"
			}, {
				id: 145,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆΔⲆⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆᐃⵠⲆᐃⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔⵠⵠⵠⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠΔΔᐃΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "I saw you"
			}, {
				id: 146,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆΔⵠᐃΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠⲆᐃⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔⵠⲆᐃⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔΔⲆⲆΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "It was funny"
			}, {
				id: 147,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠΔᐃⵠᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⵠⵠΔᐃⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃΔⲆⵠⵠΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔᐃΔⵠⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "You can scream"
			}, {
				id: 158,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆⵠⵠⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ΔΔΔⵠⲆᐃΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆΔΔⲆⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆⵠΔⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Mr. Book"
			}, {
				id: 163,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠᐃΔⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⵠΔⲆⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃⲆⲆΔΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔᐃⲆᐃᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[70],
				name: "Mr. Mammoth"
			}, {
				id: 164,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⲆΔⵠΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠᐃΔΔΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔᐃᐃΔᐃΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⵠⲆⵠⲆⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": "SoOw",
				name: "Mr. Mammoth 2"
			}, {
				id: 161,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠΔⵠᐃⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔΔᐃΔΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⵠΔⲆᐃⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃⵠΔⵠⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Nightmare"
			}, {
				id: 168,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆΔⵠⵠⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⲆⲆⲆⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔᐃΔᐃⵠΔΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃΔᐃΔⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Shiny Crystal"
			}, {
				id: 173,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠᐃⵠⲆΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⵠⲆΔΔⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔᐃΔⵠⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃⵠⲆΔⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Water skin"
			}, {
				id: 175,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔᐃⵠΔⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⵠⲆᐃⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.Δⵠᐃᐃᐃᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃⲆⵠΔⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Fall Berry Bush Starver"
			}, {
				id: 176,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠΔⲆⲆⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔΔᐃᐃⲆΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔΔΔⵠⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔⵠⵠⲆⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Christmas Berry Bush Starver"
			}, {
				id: 177,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠΔⵠᐃᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔᐃΔΔᐃΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔⲆΔⵠᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆⲆᐃΔΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Berry Bush Starver"
			}, {
				id: 182,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⵠΔΔⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠᐃⲆᐃⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⲆⲆⲆΔᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠⵠⵠⵠᐃΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamer"
			}, {
				id: 185,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔΔΔΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⵠⲆⲆⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⲆᐃⵠΔⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠᐃᐃⵠΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Wolf"
			}, {
				id: 186,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆΔⵠΔΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆΔΔΔΔⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔⲆⲆⲆᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔΔᐃⵠᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Snow Wolf"
			}, {
				id: 187,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠⲆⵠⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⵠⲆⵠⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠⵠⵠᐃΔⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔᐃΔⵠⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Rabbit"
			}, {
				id: 188,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⵠᐃΔΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆᐃᐃΔⲆⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆᐃΔⵠⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃⵠᐃⵠᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Snow Rabbit"
			}, {
				id: 189,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⵠΔⲆΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔΔⲆⲆΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔᐃᐃⵠᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃⵠⲆΔΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Bear"
			}, {
				id: 190,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔᐃᐃΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃΔᐃⵠⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⵠⵠᐃⲆⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔⲆⲆⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Polar Bear"
			}, {
				id: 196,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆΔⲆⵠⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⵠΔⲆΔⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔⲆᐃΔⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔΔⵠΔΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Crying Angel"
			}, {
				id: 202,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔΔᐃΔΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔⲆⵠᐃⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃⵠΔⲆⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃΔᐃᐃΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Fennec"
			}, {
				id: 207,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃⲆᐃᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⲆᐃᐃⲆⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔᐃᐃⵠⲆΔΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠⲆΔⵠΔΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Decay"
			}, {
				id: 212,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⵠⲆᐃⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃᐃΔⵠᐃⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⲆΔᐃⲆⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆΔⵠⲆⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Pillow"
			}, {
				id: 218,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃᐃⵠΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃᐃΔⵠᐃΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃᐃᐃΔᐃᐃⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆΔΔᐃᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Exotic"
			}, {
				id: 224,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⵠⲆᐃⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔΔᐃᐃΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⵠⵠⲆⵠᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔΔΔΔⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Apple"
			}, {
				id: 225,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⵠⵠΔⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔΔᐃΔⲆⲆⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⲆΔⵠⲆᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠⵠⲆᐃⵠᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Golden Apple"
			}, {
				id: 233,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⵠΔⵠⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃΔⲆⵠᐃΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃᐃⵠⵠᐃΔⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔⵠᐃⵠⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Lava Cube"
			}, {
				id: 234,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆᐃΔΔᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.Ⲇᐃⵠⵠⵠᐃᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠⵠⵠᐃⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔΔⲆⲆᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Dragon Cube"
			}, {
				id: 42,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠᐃⲆⵠⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠΔⵠⵠΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔᐃΔⵠΔⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠⵠⵠΔΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[505],
				name: "Will-O'-The-Wisp"
			}, {
				id: 91,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆΔⵠⵠⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⵠⲆⲆⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃⲆⲆⲆⵠΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔⵠᐃᐃⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": "ExpertyAnimations",
				name: "Flame"
			}, {
				id: 26,
				"ⵠⵠⲆ": ΔⲆ.Ⲇⵠⵠⵠⵠⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⵠⵠⲆⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⵠⵠᐃⵠΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔᐃᐃⵠⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Be a Tree"
			}, {
				id: 38,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⵠᐃⲆΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠΔⵠⵠΔⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆΔⵠᐃΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔⵠⲆⲆΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[505],
				name: "Toxic Mutant"
			}, {
				id: 50,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⲆΔΔⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃᐃΔᐃⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⵠᐃⲆⲆⵠΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⵠᐃΔᐃⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[279],
				name: "Mr. Tomato"
			}, {
				id: 54,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠΔⵠᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆᐃΔⲆᐃΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⲆΔⵠΔᐃⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃᐃⵠᐃᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr. Mauve, the Lapa"
			}, {
				id: 57,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔᐃΔⲆΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⵠⲆⲆΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔⵠΔΔᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃⵠᐃⲆᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Golden Fish"
			}, {
				id: 64,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃᐃⲆΔΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⲆΔΔᐃⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔⵠᐃⵠⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠⲆᐃⲆⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "LapaMauve"
			}, {
				id: 65,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠΔⲆΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆᐃⵠⵠⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆⲆᐃⵠⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔᐃᐃΔΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "LapaMauve "
			}, {
				id: 92,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⵠⲆΔⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⵠⵠⵠΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃᐃⵠⲆⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔⵠᐃⲆⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr. Burger"
			}, {
				id: 66,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠΔⵠᐃᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⵠᐃⲆᐃᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆⲆᐃⵠⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃᐃᐃΔⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Tropical Starver"
			}, {
				id: 80,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃᐃΔⲆⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆΔⲆΔⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆⲆᐃΔΔΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆⲆⵠⵠᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr. ShellPink"
			}, {
				id: 81,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⲆⲆⲆᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔᐃⵠᐃⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔΔΔᐃⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠᐃⲆⵠᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr. OranShell"
			}, {
				id: 99,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆᐃⵠΔΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔΔᐃⲆΔⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔᐃᐃⲆΔΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠΔᐃⵠΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Pepe"
			}, {
				id: 100,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔΔᐃⵠⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔⵠⲆⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⲆΔⲆⵠⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⵠΔᐃⵠΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": "fatant",
				name: "Mr. Ant"
			}, {
				id: 115,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔᐃᐃⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⵠᐃᐃⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆᐃⵠⵠⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃⵠᐃⲆⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[7],
				name: "Mr. Watermelon"
			}, {
				id: 101,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔᐃⲆΔΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆᐃⲆⵠᐃⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃⲆᐃΔΔⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⵠⲆⲆᐃΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Mr. Thornbush"
			}, {
				id: 131,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⵠⲆⵠⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⲆΔⲆⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠⵠᐃⲆΔⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃⲆⲆⲆΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Cthulhu"
			}, {
				id: 143,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⲆⵠᐃⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⲆᐃⵠⲆⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⵠΔΔΔⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠⵠⲆᐃⵠⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Mr. Cactus"
			}, {
				id: 144,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⵠⲆⲆⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆΔⵠⵠΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⵠᐃⵠΔⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠᐃⲆᐃᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Momo"
			}, {
				id: 180,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⵠⵠⲆᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃΔᐃΔΔΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠⵠⵠΔⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃⲆⵠⲆⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Scream"
			}, {
				id: 193,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠⲆᐃⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⵠΔⵠᐃΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⵠⵠⵠⵠᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠΔⲆΔⲆᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Dragon"
			}, {
				id: 195,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆᐃⵠⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠΔⵠⵠⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔⵠⲆⲆⲆΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃᐃⲆⵠΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Forest Spirit"
			}, {
				id: 197,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃᐃΔᐃᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⵠⲆⲆⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃⲆⲆⲆⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆᐃΔᐃᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Evil Goat"
			}, {
				id: 199,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃⵠΔΔⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⲆⲆⵠᐃΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃⲆᐃⵠᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆᐃⲆⲆⵠⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Rotten"
			}, {
				id: 201,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⵠⲆⲆᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆΔΔⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃⵠᐃⵠᐃⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠΔⵠᐃⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Fossil"
			}, {
				id: 205,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃΔᐃⵠᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⲆⵠⲆⲆⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⵠᐃΔⵠᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔⵠΔⲆⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Spectrum"
			}, {
				id: 210,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃΔΔΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔⲆⲆⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠⵠⵠΔⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⵠᐃⲆᐃⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": "Helpy",
				name: "Black Cat"
			}, {
				id: 214,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃΔΔΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆᐃⵠⲆΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔⲆΔΔΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔⲆΔΔⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Lynx"
			}, {
				id: 215,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃΔⲆᐃΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆᐃⲆΔΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔⲆΔᐃΔⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠΔᐃⵠᐃⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Warg"
			}, {
				id: 217,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⲆⲆⵠᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆΔΔⵠⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆΔⲆⲆⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆᐃᐃⲆⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Menhir"
			}, {
				id: 95,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⲆⲆᐃⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠΔΔΔⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆΔᐃᐃᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃᐃΔΔΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Mr. Garlic"
			}, {
				id: 76,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⲆΔΔΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔΔⵠⲆΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔᐃⵠⵠⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.Ⲇᐃᐃᐃᐃᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[505],
				name: "Robot Dragon"
			}, {
				id: 44,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠΔⲆⲆΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⲆᐃᐃΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⵠⲆⵠΔΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⲆΔᐃⵠⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[505],
				name: "Lava Dragon Version 1"
			}, {
				id: 90,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃᐃᐃⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃΔⵠⲆⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃᐃΔΔⵠΔᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠⵠⲆᐃⲆⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": "ExpertyAnimations",
				name: "Lava Dragon Version 2"
			}, {
				id: 124,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⵠⵠⲆⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆᐃⵠⲆΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆΔⲆᐃⲆᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔΔᐃΔⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Lava Dragon Version 3"
			}, {
				id: 45,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃᐃΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⲆⵠΔⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃᐃⲆⵠΔᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠⵠⲆⵠᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[249],
				name: "Ice Dragon Version 1"
			}, {
				id: 46,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃᐃᐃⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆΔΔΔⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠⵠⵠⵠⵠΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃᐃᐃᐃⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[505],
				name: "Ice Dragon Version 2"
			}, {
				id: 108,
				"ⵠⵠⲆ": ΔⲆ.ΔΔΔᐃΔΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⲆΔΔᐃⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠΔⵠⲆᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆⵠⲆⲆⵠⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Ice Dragon Version 3"
			}, {
				id: 123,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⲆΔᐃᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆΔⲆⲆⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⵠᐃΔⵠⵠΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃⲆⲆΔΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Baby Dragon Version 1"
			}, {
				id: 128,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆᐃᐃᐃⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⵠⵠΔⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔⲆΔᐃⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠΔⵠⵠⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[7],
				name: "Baby Dragon Version 2"
			}, {
				id: 125,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⵠⲆⵠᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⵠΔᐃⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃⲆᐃᐃⵠΔⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆΔⲆⲆⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Baby Lava"
			}, {
				id: 47,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⵠᐃᐃΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆⲆΔᐃⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔᐃⲆⲆⵠΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔΔⵠΔⲆᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Kraken"
			}, {
				id: 129,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃΔⲆΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⲆⲆᐃⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆⲆᐃᐃᐃᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔᐃΔᐃᐃⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Sandworm"
			}, {
				id: 63,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⲆᐃᐃⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆᐃⲆΔⵠⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃⲆΔⵠᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃⵠⵠⵠΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr. Golden Bread"
			}, {
				id: 67,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃᐃⵠΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔᐃΔΔⲆⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⵠΔᐃΔΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⵠⲆΔΔᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": "ForgottenHeroe",
				name: "Starver Ores"
			}, {
				id: 130,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆⲆⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⲆΔΔᐃΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⲆⲆⲆⵠⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃⵠⵠⲆⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Poo"
			}, {
				id: 89,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃΔⵠΔᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔΔᐃⵠⵠⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⵠᐃᐃΔᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ⲆΔᐃⵠⵠΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": "Poinet",
				name: "Volcano Starver"
			}, {
				id: 112,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⲆΔΔⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃΔⲆᐃΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⵠⵠⵠᐃᐃⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠⲆᐃⵠΔᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Lava Starver"
			}, {
				id: 183,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆΔΔΔⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⲆΔᐃⵠⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔⵠᐃΔᐃⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃᐃᐃᐃⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Revaster"
			}, {
				id: 192,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔᐃⲆᐃⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⲆⲆᐃᐃᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠᐃᐃᐃᐃΔⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃⲆΔΔⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Awakened"
			}, {
				id: 194,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⵠⵠΔⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⵠⵠⲆΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔᐃᐃⵠⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆᐃⲆΔᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Ice Dragon"
			}, {
				id: 236,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆᐃⵠΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠᐃᐃᐃⲆᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃΔⵠΔᐃΔ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠᐃⲆⲆᐃᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Crystal Dragon"
			}, {
				id: 208,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⲆⵠⵠⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⵠⵠⲆΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃᐃᐃΔΔᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ⵠⲆᐃᐃΔⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Bone Dragon"
			}, {
				id: 216,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃΔΔᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⲆⵠⵠⲆΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔᐃΔΔᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆᐃᐃⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Warg Ghost"
			}, {
				id: 226,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔΔⲆᐃᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃΔᐃⲆⵠᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠΔΔⵠΔⲆⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ΔⲆᐃᐃⵠⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Cursed"
			}, {
				id: 48,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃⲆⵠⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⵠΔᐃᐃⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ΔΔᐃⵠⲆⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆᐃⲆΔᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ,
				"ΔΔⲆ": Δ[463],
				name: "Robot"
			}, {
				id: 110,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔΔⲆⵠΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⲆⵠⵠⵠΔ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃΔⵠⲆᐃᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⵠⲆᐃⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ,
				"ΔΔⲆ": Δ[358],
				name: "Blue Butterfly"
			}, {
				id: 157,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔᐃᐃᐃⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⲆⵠⲆΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆᐃΔᐃᐃⵠⲆ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆᐃΔⲆΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ,
				"ΔΔⲆ": Δ[463],
				name: "Yrifox"
			}, {
				id: 165,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠΔⵠΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⵠⲆᐃΔᐃ,
				"ΔⲆᐃⵠ": ΔⲆ.ᐃΔᐃⵠᐃⲆⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆⵠΔⲆⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ,
				"ΔΔⲆ": "OmarJr13",
				name: "Blob Skin"
			}, {
				id: 237,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔΔΔⲆΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠᐃΔΔΔⵠ,
				"ΔⲆᐃⵠ": ΔⲆ.ⵠⲆⵠΔⲆᐃⵠ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃΔⲆΔᐃΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ,
				"ΔΔⲆ": "NotBonnie",
				name: "NotBonnie"
			}, {
				id: 238,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃᐃΔⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆΔⲆᐃⲆⲆ,
				"ΔⲆᐃⵠ": ΔⲆ.ⲆΔᐃΔᐃⵠᐃ,
				"ⵠΔⵠⵠ": ΔⲆ.ᐃⲆⲆⵠⲆⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ,
				"ΔΔⲆ": "NotBonnie",
				name: "Cynder"
			}],
			"ⲆⲆⲆⲆ": [{
				id: 0,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⲆᐃⵠΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⵠΔⵠⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[108],
				name: "Bag 1"
			}, {
				id: ⲆⵠⲆ,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃΔⲆⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔΔⵠⵠⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[108],
				name: "Old Bag"
			}, {
				id: 2,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⲆⲆᐃᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⲆⵠⲆΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Bag 2"
			}, {
				id: ΔΔⲆᐃ,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆΔⲆᐃⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔΔᐃᐃᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Bag 3"
			}, {
				id: 4,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃΔⲆⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃᐃΔᐃⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Bag 4"
			}, {
				id: ⵠⵠⲆⵠ,
				"ⵠⵠⲆ": ΔⲆ.ΔΔΔⵠᐃᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠᐃⲆⲆΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Bag 5"
			}, {
				id: ΔΔⵠⵠΔ,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⲆΔⲆⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⲆΔⲆᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Wood Pickaxe Bag"
			}, {
				id: 19,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⲆᐃⵠⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⲆᐃΔⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[117],
				name: "Wood Carrier"
			}, {
				id: 37,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃΔⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠᐃΔⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Bag 6"
			}, {
				id: 39,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⲆⵠⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆⲆΔΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Bag with Wooden Swords"
			}, {
				id: 44,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆΔⲆⲆᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⲆᐃⲆᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[279],
				name: "Big Bag"
			}, {
				id: 7,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆᐃΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃΔⵠⲆⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[279],
				name: "Bag 6"
			}, {
				id: ⲆⲆΔᐃΔ,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⵠⲆᐃΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⲆⵠⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Easter Bag"
			}, {
				id: ᐃⲆⲆⵠⲆⵠⵠ,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃᐃⵠⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠᐃΔΔᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Star Bag"
			}, {
				id: 10,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠⵠΔᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠΔΔⲆᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Winter Bag"
			}, {
				id: 20,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⲆⲆᐃᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆᐃⲆⲆⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[117],
				name: "Stone Carrier"
			}, {
				id: 24,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠⵠᐃᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⵠᐃΔⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Stone Pickaxe Bag"
			}, {
				id: ΔⵠⵠⵠΔ,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔᐃΔⲆᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⵠⲆⵠⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[279],
				name: "Bag Camouflage"
			}, {
				id: 38,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆᐃⲆΔᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆⵠΔᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Bag with Stone Swords"
			}, {
				id: 54,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃⲆΔⲆⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆΔᐃⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Cow Bag"
			}, {
				id: 59,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠᐃᐃΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆⵠⲆⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[533],
				name: "Starver Bag"
			}, {
				id: 62,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆᐃⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⵠⵠⵠᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[533],
				name: "Crystal Sky Bag"
			}, {
				id: 71,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃⵠⲆΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⲆⵠⲆΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Portable Furnace"
			}, {
				id: 78,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⵠⲆΔᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠΔᐃⲆⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Crate Bag"
			}, {
				id: ΔᐃΔᐃΔⵠᐃ,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⵠΔⲆⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⵠΔⵠⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Honey Pot"
			}, {
				id: 21,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⲆᐃⲆⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠᐃΔⵠⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[117],
				name: "Gold Carrier"
			}, {
				id: 30,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔᐃⵠⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠᐃΔⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Gold Pickaxe Bag"
			}, {
				id: 29,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔᐃΔΔᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃᐃⵠΔΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": "Ariel",
				name: "Mr and Mrs Bakers"
			}, {
				id: 41,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃⵠΔⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⲆⵠⲆᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Bag with Golden Swords"
			}, {
				id: 47,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔⲆⵠⵠᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⲆᐃⲆⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Explorer Bag"
			}, {
				id: 51,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔᐃΔᐃΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔᐃᐃᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Bamboo Bag"
			}, {
				id: 53,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠᐃⲆΔᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⲆᐃⲆⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Mummy Bag"
			}, {
				id: 58,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⲆⵠᐃⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠΔⵠⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[7],
				name: "Watermelon Bag"
			}, {
				id: 60,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃΔᐃⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⵠⲆᐃⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Garlic Bag"
			}, {
				id: 61,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆᐃⵠᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⲆΔᐃⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Pumpkin Bag"
			}, {
				id: 64,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠΔⵠⵠⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⵠΔⵠΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[248],
				name: "Oil Barel bag"
			}, {
				id: 67,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⲆᐃᐃΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆᐃΔⲆᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Tree Bag"
			}, {
				id: 70,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⲆᐃᐃⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠᐃᐃΔΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Lit Portable Furnace"
			}, {
				id: 72,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠᐃᐃⵠΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠΔΔⲆⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Christmas Berry Bush Bag"
			}, {
				id: 73,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠΔⲆⵠᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⲆΔΔΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Berry Bush Bag"
			}, {
				id: 74,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⲆΔΔⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⵠⲆⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Fall Berry Bush Bag"
			}, {
				id: 76,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⵠΔⵠⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⵠⵠⵠⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Reclaimed Bag"
			}, {
				id: ⲆⲆⵠⲆⵠⲆⲆ,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⵠⲆⵠᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⵠⲆΔⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "a Rabbit in my Bag"
			}, {
				id: ⲆΔⲆΔⵠⲆⲆ,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃΔΔⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⲆⲆⵠΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Bird's nest"
			}, {
				id: ⵠⲆᐃᐃⵠⵠᐃ,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔᐃⲆΔΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠΔᐃⵠᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "a Fish on your Back"
			}, {
				id: 17,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆΔⵠΔⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔᐃⲆΔᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "a Squirrel in my Bag"
			}, {
				id: 22,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠΔᐃΔΔΔ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⲆΔᐃᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[117],
				name: "Diamond Carrier"
			}, {
				id: ⲆⲆⲆΔΔΔⵠ,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃⲆⵠⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⲆᐃᐃⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Resources Bag"
			}, {
				id: 32,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠΔⵠⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⲆⵠⲆΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Diamond Pickaxe Bag"
			}, {
				id: 40,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⵠΔⵠᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆⵠΔⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Bag with Diamond Swords"
			}, {
				id: 45,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔᐃⵠⲆⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⲆⵠⲆⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "My Cake Bag"
			}, {
				id: 46,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆᐃⵠⵠⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆΔⵠⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "My Christmas Cake Bag"
			}, {
				id: 52,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⲆⲆⵠᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⲆⲆⲆⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[7],
				name: "Fish Bag"
			}, {
				id: 65,
				"ⵠⵠⲆ": ΔⲆ.ΔΔΔᐃⲆΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⵠᐃⵠⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Cloud Bag"
			}, {
				id: 68,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆΔⵠⵠᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆΔᐃⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Bee Bag"
			}, {
				id: 77,
				"ⵠⵠⲆ": ΔⲆ.ΔΔΔⲆⲆⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆᐃᐃᐃΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Bag and Bedroll"
			}, {
				id: 80,
				"ⵠⵠⲆ": ΔⲆ.ΔΔΔⲆⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔΔⲆᐃⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Peasant's Bag"
			}, {
				id: 81,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⲆᐃⲆⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⵠΔΔⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Probably Stolen Bag"
			}, {
				id: 48,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃᐃᐃΔᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⲆⵠᐃⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": "fatant",
				name: "Natural Bag"
			}, {
				id: 23,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠΔⲆᐃΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⲆΔⲆᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[117],
				name: "Amethyst Carrier"
			}, {
				id: 25,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃᐃⵠᐃΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⲆᐃᐃⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Amethyst Pickaxe Bag"
			}, {
				id: 28,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃΔΔⲆⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ΔΔᐃΔΔᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Your Baby"
			}, {
				id: 33,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠᐃⵠΔᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔᐃⲆⵠⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Tropical Bag"
			}, {
				id: 43,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⵠᐃᐃᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⵠᐃⵠΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Bag with Amethyst Swords"
			}, {
				id: 35,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⲆΔΔᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⵠΔⲆⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Ice Bag"
			}, {
				id: 50,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⲆᐃᐃᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆΔⲆᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Thornbush Bag"
			}, {
				id: 56,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃⵠⵠⵠⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔᐃᐃⲆⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Autumn Bag"
			}, {
				id: 57,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔᐃⵠΔΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆⵠΔΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Dino Egg Bag"
			}, {
				id: 66,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆᐃⵠᐃⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆΔⵠⲆᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Magic Cloud Bag"
			}, {
				id: 69,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⵠⵠᐃⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⵠΔⲆⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Chest Bag"
			}, {
				id: 75,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃᐃΔⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⲆᐃⵠⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Spectum Bag"
			}, {
				id: 79,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠΔΔⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆᐃΔⵠⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Winter Peasant's Bag"
			}, {
				id: 31,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔⲆⵠⲆᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔΔΔⵠⵠⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[117],
				name: "Reidite Carrier"
			}, {
				id: 18,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠᐃΔΔΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠΔⵠΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[505],
				name: "Lava Bag"
			}, {
				id: 49,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃⵠⲆⵠⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⲆΔⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Lava Bag 2"
			}, {
				id: 36,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⲆᐃⵠⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⲆⵠΔᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Dragon Bag"
			}, {
				id: 55,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⵠⲆⲆⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆΔΔⲆⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Winter Ice Bag"
			}, {
				id: 26,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔⵠⲆⵠᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⵠᐃⵠΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Reidite Pickaxe Bag"
			}, {
				id: 27,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃΔⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⲆⲆⵠΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Octopus Bowl"
			}, {
				id: 34,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆᐃⵠⵠⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⵠⲆᐃⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Cave Bag"
			}, {
				id: 42,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆΔⲆᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃᐃΔⵠⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Bag with Reidite Swords"
			}, {
				id: 63,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆΔⲆⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃΔⲆΔΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Engineer Bag"
			}],
			"ⵠⵠⲆⵠᐃ": [{
				id: 0,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⲆⲆᐃΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃΔⲆⲆⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[463],
				name: "Wooden Dead Box"
			}, {
				id: ⲆⲆⲆᐃ,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⲆⵠⲆΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⲆⵠᐃΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[463],
				name: "Hidden item"
			}, {
				id: ⲆⲆΔΔ,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⲆⵠⲆⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔΔⵠⵠⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Wooden Box 1"
			}, {
				id: 3,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆᐃΔⲆΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠᐃⵠᐃΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Wooden Box 2"
			}, {
				id: 4,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠᐃᐃᐃⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔΔᐃⵠⵠΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Wooden Box 3"
			}, {
				id: 5,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⲆΔⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⵠⲆⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Broken Wooden Box"
			}, {
				id: 6,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃΔΔΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃᐃⲆⵠᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Wooden Box"
			}, {
				id: ΔᐃⲆΔᐃ,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠΔⲆⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃᐃⵠᐃⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Wooden Battle Box"
			}, {
				id: ΔⲆΔⲆⲆ,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃᐃⲆᐃⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃᐃᐃⲆΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Wooden Box with a Cross"
			}, {
				id: 9,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠᐃΔⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆΔⲆΔⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Wooden Box with Bubbles"
			}, {
				id: 10,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠᐃΔΔⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆᐃⲆΔⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Wooden Box with Eyes"
			}, {
				id: 11,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠᐃᐃⵠⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠᐃⵠΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Dark Wooden Box"
			}, {
				id: 38,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆᐃⲆⲆΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔΔⵠⲆᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": "Weddlz",
				name: "Noob Box"
			}, {
				id: 12,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔΔᐃᐃᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠᐃⲆᐃⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Wooden and Stone Box"
			}, {
				id: ⵠⵠⲆⵠⲆ,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠΔⲆᐃⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⲆⵠⲆᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Star Box 1"
			}, {
				id: 15,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔⵠᐃᐃⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⵠⵠΔⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Star Box 2"
			}, {
				id: 27,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⵠᐃⵠΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃΔⲆΔⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Flower Box"
			}, {
				id: 46,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆⵠⲆⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⵠᐃΔⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[7],
				name: "Blue Box"
			}, {
				id: 75,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⵠⵠⲆⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⲆⵠⲆΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Night Stars Crate"
			}, {
				id: 19,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⵠΔᐃΔΔ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⲆⲆⲆᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Beehive"
			}, {
				id: ⵠΔᐃⲆⵠᐃᐃ,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆΔᐃⵠΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔΔⵠⲆⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Wooden and Golden Box"
			}, {
				id: 21,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠᐃᐃΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⵠⵠᐃᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Gravestone"
			}, {
				id: 25,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃᐃΔᐃΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⵠⵠⲆⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[279],
				name: "Sky Box"
			}, {
				id: 29,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠΔΔᐃᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⲆⵠᐃΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[505],
				name: "Golden Box"
			}, {
				id: 34,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⵠⲆⲆⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃΔᐃΔΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[279],
				name: "Water Crate"
			}, {
				id: 35,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆΔⲆΔᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔΔΔΔⵠⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[279],
				name: "Glass Crate"
			}, {
				id: 70,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⲆᐃⲆᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⵠΔⲆⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[533],
				name: "Crystal Sky Box"
			}, {
				id: 74,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔΔᐃⵠᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠΔⲆᐃⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Reclaimed Crate"
			}, {
				id: 77,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⵠᐃΔΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃᐃⵠᐃᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Workplace Accident"
			}, {
				id: ᐃΔⲆⲆⲆ,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⲆᐃⵠⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃΔΔᐃⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Wooden and Diamond Box"
			}, {
				id: ⵠⲆΔⲆΔ,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔᐃΔⲆᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⵠⲆⵠᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Don't Hit Me"
			}, {
				id: 26,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔⵠⵠᐃⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⲆⲆⵠⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Underwater Box"
			}, {
				id: 31,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃᐃᐃⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠΔⵠⵠⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[279],
				name: "Items Pile"
			}, {
				id: 32,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃⵠⲆΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⵠⲆⵠᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Cake Box"
			}, {
				id: 33,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃΔⵠⵠⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⵠΔΔⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Christmas Cake Box"
			}, {
				id: 36,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⵠᐃᐃⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔⲆᐃⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": "Fukss",
				name: "Crab Box"
			}, {
				id: 42,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⵠⵠΔΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⵠⵠΔΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[7],
				name: "Fishing Box"
			}, {
				id: 72,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃΔⲆΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃΔᐃΔᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Storage Machine"
			}, {
				id: 22,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⲆⵠⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠᐃᐃⲆᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Let me out of here"
			}, {
				id: ΔⲆⵠᐃΔⲆⲆ,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃᐃⵠⲆⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃΔᐃΔⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Wooden and Amethyst Box"
			}, {
				id: 24,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆΔᐃΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⵠⵠⵠΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Aquarium"
			}, {
				id: 28,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆⵠᐃⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃᐃⲆΔΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Gift Box"
			}, {
				id: 40,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⲆΔΔⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆⲆᐃⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[ⵠⵠΔΔᐃΔΔ],
				name: "Open Watermelon Box"
			}, {
				id: 41,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆΔⲆⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⲆᐃᐃΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[ⵠⵠᐃΔᐃ],
				name: "Watermelon Box"
			}, {
				id: 39,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⲆᐃᐃⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃᐃⲆΔᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Thornbush Box"
			}, {
				id: 43,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆᐃᐃⲆᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⲆⲆⵠΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Rabbit in the Box"
			}, {
				id: 47,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃᐃΔⵠᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆⵠⵠⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Garlic Plot"
			}, {
				id: 48,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃⲆⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⲆᐃⲆⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Pumpkin Plot"
			}, {
				id: 78,
				"ⵠⵠⲆ": ΔⲆ.Ⲇᐃⵠⵠᐃᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⵠⲆⲆᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Spectrum Portal"
			}, {
				id: 45,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃΔⲆΔⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⲆᐃᐃᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Autumn Box"
			}, {
				id: 44,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⲆⲆΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⲆⵠΔΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Winter Box"
			}, {
				id: 20,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⵠⲆⲆⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔᐃᐃⲆᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Metal and Reidite Box"
			}, {
				id: 23,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⵠΔΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃΔⲆⲆᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Kraken Box"
			}, {
				id: 30,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔᐃΔⲆⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⲆΔᐃΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[505],
				name: "Lava Box"
			}, {
				id: 37,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⵠⲆⵠⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆⲆⲆΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Lava Box 2"
			}, {
				id: 49,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠᐃΔΔⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆΔⵠᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Rabbit"
			}, {
				id: 50,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆΔⵠΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃᐃⵠⵠΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Wolf"
			}, {
				id: 51,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃᐃⲆᐃΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃΔⵠᐃⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Spider"
			}, {
				id: 52,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃⲆⲆⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.Δⵠⵠⵠᐃⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Hawk"
			}, {
				id: 53,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⵠΔⲆⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⵠᐃΔⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Bear"
			}, {
				id: 54,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆΔⵠᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆΔᐃΔΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Fox"
			}, {
				id: 55,
				"ⵠⵠⲆ": ΔⲆ.ΔΔΔⵠΔⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠᐃⲆⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Baby Mammoth"
			}, {
				id: 56,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆΔΔⲆΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⵠΔᐃᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Mammoth"
			}, {
				id: 57,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆⵠⲆⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔΔⲆⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Sandworm"
			}, {
				id: 58,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆᐃⲆΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⵠⲆΔⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Vulture"
			}, {
				id: 59,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃΔᐃⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⵠⵠᐃΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Kraken"
			}, {
				id: 60,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃᐃΔⵠᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃᐃΔΔⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Piranha"
			}, {
				id: 61,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃᐃᐃⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆΔⲆΔᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Baby Dragon"
			}, {
				id: 62,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆΔⲆΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆᐃᐃΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Baby Lava"
			}, {
				id: 63,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆᐃᐃⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔΔΔⲆΔⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Dragon"
			}, {
				id: 64,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⵠΔⵠⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⵠΔᐃⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Penguin"
			}, {
				id: 65,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔΔᐃⵠᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⵠⵠᐃᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Lava Dragon"
			}, {
				id: 66,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆᐃⲆᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆΔΔⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Boar"
			}, {
				id: 67,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⵠΔᐃⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⵠΔᐃⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Fire mob"
			}, {
				id: 68,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃΔⵠⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⵠⲆⲆⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the Crab"
			}, {
				id: 69,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⵠⵠⵠᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆᐃΔⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Box of the King Crab"
			}, {
				id: 71,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⲆΔⵠᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠᐃΔⵠⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Dragon Box"
			}, {
				id: 73,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔᐃΔⵠⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⲆⵠⲆᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Rekt"
			}, {
				id: 76,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆΔⵠⲆⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠⵠΔΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Sleeping Tamon Dragon"
			}],
			"Δⵠᐃᐃⵠ": [{
				id: 0,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔΔⲆⵠⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⵠⵠⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[108],
				name: "Book 1"
			}, {
				id: ᐃⲆⲆ,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃⲆΔᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠΔᐃΔⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Book 2"
			}, {
				id: 2,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃΔⲆⵠΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⵠΔⵠᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Book 3"
			}, {
				id: 3,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⵠⵠΔΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃΔⵠⲆⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Book 4"
			}, {
				id: 4,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⵠⵠᐃΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆΔⲆΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Damaged Book 1"
			}, {
				id: ᐃⲆⲆΔⵠΔⲆ,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃΔΔⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⲆΔᐃⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": "SeveR",
				name: "Damaged Book 2"
			}, {
				id: 5,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆᐃⵠᐃᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⲆᐃᐃⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": "Doctorpus",
				name: "Scroll"
			}, {
				id: 6,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⲆΔΔΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔᐃΔⲆᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": "Doctorpus",
				name: "Clipboard"
			}, {
				id: 7,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⲆⲆⵠΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃΔΔⵠΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Seed Book"
			}, {
				id: ⲆᐃⲆⵠᐃᐃⵠ,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⲆᐃⲆᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⵠⲆᐃⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Camo Book"
			}, {
				id: 24,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃΔᐃⲆΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆᐃⲆⵠⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[279],
				name: "Stone Tablet"
			}, {
				id: 47,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆᐃⵠⲆΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⵠⲆⵠⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Reclaimed Book"
			}, {
				id: ⵠᐃᐃⵠⵠ,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃΔⵠΔᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔᐃⲆⵠⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Star Book"
			}, {
				id: ΔΔⲆⵠⵠ,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⲆⲆΔᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⲆΔⲆΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Gold Book"
			}, {
				id: ⵠΔⵠᐃⲆⵠⵠ,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃΔᐃΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⵠΔⲆᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Old Mysterious Paper"
			}, {
				id: ᐃⲆᐃᐃᐃⲆΔ,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃΔΔΔⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔΔΔᐃⵠⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Gold Engraving"
			}, {
				id: 25,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃΔⵠⵠᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⵠⲆⲆⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": "fatant",
				name: "Ant Book"
			}, {
				id: 32,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⲆⵠΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠΔᐃΔⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Mummy Book"
			}, {
				id: 37,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆⲆΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⲆᐃⲆᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Garlic Book"
			}, {
				id: 38,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔΔⵠᐃⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ΔΔᐃⲆⲆⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Pumpkin Book"
			}, {
				id: 39,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃᐃᐃΔⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔΔΔⲆΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Christmas Tree Book"
			}, {
				id: ΔᐃⲆΔⲆⵠⵠ,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃΔΔΔⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⲆΔⲆᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Diamond Book"
			}, {
				id: 9,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆᐃᐃⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃΔⲆⵠᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Obscure Book"
			}, {
				id: 16,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠΔⵠΔⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⲆΔᐃⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Rolled Parchment"
			}, {
				id: 22,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⲆΔⵠⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⵠᐃΔΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Cake Book"
			}, {
				id: 23,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔᐃⲆⲆⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⲆⵠᐃⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Christmas Cake Book"
			}, {
				id: 30,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⲆⵠⲆΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔΔⵠⵠⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[ΔΔⲆⲆⲆ],
				name: "Fish Book"
			}, {
				id: 31,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆᐃⲆⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔᐃᐃⵠⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[533],
				name: "Once upon a time"
			}, {
				id: 48,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⵠⲆⵠΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⵠΔⲆᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Chrono Clock"
			}, {
				id: 49,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃΔΔΔᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠΔⵠᐃⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Recipe Book"
			}, {
				id: 13,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆᐃΔΔⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⵠΔᐃΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Amethyst Book"
			}, {
				id: 28,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⲆⵠᐃⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⲆᐃⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Paint Pallet"
			}, {
				id: 29,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⲆⵠΔᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆᐃⲆⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[533],
				name: "Watermelon Book"
			}, {
				id: 27,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⵠⲆᐃⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⵠᐃⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Thornbush Book"
			}, {
				id: 35,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠΔΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⲆΔᐃⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Menu"
			}, {
				id: 36,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⵠⵠᐃⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔⲆΔⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[533],
				name: "Lover Letter"
			}, {
				id: 40,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⲆΔⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃΔⵠᐃⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Fresh-Baked Cookies"
			}, {
				id: 41,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆᐃⵠⵠⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⵠΔΔΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Inside, there is just a book."
			}, {
				id: 45,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃᐃⵠΔⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⲆⵠⵠⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Crafting Machine"
			}, {
				id: 33,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃΔⵠΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⲆⲆᐃⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Winter Book"
			}, {
				id: 34,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆᐃᐃⵠⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⵠⲆⵠᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Autumn Book"
			}, {
				id: 14,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔⵠᐃⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⵠⲆᐃΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Reidite Book"
			}, {
				id: ΔⲆΔᐃΔ,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆⲆⵠⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆᐃⲆⵠⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[505],
				name: "Lava Book"
			}, {
				id: 26,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆⵠᐃⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆᐃⵠⲆᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Lava Book 2"
			}, {
				id: ΔⲆⵠⵠⵠ,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⲆᐃⵠⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⲆⵠⵠᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[505],
				name: "Ocean Mystery"
			}, {
				id: 21,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃΔᐃⵠⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔⵠⲆᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Dragon Book"
			}, {
				id: 42,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠᐃⵠᐃΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔᐃⵠΔⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Engineer Book"
			}, {
				id: 43,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⲆⵠᐃⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔΔΔⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Nightmare Book"
			}, {
				id: 44,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆΔⲆⵠΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠᐃΔᐃⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[511],
				name: "Mystery Book"
			}, {
				id: 46,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⲆⲆⲆⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃᐃⲆᐃΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Cursed Book"
			}],
			"ⵠⵠΔⲆᐃ": [{
				id: ⵠⲆⵠ,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠΔⵠᐃᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠΔⵠᐃᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[108],
				name: "Nothing"
			}, {
				id: Δᐃᐃⵠ,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⲆⲆᐃⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⵠⵠⲆⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[108],
				name: "Pink Cheeks"
			}, {
				id: 3,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆⵠⲆⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃΔⲆⵠⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[108],
				name: "Heart"
			}, {
				id: 1,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⲆⲆΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃΔΔΔᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[108],
				name: "Bandage 1"
			}, {
				id: 4,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃⵠᐃⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆᐃᐃⲆᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⲆⲆⵠΔΔ,
				"ΔΔⲆ": Δ[108],
				name: "Flower 1"
			}, {
				id: ΔⵠⲆᐃⵠ,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃΔΔⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⵠᐃⲆⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Bow 1"
			}, {
				id: 6,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⲆᐃᐃΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔΔⵠⲆᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Bandage 2"
			}, {
				id: ⵠΔⵠΔᐃ,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠᐃᐃⵠΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠᐃᐃΔⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[108],
				name: "Flower 2"
			}, {
				id: ΔΔⵠⵠⵠ,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆΔⲆⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⵠᐃΔⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Bandage 3"
			}, {
				id: 36,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔᐃΔΔΔΔ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⲆΔⵠⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Foliage"
			}, {
				id: 59,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆΔᐃⲆⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⲆⲆⲆⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[463],
				name: "Peaceful"
			}, {
				id: 67,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃΔᐃⵠΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⵠᐃⵠΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[358],
				name: "Sparkles"
			}, {
				id: 68,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠᐃⲆⲆⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠΔᐃⵠᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[358],
				name: "Luxury"
			}, {
				id: 69,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆΔΔⲆΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠᐃⲆⲆⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⲆΔⲆ,
				"ΔΔⲆ": Δ[358],
				name: "Snow Flakes Crown"
			}, {
				id: 17,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⲆᐃΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.Δⵠᐃᐃᐃⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Glasses 1"
			}, {
				id: ᐃᐃΔⵠⵠ,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃᐃᐃⲆⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔⵠⵠⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Bow 2"
			}, {
				id: ⲆⲆΔᐃᐃⲆⵠ,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠᐃⵠΔΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⵠΔᐃᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Little Stars"
			}, {
				id: ᐃΔΔⵠⲆⵠᐃ,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃⵠΔⵠΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆᐃⲆⵠᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Pirate Eye Patch 1"
			}, {
				id: 44,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⵠᐃᐃΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠΔⵠᐃⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Pirate Eye Patch 2"
			}, {
				id: 23,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃΔⵠᐃΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⵠⵠⵠΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Clown nose"
			}, {
				id: ΔⲆⲆⲆⲆⵠⲆ,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⲆⲆΔΔΔ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠᐃΔⲆΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Eye Patch"
			}, {
				id: 30,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⲆⲆⲆΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆᐃΔⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Flower 3"
			}, {
				id: 38,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠᐃⲆΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔᐃᐃⵠΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[505],
				name: "False Nose"
			}, {
				id: 74,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⲆᐃᐃᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⵠΔⲆⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Red Cloth"
			}, {
				id: 75,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆᐃΔΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⲆᐃΔᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Blue Cloth"
			}, {
				id: 79,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃᐃΔᐃⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃΔⵠΔⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Transparent Mask"
			}, {
				id: 89,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⵠⵠⵠⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆᐃᐃⵠⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[70],
				name: "Starve.io Anime"
			}, {
				id: 94,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⲆΔᐃⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⵠⲆⲆᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": "Ant",
				name: "Hero Mask"
			}, {
				id: ΔⲆΔΔΔ,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⵠⵠᐃΔΔ,
				"ᐃΔᐃ": ΔⲆ.ΔΔᐃⵠᐃΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "This starver is mad"
			}, {
				id: 104,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⲆΔⵠΔΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠΔΔⵠᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Scars"
			}, {
				id: 106,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆᐃΔΔⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⲆΔⲆⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "In Search of Intelligence"
			}, {
				id: 109,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠΔⵠⵠΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⲆⲆᐃⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Reclaimed Bandage"
			}, {
				id: 111,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⵠΔΔⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆΔᐃⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Unwrap Starver for Gift"
			}, {
				id: 15,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃⵠⲆⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆᐃΔΔⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Star Glasses"
			}, {
				id: 21,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃⲆⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆᐃⵠΔⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Great-aunt's Glasses"
			}, {
				id: 24,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃᐃᐃᐃⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔᐃᐃᐃⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Little Starver"
			}, {
				id: 22,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆᐃΔᐃⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔⲆᐃⲆΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Little Glasses"
			}, {
				id: ⲆⵠⵠᐃⵠΔⵠ,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔΔⵠᐃⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠᐃΔᐃᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Flower Chain"
			}, {
				id: 29,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆⵠΔΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠᐃⲆⵠⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Horns"
			}, {
				id: 31,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⵠᐃⲆᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⵠᐃᐃΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Golden Flower"
			}, {
				id: 40,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃΔⵠᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔΔⲆⵠΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Sleeping Mask"
			}, {
				id: 57,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⵠΔᐃⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔⵠΔⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[513],
				name: "Fish on your head"
			}, {
				id: 58,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆⵠᐃΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⵠⲆᐃⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Rose"
			}, {
				id: 91,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆᐃΔⲆⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⲆⲆΔΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[248],
				name: "Grey Scarf"
			}, {
				id: 92,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔΔΔΔᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⲆⲆⵠΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[248],
				name: "Black Scarf"
			}, {
				id: 93,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃᐃⵠΔⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔⲆᐃⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[248],
				name: "Skull Mask"
			}, {
				id: 95,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔⵠΔⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⵠⲆΔⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Golden Monocle"
			}, {
				id: 96,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⲆᐃⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⲆⵠᐃᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "A simple instruction"
			}, {
				id: 102,
				"ⵠⵠⲆ": ΔⲆ.ΔΔᐃᐃⵠΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆⲆⵠᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Garland"
			}, {
				id: 103,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⵠΔᐃⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠΔΔΔⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "The Doormat"
			}, {
				id: 108,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⲆᐃⵠΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆΔⲆᐃᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Copium Tanks"
			}, {
				id: 117,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆᐃⲆⵠⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔΔⲆᐃΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Eyelashes"
			}, {
				id: 118,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆⲆⵠΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠⲆΔⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Helmet Prototype"
			}, {
				id: ᐃΔᐃᐃᐃᐃᐃ,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃΔΔΔᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⵠᐃΔⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Fancy Glasses"
			}, {
				id: 25,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⵠᐃⲆⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⲆᐃΔⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Medecin Mask"
			}, {
				id: 14,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆΔⲆΔⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⲆᐃⵠⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mr. Mayor"
			}, {
				id: 19,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⵠᐃᐃⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ⲆΔᐃᐃⵠᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Sunglasses 2"
			}, {
				id: 28,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⲆⵠΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃⲆΔⵠⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[358],
				name: "Starfish"
			}, {
				id: 37,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆᐃΔΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⵠⲆⲆᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Berry"
			}, {
				id: 39,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⵠΔⲆᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⲆⲆΔᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Flake"
			}, {
				id: 43,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⲆᐃΔᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆᐃⵠᐃⲆⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Leaf "
			}, {
				id: 61,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔᐃΔⲆΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⵠⵠⵠΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "A sword in your head"
			}, {
				id: 62,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⵠⲆᐃⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⲆⲆⲆⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Winter Scarf"
			}, {
				id: 64,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⲆⲆΔⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⵠᐃΔΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Winter Scarf 2"
			}, {
				id: 66,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠⲆᐃᐃᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔᐃⲆᐃᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Winter Scarf 3"
			}, {
				id: 70,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔᐃᐃΔⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⲆΔⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mask with animal tracks"
			}, {
				id: 71,
				"ⵠⵠⲆ": ΔⲆ.ΔᐃⵠᐃᐃⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⲆⵠΔⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Spring Mask"
			}, {
				id: 72,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔᐃⵠᐃΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠⵠᐃᐃᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Pink Mask"
			}, {
				id: 73,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃᐃᐃᐃⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃΔΔⲆⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Blue Mask"
			}, {
				id: 76,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠΔⲆΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠⵠΔⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Military Mask"
			}, {
				id: 77,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠΔⵠⲆⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⲆⵠΔᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Orange Mask"
			}, {
				id: 78,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆΔᐃᐃᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔⲆⲆᐃⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "White and Red Points Mask"
			}, {
				id: 80,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⵠⲆΔΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔΔᐃΔⲆⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Stick out your tongue Mask"
			}, {
				id: 81,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⵠⲆᐃᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠΔᐃᐃΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Two Teeth Mask"
			}, {
				id: 82,
				"ⵠⵠⲆ": ΔⲆ.ΔΔΔⲆⲆⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⲆΔⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Make-up Mask"
			}, {
				id: 83,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⲆⵠⵠⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆᐃⵠⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Sad Mask"
			}, {
				id: 84,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠⵠⵠΔΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠΔᐃⵠⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Happy Mask"
			}, {
				id: 90,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃΔⵠΔΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠΔⲆΔΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[511],
				name: "Blood"
			}, {
				id: 101,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆⵠⵠⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃΔⲆᐃⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Axed Plans"
			}, {
				id: 105,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆᐃᐃΔⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔΔΔⲆⲆᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Saddle"
			}, {
				id: 113,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⲆᐃⵠⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆⵠⵠⵠᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "I see"
			}, {
				id: 114,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⲆΔᐃΔΔ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⵠⵠⵠⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "I have no body and I must dress"
			}, {
				id: 115,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆΔⵠⲆⲆⲆ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠᐃΔⵠᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ⵠⲆᐃᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Cursed Crown"
			}, {
				id: 27,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⵠⲆΔᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔᐃΔᐃⵠⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Clown Face"
			}, {
				id: ⵠⵠⵠⲆᐃ,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆΔᐃⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⵠΔᐃΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Sunglasses 3"
			}, {
				id: 32,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⲆᐃⵠⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⲆⲆᐃΔᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Engineer's Glasses"
			}, {
				id: 33,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆⵠⲆᐃⲆᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⵠⲆΔⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Engineer's Monocle"
			}, {
				id: 34,
				"ⵠⵠⲆ": ΔⲆ.ⵠⲆΔⵠⲆᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆⲆᐃᐃⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mauve's butt"
			}, {
				id: 41,
				"ⵠⵠⲆ": ΔⲆ.ⵠⵠᐃᐃⵠⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠᐃⲆⲆⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Lapa Head"
			}, {
				id: 42,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆⵠⵠⲆⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠᐃΔᐃᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Lapa Head "
			}, {
				id: 85,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⲆⵠΔΔⲆ,
				"ᐃΔᐃ": ΔⲆ.Δᐃᐃⵠⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Mask and Glasses"
			}, {
				id: 110,
				"ⵠⵠⲆ": ΔⲆ.ᐃⵠΔᐃΔᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠᐃΔΔᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ᐃΔⲆᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Spectrum Pet"
			}, {
				id: 60,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⵠⲆᐃⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠᐃⵠΔⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Jason"
			}, {
				id: 26,
				"ⵠⵠⲆ": ΔⲆ.ⲆⲆᐃΔⵠⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⲆΔⵠΔⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Devil Horns"
			}, {
				id: ᐃᐃⲆᐃᐃΔⲆ,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃΔᐃΔᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠⲆⵠᐃᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Big Boss"
			}, {
				id: 35,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆⵠⲆΔᐃ,
				"ᐃΔᐃ": ΔⲆ.ⵠⵠᐃΔⵠⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Baby Kraken"
			}, {
				id: 63,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⲆⲆᐃᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆΔΔΔΔⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Deer Antlers"
			}, {
				id: 65,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆΔⵠᐃᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⲆΔᐃⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Baby Dragon on your head"
			}, {
				id: 86,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠⲆᐃΔⵠⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠⵠΔᐃᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Gaz Mask and Glasses"
			}, {
				id: 87,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃᐃⲆΔᐃⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔΔⲆΔⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Pink Gaz Mask and Glasses"
			}, {
				id: 88,
				"ⵠⵠⲆ": ΔⲆ.ᐃᐃⵠΔⲆΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆⲆⲆⲆⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[463],
				name: "Engineer Glasses"
			}, {
				id: 97,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠᐃΔᐃΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃΔⵠΔⵠΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Jarred Horns"
			}, {
				id: 98,
				"ⵠⵠⲆ": ΔⲆ.ⲆⵠΔⵠⲆΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆᐃⲆⵠⵠⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Curved Horns"
			}, {
				id: 99,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⵠᐃⵠΔⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃΔΔⲆΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Evil Goat Horns"
			}, {
				id: 107,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⵠᐃⲆⵠᐃ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃΔᐃΔⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Decorative Earmuffs"
			}, {
				id: 112,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⲆΔⵠⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃᐃᐃΔⲆⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Tamon Dragon Pet"
			}, {
				id: 116,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⵠⲆⵠⲆΔ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃᐃⵠⲆⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.Ⲇⵠⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "Blanket"
			}, {
				id: 45,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔΔⲆΔⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃᐃⵠⵠΔⲆᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "More than Level 5",
				level: 5
			}, {
				id: 46,
				"ⵠⵠⲆ": ΔⲆ.ᐃⲆⲆΔΔΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ΔⲆΔΔΔᐃⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "More than Level 10",
				level: 10
			}, {
				id: 47,
				"ⵠⵠⲆ": ΔⲆ.ⲆᐃⲆⵠⵠΔⲆ,
				"ᐃΔᐃ": ΔⲆ.ⲆⵠΔⵠⲆⵠⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "More than Level 15",
				level: ᐃᐃⵠΔⵠ
			}, {
				id: 48,
				"ⵠⵠⲆ": ΔⲆ.ΔΔⵠΔⵠⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⲆⲆⲆᐃᐃᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "More than Level 20",
				level: ⲆⲆᐃⵠⲆ
			}, {
				id: 49,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔΔᐃⵠⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠⲆᐃᐃⵠⲆⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "More than Level 25",
				level: 25
			}, {
				id: 50,
				"ⵠⵠⲆ": ΔⲆ.ΔⵠⲆᐃΔⲆⵠ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⵠΔᐃⵠᐃ,
				"ⲆⲆΔ": ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "More than Level 30",
				level: 30
			}, {
				id: 51,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔⵠⵠⲆⵠΔ,
				"ᐃΔᐃ": ΔⲆ.ΔⵠⲆⲆⵠᐃⵠ,
				"ⲆⲆΔ": ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "More than Level 35",
				level: 35
			}, {
				id: 52,
				"ⵠⵠⲆ": ΔⲆ.ⵠΔᐃⵠⲆΔΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃⵠⵠⲆΔΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "More than Level 40",
				level: 40
			}, {
				id: 53,
				"ⵠⵠⲆ": ΔⲆ.ΔⲆⲆᐃⲆᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠᐃⲆᐃΔᐃΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "More than Level 45",
				level: 45
			}, {
				id: 54,
				"ⵠⵠⲆ": ΔⲆ.ᐃΔⵠᐃⵠᐃΔ,
				"ᐃΔᐃ": ΔⲆ.ᐃΔΔΔΔΔⲆ,
				"ⲆⲆΔ": ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "More than Level 50",
				level: 50
			}, {
				id: 55,
				"ⵠⵠⲆ": ΔⲆ.ⲆΔⲆⵠΔⵠⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔᐃⵠⵠⲆΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "More than Level 55",
				level: 55
			}, {
				id: 56,
				"ⵠⵠⲆ": ΔⲆ.ⵠᐃⲆΔⵠᐃⵠ,
				"ᐃΔᐃ": ΔⲆ.ⵠΔⲆⲆⲆΔΔ,
				"ⲆⲆΔ": ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
				"ΔΔⲆ": Δ[108],
				name: "More than Level 60",
				level: 60
			}]
		};
		ⵠΔᐃⲆ.ᐃᐃⲆᐃᐃᐃΔ = ⵠΔᐃΔⵠΔⲆ(ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ, 21);
		ⵠΔᐃⲆ.ΔΔΔⵠᐃΔⵠ = ⵠΔᐃΔⵠΔⲆ(ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ, 20);
		Ⲇⵠ[ⵠ.ᐃᐃᐃΔⲆᐃᐃ] = [];
		Ⲇⵠ[ⵠ.Ⲇᐃᐃⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⲆⵠᐃ] = [];
		Ⲇⵠ[ⵠ.Δⵠᐃᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆᐃ] = [];
		for (var Δᐃ = 0; ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ.length > Δᐃ; Δᐃ++) {
			Ⲇⵠ[ⵠ.ᐃᐃᐃΔⲆᐃᐃ][Δᐃ] = [ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[Δᐃ].ⵠⵠⲆ, ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[Δᐃ].ᐃΔᐃ];
			Ⲇⵠ[ⵠ.Ⲇᐃᐃⵠᐃ][Δᐃ] = [ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[Δᐃ].ΔⲆᐃⵠ, ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[Δᐃ].ⵠΔⵠⵠ]
		}
		for (var Δᐃ = ᐃΔΔ; ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ.length > Δᐃ; Δᐃ++) Ⲇⵠ[ⵠ.Δⵠᐃᐃⵠ][Δᐃ] = [ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ[Δᐃ].ⵠⵠⲆ, ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ[Δᐃ].ᐃΔᐃ];
		for (var Δᐃ = 0; ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ.length > Δᐃ; Δᐃ++) Ⲇⵠ[ⵠ.ⵠⵠⲆⵠᐃ][Δᐃ] = [ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ[Δᐃ].ⵠⵠⲆ, ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ[Δᐃ].ᐃΔᐃ];
		for (var Δᐃ = ΔΔⲆⲆ; ᐃᐃⵠⵠ.ⲆⲆⲆⲆ.length > Δᐃ; Δᐃ++) Ⲇⵠ[ⵠ.ⲆⲆⲆⲆ][Δᐃ] = [ᐃᐃⵠⵠ.ⲆⲆⲆⲆ[Δᐃ].ⵠⵠⲆ, ᐃᐃⵠⵠ.ⲆⲆⲆⲆ[Δᐃ].ᐃΔᐃ];
		for (var Δᐃ = 0; Δᐃ < ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ.length; Δᐃ++) Ⲇⵠ[ⵠ.ⵠⵠΔⲆᐃ][Δᐃ] = [ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ[Δᐃ].ⵠⵠⲆ, ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ[Δᐃ].ᐃΔᐃ]
	};

	function ᐃΔⵠ(ᐃ, ΔΔ, ΔΔⵠ, ⵠᐃⵠ) {
		ᐃ.beginPath();
		ᐃ.arc(ΔΔ, ΔΔⵠ, ⵠᐃⵠ, 0, Math.PI * ᐃⲆᐃⵠ)
	}

	function ᐃᐃᐃⵠᐃΔΔᐃⵠ(ᐃ, ᐃᐃᐃⵠ, ⵠⵠᐃⵠ, ⵠⲆᐃⲆ, ⵠⵠⵠⲆ, Δⵠⵠᐃ) {
		ⵠⲆᐃⲆ < 2 * Δⵠⵠᐃ && (Δⵠⵠᐃ = ⵠⲆᐃⲆ / ΔⲆⲆⵠ);
		2 * Δⵠⵠᐃ > ⵠⵠⵠⲆ && (Δⵠⵠᐃ = ⵠⵠⵠⲆ / ⵠᐃⵠⲆ);
		Δⵠⵠᐃ < Δⵠⵠ && (Δⵠⵠᐃ = 0);
		ᐃ.beginPath();
		ᐃ.moveTo(ᐃᐃᐃⵠ + Δⵠⵠᐃ, ⵠⵠᐃⵠ);
		ᐃ.arcTo(ᐃᐃᐃⵠ + ⵠⲆᐃⲆ, ⵠⵠᐃⵠ, ᐃᐃᐃⵠ + ⵠⲆᐃⲆ, ⵠⵠᐃⵠ + ⵠⵠⵠⲆ, 0);
		ᐃ.arcTo(ᐃᐃᐃⵠ + ⵠⲆᐃⲆ, ⵠⵠᐃⵠ + ⵠⵠⵠⲆ, ᐃᐃᐃⵠ, ⵠⵠᐃⵠ + ⵠⵠⵠⲆ, Δⵠⵠᐃ);
		ᐃ.arcTo(ᐃᐃᐃⵠ, ⵠⵠᐃⵠ + ⵠⵠⵠⲆ, ᐃᐃᐃⵠ, ⵠⵠᐃⵠ, ⵠΔⵠⲆ);
		ᐃ.arcTo(ᐃᐃᐃⵠ, ⵠⵠᐃⵠ, ᐃᐃᐃⵠ + ⵠⲆᐃⲆ, ⵠⵠᐃⵠ, Δⵠⵠᐃ);
		ᐃ.closePath()
	}

	function ᐃⵠΔⵠ(ᐃ, ᐃΔΔᐃ, ⵠᐃⵠ, ΔⲆⵠⵠ) {
		var ᐃᐃᐃⵠ = Math.PI * 2 / ᐃΔΔᐃ;
		ᐃ.beginPath();
		var ⵠⵠⲆⲆΔΔⲆ = [{
			x: ⵠᐃⵠ,
			y: 0
		}];
		var ⵠᐃᐃⵠⲆⵠⵠ = [];
		for (var Δᐃ = 1; Δᐃ < ᐃΔΔᐃ; Δᐃ++) {
			ⵠⵠⲆⲆΔΔⲆ.push({
				x: Math.sin(Δᐃ * ᐃᐃᐃⵠ) * ⵠᐃⵠ,
				y: ⵠᐃⵠ * Math.cos(Δᐃ * ᐃᐃᐃⵠ)
			});
			var ΔΔᐃΔᐃ = ⵠⵠⲆⲆΔΔⲆ.length;
			ⵠᐃᐃⵠⲆⵠⵠ.push(ⵠᐃΔᐃ.ΔⲆᐃⵠⵠᐃᐃ(ⵠⵠⲆⲆΔΔⲆ[ΔΔᐃΔᐃ - ⵠᐃⵠⲆ], ⵠⵠⲆⲆΔΔⲆ[ΔΔᐃΔᐃ - ᐃⵠⵠ]))
		}
		ⵠᐃᐃⵠⲆⵠⵠ.push(ⵠᐃΔᐃ.ΔⲆᐃⵠⵠᐃᐃ(ⵠⵠⲆⲆΔΔⲆ[ⵠⵠⲆⲆΔΔⲆ.length - ⵠⵠᐃ], ⵠⵠⲆⲆΔΔⲆ[0]));
		var ⲆᐃΔ = ⵠᐃᐃⵠⲆⵠⵠ[ⵠᐃᐃⵠⲆⵠⵠ.length - ⵠΔΔ];
		ᐃ.moveTo(ⲆᐃΔ.x, ⲆᐃΔ.y);
		for (var Δᐃ = ⲆⲆⵠⲆ; Δᐃ < ᐃΔΔᐃ; Δᐃ++) ᐃ.arcTo(ⵠⵠⲆⲆΔΔⲆ[Δᐃ].x, ⵠⵠⲆⲆΔΔⲆ[Δᐃ].y, ⵠᐃᐃⵠⲆⵠⵠ[Δᐃ].x, ⵠᐃᐃⵠⲆⵠⵠ[Δᐃ].y, ΔⲆⵠⵠ);
		ᐃ.closePath()
	}

	function ΔΔᐃⵠΔⵠΔ(ᐃ, ΔΔ, ΔΔⵠ, ⵠᐃⵠ, ᐃᐃᐃⵠ) {
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.arc(ΔΔ, ΔΔⵠ, ⵠᐃⵠ, 0, Δⵠᐃᐃ * Math.PI * ᐃᐃᐃⵠ)
	}

	function ᐃᐃᐃ(ᐃ, ᐃᐃᐃⵠ, ⵠⵠᐃⵠ, ⵠⲆᐃⲆ, ⵠⵠⵠⲆ, Δⵠⵠᐃ) {
		2 * Δⵠⵠᐃ > ⵠⲆᐃⲆ && (Δⵠⵠᐃ = ⵠⲆᐃⲆ / Δⵠᐃᐃ);
		ⵠⵠⵠⲆ < Δⵠⵠᐃ * Δᐃᐃⵠ && (Δⵠⵠᐃ = ⵠⵠⵠⲆ / 2);
		Δⵠⵠᐃ < ΔΔⲆⲆ && (Δⵠⵠᐃ = ΔΔⲆⲆ);
		ᐃ.beginPath();
		ᐃ.moveTo(ᐃᐃᐃⵠ + Δⵠⵠᐃ, ⵠⵠᐃⵠ);
		ᐃ.arcTo(ᐃᐃᐃⵠ + ⵠⲆᐃⲆ, ⵠⵠᐃⵠ, ᐃᐃᐃⵠ + ⵠⲆᐃⲆ, ⵠⵠᐃⵠ + ⵠⵠⵠⲆ, Δⵠⵠᐃ);
		ᐃ.arcTo(ᐃᐃᐃⵠ + ⵠⲆᐃⲆ, ⵠⵠᐃⵠ + ⵠⵠⵠⲆ, ᐃᐃᐃⵠ, ⵠⵠᐃⵠ + ⵠⵠⵠⲆ, Δⵠⵠᐃ);
		ᐃ.arcTo(ᐃᐃᐃⵠ, ⵠⵠᐃⵠ + ⵠⵠⵠⲆ, ᐃᐃᐃⵠ, ⵠⵠᐃⵠ, Δⵠⵠᐃ);
		ᐃ.arcTo(ᐃᐃᐃⵠ, ⵠⵠᐃⵠ, ᐃᐃᐃⵠ + ⵠⲆᐃⲆ, ⵠⵠᐃⵠ, Δⵠⵠᐃ);
		ᐃ.closePath()
	}

	function ᐃΔᐃᐃ(ⵠᐃⵠ, ⵠΔ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var ⵠⲆᐃⲆ = Math.sqrt(ⵠΔ.width * ⵠΔ.width + ⵠΔ.height * ⵠΔ.height);
		d2 = ⵠⲆᐃⲆ / ᐃⲆᐃⵠ;
		ⲆⲆ.width = ⵠⲆᐃⲆ;
		ⲆⲆ.height = ⵠⲆᐃⲆ;
		ᐃ.translate(d2, d2);
		ᐃ.rotate(ⵠᐃⵠ);
		ᐃ.drawImage(ⵠΔ, -ⵠΔ.width / ᐃᐃᐃᐃ, -ⵠΔ.height / 2);
		return ⲆⲆ
	}

	function ᐃⵠ(ᐃ, ⲆΔᐃᐃⵠ, ⲆⵠΔⵠ, ⲆⲆⵠ) {
		ⲆΔᐃᐃⵠ && (ᐃ.fillStyle = ⲆΔᐃᐃⵠ, ᐃ.fill());
		if (ⲆⵠΔⵠ) {
			ᐃ.lineWidth = ⲆⲆⵠ;
			ᐃ.strokeStyle = ⲆⵠΔⵠ;
			ᐃ.stroke()
		}
	}
	const ⲆᐃⲆΔⲆⵠⵠ = ⲆⲆΔᐃⲆ;

	function ᐃⵠⲆΔΔⵠⵠⲆⲆ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 120;
		ⲆⲆ.height = Ⲇ * 110;
		if (Δᐃ == ⲆⵠΔⲆ) {
			ᐃΔⵠ(ᐃ, 35 * Ⲇ, Ⲇ * 75, 19.72308292331602 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ], ᐃⲆ[0], Ⲇ * ⲆⵠⲆⲆⲆ);
			ᐃ.save();
			ᐃ.translate(11 * Ⲇ, 77 * Ⲇ);
			ᐃᐃᐃ(ᐃ, Ⲇ * -ⵠΔΔⵠ, -ᐃⵠⲆⲆ * Ⲇ, Ⲇ * ⲆᐃⵠⲆⵠ, Ⲇ * 8, ⲆΔⲆᐃⵠ * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ΔΔᐃⵠΔ, ᐃⲆ[ⵠᐃΔⲆ], Ⲇ * ΔᐃΔⵠ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(ΔᐃΔⵠⲆ * Ⲇ, Ⲇ * 81);
			ᐃ.bezierCurveTo(Ⲇ * ⲆⵠⵠᐃⵠΔⵠ, 105 * Ⲇ, 9 * Ⲇ, Ⲇ * 106, Ⲇ * ΔⲆᐃΔΔ, 91 * Ⲇ);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[0], ᐃᐃⲆⵠ * Ⲇ)
		} else if (Δᐃ == 2) {
			ᐃΔⵠ(ᐃ, 85 * Ⲇ, 75 * Ⲇ, 16 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ᐃΔΔ], Ⲇ * 4);
			ᐃ.scale(-1.7 * Ⲇ, Ⲇ * 1.7);
			ᐃ.translate(-120 * Ⲇ, ⵠᐃΔⲆ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(ᐃᐃΔΔⲆ * Ⲇ, 95 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 56.5, 54 * Ⲇ, Ⲇ * 56.5, 54 * Ⲇ, Ⲇ * 93, ΔⵠⵠΔᐃ * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 89, 13 * Ⲇ, 89 * Ⲇ, 13 * Ⲇ, 85 * Ⲇ, ⵠᐃᐃΔΔ * Ⲇ);
			ᐃ.bezierCurveTo(49.5 * Ⲇ, Ⲇ * 53, 49.5 * Ⲇ, 53 * Ⲇ, Ⲇ * ΔᐃᐃⲆΔ, Ⲇ * 93);
			ᐃ.bezierCurveTo(Ⲇ * 15, 94 * Ⲇ, 15 * Ⲇ, 94 * Ⲇ, Ⲇ * ΔⲆⵠⵠⵠ, Ⲇ * 95);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⲆΔⵠΔ], 4 * Ⲇ)
		} else if (ᐃΔΔⵠ == Δᐃ) {
			ᐃ.translate(Ⲇ * -52, ΔᐃΔ);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 84.5, 36.5 * Ⲇ);
			ᐃ.rotate(-.96);
			ᐃᐃᐃ(ᐃ, -5.5 * Ⲇ, -15.5 * Ⲇ, 11 * Ⲇ, 31 * Ⲇ, Ⲇ * ΔᐃΔⲆΔ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ], ᐃⲆ[ⲆⲆⲆᐃ], 4 * Ⲇ);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 84, Ⲇ * 36);
			ᐃ.rotate(.64);
			ᐃᐃᐃ(ᐃ, -ⲆΔΔΔ * Ⲇ, Ⲇ * -16, 10 * Ⲇ, Ⲇ * 32, Ⲇ * ⲆⵠⲆⲆⲆ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ], ᐃⲆ[1], Ⲇ * 4);
			ᐃ.save();
			ᐃ.translate(83.5 * Ⲇ, 36.5 * Ⲇ);
			ᐃ.rotate(.68);
			ᐃᐃᐃ(ᐃ, -2.5 * Ⲇ, Ⲇ * -6.5, 5 * Ⲇ, ΔᐃΔᐃΔⵠᐃ * Ⲇ, ⲆⵠⲆⲆⲆ * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ])
		} else if (Δᐃ == ⲆⵠⲆⲆⲆ) {
			ᐃΔⵠ(ᐃ, 35 * Ⲇ, 85 * Ⲇ, 17 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⵠΔⵠⲆ], Ⲇ * 3);
			ᐃΔⵠ(ᐃ, Ⲇ * 85, Ⲇ * 85, ⲆΔⲆⵠᐃ * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⲆⲆ], ᐃⲆ[0], Ⲇ * Ⲇⵠᐃᐃ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 53, Ⲇ * 86);
			ᐃ.bezierCurveTo(Ⲇ * 59, Ⲇ * 83, 63 * Ⲇ, Ⲇ * 83, Ⲇ * 67, Ⲇ * 86);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆΔⵠΔ], Ⲇ * 4)
		} else if (5 == Δᐃ) {
			ᐃ.scale(1.2, 1.2);
			ᐃ.translate(Ⲇ * -27, -ΔΔⲆⵠⵠ * Ⲇ);
			ᐃ.scale(1.2, 1.2);
			ᐃ.translate(Ⲇ * -10, 0);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(97 * Ⲇ, 23 * Ⲇ);
			ᐃ.bezierCurveTo(105 * Ⲇ, Ⲇ * 24, Ⲇ * 107, Ⲇ * 37, 97 * Ⲇ, Ⲇ * 39);
			ᐃ.bezierCurveTo(Ⲇ * 85, Ⲇ * 40, Ⲇ * 84, Ⲇ * 22, Ⲇ * 97, 23 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠΔⵠⲆ], 3 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(96 * Ⲇ, 24 * Ⲇ);
			ᐃ.bezierCurveTo(96 * Ⲇ, 30.5 * Ⲇ, Ⲇ * 96, Ⲇ * 30.5, 96 * Ⲇ, Ⲇ * 37);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔᐃΔ], Ⲇ * ΔⲆΔΔ);
			ᐃ.translate(0, Ⲇ * -2);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 88, Ⲇ * 37);
			ᐃ.bezierCurveTo(Ⲇ * 93, 33 * Ⲇ, Ⲇ * 91.5, 34.5 * Ⲇ, Ⲇ * 95, Ⲇ * 32);
			ᐃ.bezierCurveTo(Ⲇ * 98.5, 34 * Ⲇ, 98.5 * Ⲇ, 34 * Ⲇ, Ⲇ * 102, Ⲇ * 36);
			ᐃⵠ(ᐃ, ᐃⲆᐃΔⵠ, ᐃⲆ[ⲆⲆⵠⲆ], ᐃⵠᐃⲆ * Ⲇ)
		} else if (ΔΔⲆⵠΔ == Δᐃ) {
			ᐃΔⵠ(ᐃ, ΔᐃΔᐃΔⵠᐃ * Ⲇ, Ⲇ * 79, Ⲇ * 5);
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃΔⵠ(ᐃ, Ⲇ * 106, 79 * Ⲇ, Ⲇ * 5);
			ᐃⵠ(ᐃ, ᐃⲆ[0])
		} else if (7 == Δᐃ) {
			ᐃ.translate(ⵠⲆⵠ * Ⲇ, Ⲇ * 5);
			ᐃ.globalAlpha = .5;
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 27, Ⲇ * 14.399993896484375);
			ᐃ.bezierCurveTo(Ⲇ * 29, Ⲇ * 4.399993896484375, 44 * Ⲇ, 16.399993896484375 * Ⲇ, 37 * Ⲇ, 21.399993896484375 * Ⲇ);
			ᐃ.bezierCurveTo(47 * Ⲇ, 17.399993896484375 * Ⲇ, Ⲇ * 45, 36.399993896484375 * Ⲇ, 37 * Ⲇ, 32.399993896484375 * Ⲇ);
			ᐃ.bezierCurveTo(44 * Ⲇ, 40.399993896484375 * Ⲇ, Ⲇ * 28, 47.399993896484375 * Ⲇ, Ⲇ * 26, Ⲇ * 37.399993896484375);
			ᐃ.bezierCurveTo(Ⲇ * 22, Ⲇ * 46.399993896484375, Ⲇ * 9, Ⲇ * 37.399993896484375, Ⲇ * ΔⲆⲆⲆⲆⵠⲆ, 30.399993896484375 * Ⲇ);
			ᐃ.bezierCurveTo(ⲆⵠᐃΔᐃ * Ⲇ, 34.399993896484375 * Ⲇ, Ⲇ * ᐃⵠⲆⲆᐃ, 15.399993896484375 * Ⲇ, Ⲇ * ⲆⲆⲆᐃⲆⲆⲆ, 19.399993896484375 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 10, 12.399993896484375 * Ⲇ, 26 * Ⲇ, 7.399993896484375 * Ⲇ, Ⲇ * 26, Ⲇ * 14.399993896484375);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃ.globalAlpha = 1;
			ᐃ.translate(Ⲇ * ΔᐃΔ, -5 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(27 * Ⲇ, Ⲇ * 14.399993896484375);
			ᐃ.bezierCurveTo(Ⲇ * 29, Ⲇ * 4.399993896484375, Ⲇ * 44, 16.399993896484375 * Ⲇ, Ⲇ * 37, Ⲇ * 21.399993896484375);
			ᐃ.bezierCurveTo(47 * Ⲇ, Ⲇ * 17.399993896484375, 45 * Ⲇ, Ⲇ * 36.399993896484375, Ⲇ * 37, Ⲇ * 32.399993896484375);
			ᐃ.bezierCurveTo(44 * Ⲇ, 40.399993896484375 * Ⲇ, 28 * Ⲇ, 47.399993896484375 * Ⲇ, Ⲇ * 26, 37.399993896484375 * Ⲇ);
			ᐃ.bezierCurveTo(22 * Ⲇ, 46.399993896484375 * Ⲇ, Ⲇ * 9, 37.399993896484375 * Ⲇ, Ⲇ * 16, Ⲇ * 30.399993896484375);
			ᐃ.bezierCurveTo(Δᐃᐃⵠᐃ * Ⲇ, 34.399993896484375 * Ⲇ, 9 * Ⲇ, 15.399993896484375 * Ⲇ, 18 * Ⲇ, 19.399993896484375 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * ⵠⵠⲆᐃᐃ, Ⲇ * 12.399993896484375, 26 * Ⲇ, 7.399993896484375 * Ⲇ, Ⲇ * 26, Ⲇ * 14.399993896484375);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⵠ], ᐃⲆ[2], Ⲇ * ΔΔᐃᐃ);
			ᐃΔⵠ(ᐃ, Ⲇ * 27, 26.800003051757812 * Ⲇ, Ⲇ * 5);
			ᐃⵠ(ᐃ, ᐃⲆ[0])
		} else if (8 == Δᐃ) {
			ᐃ.translate(Ⲇ * -32, -19 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 123, Ⲇ * 46);
			ᐃ.bezierCurveTo(132 * Ⲇ, 46 * Ⲇ, 135 * Ⲇ, 39 * Ⲇ, Ⲇ * 134, 33 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 145, Ⲇ * 43, Ⲇ * 142, 65 * Ⲇ, 127 * Ⲇ, Ⲇ * 66);
			ᐃ.bezierCurveTo(118 * Ⲇ, Ⲇ * 61, Ⲇ * 119, Ⲇ * 51, 123 * Ⲇ, Ⲇ * 46);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ], ᐃⲆ[ⵠⵠᐃ], Ⲇ * 4);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(49 * Ⲇ, Ⲇ * 32);
			ᐃ.bezierCurveTo(49 * Ⲇ, 44 * Ⲇ, Ⲇ * 56, 44 * Ⲇ, 61 * Ⲇ, Ⲇ * 46);
			ᐃ.bezierCurveTo(67 * Ⲇ, 52 * Ⲇ, Ⲇ * 65, Ⲇ * 65, Ⲇ * 55, Ⲇ * 66);
			ᐃ.bezierCurveTo(37 * Ⲇ, Ⲇ * 60, 42 * Ⲇ, 38 * Ⲇ, Ⲇ * 49, Ⲇ * 32);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], 4 * Ⲇ)
		}
		return ⲆⲆ
	}

	function ᐃⵠΔⵠⲆⵠᐃⲆⲆ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 176;
		ⲆⲆ.height = Ⲇ * 127;
		if (ⲆΔΔⲆⵠ == Δᐃ) {
			ᐃ.globalAlpha = .3;
			ᐃ.save();
			ᐃ.translate(87 * Ⲇ, 64.5 * Ⲇ);
			ᐃᐃᐃ(ᐃ, Ⲇ * -56, -41.5 * Ⲇ, 112 * Ⲇ, Ⲇ * 83, Ⲇ * 18);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ΔⲆΔᐃ], ⲆⵠⲆⲆⲆ * Ⲇ);
			ᐃ.save();
			ᐃ.translate(82 * Ⲇ, 69.5 * Ⲇ);
			ᐃᐃᐃ(ᐃ, -51 * Ⲇ, Ⲇ * -36.5, 102 * Ⲇ, 73 * Ⲇ, ⵠⲆΔⲆΔ * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ⲆⵠⲆ], Ⲇ * 4);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(55 * Ⲇ, 41 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 38, 41 * Ⲇ, 37 * Ⲇ, 50 * Ⲇ, Ⲇ * 38, 61 * Ⲇ);
			ᐃ.bezierCurveTo(42 * Ⲇ, Ⲇ * 50, 46 * Ⲇ, 46 * Ⲇ, Ⲇ * 55, Ⲇ * 42);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠⵠ]);
			ᐃ.globalAlpha = ⲆΔᐃ;
			ᐃ.translate(Ⲇ * 26, 10 * Ⲇ);
			ᐃΔⵠ(ᐃ, Ⲇ * 35, Ⲇ * 75, 15 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃΔⵠ]);
			ᐃΔⵠ(ᐃ, 85 * Ⲇ, Ⲇ * 75, Ⲇ * ᐃᐃⵠΔⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆΔⲆ]);
			ᐃΔⵠ(ᐃ, 32 * Ⲇ, 67 * Ⲇ, ΔΔⵠΔ * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[5]);
			ᐃΔⵠ(ᐃ, Ⲇ * 82, Ⲇ * 67, 5 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⵠΔ])
		} else if (Δᐃ == ⲆⲆᐃⵠΔⲆᐃ) {
			var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
			var ᐃ = ⲆⲆ.getContext(Δ[160]);
			ⲆⲆ.width = 332 * Ⲇ;
			ⲆⲆ.height = Ⲇ * 127;
			ᐃ.globalAlpha = .5;
			ᐃ.translate(0, -36 * Ⲇ);
			ᐃ.save();
			ᐃ.translate(165.25 * Ⲇ, Ⲇ * 106.84375);
			ᐃᐃᐃ(ᐃ, -56.5 * Ⲇ, Ⲇ * -41.5, 113 * Ⲇ, 83 * Ⲇ, 18 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠⲆ]);
			ᐃ.globalAlpha = ⲆΔᐃΔ;
			ᐃ.translate(ⵠᐃΔ, ⲆᐃⵠⲆᐃ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 210.75, Ⲇ * 72.84375);
			ᐃ.bezierCurveTo(238.75 * Ⲇ, Ⲇ * 74.84375, 270.75 * Ⲇ, Ⲇ * 85.84375, 269.75 * Ⲇ, 90.84375 * Ⲇ);
			ᐃ.bezierCurveTo(268.75 * Ⲇ, Ⲇ * 94.84375, Ⲇ * 221.75, Ⲇ * 81.84375, Ⲇ * 206.75, Ⲇ * 85.84375);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ᐃⵠΔⲆ], Ⲇ * 4);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 208.75, Ⲇ * 69.84375);
			ᐃ.bezierCurveTo(Ⲇ * 241.75, Ⲇ * 61.84375, 265.75 * Ⲇ, Ⲇ * 65.84375, Ⲇ * 286.75, 69.84375 * Ⲇ);
			ᐃ.bezierCurveTo(290.75 * Ⲇ, 75.84375 * Ⲇ, Ⲇ * 225.75, Ⲇ * 69.84375, Ⲇ * 215.75, Ⲇ * 80.84375);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔᐃ], ᐃⲆ[ᐃᐃᐃᐃ], Ⲇ * 4);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 209.75, Ⲇ * 69.84375);
			ᐃ.bezierCurveTo(Ⲇ * 228.75, 51.84375 * Ⲇ, 265.75 * Ⲇ, Ⲇ * 46.84375, 294.75 * Ⲇ, 51.84375 * Ⲇ);
			ᐃ.bezierCurveTo(301.75 * Ⲇ, 55.84375 * Ⲇ, 224.75 * Ⲇ, Ⲇ * 60.84375, 216.75 * Ⲇ, 80.84375 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⲆ], ᐃⲆ[ᐃⵠΔⲆ], Ⲇ * ΔΔᐃᐃⲆ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 193.75, Ⲇ * 72.84375);
			ᐃ.bezierCurveTo(Ⲇ * 206.75, 47.84375 * Ⲇ, 221.75 * Ⲇ, Ⲇ * 37.84375, 249.75 * Ⲇ, 35.84375 * Ⲇ);
			ᐃ.bezierCurveTo(264.75 * Ⲇ, Ⲇ * 34.84375, Ⲇ * 305.75, Ⲇ * 16.84375, Ⲇ * 300.75, 24.84375 * Ⲇ);
			ᐃ.bezierCurveTo(273.75 * Ⲇ, 45.84375 * Ⲇ, Ⲇ * 245.75, Ⲇ * 46.84375, 235.75 * Ⲇ, 62.84375 * Ⲇ);
			ᐃ.bezierCurveTo(218.75 * Ⲇ, 82.84375 * Ⲇ, 215.75 * Ⲇ, 87.84375 * Ⲇ, 199.75 * Ⲇ, 84.84375 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ᐃᐃΔΔ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 126.75, 80.34375 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 94.75, 88.34375 * Ⲇ, 83.75 * Ⲇ, 88.34375 * Ⲇ, Ⲇ * 65.75, Ⲇ * 90.34375);
			ᐃ.bezierCurveTo(Ⲇ * 61.75, Ⲇ * 87.34375, 86.75 * Ⲇ, Ⲇ * 77.34375, 129.75 * Ⲇ, 70.34375 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆ], ᐃⲆ[ⵠⲆⵠΔ], 4 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 120.75, Ⲇ * 72.34375);
			ᐃ.bezierCurveTo(128.75 * Ⲇ, 62.34375 * Ⲇ, 98.75 * Ⲇ, Ⲇ * 64.34375, 49.75 * Ⲇ, Ⲇ * 68.34375);
			ᐃ.bezierCurveTo(34.75 * Ⲇ, Ⲇ * 75.34375, 101.75 * Ⲇ, Ⲇ * 72.34375, 124.75 * Ⲇ, 78.34375 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ⵠΔΔⵠ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 128.75, Ⲇ * 76.34375);
			ᐃ.bezierCurveTo(Ⲇ * 111.75, Ⲇ * 54.34375, 69.75 * Ⲇ, 48.34375 * Ⲇ, 39.75 * Ⲇ, Ⲇ * 50.34375);
			ᐃ.bezierCurveTo(Ⲇ * 26.75, Ⲇ * 53.34375, 86.75 * Ⲇ, Ⲇ * 59.34375, 123.75 * Ⲇ, 78.34375 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * ΔᐃΔⵠ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(143.75 * Ⲇ, Ⲇ * 74.34375);
			ᐃ.bezierCurveTo(128.75 * Ⲇ, Ⲇ * 48.34375, Ⲇ * 108.75, 35.34375 * Ⲇ, 81.75 * Ⲇ, 35.34375 * Ⲇ);
			ᐃ.bezierCurveTo(63.75 * Ⲇ, 33.34375 * Ⲇ, Ⲇ * 26.75, Ⲇ * 15.34375, 29.75 * Ⲇ, 25.34375 * Ⲇ);
			ᐃ.bezierCurveTo(33.75 * Ⲇ, Ⲇ * 30.34375, 49.75 * Ⲇ, 40.34375 * Ⲇ, Ⲇ * 70.75, Ⲇ * 49.34375);
			ᐃ.bezierCurveTo(Ⲇ * 94.75, Ⲇ * 54.34375, 104.75 * Ⲇ, Ⲇ * 72.34375, 128.75 * Ⲇ, 88.34375 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆ], ᐃⲆ[2], 4 * Ⲇ);
			ᐃ.translate(ΔᐃΔ, Ⲇ * -28);
			ᐃ.save();
			ᐃ.translate(165.25 * Ⲇ, 106.84375 * Ⲇ);
			ᐃᐃᐃ(ᐃ, -56.5 * Ⲇ, -41.5 * Ⲇ, 113 * Ⲇ, 83 * Ⲇ, ⲆᐃᐃΔΔᐃⵠ * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ], ᐃⲆ[ᐃⵠΔⲆ], 4 * Ⲇ);
			ᐃ.translate(Ⲇ * 28, Ⲇ * 15);
			ᐃ.translate(0, Ⲇ * 8);
			ᐃ.globalAlpha = .5;
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(83 * Ⲇ, Ⲇ * 52);
			ᐃ.bezierCurveTo(78 * Ⲇ, 65 * Ⲇ, Ⲇ * 110, 72 * Ⲇ, 139 * Ⲇ, Ⲇ * 71);
			ᐃ.bezierCurveTo(Ⲇ * 176, Ⲇ * 71, Ⲇ * 193, Ⲇ * 61, 191 * Ⲇ, Ⲇ * 54);
			ᐃ.bezierCurveTo(Ⲇ * 202, 58 * Ⲇ, Ⲇ * 198, Ⲇ * 72, Ⲇ * 187, 75 * Ⲇ);
			ᐃ.bezierCurveTo(143 * Ⲇ, 87 * Ⲇ, 107 * Ⲇ, 79 * Ⲇ, Ⲇ * 89, Ⲇ * 75);
			ᐃ.bezierCurveTo(Ⲇ * 72, 69 * Ⲇ, Ⲇ * 74, Ⲇ * 58, 83 * Ⲇ, Ⲇ * 52);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]);
			ᐃ.globalAlpha = ⲆΔⲆⵠ;
			ᐃ.translate(Ⲇ * ⲆᐃⲆ, -ⵠᐃⵠᐃⵠ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 83, Ⲇ * 52);
			ᐃ.bezierCurveTo(Ⲇ * 78, 65 * Ⲇ, 110 * Ⲇ, Ⲇ * 72, Ⲇ * 139, 71 * Ⲇ);
			ᐃ.bezierCurveTo(176 * Ⲇ, 71 * Ⲇ, 193 * Ⲇ, Ⲇ * 61, Ⲇ * 191, Ⲇ * 54);
			ᐃ.bezierCurveTo(202 * Ⲇ, 58 * Ⲇ, 198 * Ⲇ, 72 * Ⲇ, 187 * Ⲇ, Ⲇ * 75);
			ᐃ.bezierCurveTo(Ⲇ * 143, Ⲇ * 87, 107 * Ⲇ, Ⲇ * 79, 89 * Ⲇ, Ⲇ * 75);
			ᐃ.bezierCurveTo(Ⲇ * 72, 69 * Ⲇ, 74 * Ⲇ, Ⲇ * 58, 83 * Ⲇ, 52 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔᐃⲆⲆ], ᐃⲆ[6], 4 * Ⲇ);
			ᐃ.translate(Ⲇ * -28, -ᐃᐃᐃⵠⲆⲆᐃ * Ⲇ);
			ᐃΔⵠ(ᐃ, 141.75 * Ⲇ, Ⲇ * 127.34375, ⵠⲆⲆⲆⵠⲆΔ * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, Ⲇ * 191.75, Ⲇ * 127.09375, Ⲇ * ᐃᐃⵠᐃⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, 138.75 * Ⲇ, 119.34375 * Ⲇ, ΔΔⵠΔ * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃΔⵠ(ᐃ, 188.75 * Ⲇ, 119.34375 * Ⲇ, Ⲇ * ⲆΔⵠᐃⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆᐃ]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(125.75 * Ⲇ, 139.34375 * Ⲇ);
			ᐃ.bezierCurveTo(134.75 * Ⲇ, 134.34375 * Ⲇ, Ⲇ * 143.75, 134.34375 * Ⲇ, 156.75 * Ⲇ, Ⲇ * 139.34375);
			ᐃ.bezierCurveTo(153.25 * Ⲇ, Ⲇ * 141.84375, Ⲇ * 153.25, 141.84375 * Ⲇ, 149.75 * Ⲇ, Ⲇ * 144.34375);
			ᐃ.bezierCurveTo(Ⲇ * 140.25, Ⲇ * 144.34375, 140.25 * Ⲇ, 144.34375 * Ⲇ, 130.75 * Ⲇ, Ⲇ * 144.34375);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆ]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 176.75, 139.34375 * Ⲇ);
			ᐃ.bezierCurveTo(183.75 * Ⲇ, Ⲇ * 135.34375, 199.75 * Ⲇ, Ⲇ * 135.34375, 205.75 * Ⲇ, Ⲇ * 139.34375);
			ᐃ.bezierCurveTo(203.25 * Ⲇ, 141.34375 * Ⲇ, 203.25 * Ⲇ, 141.34375 * Ⲇ, 200.75 * Ⲇ, 143.34375 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 190.75, 143.84375 * Ⲇ, 190.75 * Ⲇ, Ⲇ * 143.84375, 180.75 * Ⲇ, Ⲇ * 144.34375);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⵠ])
		} else {
			ᐃ.globalAlpha = .75;
			ᐃ.translate(ⵠⲆⵠ, ΔⲆΔⲆⲆ * Ⲇ);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 87, Ⲇ * 64.5);
			ᐃᐃᐃ(ᐃ, -56 * Ⲇ, -41.5 * Ⲇ, 112 * Ⲇ, Ⲇ * 83, Ⲇ * 18);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.globalAlpha = 1;
			ᐃ.translate(0, -ⵠⲆΔⲆᐃ * Ⲇ);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 87, 64.5 * Ⲇ);
			ᐃᐃᐃ(ᐃ, Ⲇ * -56, Ⲇ * -41.5, 112 * Ⲇ, 83 * Ⲇ, 18 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ΔΔᐃᐃⲆ * Ⲇ);
			if (ⵠᐃΔ == Δᐃ) {
				ᐃ.translate(Ⲇ * 27, ᐃⲆⲆⵠⲆ * Ⲇ);
				ᐃΔⵠ(ᐃ, 35 * Ⲇ, 75 * Ⲇ, Ⲇ * 15);
				ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃ]);
				ᐃΔⵠ(ᐃ, Ⲇ * 85, 75 * Ⲇ, Ⲇ * ᐃΔΔᐃᐃ);
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆⲆ]);
				ᐃΔⵠ(ᐃ, Ⲇ * 32, 67 * Ⲇ, 5 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[ΔΔᐃᐃⲆ]);
				ᐃΔⵠ(ᐃ, 82 * Ⲇ, 67 * Ⲇ, Ⲇ * 5);
				ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃΔⵠ])
			} else if (Δᐃ == ᐃⲆΔ) {
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(35 * Ⲇ, 73 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 40, Ⲇ * 72, Ⲇ * 38, 68 * Ⲇ, Ⲇ * 35, Ⲇ * 67);
				ᐃ.bezierCurveTo(25 * Ⲇ, 67 * Ⲇ, Ⲇ * 21, Ⲇ * 65, 16 * Ⲇ, 61 * Ⲇ);
				ᐃ.bezierCurveTo(ΔⲆⲆΔΔ * Ⲇ, Ⲇ * 60, Ⲇ * 16, Ⲇ * 64, ⲆΔⲆΔⵠ * Ⲇ, Ⲇ * 67);
				ᐃ.bezierCurveTo(3 * Ⲇ, Ⲇ * 70, 12 * Ⲇ, 68.5 * Ⲇ, ⲆΔⲆᐃΔ * Ⲇ, 70 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 2, 71 * Ⲇ, Ⲇ * Ⲇⵠᐃᐃⵠ, 72 * Ⲇ, Ⲇ * 13, Ⲇ * 73);
				ᐃ.bezierCurveTo(Ⲇ * 12.5, Ⲇ * 76.5, 12.5 * Ⲇ, Ⲇ * 76.5, 12 * Ⲇ, 80 * Ⲇ);
				ᐃ.bezierCurveTo(12 * Ⲇ, 83 * Ⲇ, 15 * Ⲇ, Ⲇ * 80, Ⲇ * 18, Ⲇ * 73);
				ᐃ.bezierCurveTo(26.5 * Ⲇ, 73.5 * Ⲇ, 26.5 * Ⲇ, 73.5 * Ⲇ, 35 * Ⲇ, 74 * Ⲇ);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[6], 4 * Ⲇ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 134, Ⲇ * 64);
				ᐃ.bezierCurveTo(Ⲇ * 141.5, 64 * Ⲇ, Ⲇ * 141.5, 64 * Ⲇ, 149 * Ⲇ, Ⲇ * 64);
				ᐃ.bezierCurveTo(153 * Ⲇ, 59 * Ⲇ, 156 * Ⲇ, Ⲇ * 56, Ⲇ * 159, 56 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 161, Ⲇ * 57, Ⲇ * 160, 60 * Ⲇ, 155 * Ⲇ, Ⲇ * 65);
				ᐃ.bezierCurveTo(Ⲇ * 165, 71 * Ⲇ, 168 * Ⲇ, 72 * Ⲇ, Ⲇ * 169, 74 * Ⲇ);
				ᐃ.bezierCurveTo(169 * Ⲇ, 76 * Ⲇ, 159 * Ⲇ, 71 * Ⲇ, 156 * Ⲇ, 72 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 154, Ⲇ * 72, Ⲇ * 155, Ⲇ * 75, 156 * Ⲇ, Ⲇ * 79);
				ᐃ.bezierCurveTo(155 * Ⲇ, Ⲇ * 81, Ⲇ * 153, 78 * Ⲇ, Ⲇ * 150, Ⲇ * 72);
				ᐃ.bezierCurveTo(Ⲇ * 142, 71.5 * Ⲇ, 142 * Ⲇ, Ⲇ * 71.5, 134 * Ⲇ, Ⲇ * 71);
				ᐃ.bezierCurveTo(130 * Ⲇ, 69 * Ⲇ, Ⲇ * 131, 65 * Ⲇ, 135 * Ⲇ, Ⲇ * 64);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠᐃⵠ], ᐃⲆ[6], 4 * Ⲇ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(80 * Ⲇ, 95 * Ⲇ);
				ᐃ.bezierCurveTo(83 * Ⲇ, Ⲇ * 88, Ⲇ * 89, 88 * Ⲇ, Ⲇ * 92, 95 * Ⲇ);
				ᐃ.bezierCurveTo(92 * Ⲇ, Ⲇ * 105, Ⲇ * 88, 110 * Ⲇ, Ⲇ * 86, Ⲇ * 110);
				ᐃ.bezierCurveTo(Ⲇ * 83, Ⲇ * 107, Ⲇ * 82, Ⲇ * 104, Ⲇ * 80, 96 * Ⲇ);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃΔᐃ], ᐃⲆ[ⲆⲆΔᐃΔ], ᐃⲆᐃⲆ * Ⲇ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(81 * Ⲇ, Ⲇ * ᐃΔⵠⵠⵠ);
				ᐃ.bezierCurveTo(82 * Ⲇ, Ⲇ * 97, Ⲇ * 83, Ⲇ * 96, Ⲇ * 85, 96 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 82, 100 * Ⲇ, 82 * Ⲇ, Ⲇ * 101, 83 * Ⲇ, 103 * Ⲇ);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆΔⲆ]);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 83, 103 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 83, 102 * Ⲇ, 84 * Ⲇ, ⵠΔΔΔⲆ * Ⲇ, 86 * Ⲇ, ΔⲆᐃⵠⵠ * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 84, 103 * Ⲇ, Ⲇ * 84, Ⲇ * 105, 84 * Ⲇ, Ⲇ * 106);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆΔΔ]);
				ᐃ.translate(Ⲇ * 27, ᐃⲆⲆⵠⲆ * Ⲇ);
				ᐃΔⵠ(ᐃ, Ⲇ * 35, Ⲇ * 75, Ⲇ * ΔᐃⲆⲆⲆ);
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠΔ]);
				ᐃΔⵠ(ᐃ, 85 * Ⲇ, 75 * Ⲇ, Ⲇ * 15);
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆΔΔ]);
				ᐃΔⵠ(ᐃ, Ⲇ * 32, Ⲇ * 67, Ⲇ * Δᐃⵠᐃ);
				ᐃⵠ(ᐃ, ᐃⲆ[4]);
				ᐃΔⵠ(ᐃ, Ⲇ * 82, 67 * Ⲇ, Ⲇ * Δᐃⵠᐃ);
				ᐃⵠ(ᐃ, ᐃⲆ[4])
			} else if (Δᐃ == 2) {
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 48, Ⲇ * 22);
				ᐃ.bezierCurveTo(85.5 * Ⲇ, 22 * Ⲇ, 85.5 * Ⲇ, 22 * Ⲇ, 123 * Ⲇ, 22 * Ⲇ);
				ᐃ.bezierCurveTo(138 * Ⲇ, Ⲇ * 23, 147 * Ⲇ, Ⲇ * 34, Ⲇ * 143, Ⲇ * 62);
				ᐃ.bezierCurveTo(142 * Ⲇ, 67 * Ⲇ, Ⲇ * 144, Ⲇ * 70, 149 * Ⲇ, 73 * Ⲇ);
				ᐃ.bezierCurveTo(147 * Ⲇ, Ⲇ * 77, Ⲇ * 145, 77 * Ⲇ, Ⲇ * 143, 77 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 141, Ⲇ * 85, Ⲇ * 145, 92 * Ⲇ, Ⲇ * 148, Ⲇ * 97);
				ᐃ.bezierCurveTo(Ⲇ * 142, Ⲇ * 103, Ⲇ * 134, Ⲇ * 105, 121 * Ⲇ, 106 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 85, 106 * Ⲇ, Ⲇ * 85, 106 * Ⲇ, 49 * Ⲇ, Ⲇ * 106);
				ᐃ.bezierCurveTo(Ⲇ * 32, 104 * Ⲇ, Ⲇ * 29, 101 * Ⲇ, Ⲇ * 24, Ⲇ * 95);
				ᐃ.bezierCurveTo(30 * Ⲇ, 86 * Ⲇ, Ⲇ * 31, Ⲇ * 85, Ⲇ * 30, Ⲇ * 78);
				ᐃ.bezierCurveTo(27.5 * Ⲇ, Ⲇ * 76, Ⲇ * 27.5, Ⲇ * 76, Ⲇ * 25, Ⲇ * 74);
				ᐃ.bezierCurveTo(Ⲇ * 31, 68 * Ⲇ, Ⲇ * 31, 60 * Ⲇ, 30 * Ⲇ, Ⲇ * 46);
				ᐃ.bezierCurveTo(31 * Ⲇ, Ⲇ * 31, Ⲇ * 37, Ⲇ * 23, 47 * Ⲇ, Ⲇ * 22);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 4 * Ⲇ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 30, Ⲇ * 44);
				ᐃ.bezierCurveTo(66 * Ⲇ, 48 * Ⲇ, Ⲇ * 99, Ⲇ * 45, 141 * Ⲇ, Ⲇ * 39);
				ᐃⵠ(ᐃ, ᐃⵠΔΔΔ, ᐃⲆ[3], 4 * Ⲇ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 30, Ⲇ * 67);
				ᐃ.bezierCurveTo(80 * Ⲇ, 44 * Ⲇ, Ⲇ * 118, Ⲇ * 43, Ⲇ * 141, 60 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃΔⵠᐃⵠ, ᐃⲆ[ᐃⵠⲆⵠ], ᐃᐃΔΔ * Ⲇ);
				ᐃ.globalAlpha = .4;
				ᐃΔⵠ(ᐃ, Ⲇ * 31, 44 * Ⲇ, Ⲇ * 9);
				ᐃⵠ(ᐃ, ᐃⲆ[ΔΔᐃᐃⲆ]);
				ᐃΔⵠ(ᐃ, Ⲇ * 42, Ⲇ * 47, Ⲇ * 9);
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔΔ]);
				ᐃΔⵠ(ᐃ, 70 * Ⲇ, Ⲇ * 42, Ⲇ * ⲆⲆΔᐃⲆ);
				ᐃⵠ(ᐃ, ᐃⲆ[6]);
				ᐃΔⵠ(ᐃ, 53 * Ⲇ, 45 * Ⲇ, 9 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[7]);
				ᐃΔⵠ(ᐃ, Ⲇ * 103, 40 * Ⲇ, Ⲇ * 9);
				ᐃⵠ(ᐃ, ᐃⲆ[8]);
				ᐃΔⵠ(ᐃ, Ⲇ * 116, 41 * Ⲇ, Ⲇ * 9);
				ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔΔ]);
				ᐃΔⵠ(ᐃ, Ⲇ * 131, Ⲇ * 41, 9 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[4]);
				ᐃΔⵠ(ᐃ, 39 * Ⲇ, 64 * Ⲇ, Ⲇ * ᐃⲆⲆⵠⲆⵠⵠ);
				ᐃⵠ(ᐃ, ᐃⲆ[7]);
				ᐃΔⵠ(ᐃ, Ⲇ * 51, 60 * Ⲇ, ᐃΔⲆⵠΔ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[6]);
				ᐃΔⵠ(ᐃ, 74 * Ⲇ, Ⲇ * 53, Ⲇ * ⵠΔⲆᐃⲆ);
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⲆΔΔ]);
				ᐃΔⵠ(ᐃ, 83 * Ⲇ, Ⲇ * 51, 9 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[8]);
				ᐃΔⵠ(ᐃ, 95 * Ⲇ, Ⲇ * 51, 9 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃⵠΔΔ]);
				ᐃΔⵠ(ᐃ, Ⲇ * 107, Ⲇ * 49, Ⲇ * ᐃΔᐃᐃᐃᐃᐃ);
				ᐃⵠ(ᐃ, ᐃⲆ[7]);
				ᐃΔⵠ(ᐃ, Ⲇ * 120, Ⲇ * 50, Ⲇ * 9);
				ᐃⵠ(ᐃ, ᐃⲆ[4]);
				ᐃΔⵠ(ᐃ, Ⲇ * 137, 57 * Ⲇ, Ⲇ * 9);
				ᐃⵠ(ᐃ, ᐃⲆ[5]);
				ᐃ.globalAlpha = 1;
				ᐃΔⵠ(ᐃ, Ⲇ * 31, 44 * Ⲇ, Ⲇ * 4);
				ᐃⵠ(ᐃ, ᐃⲆ[4]);
				ᐃΔⵠ(ᐃ, 42 * Ⲇ, 47 * Ⲇ, Ⲇ * 4);
				ᐃⵠ(ᐃ, ᐃⲆ[5]);
				ᐃΔⵠ(ᐃ, Ⲇ * 53, Ⲇ * 45, ⲆⲆᐃΔᐃ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔⵠⵠⲆⲆ]);
				ᐃΔⵠ(ᐃ, Ⲇ * 70, 43 * Ⲇ, Ⲇ * 4);
				ᐃⵠ(ᐃ, ᐃⲆ[6]);
				ᐃΔⵠ(ᐃ, 50 * Ⲇ, Ⲇ * 59, Ⲇ * 4);
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⲆΔᐃⲆⵠ]);
				ᐃΔⵠ(ᐃ, Ⲇ * 39, Ⲇ * 64, Ⲇ * ⲆΔⲆᐃΔ);
				ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃⲆΔᐃ]);
				ᐃΔⵠ(ᐃ, Ⲇ * 83, Ⲇ * 51, ⲆⲆᐃΔᐃ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[4]);
				ᐃΔⵠ(ᐃ, Ⲇ * 74, Ⲇ * 53, Ⲇ * 4);
				ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆΔᐃΔ]);
				ᐃΔⵠ(ᐃ, Ⲇ * 95, Ⲇ * 51, ⲆΔⵠᐃΔ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔⲆΔ]);
				ᐃΔⵠ(ᐃ, 103 * Ⲇ, 41 * Ⲇ, Ⲇ * 4);
				ᐃⵠ(ᐃ, ᐃⲆ[8]);
				ᐃΔⵠ(ᐃ, 107 * Ⲇ, 49 * Ⲇ, ΔᐃΔΔ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[7]);
				ᐃΔⵠ(ᐃ, 116 * Ⲇ, 41 * Ⲇ, 4 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆᐃⵠ]);
				ᐃΔⵠ(ᐃ, Ⲇ * 131, 41 * Ⲇ, ⲆⵠⲆᐃ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔⲆΔ]);
				ᐃΔⵠ(ᐃ, 137 * Ⲇ, Ⲇ * 57, ⵠᐃΔΔΔ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔΔ]);
				ᐃΔⵠ(ᐃ, 120 * Ⲇ, Ⲇ * 50, 4 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[4]);
				ᐃ.translate(Ⲇ * 27, 10 * Ⲇ);
				ᐃΔⵠ(ᐃ, Ⲇ * 35, Ⲇ * 75, Ⲇ * ᐃⵠⲆⵠᐃⵠΔ);
				ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⲆⲆᐃ]);
				ᐃΔⵠ(ᐃ, Ⲇ * 85, 75 * Ⲇ, 15 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃⵠΔᐃⵠ]);
				ᐃΔⵠ(ᐃ, Ⲇ * 32, Ⲇ * 67, Ⲇ * 5);
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⲆᐃᐃ]);
				ᐃΔⵠ(ᐃ, 82 * Ⲇ, 67 * Ⲇ, 5 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[10])
			} else if (Δᐃ == 3) {
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(23 * Ⲇ, Ⲇ * 95);
				ᐃ.bezierCurveTo(Ⲇ * 30, Ⲇ * 85, 30 * Ⲇ, 83 * Ⲇ, Ⲇ * 30, Ⲇ * 72);
				ᐃ.bezierCurveTo(Ⲇ * 30, Ⲇ * 61.5, Ⲇ * 30, 61.5 * Ⲇ, Ⲇ * 30, Ⲇ * 51);
				ᐃ.bezierCurveTo(Ⲇ * 29, 33 * Ⲇ, 42 * Ⲇ, Ⲇ * 23, Ⲇ * 54, 24 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 86.5, Ⲇ * 24, 86.5 * Ⲇ, 24 * Ⲇ, 119 * Ⲇ, 24 * Ⲇ);
				ᐃ.bezierCurveTo(135 * Ⲇ, 24 * Ⲇ, 143 * Ⲇ, Ⲇ * 33, Ⲇ * 143, Ⲇ * 47);
				ᐃ.bezierCurveTo(143 * Ⲇ, 63.5 * Ⲇ, Ⲇ * 143, Ⲇ * 63.5, Ⲇ * 143, Ⲇ * 80);
				ᐃ.bezierCurveTo(142 * Ⲇ, Ⲇ * 86, 147 * Ⲇ, Ⲇ * 93, Ⲇ * 150, Ⲇ * 96);
				ᐃ.bezierCurveTo(144 * Ⲇ, 107 * Ⲇ, 113 * Ⲇ, Ⲇ * 112, 84 * Ⲇ, Ⲇ * 111);
				ᐃ.bezierCurveTo(52 * Ⲇ, 112 * Ⲇ, 34 * Ⲇ, Ⲇ * 106, Ⲇ * 23, Ⲇ * 96);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 4 * Ⲇ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(30 * Ⲇ, 81 * Ⲇ);
				ᐃ.bezierCurveTo(56 * Ⲇ, 99 * Ⲇ, Ⲇ * 104, Ⲇ * 98, Ⲇ * 142, 84 * Ⲇ);
				ᐃ.bezierCurveTo(145.5 * Ⲇ, 89.5 * Ⲇ, Ⲇ * 145.5, 89.5 * Ⲇ, 149 * Ⲇ, Ⲇ * 95);
				ᐃ.bezierCurveTo(142 * Ⲇ, Ⲇ * 106, 127 * Ⲇ, Ⲇ * 110, Ⲇ * 81, 110 * Ⲇ);
				ᐃ.bezierCurveTo(36 * Ⲇ, Ⲇ * 112, 28 * Ⲇ, Ⲇ * 99, 23 * Ⲇ, 95 * Ⲇ);
				ᐃ.bezierCurveTo(31 * Ⲇ, 87 * Ⲇ, 31 * Ⲇ, 82 * Ⲇ, 30 * Ⲇ, Ⲇ * 81);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[2], ΔⵠⲆⵠⲆ * Ⲇ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 23, Ⲇ * 95);
				ᐃ.bezierCurveTo(Ⲇ * 30, 85 * Ⲇ, 30 * Ⲇ, Ⲇ * 83, 30 * Ⲇ, Ⲇ * 72);
				ᐃ.bezierCurveTo(Ⲇ * 30, Ⲇ * 61.5, Ⲇ * 30, 61.5 * Ⲇ, 30 * Ⲇ, Ⲇ * 51);
				ᐃ.bezierCurveTo(29 * Ⲇ, 33 * Ⲇ, Ⲇ * 42, 23 * Ⲇ, Ⲇ * 54, Ⲇ * 24);
				ᐃ.bezierCurveTo(Ⲇ * 86.5, Ⲇ * 24, 86.5 * Ⲇ, Ⲇ * 24, Ⲇ * 119, 24 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 135, Ⲇ * 24, 143 * Ⲇ, 33 * Ⲇ, 143 * Ⲇ, 47 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 143, Ⲇ * 63.5, 143 * Ⲇ, Ⲇ * 63.5, Ⲇ * 143, 80 * Ⲇ);
				ᐃ.bezierCurveTo(142 * Ⲇ, Ⲇ * 86, Ⲇ * 147, Ⲇ * 93, Ⲇ * 150, Ⲇ * 96);
				ᐃ.bezierCurveTo(144 * Ⲇ, 107 * Ⲇ, 113 * Ⲇ, Ⲇ * 112, 84 * Ⲇ, Ⲇ * 111);
				ᐃ.bezierCurveTo(52 * Ⲇ, 112 * Ⲇ, 34 * Ⲇ, 106 * Ⲇ, Ⲇ * 23, 96 * Ⲇ);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃⵠΔⲆ], Ⲇ * 4);
				ᐃ.translate(27 * Ⲇ, Ⲇ * ᐃᐃΔⵠⵠ);
				ᐃΔⵠ(ᐃ, 35 * Ⲇ, 75 * Ⲇ, 15 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[6]);
				ᐃΔⵠ(ᐃ, Ⲇ * 85, 75 * Ⲇ, Ⲇ * ΔⲆⵠⲆⵠᐃⵠ);
				ᐃⵠ(ᐃ, ᐃⲆ[6]);
				ᐃΔⵠ(ᐃ, 32 * Ⲇ, Ⲇ * 67, Ⲇ * 5);
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠΔᐃ]);
				ᐃΔⵠ(ᐃ, 82 * Ⲇ, Ⲇ * 67, Ⲇ * Δᐃⵠᐃ);
				ᐃⵠ(ᐃ, ᐃⲆ[7]);
				ᐃ.translate(-96 * Ⲇ, Ⲇ * -25);
				ᐃ.scale(1.8, 1.8);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 85, Ⲇ * 21);
				ᐃ.bezierCurveTo(Ⲇ * 73, Ⲇ * Ⲇᐃⵠᐃᐃ, 70 * Ⲇ, Ⲇ * ⲆⲆⲆⲆᐃⲆⲆ, 70 * Ⲇ, 26 * Ⲇ);
				ᐃ.bezierCurveTo(72 * Ⲇ, Ⲇ * 34, 75 * Ⲇ, 37 * Ⲇ, Ⲇ * 85, 26 * Ⲇ);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆᐃ], ᐃⲆ[5], 3 * Ⲇ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(89 * Ⲇ, 21 * Ⲇ);
				ᐃ.bezierCurveTo(104 * Ⲇ, 16 * Ⲇ, 105 * Ⲇ, Ⲇ * ᐃΔⵠⲆⲆ, Ⲇ * 106, 24 * Ⲇ);
				ᐃ.bezierCurveTo(105 * Ⲇ, Ⲇ * 36, Ⲇ * 97, 36 * Ⲇ, Ⲇ * 90, 28 * Ⲇ);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⵠⵠⲆⵠ], ⵠⵠᐃΔ * Ⲇ);
				ᐃΔⵠ(ᐃ, Ⲇ * 87, Ⲇ * 23, Ⲇ * 6.324555320336759);
				ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ᐃΔᐃⲆⲆ], Ⲇ * ᐃΔΔΔ)
			} else if (Δᐃ == ᐃΔⲆΔⲆ) {
				ᐃ.translate(27 * Ⲇ, ᐃΔⲆΔΔ * Ⲇ);
				ᐃΔⵠ(ᐃ, Ⲇ * ⵠⵠᐃᐃⲆ, Ⲇ * 76, Ⲇ * 9.219544457292887);
				ᐃⵠ(ᐃ, ᐃⲆ[3]);
				ᐃΔⵠ(ᐃ, Ⲇ * 106, Ⲇ * 76, 9.219544457292887 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔΔ]);
				ᐃ.translate(-27 * Ⲇ, -ᐃΔⲆΔⲆᐃᐃ * Ⲇ);
				ᐃ.translate(Ⲇ * 27, 10 * Ⲇ);
				ᐃΔⵠ(ᐃ, Ⲇ * 35, Ⲇ * 75, Ⲇ * ΔⲆⵠⲆⵠᐃⵠ);
				ᐃⵠ(ᐃ, ᐃⲆ[5]);
				ᐃΔⵠ(ᐃ, 85 * Ⲇ, 75 * Ⲇ, ᐃⵠⲆⵠᐃⵠΔ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⲆ]);
				ᐃΔⵠ(ᐃ, 32 * Ⲇ, 67 * Ⲇ, Ⲇ * 5);
				ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⵠⵠⲆ]);
				ᐃΔⵠ(ᐃ, 82 * Ⲇ, Ⲇ * 67, Ⲇ * 5);
				ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆⵠΔΔ]);
				ᐃ.translate(-27 * Ⲇ, -ᐃⲆⵠΔΔ * Ⲇ);
				ᐃ.translate(27 * Ⲇ, Ⲇ * 8);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(52 * Ⲇ, 86 * Ⲇ);
				ᐃ.bezierCurveTo(54 * Ⲇ, Ⲇ * 78, Ⲇ * 65, Ⲇ * 80, 67 * Ⲇ, Ⲇ * 85);
				ᐃ.bezierCurveTo(69 * Ⲇ, Ⲇ * 89, 64 * Ⲇ, 99 * Ⲇ, 71 * Ⲇ, Ⲇ * 106);
				ᐃ.bezierCurveTo(Ⲇ * 75, 109 * Ⲇ, Ⲇ * 61, Ⲇ * 108, Ⲇ * 58, 102 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 53, Ⲇ * 97, Ⲇ * 52, 91 * Ⲇ, Ⲇ * 52, Ⲇ * 86);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[4])
			} else if (Δᐃᐃⵠᐃ == Δᐃ) {
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.translate(Ⲇ * 2, 0);
				ᐃ.moveTo(Ⲇ * 28, Ⲇ * 69);
				ᐃ.bezierCurveTo(Ⲇ * 26, Ⲇ * 39, Ⲇ * 31, Ⲇ * 25, Ⲇ * 52, Ⲇ * 24);
				ᐃ.bezierCurveTo(Ⲇ * 86, Ⲇ * 23.5, Ⲇ * 86, Ⲇ * 23.5, 120 * Ⲇ, Ⲇ * 23);
				ᐃ.bezierCurveTo(137 * Ⲇ, Ⲇ * 23, Ⲇ * 145, 33 * Ⲇ, Ⲇ * 144, 53 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 144.5, Ⲇ * 63, 144.5 * Ⲇ, 63 * Ⲇ, 145 * Ⲇ, Ⲇ * 73);
				ᐃ.bezierCurveTo(141 * Ⲇ, 41 * Ⲇ, Ⲇ * 106, Ⲇ * 41, 98 * Ⲇ, Ⲇ * 59);
				ᐃ.bezierCurveTo(Ⲇ * 92, 69 * Ⲇ, 94 * Ⲇ, Ⲇ * 98, Ⲇ * 90, 95 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 86, 95 * Ⲇ, 86 * Ⲇ, Ⲇ * 95, Ⲇ * 82, 95 * Ⲇ);
				ᐃ.bezierCurveTo(79 * Ⲇ, Ⲇ * 94, Ⲇ * 87, Ⲇ * 33, 48 * Ⲇ, 47 * Ⲇ);
				ᐃ.bezierCurveTo(31 * Ⲇ, 57 * Ⲇ, Ⲇ * 30, Ⲇ * 65, Ⲇ * 28, Ⲇ * 72);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[3]);
				ᐃ.save();
				ᐃ.translate(Ⲇ * 87, 64.5 * Ⲇ);
				ᐃᐃᐃ(ᐃ, Ⲇ * -56, -41.5 * Ⲇ, Ⲇ * 112, 83 * Ⲇ, Ⲇ * ⲆⲆΔⲆⵠ);
				ᐃ.restore();
				ᐃⵠ(ᐃ, ΔⵠΔⲆⲆ, ᐃⲆ[2], 4 * Ⲇ);
				ᐃ.translate(27 * Ⲇ, Ⲇ * 10);
				ᐃΔⵠ(ᐃ, Ⲇ * 35, 75 * Ⲇ, Ⲇ * ⵠΔⵠᐃⲆⵠⵠ);
				ᐃⵠ(ᐃ, ᐃⲆ[3]);
				ᐃΔⵠ(ᐃ, 85 * Ⲇ, Ⲇ * 75, 15 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[3]);
				ᐃΔⵠ(ᐃ, Ⲇ * 32, Ⲇ * 67, 5 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[4]);
				ᐃΔⵠ(ᐃ, Ⲇ * 82, 67 * Ⲇ, ΔΔⵠΔ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[4]);
				ᐃ.scale(1.4, 1.4);
				ᐃ.translate(Ⲇ * -43.5, -32 * Ⲇ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 86, Ⲇ * 105);
				ᐃ.bezierCurveTo(89 * Ⲇ, 103 * Ⲇ, Ⲇ * 90, ⵠⲆΔᐃΔ * Ⲇ, 92 * Ⲇ, Ⲇ * 97);
				ᐃ.bezierCurveTo(93 * Ⲇ, Ⲇ * 91, Ⲇ * 85, 90 * Ⲇ, 81 * Ⲇ, 95 * Ⲇ);
				ᐃ.bezierCurveTo(80 * Ⲇ, Ⲇ * 97, 83 * Ⲇ, 101 * Ⲇ, Ⲇ * 85, Ⲇ * 105);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[ⲆⵠᐃΔᐃ], ΔⵠⲆⲆ * Ⲇ)
			} else if (ⵠΔⵠΔᐃ == Δᐃ) {
				ᐃ.save();
				ᐃ.translate(86 * Ⲇ, 64.5 * Ⲇ);
				ᐃᐃᐃ(ᐃ, -16 * Ⲇ, Ⲇ * -43.5, 32 * Ⲇ, Ⲇ * 87, 5 * Ⲇ);
				ᐃ.restore();
				ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ], ᐃⲆ[ᐃΔⲆΔⲆ], Ⲇ * 4);
				ᐃ.translate(ΔᐃΔ, 6 * Ⲇ);
				ᐃ.globalAlpha = .5;
				ᐃ.save();
				ᐃ.translate(85.5 * Ⲇ, 47 * Ⲇ);
				ᐃᐃᐃ(ᐃ, -58.5 * Ⲇ, Ⲇ * -8, 117 * Ⲇ, Ⲇ * 16, Ⲇ * 5);
				ᐃ.restore();
				ᐃⵠ(ᐃ, ᐃⲆ[0]);
				ᐃ.translate(0, Ⲇ * -ΔΔⲆⵠΔ);
				ᐃ.globalAlpha = Δᐃᐃ;
				ᐃ.save();
				ᐃ.translate(85.5 * Ⲇ, Ⲇ * 47);
				ᐃᐃᐃ(ᐃ, Ⲇ * -58.5, -8 * Ⲇ, 117 * Ⲇ, Ⲇ * ᐃᐃᐃⵠΔⲆΔ, 5 * Ⲇ);
				ᐃ.restore();
				ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], Ⲇ * ⲆⵠⲆᐃ);
				ᐃ.translate(ⵠᐃΔⲆ, ᐃᐃΔⵠⵠⲆⲆ * Ⲇ);
				ᐃ.globalAlpha = .5;
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 84, Ⲇ * 44);
				ᐃ.bezierCurveTo(Ⲇ * 85, 26 * Ⲇ, 96 * Ⲇ, 23 * Ⲇ, 103 * Ⲇ, 30 * Ⲇ);
				ᐃ.bezierCurveTo(110 * Ⲇ, 36 * Ⲇ, Ⲇ * 110, 47 * Ⲇ, 92 * Ⲇ, 50 * Ⲇ);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[0]);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(87 * Ⲇ, Ⲇ * 44);
				ᐃ.bezierCurveTo(Ⲇ * 108, Ⲇ * 47, 109 * Ⲇ, Ⲇ * 54, Ⲇ * 102, Ⲇ * 63);
				ᐃ.bezierCurveTo(92 * Ⲇ, 77 * Ⲇ, 80 * Ⲇ, Ⲇ * 61, 84 * Ⲇ, 49 * Ⲇ);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(84 * Ⲇ, 43 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 86, Ⲇ * 24, Ⲇ * 72, 23 * Ⲇ, 68 * Ⲇ, 31 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 56, Ⲇ * 42, 70 * Ⲇ, 49 * Ⲇ, Ⲇ * 81, Ⲇ * 47);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[0]);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 78, 45 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 61, Ⲇ * 49, Ⲇ * 60, Ⲇ * 58, 68 * Ⲇ, Ⲇ * 64);
				ᐃ.bezierCurveTo(Ⲇ * 78, 75 * Ⲇ, 84 * Ⲇ, 65 * Ⲇ, Ⲇ * 89, Ⲇ * 54);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[0]);
				ᐃ.translate(0, Ⲇ * -7);
				ᐃ.globalAlpha = ᐃⵠⵠ;
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 84, 44 * Ⲇ);
				ᐃ.bezierCurveTo(85 * Ⲇ, 26 * Ⲇ, 96 * Ⲇ, Ⲇ * 23, Ⲇ * 103, Ⲇ * 30);
				ᐃ.bezierCurveTo(110 * Ⲇ, Ⲇ * 36, Ⲇ * 110, 47 * Ⲇ, 92 * Ⲇ, Ⲇ * 50);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔⵠ], ᐃⲆ[ⲆⵠⵠⲆ], ⲆⵠⲆᐃ * Ⲇ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 87, 44 * Ⲇ);
				ᐃ.bezierCurveTo(108 * Ⲇ, Ⲇ * 47, Ⲇ * 109, 54 * Ⲇ, 102 * Ⲇ, 63 * Ⲇ);
				ᐃ.bezierCurveTo(92 * Ⲇ, 77 * Ⲇ, Ⲇ * 80, Ⲇ * 61, Ⲇ * 84, 49 * Ⲇ);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆᐃⲆ], ᐃⲆ[4], 4 * Ⲇ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(84 * Ⲇ, Ⲇ * 43);
				ᐃ.bezierCurveTo(Ⲇ * 86, 24 * Ⲇ, 72 * Ⲇ, Ⲇ * 23, 68 * Ⲇ, 31 * Ⲇ);
				ᐃ.bezierCurveTo(56 * Ⲇ, 42 * Ⲇ, 70 * Ⲇ, Ⲇ * 49, Ⲇ * 81, 47 * Ⲇ);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠΔ], ᐃⲆ[4], 4 * Ⲇ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(78 * Ⲇ, Ⲇ * 45);
				ᐃ.bezierCurveTo(61 * Ⲇ, 49 * Ⲇ, Ⲇ * 60, Ⲇ * 58, Ⲇ * 68, 64 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 78, Ⲇ * 75, 84 * Ⲇ, 65 * Ⲇ, 89 * Ⲇ, Ⲇ * 54);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔᐃΔΔ], ΔⵠⲆⵠⲆ * Ⲇ);
				ᐃ.translate(0, ⲆΔΔΔΔ * Ⲇ);
				ᐃ.globalAlpha = .5;
				ᐃ.save();
				ᐃ.translate(Ⲇ * 85, 47.5 * Ⲇ);
				ᐃ.rotate(ⵠⵠΔᐃ);
				ᐃᐃᐃ(ᐃ, Ⲇ * -10, -10.5 * Ⲇ, 20 * Ⲇ, Ⲇ * 21, Ⲇ * 5);
				ᐃ.restore();
				ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
				ᐃ.translate(0, Ⲇ * -ᐃΔΔⵠΔ);
				ᐃ.globalAlpha = ⵠⲆⲆⲆ;
				ᐃ.save();
				ᐃ.translate(Ⲇ * 85, Ⲇ * 47.5);
				ᐃ.rotate(0);
				ᐃᐃᐃ(ᐃ, -ᐃⲆᐃⲆᐃ * Ⲇ, Ⲇ * -10.5, Ⲇ * 20, Ⲇ * 21, Ⲇ * Δᐃⵠᐃ);
				ᐃ.restore();
				ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], 4 * Ⲇ);
				ᐃ.translate(27 * Ⲇ, Ⲇ * ⵠᐃⵠⲆΔ);
				ᐃΔⵠ(ᐃ, 35 * Ⲇ, Ⲇ * 75, 15 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[5]);
				ᐃΔⵠ(ᐃ, Ⲇ * 85, 75 * Ⲇ, ⵠᐃⲆᐃᐃ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⲆ]);
				ᐃΔⵠ(ᐃ, 32 * Ⲇ, 67 * Ⲇ, Ⲇ * ᐃΔᐃⲆⲆ);
				ᐃⵠ(ᐃ, ᐃⲆ[6]);
				ᐃΔⵠ(ᐃ, Ⲇ * 82, Ⲇ * 67, Ⲇ * 5);
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠᐃⵠ])
			} else if (5 == Δᐃ) {
				ⲆⲆ.width = Ⲇ * 211;
				ⲆⲆ.height = 152 * Ⲇ;
				ᐃ.globalAlpha = .5;
				ᐃ.translate(0, ⲆᐃⲆⵠⲆ * Ⲇ);
				ᐃ.save();
				ᐃ.translate(Ⲇ * 105.5, 76.5 * Ⲇ);
				ᐃᐃᐃ(ᐃ, -56 * Ⲇ, -41.5 * Ⲇ, Ⲇ * 112, Ⲇ * 83, ⲆᐃΔᐃⲆ * Ⲇ);
				ᐃ.restore();
				ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠⲆ]);
				ᐃ.globalAlpha = ⵠΔΔ;
				ᐃ.translate(Δⵠⵠ, -ⲆΔⵠΔⲆⵠᐃ * Ⲇ);
				ᐃ.save();
				ᐃ.translate(105.5 * Ⲇ, Ⲇ * 76.5);
				ᐃᐃᐃ(ᐃ, Ⲇ * -56, -41.5 * Ⲇ, Ⲇ * 112, 83 * Ⲇ, 18 * Ⲇ);
				ᐃ.restore();
				ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * ⲆⵠⲆⲆⲆ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(68 * Ⲇ, Ⲇ * 39);
				ᐃ.bezierCurveTo(48 * Ⲇ, Ⲇ * 37, 43 * Ⲇ, 27 * Ⲇ, 40 * Ⲇ, ΔΔΔⲆΔ * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 31, 25 * Ⲇ, ⵠΔⲆΔⵠ * Ⲇ, Ⲇ * ⲆⲆΔⲆᐃΔⲆ, ΔᐃⵠⲆᐃΔΔ * Ⲇ, Ⲇ * 9);
				ᐃ.bezierCurveTo(Ⲇ * ᐃᐃⵠᐃΔ, 41 * Ⲇ, Ⲇ * 40, 44 * Ⲇ, 62 * Ⲇ, 45 * Ⲇ);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠᐃⲆ], ᐃⲆ[ⲆᐃᐃΔ], ⵠⲆⲆΔΔ * Ⲇ);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 143, Ⲇ * 38);
				ᐃ.bezierCurveTo(161 * Ⲇ, Ⲇ * 40, Ⲇ * 169, Ⲇ * 24, 171 * Ⲇ, 13 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 181, 23 * Ⲇ, Ⲇ * 188, 20 * Ⲇ, 199 * Ⲇ, 9 * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 204, Ⲇ * 35, Ⲇ * 182, Ⲇ * 44, Ⲇ * 152, 45 * Ⲇ);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ], ᐃⲆ[Δᐃᐃⵠ], ⲆⵠⲆⲆⲆ * Ⲇ);
				ᐃ.save();
				ᐃ.translate(Ⲇ * 105.5, 76.5 * Ⲇ);
				ᐃᐃᐃ(ᐃ, Ⲇ * -55, -40.5 * Ⲇ, 106 * Ⲇ, 77 * Ⲇ, Ⲇ * ΔⵠᐃⲆΔⲆⵠ);
				ᐃ.restore();
				ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆ]);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(149 * Ⲇ, Ⲇ * 45);
				ᐃ.bezierCurveTo(Ⲇ * 155, 37 * Ⲇ, Ⲇ * 158, Ⲇ * 37, Ⲇ * 161, Ⲇ * 52);
				ᐃ.bezierCurveTo(164 * Ⲇ, 60 * Ⲇ, Ⲇ * 161, Ⲇ * 65, 152 * Ⲇ, Ⲇ * 58);
				ᐃ.bezierCurveTo(145 * Ⲇ, 51 * Ⲇ, Ⲇ * 143, 49 * Ⲇ, Ⲇ * 149, 45 * Ⲇ);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ΔΔᐃᐃ], Ⲇ * 4);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(60 * Ⲇ, Ⲇ * 43);
				ᐃ.bezierCurveTo(67 * Ⲇ, 47 * Ⲇ, Ⲇ * 67, 51 * Ⲇ, 57 * Ⲇ, 59 * Ⲇ);
				ᐃ.bezierCurveTo(50 * Ⲇ, Ⲇ * 64, 47 * Ⲇ, 64 * Ⲇ, Ⲇ * 49, Ⲇ * 55);
				ᐃ.bezierCurveTo(49 * Ⲇ, 42 * Ⲇ, Ⲇ * 51, 38 * Ⲇ, 59 * Ⲇ, Ⲇ * 42);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔⵠ], ᐃⲆ[Δⵠᐃᐃ], Ⲇ * ᐃⵠⲆⲆ);
				ᐃΔⵠ(ᐃ, 105 * Ⲇ, 107 * Ⲇ, 10.63014581273465 * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⲆΔΔ], ᐃⲆ[ΔΔⲆⵠΔ], Ⲇ * 4);
				ᐃ.beginPath();
				ᐃ.lineCap = Δ[237];
				ᐃ.lineJoin = Δ[237];
				ᐃ.moveTo(Ⲇ * 105, ᐃⵠᐃⲆⵠ * Ⲇ);
				ᐃ.bezierCurveTo(Ⲇ * 111, 101 * Ⲇ, Ⲇ * 113, Ⲇ * 104, Ⲇ * 112, Ⲇ * 109);
				ᐃ.closePath();
				ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆⵠ]);
				ᐃ.translate(Ⲇ * 44.5, Ⲇ * 22);
				ᐃΔⵠ(ᐃ, 35 * Ⲇ, 75 * Ⲇ, ᐃΔΔᐃᐃ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[8]);
				ᐃΔⵠ(ᐃ, 85 * Ⲇ, Ⲇ * 75, ᐃΔΔᐃᐃ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[8]);
				ᐃΔⵠ(ᐃ, Ⲇ * 32, Ⲇ * 67, ⵠⵠΔⲆ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[9]);
				ᐃΔⵠ(ᐃ, Ⲇ * 82, 67 * Ⲇ, ⵠΔΔΔ * Ⲇ);
				ᐃⵠ(ᐃ, ᐃⲆ[9])
			} else Δᐃ == ⲆᐃⲆΔⲆⵠⵠ && (ᐃ.save(), ᐃ.translate(110 * Ⲇ, Ⲇ * 22), ᐃᐃᐃ(ᐃ, Ⲇ * -16, Ⲇ * -5, 32 * Ⲇ, Ⲇ * ᐃᐃΔⵠⵠ, 10 * Ⲇ), ᐃ.restore(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃ], ᐃⲆ[Ⲇⵠᐃⵠ], 3 * Ⲇ), ᐃ.save(), ᐃ.translate(109.5 * Ⲇ, 17 * Ⲇ), ᐃᐃᐃ(ᐃ, Ⲇ * -18.5, -3 * Ⲇ, Ⲇ * 37, Ⲇ * 6, 10 * Ⲇ), ᐃ.restore(), ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], Ⲇ * ΔⵠⲆⲆ), ᐃ.globalAlpha = .5, ᐃ.translate(ⵠᐃΔ, 5 * Ⲇ), ᐃ.save(), ᐃ.translate(Ⲇ * 86, 40 * Ⲇ), ᐃᐃᐃ(ᐃ, -58 * Ⲇ, Ⲇ * -ΔⲆⲆⲆⲆ, 116 * Ⲇ, 18 * Ⲇ, 6 * Ⲇ), ᐃ.restore(), ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ]), ᐃ.globalAlpha = 1, ᐃ.translate(ⵠᐃΔ, -5 * Ⲇ), ᐃ.save(), ᐃ.translate(Ⲇ * 86, Ⲇ * 40), ᐃᐃᐃ(ᐃ, Ⲇ * -58, Ⲇ * -9, Ⲇ * 116, ⵠⵠΔⲆᐃⲆΔ * Ⲇ, ⵠΔΔⲆΔ * Ⲇ), ᐃ.restore(), ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], 3 * Ⲇ), ᐃ.globalAlpha = .75, ᐃ.translate(0, ᐃΔᐃⲆⲆ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(109 * Ⲇ, Ⲇ * 47), ᐃ.bezierCurveTo(Ⲇ * 110.5, 45 * Ⲇ, Ⲇ * 110.5, 45 * Ⲇ, Ⲇ * 112, 43 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 114, Ⲇ * 44, 114 * Ⲇ, Ⲇ * 44, Ⲇ * 116, Ⲇ * 45), ᐃ.bezierCurveTo(Ⲇ * 117.5, Ⲇ * 43, Ⲇ * 117.5, 43 * Ⲇ, Ⲇ * 119, 41 * Ⲇ), ᐃ.bezierCurveTo(121 * Ⲇ, 41.5 * Ⲇ, 121 * Ⲇ, Ⲇ * 41.5, 123 * Ⲇ, Ⲇ * 42), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ]), ᐃ.beginPath(), ᐃ.translate(ⲆᐃⲆ, ΔⵠⲆᐃⵠ * Ⲇ), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(54 * Ⲇ, 35 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 61.5, Ⲇ * 35, 61.5 * Ⲇ, 35 * Ⲇ, Ⲇ * 69, 35 * Ⲇ), ᐃ.bezierCurveTo(70 * Ⲇ, Ⲇ * 48, Ⲇ * 70, 60 * Ⲇ, 60 * Ⲇ, 59 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 45, Ⲇ * 61, Ⲇ * 44, 60 * Ⲇ, 43 * Ⲇ, Ⲇ * 53), ᐃ.bezierCurveTo(42 * Ⲇ, Ⲇ * 49, Ⲇ * 55, Ⲇ * 51, Ⲇ * 55, Ⲇ * 44), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = 1, ᐃ.translate(Δⵠⵠ, -ⲆΔΔΔ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 105, 38 * Ⲇ), ᐃ.bezierCurveTo(110 * Ⲇ, 48 * Ⲇ, 110 * Ⲇ, Ⲇ * 50, Ⲇ * 105, 53 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 98, 62 * Ⲇ, 107 * Ⲇ, 66 * Ⲇ, Ⲇ * 117, Ⲇ * 60), ᐃ.bezierCurveTo(Ⲇ * 128, 56 * Ⲇ, Ⲇ * 130, 56 * Ⲇ, 126 * Ⲇ, Ⲇ * 49), ᐃ.bezierCurveTo(Ⲇ * 123.5, 41.5 * Ⲇ, 123.5 * Ⲇ, 41.5 * Ⲇ, 121 * Ⲇ, Ⲇ * 34), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠⲆΔ], ᐃⲆ[8], 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 109, Ⲇ * 47), ᐃ.bezierCurveTo(110.5 * Ⲇ, Ⲇ * 45, Ⲇ * 110.5, Ⲇ * 45, Ⲇ * 112, Ⲇ * 43), ᐃ.bezierCurveTo(114 * Ⲇ, 44 * Ⲇ, Ⲇ * 114, Ⲇ * 44, Ⲇ * 116, 45 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 117.5, 43 * Ⲇ, Ⲇ * 117.5, Ⲇ * 43, Ⲇ * 119, Ⲇ * 41), ᐃ.bezierCurveTo(121 * Ⲇ, Ⲇ * 41.5, Ⲇ * 121, 41.5 * Ⲇ, Ⲇ * 123, 42 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃΔⵠᐃⵠ, ᐃⲆ[6], Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 84, 33 * Ⲇ), ᐃ.bezierCurveTo(88.5 * Ⲇ, 34.5 * Ⲇ, 88.5 * Ⲇ, 34.5 * Ⲇ, 93 * Ⲇ, 36 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 87, 43 * Ⲇ, Ⲇ * 88, 45 * Ⲇ, Ⲇ * 91, Ⲇ * 46), ᐃ.bezierCurveTo(Ⲇ * 98, Ⲇ * 56, 91 * Ⲇ, Ⲇ * 57, Ⲇ * 85, 53 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 80, 50 * Ⲇ, 78 * Ⲇ, 49 * Ⲇ, Ⲇ * 82, 43 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 83.5, 38 * Ⲇ, Ⲇ * 83.5, 38 * Ⲇ, Ⲇ * 85, 33 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[Ⲇⵠᐃᐃⵠ], 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(54 * Ⲇ, Ⲇ * 35), ᐃ.bezierCurveTo(61.5 * Ⲇ, Ⲇ * 35, Ⲇ * 61.5, Ⲇ * 35, Ⲇ * 69, Ⲇ * 35), ᐃ.bezierCurveTo(Ⲇ * 70, 48 * Ⲇ, 70 * Ⲇ, 60 * Ⲇ, 60 * Ⲇ, Ⲇ * 59), ᐃ.bezierCurveTo(45 * Ⲇ, Ⲇ * 61, 44 * Ⲇ, 60 * Ⲇ, Ⲇ * 43, 53 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 42, Ⲇ * 49, Ⲇ * 55, 51 * Ⲇ, 55 * Ⲇ, 44 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔⵠⵠⲆⲆ], ᐃⲆ[8], Ⲇ * ΔⵠᐃⲆ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(48 * Ⲇ, 49 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 50, 50 * Ⲇ, 50 * Ⲇ, Ⲇ * 50, 52 * Ⲇ, 51 * Ⲇ), ᐃ.bezierCurveTo(50.5 * Ⲇ, Ⲇ * 52, 50.5 * Ⲇ, Ⲇ * 52, 49 * Ⲇ, 53 * Ⲇ), ᐃ.bezierCurveTo(51 * Ⲇ, 54.5 * Ⲇ, 51 * Ⲇ, 54.5 * Ⲇ, 53 * Ⲇ, Ⲇ * 56), ᐃ.bezierCurveTo(Ⲇ * 51, Ⲇ * 57.5, 51 * Ⲇ, 57.5 * Ⲇ, Ⲇ * 49, Ⲇ * 59), ᐃ.closePath(), ᐃⵠ(ᐃ, ⵠᐃΔⵠΔ, ᐃⲆ[6], Ⲇ * ᐃΔΔⵠ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 54, Ⲇ * 39), ᐃ.bezierCurveTo(61.5 * Ⲇ, 39.5 * Ⲇ, Ⲇ * 61.5, 39.5 * Ⲇ, 69 * Ⲇ, 40 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⵠⲆⵠⲆ, ᐃⲆ[ᐃΔᐃⲆΔ], 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(55 * Ⲇ, Ⲇ * 43), ᐃ.bezierCurveTo(Ⲇ * 61.5, Ⲇ * 43.5, Ⲇ * 61.5, 43.5 * Ⲇ, 68 * Ⲇ, Ⲇ * 44), ᐃ.closePath(), ᐃⵠ(ᐃ, ⲆⲆΔᐃⵠ, ᐃⲆ[6], Ⲇ * ᐃⵠᐃⲆ), ᐃ.translate(27 * Ⲇ, Ⲇ * Δᐃⵠᐃ), ᐃΔⵠ(ᐃ, 35 * Ⲇ, 75 * Ⲇ, Ⲇ * ᐃᐃⵠΔⵠ), ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔᐃᐃᐃᐃᐃ]), ᐃΔⵠ(ᐃ, Ⲇ * 85, Ⲇ * 75, Ⲇ * ⵠΔΔΔⲆᐃΔ), ᐃⵠ(ᐃ, ᐃⲆ[9]), ᐃΔⵠ(ᐃ, Ⲇ * 32, 67 * Ⲇ, Ⲇ * 5), ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔⵠⵠ]), ᐃΔⵠ(ᐃ, 82 * Ⲇ, Ⲇ * 67, Ⲇ * ΔΔⵠΔ), ᐃⵠ(ᐃ, ᐃⲆ[10]))
		}
		return ⲆⲆ
	}

	function ⲆᐃΔⵠΔⵠΔᐃⲆ(Ⲇ, ᐃⲆᐃᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var ⲆΔΔ = Math.floor(28 * Ⲇ);
		var ⲆΔΔΔⲆ = Math.floor(ⵠⵠⵠⲆᐃ * Ⲇ);
		ᐃ.font = ⲆΔΔΔⲆ + Δ[139];
		var ⲆⵠⲆᐃᐃ = Ⲇ * ⲆᐃⵠᐃⲆ;
		var Δⵠᐃ = ᐃ.measureText(ᐃⲆᐃᐃ).width + ⲆⵠⲆᐃᐃ * 2;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃᐃᐃ(ᐃ, 0, 0, Δⵠᐃ, ⲆΔΔ, 10 * Ⲇ);
		ᐃ.globalAlpha = .5;
		ᐃⵠ(ᐃ, Δ[287]);
		ᐃ.globalAlpha = ᐃⲆΔ;
		ᐃ.textBaseline = Δ[99], ᐃ.font = ⲆΔΔΔⲆ + Δ[139];
		ᐃ.beginPath();
		ᐃ.fillStyle = "red";
		ᐃ.fillText(ᐃⲆᐃᐃ, ⲆⵠⲆᐃᐃ, ⲆΔΔ / 2);
		return ⲆⲆ
	} // CHAT

	function ΔⵠⵠΔᐃⵠⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 120;
		var ⲆΔΔ = Ⲇ * 110;
		var w2 = Δⵠᐃ / 2;
		var ᐃᐃⲆᐃⵠ = ⲆΔΔ / 2;
		var ΔⲆⵠⵠ = Ⲇ * ⲆⵠⵠΔⵠ;
		var ⵠⵠᐃⲆⵠᐃⲆ = Ⲇ * 112;
		var ΔⵠᐃΔⲆᐃⵠ = Ⲇ * 82;
		var ⲆⵠΔΔᐃⵠᐃᐃⲆ = ⵠⵠᐃⲆⵠᐃⲆ / ᐃᐃᐃᐃ;
		var ⲆΔΔᐃⲆⵠᐃⲆᐃ = ΔⵠᐃΔⲆᐃⵠ / Δᐃᐃⵠ;
		var ⲆⲆⵠ = Ⲇ * 4;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.globalAlpha = 1;
		ᐃ.translate(w2, ᐃᐃⲆᐃⵠ);
		ᐃᐃᐃ(ᐃ, -ⲆⵠΔΔᐃⵠᐃᐃⲆ, -ⲆΔΔᐃⲆⵠᐃⲆᐃ, ⵠⵠᐃⲆⵠᐃⲆ, ΔⵠᐃΔⲆᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ, ᐃⲆ, ⲆⲆⵠ);
		return ⲆⲆ
	}
	const Ⲇᐃⵠⵠ = ᐃⲆⵠΔ;

	function ⲆⵠⲆΔΔⵠⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 264;
		ⲆⲆ.height = 246 * Ⲇ;
		ᐃ.translate(ΔΔⲆⲆ, ⲆⵠΔΔⵠ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(75 * Ⲇ, 54 * Ⲇ);
		ᐃ.bezierCurveTo(79 * Ⲇ, 21 * Ⲇ, 131 * Ⲇ, Ⲇ * 13, 153 * Ⲇ, 36 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 204, 27 * Ⲇ, 221 * Ⲇ, 52 * Ⲇ, Ⲇ * 216, Ⲇ * 83);
		ᐃ.bezierCurveTo(Ⲇ * 241, 103 * Ⲇ, Ⲇ * 232, 138 * Ⲇ, Ⲇ * 214, Ⲇ * 147);
		ᐃ.bezierCurveTo(Ⲇ * 223, 184 * Ⲇ, Ⲇ * 201, Ⲇ * 200, Ⲇ * 175, 199 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 156, Ⲇ * 218, 135 * Ⲇ, Ⲇ * 222, Ⲇ * 114, Ⲇ * 203);
		ᐃ.bezierCurveTo(Ⲇ * 62, 213 * Ⲇ, 66 * Ⲇ, Ⲇ * 189, 59 * Ⲇ, 170 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 27, Ⲇ * 164, 31 * Ⲇ, Ⲇ * 134, Ⲇ * 38, 123 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ᐃⲆΔΔΔΔΔ, Ⲇ * 80, Ⲇ * 51, Ⲇ * 52, Ⲇ * 75, 54 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ]);
		ᐃ.translate(ⲆΔⵠΔ, Ⲇ * -ᐃⲆᐃⲆᐃ);
		ᐃ.globalAlpha = ⵠΔᐃ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(75 * Ⲇ, 54 * Ⲇ);
		ᐃ.bezierCurveTo(79 * Ⲇ, 21 * Ⲇ, 131 * Ⲇ, Ⲇ * 13, Ⲇ * 153, 36 * Ⲇ);
		ᐃ.bezierCurveTo(204 * Ⲇ, Ⲇ * 27, Ⲇ * 221, 52 * Ⲇ, 216 * Ⲇ, 83 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 241, 103 * Ⲇ, 232 * Ⲇ, Ⲇ * 138, Ⲇ * 214, Ⲇ * 147);
		ᐃ.bezierCurveTo(223 * Ⲇ, Ⲇ * 184, 201 * Ⲇ, 200 * Ⲇ, Ⲇ * 175, Ⲇ * 199);
		ᐃ.bezierCurveTo(156 * Ⲇ, Ⲇ * 218, 135 * Ⲇ, 222 * Ⲇ, 114 * Ⲇ, 203 * Ⲇ);
		ᐃ.bezierCurveTo(62 * Ⲇ, Ⲇ * 213, Ⲇ * 66, Ⲇ * 189, Ⲇ * 59, Ⲇ * 170);
		ᐃ.bezierCurveTo(27 * Ⲇ, Ⲇ * 164, Ⲇ * 31, 134 * Ⲇ, Ⲇ * 38, 123 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⵠⵠⵠⵠⵠ, Ⲇ * 80, 51 * Ⲇ, 52 * Ⲇ, Ⲇ * 75, Ⲇ * 54);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * ⵠᐃⵠᐃⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 121, 102 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 111, Ⲇ * 80, 110 * Ⲇ, 66 * Ⲇ, Ⲇ * 108, Ⲇ * 51);
		ᐃ.bezierCurveTo(119 * Ⲇ, 65 * Ⲇ, 129 * Ⲇ, 85 * Ⲇ, Ⲇ * 135, Ⲇ * 99);
		ᐃ.bezierCurveTo(Ⲇ * 142, 67 * Ⲇ, 146 * Ⲇ, 60 * Ⲇ, Ⲇ * 152, Ⲇ * 50);
		ᐃ.bezierCurveTo(154 * Ⲇ, 71 * Ⲇ, Ⲇ * 152, 85 * Ⲇ, 149 * Ⲇ, Ⲇ * 104);
		ᐃ.bezierCurveTo(Ⲇ * 166, 88 * Ⲇ, 175 * Ⲇ, 83 * Ⲇ, Ⲇ * 188, 78 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 179, Ⲇ * 91, Ⲇ * 170, 103 * Ⲇ, Ⲇ * 160, 112 * Ⲇ);
		ᐃ.bezierCurveTo(186 * Ⲇ, 107 * Ⲇ, Ⲇ * 191, 107 * Ⲇ, 204 * Ⲇ, 108 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 195, Ⲇ * 114, Ⲇ * 179, Ⲇ * 120, Ⲇ * 163, 123 * Ⲇ);
		ᐃ.bezierCurveTo(183 * Ⲇ, Ⲇ * 130, Ⲇ * 186, Ⲇ * 135, 192 * Ⲇ, Ⲇ * 140);
		ᐃ.bezierCurveTo(179 * Ⲇ, 141 * Ⲇ, Ⲇ * 164, Ⲇ * 139, 153 * Ⲇ, Ⲇ * 135);
		ᐃ.bezierCurveTo(Ⲇ * 158, 145 * Ⲇ, 163 * Ⲇ, 159 * Ⲇ, Ⲇ * 165, 177 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 154, 166 * Ⲇ, 145 * Ⲇ, 153 * Ⲇ, Ⲇ * 138, Ⲇ * 139);
		ᐃ.bezierCurveTo(133 * Ⲇ, 155 * Ⲇ, Ⲇ * 125, Ⲇ * 170, Ⲇ * 117, 182 * Ⲇ);
		ᐃ.bezierCurveTo(116 * Ⲇ, 160 * Ⲇ, Ⲇ * 119, 151 * Ⲇ, 124 * Ⲇ, 138 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 107, Ⲇ * 150, 95 * Ⲇ, 156 * Ⲇ, 82 * Ⲇ, 159 * Ⲇ);
		ᐃ.bezierCurveTo(94 * Ⲇ, 140 * Ⲇ, Ⲇ * 101, 136 * Ⲇ, Ⲇ * 113, Ⲇ * 128);
		ᐃ.bezierCurveTo(78 * Ⲇ, 123 * Ⲇ, Ⲇ * 75, 121 * Ⲇ, 67 * Ⲇ, 118 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 85, 112 * Ⲇ, 94 * Ⲇ, Ⲇ * 112, Ⲇ * 111, 113 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 89, 97 * Ⲇ, Ⲇ * 85, Ⲇ * 93, Ⲇ * 78, Ⲇ * 82);
		ᐃ.bezierCurveTo(92 * Ⲇ, Ⲇ * 85, Ⲇ * 101, 90 * Ⲇ, Ⲇ * 121, Ⲇ * 102);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠΔⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 128, Ⲇ * 103);
		ᐃ.bezierCurveTo(Ⲇ * 111, 112 * Ⲇ, 117 * Ⲇ, 136 * Ⲇ, 140 * Ⲇ, Ⲇ * 130);
		ᐃ.bezierCurveTo(Ⲇ * 151, Ⲇ * 126, Ⲇ * 156, Ⲇ * 115, 155 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(Ⲇ * 155, Ⲇ * 96, 154 * Ⲇ, 94 * Ⲇ, 148 * Ⲇ, 94 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 141, Ⲇ * 94, 146 * Ⲇ, 104 * Ⲇ, 136 * Ⲇ, 104 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆ], ᐃⲆ[ᐃᐃⲆⵠ], Ⲇ * ⵠᐃΔΔΔ);
		return ⲆⲆ
	}

	function ⲆⵠᐃⲆΔΔᐃᐃᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 70;
		ⲆⲆ.height = Ⲇ * 70;
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, 26 * Ⲇ, 26 * Ⲇ, ΔⲆⲆⲆⲆ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃΔⵠ(ᐃ, Ⲇ * 56, 36 * Ⲇ, Ⲇ * 9);
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃᐃ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 40, Ⲇ * 50, 9 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆⲆⵠ]);
		ᐃ.globalAlpha = 1;
		ᐃΔⵠ(ᐃ, 26 * Ⲇ, 26 * Ⲇ, 5 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃΔⵠ(ᐃ, Ⲇ * 56, 36 * Ⲇ, ᐃᐃⲆΔΔ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃΔⵠ(ᐃ, 40 * Ⲇ, Ⲇ * 50, ⵠΔΔΔ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠΔⲆ]);
		return ⲆⲆ
	}

	function ⲆⲆⵠᐃΔᐃⲆⲆⵠ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 175;
		ⲆⲆ.height = 150 * Ⲇ;
		if (0 == Δᐃ) {
			ᐃ.globalAlpha = .5;
			ᐃ.translate(-88 * Ⲇ, -95 * Ⲇ);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 174, Ⲇ * 195.5);
			ᐃᐃᐃ(ᐃ, Ⲇ * -82, Ⲇ * -46.5, Ⲇ * 164, Ⲇ * 93, Ⲇ * 30);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.globalAlpha = ⵠⵠⵠΔ;
			ᐃ.save();
			ᐃ.translate(Ⲇ * 174, Ⲇ * 170.5);
			ᐃᐃᐃ(ᐃ, -81 * Ⲇ, -59.5 * Ⲇ, 162 * Ⲇ, Ⲇ * 119, Ⲇ * 28);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃΔ], ᐃⲆ[2], Ⲇ * 6.5);
			ᐃΔⵠ(ᐃ, 137 * Ⲇ, Ⲇ * 200, Ⲇ * 22.090722034374522);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, 210 * Ⲇ, Ⲇ * 200, 22.20360331117452 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, Ⲇ * 131, 194 * Ⲇ, 7 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃΔⵠ(ᐃ, 206 * Ⲇ, 194 * Ⲇ, ΔΔⲆⲆⲆ * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆᐃ]);
			ᐃ.translate(0, 1 * Ⲇ);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 138.5, 180.5 * Ⲇ);
			ᐃᐃᐃ(ᐃ, -22.5 * Ⲇ, Ⲇ * -11.5, 45 * Ⲇ, Ⲇ * 23, Ⲇ * ᐃⲆⵠΔ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 207, Ⲇ * 177.5);
			ᐃᐃᐃ(ᐃ, Ⲇ * -31, -9.5 * Ⲇ, 62 * Ⲇ, Ⲇ * ⲆΔᐃΔⲆ, Ⲇ * 0);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔ]);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 171.5, Ⲇ * 220);
			ᐃᐃᐃ(ᐃ, -52.5 * Ⲇ, -2 * Ⲇ, 105 * Ⲇ, Ⲇ * ᐃΔⲆΔⲆ, ΔΔⲆⲆ * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆ])
		} else if (ΔⵠⲆ == Δᐃ) {
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * -88, -95 * Ⲇ);
			ᐃ.save();
			ᐃ.translate(174 * Ⲇ, Ⲇ * 195.5);
			ᐃᐃᐃ(ᐃ, -82 * Ⲇ, -46.5 * Ⲇ, Ⲇ * 164, 93 * Ⲇ, 30 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ]);
			ᐃ.globalAlpha = Δᐃᐃ;
			ᐃ.save();
			ᐃ.translate(Ⲇ * 174, 170.5 * Ⲇ);
			ᐃᐃᐃ(ᐃ, -81 * Ⲇ, -59.5 * Ⲇ, Ⲇ * 162, 119 * Ⲇ, 28 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[Δⵠᐃᐃ], Ⲇ * 6.5);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 183, 223 * Ⲇ);
			ᐃ.bezierCurveTo(193 * Ⲇ, Ⲇ * 187, Ⲇ * 215, 193 * Ⲇ, Ⲇ * 227, Ⲇ * 159);
			ᐃ.bezierCurveTo(Ⲇ * 227, 194 * Ⲇ, 209 * Ⲇ, Ⲇ * 187, 183 * Ⲇ, Ⲇ * 223);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[5]);
			ᐃΔⵠ(ᐃ, 137 * Ⲇ, 200 * Ⲇ, 22.090722034374522 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆᐃ]);
			ᐃΔⵠ(ᐃ, 210 * Ⲇ, Ⲇ * 200, Ⲇ * 22.20360331117452);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, Ⲇ * 131, Ⲇ * 190, ΔΔⲆⲆⲆ * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃΔⵠ(ᐃ, 204 * Ⲇ, Ⲇ * 190, 7 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(120 * Ⲇ, 154 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 125, Ⲇ * 146, 131 * Ⲇ, Ⲇ * 143, Ⲇ * 147, Ⲇ * 137);
			ᐃ.bezierCurveTo(139 * Ⲇ, 147 * Ⲇ, Ⲇ * 129, Ⲇ * 152, Ⲇ * 121, 154 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[5]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(120 * Ⲇ, 162 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 134, 153 * Ⲇ, 139 * Ⲇ, Ⲇ * 149, Ⲇ * 150, Ⲇ * 144);
			ᐃ.bezierCurveTo(143 * Ⲇ, 155 * Ⲇ, 128 * Ⲇ, 163 * Ⲇ, 121 * Ⲇ, 161 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[5]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(127 * Ⲇ, 142 * Ⲇ);
			ᐃ.bezierCurveTo(129 * Ⲇ, Ⲇ * 151, Ⲇ * 132, Ⲇ * 157, 137 * Ⲇ, 162 * Ⲇ);
			ᐃ.bezierCurveTo(134 * Ⲇ, Ⲇ * 152, Ⲇ * 132, 146 * Ⲇ, 127 * Ⲇ, 142 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[Δᐃⵠᐃ]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(135 * Ⲇ, 140 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 141, 144 * Ⲇ, Ⲇ * 143, Ⲇ * 150, Ⲇ * 143, 157 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 138, 150 * Ⲇ, Ⲇ * 136, Ⲇ * 145, Ⲇ * 135, 140 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔⲆ])
		} else if (Δᐃ == 2) {
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * -88, Ⲇ * -95);
			ᐃ.save();
			ᐃ.translate(174 * Ⲇ, 195.5 * Ⲇ);
			ᐃᐃᐃ(ᐃ, -82 * Ⲇ, -46.5 * Ⲇ, Ⲇ * 164, 93 * Ⲇ, 30 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.globalAlpha = ⲆΔᐃ;
			ᐃ.save();
			ᐃ.translate(Ⲇ * 174, Ⲇ * 170.5);
			ᐃᐃᐃ(ᐃ, Ⲇ * -81, Ⲇ * -59.5, Ⲇ * 162, 119 * Ⲇ, 28 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆ], ᐃⲆ[2], 6.5 * Ⲇ);
			ᐃΔⵠ(ᐃ, Ⲇ * 137, Ⲇ * 200, Ⲇ * 22.090722034374522);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, Ⲇ * 210, Ⲇ * 200, 22.20360331117452 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ]);
			ᐃΔⵠ(ᐃ, 130 * Ⲇ, 192 * Ⲇ, Ⲇ * 7);
			ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔΔ]);
			ᐃΔⵠ(ᐃ, 203 * Ⲇ, 192 * Ⲇ, Ⲇ * ⵠⲆⵠⲆΔ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⲆⲆ]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(115 * Ⲇ, 224 * Ⲇ);
			ᐃ.bezierCurveTo(173 * Ⲇ, Ⲇ * 223.5, Ⲇ * 173, 223.5 * Ⲇ, 231 * Ⲇ, Ⲇ * 223);
			ᐃ.bezierCurveTo(230 * Ⲇ, 222 * Ⲇ, 198 * Ⲇ, 223 * Ⲇ, 186 * Ⲇ, 209 * Ⲇ);
			ᐃ.bezierCurveTo(173.5 * Ⲇ, Ⲇ * 209, 173.5 * Ⲇ, Ⲇ * 209, 161 * Ⲇ, 209 * Ⲇ);
			ᐃ.bezierCurveTo(146 * Ⲇ, 224 * Ⲇ, 114 * Ⲇ, 223 * Ⲇ, Ⲇ * 116, Ⲇ * 224);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 112, 193 * Ⲇ);
			ᐃ.bezierCurveTo(154 * Ⲇ, Ⲇ * 182, 194 * Ⲇ, 183 * Ⲇ, Ⲇ * 234, Ⲇ * 192);
			ᐃ.bezierCurveTo(Ⲇ * 217, 154 * Ⲇ, 148 * Ⲇ, Ⲇ * 127, 112 * Ⲇ, Ⲇ * 192);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ])
		} else if (Δᐃ == ⵠΔⲆⲆ) {
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * -88, Ⲇ * -95);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 174, Ⲇ * 195.5);
			ᐃᐃᐃ(ᐃ, -82 * Ⲇ, Ⲇ * -46.5, 164 * Ⲇ, Ⲇ * 93, Ⲇ * 30);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ]);
			ᐃ.globalAlpha = 1;
			ᐃ.save();
			ᐃ.translate(Ⲇ * 174, 170.5 * Ⲇ);
			ᐃᐃᐃ(ᐃ, Ⲇ * -81, -59.5 * Ⲇ, 162 * Ⲇ, 119 * Ⲇ, Ⲇ * 28);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 6.5 * Ⲇ);
			ᐃΔⵠ(ᐃ, Ⲇ * 137, Ⲇ * 200, 22.090722034374522 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃ]);
			ᐃΔⵠ(ᐃ, 210 * Ⲇ, 200 * Ⲇ, 22.20360331117452 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠΔ]);
			ᐃΔⵠ(ᐃ, Ⲇ * 130, 192 * Ⲇ, Ⲇ * ⲆⵠΔⲆⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆᐃ]);
			ᐃΔⵠ(ᐃ, Ⲇ * 203, Ⲇ * 192, ⲆⲆᐃⲆⵠ * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃΔⵠ]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(120 * Ⲇ, 176 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 175, Ⲇ * 193, 147.5 * Ⲇ, 184.5 * Ⲇ, 175 * Ⲇ, 193 * Ⲇ);
			ᐃ.bezierCurveTo(200 * Ⲇ, 184.5 * Ⲇ, Ⲇ * 200, 184.5 * Ⲇ, 225 * Ⲇ, Ⲇ * 176);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[Δᐃᐃ]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(226 * Ⲇ, Ⲇ * 223);
			ᐃ.bezierCurveTo(173.5 * Ⲇ, Ⲇ * 223, Ⲇ * 173.5, 223 * Ⲇ, Ⲇ * 121, 223 * Ⲇ);
			ᐃ.bezierCurveTo(148 * Ⲇ, Ⲇ * 218, Ⲇ * 148, 218 * Ⲇ, Ⲇ * 175, 213 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1])
		} else if (ⵠᐃΔΔΔ == Δᐃ) {
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * -88, Ⲇ * -95);
			ᐃ.save();
			ᐃ.translate(174 * Ⲇ, Ⲇ * 195.5);
			ᐃᐃᐃ(ᐃ, Ⲇ * -82, -46.5 * Ⲇ, Ⲇ * 164, Ⲇ * 93, 30 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ]);
			ᐃ.globalAlpha = 1;
			ᐃ.save();
			ᐃ.translate(174 * Ⲇ, 170.5 * Ⲇ);
			ᐃ.rotate(0);
			ᐃᐃᐃ(ᐃ, -81 * Ⲇ, Ⲇ * -59.5, 162 * Ⲇ, 119 * Ⲇ, Ⲇ * 28);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ᐃΔⲆⵠ], Ⲇ * 6.5);
			ᐃΔⵠ(ᐃ, Ⲇ * 137, 200 * Ⲇ, 22.090722034374522 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, 210 * Ⲇ, 200 * Ⲇ, Ⲇ * 22.20360331117452);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, 137 * Ⲇ, Ⲇ * 203, Ⲇ * ⵠΔᐃᐃΔ);
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃΔⵠ(ᐃ, 209 * Ⲇ, Ⲇ * 203, 8 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃΔⵠ]);
			ᐃ.save();
			ᐃ.translate(174.5 * Ⲇ, 218 * Ⲇ);
			ᐃ.rotate(ⲆᐃⲆ);
			ᐃᐃᐃ(ᐃ, Ⲇ * -60.5, -5 * Ⲇ, Ⲇ * 121, Ⲇ * ⵠᐃᐃⵠⵠ, 28 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆ]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 113, 190 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 144, Ⲇ * 181.5, 144 * Ⲇ, 181.5 * Ⲇ, 175 * Ⲇ, 173 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 205, Ⲇ * 182, Ⲇ * 205, Ⲇ * 182, 235 * Ⲇ, Ⲇ * 191);
			ᐃ.bezierCurveTo(242 * Ⲇ, 141 * Ⲇ, 106 * Ⲇ, Ⲇ * 119, 112 * Ⲇ, 189 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ])
		} else if (5 == Δᐃ) {
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * -88, -95 * Ⲇ);
			ᐃ.save();
			ᐃ.translate(174 * Ⲇ, 195.5 * Ⲇ);
			ᐃᐃᐃ(ᐃ, Ⲇ * -82, -46.5 * Ⲇ, Ⲇ * 164, Ⲇ * 93, Ⲇ * 30);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ]);
			ᐃ.globalAlpha = 1;
			ᐃ.save();
			ᐃ.translate(Ⲇ * 174, Ⲇ * 170.5);
			ᐃ.rotate(ⵠⲆᐃ);
			ᐃᐃᐃ(ᐃ, Ⲇ * -81, -59.5 * Ⲇ, Ⲇ * 162, 119 * Ⲇ, Ⲇ * 28);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ᐃⵠΔⲆ], Ⲇ * 6.5);
			ᐃΔⵠ(ᐃ, Ⲇ * 137, 200 * Ⲇ, Ⲇ * 22.090722034374522);
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆⲆ]);
			ᐃΔⵠ(ᐃ, Ⲇ * 210, 200 * Ⲇ, Ⲇ * 22.20360331117452);
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠⵠ]);
			ᐃΔⵠ(ᐃ, 140 * Ⲇ, Ⲇ * 196, Ⲇ * ⵠⵠΔΔᐃΔΔ);
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃΔⵠ(ᐃ, 213 * Ⲇ, 196 * Ⲇ, 7 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃΔⵠ(ᐃ, Ⲇ * 131, Ⲇ * 206, Ⲇ * ᐃᐃΔⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃΔⵠ(ᐃ, 204 * Ⲇ, 206 * Ⲇ, 3 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔⵠ]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 113, 181 * Ⲇ);
			ᐃ.bezierCurveTo(159 * Ⲇ, 204 * Ⲇ, 190 * Ⲇ, 202 * Ⲇ, 235 * Ⲇ, Ⲇ * 181);
			ᐃ.bezierCurveTo(241 * Ⲇ, 137 * Ⲇ, Ⲇ * 109, Ⲇ * 130, Ⲇ * 112, Ⲇ * 180);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⵠ]);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 174, Ⲇ * 220);
			ᐃ.rotate(0);
			ᐃᐃᐃ(ᐃ, Ⲇ * -56, Ⲇ * -5, 112 * Ⲇ, Ⲇ * ⲆⵠΔΔⵠ, Δᐃᐃ * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[1])
		} else if (ᐃΔⵠⲆⵠ == Δᐃ) {
			ᐃ.globalAlpha = .5;
			ᐃ.translate(-88 * Ⲇ, Ⲇ * -95);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 174, Ⲇ * 195.5);
			ᐃᐃᐃ(ᐃ, Ⲇ * -82, -46.5 * Ⲇ, Ⲇ * 164, 93 * Ⲇ, 30 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]);
			ᐃ.globalAlpha = 1;
			ᐃ.save();
			ᐃ.translate(174 * Ⲇ, Ⲇ * 170.5);
			ᐃᐃᐃ(ᐃ, -81 * Ⲇ, Ⲇ * -59.5, Ⲇ * 162, 119 * Ⲇ, 28 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃ], ᐃⲆ[2], 6.5 * Ⲇ);
			ᐃΔⵠ(ᐃ, Ⲇ * 137, Ⲇ * 200, 22.090722034374522 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔⵠ]);
			ᐃΔⵠ(ᐃ, 210 * Ⲇ, 200 * Ⲇ, 22.20360331117452 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, 133 * Ⲇ, Ⲇ * 188, Ⲇ * 7);
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃΔⵠ(ᐃ, 206 * Ⲇ, Ⲇ * 188, Ⲇ * ⲆⵠΔⲆⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⲆⵠ]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 110, 193 * Ⲇ);
			ᐃ.bezierCurveTo(130 * Ⲇ, Ⲇ * 182, Ⲇ * 142, Ⲇ * 183, 162 * Ⲇ, 193 * Ⲇ);
			ᐃ.bezierCurveTo(164 * Ⲇ, Ⲇ * 176.5, 164 * Ⲇ, Ⲇ * 176.5, 166 * Ⲇ, Ⲇ * 160);
			ᐃ.bezierCurveTo(Ⲇ * 137, 159 * Ⲇ, 137 * Ⲇ, 159 * Ⲇ, 108 * Ⲇ, 158 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(184 * Ⲇ, Ⲇ * 192);
			ᐃ.bezierCurveTo(205 * Ⲇ, 183 * Ⲇ, 216 * Ⲇ, 183 * Ⲇ, Ⲇ * 234, 192 * Ⲇ);
			ᐃ.bezierCurveTo(233.5 * Ⲇ, Ⲇ * 177, 233.5 * Ⲇ, 177 * Ⲇ, 233 * Ⲇ, 162 * Ⲇ);
			ᐃ.bezierCurveTo(209 * Ⲇ, Ⲇ * 161.5, 186 * Ⲇ, 162 * Ⲇ, 185 * Ⲇ, 161 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1])
		} else if (7 == Δᐃ) {
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * -88, -95 * Ⲇ);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 174, Ⲇ * 195.5);
			ᐃᐃᐃ(ᐃ, Ⲇ * -82, -46.5 * Ⲇ, Ⲇ * 164, Ⲇ * 93, 30 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ]);
			ᐃ.globalAlpha = 1;
			ᐃ.save();
			ᐃ.translate(Ⲇ * 174, Ⲇ * 170.5);
			ᐃᐃᐃ(ᐃ, -81 * Ⲇ, -59.5 * Ⲇ, Ⲇ * 162, 119 * Ⲇ, Ⲇ * 28);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ], ᐃⲆ[ⲆᐃᐃΔ], 6.5 * Ⲇ);
			ᐃΔⵠ(ᐃ, Ⲇ * 137, Ⲇ * 200, 22.090722034374522 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, Ⲇ * 210, Ⲇ * 200, 22.20360331117452 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, 130 * Ⲇ, 206 * Ⲇ, Ⲇ * 7);
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃΔⵠ(ᐃ, Ⲇ * 203, Ⲇ * 206, Ⲇ * ᐃΔΔⲆⲆ);
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 108, 191 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 141, 184 * Ⲇ, Ⲇ * 141, Ⲇ * 184, 174 * Ⲇ, Ⲇ * 177);
			ᐃ.bezierCurveTo(Ⲇ * 207, 184 * Ⲇ, 207 * Ⲇ, Ⲇ * 184, Ⲇ * 240, Ⲇ * 191);
			ᐃ.bezierCurveTo(244 * Ⲇ, Ⲇ * 140, 113 * Ⲇ, Ⲇ * 121, Ⲇ * 108, 191 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1])
		} else if (Δᐃ == ΔΔⲆⵠⵠ) {
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * -88, -95 * Ⲇ);
			ᐃ.save();
			ᐃ.translate(174 * Ⲇ, 195.5 * Ⲇ);
			ᐃᐃᐃ(ᐃ, Ⲇ * -82, -46.5 * Ⲇ, 164 * Ⲇ, 93 * Ⲇ, 30 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ]);
			ᐃ.globalAlpha = ΔⲆΔᐃ;
			ᐃ.save();
			ᐃ.translate(Ⲇ * 174, Ⲇ * 170.5);
			ᐃᐃᐃ(ᐃ, -81 * Ⲇ, Ⲇ * -59.5, 162 * Ⲇ, 119 * Ⲇ, 28 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⵠᐃⵠⲆ], Ⲇ * 6.5);
			ᐃΔⵠ(ᐃ, Ⲇ * 137, Ⲇ * 200, Ⲇ * 22.090722034374522);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, 210 * Ⲇ, Ⲇ * 200, 22.20360331117452 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, 127 * Ⲇ, 198 * Ⲇ, 7 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⲆⵠ]);
			ᐃΔⵠ(ᐃ, Ⲇ * 200, Ⲇ * 198, Ⲇ * ⵠⵠᐃΔᐃ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔΔ]);
			ᐃ.save();
			ᐃ.translate(175 * Ⲇ, 175.5 * Ⲇ);
			ᐃᐃᐃ(ᐃ, -67 * Ⲇ, -13.5 * Ⲇ, 134 * Ⲇ, 27 * Ⲇ, Ⲇ * Δⵠⵠ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 172, 219 * Ⲇ);
			ᐃᐃᐃ(ᐃ, -60 * Ⲇ, -4 * Ⲇ, Ⲇ * 120, 8 * Ⲇ, Ⲇ * 0);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔ])
		} else if (Δᐃ == 9) {
			ᐃ.globalAlpha = .5;
			ᐃ.translate(-88 * Ⲇ, -95 * Ⲇ);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 174, Ⲇ * 195.5);
			ᐃᐃᐃ(ᐃ, Ⲇ * -82, -46.5 * Ⲇ, 164 * Ⲇ, 93 * Ⲇ, Ⲇ * 30);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.globalAlpha = ⲆⵠΔⲆ;
			ᐃ.save();
			ᐃ.translate(174 * Ⲇ, Ⲇ * 170.5);
			ᐃᐃᐃ(ᐃ, Ⲇ * -81, -59.5 * Ⲇ, 162 * Ⲇ, 119 * Ⲇ, 28 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔᐃ], ᐃⲆ[2], Ⲇ * 6.5);
			ᐃΔⵠ(ᐃ, Ⲇ * 137, Ⲇ * 200, 22.090722034374522 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃΔⵠ(ᐃ, Ⲇ * 210, 200 * Ⲇ, Ⲇ * 22.090722034374522);
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆⲆ]);
			ᐃΔⵠ(ᐃ, Ⲇ * 143, Ⲇ * 200, 7 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃΔⵠ(ᐃ, Ⲇ * 204, 200 * Ⲇ, ⵠⵠⵠⲆΔ * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[4])
		}
		return ⲆⲆ
	}

	function ΔΔⵠΔⵠᐃΔΔⵠ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 350 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 350;
		ᐃ.translate(0, ᐃΔΔᐃᐃ * Ⲇ);
		ᐃ.globalAlpha = .5;
		ᐃ.save();
		ᐃ.translate(174 * Ⲇ, Ⲇ * 172);
		ᐃᐃᐃ(ᐃ, -81 * Ⲇ, -60 * Ⲇ, 162 * Ⲇ, Ⲇ * 120, Ⲇ * 26);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(0, Ⲇ * -ⲆⵠⲆΔⵠ);
		ᐃ.globalAlpha = ⵠΔᐃ;
		ᐃ.save();
		ᐃ.translate(174 * Ⲇ, 172 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -81 * Ⲇ, Ⲇ * -60, 162 * Ⲇ, Ⲇ * 120, Ⲇ * 26);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⲆ], ᐃⲆ[2], ᐃΔΔⲆⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 179, Ⲇ * 211);
		ᐃ.bezierCurveTo(183 * Ⲇ, Ⲇ * 204.5, Ⲇ * 183, Ⲇ * 204.5, 187 * Ⲇ, 198 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 198.5, Ⲇ * 191.5, Ⲇ * 198.5, 191.5 * Ⲇ, Ⲇ * 210, 185 * Ⲇ);
		ᐃ.bezierCurveTo(215 * Ⲇ, Ⲇ * 176.5, Ⲇ * 215, 176.5 * Ⲇ, 220 * Ⲇ, Ⲇ * 168);
		ᐃ.bezierCurveTo(213 * Ⲇ, 173.5 * Ⲇ, 213 * Ⲇ, Ⲇ * 173.5, Ⲇ * 206, Ⲇ * 179);
		ᐃ.bezierCurveTo(195 * Ⲇ, Ⲇ * 184, 195 * Ⲇ, Ⲇ * 184, 184 * Ⲇ, 189 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⲆᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(167 * Ⲇ, 233 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 167, 207 * Ⲇ, Ⲇ * 167, 207 * Ⲇ, Ⲇ * 167, Ⲇ * 181);
		ᐃ.bezierCurveTo(Ⲇ * 167, 166 * Ⲇ, Ⲇ * 157, 164 * Ⲇ, Ⲇ * 148, Ⲇ * 165);
		ᐃ.bezierCurveTo(Ⲇ * 120, 165 * Ⲇ, 120 * Ⲇ, 165 * Ⲇ, 92 * Ⲇ, Ⲇ * 165);
		ᐃ.bezierCurveTo(Ⲇ * 92, 186.5 * Ⲇ, Ⲇ * 92, Ⲇ * 186.5, Ⲇ * 92, Ⲇ * 208);
		ᐃ.bezierCurveTo(93 * Ⲇ, Ⲇ * 222, Ⲇ * 102, 234 * Ⲇ, Ⲇ * 119, Ⲇ * 233);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * ⲆⵠΔⲆⵠ);
		ᐃΔⵠ(ᐃ, Ⲇ * 152, Ⲇ * 179, Ⲇ * Ⲇⵠᐃᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔΔΔ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 107, Ⲇ * 179, 6 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔΔ]);
		ᐃ.save();
		ᐃ.translate(210 * Ⲇ, 200 * Ⲇ);
		ᐃ.rotate(.2);
		ᐃⵠΔⵠ(ᐃ, Δᐃᐃⵠᐃ, 32 * Ⲇ, Ⲇ * ᐃᐃᐃⵠⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⲆΔΔ], ᐃⲆ[2], Ⲇ * 7);
		ᐃ.save();
		ᐃ.translate(210 * Ⲇ, 200 * Ⲇ);
		ᐃ.rotate(1.0471975511965976);
		ᐃⵠΔⵠ(ᐃ, Ⲇⵠᐃᐃⵠ, ⲆΔⲆⵠΔᐃⲆ * Ⲇ, Ⲇ * 6);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃᐃⵠᐃ], ᐃⲆ[ⵠⵠⵠⲆΔ], 7 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(205 * Ⲇ, Ⲇ * 193);
		ᐃ.rotate(ⲆΔⵠΔ);
		ᐃⵠΔⵠ(ᐃ, 6, Ⲇ * 10, Ⲇ * ᐃᐃΔⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠᐃⵠ]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 137, 200 * Ⲇ);
		ᐃ.rotate(-.5235987755982988);
		ᐃⵠΔⵠ(ᐃ, 6, Ⲇ * 20, Ⲇ * 5);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[7], 7 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(131 * Ⲇ, Ⲇ * 194);
		ᐃⵠΔⵠ(ᐃ, ⵠΔⲆⵠⲆ, Ⲇ * ⲆⵠΔΔⵠ, 3 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⵠⵠ]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 150.5, Ⲇ * 120);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, -19.5 * Ⲇ, -ⲆΔΔⲆⵠ * Ⲇ, Ⲇ * 39, ΔⵠⵠⲆΔᐃΔ * Ⲇ, ⵠᐃΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔᐃΔⲆ], Ⲇ * ᐃΔᐃⲆᐃ);
		return ⲆⲆ
	}
	const ⵠⲆᐃⵠⲆ = ⵠⲆΔᐃΔ;

	function ⲆⲆⵠⵠⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 22;
		ⲆⲆ.height = Ⲇ * 22;
		ᐃ.globalAlpha = .4;
		ᐃΔⵠ(ᐃ, Ⲇ * 11, Ⲇ * 11, 10 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ]);
		ᐃ.globalAlpha = .7;
		ᐃΔⵠ(ᐃ, Ⲇ * ΔᐃⲆΔⲆⵠⵠ, ΔᐃⵠⵠΔⲆΔ * Ⲇ, Ⲇ * ⲆΔΔᐃΔ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃΔⵠ(ᐃ, Ⲇ * ⵠⵠⵠⵠⵠ, 11 * Ⲇ, 4 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		return ⲆⲆ
	}
	const ᐃΔⲆΔⲆᐃⵠ = ⵠⲆΔⲆᐃ;

	function ᐃⲆⲆⵠΔⵠΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 248;
		ⲆⲆ.height = 247 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(183 * Ⲇ, 107 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -8, -70.5 * Ⲇ, 16 * Ⲇ, 141 * Ⲇ, Ⲇ * ⵠΔⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 69.5, 110 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -8.5 * Ⲇ, Ⲇ * -71, 17 * Ⲇ, Ⲇ * 143, 1 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 123.5, Ⲇ * 181);
		ᐃᐃᐃ(ᐃ, Ⲇ * -84.5, -26 * Ⲇ, 169 * Ⲇ, Ⲇ * 52, ⲆΔⲆⲆ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[1], Ⲇ * 6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(41 * Ⲇ, Ⲇ * 95);
		ᐃ.bezierCurveTo(105 * Ⲇ, 96 * Ⲇ, Ⲇ * 113, Ⲇ * 99, Ⲇ * 134, 102 * Ⲇ);
		ᐃ.bezierCurveTo(147 * Ⲇ, 106 * Ⲇ, 173 * Ⲇ, ⵠⲆⲆⵠⲆ * Ⲇ, 207 * Ⲇ, Ⲇ * 105);
		ᐃ.bezierCurveTo(210 * Ⲇ, Ⲇ * 105, 207 * Ⲇ, 140 * Ⲇ, Ⲇ * 207, Ⲇ * 154);
		ᐃ.bezierCurveTo(Ⲇ * 123.5, Ⲇ * 151.5, 123.5 * Ⲇ, 151.5 * Ⲇ, Ⲇ * 40, 149 * Ⲇ);
		ᐃ.bezierCurveTo(37 * Ⲇ, Ⲇ * 145, 39 * Ⲇ, Ⲇ * 95, Ⲇ * 41, Ⲇ * 96);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ΔⵠⲆ], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 68, Ⲇ * 75);
		ᐃ.bezierCurveTo(Ⲇ * 54, 72.5 * Ⲇ, Ⲇ * 54, 72.5 * Ⲇ, Ⲇ * 40, Ⲇ * 70);
		ᐃ.bezierCurveTo(Ⲇ * 38, Ⲇ * 46, Ⲇ * 40, 46 * Ⲇ, Ⲇ * 53, 46 * Ⲇ);
		ᐃ.bezierCurveTo(201 * Ⲇ, 41 * Ⲇ, 201 * Ⲇ, Ⲇ * 41, Ⲇ * 201, Ⲇ * 42);
		ᐃ.bezierCurveTo(211 * Ⲇ, Ⲇ * 40, Ⲇ * 208, 53 * Ⲇ, Ⲇ * 208, 72 * Ⲇ);
		ᐃ.bezierCurveTo(209 * Ⲇ, Ⲇ * 91, 210 * Ⲇ, 96 * Ⲇ, Ⲇ * 194, Ⲇ * 94);
		ᐃ.bezierCurveTo(Ⲇ * 119, 97 * Ⲇ, Ⲇ * 119, Ⲇ * 97, 44 * Ⲇ, Ⲇ * 100);
		ᐃ.bezierCurveTo(Ⲇ * 39, Ⲇ * 99, 40 * Ⲇ, 96 * Ⲇ, 40 * Ⲇ, 80 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 54, 77.5 * Ⲇ, 54 * Ⲇ, Ⲇ * 77.5, 68 * Ⲇ, 75 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆᐃ], ᐃⲆ[1], 6 * Ⲇ);
		return ⲆⲆ
	}

	function ΔᐃΔⲆⲆⲆΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 191 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 153;
		ᐃ.globalAlpha = .5;
		ᐃ.translate(0, Ⲇ * 10);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 97.49996948242188, 95.12844848632812 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -62.5, -41.5 * Ⲇ, Ⲇ * 125, 83 * Ⲇ, Ⲇ * 20);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ], ᐃⲆ[0], 4 * Ⲇ);
		ᐃ.globalAlpha = ⲆΔⲆⵠ;
		ᐃ.translate(ⲆᐃⲆ, -ᐃⲆᐃⲆᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 97.49996948242188, 95.12844848632812 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -62.5, -41.5 * Ⲇ, Ⲇ * 125, 83 * Ⲇ, ⲆⲆᐃᐃᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ΔⲆⲆⵠ], ⲆΔⲆᐃΔ * Ⲇ);
		ᐃ.globalCompositeOperation = Δ[289];
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 26.999969482421875, Ⲇ * 50.850677490234375);
		ᐃ.bezierCurveTo(Ⲇ * 46.499969482421875, 64.85067749023438 * Ⲇ, 46.499969482421875 * Ⲇ, Ⲇ * 64.85067749023438, 65.99996948242188 * Ⲇ, 78.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 80.99996948242188, 87.85067749023438 * Ⲇ, 105.99996948242188 * Ⲇ, Ⲇ * 82.85067749023438, 114.99996948242188 * Ⲇ, 80.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(130.99996948242188 * Ⲇ, Ⲇ * 69.85067749023438, Ⲇ * 152.99996948242188, Ⲇ * 70.85067749023438, Ⲇ * 166.99996948242188, 67.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 156.99996948242188, Ⲇ * 52.850677490234375, 156.99996948242188 * Ⲇ, Ⲇ * 52.850677490234375, Ⲇ * 146.99996948242188, Ⲇ * 37.850677490234375);
		ᐃ.bezierCurveTo(101.49996948242188 * Ⲇ, Ⲇ * 37.350677490234375, 101.49996948242188 * Ⲇ, Ⲇ * 37.350677490234375, Ⲇ * 55.999969482421875, Ⲇ * 36.850677490234375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[3], Ⲇ * ᐃⵠⲆⲆ);
		ᐃ.globalCompositeOperation = Δ[394];
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 40.999969482421875, Ⲇ * 59.850677490234375);
		ᐃ.bezierCurveTo(Ⲇ * 41.999969482421875, Ⲇ * 50.850677490234375, Ⲇ * 47.999969482421875, Ⲇ * 47.850677490234375, Ⲇ * 56.999969482421875, Ⲇ * 49.850677490234375);
		ᐃ.bezierCurveTo(65.99996948242188 * Ⲇ, 41.850677490234375 * Ⲇ, Ⲇ * 76.99996948242188, 42.850677490234375 * Ⲇ, Ⲇ * 90.99996948242188, 47.850677490234375 * Ⲇ);
		ᐃ.bezierCurveTo(94.99996948242188 * Ⲇ, 42.850677490234375 * Ⲇ, Ⲇ * 104.99996948242188, Ⲇ * 42.850677490234375, Ⲇ * 114.99996948242188, Ⲇ * 47.850677490234375);
		ᐃ.bezierCurveTo(131.99996948242188 * Ⲇ, Ⲇ * 42.850677490234375, Ⲇ * 142.99996948242188, 48.850677490234375 * Ⲇ, Ⲇ * 145.99996948242188, Ⲇ * 56.850677490234375);
		ᐃ.bezierCurveTo(Ⲇ * 160.99996948242188, Ⲇ * 63.850677490234375, 154.99996948242188 * Ⲇ, Ⲇ * 69.85067749023438, 155.99996948242188 * Ⲇ, 70.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(141.99996948242188 * Ⲇ, 71.85067749023438 * Ⲇ, Ⲇ * 141.99996948242188, 71.85067749023438 * Ⲇ, Ⲇ * 127.99996948242188, 72.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(110.99996948242188 * Ⲇ, 83.85067749023438 * Ⲇ, Ⲇ * 107.99996948242188, Ⲇ * 82.85067749023438, Ⲇ * 90.99996948242188, 85.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 70.99996948242188, 83.85067749023438 * Ⲇ, 64.99996948242188 * Ⲇ, Ⲇ * 79.85067749023438, 53.999969482421875 * Ⲇ, 70.85067749023438 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], Ⲇ * ΔᐃΔⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 33.999969482421875, 65.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(36.999969482421875 * Ⲇ, Ⲇ * 59.850677490234375, 34.999969482421875 * Ⲇ, Ⲇ * 60.850677490234375, Ⲇ * 39.999969482421875, Ⲇ * 59.850677490234375);
		ᐃ.bezierCurveTo(47.999969482421875 * Ⲇ, 61.850677490234375 * Ⲇ, Ⲇ * 62.999969482421875, 76.85067749023438 * Ⲇ, Ⲇ * 74.99996948242188, 79.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(93.99996948242188 * Ⲇ, 85.85067749023438 * Ⲇ, 111.99996948242188 * Ⲇ, Ⲇ * 83.85067749023438, 124.99996948242188 * Ⲇ, 70.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(129.99996948242188 * Ⲇ, Ⲇ * 67.85067749023438, Ⲇ * 145.99996948242188, 65.85067749023438 * Ⲇ, Ⲇ * 159.99996948242188, 67.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 159.99996948242188, Ⲇ * 71.85067749023438, Ⲇ * 159.99996948242188, 71.85067749023438 * Ⲇ, Ⲇ * 159.99996948242188, Ⲇ * 75.85067749023438);
		ᐃ.bezierCurveTo(Ⲇ * 146.99996948242188, Ⲇ * 72.85067749023438, Ⲇ * 144.99996948242188, Ⲇ * 75.85067749023438, 143.99996948242188 * Ⲇ, 82.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(144.99996948242188 * Ⲇ, 86.85067749023438 * Ⲇ, Ⲇ * 140.99996948242188, Ⲇ * 90.85067749023438, 137.99996948242188 * Ⲇ, 86.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 139.99996948242188, 72.85067749023438 * Ⲇ, Ⲇ * 135.99996948242188, 72.85067749023438 * Ⲇ, Ⲇ * 133.99996948242188, Ⲇ * 82.85067749023438);
		ᐃ.bezierCurveTo(Ⲇ * 127.99996948242188, 88.85067749023438 * Ⲇ, 124.99996948242188 * Ⲇ, 70.85067749023438 * Ⲇ, 116.99996948242188 * Ⲇ, 86.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 110.99996948242188, Ⲇ * 91.85067749023438, Ⲇ * 96.99996948242188, 81.85067749023438 * Ⲇ, Ⲇ * 89.99996948242188, Ⲇ * 90.85067749023438);
		ᐃ.bezierCurveTo(Ⲇ * 85.99996948242188, Ⲇ * 92.85067749023438, 81.99996948242188 * Ⲇ, 95.85067749023438 * Ⲇ, Ⲇ * 76.99996948242188, 86.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 67.99996948242188, Ⲇ * 93.85067749023438, 67.99996948242188 * Ⲇ, 91.85067749023438 * Ⲇ, 60.999969482421875 * Ⲇ, 79.85067749023438 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 53.999969482421875, Ⲇ * 71.85067749023438, Ⲇ * 52.999969482421875, 72.85067749023438 * Ⲇ, 46.999969482421875 * Ⲇ, Ⲇ * 77.85067749023438);
		ᐃ.bezierCurveTo(41.999969482421875 * Ⲇ, 78.85067749023438 * Ⲇ, Ⲇ * 42.999969482421875, Ⲇ * 69.85067749023438, Ⲇ * 33.999969482421875, Ⲇ * 65.85067749023438);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠᐃⲆ], ᐃⲆ[ᐃⲆⵠⲆⲆ], ⵠΔΔⵠ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 68, Ⲇ * 111.29513549804688, Ⲇ * ⵠⵠΔⲆⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔᐃΔΔ], ᐃⲆ[ⵠᐃⵠᐃⵠ], Ⲇ * ΔᐃΔⵠ);
		ᐃΔⵠ(ᐃ, Ⲇ * 123, 111.29510498046875 * Ⲇ, Ⲇ * ᐃⵠⲆⵠᐃⵠΔ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔᐃΔΔ], ᐃⲆ[ⲆΔΔⲆⵠ], Ⲇ * ᐃᐃⲆⵠ);
		ᐃΔⵠ(ᐃ, Ⲇ * 63, Ⲇ * 106, 5 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[9]);
		ᐃΔⵠ(ᐃ, 118 * Ⲇ, Ⲇ * 106, Ⲇ * 5);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆᐃⲆ]);
		return ⲆⲆ
	}

	function ⵠᐃⵠⵠⲆⲆⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 248;
		ⲆⲆ.height = Ⲇ * 247;
		ᐃ.save();
		ᐃ.translate(182 * Ⲇ, Ⲇ * 120);
		ᐃᐃᐃ(ᐃ, Ⲇ * -8, -67 * Ⲇ, 16 * Ⲇ, Ⲇ * 134, ΔⲆΔᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 68.5, Ⲇ * 127.5);
		ᐃᐃᐃ(ᐃ, Ⲇ * -8.5, -70.5 * Ⲇ, Ⲇ * 17, Ⲇ * 141, ⲆΔᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]);
		ᐃ.save();
		ᐃ.translate(123.5 * Ⲇ, Ⲇ * 68);
		ᐃᐃᐃ(ᐃ, -82.5 * Ⲇ, -24 * Ⲇ, 165 * Ⲇ, Ⲇ * 48, Ⲇ * 4);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠᐃᐃ], ᐃⲆ[1], ᐃΔⵠⲆⵠ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 123, Ⲇ * 179.5);
		ᐃᐃᐃ(ᐃ, Ⲇ * -83, -24.5 * Ⲇ, Ⲇ * 166, Ⲇ * 49, ⲆΔⵠᐃΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⵠⲆ], ᐃⲆ[1], 6 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 123.5, Ⲇ * 123.5);
		ᐃ.rotate(6.24);
		ᐃᐃᐃ(ᐃ, Ⲇ * -82.5, -24.5 * Ⲇ, Ⲇ * 165, Ⲇ * 49, Ⲇ * 4);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔᐃⲆ], ᐃⲆ[ᐃⲆⲆ], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(204 * Ⲇ, 112 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 149, 121.5 * Ⲇ, 96 * Ⲇ, 130 * Ⲇ, 94 * Ⲇ, 131 * Ⲇ);
		ᐃ.bezierCurveTo(149.5 * Ⲇ, Ⲇ * 127.5, Ⲇ * 149.5, Ⲇ * 127.5, Ⲇ * 205, 124 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		return ⲆⲆ
	}

	function ⵠᐃᐃⵠⲆⲆⲆΔᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 20 * Ⲇ;
		ⲆⲆ.height = ᐃⵠⲆᐃΔ * Ⲇ;
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, 10 * Ⲇ, ΔΔⲆⲆⵠ * Ⲇ, ΔⲆⲆⲆⲆ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠⵠ]);
		return ⲆⲆ
	}

	function ΔΔᐃᐃⲆᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 248 * Ⲇ;
		ⲆⲆ.height = 247 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 69.5, Ⲇ * 145);
		ᐃᐃᐃ(ᐃ, Ⲇ * -8.5, Ⲇ * -63, Ⲇ * ⲆᐃⵠⲆΔΔⵠ, Ⲇ * 127, Δᐃᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 183, 145 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ⲆᐃⲆΔⲆ, -63 * Ⲇ, ΔⲆⲆⲆⲆⵠⲆ * Ⲇ, 126 * Ⲇ, Ⲇ * 1);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ]);
		ᐃ.save();
		ᐃ.translate(123.5 * Ⲇ, Ⲇ * 62.5);
		ᐃ.rotate(6.28);
		ᐃᐃᐃ(ᐃ, Ⲇ * -84.5, -25.5 * Ⲇ, 169 * Ⲇ, Ⲇ * 51, Ⲇ * 5);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ⵠΔᐃ], 6 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 123.5, 118 * Ⲇ);
		ᐃ.rotate(6.24);
		ᐃᐃᐃ(ᐃ, Ⲇ * -85.5, -24 * Ⲇ, Ⲇ * 169, 48 * Ⲇ, 5 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[1], Ⲇ * ⵠⵠⵠᐃⵠ);
		ᐃ.save();
		ᐃ.translate(122 * Ⲇ, 177.5 * Ⲇ);
		ᐃ.rotate(6.32);
		ᐃᐃᐃ(ᐃ, -84 * Ⲇ, Ⲇ * -23.5, 169 * Ⲇ, Ⲇ * 47, 5 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ⵠΔᐃ], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(37 * Ⲇ, Ⲇ * 157);
		ᐃ.bezierCurveTo(49 * Ⲇ, 160 * Ⲇ, Ⲇ * 49, Ⲇ * 160, 61 * Ⲇ, 163 * Ⲇ);
		ᐃ.bezierCurveTo(49.5 * Ⲇ, 165.5 * Ⲇ, 49.5 * Ⲇ, Ⲇ * 165.5, Ⲇ * 38, Ⲇ * 168);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 205, Ⲇ * 175);
		ᐃ.bezierCurveTo(Ⲇ * 192.5, 180 * Ⲇ, Ⲇ * 192.5, Ⲇ * 180, Ⲇ * 180, Ⲇ * 185);
		ᐃ.bezierCurveTo(Ⲇ * 193, Ⲇ * 188, 193 * Ⲇ, Ⲇ * 188, Ⲇ * 206, 191 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		return ⲆⲆ
	}
	const ⵠⵠⲆⵠΔᐃⲆΔᐃ = ΔΔⵠⵠΔ;
	const ᐃⵠΔⲆΔΔⵠ = ⲆΔΔⲆⵠ;

	function ⲆⲆΔΔΔⲆΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 191 * Ⲇ;
		ⲆⲆ.height = 153 * Ⲇ;
		ᐃ.globalAlpha = .5;
		ᐃ.translate(0, Ⲇ * 10);
		ᐃ.save();
		ᐃ.translate(96.49996948242188 * Ⲇ, 66.79510498046875 * Ⲇ);
		ᐃ.rotate(ⲆᐃⲆ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -79.5, Ⲇ * -48.5, 159 * Ⲇ, 97 * Ⲇ, Ⲇ * 22);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ], ᐃⲆ[0], 4 * Ⲇ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(ⵠⵠΔᐃ, Ⲇ * -ⲆΔⲆⲆⵠ);
		ᐃ.save();
		ᐃ.translate(96.49996948242188 * Ⲇ, Ⲇ * 66.79510498046875);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, Ⲇ * -79.5, -48.5 * Ⲇ, Ⲇ * 159, Ⲇ * 97, 22 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆΔ], ᐃⲆ[ⲆᐃⵠⲆ], Ⲇ * 4);
		ᐃ.translate(Ⲇ * ᐃⵠΔⲆ, 0);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 119, Ⲇ * 28);
		ᐃ.bezierCurveTo(Ⲇ * 119, Ⲇ * 22, Ⲇ * 119, ⲆⲆᐃⵠⲆ * Ⲇ, Ⲇ * 122, 16 * Ⲇ);
		ᐃ.bezierCurveTo(149 * Ⲇ, Ⲇ * 39, Ⲇ * 149, Ⲇ * 39, 176 * Ⲇ, 63 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 176, 75 * Ⲇ, Ⲇ * 176, Ⲇ * 75, 175 * Ⲇ, 88 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 174, 90 * Ⲇ, 174 * Ⲇ, Ⲇ * 90, 172 * Ⲇ, Ⲇ * 93);
		ᐃ.bezierCurveTo(Ⲇ * 171, 101 * Ⲇ, 169 * Ⲇ, 109 * Ⲇ, 164 * Ⲇ, Ⲇ * 113);
		ᐃ.bezierCurveTo(Ⲇ * 163, 104 * Ⲇ, 163 * Ⲇ, 104 * Ⲇ, Ⲇ * 162, Ⲇ * 95);
		ᐃ.bezierCurveTo(Ⲇ * 155, 105 * Ⲇ, 155 * Ⲇ, Ⲇ * 105, Ⲇ * 147, Ⲇ * 116);
		ᐃ.bezierCurveTo(87 * Ⲇ, 114 * Ⲇ, 87 * Ⲇ, Ⲇ * 114, Ⲇ * 26, Ⲇ * 112);
		ᐃ.bezierCurveTo(Ⲇ * 27, Ⲇ * 106, Ⲇ * 27, 106 * Ⲇ, Ⲇ * 27, 101 * Ⲇ);
		ᐃ.bezierCurveTo(24 * Ⲇ, Ⲇ * 104, 24 * Ⲇ, 104 * Ⲇ, Ⲇ * 20, Ⲇ * 108);
		ᐃ.bezierCurveTo(ΔⲆⲆⲆⵠ * Ⲇ, Ⲇ * 103, 20 * Ⲇ, 86 * Ⲇ, Ⲇ * 23, Ⲇ * 72);
		ᐃ.bezierCurveTo(Ⲇ * ⵠΔⵠᐃⲆⵠⵠ, Ⲇ * 74, ⲆⲆΔⵠⲆⵠⲆ * Ⲇ, 78 * Ⲇ, 12 * Ⲇ, 83 * Ⲇ);
		ᐃ.bezierCurveTo(ᐃᐃᐃΔᐃΔΔ * Ⲇ, Ⲇ * 65, Ⲇ * ⲆⵠⵠⲆⲆ, 54 * Ⲇ, 16 * Ⲇ, 42 * Ⲇ);
		ᐃ.bezierCurveTo(ᐃⲆᐃⲆΔ * Ⲇ, Ⲇ * 39, Ⲇ * 14, 39 * Ⲇ, ᐃᐃⵠⲆⲆⲆⲆ * Ⲇ, 36 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ᐃⲆⲆᐃΔ, Ⲇ * 33, Ⲇ * ⲆⵠⲆᐃᐃΔⵠ, Ⲇ * 33, Ⲇ * 19, 30 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⲆΔⵠΔᐃ, 27 * Ⲇ, Ⲇ * ⲆⲆⲆᐃⲆⲆⲆ, 27 * Ⲇ, ⲆᐃⵠⲆΔΔⵠ * Ⲇ, Ⲇ * 25);
		ᐃ.bezierCurveTo(24 * Ⲇ, Ⲇ * 24, Ⲇ * 31, 21 * Ⲇ, Ⲇ * 29, 19 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 37, 25 * Ⲇ, 37 * Ⲇ, Ⲇ * 25, 45 * Ⲇ, Ⲇ * 31);
		ᐃ.bezierCurveTo(40 * Ⲇ, Ⲇ * 23, Ⲇ * 40, 21 * Ⲇ, 42 * Ⲇ, Ⲇ * 16);
		ᐃ.bezierCurveTo(74 * Ⲇ, 16 * Ⲇ, 74 * Ⲇ, Ⲇ * ΔⵠⵠⲆΔᐃΔ, 106 * Ⲇ, ᐃⵠⵠⲆⲆ * Ⲇ);
		ᐃ.bezierCurveTo(113 * Ⲇ, Ⲇ * 21, Ⲇ * 113, Ⲇ * 21, 119 * Ⲇ, 26 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆⲆ], ᐃⲆ[ⲆⵠⲆⲆⲆ], 4 * Ⲇ);
		return ⲆⲆ
	}
	const ΔⵠⲆⲆⵠⵠⵠ = ΔⲆᐃⲆⲆ;

	function ᐃⵠⵠⲆⵠΔⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 191 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 153;
		ᐃ.save();
		ᐃ.translate(96.49996948242188 * Ⲇ, 66.79510498046875 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -79.5, -48.5 * Ⲇ, 159 * Ⲇ, Ⲇ * 97, 22 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠⲆᐃ], ⲆⵠⲆᐃ * Ⲇ);
		ᐃ.translate(Δᐃᐃⵠ * Ⲇ, ⵠᐃΔⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 119, Ⲇ * 28);
		ᐃ.bezierCurveTo(119 * Ⲇ, 22 * Ⲇ, 119 * Ⲇ, 20 * Ⲇ, 122 * Ⲇ, ΔⲆⲆⵠΔ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 149, 39 * Ⲇ, 149 * Ⲇ, 39 * Ⲇ, Ⲇ * 176, 63 * Ⲇ);
		ᐃ.bezierCurveTo(176 * Ⲇ, 75 * Ⲇ, Ⲇ * 176, 75 * Ⲇ, Ⲇ * 175, 88 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 174, 90 * Ⲇ, Ⲇ * 174, 90 * Ⲇ, Ⲇ * 172, Ⲇ * 93);
		ᐃ.bezierCurveTo(Ⲇ * 171, Ⲇ * 101, 169 * Ⲇ, Ⲇ * 109, Ⲇ * 164, Ⲇ * 113);
		ᐃ.bezierCurveTo(163 * Ⲇ, 104 * Ⲇ, 163 * Ⲇ, 104 * Ⲇ, 162 * Ⲇ, 95 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 155, 105 * Ⲇ, 155 * Ⲇ, 105 * Ⲇ, Ⲇ * 147, 116 * Ⲇ);
		ᐃ.bezierCurveTo(87 * Ⲇ, Ⲇ * 114, 87 * Ⲇ, Ⲇ * 114, Ⲇ * 26, 112 * Ⲇ);
		ᐃ.bezierCurveTo(27 * Ⲇ, 106 * Ⲇ, 27 * Ⲇ, 106 * Ⲇ, 27 * Ⲇ, Ⲇ * 101);
		ᐃ.bezierCurveTo(Ⲇ * 24, 104 * Ⲇ, 24 * Ⲇ, 104 * Ⲇ, ⲆΔⲆΔᐃ * Ⲇ, 108 * Ⲇ);
		ᐃ.bezierCurveTo(ⲆΔⲆⵠᐃ * Ⲇ, Ⲇ * 103, ΔⵠⲆⲆⵠⵠⵠ * Ⲇ, Ⲇ * 86, 23 * Ⲇ, 72 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 15, Ⲇ * 74, Ⲇ * ⵠⵠⵠᐃⲆⵠⲆ, Ⲇ * 78, ⲆⵠΔⵠᐃ * Ⲇ, 83 * Ⲇ);
		ᐃ.bezierCurveTo(12 * Ⲇ, 65 * Ⲇ, Ⲇ * 12, 54 * Ⲇ, Ⲇ * ᐃΔⲆⲆⲆ, 42 * Ⲇ);
		ᐃ.bezierCurveTo(ᐃⵠⲆⵠΔ * Ⲇ, Ⲇ * 39, 14 * Ⲇ, Ⲇ * 39, Ⲇ * ᐃᐃᐃΔᐃΔΔ, 36 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 16, Ⲇ * 33, Ⲇ * ΔⵠⵠΔⵠⵠᐃ, 33 * Ⲇ, Ⲇ * ⲆΔᐃΔⲆ, Ⲇ * 30);
		ᐃ.bezierCurveTo(Ⲇ * 18, 27 * Ⲇ, ⲆΔᐃΔΔ * Ⲇ, Ⲇ * 27, 17 * Ⲇ, Ⲇ * 25);
		ᐃ.bezierCurveTo(24 * Ⲇ, Ⲇ * 24, Ⲇ * 31, 21 * Ⲇ, Ⲇ * 29, ⲆΔᐃΔⲆ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 37, 25 * Ⲇ, 37 * Ⲇ, 25 * Ⲇ, 45 * Ⲇ, 31 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 40, Ⲇ * 23, 40 * Ⲇ, 21 * Ⲇ, Ⲇ * 42, 16 * Ⲇ);
		ᐃ.bezierCurveTo(74 * Ⲇ, Ⲇ * Ⲇᐃⵠᐃᐃ, Ⲇ * 74, 16 * Ⲇ, Ⲇ * 106, 16 * Ⲇ);
		ᐃ.bezierCurveTo(113 * Ⲇ, 21 * Ⲇ, 113 * Ⲇ, 21 * Ⲇ, Ⲇ * 119, Ⲇ * 26);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ], ᐃⲆ[ⲆΔⵠΔ], ⲆⲆᐃΔᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 97.49996948242188, 95.12844848632812 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -62.5 * Ⲇ, Ⲇ * -41.5, 125 * Ⲇ, 83 * Ⲇ, Ⲇ * 20);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], 4 * Ⲇ);
		return ⲆⲆ
	}
	const ⵠⵠΔΔ = ⵠΔⵠⲆ;

	function ΔⵠⲆⲆⲆ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 40 * Ⲇ;
		var ⲆΔΔ = Ⲇ * 40;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		var ΔΔ = Ⲇ * Δⵠᐃ / Ⲇⵠᐃⵠ;
		var ΔΔⵠ = Ⲇ * ⲆΔΔ / 2;
		var ⵠᐃⵠ = Ⲇ * 15;
		ᐃ.save();
		ᐃ.translate(ΔΔ, ΔΔⵠ);
		ᐃ.globalAlpha = ΔⵠⲆ;
		ᐃΔⵠ(ᐃ, 0, 0, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ]);
		var ⵠᐃⵠ = Ⲇ * ⵠⵠΔⲆ;
		var ΔΔ = ᐃΔⲆⵠ * Ⲇ;
		var ΔΔⵠ = 1 * Ⲇ;
		ᐃ.translate(ΔΔ, ΔΔⵠ);
		ᐃ.globalAlpha = ⵠΔᐃ;
		ᐃΔⵠ(ᐃ, ⵠⲆⵠ, ⵠᐃΔ, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆ]);
		ᐃ.restore();
		return ⲆⲆ
	}
	const ⲆᐃⵠΔΔᐃⲆ = ΔᐃΔᐃⵠ;

	function ⲆᐃⵠⲆⵠᐃΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * ⵠⲆⲆⵠᐃΔᐃ;
		var ⲆΔΔ = ᐃΔⵠⵠⵠ * Ⲇ;
		var ΔΔ = Δⵠᐃ / Ⲇⵠᐃⵠ;
		var ΔΔⵠ = ⲆΔΔ / ⵠⲆⵠΔ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		var ⲆΔᐃⲆⲆᐃⵠ = Δᐃⵠᐃ * Ⲇ;
		var ΔⵠᐃⵠᐃΔΔ = 28 * Ⲇ;
		var ΔᐃⲆΔᐃᐃᐃ = ⲆΔᐃⲆⲆᐃⵠ / Ⲇⵠᐃⵠ;
		var ⲆⵠⲆⵠᐃⵠᐃ = ΔⵠᐃⵠᐃΔΔ / 2;
		ᐃ.translate(ΔΔ, ΔΔⵠ);
		for (var Δᐃ = 0; Δᐃ < ΔᐃΔⵠ; Δᐃ++) {
			ᐃᐃᐃ(ᐃ, -ΔᐃⲆΔᐃᐃᐃ, -ⲆⵠⲆⵠᐃⵠᐃ, ⲆΔᐃⲆⲆᐃⵠ, ΔⵠᐃⵠᐃΔΔ, Ⲇ * 2);
			ᐃ.rotate(Math.PI / 4);
			ᐃⵠ(ᐃ, ᐃⲆ)
		}
		ᐃ.arc(ⲆᐃⲆ, 0, 10 * Ⲇ, ⵠⲆⵠ, 2 * Math.PI);
		ᐃⵠ(ᐃ, ᐃⲆ);
		ᐃ.globalCompositeOperation = Δ[289];
		ᐃΔⵠ(ᐃ, ⵠⵠΔΔ, 0, Ⲇ * 4);
		ᐃ.fill();
		return ⲆⲆ
	}

	function ΔⲆᐃΔⲆᐃⲆΔΔ(Ⲇ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 200;
		var ⲆΔΔ = Ⲇ * 200;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		var ⵠΔ = ⵠⵠⲆᐃⵠ(.35, false, [Δ[529], "#0b8052", Δ[434]]);
		ᐃ.drawImage(ⵠΔ, 10, 10);
		var ⵠΔ = ⵠⲆΔᐃⵠ(.9, false, [Δ[191], Δ[360]]);
		ᐃ.drawImage(ⵠΔ, 21, 20);
		var ⵠΔ = ⵠⲆΔᐃⵠ(.9, false, [Δ[191], Δ[360]]);
		ᐃ.drawImage(ⵠΔ, 38, 28);
		var ⵠΔ = ⵠⲆΔᐃⵠ(.9, false, [Δ[191], Δ[360]]);
		ᐃ.drawImage(ⵠΔ, 15, 37);
		var ⵠΔ = ⵠⲆΔᐃⵠ(.9, false, [Δ[191], Δ[360]]);
		ᐃ.drawImage(ⵠΔ, 32, 45);
		return ⲆⲆ
	}

	function ⲆΔΔⲆᐃᐃⲆ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 185 * Ⲇ;
		ⲆⲆ.height = 240 * Ⲇ;
		ᐃ.globalAlpha = .5;
		ᐃ.translate(ⵠⵠΔᐃ, Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 44, 137 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 60, 87 * Ⲇ, 68 * Ⲇ, Ⲇ * 66, 92 * Ⲇ, Ⲇ * 67);
		ᐃ.bezierCurveTo(Ⲇ * 115, 64 * Ⲇ, Ⲇ * 129, 97 * Ⲇ, Ⲇ * 137, 136 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(53 * Ⲇ, Ⲇ * 181);
		ᐃ.bezierCurveTo(Ⲇ * 30, Ⲇ * 164, 19 * Ⲇ, 150 * Ⲇ, Ⲇ * ΔᐃⵠⵠΔⲆΔ, Ⲇ * 136);
		ᐃ.bezierCurveTo(28 * Ⲇ, Ⲇ * 121, Ⲇ * 38, Ⲇ * 132, 48 * Ⲇ, 150 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(63 * Ⲇ, Ⲇ * 208);
		ᐃ.bezierCurveTo(75 * Ⲇ, Ⲇ * 224, Ⲇ * 86, Ⲇ * 228, Ⲇ * 93, 228 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 104, Ⲇ * 229, 116 * Ⲇ, Ⲇ * 219, 122 * Ⲇ, Ⲇ * 205);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(130 * Ⲇ, Ⲇ * 170);
		ᐃ.bezierCurveTo(Ⲇ * 146, Ⲇ * 125, 156 * Ⲇ, 126 * Ⲇ, Ⲇ * 173, Ⲇ * 137);
		ᐃ.bezierCurveTo(167 * Ⲇ, Ⲇ * 151, Ⲇ * 143, 174 * Ⲇ, Ⲇ * 131, Ⲇ * 183);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(39 * Ⲇ, 140 * Ⲇ);
		ᐃ.bezierCurveTo(75 * Ⲇ, 126 * Ⲇ, Ⲇ * 113, Ⲇ * 127, 143 * Ⲇ, 137 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 141, Ⲇ * 186, 130 * Ⲇ, Ⲇ * 202, 113 * Ⲇ, 214 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 85, Ⲇ * 228, 56 * Ⲇ, Ⲇ * 219, Ⲇ * 48, 173 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 40, 148 * Ⲇ, Ⲇ * 43, Ⲇ * 145, Ⲇ * 39, Ⲇ * 140);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
		ᐃ.globalAlpha = ᐃⲆⲆ;
		ᐃ.translate(0, Ⲇ * -10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 44, 137 * Ⲇ);
		ᐃ.bezierCurveTo(60 * Ⲇ, 87 * Ⲇ, Ⲇ * 68, Ⲇ * 66, Ⲇ * 92, 67 * Ⲇ);
		ᐃ.bezierCurveTo(115 * Ⲇ, Ⲇ * 64, 129 * Ⲇ, 97 * Ⲇ, Ⲇ * 137, Ⲇ * 136);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 53, 181 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 30, Ⲇ * 164, ⲆΔᐃΔⲆ * Ⲇ, Ⲇ * 150, Ⲇⵠᐃⵠⵠ * Ⲇ, Ⲇ * 136);
		ᐃ.bezierCurveTo(28 * Ⲇ, 121 * Ⲇ, 38 * Ⲇ, Ⲇ * 132, Ⲇ * 48, 150 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔ], ᐃⲆ[ⵠᐃⵠⲆ], Ⲇ * ⲆΔⵠᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(63 * Ⲇ, Ⲇ * 208);
		ᐃ.bezierCurveTo(Ⲇ * 75, Ⲇ * 224, 86 * Ⲇ, 228 * Ⲇ, Ⲇ * 93, Ⲇ * 228);
		ᐃ.bezierCurveTo(Ⲇ * 104, 229 * Ⲇ, Ⲇ * 116, 219 * Ⲇ, Ⲇ * 122, 205 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ΔⲆⲆⵠ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 130, 170 * Ⲇ);
		ᐃ.bezierCurveTo(146 * Ⲇ, Ⲇ * 125, Ⲇ * 156, 126 * Ⲇ, Ⲇ * 173, Ⲇ * 137);
		ᐃ.bezierCurveTo(167 * Ⲇ, Ⲇ * 151, Ⲇ * 143, 174 * Ⲇ, Ⲇ * 131, 183 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ⵠᐃΔΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(39 * Ⲇ, Ⲇ * 140);
		ᐃ.bezierCurveTo(75 * Ⲇ, 126 * Ⲇ, Ⲇ * 113, Ⲇ * 127, 143 * Ⲇ, Ⲇ * 137);
		ᐃ.bezierCurveTo(141 * Ⲇ, Ⲇ * 186, 130 * Ⲇ, 202 * Ⲇ, 113 * Ⲇ, 214 * Ⲇ);
		ᐃ.bezierCurveTo(85 * Ⲇ, 228 * Ⲇ, 56 * Ⲇ, Ⲇ * 219, Ⲇ * 48, Ⲇ * 173);
		ᐃ.bezierCurveTo(40 * Ⲇ, Ⲇ * 148, 43 * Ⲇ, 145 * Ⲇ, 39 * Ⲇ, Ⲇ * 140);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 59, 99 * Ⲇ);
		ᐃ.bezierCurveTo(71 * Ⲇ, 68 * Ⲇ, Ⲇ * 81, Ⲇ * 68, Ⲇ * 94, Ⲇ * 67);
		ᐃ.bezierCurveTo(Ⲇ * 105, Ⲇ * 66, 119 * Ⲇ, Ⲇ * 75, Ⲇ * 123, 96 * Ⲇ);
		ᐃ.bezierCurveTo(104 * Ⲇ, Ⲇ * 91, Ⲇ * 101, 94 * Ⲇ, 94 * Ⲇ, Ⲇ * 97);
		ᐃ.bezierCurveTo(Ⲇ * 76, 92 * Ⲇ, Ⲇ * 73, 93 * Ⲇ, Ⲇ * 60, Ⲇ * 99);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆΔΔ], ᐃⲆ[Ⲇⵠᐃⵠ], 4 * Ⲇ);
		Δᐃ === ⲆᐃⲆ ? (ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(47 * Ⲇ, Ⲇ * 149), ᐃ.bezierCurveTo(43 * Ⲇ, 140 * Ⲇ, 48 * Ⲇ, Ⲇ * 130, Ⲇ * 59, Ⲇ * 127), ᐃ.bezierCurveTo(Ⲇ * 77, Ⲇ * 126, 90 * Ⲇ, 131 * Ⲇ, Ⲇ * 131, Ⲇ * 127), ᐃ.bezierCurveTo(Ⲇ * 143, 130 * Ⲇ, Ⲇ * 144, Ⲇ * 143, 132 * Ⲇ, Ⲇ * 154), ᐃ.bezierCurveTo(Ⲇ * 90, 152 * Ⲇ, 90 * Ⲇ, Ⲇ * 152, 48 * Ⲇ, 150 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆ]), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 40, 139 * Ⲇ), ᐃ.bezierCurveTo(48 * Ⲇ, Ⲇ * 113, Ⲇ * 76, Ⲇ * 119, 91 * Ⲇ, 126 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 117, Ⲇ * 113, Ⲇ * 135, Ⲇ * 117, 144 * Ⲇ, 134 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 144, 138 * Ⲇ, 144 * Ⲇ, 138 * Ⲇ, Ⲇ * 144, Ⲇ * 142), ᐃ.bezierCurveTo(Ⲇ * 128, Ⲇ * 124, Ⲇ * 108, Ⲇ * 124, Ⲇ * 91, Ⲇ * 136), ᐃ.bezierCurveTo(59 * Ⲇ, Ⲇ * 124, Ⲇ * 50, Ⲇ * 137, Ⲇ * 42, Ⲇ * 148), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[2], ⵠⲆⲆΔΔ * Ⲇ)) : (ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(41 * Ⲇ, Ⲇ * 139), ᐃ.bezierCurveTo(Ⲇ * 53, 117 * Ⲇ, 69 * Ⲇ, Ⲇ * 118, 92 * Ⲇ, 127 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 124, Ⲇ * 111, 136 * Ⲇ, 121 * Ⲇ, Ⲇ * 143, Ⲇ * 136), ᐃ.bezierCurveTo(Ⲇ * 142, Ⲇ * 144, 142 * Ⲇ, Ⲇ * 144, 141 * Ⲇ, 152 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 128, 131 * Ⲇ, Ⲇ * 113, 138 * Ⲇ, 92 * Ⲇ, Ⲇ * 145), ᐃ.bezierCurveTo(57 * Ⲇ, Ⲇ * 133, 57 * Ⲇ, Ⲇ * 147, 44 * Ⲇ, Ⲇ * 154), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆⲆ], ᐃⲆ[ᐃᐃᐃᐃ], 4 * Ⲇ));
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(90 * Ⲇ, 95 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 99, 82 * Ⲇ, Ⲇ * 98, Ⲇ * 58, Ⲇ * 99, Ⲇ * 40);
		ᐃ.bezierCurveTo(Ⲇ * 90, 38 * Ⲇ, 89 * Ⲇ, Ⲇ * 34, Ⲇ * 92, ΔⲆⵠᐃΔⲆⲆ * Ⲇ);
		ᐃ.bezierCurveTo(92 * Ⲇ, 5 * Ⲇ, Ⲇ * 83, Ⲇ * ⲆⵠⲆᐃᐃΔⵠ, Ⲇ * 78, 29 * Ⲇ);
		ᐃ.bezierCurveTo(72 * Ⲇ, Ⲇ * 59, Ⲇ * 87, Ⲇ * 81, 89 * Ⲇ, Ⲇ * 87);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ], ᐃⲆ[ⵠⲆⵠΔ], Ⲇ * ΔⵠⲆᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 90, Ⲇ * 86);
		ᐃ.bezierCurveTo(95 * Ⲇ, 74 * Ⲇ, Ⲇ * 95, Ⲇ * 62, Ⲇ * 95, 43 * Ⲇ);
		ᐃ.bezierCurveTo(84 * Ⲇ, Ⲇ * 37, 86 * Ⲇ, 34 * Ⲇ, 89 * Ⲇ, ΔⲆⲆⵠΔ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 75, 29 * Ⲇ, 80 * Ⲇ, 58 * Ⲇ, 90 * Ⲇ, Ⲇ * 85);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ], ᐃⲆ[3], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(92 * Ⲇ, 117 * Ⲇ);
		ᐃ.bezierCurveTo(98 * Ⲇ, 87 * Ⲇ, Ⲇ * 93, Ⲇ * 78, Ⲇ * 85, 76 * Ⲇ);
		ᐃ.bezierCurveTo(85.5 * Ⲇ, 79.5 * Ⲇ, 85.5 * Ⲇ, 79.5 * Ⲇ, Ⲇ * 86, 83 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 84, Ⲇ * 85.5, 84 * Ⲇ, Ⲇ * 85.5, 82 * Ⲇ, 88 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 90, 93 * Ⲇ, 89 * Ⲇ, ⵠⲆᐃⵠⲆ * Ⲇ, Ⲇ * 92, Ⲇ * 117);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃΔ], ᐃⲆ[ⵠᐃⲆᐃ], ⲆΔⲆᐃΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 92, 175 * Ⲇ);
		ᐃ.bezierCurveTo(95 * Ⲇ, Ⲇ * 135, Ⲇ * 98, 125 * Ⲇ, Ⲇ * 109, Ⲇ * 121);
		ᐃ.bezierCurveTo(Ⲇ * 106, 114 * Ⲇ, Ⲇ * 104, 114 * Ⲇ, Ⲇ * 102, 113 * Ⲇ);
		ᐃ.bezierCurveTo(103 * Ⲇ, Ⲇ * 106, Ⲇ * 104, Ⲇ * 103, Ⲇ * 107, Ⲇ * 96);
		ᐃ.bezierCurveTo(Ⲇ * 74, Ⲇ * 108, 86 * Ⲇ, 157 * Ⲇ, Ⲇ * 92, 174 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[3], ΔⵠⲆᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(48 * Ⲇ, 169 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 42, Ⲇ * 187, Ⲇ * 50, 193 * Ⲇ, 59 * Ⲇ, Ⲇ * 198);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆⲆΔΔ], ⲆΔΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 136, Ⲇ * 171);
		ᐃ.bezierCurveTo(Ⲇ * 139, 186 * Ⲇ, Ⲇ * 138, 191 * Ⲇ, 124 * Ⲇ, 199 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆⲆΔΔ], ΔⵠⲆᐃ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 63, Ⲇ * 180, 15.231546211727817 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆᐃ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 121, Ⲇ * 181, 15.652475842498529 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃΔⵠ(ᐃ, Ⲇ * 58, 175 * Ⲇ, 5.656854249492381 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⲆ]);
		ᐃΔⵠ(ᐃ, 116 * Ⲇ, 175 * Ⲇ, Ⲇ * 5.656854249492381);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		return ⲆⲆ
	}
	const ⵠᐃΔΔᐃΔᐃ = 9215899;

	function ΔΔᐃⵠᐃᐃᐃⵠⵠ(ⵠⲆΔⵠⲆΔΔ) {
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ.String.fromCharCode(ⵠⲆΔⵠⲆΔΔ)
	}

	function ⲆΔᐃΔⵠΔΔ(ⲆⲆᐃⲆⲆⲆΔ) {
		return ⲆⲆᐃⲆⲆⲆΔ.map(ΔΔᐃⵠᐃᐃᐃⵠⵠ).join("")
	}
	const ⲆⵠⲆⲆΔᐃΔ = function() {
		const ⵠⲆΔⲆ = ⲆΔᐃΔⵠΔΔ([11616, 5123, 916, 916, 5123, 916, 5123]);
		const ᐃⵠⵠⵠΔᐃⵠᐃΔ = {
			"ᐃᐃΔⵠⲆΔⵠⵠⲆ": 15349751,
			"ΔⲆⵠⲆⵠΔⵠⵠⵠ": 10804112,
			"ⵠᐃΔΔᐃΔᐃ": 12064311,
			"ⲆᐃΔΔΔᐃΔ": 5823838
		};
		if (ᐃⵠⵠⵠΔᐃⵠᐃΔ[ⵠⲆΔⲆ] !== ᐃⵠⵠⵠΔᐃⵠᐃΔ.ⵠᐃΔΔᐃΔᐃ) {
			const ⵠᐃΔΔᐃΔᐃ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]];
			const ΔΔᐃⵠᐃᐃᐃⵠⵠ = ⵠᐃΔΔᐃΔᐃ;
			const ⵠⲆΔⵠⲆΔΔ = function() {
				ⵠᐃΔΔᐃΔᐃ(ⵠⲆΔⵠⲆΔΔ, 8534);
				ΔΔᐃⵠᐃᐃᐃⵠⵠ(ⵠⲆΔⵠⲆΔΔ, 1514)
			};
			ⵠⲆΔⵠⲆΔΔ()
		}
	};
	ⲆⵠⲆⲆΔᐃΔ();

	function ΔᐃⵠⲆⲆⲆᐃ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 185 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 240;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(44 * Ⲇ, 137 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 60, 87 * Ⲇ, Ⲇ * 68, Ⲇ * 66, Ⲇ * 92, 67 * Ⲇ);
		ᐃ.bezierCurveTo(115 * Ⲇ, 64 * Ⲇ, Ⲇ * 129, 97 * Ⲇ, Ⲇ * 137, Ⲇ * 136);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(53 * Ⲇ, 181 * Ⲇ);
		ᐃ.bezierCurveTo(30 * Ⲇ, 164 * Ⲇ, 19 * Ⲇ, 150 * Ⲇ, ΔᐃⲆⲆΔⲆᐃ * Ⲇ, 136 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 28, 121 * Ⲇ, 38 * Ⲇ, 132 * Ⲇ, 48 * Ⲇ, 150 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 63, Ⲇ * 208);
		ᐃ.bezierCurveTo(Ⲇ * 75, Ⲇ * 224, Ⲇ * 86, Ⲇ * 228, 93 * Ⲇ, 228 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 104, Ⲇ * 229, 116 * Ⲇ, 219 * Ⲇ, Ⲇ * 122, Ⲇ * 205);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 130, 170 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 146, Ⲇ * 125, Ⲇ * 156, 126 * Ⲇ, 173 * Ⲇ, 137 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 167, 151 * Ⲇ, 143 * Ⲇ, 174 * Ⲇ, Ⲇ * 131, Ⲇ * 183);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 39, Ⲇ * 140);
		ᐃ.bezierCurveTo(Ⲇ * 75, 126 * Ⲇ, 113 * Ⲇ, Ⲇ * 127, 143 * Ⲇ, Ⲇ * 137);
		ᐃ.bezierCurveTo(141 * Ⲇ, Ⲇ * 186, 130 * Ⲇ, Ⲇ * 202, Ⲇ * 113, 214 * Ⲇ);
		ᐃ.bezierCurveTo(85 * Ⲇ, 228 * Ⲇ, 56 * Ⲇ, Ⲇ * 219, 48 * Ⲇ, Ⲇ * 173);
		ᐃ.bezierCurveTo(Ⲇ * 40, Ⲇ * 148, 43 * Ⲇ, 145 * Ⲇ, Ⲇ * 39, Ⲇ * 140);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(90 * Ⲇ, Ⲇ * 95);
		ᐃ.bezierCurveTo(Ⲇ * 99, 82 * Ⲇ, Ⲇ * 98, 58 * Ⲇ, Ⲇ * 99, Ⲇ * 40);
		ᐃ.bezierCurveTo(Ⲇ * 90, Ⲇ * 38, 89 * Ⲇ, Ⲇ * 34, 92 * Ⲇ, 17 * Ⲇ);
		ᐃ.bezierCurveTo(92 * Ⲇ, Ⲇ * ⵠⵠΔⲆ, 83 * Ⲇ, Ⲇ * Ⲇᐃⵠᐃᐃ, Ⲇ * 78, Ⲇ * 29);
		ᐃ.bezierCurveTo(Ⲇ * 72, 59 * Ⲇ, 87 * Ⲇ, Ⲇ * 81, Ⲇ * 89, Ⲇ * 87);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(90 * Ⲇ, Ⲇ * 86);
		ᐃ.bezierCurveTo(Ⲇ * 95, 74 * Ⲇ, 95 * Ⲇ, Ⲇ * 62, 95 * Ⲇ, 43 * Ⲇ);
		ᐃ.bezierCurveTo(84 * Ⲇ, 37 * Ⲇ, Ⲇ * 86, Ⲇ * 34, Ⲇ * 89, Ⲇ * 16);
		ᐃ.bezierCurveTo(Ⲇ * 75, 29 * Ⲇ, 80 * Ⲇ, 58 * Ⲇ, Ⲇ * 90, 85 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 92, Ⲇ * 117);
		ᐃ.bezierCurveTo(Ⲇ * 98, 87 * Ⲇ, 93 * Ⲇ, Ⲇ * 78, 85 * Ⲇ, 76 * Ⲇ);
		ᐃ.bezierCurveTo(85.5 * Ⲇ, 79.5 * Ⲇ, Ⲇ * 85.5, Ⲇ * 79.5, 86 * Ⲇ, Ⲇ * 83);
		ᐃ.bezierCurveTo(84 * Ⲇ, Ⲇ * 85.5, Ⲇ * 84, 85.5 * Ⲇ, Ⲇ * 82, Ⲇ * 88);
		ᐃ.bezierCurveTo(90 * Ⲇ, Ⲇ * 93, Ⲇ * 89, 100 * Ⲇ, Ⲇ * 92, Ⲇ * 117);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 92, Ⲇ * 175);
		ᐃ.bezierCurveTo(95 * Ⲇ, 135 * Ⲇ, Ⲇ * 98, 125 * Ⲇ, 109 * Ⲇ, 121 * Ⲇ);
		ᐃ.bezierCurveTo(106 * Ⲇ, 114 * Ⲇ, Ⲇ * 104, 114 * Ⲇ, 102 * Ⲇ, 113 * Ⲇ);
		ᐃ.bezierCurveTo(103 * Ⲇ, Ⲇ * 106, 104 * Ⲇ, Ⲇ * 103, 107 * Ⲇ, Ⲇ * 96);
		ᐃ.bezierCurveTo(74 * Ⲇ, Ⲇ * 108, Ⲇ * 86, 157 * Ⲇ, 92 * Ⲇ, Ⲇ * 174);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ]);
		return ⲆⲆ
	}

	function ᐃⵠΔΔᐃΔᐃⲆᐃ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 185 * Ⲇ;
		ⲆⲆ.height = 240 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 58, 205 * Ⲇ);
		ᐃ.bezierCurveTo(74 * Ⲇ, 227 * Ⲇ, Ⲇ * 83, 230 * Ⲇ, Ⲇ * 92, 230 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 101, 232 * Ⲇ, Ⲇ * 119, 219 * Ⲇ, Ⲇ * 122, 205 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ⲆΔⵠᐃΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 46, 151 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 34, 126 * Ⲇ, Ⲇ * 21, Ⲇ * 130, 10 * Ⲇ, 139 * Ⲇ);
		ᐃ.bezierCurveTo(27 * Ⲇ, 168 * Ⲇ, Ⲇ * 48, Ⲇ * 180, 53 * Ⲇ, 184 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃΔ], ᐃⲆ[2], Ⲇ * ⵠΔΔⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(122 * Ⲇ, Ⲇ * 165);
		ᐃ.bezierCurveTo(143 * Ⲇ, Ⲇ * 140, 154 * Ⲇ, Ⲇ * 123, 172 * Ⲇ, 139 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 169, Ⲇ * 149, 147 * Ⲇ, 173 * Ⲇ, Ⲇ * 126, Ⲇ * 192);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔΔᐃᐃ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 47, 129 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 55, Ⲇ * 90, Ⲇ * 71, 66 * Ⲇ, Ⲇ * 93, Ⲇ * 69);
		ᐃ.bezierCurveTo(Ⲇ * 116, 70 * Ⲇ, 122 * Ⲇ, 88 * Ⲇ, 136 * Ⲇ, Ⲇ * 127);
		ᐃ.bezierCurveTo(143 * Ⲇ, 137 * Ⲇ, Ⲇ * 144, 137 * Ⲇ, 144 * Ⲇ, 142 * Ⲇ);
		ᐃ.bezierCurveTo(138 * Ⲇ, Ⲇ * 199, Ⲇ * 128, 206 * Ⲇ, 108 * Ⲇ, 219 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 84, 228 * Ⲇ, 65 * Ⲇ, Ⲇ * 224, Ⲇ * 50, Ⲇ * 191);
		ᐃ.bezierCurveTo(41 * Ⲇ, Ⲇ * 161, Ⲇ * 41, 157 * Ⲇ, 39 * Ⲇ, 144 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 40, Ⲇ * 140, 42 * Ⲇ, Ⲇ * 137, 47 * Ⲇ, 129 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠΔ], ᐃⲆ[2], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(47 * Ⲇ, Ⲇ * 133);
		ᐃ.bezierCurveTo(Ⲇ * 65, Ⲇ * 143, Ⲇ * 74, Ⲇ * 162, Ⲇ * 70, 186 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 71, Ⲇ * 188.5, 71 * Ⲇ, Ⲇ * 188.5, Ⲇ * 72, 191 * Ⲇ);
		ᐃ.bezierCurveTo(81 * Ⲇ, 185.5 * Ⲇ, 81 * Ⲇ, Ⲇ * 185.5, Ⲇ * 90, 180 * Ⲇ);
		ᐃ.bezierCurveTo(99 * Ⲇ, Ⲇ * 185, Ⲇ * 99, Ⲇ * 185, 108 * Ⲇ, Ⲇ * 190);
		ᐃ.bezierCurveTo(110.5 * Ⲇ, 184.5 * Ⲇ, 110.5 * Ⲇ, 184.5 * Ⲇ, Ⲇ * 113, Ⲇ * 179);
		ᐃ.bezierCurveTo(110 * Ⲇ, Ⲇ * 156, 121 * Ⲇ, 156 * Ⲇ, Ⲇ * 142, Ⲇ * 141);
		ᐃ.bezierCurveTo(Ⲇ * 137.5, Ⲇ * 133, 137.5 * Ⲇ, 133 * Ⲇ, Ⲇ * 133, 125 * Ⲇ);
		ᐃ.bezierCurveTo(116 * Ⲇ, Ⲇ * 78, Ⲇ * 112, Ⲇ * 70, Ⲇ * 91, Ⲇ * 71);
		ᐃ.bezierCurveTo(Ⲇ * 62, 69 * Ⲇ, Ⲇ * 59, Ⲇ * 107, 48 * Ⲇ, Ⲇ * 132);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 93, Ⲇ * 86);
		ᐃ.bezierCurveTo(101 * Ⲇ, 79 * Ⲇ, Ⲇ * 99, 56 * Ⲇ, 100 * Ⲇ, Ⲇ * 37);
		ᐃ.bezierCurveTo(90 * Ⲇ, Ⲇ * 34, 90 * Ⲇ, 27 * Ⲇ, Ⲇ * 93, Ⲇ * ⲆᐃⵠΔΔᐃⲆ);
		ᐃ.bezierCurveTo(96 * Ⲇ, 0 * Ⲇ, Ⲇ * 85, Ⲇ * 13, 82 * Ⲇ, Ⲇ * 26);
		ᐃ.bezierCurveTo(Ⲇ * 78, Ⲇ * 43, Ⲇ * 89, 74 * Ⲇ, 93 * Ⲇ, Ⲇ * 85);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[2], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 94, Ⲇ * 86);
		ᐃ.bezierCurveTo(Ⲇ * 120, Ⲇ * 88, Ⲇ * 132, Ⲇ * 109, Ⲇ * 122, Ⲇ * 128);
		ᐃ.bezierCurveTo(118 * Ⲇ, 139 * Ⲇ, 101 * Ⲇ, 146 * Ⲇ, Ⲇ * 90, 143 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 57, 141 * Ⲇ, 49 * Ⲇ, Ⲇ * 109, Ⲇ * 68, Ⲇ * 94);
		ᐃ.bezierCurveTo(78 * Ⲇ, Ⲇ * 85, Ⲇ * 90, 86 * Ⲇ, Ⲇ * 95, 86 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(91 * Ⲇ, Ⲇ * 178);
		ᐃ.bezierCurveTo(Ⲇ * 78, Ⲇ * 136, 81 * Ⲇ, 88 * Ⲇ, Ⲇ * 93, Ⲇ * 87);
		ᐃ.bezierCurveTo(101 * Ⲇ, Ⲇ * 84, Ⲇ * 94, 97 * Ⲇ, 94 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(Ⲇ * 91, 112 * Ⲇ, 92 * Ⲇ, Ⲇ * 117, Ⲇ * 94, Ⲇ * 121);
		ᐃ.bezierCurveTo(Ⲇ * 98, Ⲇ * 126, Ⲇ * 102, Ⲇ * 128, 97 * Ⲇ, 135 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 92, Ⲇ * 140, 93 * Ⲇ, Ⲇ * 160, Ⲇ * 91, Ⲇ * 179);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔᐃ], ᐃⲆ[1], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 20, Ⲇ * 151);
		ᐃ.bezierCurveTo(22 * Ⲇ, Ⲇ * 147, 22 * Ⲇ, Ⲇ * 147, Ⲇ * 24, 143 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 27, 144.5 * Ⲇ, 27 * Ⲇ, 144.5 * Ⲇ, Ⲇ * 30, Ⲇ * 146);
		ᐃ.bezierCurveTo(Ⲇ * 31, Ⲇ * 143, Ⲇ * 31, 143 * Ⲇ, 32 * Ⲇ, 140 * Ⲇ);
		ᐃ.bezierCurveTo(35 * Ⲇ, Ⲇ * 140.5, Ⲇ * 35, Ⲇ * 140.5, Ⲇ * 38, 141 * Ⲇ);
		ᐃ.bezierCurveTo(31 * Ⲇ, 132 * Ⲇ, 29 * Ⲇ, 131 * Ⲇ, Ⲇ * 22, 132 * Ⲇ);
		ᐃ.bezierCurveTo(14 * Ⲇ, Ⲇ * 135, 13 * Ⲇ, 135 * Ⲇ, 11 * Ⲇ, 138 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 15.5, Ⲇ * 144.5, Ⲇ * 15.5, 144.5 * Ⲇ, 20 * Ⲇ, Ⲇ * 151);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃⵠ]);
		ᐃΔⵠ(ᐃ, 61 * Ⲇ, Ⲇ * 183, 16.15549442140351 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃⲆΔᐃ]);
		ᐃΔⵠ(ᐃ, 121 * Ⲇ, 184 * Ⲇ, Ⲇ * 14.866068747318506);
		ᐃⵠ(ᐃ, ᐃⲆ[7]);
		ᐃΔⵠ(ᐃ, Ⲇ * 57, Ⲇ * 178, Ⲇ * 5.656854249492381);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃΔⵠ(ᐃ, Ⲇ * 116, 177 * Ⲇ, 5.830951894845301 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠᐃᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(162 * Ⲇ, 152 * Ⲇ);
		ᐃ.bezierCurveTo(161.5 * Ⲇ, Ⲇ * 148, 161.5 * Ⲇ, Ⲇ * 148, Ⲇ * 161, 144 * Ⲇ);
		ᐃ.bezierCurveTo(157.5 * Ⲇ, 145 * Ⲇ, 157.5 * Ⲇ, 145 * Ⲇ, 154 * Ⲇ, Ⲇ * 146);
		ᐃ.bezierCurveTo(153.5 * Ⲇ, Ⲇ * 143, Ⲇ * 153.5, 143 * Ⲇ, Ⲇ * 153, Ⲇ * 140);
		ᐃ.bezierCurveTo(Ⲇ * 149, Ⲇ * 140.5, 149 * Ⲇ, Ⲇ * 140.5, 145 * Ⲇ, 141 * Ⲇ);
		ᐃ.bezierCurveTo(150 * Ⲇ, 132 * Ⲇ, 161 * Ⲇ, 131 * Ⲇ, 170 * Ⲇ, Ⲇ * 138);
		ᐃ.bezierCurveTo(173 * Ⲇ, Ⲇ * 141, 165 * Ⲇ, 150 * Ⲇ, 162 * Ⲇ, Ⲇ * 150);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠⲆⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 106, Ⲇ * 110);
		ᐃ.bezierCurveTo(104 * Ⲇ, Ⲇ * 98, Ⲇ * 112, Ⲇ * 91, 118 * Ⲇ, 101 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 122, 115 * Ⲇ, 121 * Ⲇ, Ⲇ * 119, Ⲇ * 117, Ⲇ * 124);
		ᐃ.bezierCurveTo(Ⲇ * 112, 129 * Ⲇ, Ⲇ * 107, 124 * Ⲇ, Ⲇ * 106, Ⲇ * 112);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 64, 106 * Ⲇ);
		ᐃ.bezierCurveTo(66 * Ⲇ, Ⲇ * 97, 72 * Ⲇ, 89 * Ⲇ, 76 * Ⲇ, Ⲇ * 98);
		ᐃ.bezierCurveTo(78 * Ⲇ, 106 * Ⲇ, 79 * Ⲇ, 118 * Ⲇ, 72 * Ⲇ, 126 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 65, Ⲇ * 130, Ⲇ * 63, Ⲇ * 117, Ⲇ * 64, Ⲇ * 108);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		return ⲆⲆ
	}
	const ⵠⵠΔΔⲆ = ⵠᐃᐃⵠᐃ;

	function ΔΔⵠⵠΔⲆᐃ(Ⲇ, ᐃⲆ, ΔⲆᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 32;
		var ⲆΔΔ = 32 * Ⲇ;
		var ΔΔ = Δⵠᐃ / Ⲇⵠᐃⵠ;
		var ΔΔⵠ = ⲆΔΔ / 2;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		var ⲆΔᐃⲆⲆᐃⵠ = Ⲇ * 5;
		var ΔⵠᐃⵠᐃΔΔ = Ⲇ * 28;
		var ΔᐃⲆΔᐃᐃᐃ = ⲆΔᐃⲆⲆᐃⵠ / ΔⲆⲆⵠ;
		var ⲆⵠⲆⵠᐃⵠᐃ = ΔⵠᐃⵠᐃΔΔ / ⵠΔᐃⵠ;
		ᐃ.translate(Ⲇᐃⵠⵠ * Ⲇ, Ⲇ * 0);
		ᐃ.translate(ΔΔ, ΔΔⵠ);
		if (ΔⲆᐃ == ⵠΔᐃ) {
			ᐃΔⵠ(ᐃ, ᐃⲆⵠΔ, ⲆΔⵠΔ, Ⲇ * 10, Δⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⵠⲆ], ᐃⲆ[2], Ⲇ * ΔⵠᐃⲆ);
			for (var Δᐃ = 0; 4 > Δᐃ; Δᐃ++) {
				ᐃᐃᐃ(ᐃ, -ΔᐃⲆΔᐃᐃᐃ, -ⲆⵠⲆⵠᐃⵠᐃ, ⲆΔᐃⲆⲆᐃⵠ, ΔⵠᐃⵠᐃΔΔ, 2 * Ⲇ);
				ᐃ.rotate(Math.PI / ⲆⵠⵠⲆ);
				ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠΔ], ᐃⲆ[2], Ⲇ * ⲆⵠⵠⲆ)
			}
		}
		ᐃΔⵠ(ᐃ, ⵠᐃΔ, ⲆΔⵠΔ, ⲆΔⲆⲆⵠ * Ⲇ, 0);
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ΔⲆΔᐃ], 1.5 * Ⲇ);
		for (var Δᐃ = ⵠΔⵠⲆ; Δᐃ < ᐃᐃᐃΔⵠ; Δᐃ++) {
			ᐃᐃᐃ(ᐃ, -ΔᐃⲆΔᐃᐃᐃ, -ⲆⵠⲆⵠᐃⵠᐃ, ⲆΔᐃⲆⲆᐃⵠ, ΔⵠᐃⵠᐃΔΔ, ⲆᐃᐃΔ * Ⲇ);
			ᐃ.rotate(Math.PI / ⲆⵠⵠⲆ);
			ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], 1.5 * Ⲇ)
		}
		ᐃΔⵠ(ᐃ, 0, ΔᐃΔ, Ⲇ * ⲆΔⵠᐃⲆ, 0);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃΔⵠ(ᐃ, 0, ᐃΔΔ, 4 * Ⲇ, 0);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃⲆ], ᐃⲆ[1], 1.5 * Ⲇ);
		ᐃ.globalCompositeOperation = Δ[289];
		ᐃΔⵠ(ᐃ, ⵠᐃΔ, 0, Ⲇ * 4, ⵠΔⵠⲆ);
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠⵠ], ᐃⲆ[1], ⲆⲆᐃⲆ * Ⲇ);
		ᐃ.globalCompositeOperation = Δ[394];
		ᐃΔⵠ(ᐃ, 0, 0, ᐃᐃⲆⵠ * Ⲇ, ΔΔⲆⲆ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[1], ᐃΔⲆⵠ * Ⲇ);
		return ⲆⲆ
	}
	const ⵠΔᐃΔᐃ = ⵠⲆⵠΔ;

	function ΔΔⵠⵠⲆⲆᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 125;
		var ⲆΔΔ = Ⲇ * 95;
		var w2 = Δⵠᐃ / 2;
		var ᐃᐃⲆᐃⵠ = ⲆΔΔ / Δᐃᐃⵠ;
		var ΔⲆⵠⵠ = Ⲇ * 10;
		var ⵠⲆⲆΔ = Ⲇ * 8;
		var ΔᐃᐃⵠᐃⲆᐃ = 112 * Ⲇ;
		var ⵠᐃᐃⵠΔᐃΔ = 82 * Ⲇ;
		var ᐃᐃΔⲆⲆᐃⵠ = ΔᐃᐃⵠᐃⲆᐃ / 2;
		var ⵠⲆᐃΔᐃΔᐃ = ⵠᐃᐃⵠΔᐃΔ / 2;
		var ⲆⲆⵠ = Ⲇ * 4;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(w2 - ΔᐃΔⲆΔ * Ⲇ, ᐃᐃⲆᐃⵠ + Ⲇ * ΔⵠⲆᐃ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ᐃⵠⵠ;
		ᐃᐃᐃ(ᐃ, -ᐃᐃΔⲆⲆᐃⵠ, -ⵠⲆᐃΔᐃΔᐃ, ΔᐃᐃⵠᐃⲆᐃ, ⵠᐃᐃⵠΔᐃΔ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⲆⲆⲆᐃ;
		ᐃ.translate(ᐃⲆⵠΔ, -ⵠⲆⲆΔ);
		ᐃᐃᐃ(ᐃ, -ᐃᐃΔⲆⲆᐃⵠ, -ⵠⲆᐃΔᐃΔᐃ, ΔᐃᐃⵠᐃⲆᐃ, ⵠᐃᐃⵠΔᐃΔ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆΔ], ᐃⲆ[Δᐃᐃⵠ], ⲆⲆⵠ);
		var Δⵠᐃ = 55 * Ⲇ;
		var ⲆΔΔ = Ⲇ * 45;
		var ΔⲆⵠⵠ = ᐃΔⵠΔᐃ;
		ᐃ.translate(Ⲇ * -40, -30 * Ⲇ);
		ᐃᐃᐃ(ᐃ, 0, 0, Δⵠᐃ, ⲆΔΔ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠΔ]);
		var ⵠΔ = ⲆᐃⵠⲆⵠᐃΔ(Ⲇ * .7, ᐃⲆ[3]);
		ᐃ.drawImage(ⵠΔ, 45 * Ⲇ, Ⲇ * -25);
		var ⵠΔ = ⲆᐃⵠⲆⵠᐃΔ(.7 * Ⲇ, ᐃⲆ[3]);
		ᐃ.drawImage(ⵠΔ, Ⲇ * 45, Ⲇ * 15);
		var ⵠΔ = ⲆᐃⵠⲆⵠᐃΔ(1.2 * Ⲇ, ᐃⲆ[3]);
		ᐃ.drawImage(ⵠΔ, Ⲇ * 28, Ⲇ * -30);
		var Δⵠᐃ = Ⲇ * ⵠⵠΔⲆⵠ;
		var ⲆΔΔ = 70 * Ⲇ;
		var ΔⲆⵠⵠ = Ⲇ * 5;
		ᐃ.translate(Ⲇ * 78, -5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Δⵠⵠ, ⲆᐃⲆ, Δⵠᐃ, ⲆΔΔ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		var Δⵠᐃ = ᐃⵠⲆⲆᐃ * Ⲇ;
		var ⲆΔΔ = 50 * Ⲇ;
		var ΔⲆⵠⵠ = Ⲇ * 3;
		ᐃ.translate(-ⲆΔⲆΔⵠ * Ⲇ, ⲆᐃⵠⲆᐃ * Ⲇ);
		ᐃ.rotate(Math.PI / ⵠⵠⲆⵠ);
		ᐃ.globalAlpha = .6;
		ᐃᐃᐃ(ᐃ, Ⲇᐃⵠⵠ, 0, Δⵠᐃ, ⲆΔΔ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⲆ]);
		ᐃ.translate(-20 * Ⲇ, 29 * Ⲇ);
		ᐃ.rotate(Math.PI / ΔⵠⲆᐃⵠ);
		ᐃ.globalAlpha = .6;
		ᐃ.beginPath();
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ᐃΔΔ, 0);
		ᐃ.lineTo(0, Ⲇ * 30);
		ᐃ.lineTo(30 * Ⲇ, Ⲇ * 30);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, null, ᐃⲆ[5], Ⲇ * ΔⲆΔⲆⲆ);
		return ⲆⲆ
	}

	function ΔΔⲆᐃΔΔΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 85 * Ⲇ;
		var ⲆΔΔ = Ⲇ * 115;
		var ⵠⲆⲆΔ = ᐃΔᐃⲆΔ * Ⲇ;
		var ⲆⲆⵠ = ⵠΔΔⵠ * Ⲇ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(-130 * Ⲇ, -60 * Ⲇ + ⵠⲆⲆΔ);
		ᐃ.globalAlpha = .5;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(190 * Ⲇ, 87 * Ⲇ, 201 * Ⲇ, 59 * Ⲇ, 208 * Ⲇ, 64 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 213, 68 * Ⲇ, Ⲇ * 204, Ⲇ * 93, Ⲇ * 195, 109 * Ⲇ);
		ᐃ.bezierCurveTo(195 * Ⲇ, Ⲇ * 109, 202 * Ⲇ, 124 * Ⲇ, Ⲇ * 191, Ⲇ * 141);
		ᐃ.bezierCurveTo(Ⲇ * 182, Ⲇ * 151, 164 * Ⲇ, 155 * Ⲇ, Ⲇ * 148, 144 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 136, Ⲇ * 135, Ⲇ * 138, 111 * Ⲇ, 145 * Ⲇ, 104 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 140, 92 * Ⲇ, 131 * Ⲇ, 67 * Ⲇ, Ⲇ * 138, 63 * Ⲇ);
		ᐃ.bezierCurveTo(145 * Ⲇ, Ⲇ * 61, 153 * Ⲇ, Ⲇ * 82, 155 * Ⲇ, 96 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 167, Ⲇ * 91, 178 * Ⲇ, Ⲇ * 92, 187 * Ⲇ, Ⲇ * 98);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ]);
		ᐃ.translate(ᐃⲆⵠΔ, -ⵠⲆⲆΔ);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(190 * Ⲇ, 87 * Ⲇ, Ⲇ * 201, 59 * Ⲇ, Ⲇ * 208, 64 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 213, Ⲇ * 68, 204 * Ⲇ, 93 * Ⲇ, Ⲇ * 195, Ⲇ * 109);
		ᐃ.bezierCurveTo(195 * Ⲇ, Ⲇ * 109, 202 * Ⲇ, Ⲇ * 124, Ⲇ * 191, 141 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 182, 151 * Ⲇ, Ⲇ * 164, Ⲇ * 155, 148 * Ⲇ, Ⲇ * 144);
		ᐃ.bezierCurveTo(136 * Ⲇ, Ⲇ * 135, 138 * Ⲇ, 111 * Ⲇ, Ⲇ * 145, Ⲇ * 104);
		ᐃ.bezierCurveTo(140 * Ⲇ, 92 * Ⲇ, Ⲇ * 131, Ⲇ * 67, 138 * Ⲇ, Ⲇ * 63);
		ᐃ.bezierCurveTo(Ⲇ * 145, Ⲇ * 61, Ⲇ * 153, Ⲇ * 82, Ⲇ * 155, Ⲇ * 96);
		ᐃ.bezierCurveTo(167 * Ⲇ, Ⲇ * 91, 178 * Ⲇ, Ⲇ * 92, Ⲇ * 187, 98 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ΔⵠⲆⵠⲆ);
		var ᐃⲆΔⲆΔᐃᐃ = 155 * Ⲇ;
		var ⲆⵠᐃⲆΔΔΔ = 133 * Ⲇ;
		var ⵠᐃⲆΔⵠⲆⵠ = Ⲇ * 10;
		var ᐃᐃᐃᐃⵠᐃⵠ = Ⲇ * 3;
		var ΔⲆⲆⵠᐃΔᐃ = ᐃⲆΔⲆΔᐃᐃ + -3 * Ⲇ;
		var ⵠⵠᐃΔᐃⵠΔ = ⲆⵠᐃⲆΔΔΔ + -5 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(ᐃⲆΔⲆΔᐃᐃ, ⲆⵠᐃⲆΔΔΔ);
		ᐃ.globalAlpha = 1;
		ᐃΔⵠ(ᐃ, ⲆⲆⵠⲆ, ⲆΔⵠΔ, ⵠᐃⲆΔⵠⲆⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠᐃⲆ]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(ΔⲆⲆⵠᐃΔᐃ, ⵠⵠᐃΔᐃⵠΔ);
		ᐃ.globalAlpha = 1;
		ᐃΔⵠ(ᐃ, 0, ⵠΔⵠⲆ, ᐃᐃᐃᐃⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(ᐃⲆΔⲆΔᐃᐃ + 27 * Ⲇ, ⲆⵠᐃⲆΔΔΔ);
		ᐃ.globalAlpha = ΔⲆΔᐃ;
		ᐃΔⵠ(ᐃ, Δⵠⵠ, ⵠⵠΔᐃ, ⵠᐃⲆΔⵠⲆⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆ]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Ⲇ * 27 + ΔⲆⲆⵠᐃΔᐃ, ⵠⵠᐃΔᐃⵠΔ);
		ᐃ.globalAlpha = 1;
		ᐃΔⵠ(ᐃ, ᐃⲆⵠΔ, ⵠⲆⵠ, ᐃᐃᐃᐃⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		return ⲆⲆ
	}

	function ⵠΔΔΔᐃⵠᐃ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 400;
		ⲆⲆ.height = 400 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 202.5, Ⲇ * 147.5);
		ᐃᐃᐃ(ᐃ, -96.5 * Ⲇ, Ⲇ * -21.5, 193 * Ⲇ, Ⲇ * 193, 0 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠΔΔ], Ⲇ * 12);
		ᐃ.save();
		ᐃ.translate(202.5 * Ⲇ, 190.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, 96.5 * Ⲇ, -21.5 * Ⲇ, Ⲇ * -193, Ⲇ * 43, Ⲇ * ⵠⵠΔΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃⵠ], ᐃⲆ[1], 12 * Ⲇ);
		ᐃ.save();
		ᐃ.save();
		ᐃ.translate(Ⲇ * 202.5, Ⲇ * 233.5);
		ᐃᐃᐃ(ᐃ, -96.5 * Ⲇ, Ⲇ * -20.5, 193 * Ⲇ, 41 * Ⲇ, Ⲇ * 0);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔⵠ], ᐃⲆ[1], Ⲇ * 12);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 202.5, Ⲇ * 275);
		ᐃᐃᐃ(ᐃ, Ⲇ * 96.5, -21 * Ⲇ, Ⲇ * -193, Ⲇ * 42, Ⲇ * ᐃΔΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ΔⵠⲆ], Ⲇ * ᐃⵠⵠᐃⲆᐃⲆ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 201, 212 * Ⲇ);
		ᐃ.rotate(8.64);
		ᐃᐃᐃ(ᐃ, Ⲇ * -116, Ⲇ * -22, 232 * Ⲇ, Ⲇ * 44, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔᐃⲆ], ᐃⲆ[ⲆⵠΔⲆ], ⵠᐃΔⵠᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(203.5 * Ⲇ, Ⲇ * 121.5);
		ᐃᐃᐃ(ᐃ, Ⲇ * -115.5, Ⲇ * -20.5, Ⲇ * 231, Ⲇ * 41, ᐃᐃᐃⵠⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠᐃⲆ], ᐃⲆ[1], 12 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 203.5, 299 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -115.5 * Ⲇ, -ΔⲆᐃⲆⲆ * Ⲇ, 231 * Ⲇ, 40 * Ⲇ, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔΔ], ᐃⲆ[ⵠΔΔ], Ⲇ * 12);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 298.5, Ⲇ * 210);
		ᐃᐃᐃ(ᐃ, -20.5 * Ⲇ, Ⲇ * -109, Ⲇ * 41, 218 * Ⲇ, Ⲇ * ⵠᐃᐃⵠⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[1], ᐃⲆⵠΔⵠ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 108.5, 210 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -20.5, Ⲇ * -109, 41 * Ⲇ, 218 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[1], Ⲇ * 12);
		ᐃ.save();
		ᐃ.translate(204 * Ⲇ, Ⲇ * 121.5);
		ᐃᐃᐃ(ᐃ, Ⲇ * -92, Ⲇ * -9.5, 184 * Ⲇ, 19 * Ⲇ, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠⵠ], ᐃⲆ[3], 10 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(197 * Ⲇ, Ⲇ * 299);
		ᐃᐃᐃ(ᐃ, Ⲇ * 85, -9 * Ⲇ, Ⲇ * -170, ⲆⲆⲆᐃⲆⲆⲆ * Ⲇ, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[3], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(94 * Ⲇ, Ⲇ * 317);
		ᐃ.bezierCurveTo(Ⲇ * 110.5, Ⲇ * 299.5, 110.5 * Ⲇ, 299.5 * Ⲇ, 127 * Ⲇ, 282 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠᐃΔᐃⲆ, ᐃⲆ[ⵠΔΔ], Ⲇ * ΔⲆΔᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(279 * Ⲇ, Ⲇ * 142);
		ᐃ.bezierCurveTo(296.5 * Ⲇ, 125.5 * Ⲇ, Ⲇ * 296.5, Ⲇ * 125.5, 314 * Ⲇ, Ⲇ * 109);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠΔΔ], ᐃⲆⵠⵠΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 93, Ⲇ * 106);
		ᐃ.bezierCurveTo(110.5 * Ⲇ, Ⲇ * 124, 110.5 * Ⲇ, Ⲇ * 124, Ⲇ * 128, Ⲇ * 142);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔⵠΔⲆⲆ, ᐃⲆ[ⲆⵠΔⲆ], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(281 * Ⲇ, Ⲇ * 282);
		ᐃ.bezierCurveTo(296 * Ⲇ, 297.5 * Ⲇ, 296 * Ⲇ, 297.5 * Ⲇ, 311 * Ⲇ, Ⲇ * 313);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[1], 12 * Ⲇ);
		if (0 == Δᐃ) {
			ᐃ.scale(ⲆⲆᐃⲆ, ⲆᐃⵠⲆ);
			ᐃ.translate(Ⲇ * -ⵠᐃᐃⲆⵠ, Ⲇ * 55);
			ᐃ.rotate(-.5);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(60 * Ⲇ, 47 * Ⲇ);
			ᐃ.bezierCurveTo(81 * Ⲇ, 46 * Ⲇ, 85 * Ⲇ, Ⲇ * 47, 83 * Ⲇ, 63 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 83, 72 * Ⲇ, Ⲇ * 83, Ⲇ * 75, Ⲇ * 72, Ⲇ * 73);
			ᐃ.bezierCurveTo(Ⲇ * 68, 80 * Ⲇ, 69 * Ⲇ, 82 * Ⲇ, Ⲇ * 66, Ⲇ * 73);
			ᐃ.bezierCurveTo(62 * Ⲇ, Ⲇ * 81, 61 * Ⲇ, Ⲇ * 82, 59 * Ⲇ, 73 * Ⲇ);
			ᐃ.bezierCurveTo(54 * Ⲇ, 81 * Ⲇ, Ⲇ * 55, 81 * Ⲇ, 52 * Ⲇ, 74 * Ⲇ);
			ᐃ.bezierCurveTo(38 * Ⲇ, Ⲇ * 76, Ⲇ * 41, Ⲇ * 74, 40 * Ⲇ, Ⲇ * 66);
			ᐃ.bezierCurveTo(Ⲇ * 38, Ⲇ * 45, Ⲇ * 39, Ⲇ * 49, Ⲇ * 59, Ⲇ * 47);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔⵠ], ᐃⲆ[4], Ⲇ * ΔⵠⲆᐃⵠ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(68 * Ⲇ, Ⲇ * 54);
			ᐃ.bezierCurveTo(75 * Ⲇ, Ⲇ * 54, Ⲇ * 77, 62 * Ⲇ, 71 * Ⲇ, Ⲇ * 64);
			ᐃ.bezierCurveTo(Ⲇ * 62, 65 * Ⲇ, Ⲇ * 63, Ⲇ * 54, Ⲇ * 68, 54 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[3]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(50 * Ⲇ, 55 * Ⲇ);
			ᐃ.bezierCurveTo(57 * Ⲇ, Ⲇ * 55, 58 * Ⲇ, 65 * Ⲇ, 52 * Ⲇ, Ⲇ * 65);
			ᐃ.bezierCurveTo(44 * Ⲇ, 66 * Ⲇ, 44 * Ⲇ, Ⲇ * 54, Ⲇ * 50, Ⲇ * 55);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[3])
		} else 1 == Δᐃ && (ᐃ.scale(.6, .6), ᐃ.translate(Ⲇ * 185, 165 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 108, 56 * Ⲇ), ᐃ.bezierCurveTo(136 * Ⲇ, Ⲇ * 58, 203 * Ⲇ, 69 * Ⲇ, 234 * Ⲇ, Ⲇ * 75), ᐃ.bezierCurveTo(246 * Ⲇ, 77 * Ⲇ, 247 * Ⲇ, Ⲇ * 78, Ⲇ * 245, 90 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 238, 143 * Ⲇ, 228 * Ⲇ, Ⲇ * 197, Ⲇ * 214, Ⲇ * 259), ᐃ.bezierCurveTo(Ⲇ * 212, 267 * Ⲇ, 209 * Ⲇ, 270 * Ⲇ, 189 * Ⲇ, Ⲇ * 268), ᐃ.bezierCurveTo(142 * Ⲇ, 264 * Ⲇ, 106 * Ⲇ, Ⲇ * 260, Ⲇ * 75, Ⲇ * 253), ᐃ.bezierCurveTo(Ⲇ * 60, 250 * Ⲇ, Ⲇ * 64, 250 * Ⲇ, 66 * Ⲇ, Ⲇ * 221), ᐃ.bezierCurveTo(71 * Ⲇ, 168 * Ⲇ, 87 * Ⲇ, 95 * Ⲇ, Ⲇ * 98, Ⲇ * 67), ᐃ.bezierCurveTo(Ⲇ * 101, Ⲇ * 57, Ⲇ * 103, Ⲇ * 56, Ⲇ * 106, 56 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⵠΔΔⵠ], Ⲇ * ⵠⲆΔᐃᐃ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 112, 72 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 132, Ⲇ * 73, 227 * Ⲇ, 85 * Ⲇ, Ⲇ * 226, 91 * Ⲇ), ᐃ.bezierCurveTo(231 * Ⲇ, 89 * Ⲇ, 217 * Ⲇ, 196 * Ⲇ, Ⲇ * 200, 250 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 196, 254 * Ⲇ, Ⲇ * 175, 249 * Ⲇ, 166 * Ⲇ, 249 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 91, 241 * Ⲇ, 82 * Ⲇ, 236 * Ⲇ, Ⲇ * 83, 232 * Ⲇ), ᐃ.bezierCurveTo(90 * Ⲇ, Ⲇ * 144, Ⲇ * 108, 71 * Ⲇ, Ⲇ * 111, 72 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ΔⵠΔⲆⲆ, ᐃⲆ[0], Ⲇ * ⲆᐃⵠΔΔᐃⲆ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 132, Ⲇ * 117), ᐃ.bezierCurveTo(171 * Ⲇ, 86 * Ⲇ, 191 * Ⲇ, Ⲇ * 101, Ⲇ * 188, Ⲇ * 134), ᐃ.bezierCurveTo(Ⲇ * 185, 154 * Ⲇ, Ⲇ * 170, 158 * Ⲇ, 153 * Ⲇ, 158 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 143, Ⲇ * 172, 146 * Ⲇ, 180 * Ⲇ, Ⲇ * 147, Ⲇ * 193), ᐃⵠ(ᐃ, undefined, ᐃⲆ[0], 20 * Ⲇ), ᐃΔⵠ(ᐃ, Ⲇ * 142, 221 * Ⲇ, 16.1245154965971 * Ⲇ), ᐃⵠ(ᐃ, ᐃⲆ[0]));
		return ⲆⲆ
	}

	function ΔΔᐃΔⵠⲆᐃⵠᐃ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 238 * Ⲇ;
		ⲆⲆ.height = 230 * Ⲇ;
		ᐃ.translate(-93 * Ⲇ, Ⲇ * -110);
		ᐃΔⵠ(ᐃ, 213.5 * Ⲇ, 256.75 * Ⲇ, Ⲇ * 75);
		ᐃⵠ(ᐃ, ᐃⲆ);
		ᐃΔⵠ(ᐃ, Ⲇ * 213.5, 175.75 * Ⲇ, 25 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 156.5, Ⲇ * 137.75);
		ᐃ.bezierCurveTo(Ⲇ * 170.5, 173.75 * Ⲇ, 195.5 * Ⲇ, 177.75 * Ⲇ, Ⲇ * 209.5, Ⲇ * 177.75);
		ᐃ.lineWidth = Ⲇ * 17;
		ᐃ.strokeStyle = ᐃⲆ;
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(217.5 * Ⲇ, Ⲇ * 178.75);
		ᐃ.bezierCurveTo(251.5 * Ⲇ, 177.75 * Ⲇ, 263.5 * Ⲇ, Ⲇ * 153.75, Ⲇ * 270.5, 140.75 * Ⲇ);
		ᐃ.lineWidth = Ⲇ * ᐃⲆΔΔⲆ;
		ᐃ.strokeStyle = ᐃⲆ;
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(130.5 * Ⲇ, 124.75 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 153.5, Ⲇ * 185.75, Ⲇ * 198.5, 185.75 * Ⲇ, 213.5 * Ⲇ, Ⲇ * 185.75);
		ᐃ.lineWidth = Ⲇ * 17;
		ᐃ.strokeStyle = ᐃⲆ;
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(214.5 * Ⲇ, Ⲇ * 183.75);
		ᐃ.bezierCurveTo(Ⲇ * 265.5, Ⲇ * 192.75, 293.5 * Ⲇ, Ⲇ * 141.75, 297.5 * Ⲇ, 124.75 * Ⲇ);
		ᐃ.lineWidth = Ⲇ * ⲆⲆⵠⵠᐃⵠΔ;
		ᐃ.strokeStyle = ᐃⲆ;
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 107.5, Ⲇ * 213.75);
		ᐃ.bezierCurveTo(Ⲇ * 151.5, 190.75 * Ⲇ, Ⲇ * 198.5, 184.75 * Ⲇ, Ⲇ * 210.5, Ⲇ * 184.75);
		ᐃ.lineWidth = Ⲇ * 17;
		ᐃ.strokeStyle = ᐃⲆ;
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(212.5 * Ⲇ, Ⲇ * 187.75);
		ᐃ.bezierCurveTo(258.5 * Ⲇ, Ⲇ * 182.75, Ⲇ * 286.5, 194.75 * Ⲇ, 314.5 * Ⲇ, Ⲇ * 206.75);
		ᐃ.lineWidth = Ⲇ * 17;
		ᐃ.strokeStyle = ᐃⲆ;
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(102.5 * Ⲇ, 258.75 * Ⲇ);
		ᐃ.bezierCurveTo(142.5 * Ⲇ, Ⲇ * 200.75, Ⲇ * 193.5, Ⲇ * 194.75, 211.5 * Ⲇ, Ⲇ * 185.75);
		ᐃ.lineWidth = ⲆⲆΔⲆᐃΔⲆ * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ;
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 214.5, Ⲇ * 192.75);
		ᐃ.bezierCurveTo(Ⲇ * 276.5, Ⲇ * 194.75, Ⲇ * 306.5, 233.75 * Ⲇ, 316.5 * Ⲇ, 246.75 * Ⲇ);
		ᐃ.lineWidth = 17 * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ;
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 219.5, Ⲇ * 158.75);
		ᐃ.bezierCurveTo(Ⲇ * 226.5, 159.75 * Ⲇ, 227.5 * Ⲇ, 147.75 * Ⲇ, Ⲇ * 219.5, Ⲇ * 145.75);
		ᐃ.closePath();
		ᐃ.lineWidth = Ⲇ * ᐃᐃᐃⵠⵠ;
		ᐃ.strokeStyle = ᐃⲆ;
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(210.5 * Ⲇ, Ⲇ * 160.75);
		ᐃ.bezierCurveTo(203.5 * Ⲇ, 159.75 * Ⲇ, 199.5 * Ⲇ, 146.75 * Ⲇ, 210.5 * Ⲇ, Ⲇ * 145.75);
		ᐃ.closePath();
		ᐃ.lineWidth = ⵠΔΔΔⵠ * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ;
		ᐃ.stroke();
		return ⲆⲆ
	}

	function ΔΔΔΔᐃⵠⵠ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 238;
		ⲆⲆ.height = 230 * Ⲇ;
		ᐃ.translate(-93 * Ⲇ, -110 * Ⲇ + Ⲇ * 5);
		ᐃ.globalAlpha = .3;
		ᐃΔⵠ(ᐃ, Ⲇ * 213.5, Ⲇ * 256.75, 75 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⲆ]);
		ᐃΔⵠ(ᐃ, 213.5 * Ⲇ, Ⲇ * 175.75, Ⲇ * 25);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 156.5, Ⲇ * 137.75);
		ᐃ.bezierCurveTo(Ⲇ * 170.5, 173.75 * Ⲇ, 195.5 * Ⲇ, 177.75 * Ⲇ, Ⲇ * 209.5, 177.75 * Ⲇ);
		ᐃ.lineWidth = 17 * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ[5];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 217.5, 178.75 * Ⲇ);
		ᐃ.bezierCurveTo(251.5 * Ⲇ, Ⲇ * 177.75, Ⲇ * 263.5, 153.75 * Ⲇ, 270.5 * Ⲇ, 140.75 * Ⲇ);
		ᐃ.lineWidth = Ⲇ * 17;
		ᐃ.strokeStyle = ᐃⲆ[ⵠᐃᐃⵠᐃ];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(130.5 * Ⲇ, Ⲇ * 124.75);
		ᐃ.bezierCurveTo(Ⲇ * 153.5, Ⲇ * 185.75, Ⲇ * 198.5, Ⲇ * 185.75, 213.5 * Ⲇ, Ⲇ * 185.75);
		ᐃ.lineWidth = ⲆⲆΔⲆᐃΔⲆ * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ[5];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(214.5 * Ⲇ, 183.75 * Ⲇ);
		ᐃ.bezierCurveTo(265.5 * Ⲇ, Ⲇ * 192.75, 293.5 * Ⲇ, 141.75 * Ⲇ, 297.5 * Ⲇ, Ⲇ * 124.75);
		ᐃ.lineWidth = ᐃᐃᐃΔᐃ * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ[ᐃᐃⲆΔΔ];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(107.5 * Ⲇ, 213.75 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 151.5, Ⲇ * 190.75, Ⲇ * 198.5, 184.75 * Ⲇ, 210.5 * Ⲇ, 184.75 * Ⲇ);
		ᐃ.lineWidth = Ⲇ * 17;
		ᐃ.strokeStyle = ᐃⲆ[ⲆΔΔΔ];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(212.5 * Ⲇ, 187.75 * Ⲇ);
		ᐃ.bezierCurveTo(258.5 * Ⲇ, 182.75 * Ⲇ, 286.5 * Ⲇ, Ⲇ * 194.75, Ⲇ * 314.5, Ⲇ * 206.75);
		ᐃ.lineWidth = 17 * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ[5];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(102.5 * Ⲇ, Ⲇ * 258.75);
		ᐃ.bezierCurveTo(Ⲇ * 142.5, Ⲇ * 200.75, 193.5 * Ⲇ, Ⲇ * 194.75, Ⲇ * 211.5, Ⲇ * 185.75);
		ᐃ.lineWidth = Ⲇ * 17;
		ᐃ.strokeStyle = ᐃⲆ[5];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 214.5, 192.75 * Ⲇ);
		ᐃ.bezierCurveTo(276.5 * Ⲇ, Ⲇ * 194.75, Ⲇ * 306.5, Ⲇ * 233.75, Ⲇ * 316.5, Ⲇ * 246.75);
		ᐃ.lineWidth = Ⲇ * ΔΔⲆᐃᐃΔⵠ;
		ᐃ.strokeStyle = ᐃⲆ[ⲆⲆⵠᐃⲆ];
		ᐃ.stroke();
		ᐃ.translate(0, -ⵠΔΔΔ);
		ᐃ.globalAlpha = ΔⵠⲆ;
		ᐃΔⵠ(ᐃ, 213.5 * Ⲇ, 256.75 * Ⲇ, Ⲇ * 75);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⲆⵠ]);
		ᐃΔⵠ(ᐃ, 213.5 * Ⲇ, Ⲇ * 175.75, 25 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 219.5, 158.75 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 226.5, Ⲇ * 159.75, Ⲇ * 227.5, 147.75 * Ⲇ, 219.5 * Ⲇ, Ⲇ * 145.75);
		ᐃ.closePath();
		ᐃ.lineWidth = 10 * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ[3];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 210.5, 160.75 * Ⲇ);
		ᐃ.bezierCurveTo(203.5 * Ⲇ, 159.75 * Ⲇ, 199.5 * Ⲇ, 146.75 * Ⲇ, 210.5 * Ⲇ, Ⲇ * 145.75);
		ᐃ.closePath();
		ᐃ.lineWidth = Ⲇ * 10;
		ᐃ.strokeStyle = ᐃⲆ[3];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(219.5 * Ⲇ, 158.75 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 226.5, 159.75 * Ⲇ, Ⲇ * 227.5, 147.75 * Ⲇ, 219.5 * Ⲇ, Ⲇ * 145.75);
		ᐃ.closePath();
		ᐃ.fillStyle = ᐃⲆ[ⵠᐃΔⲆ];
		ᐃ.fill();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(210.5 * Ⲇ, Ⲇ * 160.75);
		ᐃ.bezierCurveTo(Ⲇ * 203.5, Ⲇ * 159.75, Ⲇ * 199.5, 146.75 * Ⲇ, Ⲇ * 210.5, 145.75 * Ⲇ);
		ᐃ.closePath();
		ᐃ.fillStyle = ᐃⲆ[ⵠⵠΔΔ];
		ᐃ.fill();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 156.5, 137.75 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 170.5, Ⲇ * 173.75, 195.5 * Ⲇ, 177.75 * Ⲇ, 209.5 * Ⲇ, 177.75 * Ⲇ);
		ᐃ.lineWidth = Ⲇ * ΔⲆⵠᐃΔⲆⲆ;
		ᐃ.strokeStyle = ᐃⲆ[3];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(217.5 * Ⲇ, Ⲇ * 178.75);
		ᐃ.bezierCurveTo(251.5 * Ⲇ, 177.75 * Ⲇ, Ⲇ * 263.5, 153.75 * Ⲇ, Ⲇ * 270.5, Ⲇ * 140.75);
		ᐃ.lineWidth = Ⲇ * ⵠᐃⲆⲆⲆ;
		ᐃ.strokeStyle = ᐃⲆ[3];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 130.5, Ⲇ * 124.75);
		ᐃ.bezierCurveTo(153.5 * Ⲇ, 185.75 * Ⲇ, 198.5 * Ⲇ, Ⲇ * 185.75, Ⲇ * 213.5, 185.75 * Ⲇ);
		ᐃ.lineWidth = Ⲇ * ⲆᐃⵠⲆΔΔⵠ;
		ᐃ.strokeStyle = ᐃⲆ[ᐃᐃΔⵠ];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 214.5, 183.75 * Ⲇ);
		ᐃ.bezierCurveTo(265.5 * Ⲇ, 192.75 * Ⲇ, 293.5 * Ⲇ, Ⲇ * 141.75, 297.5 * Ⲇ, Ⲇ * 124.75);
		ᐃ.lineWidth = Ⲇ * ⲆᐃⵠⲆΔΔⵠ;
		ᐃ.strokeStyle = ᐃⲆ[3];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 107.5, Ⲇ * 213.75);
		ᐃ.bezierCurveTo(Ⲇ * 151.5, Ⲇ * 190.75, 198.5 * Ⲇ, Ⲇ * 184.75, 210.5 * Ⲇ, Ⲇ * 184.75);
		ᐃ.lineWidth = 17 * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ[3];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(212.5 * Ⲇ, Ⲇ * 187.75);
		ᐃ.bezierCurveTo(258.5 * Ⲇ, Ⲇ * 182.75, Ⲇ * 286.5, 194.75 * Ⲇ, Ⲇ * 314.5, Ⲇ * 206.75);
		ᐃ.lineWidth = ⲆⲆⵠⵠᐃⵠΔ * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ[ᐃⵠᐃⲆ];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(102.5 * Ⲇ, 258.75 * Ⲇ);
		ᐃ.bezierCurveTo(142.5 * Ⲇ, Ⲇ * 200.75, 193.5 * Ⲇ, 194.75 * Ⲇ, 211.5 * Ⲇ, 185.75 * Ⲇ);
		ᐃ.lineWidth = Ⲇ * ⲆΔⲆⵠᐃ;
		ᐃ.strokeStyle = ᐃⲆ[ᐃΔΔΔ];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(214.5 * Ⲇ, Ⲇ * 192.75);
		ᐃ.bezierCurveTo(276.5 * Ⲇ, Ⲇ * 194.75, 306.5 * Ⲇ, Ⲇ * 233.75, Ⲇ * 316.5, 246.75 * Ⲇ);
		ᐃ.lineWidth = Ⲇ * 17;
		ᐃ.strokeStyle = ᐃⲆ[ΔⲆΔΔ];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(156.5 * Ⲇ, Ⲇ * 137.75);
		ᐃ.bezierCurveTo(Ⲇ * 170.5, Ⲇ * 173.75, Ⲇ * 195.5, 177.75 * Ⲇ, Ⲇ * 209.5, Ⲇ * 177.75);
		ᐃ.lineWidth = Ⲇ * ⲆᐃⵠᐃⲆ;
		ᐃ.strokeStyle = ᐃⲆ[0];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(217.5 * Ⲇ, Ⲇ * 178.75);
		ᐃ.bezierCurveTo(Ⲇ * 251.5, 177.75 * Ⲇ, 263.5 * Ⲇ, 153.75 * Ⲇ, 270.5 * Ⲇ, Ⲇ * 140.75);
		ᐃ.lineWidth = 8 * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ[0];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(130.5 * Ⲇ, Ⲇ * 124.75);
		ᐃ.bezierCurveTo(153.5 * Ⲇ, Ⲇ * 185.75, Ⲇ * 198.5, 185.75 * Ⲇ, 213.5 * Ⲇ, Ⲇ * 185.75);
		ᐃ.lineWidth = ⲆᐃⲆⵠⲆ * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ[0];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 214.5, Ⲇ * 183.75);
		ᐃ.bezierCurveTo(Ⲇ * 265.5, Ⲇ * 192.75, 293.5 * Ⲇ, 141.75 * Ⲇ, 297.5 * Ⲇ, Ⲇ * 124.75);
		ᐃ.lineWidth = ΔΔⵠⵠⵠ * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ[ⲆⲆⵠⲆ];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(107.5 * Ⲇ, 213.75 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 151.5, Ⲇ * 190.75, 198.5 * Ⲇ, Ⲇ * 184.75, 210.5 * Ⲇ, 184.75 * Ⲇ);
		ᐃ.lineWidth = ⲆⲆΔᐃΔ * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ[0];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 212.5, 187.75 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 258.5, Ⲇ * 182.75, Ⲇ * 286.5, 194.75 * Ⲇ, Ⲇ * 314.5, 206.75 * Ⲇ);
		ᐃ.lineWidth = Ⲇ * ΔⲆΔⲆⲆ;
		ᐃ.strokeStyle = ᐃⲆ[ⵠᐃΔ];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 102.5, 258.75 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 142.5, Ⲇ * 200.75, Ⲇ * 193.5, Ⲇ * 194.75, 211.5 * Ⲇ, Ⲇ * 185.75);
		ᐃ.lineWidth = 8 * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ[0];
		ᐃ.stroke();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(214.5 * Ⲇ, Ⲇ * 192.75);
		ᐃ.bezierCurveTo(Ⲇ * 276.5, Ⲇ * 194.75, 306.5 * Ⲇ, 233.75 * Ⲇ, 316.5 * Ⲇ, 246.75 * Ⲇ);
		ᐃ.lineWidth = ΔΔᐃΔΔ * Ⲇ;
		ᐃ.strokeStyle = ᐃⲆ[Δⵠⵠ];
		ᐃ.stroke();
		ᐃΔⵠ(ᐃ, Ⲇ * 213.5, 256.75 * Ⲇ, 70 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃΔⵠ(ᐃ, 213.5 * Ⲇ, Ⲇ * 175.75, Ⲇ * ᐃΔⲆΔᐃ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃΔⵠ(ᐃ, Ⲇ * 222, Ⲇ * 166, Ⲇ * 5);
		ᐃ.fillStyle = ᐃⲆ[2];
		ᐃ.fill();
		ᐃΔⵠ(ᐃ, Ⲇ * 205, Ⲇ * 166, Ⲇ * ⵠⵠΔΔⲆ);
		ᐃ.fillStyle = ᐃⲆ[ΔΔᐃᐃ];
		ᐃ.fill();
		ᐃΔⵠ(ᐃ, Ⲇ * 206.2, Ⲇ * 167, Ⲇ * 2.5);
		ᐃ.fillStyle = ᐃⲆ[ⵠΔΔⵠ];
		ᐃ.fill();
		ᐃΔⵠ(ᐃ, Ⲇ * 223.2, Ⲇ * 167, 2.5 * Ⲇ);
		ᐃ.fillStyle = ᐃⲆ[4];
		ᐃ.fill();
		ᐃ.save();
		ᐃ.translate(213.5 * Ⲇ, Ⲇ * 293.75);
		ᐃ.rotate(.76);
		ᐃᐃᐃ(ᐃ, Ⲇ * -22, Ⲇ * -21, 44 * Ⲇ, 42 * Ⲇ, 6 * Ⲇ);
		ᐃ.restore();
		ᐃ.fillStyle = ᐃⲆ[1];
		ᐃ.fill();
		ᐃ.save();
		ᐃ.translate(Ⲇ * 212.5, 258.25 * Ⲇ);
		ᐃ.rotate(.8);
		ᐃᐃᐃ(ᐃ, -ⵠᐃⲆᐃᐃ * Ⲇ, Ⲇ * -14.5, Ⲇ * 30, Ⲇ * 29, 6 * Ⲇ);
		ᐃ.restore();
		ᐃ.fillStyle = ᐃⲆ[ᐃⲆⲆ];
		ᐃ.fill();
		return ⲆⲆ
	}

	function ⲆΔΔⵠⵠⵠⵠᐃΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 85 * Ⲇ;
		var ⲆΔΔ = 115 * Ⲇ;
		var ⵠⲆⲆΔ = Δⵠᐃⵠⵠ * Ⲇ;
		var ⲆⲆⵠ = Ⲇ * 4;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(-130 * Ⲇ, Ⲇ * -60);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(Ⲇ * 190, Ⲇ * 87, Ⲇ * 201, 59 * Ⲇ, 208 * Ⲇ, 64 * Ⲇ);
		ᐃ.bezierCurveTo(213 * Ⲇ, Ⲇ * 68, Ⲇ * 204, Ⲇ * 93, 195 * Ⲇ, Ⲇ * 109);
		ᐃ.bezierCurveTo(195 * Ⲇ, 109 * Ⲇ, Ⲇ * 202, Ⲇ * 124, Ⲇ * 191, 141 * Ⲇ);
		ᐃ.bezierCurveTo(182 * Ⲇ, 151 * Ⲇ, Ⲇ * 164, Ⲇ * 155, Ⲇ * 148, Ⲇ * 144);
		ᐃ.bezierCurveTo(136 * Ⲇ, Ⲇ * 135, 138 * Ⲇ, 111 * Ⲇ, 145 * Ⲇ, Ⲇ * 104);
		ᐃ.bezierCurveTo(Ⲇ * 140, Ⲇ * 92, 131 * Ⲇ, Ⲇ * 67, 138 * Ⲇ, Ⲇ * 63);
		ᐃ.bezierCurveTo(145 * Ⲇ, Ⲇ * 61, Ⲇ * 153, 82 * Ⲇ, 155 * Ⲇ, Ⲇ * 96);
		ᐃ.bezierCurveTo(Ⲇ * 167, Ⲇ * 91, 178 * Ⲇ, 92 * Ⲇ, Ⲇ * 187, 98 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ, ᐃⲆ, ⲆⲆⵠ);
		return ⲆⲆ
	}

	function ⲆᐃⵠⲆⵠⲆΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 188;
		ⲆⲆ.height = Ⲇ * 190;
		ᐃ.globalAlpha = .5;
		ᐃ.translate(ⲆᐃⲆ, Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 33.00567626953125, Ⲇ * 95.44320678710938);
		ᐃ.bezierCurveTo(42.00567626953125 * Ⲇ, 87.44320678710938 * Ⲇ, 48.00567626953125 * Ⲇ, Ⲇ * 51.443206787109375, Ⲇ * 74.00567626953125, Ⲇ * 47.443206787109375);
		ᐃ.bezierCurveTo(100.00567626953125 * Ⲇ, 42.443206787109375 * Ⲇ, Ⲇ * 118.00567626953125, 49.443206787109375 * Ⲇ, Ⲇ * 131.00567626953125, 55.443206787109375 * Ⲇ);
		ᐃ.bezierCurveTo(140.00567626953125 * Ⲇ, Ⲇ * 70.44320678710938, 145.00567626953125 * Ⲇ, Ⲇ * 87.44320678710938, Ⲇ * 152.00567626953125, 94.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(149.00567626953125 * Ⲇ, 99.44320678710938 * Ⲇ, 147.00567626953125 * Ⲇ, 98.44320678710938 * Ⲇ, 141.00567626953125 * Ⲇ, Ⲇ * 101.44320678710938);
		ᐃ.bezierCurveTo(147.00567626953125 * Ⲇ, 108.44320678710938 * Ⲇ, Ⲇ * 147.00567626953125, 111.44320678710938 * Ⲇ, Ⲇ * 147.00567626953125, 112.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(143.00567626953125 * Ⲇ, Ⲇ * 112.44320678710938, 141.00567626953125 * Ⲇ, Ⲇ * 112.44320678710938, 137.00567626953125 * Ⲇ, 111.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 138.00567626953125, 117.44320678710938 * Ⲇ, 138.00567626953125 * Ⲇ, 120.44320678710938 * Ⲇ, 138.00567626953125 * Ⲇ, Ⲇ * 124.44320678710938);
		ᐃ.bezierCurveTo(Ⲇ * 125.00567626953125, Ⲇ * 107.44320678710938, 121.00567626953125 * Ⲇ, Ⲇ * 124.44320678710938, 110.00567626953125 * Ⲇ, 141.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 102.00567626953125, Ⲇ * 158.44320678710938, 89.00567626953125 * Ⲇ, Ⲇ * 158.44320678710938, 80.00567626953125 * Ⲇ, Ⲇ * 144.44320678710938);
		ᐃ.bezierCurveTo(Ⲇ * 61.00567626953125, 111.44320678710938 * Ⲇ, Ⲇ * 56.00567626953125, Ⲇ * 117.44320678710938, Ⲇ * 48.00567626953125, Ⲇ * 120.44320678710938);
		ᐃ.bezierCurveTo(Ⲇ * 46.00567626953125, Ⲇ * 118.44320678710938, Ⲇ * 47.00567626953125, 112.44320678710938 * Ⲇ, Ⲇ * 48.00567626953125, 107.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 43.00567626953125, 111.44320678710938 * Ⲇ, Ⲇ * 40.00567626953125, 111.44320678710938 * Ⲇ, 37.00567626953125 * Ⲇ, Ⲇ * 110.44320678710938);
		ᐃ.bezierCurveTo(39.50567626953125 * Ⲇ, 104.94320678710938 * Ⲇ, Ⲇ * 39.50567626953125, Ⲇ * 104.94320678710938, 42.00567626953125 * Ⲇ, 99.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(33.00567626953125 * Ⲇ, 99.44320678710938 * Ⲇ, Ⲇ * 33.00567626953125, Ⲇ * 98.44320678710938, 33.00567626953125 * Ⲇ, 96.44320678710938 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 60.00567626953125, 99.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(70.00567626953125 * Ⲇ, 82.35227966308594 * Ⲇ, 85.00567626953125 * Ⲇ, 86.35227966308594 * Ⲇ, Ⲇ * 87.00567626953125, 97.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 89.00567626953125, Ⲇ * 101.35227966308594, Ⲇ * 88.00567626953125, 105.35227966308594 * Ⲇ, 87.00567626953125 * Ⲇ, 110.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 89.00567626953125, Ⲇ * 111.35227966308594, Ⲇ * 91.00567626953125, 112.35227966308594 * Ⲇ, 93.00567626953125 * Ⲇ, 115.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(96.00567626953125 * Ⲇ, 111.35227966308594 * Ⲇ, Ⲇ * 99.00567626953125, 111.35227966308594 * Ⲇ, Ⲇ * 100.00567626953125, 110.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(98.00567626953125 * Ⲇ, Ⲇ * 92.35227966308594, 103.00567626953125 * Ⲇ, 86.35227966308594 * Ⲇ, Ⲇ * 113.00567626953125, Ⲇ * 89.35227966308594);
		ᐃ.bezierCurveTo(122.00567626953125 * Ⲇ, 92.35227966308594 * Ⲇ, 123.00567626953125 * Ⲇ, 94.35227966308594 * Ⲇ, Ⲇ * 126.00567626953125, Ⲇ * 98.35227966308594);
		ᐃ.bezierCurveTo(Ⲇ * 124.00567626953125, 102.35227966308594 * Ⲇ, Ⲇ * 123.00567626953125, 103.35227966308594 * Ⲇ, 121.00567626953125 * Ⲇ, Ⲇ * 104.35227966308594);
		ᐃ.bezierCurveTo(Ⲇ * 124.00567626953125, Ⲇ * 105.35227966308594, 126.00567626953125 * Ⲇ, Ⲇ * 107.35227966308594, Ⲇ * 129.00567626953125, Ⲇ * 111.35227966308594);
		ᐃ.bezierCurveTo(Ⲇ * 115.00567626953125, 122.35227966308594 * Ⲇ, Ⲇ * 113.00567626953125, 145.35227966308594 * Ⲇ, Ⲇ * 100.00567626953125, 152.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 91.00567626953125, Ⲇ * 158.35227966308594, 83.00567626953125 * Ⲇ, Ⲇ * 149.35227966308594, Ⲇ * 76.00567626953125, 138.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(67.00567626953125 * Ⲇ, 114.35227966308594 * Ⲇ, 63.00567626953125 * Ⲇ, 113.35227966308594 * Ⲇ, Ⲇ * 59.00567626953125, 111.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(62.00567626953125 * Ⲇ, Ⲇ * 107.35227966308594, Ⲇ * 64.00567626953125, Ⲇ * 105.35227966308594, 66.00567626953125 * Ⲇ, 104.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 63.00567626953125, 100.35227966308594 * Ⲇ, 62.00567626953125 * Ⲇ, Ⲇ * 100.35227966308594, 60.00567626953125 * Ⲇ, Ⲇ * 99.35227966308594);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ], ᐃⲆ[0], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(51.00567626953125 * Ⲇ, Ⲇ * 72.53409576416016);
		ᐃ.bezierCurveTo(48.00567626953125 * Ⲇ, Ⲇ * 56.534095764160156, 48.00567626953125 * Ⲇ, 49.534095764160156 * Ⲇ, 54.00567626953125 * Ⲇ, 35.534095764160156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 58.00567626953125, 26.534095764160156 * Ⲇ, Ⲇ * 65.00567626953125, Ⲇ * 27.534095764160156, 73.00567626953125 * Ⲇ, Ⲇ * 40.534095764160156);
		ᐃ.bezierCurveTo(Ⲇ * 81.00567626953125, 49.534095764160156 * Ⲇ, Ⲇ * 82.00567626953125, 50.534095764160156 * Ⲇ, 83.00567626953125 * Ⲇ, Ⲇ * 51.534095764160156);
		ᐃ.bezierCurveTo(Ⲇ * 77.00567626953125, Ⲇ * 71.53409576416016, 64.00567626953125 * Ⲇ, Ⲇ * 75.53409576416016, 51.00567626953125 * Ⲇ, 72.53409576416016 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ΔᐃΔ], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(105.00567626953125 * Ⲇ, Ⲇ * 50.53410339355469);
		ᐃ.bezierCurveTo(112.00567626953125 * Ⲇ, 48.53410339355469 * Ⲇ, 125.00567626953125 * Ⲇ, Ⲇ * 21.534103393554688, Ⲇ * 132.00567626953125, Ⲇ * 33.53410339355469);
		ᐃ.bezierCurveTo(138.00567626953125 * Ⲇ, Ⲇ * 42.53410339355469, Ⲇ * 140.00567626953125, 64.53410339355469 * Ⲇ, Ⲇ * 136.00567626953125, 75.53410339355469 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠᐃΔⲆ], 2 * Ⲇ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(ⵠᐃΔ, -ΔⲆΔᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 33.00567626953125, 95.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 42.00567626953125, Ⲇ * 87.44320678710938, Ⲇ * 48.00567626953125, 51.443206787109375 * Ⲇ, 74.00567626953125 * Ⲇ, Ⲇ * 47.443206787109375);
		ᐃ.bezierCurveTo(100.00567626953125 * Ⲇ, Ⲇ * 42.443206787109375, Ⲇ * 118.00567626953125, Ⲇ * 49.443206787109375, Ⲇ * 131.00567626953125, 55.443206787109375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 140.00567626953125, Ⲇ * 70.44320678710938, 145.00567626953125 * Ⲇ, Ⲇ * 87.44320678710938, Ⲇ * 152.00567626953125, 94.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 149.00567626953125, 99.44320678710938 * Ⲇ, 147.00567626953125 * Ⲇ, 98.44320678710938 * Ⲇ, 141.00567626953125 * Ⲇ, 101.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 147.00567626953125, 108.44320678710938 * Ⲇ, Ⲇ * 147.00567626953125, 111.44320678710938 * Ⲇ, 147.00567626953125 * Ⲇ, Ⲇ * 112.44320678710938);
		ᐃ.bezierCurveTo(Ⲇ * 143.00567626953125, 112.44320678710938 * Ⲇ, Ⲇ * 141.00567626953125, Ⲇ * 112.44320678710938, Ⲇ * 137.00567626953125, 111.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 138.00567626953125, 117.44320678710938 * Ⲇ, 138.00567626953125 * Ⲇ, Ⲇ * 120.44320678710938, 138.00567626953125 * Ⲇ, Ⲇ * 124.44320678710938);
		ᐃ.bezierCurveTo(125.00567626953125 * Ⲇ, 107.44320678710938 * Ⲇ, Ⲇ * 121.00567626953125, 124.44320678710938 * Ⲇ, 110.00567626953125 * Ⲇ, Ⲇ * 141.44320678710938);
		ᐃ.bezierCurveTo(Ⲇ * 102.00567626953125, Ⲇ * 158.44320678710938, Ⲇ * 89.00567626953125, 158.44320678710938 * Ⲇ, 80.00567626953125 * Ⲇ, 144.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(61.00567626953125 * Ⲇ, 111.44320678710938 * Ⲇ, Ⲇ * 56.00567626953125, 117.44320678710938 * Ⲇ, Ⲇ * 48.00567626953125, 120.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 46.00567626953125, 118.44320678710938 * Ⲇ, 47.00567626953125 * Ⲇ, 112.44320678710938 * Ⲇ, 48.00567626953125 * Ⲇ, 107.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(43.00567626953125 * Ⲇ, 111.44320678710938 * Ⲇ, Ⲇ * 40.00567626953125, 111.44320678710938 * Ⲇ, Ⲇ * 37.00567626953125, 110.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(39.50567626953125 * Ⲇ, 104.94320678710938 * Ⲇ, Ⲇ * 39.50567626953125, 104.94320678710938 * Ⲇ, 42.00567626953125 * Ⲇ, 99.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 33.00567626953125, Ⲇ * 99.44320678710938, 33.00567626953125 * Ⲇ, 98.44320678710938 * Ⲇ, Ⲇ * 33.00567626953125, 96.44320678710938 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ΔⲆᐃⲆ], Ⲇ * 3);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 60.00567626953125, Ⲇ * 99.35227966308594);
		ᐃ.bezierCurveTo(70.00567626953125 * Ⲇ, Ⲇ * 82.35227966308594, 85.00567626953125 * Ⲇ, 86.35227966308594 * Ⲇ, 87.00567626953125 * Ⲇ, 97.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(89.00567626953125 * Ⲇ, 101.35227966308594 * Ⲇ, 88.00567626953125 * Ⲇ, Ⲇ * 105.35227966308594, Ⲇ * 87.00567626953125, Ⲇ * 110.35227966308594);
		ᐃ.bezierCurveTo(89.00567626953125 * Ⲇ, Ⲇ * 111.35227966308594, 91.00567626953125 * Ⲇ, 112.35227966308594 * Ⲇ, 93.00567626953125 * Ⲇ, Ⲇ * 115.35227966308594);
		ᐃ.bezierCurveTo(Ⲇ * 96.00567626953125, Ⲇ * 111.35227966308594, Ⲇ * 99.00567626953125, 111.35227966308594 * Ⲇ, Ⲇ * 100.00567626953125, Ⲇ * 110.35227966308594);
		ᐃ.bezierCurveTo(98.00567626953125 * Ⲇ, Ⲇ * 92.35227966308594, 103.00567626953125 * Ⲇ, 86.35227966308594 * Ⲇ, Ⲇ * 113.00567626953125, Ⲇ * 89.35227966308594);
		ᐃ.bezierCurveTo(Ⲇ * 122.00567626953125, Ⲇ * 92.35227966308594, Ⲇ * 123.00567626953125, 94.35227966308594 * Ⲇ, 126.00567626953125 * Ⲇ, 98.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(124.00567626953125 * Ⲇ, Ⲇ * 102.35227966308594, Ⲇ * 123.00567626953125, 103.35227966308594 * Ⲇ, Ⲇ * 121.00567626953125, Ⲇ * 104.35227966308594);
		ᐃ.bezierCurveTo(Ⲇ * 124.00567626953125, 105.35227966308594 * Ⲇ, Ⲇ * 126.00567626953125, 107.35227966308594 * Ⲇ, Ⲇ * 129.00567626953125, 111.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 115.00567626953125, 122.35227966308594 * Ⲇ, 113.00567626953125 * Ⲇ, Ⲇ * 145.35227966308594, Ⲇ * 100.00567626953125, 152.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 91.00567626953125, Ⲇ * 158.35227966308594, Ⲇ * 83.00567626953125, Ⲇ * 149.35227966308594, 76.00567626953125 * Ⲇ, Ⲇ * 138.35227966308594);
		ᐃ.bezierCurveTo(Ⲇ * 67.00567626953125, 114.35227966308594 * Ⲇ, Ⲇ * 63.00567626953125, Ⲇ * 113.35227966308594, Ⲇ * 59.00567626953125, Ⲇ * 111.35227966308594);
		ᐃ.bezierCurveTo(62.00567626953125 * Ⲇ, 107.35227966308594 * Ⲇ, Ⲇ * 64.00567626953125, 105.35227966308594 * Ⲇ, Ⲇ * 66.00567626953125, 104.35227966308594 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 63.00567626953125, Ⲇ * 100.35227966308594, 62.00567626953125 * Ⲇ, 100.35227966308594 * Ⲇ, 60.00567626953125 * Ⲇ, 99.35227966308594 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 33.00567626953125, Ⲇ * 95.44320678710938);
		ᐃ.bezierCurveTo(Ⲇ * 42.00567626953125, Ⲇ * 87.44320678710938, 48.00567626953125 * Ⲇ, 51.443206787109375 * Ⲇ, Ⲇ * 74.00567626953125, 47.443206787109375 * Ⲇ);
		ᐃ.bezierCurveTo(100.00567626953125 * Ⲇ, Ⲇ * 42.443206787109375, Ⲇ * 118.00567626953125, Ⲇ * 49.443206787109375, 131.00567626953125 * Ⲇ, Ⲇ * 55.443206787109375);
		ᐃ.bezierCurveTo(140.00567626953125 * Ⲇ, 70.44320678710938 * Ⲇ, Ⲇ * 145.00567626953125, Ⲇ * 87.44320678710938, Ⲇ * 152.00567626953125, 94.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 149.00567626953125, Ⲇ * 99.44320678710938, Ⲇ * 147.00567626953125, Ⲇ * 98.44320678710938, Ⲇ * 141.00567626953125, Ⲇ * 101.44320678710938);
		ᐃ.bezierCurveTo(147.00567626953125 * Ⲇ, Ⲇ * 108.44320678710938, Ⲇ * 147.00567626953125, Ⲇ * 111.44320678710938, 147.00567626953125 * Ⲇ, 112.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 143.00567626953125, 112.44320678710938 * Ⲇ, Ⲇ * 141.00567626953125, 112.44320678710938 * Ⲇ, 137.00567626953125 * Ⲇ, Ⲇ * 111.44320678710938);
		ᐃ.bezierCurveTo(Ⲇ * 138.00567626953125, Ⲇ * 117.44320678710938, 138.00567626953125 * Ⲇ, 120.44320678710938 * Ⲇ, Ⲇ * 138.00567626953125, 124.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 125.00567626953125, 107.44320678710938 * Ⲇ, 121.00567626953125 * Ⲇ, Ⲇ * 124.44320678710938, Ⲇ * 110.00567626953125, 141.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(102.00567626953125 * Ⲇ, Ⲇ * 158.44320678710938, 89.00567626953125 * Ⲇ, Ⲇ * 158.44320678710938, 80.00567626953125 * Ⲇ, 144.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 61.00567626953125, Ⲇ * 111.44320678710938, 56.00567626953125 * Ⲇ, Ⲇ * 117.44320678710938, 48.00567626953125 * Ⲇ, Ⲇ * 120.44320678710938);
		ᐃ.bezierCurveTo(Ⲇ * 46.00567626953125, 118.44320678710938 * Ⲇ, 47.00567626953125 * Ⲇ, 112.44320678710938 * Ⲇ, Ⲇ * 48.00567626953125, 107.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(43.00567626953125 * Ⲇ, Ⲇ * 111.44320678710938, 40.00567626953125 * Ⲇ, Ⲇ * 111.44320678710938, Ⲇ * 37.00567626953125, 110.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(39.50567626953125 * Ⲇ, 104.94320678710938 * Ⲇ, 39.50567626953125 * Ⲇ, 104.94320678710938 * Ⲇ, Ⲇ * 42.00567626953125, 99.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(33.00567626953125 * Ⲇ, 99.44320678710938 * Ⲇ, 33.00567626953125 * Ⲇ, 98.44320678710938 * Ⲇ, 33.00567626953125 * Ⲇ, Ⲇ * 96.44320678710938);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆⲆΔΔ], Ⲇ * ⵠᐃⲆᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 51.00567626953125, Ⲇ * 72.53409576416016);
		ᐃ.bezierCurveTo(Ⲇ * 48.00567626953125, Ⲇ * 56.534095764160156, Ⲇ * 48.00567626953125, 49.534095764160156 * Ⲇ, Ⲇ * 54.00567626953125, Ⲇ * 35.534095764160156);
		ᐃ.bezierCurveTo(58.00567626953125 * Ⲇ, 26.534095764160156 * Ⲇ, Ⲇ * 65.00567626953125, Ⲇ * 27.534095764160156, Ⲇ * 73.00567626953125, Ⲇ * 40.534095764160156);
		ᐃ.bezierCurveTo(Ⲇ * 81.00567626953125, Ⲇ * 49.534095764160156, 82.00567626953125 * Ⲇ, Ⲇ * 50.534095764160156, Ⲇ * 83.00567626953125, Ⲇ * 51.534095764160156);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⲆⲆ], ᐃⲆ[2], Ⲇ * 3);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(105.00567626953125 * Ⲇ, Ⲇ * 50.53410339355469);
		ᐃ.bezierCurveTo(112.00567626953125 * Ⲇ, Ⲇ * 48.53410339355469, Ⲇ * 125.00567626953125, Ⲇ * 21.534103393554688, Ⲇ * 132.00567626953125, 33.53410339355469 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 138.00567626953125, Ⲇ * 42.53410339355469, 140.00567626953125 * Ⲇ, Ⲇ * 64.53410339355469, Ⲇ * 136.00567626953125, Ⲇ * 75.53410339355469);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆᐃᐃΔ], 3 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(57.00567626953125 * Ⲇ, Ⲇ * 68.53410339355469);
		ᐃ.bezierCurveTo(63.00567626953125 * Ⲇ, 69.53410339355469 * Ⲇ, Ⲇ * 69.00567626953125, 66.53410339355469 * Ⲇ, Ⲇ * 73.00567626953125, 60.53410339355469 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 66.00567626953125, Ⲇ * 47.53410339355469, 61.00567626953125 * Ⲇ, 42.53410339355469 * Ⲇ, Ⲇ * 58.00567626953125, Ⲇ * 49.53410339355469);
		ᐃ.bezierCurveTo(56.00567626953125 * Ⲇ, Ⲇ * 59.53410339355469, Ⲇ * 56.00567626953125, 64.53410339355469 * Ⲇ, 57.00567626953125 * Ⲇ, Ⲇ * 67.53410339355469);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(115.00567626953125 * Ⲇ, Ⲇ * 59.715911865234375);
		ᐃ.bezierCurveTo(Ⲇ * 119.00567626953125, Ⲇ * 48.715911865234375, Ⲇ * 126.00567626953125, 41.715911865234375 * Ⲇ, Ⲇ * 129.00567626953125, Ⲇ * 48.715911865234375);
		ᐃ.bezierCurveTo(Ⲇ * 131.00567626953125, 56.715911865234375 * Ⲇ, Ⲇ * 133.00567626953125, Ⲇ * 71.71591186523438, 127.00567626953125 * Ⲇ, 68.71591186523438 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 120.00567626953125, 67.71591186523438 * Ⲇ, Ⲇ * 114.00567626953125, Ⲇ * 59.715911865234375, Ⲇ * 116.00567626953125, 58.715911865234375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠᐃⲆ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 77, 107 * Ⲇ, Ⲇ * 6);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃΔⵠ(ᐃ, 110 * Ⲇ, Ⲇ * 107, ΔⲆⵠΔΔ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆⵠ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 75, 105 * Ⲇ, ᐃⵠᐃⲆ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔΔ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 108, 105 * Ⲇ, Ⲇ * 3);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 88.00567626953125, 141.4431915283203 * Ⲇ);
		ᐃ.bezierCurveTo(93.00567626953125 * Ⲇ, 137.4431915283203 * Ⲇ, Ⲇ * 96.00567626953125, 138.4431915283203 * Ⲇ, Ⲇ * 100.00567626953125, Ⲇ * 141.4431915283203);
		ᐃ.bezierCurveTo(Ⲇ * 103.00567626953125, Ⲇ * 143.4431915283203, Ⲇ * 101.00567626953125, Ⲇ * 149.4431915283203, 95.00567626953125 * Ⲇ, Ⲇ * 148.4431915283203);
		ᐃ.bezierCurveTo(Ⲇ * 85.00567626953125, Ⲇ * 148.4431915283203, 86.00567626953125 * Ⲇ, Ⲇ * 145.4431915283203, 88.00567626953125 * Ⲇ, 142.4431915283203 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		return ⲆⲆ
	}

	function ΔⵠⲆΔⵠⵠᐃ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 55;
		var ⲆΔΔ = 55 * Ⲇ;
		var ⵠⲆⲆΔ = ⲆΔΔⲆⵠ * Ⲇ;
		var ⲆⲆⵠ = Ⲇ * 4;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(Ⲇ * -65, -55 * Ⲇ + ⵠⲆⲆΔ);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.moveTo(95 * Ⲇ, 60 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 107, Ⲇ * 62, 110 * Ⲇ, Ⲇ * 73, Ⲇ * 107, Ⲇ * 79);
		ᐃ.bezierCurveTo(Ⲇ * 104, 85 * Ⲇ, 85 * Ⲇ, Ⲇ * 93, 81 * Ⲇ, Ⲇ * 88);
		ᐃ.bezierCurveTo(Ⲇ * 74, 80 * Ⲇ, Ⲇ * 85, Ⲇ * 60, Ⲇ * 95, Ⲇ * 60);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], 3);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.moveTo(Ⲇ * 91, 70 * Ⲇ);
		ᐃ.bezierCurveTo(91 * Ⲇ, Ⲇ * 75, Ⲇ * ⵠᐃⵠⲆⵠ, 76 * Ⲇ, Δᐃⵠⵠⵠ * Ⲇ, Ⲇ * 73);
		ᐃ.bezierCurveTo(ᐃᐃⲆⵠΔ * Ⲇ, Ⲇ * 69, 89 * Ⲇ, Ⲇ * 65, Ⲇ * 91, Ⲇ * 70);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔⲆ], ᐃⲆ[3], ΔΔⲆᐃ);
		return ⲆⲆ
	}

	function ⵠⲆⵠⵠⵠⵠⵠⲆᐃ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 188 * Ⲇ;
		ⲆⲆ.height = 190 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(33.00567626953125 * Ⲇ, Ⲇ * 95.44320678710938);
		ᐃ.bezierCurveTo(Ⲇ * 42.00567626953125, 87.44320678710938 * Ⲇ, Ⲇ * 48.00567626953125, Ⲇ * 51.443206787109375, Ⲇ * 74.00567626953125, 47.443206787109375 * Ⲇ);
		ᐃ.bezierCurveTo(100.00567626953125 * Ⲇ, 42.443206787109375 * Ⲇ, Ⲇ * 118.00567626953125, 49.443206787109375 * Ⲇ, 131.00567626953125 * Ⲇ, 55.443206787109375 * Ⲇ);
		ᐃ.bezierCurveTo(140.00567626953125 * Ⲇ, 70.44320678710938 * Ⲇ, Ⲇ * 145.00567626953125, 87.44320678710938 * Ⲇ, 152.00567626953125 * Ⲇ, Ⲇ * 94.44320678710938);
		ᐃ.bezierCurveTo(149.00567626953125 * Ⲇ, 99.44320678710938 * Ⲇ, Ⲇ * 147.00567626953125, 98.44320678710938 * Ⲇ, 141.00567626953125 * Ⲇ, Ⲇ * 101.44320678710938);
		ᐃ.bezierCurveTo(147.00567626953125 * Ⲇ, Ⲇ * 108.44320678710938, 147.00567626953125 * Ⲇ, 111.44320678710938 * Ⲇ, Ⲇ * 147.00567626953125, 112.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(143.00567626953125 * Ⲇ, Ⲇ * 112.44320678710938, Ⲇ * 141.00567626953125, Ⲇ * 112.44320678710938, 137.00567626953125 * Ⲇ, Ⲇ * 111.44320678710938);
		ᐃ.bezierCurveTo(138.00567626953125 * Ⲇ, 117.44320678710938 * Ⲇ, 138.00567626953125 * Ⲇ, 120.44320678710938 * Ⲇ, Ⲇ * 138.00567626953125, 124.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(125.00567626953125 * Ⲇ, Ⲇ * 107.44320678710938, Ⲇ * 121.00567626953125, 124.44320678710938 * Ⲇ, 110.00567626953125 * Ⲇ, 141.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(102.00567626953125 * Ⲇ, 158.44320678710938 * Ⲇ, 89.00567626953125 * Ⲇ, Ⲇ * 158.44320678710938, 80.00567626953125 * Ⲇ, Ⲇ * 144.44320678710938);
		ᐃ.bezierCurveTo(Ⲇ * 61.00567626953125, Ⲇ * 111.44320678710938, 56.00567626953125 * Ⲇ, Ⲇ * 117.44320678710938, Ⲇ * 48.00567626953125, Ⲇ * 120.44320678710938);
		ᐃ.bezierCurveTo(Ⲇ * 46.00567626953125, Ⲇ * 118.44320678710938, Ⲇ * 47.00567626953125, Ⲇ * 112.44320678710938, Ⲇ * 48.00567626953125, 107.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 43.00567626953125, Ⲇ * 111.44320678710938, Ⲇ * 40.00567626953125, Ⲇ * 111.44320678710938, Ⲇ * 37.00567626953125, 110.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(39.50567626953125 * Ⲇ, 104.94320678710938 * Ⲇ, Ⲇ * 39.50567626953125, 104.94320678710938 * Ⲇ, Ⲇ * 42.00567626953125, 99.44320678710938 * Ⲇ);
		ᐃ.bezierCurveTo(33.00567626953125 * Ⲇ, Ⲇ * 99.44320678710938, 33.00567626953125 * Ⲇ, Ⲇ * 98.44320678710938, Ⲇ * 33.00567626953125, 96.44320678710938 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ], ᐃⲆ[0], ⲆⵠⲆⲆⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 51.00567626953125, Ⲇ * 72.53409576416016);
		ᐃ.bezierCurveTo(48.00567626953125 * Ⲇ, 56.534095764160156 * Ⲇ, 48.00567626953125 * Ⲇ, Ⲇ * 49.534095764160156, Ⲇ * 54.00567626953125, Ⲇ * 35.534095764160156);
		ᐃ.bezierCurveTo(Ⲇ * 58.00567626953125, 26.534095764160156 * Ⲇ, 65.00567626953125 * Ⲇ, Ⲇ * 27.534095764160156, Ⲇ * 73.00567626953125, Ⲇ * 40.534095764160156);
		ᐃ.bezierCurveTo(81.00567626953125 * Ⲇ, Ⲇ * 49.534095764160156, Ⲇ * 82.00567626953125, Ⲇ * 50.534095764160156, Ⲇ * 83.00567626953125, Ⲇ * 51.534095764160156);
		ᐃ.bezierCurveTo(77.00567626953125 * Ⲇ, Ⲇ * 71.53409576416016, 64.00567626953125 * Ⲇ, Ⲇ * 75.53409576416016, 51.00567626953125 * Ⲇ, Ⲇ * 72.53409576416016);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠⲆᐃ], Ⲇ * ⲆⲆⵠᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 105.00567626953125, 50.53410339355469 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 112.00567626953125, 48.53410339355469 * Ⲇ, 125.00567626953125 * Ⲇ, 21.534103393554688 * Ⲇ, Ⲇ * 132.00567626953125, Ⲇ * 33.53410339355469);
		ᐃ.bezierCurveTo(Ⲇ * 138.00567626953125, 42.53410339355469 * Ⲇ, Ⲇ * 140.00567626953125, 64.53410339355469 * Ⲇ, 136.00567626953125 * Ⲇ, 75.53410339355469 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], Ⲇ * Δⵠᐃᐃ);
		return ⲆⲆ
	}

	function ᐃᐃⵠⲆΔⲆⲆΔΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 450;
		ⲆⲆ.height = Ⲇ * 470;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 226.5, 91.546875 * Ⲇ);
		ᐃ.bezierCurveTo(254.5 * Ⲇ, Ⲇ * 115.546875, Ⲇ * 261.5, 115.546875 * Ⲇ, Ⲇ * 294.5, Ⲇ * 109.546875);
		ᐃ.bezierCurveTo(299.5 * Ⲇ, Ⲇ * 141.546875, 315.5 * Ⲇ, 151.546875 * Ⲇ, Ⲇ * 344.5, Ⲇ * 158.546875);
		ᐃ.bezierCurveTo(330.5 * Ⲇ, 195.546875 * Ⲇ, 341.5 * Ⲇ, 207.546875 * Ⲇ, Ⲇ * 361.5, Ⲇ * 226.546875);
		ᐃ.bezierCurveTo(Ⲇ * 331.5, Ⲇ * 251.546875, 335.5 * Ⲇ, 270.546875 * Ⲇ, 342.5 * Ⲇ, 295.546875 * Ⲇ);
		ᐃ.bezierCurveTo(300.5 * Ⲇ, 296.546875 * Ⲇ, 293.5 * Ⲇ, Ⲇ * 325.546875, Ⲇ * 292.5, 344.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 257.5, 326.546875 * Ⲇ, Ⲇ * 242.5, 338.546875 * Ⲇ, Ⲇ * 224.5, Ⲇ * 361.546875);
		ᐃ.bezierCurveTo(200.5 * Ⲇ, 329.546875 * Ⲇ, 180.5 * Ⲇ, Ⲇ * 334.546875, Ⲇ * 155.5, 341.546875 * Ⲇ);
		ᐃ.bezierCurveTo(146.5 * Ⲇ, 307.546875 * Ⲇ, 140.5 * Ⲇ, 302.546875 * Ⲇ, 107.5 * Ⲇ, Ⲇ * 292.546875);
		ᐃ.bezierCurveTo(Ⲇ * 117.5, 253.546875 * Ⲇ, Ⲇ * 109.5, 244.546875 * Ⲇ, 89.5 * Ⲇ, 224.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 118.5, Ⲇ * 191.546875, 114.5 * Ⲇ, Ⲇ * 182.546875, 108.5 * Ⲇ, 156.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 143.5, 149.546875 * Ⲇ, 150.5 * Ⲇ, Ⲇ * 136.546875, Ⲇ * 157.5, 106.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 202.5, Ⲇ * 120.546875, Ⲇ * 211.5, 103.546875 * Ⲇ, 228.5 * Ⲇ, Ⲇ * 91.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠΔᐃᐃⵠ, ᐃⲆ[0], ΔⵠⲆᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(224.5 * Ⲇ, 129.546875 * Ⲇ);
		ᐃ.bezierCurveTo(247.5 * Ⲇ, 147.546875 * Ⲇ, Ⲇ * 252.5, 143.546875 * Ⲇ, Ⲇ * 274.5, Ⲇ * 141.546875);
		ᐃ.bezierCurveTo(279.5 * Ⲇ, 163.546875 * Ⲇ, Ⲇ * 289.5, 168.546875 * Ⲇ, Ⲇ * 311.5, 178.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 301.5, Ⲇ * 199.546875, 307.5 * Ⲇ, Ⲇ * 213.546875, Ⲇ * 323.5, Ⲇ * 226.546875);
		ᐃ.bezierCurveTo(303.5 * Ⲇ, 240.546875 * Ⲇ, Ⲇ * 303.5, 255.546875 * Ⲇ, 312.5 * Ⲇ, Ⲇ * 275.546875);
		ᐃ.bezierCurveTo(Ⲇ * 281.5, Ⲇ * 278.546875, 276.5 * Ⲇ, Ⲇ * 291.546875, 272.5 * Ⲇ, Ⲇ * 313.546875);
		ᐃ.bezierCurveTo(Ⲇ * 248.5, Ⲇ * 301.546875, 239.5 * Ⲇ, Ⲇ * 310.546875, 224.5 * Ⲇ, Ⲇ * 324.546875);
		ᐃ.bezierCurveTo(Ⲇ * 211.5, Ⲇ * 304.546875, Ⲇ * 199.5, Ⲇ * 301.546875, 176.5 * Ⲇ, Ⲇ * 309.546875);
		ᐃ.bezierCurveTo(Ⲇ * 165.5, Ⲇ * 276.546875, 159.5 * Ⲇ, Ⲇ * 275.546875, Ⲇ * 138.5, 274.546875 * Ⲇ);
		ᐃ.bezierCurveTo(148.5 * Ⲇ, 248.546875 * Ⲇ, Ⲇ * 140.5, 237.546875 * Ⲇ, Ⲇ * 125.5, Ⲇ * 225.546875);
		ᐃ.bezierCurveTo(145.5 * Ⲇ, Ⲇ * 205.546875, 146.5 * Ⲇ, Ⲇ * 195.546875, 142.5 * Ⲇ, Ⲇ * 176.546875);
		ᐃ.bezierCurveTo(Ⲇ * 173.5, Ⲇ * 164.546875, Ⲇ * 173.5, Ⲇ * 155.546875, Ⲇ * 178.5, Ⲇ * 140.546875);
		ᐃ.bezierCurveTo(Ⲇ * 214.5, 143.546875 * Ⲇ, Ⲇ * 214.5, Ⲇ * 135.546875, Ⲇ * 226.5, Ⲇ * 129.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆΔⵠΔ], 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 224.5, 160.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 236.5, Ⲇ * 168.546875, 239.5 * Ⲇ, 168.546875 * Ⲇ, Ⲇ * 258.5, 168.546875 * Ⲇ);
		ᐃ.bezierCurveTo(261.5 * Ⲇ, 185.546875 * Ⲇ, 268.5 * Ⲇ, Ⲇ * 187.546875, Ⲇ * 282.5, Ⲇ * 192.546875);
		ᐃ.bezierCurveTo(Ⲇ * 277.5, Ⲇ * 208.546875, Ⲇ * 283.5, 216.546875 * Ⲇ, Ⲇ * 289.5, 228.546875 * Ⲇ);
		ᐃ.bezierCurveTo(277.5 * Ⲇ, 243.546875 * Ⲇ, Ⲇ * 280.5, Ⲇ * 253.546875, Ⲇ * 281.5, 260.546875 * Ⲇ);
		ᐃ.bezierCurveTo(264.5 * Ⲇ, Ⲇ * 260.546875, Ⲇ * 259.5, 269.546875 * Ⲇ, 256.5 * Ⲇ, 283.546875 * Ⲇ);
		ᐃ.bezierCurveTo(244.5 * Ⲇ, 276.546875 * Ⲇ, 232.5 * Ⲇ, 283.546875 * Ⲇ, 223.5 * Ⲇ, 291.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 213.5, 276.546875 * Ⲇ, Ⲇ * 205.5, 278.546875 * Ⲇ, Ⲇ * 190.5, Ⲇ * 281.546875);
		ᐃ.bezierCurveTo(181.5 * Ⲇ, Ⲇ * 262.546875, 173.5 * Ⲇ, 259.546875 * Ⲇ, Ⲇ * 165.5, Ⲇ * 258.546875);
		ᐃ.bezierCurveTo(Ⲇ * 169.5, 239.546875 * Ⲇ, 167.5 * Ⲇ, 233.546875 * Ⲇ, Ⲇ * 157.5, 225.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 169.5, 208.546875 * Ⲇ, Ⲇ * 170.5, Ⲇ * 203.546875, 168.5 * Ⲇ, Ⲇ * 192.546875);
		ᐃ.bezierCurveTo(Ⲇ * 181.5, 187.546875 * Ⲇ, Ⲇ * 188.5, Ⲇ * 179.546875, Ⲇ * 192.5, Ⲇ * 168.546875);
		ᐃ.bezierCurveTo(216.5 * Ⲇ, 170.546875 * Ⲇ, Ⲇ * 218.5, 163.546875 * Ⲇ, 225.5 * Ⲇ, Ⲇ * 160.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔᐃΔ], ΔᐃΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(205.5 * Ⲇ, 194.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 216.5, 192.546875 * Ⲇ, Ⲇ * 219.5, Ⲇ * 191.546875, 225.5 * Ⲇ, Ⲇ * 185.546875);
		ᐃ.bezierCurveTo(Ⲇ * 232.5, 193.546875 * Ⲇ, 237.5 * Ⲇ, 191.546875 * Ⲇ, 246.5 * Ⲇ, 192.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 249.5, 202.546875 * Ⲇ, Ⲇ * 253.5, 205.546875 * Ⲇ, 258.5 * Ⲇ, 207.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 259.5, Ⲇ * 222.546875, Ⲇ * 256.5, 223.546875 * Ⲇ, Ⲇ * 265.5, Ⲇ * 226.546875);
		ᐃ.bezierCurveTo(256.5 * Ⲇ, Ⲇ * 231.546875, 255.5 * Ⲇ, 241.546875 * Ⲇ, Ⲇ * 259.5, 248.546875 * Ⲇ);
		ᐃ.bezierCurveTo(250.5 * Ⲇ, 245.546875 * Ⲇ, 245.5 * Ⲇ, 252.546875 * Ⲇ, 243.5 * Ⲇ, 260.546875 * Ⲇ);
		ᐃ.bezierCurveTo(234.5 * Ⲇ, 256.546875 * Ⲇ, 229.5 * Ⲇ, Ⲇ * 258.546875, 223.5 * Ⲇ, Ⲇ * 265.546875);
		ᐃ.bezierCurveTo(218.5 * Ⲇ, 255.546875 * Ⲇ, 213.5 * Ⲇ, Ⲇ * 257.546875, 204.5 * Ⲇ, Ⲇ * 261.546875);
		ᐃ.bezierCurveTo(203.5 * Ⲇ, 251.546875 * Ⲇ, 198.5 * Ⲇ, 248.546875 * Ⲇ, Ⲇ * 189.5, Ⲇ * 244.546875);
		ᐃ.bezierCurveTo(194.5 * Ⲇ, Ⲇ * 237.546875, Ⲇ * 192.5, 231.546875 * Ⲇ, Ⲇ * 184.5, Ⲇ * 225.546875);
		ᐃ.bezierCurveTo(Ⲇ * 191.5, 211.546875 * Ⲇ, 192.5 * Ⲇ, Ⲇ * 209.546875, Ⲇ * 190.5, 204.546875 * Ⲇ);
		ᐃ.bezierCurveTo(200.5 * Ⲇ, 204.546875 * Ⲇ, 204.5 * Ⲇ, 198.546875 * Ⲇ, 207.5 * Ⲇ, 194.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠΔᐃᐃⵠ, ᐃⲆ[0], ᐃΔⲆΔⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 149.5, Ⲇ * 93.546875);
		ᐃ.bezierCurveTo(287.5 * Ⲇ, 332.546875 * Ⲇ, Ⲇ * 226, Ⲇ * 225.546875, Ⲇ * 302.5, Ⲇ * 357.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[0], ΔᐃΔⲆΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(224.5 * Ⲇ, 66.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 224.5, Ⲇ * 223.546875, 224.5 * Ⲇ, Ⲇ * 223.546875, Ⲇ * 224.5, Ⲇ * 380.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠⲆᐃᐃⲆ, ᐃⲆ[ΔᐃΔ], 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(302.5 * Ⲇ, 88.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 222.5, 227.546875 * Ⲇ, Ⲇ * 222.5, Ⲇ * 227.546875, Ⲇ * 142.5, 366.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[0], 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(361.5 * Ⲇ, 147.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 223, Ⲇ * 226.546875, Ⲇ * 223, Ⲇ * 226.546875, Ⲇ * 84.5, Ⲇ * 305.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆΔⲆⵠⲆ, ᐃⲆ[0], ΔⵠⲆᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(379.5 * Ⲇ, Ⲇ * 225.546875);
		ᐃ.bezierCurveTo(Ⲇ * 221, 225.546875 * Ⲇ, 221 * Ⲇ, 225.546875 * Ⲇ, Ⲇ * 62.5, 225.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆⲆΔᐃⵠ, ᐃⲆ[ⵠⲆⵠ], ᐃᐃΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(90.5 * Ⲇ, 147.546875 * Ⲇ);
		ᐃ.bezierCurveTo(226.5 * Ⲇ, 226.546875 * Ⲇ, 226.5 * Ⲇ, 226.546875 * Ⲇ, Ⲇ * 362.5, 305.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[Ⲇᐃⵠⵠ], 4);
		return ⲆⲆ
	}

	function ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ, ΔⲆᐃ, ⵠᐃⵠ, ΔΔΔⲆ, ⵠⵠⲆⲆ) {
		if (ⵠᐃΔᐃⲆ === ⵠⵠⲆⲆ) ⵠⵠⲆⲆ = 0;
		for (var ΔΔᐃΔ = ΔΔΔⲆ == -ⵠⵠᐃ ? 0 : ΔΔΔⲆ; ⵠⵠⲆⲆ <= ΔΔᐃΔ; ΔΔᐃΔ--) {
			for (var Δᐃ = Ⲇᐃⵠⵠ; Δᐃ < 200; Δᐃ++) {
				for (var ᐃΔⵠⵠ = 0; ᐃΔⵠⵠ < 200; ᐃΔⵠⵠ++) {
					var ΔⲆⵠΔ = ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[ᐃΔⵠⵠ][Δᐃ];
					if (!ΔⲆⵠΔ || !ΔⲆⵠΔ[ΔⲆᐃ]) continue;
					if (-ⵠⵠⵠΔ == ΔΔΔⲆ) var ᐃΔⲆ = ΔⲆⵠΔ[ΔⲆᐃ];
					else var ᐃΔⲆ = ΔⲆⵠΔ[ΔⲆᐃ][ΔΔᐃΔ];
					for (var ⲆⲆⲆΔ = ⵠᐃΔ; ᐃΔⲆ && ᐃΔⲆ.length > ⲆⲆⲆΔ; ⲆⲆⲆΔ++) {
						var ᐃⲆⵠⲆ = ᐃΔⲆ[ⲆⲆⲆΔ];
						ᐃ.fillStyle = ᐃⲆ;
						ᐃΔⵠ(ᐃ, .0095 * (ᐃⲆⵠⲆ.x * Ⲇ), ᐃⲆⵠⲆ.y * Ⲇ * .0095, ⵠᐃⵠ * Ⲇ);
						ᐃ.fill()
					}
				}
			}
		}
	}

	function ΔᐃⵠᐃⵠΔⵠᐃⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 200;
		ⲆⲆ.height = 200 * Ⲇ;
		ᐃ.translate(Ⲇ * ⵠΔᐃⵠΔᐃⵠ, Ⲇ * ⲆⲆᐃΔⵠΔⲆ);
		ᐃ.fillStyle = ᐃⲆ[ᐃΔΔ];
		ᐃ.fillRect(-ᐃᐃᐃᐃ, -3, ⲆⲆ.width, ⲆⲆ.height);
		ᐃ.fillStyle = ᐃⲆ[9];
		ᐃ.fillRect(0, ⵠᐃΔⲆ, ⲆⲆ.width, ⲆⲆ.height);
		ᐃ.fillStyle = ᐃⲆ[17];
		ᐃ.fillRect(0, 0, ⲆⲆ.width, ⲆⲆ.height / 2.1);
		ᐃ.fillStyle = ᐃⲆ[26];
		ᐃ.fillRect(ⲆⲆ.width / 1.77, ⲆⲆ.height / 2.1, ⲆⲆ.width / 2.1, ⲆⲆ.height / 2.1);
		ᐃ.fillStyle = ᐃⲆ[28];
		ᐃ.fillRect(ⲆⲆ.width / 1.77, ⲆⲆ.height / 2.1, 5, ⲆⲆ.height / 2.1);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[17], "so", ᐃⵠᐃⲆ, ᐃΔⲆⵠⵠ, ⲆᐃⲆ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[28], Δ[361], ΔⵠⵠⵠΔ, ⲆⲆΔΔ, 2);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[28], Δ[361], 6, ᐃⵠⵠ, 1);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[28], Δ[361], ᐃΔΔⵠΔ, 0, 0);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[Δᐃⵠᐃ], Δ[218], ᐃᐃᐃᐃ, 2, ⵠΔᐃⵠ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[ⵠⵠⲆⵠ], Δ[218], 2, Δᐃᐃ, 1);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[ΔΔⵠΔ], Δ[218], ⵠᐃⵠⲆ, Δⵠⵠ, ⵠᐃΔⲆ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[5], "t", Δᐃᐃⵠ, 5, ΔⵠⲆᐃ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[ⵠⲆⲆΔᐃⲆⵠ], "t", ΔⵠⲆⲆ, ⵠΔⲆⲆ, 2);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[ᐃᐃΔⵠⵠⲆⲆ], "t", 4, ᐃΔⵠΔ, Δⵠⵠ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[ⲆᐃⲆⵠⲆ], "b", 3, ᐃⲆᐃⲆ, ⵠᐃⵠⲆ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[9], "b", 4, 1, ⵠⵠΔᐃ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[2], "s", 2, ⵠⲆⵠΔ, 2);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[ⲆΔⲆΔ], "s", ΔΔⲆᐃ, ⵠⵠᐃ, ⵠΔⲆ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[4], "s", ᐃᐃⲆⵠ, ⵠⵠΔΔ, ⵠⵠΔΔ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[10], "g", 2, ΔⲆᐃⲆ, 2);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[ⵠⵠⵠⵠⵠ], "g", ⵠᐃⵠΔ, 1, 1);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[ΔⲆΔᐃΔ], "g", 4, 0, 0);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[ⲆⲆⲆᐃ], "p", 4, -1);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[25], "dg", 3, 6, ΔΔⲆⲆ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[27], Δ[278], 2, ⲆᐃᐃΔ, Δⵠᐃᐃ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[27], Δ[278], 2, 1, ⵠⵠⵠΔ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[27], Δ[278], 2, ⵠΔⵠⲆ, ⲆⲆⵠⲆ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[ᐃᐃⵠᐃⲆ], "f", 2, 2, ΔⲆⲆⵠ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[ⲆΔⲆΔᐃ], "f", 3, ⲆⲆⲆᐃ, ⲆΔⲆⵠ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[21], "f", ᐃⵠⲆⲆ, Δⵠⵠ, ⵠⲆⵠ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[22], Δ[ᐃΔⲆΔⲆᐃⵠ], ⵠⲆⵠΔ, ᐃᐃᐃᐃ, 2);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[22], Δ[8], ᐃⵠⲆⵠ, ᐃⲆⲆ, 1);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[22], Δ[ⲆᐃⲆΔⲆ], 4, 0, 0);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[23], Δ[268], ⵠᐃⲆᐃ, ΔⲆΔᐃ, 1);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[23], Δ[268], ᐃᐃΔΔ, 0, 0);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[23], Δ[268], 2, 2, ⲆⲆΔΔ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[23], "d", ⵠΔⲆⲆ, 1, 1);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[23], "d", 4, 0, 0);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[23], "d", ΔΔᐃᐃ, ⲆⲆⵠᐃ, ΔⲆᐃⲆ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[24], "a", ⵠΔᐃΔᐃ, 2, ᐃⲆᐃⵠ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[24], "a", 3, 1, ΔΔⲆΔ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[24], "a", 4, ⵠᐃΔ, Ⲇᐃⵠⵠ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[30], "l", 4, 2, ⵠΔᐃΔᐃ);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[30], "l", ΔⵠⲆᐃ, 1, 1);
		ᐃΔⲆⵠᐃ(ᐃ, Ⲇ, ᐃⲆ[30], "l", 4, 0, ⵠⵠΔΔ);
		ᐃΔⵠ(ᐃ, 0, 0, Ⲇᐃⵠⵠ);
		ᐃ.globalCompositeOperation = Δ[289];
		ᐃ.translate(-9 * Ⲇ, Ⲇ * -ⲆⵠⵠⲆ);
		ᐃ.rect(Ⲇ * ⵠⵠΔⲆ, 0, ⲆⲆ.width * Ⲇ, Ⲇ * ⲆⲆ.height, Ⲇ * ⵠΔΔΔⵠ);
		ᐃ.lineWidth = Ⲇ * ᐃⵠⵠΔᐃΔᐃ;
		ᐃ.strokeStyle = ᐃⲆ[ΔⲆⲆⲆⲆⵠⲆ];
		ᐃ.stroke();
		return ⲆⲆ
	}
	const ⵠⲆΔⵠ = Ⲇᐃⵠⵠ;

	function ΔⵠΔΔⲆΔⲆⲆⵠ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 400;
		ⲆⲆ.height = Ⲇ * 400;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 202.5, Ⲇ * 147.5);
		ᐃᐃᐃ(ᐃ, -96.5 * Ⲇ, -21.5 * Ⲇ, Ⲇ * 193, Ⲇ * 43, Ⲇ * 0);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], Ⲇ * ⲆⲆⲆΔΔΔⵠ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 202.5, 190.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * 96.5, Ⲇ * -21.5, -193 * Ⲇ, Ⲇ * 43, Ⲇ * Δⵠⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⲆΔⵠΔ], Ⲇ * ΔΔΔⲆΔ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 202.5, Ⲇ * 233.5);
		ᐃᐃᐃ(ᐃ, -96.5 * Ⲇ, -20.5 * Ⲇ, Ⲇ * 193, 41 * Ⲇ, Ⲇᐃⵠⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠᐃΔ], 12 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(202.5 * Ⲇ, 275 * Ⲇ);
		ᐃᐃᐃ(ᐃ, 96.5 * Ⲇ, Ⲇ * -21, -193 * Ⲇ, 42 * Ⲇ, 0 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ], ᐃⲆ[Ⲇᐃⵠⵠ], Ⲇ * 12);
		ᐃ.save();
		ᐃ.translate(203.5 * Ⲇ, Ⲇ * 121.5);
		ᐃᐃᐃ(ᐃ, -115.5 * Ⲇ, Ⲇ * -20.5, Ⲇ * 231, Ⲇ * 41, Ⲇ * ⵠᐃⵠⲆΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ], ᐃⲆ[0], ΔᐃΔᐃᐃⵠⵠ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(203.5 * Ⲇ, Ⲇ * 299);
		ᐃᐃᐃ(ᐃ, Ⲇ * -115.5, Ⲇ * -ⲆΔⲆΔᐃ, Ⲇ * 231, 40 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠⲆⵠ], Ⲇ * ᐃⲆⵠΔⵠ);
		ᐃ.save();
		ᐃ.translate(298.5 * Ⲇ, Ⲇ * 210);
		ᐃᐃᐃ(ᐃ, -20.5 * Ⲇ, -109 * Ⲇ, 41 * Ⲇ, Ⲇ * 218, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠΔⵠⲆ], Ⲇ * ᐃⵠᐃⵠⵠ);
		ᐃ.save();
		ᐃ.translate(108.5 * Ⲇ, Ⲇ * 210);
		ᐃᐃᐃ(ᐃ, -20.5 * Ⲇ, -109 * Ⲇ, 41 * Ⲇ, Ⲇ * 218, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ], ᐃⲆ[ⲆΔⵠΔ], Ⲇ * ᐃᐃᐃΔᐃΔΔ);
		return ⲆⲆ
	}
	const ⵠΔΔᐃ = ⵠᐃΔ;

	function ΔΔᐃΔⵠΔᐃΔᐃ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 650 * Ⲇ;
		ⲆⲆ.height = 650 * Ⲇ;
		ᐃ.scale(1.9, 1.9);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 202.5, 147.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -96.5, -21.5 * Ⲇ, 193 * Ⲇ, 193 * Ⲇ, ᐃΔΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[1], ⲆⵠΔⵠᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(203.5 * Ⲇ, Ⲇ * 121.5);
		ᐃᐃᐃ(ᐃ, -115.5 * Ⲇ, Ⲇ * -20.5, Ⲇ * 231, 41 * Ⲇ, ⲆᐃⲆⲆᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔⵠ], ᐃⲆ[ΔⲆΔᐃ], Ⲇ * ΔΔΔⲆΔ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 203.5, 299 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -115.5, Ⲇ * -20, 231 * Ⲇ, Ⲇ * 40, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆⲆ], ᐃⲆ[1], ΔⲆΔΔᐃⲆⵠ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(298.5 * Ⲇ, Ⲇ * 210);
		ᐃᐃᐃ(ᐃ, -20.5 * Ⲇ, -109 * Ⲇ, 41 * Ⲇ, Ⲇ * 218, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆ], ᐃⲆ[1], ⲆⵠΔⵠᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 108.5, Ⲇ * 210);
		ᐃᐃᐃ(ᐃ, Ⲇ * -20.5, Ⲇ * -109, 41 * Ⲇ, Ⲇ * 218, Ⲇ * ⲆΔⲆᐃⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[1], ⲆⵠΔⵠᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(204 * Ⲇ, Ⲇ * 121.5);
		ᐃᐃᐃ(ᐃ, -92 * Ⲇ, -9.5 * Ⲇ, Ⲇ * 184, Ⲇ * 19, ⲆⵠΔΔⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠⵠ], ᐃⲆ[3], Ⲇ * ⲆΔⵠᐃⲆ);
		ᐃ.save();
		ᐃ.translate(197 * Ⲇ, Ⲇ * 299);
		ᐃᐃᐃ(ᐃ, 85 * Ⲇ, -9 * Ⲇ, Ⲇ * -170, ΔⵠⵠᐃΔⵠⵠ * Ⲇ, Ⲇ * ⲆᐃⲆⲆᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⵠⵠⵠⵠ], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 94, Ⲇ * 317);
		ᐃ.bezierCurveTo(110.5 * Ⲇ, 299.5 * Ⲇ, Ⲇ * 110.5, Ⲇ * 299.5, 127 * Ⲇ, Ⲇ * 282);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆᐃⵠⲆⲆ, ᐃⲆ[ᐃΔⵠΔ], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(279 * Ⲇ, Ⲇ * 142);
		ᐃ.bezierCurveTo(296.5 * Ⲇ, 125.5 * Ⲇ, Ⲇ * 296.5, Ⲇ * 125.5, Ⲇ * 314, 109 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[1], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 93, 106 * Ⲇ);
		ᐃ.bezierCurveTo(110.5 * Ⲇ, 124 * Ⲇ, Ⲇ * 110.5, Ⲇ * 124, Ⲇ * 128, Ⲇ * 142);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠⵠⵠΔ], Ⲇ * ⵠᐃΔⵠᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(281 * Ⲇ, Ⲇ * 282);
		ᐃ.bezierCurveTo(296 * Ⲇ, 297.5 * Ⲇ, 296 * Ⲇ, Ⲇ * 297.5, 311 * Ⲇ, 313 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆⲆⲆᐃ], Ⲇ * ⲆⲆⲆΔΔΔⵠ);
		return ⲆⲆ
	}
	const ⵠⵠⲆᐃⲆΔⲆ = 10475426;
	const ⲆᐃⲆⲆΔⲆⵠΔᐃ = ⵠⵠⲆᐃⲆΔⲆ["ΔⵠⵠΔᐃⲆⵠ"];
	const ᐃΔᐃⲆⵠⵠᐃⲆⵠ = `const ⵠⲆᐃᐃⵠⵠΔ = (typeof ⵠⲆΔⲆᐃᐃᐃ === "${ⲆᐃⲆⲆΔⲆⵠΔᐃ}") ? 1 : 0; return ⵠⲆᐃᐃⵠⵠΔ;`;

	function ⵠⲆΔⲆᐃᐃᐃ() {
		ⲆᐃⲆⲆΔⲆⵠΔᐃ;
		ⵠⵠⲆᐃⲆΔⲆ();
		return ᐃΔᐃⲆⵠⵠᐃⲆⵠ
	}
	const ⵠⲆᐃᐃⵠⵠΔ = 15358588;
	const ΔᐃΔΔᐃⵠⲆ = new Function(ⵠⲆΔⲆᐃᐃᐃ + ᐃΔᐃⲆⵠⵠᐃⲆⵠ);
	const ΔⵠⲆΔⵠΔⲆ = 2432148;
	if (ΔᐃΔΔᐃⵠⲆ(ⵠⲆᐃᐃⵠⵠΔ, ΔⵠⲆΔⵠΔⲆ) === 1) {
		const ⵠⵠⲆᐃⲆΔⲆ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]];
		const ⲆᐃⲆⲆΔⲆⵠΔᐃ = ⵠⵠⲆᐃⲆΔⲆ;
		const ΔⵠⵠΔᐃⲆⵠ = function() {
			ⵠⵠⲆᐃⲆΔⲆ(ΔⵠⵠΔᐃⲆⵠ, 4502);
			ⲆᐃⲆⲆΔⲆⵠΔᐃ(ΔⵠⵠΔᐃⲆⵠ, 4070)
		};
		ΔⵠⵠΔᐃⲆⵠ()
	}

	function ⲆΔⵠⲆΔΔᐃⵠⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 400;
		ⲆⲆ.height = 400 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 101, 255 * Ⲇ);
		ᐃ.bezierCurveTo(113 * Ⲇ, 243 * Ⲇ, Ⲇ * 179, Ⲇ * 210, Ⲇ * 219, 196 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 252, 203 * Ⲇ, Ⲇ * 288, 215 * Ⲇ, 318 * Ⲇ, 233 * Ⲇ);
		ᐃ.bezierCurveTo(304 * Ⲇ, Ⲇ * 254, 258 * Ⲇ, 273 * Ⲇ, Ⲇ * 215, Ⲇ * 296);
		ᐃ.bezierCurveTo(Ⲇ * 161, Ⲇ * 287, Ⲇ * 119, 270 * Ⲇ, Ⲇ * 102, 257 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ], ᐃⲆ[ᐃⲆΔ], ᐃᐃⲆⲆⵠΔⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(99 * Ⲇ, Ⲇ * 258);
		ᐃ.bezierCurveTo(Ⲇ * 99, 272.5 * Ⲇ, Ⲇ * 99, 272.5 * Ⲇ, 99 * Ⲇ, Ⲇ * 287);
		ᐃ.bezierCurveTo(166 * Ⲇ, Ⲇ * 319, 193 * Ⲇ, Ⲇ * 320, 212 * Ⲇ, 324 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 292, Ⲇ * 286, 312 * Ⲇ, 271 * Ⲇ, Ⲇ * 319, Ⲇ * 263);
		ᐃ.bezierCurveTo(Ⲇ * 320, Ⲇ * 249, 320 * Ⲇ, 241 * Ⲇ, 318 * Ⲇ, Ⲇ * 234);
		ᐃ.bezierCurveTo(Ⲇ * 300, 254 * Ⲇ, Ⲇ * 254, 277 * Ⲇ, 216 * Ⲇ, 294 * Ⲇ);
		ᐃ.bezierCurveTo(190 * Ⲇ, 296 * Ⲇ, 135 * Ⲇ, Ⲇ * 276, 102 * Ⲇ, Ⲇ * 258);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ⲆΔᐃ], Ⲇ * 14);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 212, Ⲇ * 323);
		ᐃ.bezierCurveTo(Ⲇ * 211.5, 310.5 * Ⲇ, Ⲇ * 211.5, 310.5 * Ⲇ, 211 * Ⲇ, Ⲇ * 298);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆⲆΔᐃⵠ, ᐃⲆ[ᐃⵠⵠ], Ⲇ * 14);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(212 * Ⲇ, 210 * Ⲇ);
		ᐃ.bezierCurveTo(286 * Ⲇ, Ⲇ * 210, Ⲇ * 331, Ⲇ * 254, Ⲇ * 212, 276 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 108, Ⲇ * 276, Ⲇ * 112, 222 * Ⲇ, 213 * Ⲇ, 208 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆΔⲆᐃΔ], Ⲇ * ⲆⲆΔⵠⲆⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(98 * Ⲇ, 200 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 126, 216 * Ⲇ, Ⲇ * 177, Ⲇ * 232, Ⲇ * 213, Ⲇ * 237);
		ᐃ.bezierCurveTo(Ⲇ * 266, Ⲇ * 218, Ⲇ * 288, Ⲇ * 209, Ⲇ * 318, 190 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 269, 164 * Ⲇ, 239 * Ⲇ, Ⲇ * 158, 214 * Ⲇ, 153 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 148, 172 * Ⲇ, Ⲇ * 131, 182 * Ⲇ, 98 * Ⲇ, 200 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], 14 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 97, Ⲇ * 204);
		ᐃ.bezierCurveTo(Ⲇ * 97, 215.5 * Ⲇ, Ⲇ * 97, 215.5 * Ⲇ, Ⲇ * 97, Ⲇ * 227);
		ᐃ.bezierCurveTo(148 * Ⲇ, Ⲇ * 250, Ⲇ * 179, Ⲇ * ⵠⲆᐃⵠᐃⲆⵠ, Ⲇ * 212, Ⲇ * 262);
		ᐃ.bezierCurveTo(268 * Ⲇ, Ⲇ * 244, Ⲇ * 281, Ⲇ * 233, 318 * Ⲇ, 214 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 318, Ⲇ * 203, 318 * Ⲇ, 203 * Ⲇ, 318 * Ⲇ, 192 * Ⲇ);
		ᐃ.bezierCurveTo(250 * Ⲇ, Ⲇ * 225, Ⲇ * 236, Ⲇ * 231, Ⲇ * 214, Ⲇ * 239);
		ᐃ.bezierCurveTo(158 * Ⲇ, Ⲇ * 228, Ⲇ * 126, Ⲇ * 215, Ⲇ * 99, 201 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ⲆⵠⲆ], Ⲇ * 14);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(212 * Ⲇ, Ⲇ * 260);
		ᐃ.bezierCurveTo(Ⲇ * 212, 251.5 * Ⲇ, Ⲇ * 212, 251.5 * Ⲇ, 212 * Ⲇ, Ⲇ * 243);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔⵠΔⲆⲆ, ᐃⲆ[ᐃΔⵠΔ], Ⲇ * 14);
		ᐃΔⵠ(ᐃ, 161 * Ⲇ, 201 * Ⲇ, Ⲇ * 13);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃΔⵠ(ᐃ, Ⲇ * 216, Ⲇ * 205, Ⲇ * 8.06225774829855);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃΔⵠ(ᐃ, 216 * Ⲇ, 175 * Ⲇ, 6.708203932499369 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠᐃⵠ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 271, 191 * Ⲇ, 5.0990195135927845 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠᐃⵠ]);
		ᐃΔⵠ(ᐃ, 206 * Ⲇ, 180 * Ⲇ, Ⲇ * 11.180339887498949);
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃⵠᐃ]);
		return ⲆⲆ
	}

	function ⲆᐃⲆⵠᐃᐃⵠΔⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 400 * Ⲇ;
		ⲆⲆ.height = 400 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 85, Ⲇ * 237);
		ᐃ.rotate(1.5707963267948966);
		ᐃⵠΔⵠ(ᐃ, 6, 54.585977194239184 * Ⲇ, ᐃⵠⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[Ⲇⵠᐃⵠ], 12 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 178, 238 * Ⲇ);
		ᐃ.rotate(1.5707963267948966);
		ᐃⵠΔⵠ(ᐃ, 6, 52.53573932334064 * Ⲇ, 1 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 12 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 270, 239 * Ⲇ);
		ᐃ.rotate(1.5707963267948966);
		ᐃⵠΔⵠ(ᐃ, 6, 53.58058329516393 * Ⲇ, Ⲇ * ΔⲆΔᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[Δᐃᐃⵠ], Ⲇ * 12);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 222, Ⲇ * 312);
		ᐃ.rotate(1.5707963267948966);
		ᐃⵠΔⵠ(ᐃ, 6, Ⲇ * 52.53573932334064, ⲆΔᐃΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆΔ], ᐃⲆ[ΔⲆⲆⵠ], 12 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 317, 159 * Ⲇ);
		ᐃ.rotate(1.5707963267948966);
		ᐃⵠΔⵠ(ᐃ, ΔΔⲆⵠΔ, Ⲇ * 57.63465889766331, Ⲇ * ᐃΔⵠΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⲆ], ᐃⲆ[2], ᐃⵠᐃΔⲆ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 223.5, Ⲇ * 139.0625);
		ᐃ.rotate(1.5707963267948966);
		ᐃⵠΔⵠ(ᐃ, 6, 51.66236541235796 * Ⲇ, Ⲇ * ⵠⵠⵠΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ΔⲆⲆⵠ], 12 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 132.5, 137.0625 * Ⲇ);
		ᐃ.rotate(1.5707963267948966);
		ᐃⵠΔⵠ(ᐃ, ⵠⵠⵠᐃⵠ, Ⲇ * 52.009614495783374, ᐃΔⵠΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⵠ], ᐃⲆ[ⲆⲆⵠᐃ], Ⲇ * 12);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 178.5, Ⲇ * 58.0625);
		ᐃ.rotate(1.5707963267948966);
		ᐃⵠΔⵠ(ᐃ, ΔⵠⵠⵠΔ, 53.16013544000805 * Ⲇ, Ⲇ * ⲆⵠΔⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ], ᐃⲆ[ΔᐃΔⲆ], ᐃⵠⵠᐃⲆᐃⲆ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(177.5 * Ⲇ, 216.0625 * Ⲇ);
		ᐃ.rotate(1.5707963267948966);
		ᐃⵠΔⵠ(ᐃ, 6, 50 * Ⲇ, ⵠⲆⲆⲆ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆΔ], ᐃⲆ[2], Ⲇ * 12);
		ᐃ.save();
		ᐃ.translate(84.5 * Ⲇ, Ⲇ * 215.0625);
		ᐃ.rotate(1.5707963267948966);
		ᐃⵠΔⵠ(ᐃ, ᐃΔⲆⵠⵠ, Ⲇ * 54, Ⲇ * ΔⲆΔᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ΔⲆᐃⲆ], 12 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(319.5 * Ⲇ, Ⲇ * 138.0625);
		ᐃ.rotate(1.5707963267948966);
		ᐃⵠΔⵠ(ᐃ, 6, Ⲇ * 55.08175741568164, 1 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ], ᐃⲆ[2], 12 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 269.5, 216.0625 * Ⲇ);
		ᐃ.rotate(1.5707963267948966);
		ᐃⵠΔⵠ(ᐃ, ⲆΔΔΔΔ, Ⲇ * 54.589376255824725, Ⲇ * ⲆⲆⲆᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⵠᐃⵠⲆ], 12 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 221.5, 293.0625 * Ⲇ);
		ᐃ.rotate(.5235987755982988);
		ᐃⵠΔⵠ(ᐃ, ᐃΔᐃⲆΔ, 49.49747468305833 * Ⲇ, Ⲇ * ⵠΔⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 221.5, Ⲇ * 342.0625);
		ᐃ.bezierCurveTo(Ⲇ * 221.5, Ⲇ * 350.5625, Ⲇ * 221.5, Ⲇ * 350.5625, Ⲇ * 221.5, Ⲇ * 359.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 84.5, Ⲇ * 270.0625);
		ᐃ.bezierCurveTo(84.5 * Ⲇ, Ⲇ * 277.0625, 84.5 * Ⲇ, Ⲇ * 277.0625, 84.5 * Ⲇ, 284.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆᐃⵠⲆ], ΔⲆΔΔᐃⲆⵠ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 84.5, 215.0625 * Ⲇ);
		ᐃ.rotate(.5235987755982988);
		ᐃⵠΔⵠ(ᐃ, 6, Ⲇ * 30, Ⲇ * ᐃᐃⵠΔⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.save();
		ᐃ.translate(177.5 * Ⲇ, Ⲇ * 215.0625);
		ᐃ.rotate(.5235987755982988);
		ᐃⵠΔⵠ(ᐃ, ⲆⵠⵠⵠⲆ, 30 * Ⲇ, ᐃᐃⵠᐃⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠΔ]);
		ᐃ.save();
		ᐃ.translate(222.5 * Ⲇ, Ⲇ * 294.0625);
		ᐃ.rotate(.5235987755982988);
		ᐃⵠΔⵠ(ᐃ, ᐃΔᐃⲆΔ, Ⲇ * 30, ⵠⵠΔⲆⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 270.5, 216.0625 * Ⲇ);
		ᐃ.rotate(.5235987755982988);
		ᐃⵠΔⵠ(ᐃ, 6, Ⲇ * 30, ⵠⲆⲆⲆⵠⲆΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.save();
		ᐃ.translate(320.5 * Ⲇ, 134.0625 * Ⲇ);
		ᐃ.rotate(.5235987755982988);
		ᐃⵠΔⵠ(ᐃ, Δⵠᐃⵠⵠ, 30 * Ⲇ, ᐃᐃⵠᐃⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.save();
		ᐃ.translate(224.5 * Ⲇ, Ⲇ * 138.0625);
		ᐃ.rotate(.5235987755982988);
		ᐃⵠΔⵠ(ᐃ, ΔⵠⵠⵠΔ, 30 * Ⲇ, Ⲇ * ᐃᐃᐃⵠⲆⲆᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 133.5, 137.0625 * Ⲇ);
		ᐃ.rotate(.5235987755982988);
		ᐃⵠΔⵠ(ᐃ, 6, Ⲇ * 30, 15 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.save();
		ᐃ.translate(178.5 * Ⲇ, Ⲇ * 56.0625);
		ᐃ.rotate(.5235987755982988);
		ᐃⵠΔⵠ(ᐃ, 6, 30 * Ⲇ, 15 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		return ⲆⲆ
	}
	const ᐃᐃⵠⵠΔ = ⵠⲆΔΔⵠ;

	function ᐃⵠⲆⲆⲆⵠⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 52 * Ⲇ;
		ⲆⲆ.height = 65 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 9.833328247070312, Ⲇ * 12.078125);
		ᐃ.bezierCurveTo(15.333328247070312 * Ⲇ, Ⲇ * 28.078125, 15.333328247070312 * Ⲇ, Ⲇ * 28.078125, 20.833328247070312 * Ⲇ, 44.078125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆⲆⲆⲆⲆ, ᐃⲆ[1], Ⲇ * ⲆⲆⵠᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(7.8333282470703125 * Ⲇ, 20.078125 * Ⲇ);
		ᐃ.bezierCurveTo(16.833328247070312 * Ⲇ, Ⲇ * 32.578125, 16.833328247070312 * Ⲇ, 32.578125 * Ⲇ, Ⲇ * 25.833328247070312, Ⲇ * 45.078125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆΔᐃΔ], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 23.833328247070312, 26.078125 * Ⲇ);
		ᐃ.bezierCurveTo(25.833328247070312 * Ⲇ, 11.078125 * Ⲇ, Ⲇ * 16.833328247070312, Ⲇ * 8.078125, 14.833328247070312 * Ⲇ, Ⲇ * 7.078125);
		ᐃ.bezierCurveTo(Ⲇ * 11.833328247070312, 17.078125 * Ⲇ, 13.833328247070312 * Ⲇ, 22.078125 * Ⲇ, 23.833328247070312 * Ⲇ, Ⲇ * 27.078125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ], ᐃⲆ[1], ΔΔᐃᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(35.83332824707031 * Ⲇ, 8.078125 * Ⲇ);
		ᐃ.bezierCurveTo(34.83332824707031 * Ⲇ, 27.078125 * Ⲇ, 28.833328247070312 * Ⲇ, Ⲇ * 27.078125, Ⲇ * 23.833328247070312, 28.078125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 21.833328247070312, Ⲇ * 14.078125, Ⲇ * 26.833328247070312, 11.078125 * Ⲇ, 35.83332824707031 * Ⲇ, 8.078125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ], ᐃⲆ[ⲆⲆⲆᐃ], Ⲇ * Ⲇⵠᐃⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(25.833328247070312 * Ⲇ, Ⲇ * 39.078125);
		ᐃ.bezierCurveTo(Ⲇ * 20.833328247070312, Ⲇ * 29.078125, Ⲇ * 14.833328247070312, Ⲇ * 27.078125, 5.8333282470703125 * Ⲇ, 29.078125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 9.833328247070312, Ⲇ * 39.078125, Ⲇ * 16.833328247070312, 42.078125 * Ⲇ, Ⲇ * 25.833328247070312, Ⲇ * 40.078125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ], ᐃⲆ[1], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(42.83332824707031 * Ⲇ, 23.078125 * Ⲇ);
		ᐃ.bezierCurveTo(35.83332824707031 * Ⲇ, Ⲇ * 35.078125, Ⲇ * 31.833328247070312, Ⲇ * 37.078125, 25.833328247070312 * Ⲇ, 36.078125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 25.833328247070312, Ⲇ * 24.078125, Ⲇ * 33.83332824707031, 21.078125 * Ⲇ, 42.83332824707031 * Ⲇ, Ⲇ * 23.078125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠⲆ], ᐃⲆ[1], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 23.833328247070312, 24.078125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 20.833328247070312, Ⲇ * 34.078125, 23.833328247070312 * Ⲇ, Ⲇ * 40.078125, Ⲇ * 27.833328247070312, Ⲇ * 43.078125);
		ᐃ.bezierCurveTo(37.33332824707031 * Ⲇ, 28.078125 * Ⲇ, Ⲇ * 37.33332824707031, Ⲇ * 28.078125, 46.83332824707031 * Ⲇ, Ⲇ * 13.078125);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[1], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 38.83332824707031, Ⲇ * 14.078125);
		ᐃ.bezierCurveTo(34.83332824707031 * Ⲇ, Ⲇ * 24.078125, Ⲇ * 34.83332824707031, 24.078125 * Ⲇ, Ⲇ * 30.833328247070312, 34.078125 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⵠⲆⵠⲆ, ᐃⲆ[1], 2 * Ⲇ);
		return ⲆⲆ
	}
	const ⵠᐃⵠⵠ = ΔᐃΔ;

	function ⵠΔⵠⲆᐃΔⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 170 * Ⲇ;
		ⲆⲆ.height = 173 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(Ⲇ * 5, 5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 86.25, 84.953125 * Ⲇ);
		ᐃⵠΔⵠ(ᐃ, 7, 9.848857801796104 * Ⲇ, Ⲇ * 5);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⵠⵠⵠΔ;
		ᐃ.translate(Ⲇ * -ⵠⵠΔⲆ, Ⲇ * -ⵠⵠΔΔⲆ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 86.25, Ⲇ * 84.953125);
		ᐃⵠΔⵠ(ᐃ, ⲆΔⲆᐃⲆ, 9.848857801796104 * Ⲇ, 5 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[8], ᐃⲆ[ⲆᐃⲆᐃⲆ], 4 * Ⲇ);
		return ⲆⲆ
	}

	function ΔΔΔⲆⲆⲆⲆᐃⵠ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 195 * Ⲇ;
		var ⲆΔΔ = Ⲇ * 190;
		var ΔΔ = Δⵠᐃ / 2;
		var ΔΔⵠ = ⲆΔΔ / ⵠᐃⵠⲆ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		var ΔⲆⵠⵠ = Ⲇ * ᐃⲆᐃⲆᐃ;
		var ⵠⲆⲆΔⲆ = 35 * Ⲇ;
		var ⲆΔΔΔⲆ = 150 * Ⲇ;
		var ΔΔΔⵠᐃ = ⵠⲆⲆΔⲆ / ᐃΔⲆⵠ;
		var ⲆⲆⲆᐃⲆ = ⲆΔΔΔⲆ / 2;
		var ⲆⲆⵠ = ⲆⲆᐃΔᐃ * Ⲇ;
		ᐃ.translate(ΔΔ - ΔⲆΔᐃⵠ * Ⲇ, ΔΔⵠ - ⲆΔⵠᐃⵠ * Ⲇ);
		ᐃ.rotate(-Math.PI / 1.25);
		ᐃ.globalAlpha = ᐃⲆⲆ;
		ᐃᐃᐃ(ᐃ, -ΔΔΔⵠᐃ, -ⲆⲆⲆᐃⲆ, ⵠⲆⲆΔⲆ, ⲆΔΔΔⲆ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[Δᐃᐃ], ⲆⲆⵠ);
		ᐃ.translate(0, 0);
		ᐃ.rotate(Math.PI / 3);
		ᐃ.globalAlpha = 1;
		ᐃᐃᐃ(ᐃ, -ΔΔΔⵠᐃ, -ⲆⲆⲆᐃⲆ, ⵠⲆⲆΔⲆ, ⲆΔΔΔⲆ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⲆΔᐃ], ⲆⲆⵠ);
		ᐃ.translate(ⵠⵠΔΔ, 5);
		ᐃᐃᐃ(ᐃ, -ΔΔΔⵠᐃ / 2, -ⲆⲆⲆᐃⲆ / 2, ⵠⲆⲆΔⲆ / ⵠᐃⵠⲆ, ⲆΔΔΔⲆ / 3, ΔⲆⵠⵠ - 2);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⵠ]);
		return ⲆⲆ
	}

	function ᐃⵠᐃⲆΔΔΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 170;
		ⲆⲆ.height = 173 * Ⲇ;
		ᐃ.translate(ΔⵠⲆᐃⵠ * Ⲇ, 5 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆΔᐃ;
		ᐃ.save();
		ᐃ.translate(86.25 * Ⲇ, 84.953125 * Ⲇ);
		ᐃ.rotate(.32);
		ᐃⵠΔⵠ(ᐃ, ⵠⲆⵠⲆΔ, 42.15447781671598 * Ⲇ, ΔⲆⲆΔΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ]);
		ᐃ.globalAlpha = ΔⵠⲆ;
		ᐃ.translate(-5 * Ⲇ, Ⲇ * -ⵠⵠⲆⵠ);
		ᐃ.save();
		ᐃ.translate(86.25 * Ⲇ, 84.953125 * Ⲇ);
		ᐃ.rotate(.32);
		ᐃⵠΔⵠ(ᐃ, 7, 42.15447781671598 * Ⲇ, ⵠⲆΔΔⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆᐃⲆ], ᐃᐃᐃΔⵠ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(5 * Ⲇ, Ⲇ * ⵠⵠⲆⵠ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 86.25, 84.953125 * Ⲇ);
		ᐃ.rotate(.28);
		ᐃⵠΔⵠ(ᐃ, ⲆᐃᐃΔΔ, 30.463092423455635 * Ⲇ, Ⲇ * ᐃᐃⵠⵠΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⵠ]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(-ΔⲆΔᐃⵠ * Ⲇ, Ⲇ * -ⲆΔⲆⲆ);
		ᐃ.save();
		ᐃ.translate(86.25 * Ⲇ, Ⲇ * 84.953125);
		ᐃ.rotate(.28);
		ᐃⵠΔⵠ(ᐃ, ⲆΔΔᐃΔ, Ⲇ * 30.463092423455635, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⲆⵠ], ᐃⲆ[4], Ⲇ * 4);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(5 * Ⲇ, Ⲇ * 5);
		ᐃΔⵠ(ᐃ, 86.25 * Ⲇ, 84.953125 * Ⲇ, 18.867962264113206 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ]);
		ᐃ.globalAlpha = ΔⵠⲆ;
		ᐃ.translate(Ⲇ * -5, Ⲇ * -5);
		ᐃΔⵠ(ᐃ, 86.25 * Ⲇ, Ⲇ * 84.953125, 18.867962264113206 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[ᐃΔⲆⵠⵠ], Ⲇ * ΔᐃΔΔ);
		return ⲆⲆ
	}

	function ᐃⲆΔᐃⵠⵠⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 170;
		ⲆⲆ.height = 173 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(ⲆΔΔΔ * Ⲇ, 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(85.25 * Ⲇ, 82.953125 * Ⲇ);
		ᐃ.bezierCurveTo(98.25 * Ⲇ, 46.453125 * Ⲇ, 98.25 * Ⲇ, 46.453125 * Ⲇ, Ⲇ * 111.25, Ⲇ * 9.953125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆᐃⲆⵠ, ᐃⲆ[0], Ⲇ * ⵠᐃΔΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 111.25, Ⲇ * 8.953125);
		ᐃ.bezierCurveTo(117.75 * Ⲇ, 12.453125 * Ⲇ, Ⲇ * 117.75, Ⲇ * 12.453125, 124.25 * Ⲇ, Ⲇ * 15.953125);
		ᐃ.bezierCurveTo(Ⲇ * 113.75, Ⲇ * 39.953125, 113.75 * Ⲇ, 39.953125 * Ⲇ, 103.25 * Ⲇ, Ⲇ * 63.953125);
		ᐃ.bezierCurveTo(Ⲇ * 97.75, 64.953125 * Ⲇ, 97.75 * Ⲇ, 64.953125 * Ⲇ, Ⲇ * 92.25, 65.953125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ᐃⲆⲆ;
		ᐃ.translate(Ⲇ * -ᐃΔᐃⲆⲆ, Ⲇ * -ⵠᐃᐃⵠᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(111.25 * Ⲇ, Ⲇ * 8.953125);
		ᐃ.bezierCurveTo(117.75 * Ⲇ, Ⲇ * 12.453125, 117.75 * Ⲇ, Ⲇ * 12.453125, Ⲇ * 124.25, Ⲇ * 15.953125);
		ᐃ.bezierCurveTo(Ⲇ * 113.75, Ⲇ * 39.953125, 113.75 * Ⲇ, 39.953125 * Ⲇ, 103.25 * Ⲇ, 63.953125 * Ⲇ);
		ᐃ.bezierCurveTo(97.75 * Ⲇ, Ⲇ * 64.953125, 97.75 * Ⲇ, Ⲇ * 64.953125, Ⲇ * 92.25, Ⲇ * 65.953125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[7]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(85.25 * Ⲇ, 82.953125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 98.25, Ⲇ * 46.453125, 98.25 * Ⲇ, 46.453125 * Ⲇ, 111.25 * Ⲇ, Ⲇ * 9.953125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, Ⲇᐃⵠⵠⵠ, ᐃⲆ[ΔⲆⵠΔΔ], Ⲇ * 4);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ᐃⲆΔ;
		ᐃ.translate(Ⲇ * 5, 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(87.25 * Ⲇ, Ⲇ * 84.953125);
		ᐃ.bezierCurveTo(Ⲇ * 123.75, Ⲇ * 100.453125, Ⲇ * 123.75, 100.453125 * Ⲇ, Ⲇ * 160.25, 115.953125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[0], Ⲇ * ⲆⵠⲆᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(160.25 * Ⲇ, 114.953125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 156.25, 122.453125 * Ⲇ, Ⲇ * 156.25, Ⲇ * 122.453125, Ⲇ * 152.25, Ⲇ * 129.953125);
		ᐃ.bezierCurveTo(Ⲇ * 130.25, 117.953125 * Ⲇ, Ⲇ * 130.25, 117.953125 * Ⲇ, Ⲇ * 108.25, 105.953125 * Ⲇ);
		ᐃ.bezierCurveTo(107.25 * Ⲇ, 98.953125 * Ⲇ, Ⲇ * 107.25, 98.953125 * Ⲇ, Ⲇ * 106.25, 91.953125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⲆΔⲆⵠ;
		ᐃ.translate(-ⲆΔⲆⲆ * Ⲇ, Ⲇ * -5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 160.25, Ⲇ * 114.953125);
		ᐃ.bezierCurveTo(156.25 * Ⲇ, Ⲇ * 122.453125, 156.25 * Ⲇ, Ⲇ * 122.453125, 152.25 * Ⲇ, Ⲇ * 129.953125);
		ᐃ.bezierCurveTo(Ⲇ * 130.25, 117.953125 * Ⲇ, Ⲇ * 130.25, Ⲇ * 117.953125, Ⲇ * 108.25, 105.953125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 107.25, Ⲇ * 98.953125, Ⲇ * 107.25, 98.953125 * Ⲇ, Ⲇ * 106.25, Ⲇ * 91.953125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[7]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 87.25, 84.953125 * Ⲇ);
		ᐃ.bezierCurveTo(123.75 * Ⲇ, 100.453125 * Ⲇ, 123.75 * Ⲇ, 100.453125 * Ⲇ, 160.25 * Ⲇ, Ⲇ * 115.953125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠᐃΔⵠΔ, ᐃⲆ[6], Ⲇ * ΔⵠⲆⵠⲆ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(5 * Ⲇ, ⵠᐃᐃⵠᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(83.25 * Ⲇ, Ⲇ * 83.953125);
		ᐃ.bezierCurveTo(Ⲇ * 47.75, 68.453125 * Ⲇ, Ⲇ * 47.75, Ⲇ * 68.453125, Ⲇ * 12.25, Ⲇ * 52.953125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆᐃⵠⲆⲆ, ᐃⲆ[0], ᐃΔⲆΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 13.25, Ⲇ * 53.953125);
		ᐃ.bezierCurveTo(17.25 * Ⲇ, 46.953125 * Ⲇ, 17.25 * Ⲇ, 46.953125 * Ⲇ, 21.25 * Ⲇ, Ⲇ * 39.953125);
		ᐃ.bezierCurveTo(Ⲇ * 42.75, 52.453125 * Ⲇ, Ⲇ * 42.75, 52.453125 * Ⲇ, 64.25 * Ⲇ, Ⲇ * 64.953125);
		ᐃ.bezierCurveTo(64.25 * Ⲇ, Ⲇ * 70.953125, 64.25 * Ⲇ, Ⲇ * 70.953125, Ⲇ * 64.25, 76.953125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(-ΔⲆΔᐃⵠ * Ⲇ, -ΔΔⵠΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 13.25, 53.953125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 17.25, Ⲇ * 46.953125, Ⲇ * 17.25, Ⲇ * 46.953125, 21.25 * Ⲇ, Ⲇ * 39.953125);
		ᐃ.bezierCurveTo(Ⲇ * 42.75, Ⲇ * 52.453125, 42.75 * Ⲇ, Ⲇ * 52.453125, Ⲇ * 64.25, 64.953125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 64.25, 70.953125 * Ⲇ, Ⲇ * 64.25, Ⲇ * 70.953125, 64.25 * Ⲇ, 76.953125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠⲆΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(83.25 * Ⲇ, 83.953125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 47.75, 68.453125 * Ⲇ, Ⲇ * 47.75, Ⲇ * 68.453125, Ⲇ * 12.25, Ⲇ * 52.953125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠⲆᐃᐃⲆ, ᐃⲆ[ⵠⵠⵠᐃⵠ], Ⲇ * 4);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠΔᐃ;
		ᐃ.translate(Ⲇ * Δᐃⵠᐃ, ⵠΔΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 84.25, 86.953125 * Ⲇ);
		ᐃ.bezierCurveTo(70.25 * Ⲇ, Ⲇ * 123.953125, Ⲇ * 70.25, Ⲇ * 123.953125, Ⲇ * 56.25, Ⲇ * 160.953125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃΔⵠᐃⵠ, ᐃⲆ[ⵠⵠΔᐃ], Ⲇ * ΔᐃΔⲆΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(56.25 * Ⲇ, 159.953125 * Ⲇ);
		ᐃ.bezierCurveTo(49.25 * Ⲇ, Ⲇ * 155.453125, Ⲇ * 49.25, 155.453125 * Ⲇ, Ⲇ * 42.25, 150.953125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 54.25, 127.953125 * Ⲇ, Ⲇ * 54.25, 127.953125 * Ⲇ, 66.25 * Ⲇ, Ⲇ * 104.953125);
		ᐃ.bezierCurveTo(71.25 * Ⲇ, Ⲇ * 104.953125, 71.25 * Ⲇ, 104.953125 * Ⲇ, 76.25 * Ⲇ, Ⲇ * 104.953125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ᐃⵠⵠ;
		ᐃ.translate(-5 * Ⲇ, Ⲇ * -Δᐃⵠᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(56.25 * Ⲇ, 159.953125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 49.25, 155.453125 * Ⲇ, Ⲇ * 49.25, Ⲇ * 155.453125, 42.25 * Ⲇ, Ⲇ * 150.953125);
		ᐃ.bezierCurveTo(Ⲇ * 54.25, 127.953125 * Ⲇ, 54.25 * Ⲇ, Ⲇ * 127.953125, 66.25 * Ⲇ, Ⲇ * 104.953125);
		ᐃ.bezierCurveTo(Ⲇ * 71.25, Ⲇ * 104.953125, 71.25 * Ⲇ, Ⲇ * 104.953125, 76.25 * Ⲇ, 104.953125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆᐃⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 84.25, 86.953125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 70.25, Ⲇ * 123.953125, Ⲇ * 70.25, 123.953125 * Ⲇ, Ⲇ * 56.25, 160.953125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, Ⲇᐃⵠⵠⵠ, ᐃⲆ[6], ᐃᐃⲆⵠ * Ⲇ);
		return ⲆⲆ
	}

	function ΔⵠᐃⵠᐃᐃΔⲆⵠ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 149;
		ⲆⲆ.height = 356 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 74.5, Ⲇ * 177.5);
		ᐃᐃᐃ(ᐃ, -57.5 * Ⲇ, Ⲇ * -161.5, 100 * Ⲇ, Ⲇ * 323, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ], ᐃⲆ[1], Ⲇ * 4);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 74.5, 177.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -57.5, Ⲇ * 50.5, 100 * Ⲇ, Ⲇ * 105, Ⲇ * ⲆΔⵠᐃⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆⵠⵠ], ᐃⲆ[ⵠΔᐃ], ΔⵠⲆⵠⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(16 * Ⲇ, 125 * Ⲇ);
		ᐃ.bezierCurveTo(74.5 * Ⲇ, 125 * Ⲇ, 118 * Ⲇ, 125 * Ⲇ, 118 * Ⲇ, Ⲇ * 125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃᐃⵠ], ᐃⲆ[2], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 16, Ⲇ * 120);
		ᐃ.bezierCurveTo(Ⲇ * 74.5, Ⲇ * 120, 74.5 * Ⲇ, Ⲇ * 120, 118 * Ⲇ, 120 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆᐃⲆ], ᐃⲆ[3], ᐃⲆⵠΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(16 * Ⲇ, 228 * Ⲇ);
		ᐃ.bezierCurveTo(75 * Ⲇ, 228.5 * Ⲇ, 118 * Ⲇ, 228.5 * Ⲇ, Ⲇ * 118, 229 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔᐃᐃ], ᐃⲆ[ΔⲆᐃⲆ], ⲆⵠΔΔⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(16 * Ⲇ, 224 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 75, Ⲇ * 224, 118 * Ⲇ, 224 * Ⲇ, Ⲇ * 118, 224 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃᐃΔⵠ], ⵠᐃᐃⵠⵠ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 72, Ⲇ * 68.5);
		ᐃᐃᐃ(ᐃ, Ⲇ * -41.5, -36.5 * Ⲇ, 73 * Ⲇ, 73 * Ⲇ, Ⲇ * 13);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 72, 175.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -41.5, Ⲇ * -38.5, 73 * Ⲇ, Ⲇ * 73, 13 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠᐃΔ]);
		ᐃ.save();
		ᐃ.translate(72 * Ⲇ, 279.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -41.5 * Ⲇ, -40.5 * Ⲇ, Ⲇ * 73, Ⲇ * 73, Ⲇ * ᐃᐃΔΔⵠⵠⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 16, 338 * Ⲇ);
		ᐃ.bezierCurveTo(75 * Ⲇ, 338 * Ⲇ, Ⲇ * 118, Ⲇ * 338, Ⲇ * 118, 338 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔⲆ], ᐃⲆ[ⵠᐃⵠⲆ], Ⲇ * ⲆΔⲆᐃⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(16 * Ⲇ, 333 * Ⲇ);
		ᐃ.bezierCurveTo(75 * Ⲇ, 333 * Ⲇ, 118 * Ⲇ, Ⲇ * 333, 118 * Ⲇ, 333 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆⲆ], ᐃⲆ[3], 10 * Ⲇ);
		return ⲆⲆ
	}

	function ΔⵠΔᐃ(Ⲇ, ⵠᐃⵠᐃΔⲆⲆ, ⵠᐃⲆΔⲆⲆⵠⲆΔ, ᐃⲆ, ⵠⵠⵠᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 70;
		var ⲆΔΔ = 70 * Ⲇ;
		var ⵠᐃⵠ = 10 * Ⲇ;
		var ⵠⲆⲆΔ = Ⲇ * ΔΔⵠΔ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ + ⵠⲆⲆΔ;
		for (var Δᐃ = ⵠⲆᐃ; Δᐃ < ⵠᐃⵠᐃΔⲆⲆ.length; Δᐃ++) {
			var Ⲇᐃᐃ = ⵠᐃⵠᐃΔⲆⲆ[Δᐃ];
			ᐃ.globalAlpha = Ⲇᐃᐃ.a;
			var ⵠΔ = Ⲇᐃᐃ.f(ⵠᐃⲆΔⲆⲆⵠⲆΔ, ᐃⵠⵠⲆⵠ, Ⲇᐃᐃ.c);
			ᐃ.save();
			ᐃ.translate(Δⵠᐃ / 2 + Ⲇᐃᐃ.x * Ⲇ, ⲆΔΔ / Ⲇⵠᐃⵠ + Ⲇᐃᐃ.y * Ⲇ);
			ᐃ.rotate(Ⲇᐃᐃ.r);
			ᐃ.drawImage(ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / ⵠⲆⵠΔ);
			ᐃ.restore()
		}
		var ⵠⲆΔ = [];
		for (var Δᐃ = ⵠΔΔᐃ; Δᐃ < ᐃⲆ.length; Δᐃ++) {
			var ΔⵠⵠⵠᐃⲆᐃ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
			var ⵠⲆⵠᐃΔ = ΔⵠⵠⵠᐃⲆᐃ.getContext(Δ[160]);
			ΔⵠⵠⵠᐃⲆᐃ.width = Δⵠᐃ;
			ΔⵠⵠⵠᐃⲆᐃ.height = ⲆΔΔ + ⵠⲆⲆΔ;
			ⵠⲆⵠᐃΔ.globalAlpha = ⵠⵠⵠᐃ / ⲆⲆΔΔ;
			Δᐃ == 2 ? ᐃᐃᐃ(ⵠⲆⵠᐃΔ, ⵠᐃⵠⵠ, ⵠⲆⲆΔ, Δⵠᐃ, ⲆΔΔ, ⵠᐃⵠ) : ᐃᐃᐃ(ⵠⲆⵠᐃΔ, 0, 0, Δⵠᐃ, ⲆΔΔ + ⵠⲆⲆΔ, ⵠᐃⵠ);
			ᐃⵠ(ⵠⲆⵠᐃΔ, "#081a19");
			ⵠⲆⵠᐃΔ.globalAlpha = ⵠⵠⵠᐃ;
			Δᐃ == 2 ? ᐃᐃᐃ(ⵠⲆⵠᐃΔ, ᐃΔΔ, ⵠⲆⲆΔ, Δⵠᐃ, ⲆΔΔ, ⵠᐃⵠ) : ᐃᐃᐃ(ⵠⲆⵠᐃΔ, ⲆΔⵠΔ, 0, Δⵠᐃ, ⲆΔΔ, ⵠᐃⵠ);
			ᐃⵠ(ⵠⲆⵠᐃΔ, ᐃⲆ[Δᐃ]);
			ⵠⲆⵠᐃΔ.globalAlpha = ⲆⵠΔⲆ;
			ᐃⲆᐃⵠ == Δᐃ ? ⵠⲆⵠᐃΔ.drawImage(ⲆⲆ, 0, ⵠⲆⲆΔ) : ⵠⲆⵠᐃΔ.drawImage(ⲆⲆ, 0, 0);
			ⵠⲆΔ.push(Δᐃⵠ(ΔⵠⵠⵠᐃⲆᐃ))
		}
		return ⵠⲆΔ
	}

	function ⵠΔⲆΔᐃⲆⵠ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 75;
		var ⲆΔΔ = Ⲇ * 55;
		var ⲆⲆⵠ = Ⲇ * 4;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(-30 * Ⲇ, Ⲇ * -40);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(Ⲇ * 67, 56 * Ⲇ, Ⲇ * 72, 71 * Ⲇ, 72 * Ⲇ, Ⲇ * 71);
		ᐃ.bezierCurveTo(Ⲇ * 72, 71 * Ⲇ, 84 * Ⲇ, 70 * Ⲇ, 75 * Ⲇ, 82 * Ⲇ);
		ᐃ.bezierCurveTo(70 * Ⲇ, Ⲇ * 88, Ⲇ * 61, 89 * Ⲇ, 58 * Ⲇ, 89 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 55, 89 * Ⲇ, 40 * Ⲇ, Ⲇ * 89, 46 * Ⲇ, Ⲇ * 77);
		ᐃ.bezierCurveTo(46 * Ⲇ, Ⲇ * 77, 43 * Ⲇ, Ⲇ * 63, Ⲇ * 43, Ⲇ * 63);
		ᐃ.bezierCurveTo(35 * Ⲇ, Ⲇ * 61, 35 * Ⲇ, Ⲇ * 53, 42 * Ⲇ, 47 * Ⲇ);
		ᐃ.bezierCurveTo(48 * Ⲇ, Ⲇ * 42, Ⲇ * 62, Ⲇ * 41, 66 * Ⲇ, 43 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 70, Ⲇ * 45, 72 * Ⲇ, 48 * Ⲇ, 67 * Ⲇ, 56 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ]);
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(68 * Ⲇ, Ⲇ * 61, 72 * Ⲇ, Ⲇ * 76, 72 * Ⲇ, 76 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 65, Ⲇ * 85, 61 * Ⲇ, Ⲇ * 85, 49 * Ⲇ, 83 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 49, Ⲇ * 83, 44 * Ⲇ, 63 * Ⲇ, 44 * Ⲇ, 63 * Ⲇ);
		ᐃ.bezierCurveTo(54 * Ⲇ, 63 * Ⲇ, Ⲇ * 60, 63 * Ⲇ, 67 * Ⲇ, 55 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃ]);
		ᐃ.beginPath();
		ᐃ.moveTo(Ⲇ * 69, 65 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 70, Ⲇ * 61, 81 * Ⲇ, 66 * Ⲇ, Ⲇ * 86, 66 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 90, 66 * Ⲇ, 97 * Ⲇ, Ⲇ * 63, 97 * Ⲇ, Ⲇ * 56);
		ᐃ.bezierCurveTo(97 * Ⲇ, 50 * Ⲇ, Ⲇ * 93, Ⲇ * 47, Ⲇ * 88, 44 * Ⲇ);
		ᐃⵠ(ᐃ, ⲆᐃⲆⲆΔ, ᐃⲆ[ᐃⲆΔ], Δⵠᐃᐃ);
		ᐃ.beginPath();
		ᐃ.moveTo(Ⲇ * 50, Ⲇ * 48);
		ᐃ.bezierCurveTo(43 * Ⲇ, 52 * Ⲇ, Ⲇ * 50, Ⲇ * 54, Ⲇ * 51, Ⲇ * 54);
		ᐃ.bezierCurveTo(Ⲇ * 54, 54 * Ⲇ, 59 * Ⲇ, Ⲇ * 52, 59 * Ⲇ, 49 * Ⲇ);
		ᐃ.bezierCurveTo(59 * Ⲇ, 48 * Ⲇ, 55 * Ⲇ, 46 * Ⲇ, Ⲇ * 50, Ⲇ * 48);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔᐃᐃ]);
		return ⲆⲆ
	}
	const ⵠⵠΔΔⵠᐃΔ = ⲆΔⲆⵠᐃ;

	function ᐃᐃⲆⵠⲆⲆΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 155;
		ⲆⲆ.height = Ⲇ * 127;
		ᐃ.globalAlpha = .5;
		ᐃ.translate(ⵠⲆⵠ, Ⲇ * 8);
		ᐃ.translate(-ⲆᐃᐃΔΔ * Ⲇ, -20 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 55, Ⲇ * 68);
		ᐃ.bezierCurveTo(Ⲇ * 86, Ⲇ * 64, Ⲇ * 117, 66 * Ⲇ, 134 * Ⲇ, 68 * Ⲇ);
		ᐃ.bezierCurveTo(152 * Ⲇ, 69 * Ⲇ, 165 * Ⲇ, 86 * Ⲇ, 152 * Ⲇ, Ⲇ * 104);
		ᐃ.bezierCurveTo(146 * Ⲇ, Ⲇ * 87, 122 * Ⲇ, 89 * Ⲇ, 98 * Ⲇ, Ⲇ * 90);
		ᐃ.bezierCurveTo(64 * Ⲇ, 89 * Ⲇ, 41 * Ⲇ, Ⲇ * 91, Ⲇ * 36, 106 * Ⲇ);
		ᐃ.bezierCurveTo(19 * Ⲇ, Ⲇ * 92, Ⲇ * 31, 71 * Ⲇ, Ⲇ * 54, Ⲇ * 69);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠ]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, Ⲇ * -ᐃΔⲆΔⲆᐃⵠ);
		ᐃ.translate(ⲆΔⲆᐃⲆ * Ⲇ, 20 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(24 * Ⲇ, 28 * Ⲇ);
		ᐃ.bezierCurveTo(39 * Ⲇ, Ⲇ * 30, 37 * Ⲇ, 31 * Ⲇ, Ⲇ * 40, 32 * Ⲇ);
		ᐃ.bezierCurveTo(22 * Ⲇ, 45 * Ⲇ, Ⲇ * 26, 58 * Ⲇ, 29 * Ⲇ, Ⲇ * 66);
		ᐃ.bezierCurveTo(86.5 * Ⲇ, Ⲇ * 65, 86.5 * Ⲇ, 65 * Ⲇ, 144 * Ⲇ, Ⲇ * 64);
		ᐃ.bezierCurveTo(151 * Ⲇ, Ⲇ * 42, Ⲇ * 132, Ⲇ * ⲆᐃⵠⲆᐃ, 120 * Ⲇ, ⲆⲆⵠᐃΔ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 106, Ⲇ * 12, Ⲇ * 89, Ⲇ * ΔᐃΔ, 73 * Ⲇ, Ⲇ * ΔⵠᐃⲆ);
		ᐃ.bezierCurveTo(Ⲇ * 51, 5 * Ⲇ, 36 * Ⲇ, Ⲇ * ⲆⵠⵠΔⵠ, Ⲇ * 25, Ⲇ * 28);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[Δⵠᐃᐃ], Ⲇ * ΔᐃΔⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(30 * Ⲇ, 41 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 49, Ⲇ * 31, 53 * Ⲇ, Ⲇ * 29, Ⲇ * 62, Ⲇ * 27);
		ᐃ.bezierCurveTo(59 * Ⲇ, Ⲇ * 24, 56 * Ⲇ, 25 * Ⲇ, 53 * Ⲇ, 24 * Ⲇ);
		ᐃ.bezierCurveTo(67 * Ⲇ, ⵠⵠᐃᐃⲆ * Ⲇ, 84 * Ⲇ, ᐃⵠⵠⵠⲆΔⲆ * Ⲇ, Ⲇ * 120, 16 * Ⲇ);
		ᐃ.bezierCurveTo(107 * Ⲇ, 11 * Ⲇ, 96 * Ⲇ, ⲆⵠᐃΔᐃ * Ⲇ, Ⲇ * 85, Ⲇ * ᐃᐃᐃᐃ);
		ᐃ.bezierCurveTo(59 * Ⲇ, 3 * Ⲇ, 54 * Ⲇ, 7 * Ⲇ, 40 * Ⲇ, Ⲇ * 17);
		ᐃ.bezierCurveTo(32.5 * Ⲇ, Ⲇ * 22.5, 32.5 * Ⲇ, Ⲇ * 22.5, 25 * Ⲇ, 28 * Ⲇ);
		ᐃ.bezierCurveTo(32 * Ⲇ, 30 * Ⲇ, 32 * Ⲇ, 30 * Ⲇ, Ⲇ * 39, 32 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 24, Ⲇ * 28);
		ᐃ.bezierCurveTo(39 * Ⲇ, Ⲇ * 30, Ⲇ * 37, 31 * Ⲇ, 40 * Ⲇ, 32 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 22, 45 * Ⲇ, Ⲇ * 26, 58 * Ⲇ, Ⲇ * 29, 66 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 86.5, Ⲇ * 65, 86.5 * Ⲇ, 65 * Ⲇ, 144 * Ⲇ, Ⲇ * 64);
		ᐃ.bezierCurveTo(151 * Ⲇ, Ⲇ * 42, Ⲇ * 132, Ⲇ * 20, 120 * Ⲇ, Ⲇ * 16);
		ᐃ.bezierCurveTo(106 * Ⲇ, 12 * Ⲇ, 89 * Ⲇ, Ⲇ * 0, 73 * Ⲇ, Ⲇ * 3);
		ᐃ.bezierCurveTo(51 * Ⲇ, 5 * Ⲇ, Ⲇ * 36, 20 * Ⲇ, 25 * Ⲇ, Ⲇ * 28);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], 4 * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * ⲆⲆΔⲆⵠ, Ⲇ * 38, 14.866068747318506 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆⲆⲆ], ᐃⲆ[5], ΔᐃΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(39 * Ⲇ, Ⲇ * 30);
		ᐃ.bezierCurveTo(27 * Ⲇ, Ⲇ * 38, 25 * Ⲇ, Ⲇ * 50, 26 * Ⲇ, 60 * Ⲇ);
		ᐃ.bezierCurveTo(36.5 * Ⲇ, Ⲇ * 58.5, Ⲇ * 36.5, 58.5 * Ⲇ, 47 * Ⲇ, Ⲇ * 57);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆ], ᐃⲆ[2], 4 * Ⲇ);
		ᐃ.translate(-ⵠⵠⵠⲆΔ * Ⲇ, -ⲆᐃⲆⵠᐃᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(55 * Ⲇ, 68 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 86, Ⲇ * 64, Ⲇ * 117, 66 * Ⲇ, 134 * Ⲇ, Ⲇ * 68);
		ᐃ.bezierCurveTo(152 * Ⲇ, 69 * Ⲇ, 165 * Ⲇ, Ⲇ * 86, Ⲇ * 152, 104 * Ⲇ);
		ᐃ.bezierCurveTo(146 * Ⲇ, 87 * Ⲇ, 122 * Ⲇ, Ⲇ * 89, Ⲇ * 98, 90 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 64, 89 * Ⲇ, Ⲇ * 41, 91 * Ⲇ, 36 * Ⲇ, 106 * Ⲇ);
		ᐃ.bezierCurveTo(ⵠΔⲆⵠᐃΔⵠ * Ⲇ, Ⲇ * 92, Ⲇ * 31, 71 * Ⲇ, 54 * Ⲇ, Ⲇ * 69);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ΔⲆΔᐃⵠ], 4 * Ⲇ);
		return ⲆⲆ
	}

	function ΔⲆⵠᐃᐃⲆᐃ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 370 * Ⲇ;
		var ⲆΔΔ = 370 * Ⲇ;
		var ΔΔ = Δⵠᐃ / 2;
		var ΔΔⵠ = ⲆΔΔ / 2;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		var ⵠᐃⵠ = 180 * Ⲇ;
		ᐃ.globalAlpha = .2;
		ᐃΔⵠ(ᐃ, ΔΔ, ΔΔⵠ, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		return ⲆⲆ
	}

	function ⲆⲆᐃᐃⲆᐃⲆ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 135;
		var ⲆΔΔ = 190 * Ⲇ;
		var ΔΔ = Δⵠᐃ / 2;
		var ΔΔⵠ = ⲆΔΔ / ᐃⵠΔⲆ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		var ΔⲆⵠⵠ = 10 * Ⲇ;
		var ⵠⲆⲆΔⲆ = 25 * Ⲇ;
		var ⲆΔΔΔⲆ = Ⲇ * 180;
		var ΔΔΔⵠᐃ = ⵠⲆⲆΔⲆ / 2;
		var ⲆⲆⲆᐃⲆ = ⲆΔΔΔⲆ / 2;
		var ⲆⲆⵠ = 4 * Ⲇ;
		ᐃ.translate(ΔΔ, ΔΔⵠ);
		ᐃ.rotate(-Math.PI / ⲆΔⵠᐃⵠ);
		ᐃ.globalAlpha = 1;
		ᐃᐃᐃ(ᐃ, -ΔΔΔⵠᐃ, -ⲆⲆⲆᐃⲆ, ⵠⲆⲆΔⲆ, ⲆΔΔΔⲆ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ], ᐃⲆ[1], ⲆⲆⵠ);
		ᐃ.translate(0, 0);
		ᐃ.rotate(Math.PI / ΔⵠⲆᐃⵠ);
		ᐃ.globalAlpha = ⲆⵠΔⲆ;
		ᐃᐃᐃ(ᐃ, -ΔΔΔⵠᐃ, -ⲆⲆⲆᐃⲆ, ⵠⲆⲆΔⲆ, ⲆΔΔΔⲆ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ], ᐃⲆ[1], ⲆⲆⵠ);
		return ⲆⲆ
	}

	function ⲆⵠΔΔⲆ(Ⲇ, ᐃⲆ, ⲆⵠΔ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 210;
		var ⲆΔΔ = 205 * Ⲇ;
		var w2 = Δⵠᐃ / ⵠⲆⵠΔ;
		var ᐃᐃⲆᐃⵠ = ⲆΔΔ / 2;
		var ΔⲆⵠⵠ = Ⲇ * 30;
		var ⵠⲆⲆΔ = Ⲇ * 20;
		var ᐃΔⲆⲆΔ = Ⲇ * 200;
		var ᐃⲆΔΔⵠ = Ⲇ * 180;
		var ⵠᐃⵠ = 80 * Ⲇ;
		var ⲆⲆⲆⵠΔ = ᐃΔⲆⲆΔ / ΔⲆⲆⵠ;
		var ⵠᐃⵠⵠⵠ = ᐃⲆΔΔⵠ / 2;
		var ⲆⲆⵠ = 4;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ⲆⲆ.width = 419 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 412;
		if (1 == Δᐃ) {
			ᐃ.save();
			ᐃ.translate(10 * Ⲇ, ⵠᐃⵠⵠ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 117.99996948242188, Ⲇ * 216.40621948242188);
			ᐃ.bezierCurveTo(86.99996948242188 * Ⲇ, 221.40621948242188 * Ⲇ, Ⲇ * 74.99996948242188, 217.40621948242188 * Ⲇ, 60.999969482421875 * Ⲇ, Ⲇ * 205.40621948242188);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[4], Ⲇⵠᐃᐃ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(114.99996948242188 * Ⲇ, Ⲇ * 227.40621948242188);
			ᐃ.bezierCurveTo(90.99996948242188 * Ⲇ, 233.40621948242188 * Ⲇ, 66.99996948242188 * Ⲇ, Ⲇ * 228.40621948242188, 43.999969482421875 * Ⲇ, Ⲇ * 225.40621948242188);
			ᐃⵠ(ᐃ, ⵠᐃΔᐃⲆ, ᐃⲆ[ⲆⲆᐃΔᐃ], ⵠΔⲆΔΔ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 110.99996948242188, Ⲇ * 236.40621948242188);
			ᐃ.bezierCurveTo(94.99996948242188 * Ⲇ, Ⲇ * 244.40621948242188, Ⲇ * 79.99996948242188, 249.40621948242188 * Ⲇ, 60.999969482421875 * Ⲇ, 249.40621948242188 * Ⲇ);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔᐃΔⲆΔ], Ⲇ * 3);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 111.99996948242188, 206.29513549804688 * Ⲇ);
			ᐃ.bezierCurveTo(91.99996948242188 * Ⲇ, Ⲇ * 206.29513549804688, 87.99996948242188 * Ⲇ, 201.29513549804688 * Ⲇ, Ⲇ * 79.99996948242188, Ⲇ * 192.29513549804688);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆⵠⲆᐃ], Ⲇ * 3);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(109.99996948242188 * Ⲇ, Ⲇ * 249.18402099609375);
			ᐃ.bezierCurveTo(97.99996948242188 * Ⲇ, Ⲇ * 263.18402099609375, Ⲇ * 85.99996948242188, Ⲇ * 271.18402099609375, 65.99996948242188 * Ⲇ, 277.18402099609375 * Ⲇ);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[4], Ⲇ * ⵠⵠⵠⵠ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(105.99996948242188 * Ⲇ, 192.18402099609375 * Ⲇ);
			ᐃ.bezierCurveTo(99.49996948242188 * Ⲇ, 197.68402099609375 * Ⲇ, Ⲇ * 99.49996948242188, 197.68402099609375 * Ⲇ, Ⲇ * 92.99996948242188, 203.18402099609375 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 95.99996948242188, Ⲇ * 213.18402099609375, Ⲇ * 95.99996948242188, Ⲇ * 215.18402099609375, 89.99996948242188 * Ⲇ, Ⲇ * 219.18402099609375);
			ᐃ.bezierCurveTo(91.99996948242188 * Ⲇ, Ⲇ * 223.18402099609375, 91.99996948242188 * Ⲇ, Ⲇ * 226.18402099609375, 87.99996948242188 * Ⲇ, 230.18402099609375 * Ⲇ);
			ᐃ.bezierCurveTo(89.99996948242188 * Ⲇ, Ⲇ * 234.18402099609375, 91.99996948242188 * Ⲇ, Ⲇ * 237.18402099609375, 90.99996948242188 * Ⲇ, Ⲇ * 244.18402099609375);
			ᐃ.bezierCurveTo(96.99996948242188 * Ⲇ, 252.18402099609375 * Ⲇ, 96.99996948242188 * Ⲇ, 256.18402099609375 * Ⲇ, 95.99996948242188 * Ⲇ, Ⲇ * 262.18402099609375);
			ᐃ.bezierCurveTo(106.49996948242188 * Ⲇ, 264.18402099609375 * Ⲇ, Ⲇ * 106.49996948242188, Ⲇ * 264.18402099609375, 116.99996948242188 * Ⲇ, Ⲇ * 266.18402099609375);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[4], Ⲇ * ΔⵠᐃⲆ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(104.99996948242188 * Ⲇ, 183.29513549804688 * Ⲇ);
			ᐃ.bezierCurveTo(99.99996948242188 * Ⲇ, Ⲇ * 193.29513549804688, 93.99996948242188 * Ⲇ, 195.29513549804688 * Ⲇ, 89.99996948242188 * Ⲇ, Ⲇ * 201.29513549804688);
			ᐃ.bezierCurveTo(86.99996948242188 * Ⲇ, Ⲇ * 212.29513549804688, 85.99996948242188 * Ⲇ, Ⲇ * 214.29513549804688, 81.99996948242188 * Ⲇ, Ⲇ * 215.29513549804688);
			ᐃ.bezierCurveTo(Ⲇ * 83.99996948242188, 223.29513549804688 * Ⲇ, 83.99996948242188 * Ⲇ, 227.29513549804688 * Ⲇ, Ⲇ * 79.99996948242188, 230.29513549804688 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 83.99996948242188, Ⲇ * 235.29513549804688, Ⲇ * 84.99996948242188, 240.29513549804688 * Ⲇ, 79.99996948242188 * Ⲇ, Ⲇ * 246.29513549804688);
			ᐃ.bezierCurveTo(86.99996948242188 * Ⲇ, 251.29513549804688 * Ⲇ, Ⲇ * 91.99996948242188, Ⲇ * 256.2951354980469, Ⲇ * 89.99996948242188, Ⲇ * 266.2951354980469);
			ᐃ.bezierCurveTo(102.99996948242188 * Ⲇ, Ⲇ * 269.2951354980469, 102.99996948242188 * Ⲇ, Ⲇ * 269.2951354980469, Ⲇ * 115.99996948242188, Ⲇ * 272.2951354980469);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠΔΔⵠ], Ⲇ * 3);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(107.99996948242188 * Ⲇ, 177.85067749023438 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 95.99996948242188, Ⲇ * 187.35067749023438, Ⲇ * 95.99996948242188, 187.35067749023438 * Ⲇ, 83.99996948242188 * Ⲇ, 196.85067749023438 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 82.99996948242188, 203.85067749023438 * Ⲇ, 80.99996948242188 * Ⲇ, Ⲇ * 209.85067749023438, 72.99996948242188 * Ⲇ, 210.85067749023438 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 73.99996948242188, Ⲇ * 220.85067749023438, 73.99996948242188 * Ⲇ, Ⲇ * 221.85067749023438, Ⲇ * 66.99996948242188, 227.85067749023438 * Ⲇ);
			ᐃ.bezierCurveTo(71.99996948242188 * Ⲇ, 235.85067749023438 * Ⲇ, Ⲇ * 73.99996948242188, Ⲇ * 239.85067749023438, 71.99996948242188 * Ⲇ, 247.85067749023438 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 80.99996948242188, Ⲇ * 257.8506774902344, 81.99996948242188 * Ⲇ, Ⲇ * 263.8506774902344, Ⲇ * 77.99996948242188, Ⲇ * 271.8506774902344);
			ᐃ.bezierCurveTo(Ⲇ * 95.49996948242188, 272.8506774902344 * Ⲇ, 95.49996948242188 * Ⲇ, Ⲇ * 272.8506774902344, Ⲇ * 112.99996948242188, Ⲇ * 273.8506774902344);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[4], Ⲇ * ᐃⲆᐃⲆ);
			ᐃ.restore()
		} else Δᐃ == ⲆⲆᐃⲆ && (ᐃ.save(), ᐃ.translate(130 * Ⲇ, Ⲇ * 35), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 170.99996948242188, 133.85067749023438 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 195.99996948242188, 129.85067749023438 * Ⲇ, Ⲇ * 196.99996948242188, Ⲇ * 111.85067749023438, Ⲇ * 200.99996948242188, 88.85067749023438 * Ⲇ), ᐃⵠ(ᐃ, ⲆᐃⵠⲆⲆ, ᐃⲆ[4], 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(169.99996948242188 * Ⲇ, 143.85067749023438 * Ⲇ), ᐃ.bezierCurveTo(189.99996948242188 * Ⲇ, 145.85067749023438 * Ⲇ, Ⲇ * 207.99996948242188, Ⲇ * 126.85067749023438, 222.99996948242188 * Ⲇ, Ⲇ * 100.85067749023438), ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠᐃΔΔΔ], Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 170.99996948242188, 157.85067749023438 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 193.99996948242188, Ⲇ * 160.85067749023438, Ⲇ * 210.99996948242188, 151.85067749023438 * Ⲇ, 232.99996948242188 * Ⲇ, 139.85067749023438 * Ⲇ), ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆⵠⲆⲆⲆ], Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 169.99996948242188, Ⲇ * 168.85067749023438), ᐃ.bezierCurveTo(Ⲇ * 192.99996948242188, 175.85067749023438 * Ⲇ, Ⲇ * 203.99996948242188, Ⲇ * 177.85067749023438, 245.99996948242188 * Ⲇ, Ⲇ * 168.85067749023438), ᐃⵠ(ᐃ, ΔᐃᐃⵠⲆ, ᐃⲆ[ΔΔᐃᐃⲆ], ᐃΔᐃⲆ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 167.99996948242188, Ⲇ * 168.85067749023438), ᐃ.bezierCurveTo(183.99996948242188 * Ⲇ, 189.85067749023438 * Ⲇ, Ⲇ * 191.99996948242188, Ⲇ * 193.85067749023438, Ⲇ * 220.99996948242188, Ⲇ * 196.85067749023438), ᐃⵠ(ᐃ, undefined, ᐃⲆ[4], Ⲇ * ΔΔⲆᐃ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 176.99996948242188, 117.85067749023438 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 181.99996948242188, Ⲇ * 120.85067749023438, 181.99996948242188 * Ⲇ, Ⲇ * 120.85067749023438, 186.99996948242188 * Ⲇ, Ⲇ * 123.85067749023438), ᐃ.bezierCurveTo(183.99996948242188 * Ⲇ, 137.85067749023438 * Ⲇ, 185.99996948242188 * Ⲇ, Ⲇ * 136.85067749023438, 190.99996948242188 * Ⲇ, Ⲇ * 136.85067749023438), ᐃ.bezierCurveTo(186.99996948242188 * Ⲇ, Ⲇ * 147.85067749023438, 189.99996948242188 * Ⲇ, Ⲇ * 152.85067749023438, 193.99996948242188 * Ⲇ, 155.85067749023438 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 187.99996948242188, Ⲇ * 165.85067749023438, 190.99996948242188 * Ⲇ, Ⲇ * 169.85067749023438, 190.99996948242188 * Ⲇ, 172.85067749023438 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 186.99996948242188, 183.85067749023438 * Ⲇ, 186.99996948242188 * Ⲇ, 185.85067749023438 * Ⲇ, Ⲇ * 189.99996948242188, Ⲇ * 188.85067749023438), ᐃ.bezierCurveTo(182.49996948242188 * Ⲇ, Ⲇ * 195.35067749023438, Ⲇ * 182.49996948242188, Ⲇ * 195.35067749023438, 174.99996948242188 * Ⲇ, 201.85067749023438 * Ⲇ), ᐃⵠ(ᐃ, ⲆⲆⲆⲆⲆ, ᐃⲆ[ᐃⵠⲆⲆ], ⵠΔⲆⲆ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(176.99996948242188 * Ⲇ, 112.18402099609375 * Ⲇ), ᐃ.bezierCurveTo(183.99996948242188 * Ⲇ, Ⲇ * 119.18402099609375, 186.99996948242188 * Ⲇ, 117.18402099609375 * Ⲇ, Ⲇ * 192.99996948242188, Ⲇ * 116.18402099609375), ᐃ.bezierCurveTo(191.99996948242188 * Ⲇ, Ⲇ * 126.18402099609375, 193.99996948242188 * Ⲇ, Ⲇ * 130.18402099609375, Ⲇ * 199.99996948242188, Ⲇ * 130.18402099609375), ᐃ.bezierCurveTo(194.99996948242188 * Ⲇ, 145.18402099609375 * Ⲇ, 197.99996948242188 * Ⲇ, 147.18402099609375 * Ⲇ, Ⲇ * 201.99996948242188, 153.18402099609375 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 196.99996948242188, 164.18402099609375 * Ⲇ, Ⲇ * 197.99996948242188, 169.18402099609375 * Ⲇ, Ⲇ * 201.99996948242188, 174.18402099609375 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 194.99996948242188, Ⲇ * 184.18402099609375, 196.99996948242188 * Ⲇ, Ⲇ * 187.18402099609375, 200.99996948242188 * Ⲇ, Ⲇ * 193.18402099609375), ᐃ.bezierCurveTo(Ⲇ * 185.99996948242188, 195.18402099609375 * Ⲇ, Ⲇ * 181.99996948242188, 201.18402099609375 * Ⲇ, Ⲇ * 174.99996948242188, Ⲇ * 210.18402099609375), ᐃⵠ(ᐃ, undefined, ᐃⲆ[4], Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 176.99996948242188, 101.29513549804688 * Ⲇ), ᐃ.bezierCurveTo(181.99996948242188 * Ⲇ, 108.29513549804688 * Ⲇ, 189.99996948242188 * Ⲇ, Ⲇ * 110.29513549804688, 195.99996948242188 * Ⲇ, Ⲇ * 107.29513549804688), ᐃ.bezierCurveTo(197.99996948242188 * Ⲇ, Ⲇ * 121.29513549804688, Ⲇ * 200.99996948242188, Ⲇ * 122.29513549804688, 206.99996948242188 * Ⲇ, Ⲇ * 122.29513549804688), ᐃ.bezierCurveTo(201.99996948242188 * Ⲇ, Ⲇ * 138.29513549804688, 204.99996948242188 * Ⲇ, 142.29513549804688 * Ⲇ, 211.99996948242188 * Ⲇ, 148.29513549804688 * Ⲇ), ᐃ.bezierCurveTo(201.99996948242188 * Ⲇ, Ⲇ * 156.29513549804688, 205.99996948242188 * Ⲇ, Ⲇ * 167.29513549804688, Ⲇ * 213.99996948242188, 173.29513549804688 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 204.99996948242188, 181.29513549804688 * Ⲇ, Ⲇ * 204.99996948242188, Ⲇ * 187.29513549804688, Ⲇ * 205.99996948242188, 193.29513549804688 * Ⲇ), ᐃ.bezierCurveTo(190.99996948242188 * Ⲇ, 198.29513549804688 * Ⲇ, 181.99996948242188 * Ⲇ, 205.29513549804688 * Ⲇ, Ⲇ * 174.99996948242188, 214.29513549804688 * Ⲇ), ᐃⵠ(ᐃ, ⵠᐃΔⵠΔ, ᐃⲆ[ⲆⵠⲆⲆⲆ], Ⲇ * 3), ᐃ.restore());
		ᐃ.translate(ⲆⲆ.width / 2, ⲆⲆ.height / ᐃⲆᐃⵠ);
		if (!Δᐃ) {
			ᐃ.globalAlpha = .5;
			ᐃᐃᐃ(ᐃ, -ⲆⲆⲆⵠΔ, -ⵠᐃⵠⵠⵠ, ᐃΔⲆⲆΔ, ᐃⲆΔΔⵠ + ⵠⲆⲆΔ, ΔⲆⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ]);
			if (ⲆⵠΔ) ᐃ.rotate(Math.PI);
			ᐃ.globalAlpha = 1;
			ᐃᐃᐃ(ᐃ, -ⲆⲆⲆⵠΔ, -ⵠᐃⵠⵠⵠ, ᐃΔⲆⲆΔ, ᐃⲆΔΔⵠ, ΔⲆⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆᐃᐃΔ], ⲆⲆⵠ);
			ᐃ.globalAlpha = 1;
			ᐃᐃᐃ(ᐃ, -ⲆⲆⲆⵠΔ + Ⲇ * 35, -ⵠᐃⵠⵠⵠ + ΔΔᐃⲆΔ * Ⲇ, ᐃΔⲆⲆΔ - 50 * Ⲇ, ᐃⲆΔΔⵠ - 50 * Ⲇ, ΔⲆⵠⵠ - Ⲇ * 10);
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆΔ])
		}
		if (ⵠΔⲆΔΔ == Δᐃ) {
			ᐃ.translate(-ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(121 * Ⲇ, 190 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 129, 186 * Ⲇ, 137 * Ⲇ, 183 * Ⲇ, Ⲇ * 135, 163 * Ⲇ);
			ᐃ.bezierCurveTo(131 * Ⲇ, 135 * Ⲇ, 153 * Ⲇ, Ⲇ * 127, 177 * Ⲇ, Ⲇ * 124);
			ᐃ.bezierCurveTo(Ⲇ * 198, Ⲇ * 120, Ⲇ * 208, 122 * Ⲇ, 226 * Ⲇ, 128 * Ⲇ);
			ᐃ.bezierCurveTo(261 * Ⲇ, Ⲇ * 112, Ⲇ * 271, Ⲇ * 126, Ⲇ * 287, Ⲇ * 147);
			ᐃ.bezierCurveTo(310 * Ⲇ, 163 * Ⲇ, Ⲇ * 304, Ⲇ * 183, Ⲇ * 283, 196 * Ⲇ);
			ᐃ.bezierCurveTo(296 * Ⲇ, 249 * Ⲇ, 278 * Ⲇ, Ⲇ * 262, Ⲇ * 253, 263 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 210, 264 * Ⲇ, 188 * Ⲇ, Ⲇ * 252, 177 * Ⲇ, Ⲇ * 234);
			ᐃ.bezierCurveTo(Ⲇ * 133, Ⲇ * 242, 123 * Ⲇ, Ⲇ * 241, Ⲇ * 115, Ⲇ * 225);
			ᐃ.bezierCurveTo(Ⲇ * 109, 206 * Ⲇ, 115 * Ⲇ, Ⲇ * 193, Ⲇ * 121, Ⲇ * 190);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(219 * Ⲇ, Ⲇ * 144);
			ᐃ.bezierCurveTo(251 * Ⲇ, 121 * Ⲇ, Ⲇ * 277, 136 * Ⲇ, 276 * Ⲇ, Ⲇ * 159);
			ᐃ.bezierCurveTo(276 * Ⲇ, 176 * Ⲇ, 273 * Ⲇ, Ⲇ * 191, Ⲇ * 242, 193 * Ⲇ);
			ᐃ.bezierCurveTo(226 * Ⲇ, Ⲇ * 228, 155 * Ⲇ, 219 * Ⲇ, Ⲇ * 150, 183 * Ⲇ);
			ᐃ.bezierCurveTo(142 * Ⲇ, Ⲇ * 144, 174 * Ⲇ, 127 * Ⲇ, Ⲇ * 219, Ⲇ * 144);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔⲆ]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 123, Ⲇ * 214);
			ᐃ.bezierCurveTo(119 * Ⲇ, Ⲇ * 198, 129 * Ⲇ, 189 * Ⲇ, 146 * Ⲇ, 194 * Ⲇ);
			ᐃ.bezierCurveTo(158 * Ⲇ, 201 * Ⲇ, 165 * Ⲇ, 218 * Ⲇ, 147 * Ⲇ, Ⲇ * 226);
			ᐃ.bezierCurveTo(Ⲇ * 135, Ⲇ * 230, 125 * Ⲇ, Ⲇ * 222, 123 * Ⲇ, 214 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[5]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 257, 199 * Ⲇ);
			ᐃ.bezierCurveTo(264 * Ⲇ, 199 * Ⲇ, Ⲇ * 275, 213 * Ⲇ, Ⲇ * 261, Ⲇ * 220);
			ᐃ.bezierCurveTo(246 * Ⲇ, 225 * Ⲇ, Ⲇ * 235, 200 * Ⲇ, 257 * Ⲇ, 199 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[5]);
			ᐃ.translate(-ΔⵠⲆᐃⵠ * Ⲇ, 55 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(186 * Ⲇ, 123 * Ⲇ);
			ᐃ.bezierCurveTo(198 * Ⲇ, 115 * Ⲇ, 219 * Ⲇ, 110 * Ⲇ, Ⲇ * 219, Ⲇ * 123);
			ᐃ.bezierCurveTo(Ⲇ * 216, Ⲇ * 135, Ⲇ * 171, 143 * Ⲇ, Ⲇ * 186, Ⲇ * 123);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[Δᐃⵠᐃ]);
			ᐃ.translate(ΔⲆΔᐃⵠ * Ⲇ, -55 * Ⲇ);
			ᐃ.translate(Ⲇ * -5, ⲆⲆᐃⵠΔ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 171, 241 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 189, 234 * Ⲇ, 200 * Ⲇ, 248 * Ⲇ, 189 * Ⲇ, Ⲇ * 254);
			ᐃ.bezierCurveTo(179 * Ⲇ, Ⲇ * 260, Ⲇ * 158, Ⲇ * 246, 171 * Ⲇ, 241 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[5])
		} else ᐃᐃⲆⵠ == Δᐃ && (ᐃ.translate(-ⲆⲆ.width / ⲆⲆΔΔ, -ⲆⲆ.height / ᐃⵠΔⲆ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(30 * Ⲇ, Ⲇ * 167), ᐃ.bezierCurveTo(Ⲇ * 47, 144 * Ⲇ, 64 * Ⲇ, 140 * Ⲇ, Ⲇ * 80, Ⲇ * 147), ᐃ.bezierCurveTo(Ⲇ * 95, 154 * Ⲇ, 95 * Ⲇ, Ⲇ * 159, ⵠⲆᐃⵠⲆ * Ⲇ, Ⲇ * 179), ᐃ.bezierCurveTo(105 * Ⲇ, Ⲇ * 202, 95 * Ⲇ, Ⲇ * 218, Ⲇ * 69, 218 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 48, Ⲇ * 236, Ⲇ * 26, 223 * Ⲇ, Ⲇ * 28, 213 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 28, Ⲇ * 205, 29 * Ⲇ, Ⲇ * 199, 32 * Ⲇ, Ⲇ * 195), ᐃ.bezierCurveTo(21 * Ⲇ, 183 * Ⲇ, Ⲇ * 27, Ⲇ * 173, 30 * Ⲇ, 167 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆᐃ]), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 26, 145 * Ⲇ), ᐃ.bezierCurveTo(32 * Ⲇ, 138 * Ⲇ, 37 * Ⲇ, Ⲇ * 137, 40 * Ⲇ, Ⲇ * 139), ᐃ.bezierCurveTo(43 * Ⲇ, 140 * Ⲇ, 41 * Ⲇ, Ⲇ * 150, Ⲇ * 31, Ⲇ * 159), ᐃ.bezierCurveTo(23 * Ⲇ, Ⲇ * 166, Ⲇ * ⲆⲆΔⲆᐃΔⲆ, 158 * Ⲇ, Ⲇ * 26, Ⲇ * 145), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[4]), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * ⲆᐃⵠΔΔᐃⲆ, 193 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 21, 187 * Ⲇ, Ⲇ * 30, 190 * Ⲇ, 20 * Ⲇ, 202 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * ΔᐃⲆⲆⲆΔΔ, 208 * Ⲇ, ᐃⵠⵠΔᐃΔᐃ * Ⲇ, 202 * Ⲇ, Ⲇ * 13, 193 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔⲆΔ]), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 121, 190 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 129, 186 * Ⲇ, Ⲇ * 137, 183 * Ⲇ, Ⲇ * 135, Ⲇ * 163), ᐃ.bezierCurveTo(131 * Ⲇ, 135 * Ⲇ, Ⲇ * 153, 127 * Ⲇ, 177 * Ⲇ, 124 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 198, Ⲇ * 120, 208 * Ⲇ, Ⲇ * 122, 226 * Ⲇ, Ⲇ * 128), ᐃ.bezierCurveTo(Ⲇ * 261, 112 * Ⲇ, 271 * Ⲇ, 126 * Ⲇ, 287 * Ⲇ, Ⲇ * 147), ᐃ.bezierCurveTo(310 * Ⲇ, 163 * Ⲇ, 304 * Ⲇ, Ⲇ * 183, 283 * Ⲇ, Ⲇ * 196), ᐃ.bezierCurveTo(Ⲇ * 296, 249 * Ⲇ, Ⲇ * 278, Ⲇ * 262, 253 * Ⲇ, 263 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 210, 264 * Ⲇ, Ⲇ * 188, Ⲇ * 252, Ⲇ * 177, 234 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 133, Ⲇ * 242, 123 * Ⲇ, Ⲇ * 241, Ⲇ * 115, Ⲇ * 225), ᐃ.bezierCurveTo(109 * Ⲇ, Ⲇ * 206, 115 * Ⲇ, Ⲇ * 193, 121 * Ⲇ, 190 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[4]), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 335, Ⲇ * 196), ᐃ.bezierCurveTo(Ⲇ * 312, Ⲇ * 208, 300 * Ⲇ, Ⲇ * 185, Ⲇ * 309, 167 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 314, 141 * Ⲇ, 339 * Ⲇ, Ⲇ * 127, Ⲇ * 359, 144 * Ⲇ), ᐃ.bezierCurveTo(363 * Ⲇ, Ⲇ * 148, 364 * Ⲇ, 150 * Ⲇ, Ⲇ * 364, Ⲇ * 150), ᐃ.bezierCurveTo(392 * Ⲇ, 143 * Ⲇ, 396 * Ⲇ, 183 * Ⲇ, Ⲇ * 378, 204 * Ⲇ), ᐃ.bezierCurveTo(367 * Ⲇ, Ⲇ * 215, 339 * Ⲇ, 208 * Ⲇ, 335 * Ⲇ, Ⲇ * 196), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[4]), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(349 * Ⲇ, Ⲇ * 212), ᐃ.bezierCurveTo(Ⲇ * 339, 216 * Ⲇ, Ⲇ * 334, 208 * Ⲇ, 341 * Ⲇ, Ⲇ * 203), ᐃ.bezierCurveTo(353 * Ⲇ, 198 * Ⲇ, Ⲇ * 361, 205 * Ⲇ, Ⲇ * 349, 212 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[4]), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 46, 165 * Ⲇ), ᐃ.bezierCurveTo(55 * Ⲇ, Ⲇ * 148, 85 * Ⲇ, Ⲇ * 157, 83 * Ⲇ, 175 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 99, Ⲇ * 185, Ⲇ * 89, 212 * Ⲇ, 66 * Ⲇ, 204 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 55, Ⲇ * 212, Ⲇ * 43, Ⲇ * 212, Ⲇ * 41, Ⲇ * 202), ᐃ.bezierCurveTo(Ⲇ * 39, 194 * Ⲇ, 42 * Ⲇ, 187 * Ⲇ, Ⲇ * 49, Ⲇ * 185), ᐃ.bezierCurveTo(Ⲇ * 44, 175 * Ⲇ, Ⲇ * 45, 172 * Ⲇ, 46 * Ⲇ, 165 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[4]), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(219 * Ⲇ, Ⲇ * 144), ᐃ.bezierCurveTo(Ⲇ * 251, 121 * Ⲇ, Ⲇ * 277, Ⲇ * 136, 276 * Ⲇ, Ⲇ * 159), ᐃ.bezierCurveTo(276 * Ⲇ, Ⲇ * 176, Ⲇ * 273, Ⲇ * 191, 242 * Ⲇ, 193 * Ⲇ), ᐃ.bezierCurveTo(226 * Ⲇ, Ⲇ * 228, Ⲇ * 155, 219 * Ⲇ, Ⲇ * 150, Ⲇ * 183), ᐃ.bezierCurveTo(Ⲇ * 142, Ⲇ * 144, Ⲇ * 174, 127 * Ⲇ, Ⲇ * 219, Ⲇ * 144), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔⲆ]), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 123, Ⲇ * 214), ᐃ.bezierCurveTo(Ⲇ * 119, 198 * Ⲇ, 129 * Ⲇ, Ⲇ * 189, 146 * Ⲇ, Ⲇ * 194), ᐃ.bezierCurveTo(158 * Ⲇ, Ⲇ * 201, 165 * Ⲇ, 218 * Ⲇ, Ⲇ * 147, 226 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 135, Ⲇ * 230, 125 * Ⲇ, 222 * Ⲇ, Ⲇ * 123, Ⲇ * 214), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[5]), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 257, Ⲇ * 199), ᐃ.bezierCurveTo(264 * Ⲇ, 199 * Ⲇ, 275 * Ⲇ, 213 * Ⲇ, Ⲇ * 261, 220 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 246, 225 * Ⲇ, 235 * Ⲇ, 200 * Ⲇ, 257 * Ⲇ, 199 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔⲆ]), ᐃ.translate(-5 * Ⲇ, Ⲇ * 55), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 186, Ⲇ * 123), ᐃ.bezierCurveTo(Ⲇ * 198, 115 * Ⲇ, 219 * Ⲇ, 110 * Ⲇ, 219 * Ⲇ, 123 * Ⲇ), ᐃ.bezierCurveTo(216 * Ⲇ, Ⲇ * 135, Ⲇ * 171, 143 * Ⲇ, 186 * Ⲇ, Ⲇ * 123), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[5]), ᐃ.translate(Ⲇ * ⵠⵠΔΔⲆ, Ⲇ * -55), ᐃ.translate(Ⲇ * -5, Ⲇ * 15), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(171 * Ⲇ, Ⲇ * 241), ᐃ.bezierCurveTo(Ⲇ * 189, Ⲇ * 234, 200 * Ⲇ, 248 * Ⲇ, Ⲇ * 189, 254 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 179, Ⲇ * 260, 158 * Ⲇ, 246 * Ⲇ, Ⲇ * 171, Ⲇ * 241), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃᐃⵠᐃ]), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 367, Ⲇ * 164), ᐃ.bezierCurveTo(380 * Ⲇ, Ⲇ * 160, Ⲇ * 391, Ⲇ * 185, Ⲇ * 371, Ⲇ * 189), ᐃ.bezierCurveTo(Ⲇ * 362, Ⲇ * 192, Ⲇ * 354, Ⲇ * 191, 350 * Ⲇ, 185 * Ⲇ), ᐃ.bezierCurveTo(326 * Ⲇ, Ⲇ * 205, Ⲇ * 314, Ⲇ * 182, Ⲇ * 316, Ⲇ * 171), ᐃ.bezierCurveTo(Ⲇ * 317, Ⲇ * 150, 332 * Ⲇ, 143 * Ⲇ, Ⲇ * 347, Ⲇ * 147), ᐃ.bezierCurveTo(361 * Ⲇ, Ⲇ * 151, Ⲇ * 366, Ⲇ * 158, 367 * Ⲇ, 164 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[4]));
		return ⲆⲆ
	}

	function ⵠᐃⵠΔΔⵠΔ(ⵠΔⲆΔΔΔΔ, ⲆⵠᐃᐃⵠⲆⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Math.max(ⲆⵠᐃᐃⵠⲆⲆ.width, ⵠΔⲆΔΔΔΔ.width);
		var ⲆΔΔ = Math.max(ⲆⵠᐃᐃⵠⲆⲆ.height, ⵠΔⲆΔΔΔΔ.height);
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.drawImage(ⵠΔⲆΔΔΔΔ, (Δⵠᐃ - ⵠΔⲆΔΔΔΔ.width) / 2, (ⲆΔΔ - ⵠΔⲆΔΔΔΔ.height) / 2);
		ᐃ.drawImage(ⲆⵠᐃᐃⵠⲆⲆ, (Δⵠᐃ - ⲆⵠᐃᐃⵠⲆⲆ.width) / ᐃΔⲆⵠ, (ⲆΔΔ - ⲆⵠᐃᐃⵠⲆⲆ.height) / 2);
		return ⲆⲆ
	}

	function ΔᐃⵠᐃΔᐃⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 40 * Ⲇ;
		var ⲆΔΔ = 40 * Ⲇ;
		var ⵠᐃⵠ = Ⲇ * ⲆⵠⲆᐃᐃΔⵠ;
		var ⲆⲆⵠ = ΔᐃΔⲆΔ * Ⲇ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(Δⵠᐃ / 2, ⲆΔΔ / ΔⲆᐃⲆ);
		ᐃ.globalAlpha = ΔⲆΔᐃ;
		ᐃΔⵠ(ᐃ, 0, 0, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ], ᐃⲆ[ⵠΔΔ], ⲆⲆⵠ);
		return ⲆⲆ
	}

	function ᐃⲆᐃⲆᐃⲆⲆ(Ⲇ, ᐃⲆ, ⲆⵠΔ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 450 * Ⲇ;
		var ⲆΔΔ = Ⲇ * 145;
		var w2 = Δⵠᐃ / 2;
		var ᐃᐃⲆᐃⵠ = ⲆΔΔ / 2;
		var ΔⲆⵠⵠ = Ⲇ * ⲆⵠΔΔⵠ;
		var ⵠⲆⲆΔ = 20 * Ⲇ;
		var ᐃΔⲆⲆΔ = Ⲇ * 300;
		var ᐃⲆΔΔⵠ = 30 * Ⲇ;
		var ⵠᐃⵠ = 80 * Ⲇ;
		var ⲆⲆⲆⵠΔ = ᐃΔⲆⲆΔ / Ⲇⵠᐃⵠ;
		var ⵠᐃⵠⵠⵠ = ᐃⲆΔΔⵠ / 2;
		var ⲆⲆⵠ = 4;
		if (ⲆⵠΔ) {
			var Δⵠᐃ = 145 * Ⲇ;
			var ⲆΔΔ = 450 * Ⲇ;
			ⲆⲆ.width = Δⵠᐃ;
			ⲆⲆ.height = ⲆΔΔ;
			ᐃ.rotate(Math.PI / ⲆⲆΔΔ);
			ᐃ.save();
			ᐃ.globalAlpha = .5;
			ᐃᐃᐃ(ᐃ, Δᐃⵠⵠⵠ * Ⲇ, -110 * Ⲇ, ᐃΔⲆⲆΔ, ᐃⲆΔΔⵠ, ΔⲆⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.translate(Ⲇ * 178, Ⲇ * -98);
			ᐃᐃᐃ(ᐃ, -ⲆⲆⲆⵠΔ, -ⵠᐃⵠⵠⵠ - Ⲇ * 6, 100 * Ⲇ, ⵠᐃⵠⲆⵠ * Ⲇ, ΔⲆⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ]);
			ᐃ.translate(-50 * Ⲇ, ⲆΔⲆⲆ * Ⲇ);
			ᐃᐃᐃ(ᐃ, Ⲇ * 220, -15 * Ⲇ, 90 * Ⲇ, Ⲇ * 90, ΔⲆⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ]);
			ᐃ.restore();
			ᐃ.save();
			ᐃ.globalAlpha = ΔΔⲆΔ;
			ᐃ.translate(250 * Ⲇ, Ⲇ * -63);
			ᐃᐃᐃ(ᐃ, -ⲆⲆⲆⵠΔ - Ⲇ * 20, -ⵠᐃⵠⵠⵠ, ᐃΔⲆⲆΔ, ᐃⲆΔΔⵠ, ΔⲆⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ], ᐃⲆ[2], ⲆⲆⵠ);
			ᐃ.translate(Ⲇ * -70, -40 * Ⲇ);
			ᐃᐃᐃ(ᐃ, -ⲆⲆⲆⵠΔ - ⵠΔⲆΔⵠ * Ⲇ, -ⵠᐃⵠⵠⵠ, ᐃᐃⲆⵠΔ * Ⲇ, Ⲇ * 100, ΔⲆⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔⵠ], ᐃⲆ[4], ⲆⲆⵠ);
			ᐃ.translate(Ⲇ * -70, 15 * Ⲇ);
			ᐃᐃᐃ(ᐃ, Ⲇ * 220, Ⲇ * -22, Ⲇ * 90, 90 * Ⲇ, ΔⲆⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔⵠ], ᐃⲆ[ⲆⲆᐃΔᐃ], ⲆⲆⵠ);
			ᐃᐃᐃ(ᐃ, 230 * Ⲇ, Ⲇ * -ⵠᐃΔⵠᐃ, Ⲇ * 55, 55 * Ⲇ, ΔⲆⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[5]);
			ᐃ.translate(-70 * Ⲇ, 0);
			ᐃᐃᐃ(ᐃ, Ⲇ * -15, Ⲇ * -ΔᐃΔⲆ, Ⲇ * 60, Ⲇ * 60, ΔⲆⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠᐃⲆ]);
			ᐃ.restore()
		} else {
			ⲆⲆ.width = Δⵠᐃ;
			ⲆⲆ.height = ⲆΔΔ;
			ᐃ.save();
			ᐃ.globalAlpha = .5;
			ᐃ.translate(w2, ᐃᐃⲆᐃⵠ + ⲆΔⵠᐃⲆ * Ⲇ);
			ᐃᐃᐃ(ᐃ, -ⲆⲆⲆⵠΔ, -ⵠᐃⵠⵠⵠ, ᐃΔⲆⲆΔ, ᐃⲆΔΔⵠ, ΔⲆⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]);
			ᐃ.translate(-65 * Ⲇ, Ⲇ * -25);
			ᐃᐃᐃ(ᐃ, -ⲆⲆⲆⵠΔ, -ⵠᐃⵠⵠⵠ - ⵠⲆⲆΔᐃⲆⵠ * Ⲇ, ᐃⵠⲆⲆⲆ * Ⲇ, Ⲇ * ⵠⲆΔᐃΔ, Ⲇ * ΔᐃⲆⲆⲆ);
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.translate(-35 * Ⲇ, -5 * Ⲇ);
			ᐃᐃᐃ(ᐃ, 220 * Ⲇ, -15 * Ⲇ, Ⲇ * 90, 90 * Ⲇ, Ⲇ * ⲆⲆᐃⵠΔ);
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.restore();
			ᐃ.save();
			ᐃ.globalAlpha = ⲆⵠΔⲆ;
			ᐃ.translate(Ⲇ * 240, Ⲇ * 70);
			ᐃᐃᐃ(ᐃ, -ⲆⲆⲆⵠΔ, -ⵠᐃⵠⵠⵠ, ᐃΔⲆⲆΔ, ᐃⲆΔΔⵠ, ΔⲆⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⵠΔᐃⵠ], ⲆⲆⵠ);
			ᐃ.translate(Ⲇ * -60, -40 * Ⲇ);
			ᐃᐃᐃ(ᐃ, -ⲆⲆⲆⵠΔ - 20 * Ⲇ, -ⵠᐃⵠⵠⵠ, ᐃΔⵠⵠⵠ * Ⲇ, ⵠⲆⲆⵠⲆ * Ⲇ, Ⲇ * 15);
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠⵠ], ᐃⲆ[ⲆⲆᐃΔᐃ], ⲆⲆⵠ);
			ᐃ.translate(Ⲇ * -55, Ⲇ * 10);
			ᐃᐃᐃ(ᐃ, 220 * Ⲇ, -22 * Ⲇ, 90 * Ⲇ, 90 * Ⲇ, 15 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔᐃⲆ], ᐃⲆ[ⵠΔΔⵠ], ⲆⲆⵠ);
			ᐃᐃᐃ(ᐃ, 240 * Ⲇ, Ⲇ * -ⲆⲆⲆΔΔΔⵠ, Ⲇ * 55, 55 * Ⲇ, Ⲇ * 12);
			ᐃⵠ(ᐃ, ᐃⲆ[5]);
			ᐃ.translate(45 * Ⲇ, ⵠᐃⵠⵠ * Ⲇ);
			ᐃᐃᐃ(ᐃ, -145 * Ⲇ, Ⲇ * -2, Ⲇ * 60, Ⲇ * 60, ᐃⲆⵠⵠΔ * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[5]);
			ᐃ.restore()
		}
		return ⲆⲆ
	}

	function ᐃΔⲆⲆᐃΔⵠ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 220;
		var ⲆΔΔ = 220 * Ⲇ;
		var ⵠᐃⵠ = 32 * Ⲇ;
		var ⲆⲆⵠ = Ⲇ * ᐃᐃᐃΔⵠ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(Δⵠᐃ / 2, ⲆΔΔ / 2 + Ⲇ * 10);
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, 0, 0, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ], ᐃⲆ[ⵠⲆΔⵠ]);
		ᐃ.translate(ᐃⲆⵠΔ, Ⲇ * -ᐃⵠΔⲆΔΔⵠ);
		ᐃ.globalAlpha = ⵠⲆⲆⲆ;
		ᐃΔⵠ(ᐃ, 0, 0, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃ], ᐃⲆ[ᐃᐃᐃᐃ], ⲆⲆⵠ);
		return ⲆⲆ
	}

	function ᐃᐃΔⲆΔⵠΔ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 145 * Ⲇ;
		var ⲆΔΔ = Ⲇ * 145;
		var ΔΔ = Δⵠᐃ / 2;
		var ΔΔⵠ = ⲆΔΔ / 2;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		var ⵠᐃⵠ = Ⲇ * 70;
		ᐃ.translate(ΔΔ, ΔΔⵠ);
		ᐃ.globalAlpha = .4;
		ᐃΔⵠ(ᐃ, 0, 0, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ]);
		var ⵠᐃⵠ = 50 * Ⲇ;
		ᐃ.translate(0, ⲆᐃⲆ);
		ᐃ.globalAlpha = .8;
		ᐃΔⵠ(ᐃ, ⵠⲆⵠ, 0, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		var ⵠᐃⵠ = Ⲇ * 35;
		ᐃ.translate(ⵠⲆᐃ, ⵠᐃⵠⵠ);
		ᐃ.globalAlpha = .8;
		ᐃΔⵠ(ᐃ, Ⲇᐃⵠⵠ, 0, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		var ⵠᐃⵠ = Ⲇ * ᐃΔⲆΔᐃ;
		ᐃ.translate(0, 0);
		ᐃ.globalAlpha = .8;
		ᐃΔⵠ(ᐃ, ᐃΔΔ, 0, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		return ⲆⲆ
	}

	function ⲆΔⵠⲆⵠⵠΔ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 193;
		var ⲆΔΔ = 198 * Ⲇ;
		var ΔΔ = Ⲇ * 140;
		var ΔΔⵠ = Ⲇ * 90;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		var ΔⲆⵠⵠ = Ⲇ * ᐃⲆⵠΔΔ;
		var ⵠⲆⲆΔⲆ = 25 * Ⲇ;
		var ⲆΔΔΔⲆ = 180 * Ⲇ;
		var ΔΔΔⵠᐃ = ⵠⲆⲆΔⲆ / ᐃⵠΔⲆ;
		var ⲆⲆⲆᐃⲆ = ⲆΔΔΔⲆ / ⲆᐃⵠⲆ;
		var ⲆⲆⵠ = Ⲇ * 4;
		ᐃ.translate(Ⲇ * -25, Ⲇ * 1);
		ᐃ.translate(ΔΔ, ΔΔⵠ);
		ᐃ.rotate(-Math.PI / 5);
		ᐃᐃᐃ(ᐃ, -ΔΔΔⵠᐃ, -ⲆⲆⲆᐃⲆ, ⵠⲆⲆΔⲆ, ⲆΔΔΔⲆ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠ], ᐃⲆ[1], ⲆⲆⵠ);
		ᐃ.translate(-30 * Ⲇ, -25 * Ⲇ);
		ᐃ.rotate(Math.PI / 3);
		ᐃᐃᐃ(ᐃ, -ΔΔΔⵠᐃ, -ⲆⲆⲆᐃⲆ, ⵠⲆⲆΔⲆ, ⲆΔΔΔⲆ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ], ᐃⲆ[1], ⲆⲆⵠ);
		ᐃ.translate(Ⲇ * 35, 30 * Ⲇ);
		ᐃ.rotate(Math.PI / ᐃⵠⲆⵠ);
		ᐃᐃᐃ(ᐃ, -ΔΔΔⵠᐃ, -ⲆⲆⲆᐃⲆ, ⵠⲆⲆΔⲆ, ⲆΔΔΔⲆ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ], ᐃⲆ[ⵠΔΔ], ⲆⲆⵠ);
		return ⲆⲆ
	}

	function ΔΔΔᐃⵠᐃᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 155;
		ⲆⲆ.height = Ⲇ * 127;
		ᐃ.globalAlpha = .5;
		ᐃ.translate(0, Ⲇ * ΔΔⵠⵠⵠ);
		ᐃ.translate(-ⲆΔΔᐃΔ * Ⲇ, Ⲇ * -ⲆΔⲆΔᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 55, Ⲇ * 68);
		ᐃ.bezierCurveTo(86 * Ⲇ, 64 * Ⲇ, 117 * Ⲇ, 66 * Ⲇ, 134 * Ⲇ, 68 * Ⲇ);
		ᐃ.bezierCurveTo(152 * Ⲇ, 69 * Ⲇ, 165 * Ⲇ, 86 * Ⲇ, Ⲇ * 152, 104 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 146, 87 * Ⲇ, Ⲇ * 122, Ⲇ * 89, Ⲇ * 98, 90 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 64, 89 * Ⲇ, 41 * Ⲇ, 91 * Ⲇ, Ⲇ * 36, 106 * Ⲇ);
		ᐃ.bezierCurveTo(19 * Ⲇ, 92 * Ⲇ, Ⲇ * 31, Ⲇ * 71, Ⲇ * 54, 69 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⵠΔΔ;
		ᐃ.translate(0, Ⲇ * -ΔΔⲆⵠⵠ);
		ᐃ.translate(Ⲇ * 7, 20 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 24, Ⲇ * 28);
		ᐃ.bezierCurveTo(39 * Ⲇ, Ⲇ * 30, 37 * Ⲇ, Ⲇ * 31, 40 * Ⲇ, 32 * Ⲇ);
		ᐃ.bezierCurveTo(22 * Ⲇ, Ⲇ * 45, Ⲇ * 26, 58 * Ⲇ, 29 * Ⲇ, 66 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 86.5, Ⲇ * 65, 86.5 * Ⲇ, 65 * Ⲇ, 144 * Ⲇ, 64 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 151, 42 * Ⲇ, Ⲇ * 132, Ⲇ * 20, Ⲇ * 120, ⲆᐃΔᐃⲆᐃⵠ * Ⲇ);
		ᐃ.bezierCurveTo(106 * Ⲇ, Ⲇ * ᐃⲆⵠΔⵠ, Ⲇ * 89, 0 * Ⲇ, Ⲇ * 73, Ⲇ * 3);
		ᐃ.bezierCurveTo(Ⲇ * 51, 5 * Ⲇ, 36 * Ⲇ, Ⲇ * ⲆⲆᐃᐃᐃ, 25 * Ⲇ, 28 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆ], ᐃⲆ[ⵠΔᐃⵠ], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 30, 41 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 49, Ⲇ * 31, 53 * Ⲇ, 29 * Ⲇ, 62 * Ⲇ, Ⲇ * 27);
		ᐃ.bezierCurveTo(Ⲇ * 59, 24 * Ⲇ, Ⲇ * 56, Ⲇ * 25, 53 * Ⲇ, Ⲇ * 24);
		ᐃ.bezierCurveTo(67 * Ⲇ, 15 * Ⲇ, Ⲇ * 84, Ⲇ * 12, Ⲇ * 120, Ⲇ * ᐃⵠⵠⲆⲆ);
		ᐃ.bezierCurveTo(Ⲇ * 107, Ⲇ * 11, 96 * Ⲇ, 6 * Ⲇ, 85 * Ⲇ, Ⲇ * ⵠΔᐃⵠ);
		ᐃ.bezierCurveTo(59 * Ⲇ, Ⲇ * 3, Ⲇ * 54, Ⲇ * 7, 40 * Ⲇ, Ⲇ * ⲆᐃⵠⲆΔΔⵠ);
		ᐃ.bezierCurveTo(Ⲇ * 32.5, Ⲇ * 22.5, 32.5 * Ⲇ, 22.5 * Ⲇ, Ⲇ * 25, 28 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 32, Ⲇ * 30, Ⲇ * 32, 30 * Ⲇ, Ⲇ * 39, Ⲇ * 32);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(24 * Ⲇ, Ⲇ * 28);
		ᐃ.bezierCurveTo(Ⲇ * 39, 30 * Ⲇ, Ⲇ * 37, 31 * Ⲇ, Ⲇ * 40, 32 * Ⲇ);
		ᐃ.bezierCurveTo(22 * Ⲇ, 45 * Ⲇ, 26 * Ⲇ, 58 * Ⲇ, Ⲇ * 29, Ⲇ * 66);
		ᐃ.bezierCurveTo(86.5 * Ⲇ, Ⲇ * 65, 86.5 * Ⲇ, 65 * Ⲇ, Ⲇ * 144, Ⲇ * 64);
		ᐃ.bezierCurveTo(151 * Ⲇ, 42 * Ⲇ, 132 * Ⲇ, Ⲇ * ⲆᐃⲆⵠᐃᐃⵠ, 120 * Ⲇ, Ⲇ * ᐃᐃⵠᐃⵠᐃᐃ);
		ᐃ.bezierCurveTo(Ⲇ * 106, ⲆⲆᐃΔⵠΔⲆ * Ⲇ, 89 * Ⲇ, 0 * Ⲇ, Ⲇ * 73, Ⲇⵠᐃᐃ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 51, Ⲇ * 5, Ⲇ * 36, ΔⲆᐃⲆⲆ * Ⲇ, 25 * Ⲇ, 28 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆⲆᐃⲆ], ⲆⵠⵠⲆ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 18, 38 * Ⲇ, Ⲇ * 14.866068747318506);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⲆⵠ], ᐃⲆ[ⲆⲆⵠᐃⲆ], Ⲇ * ⲆΔⲆᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(39 * Ⲇ, 30 * Ⲇ);
		ᐃ.bezierCurveTo(27 * Ⲇ, 38 * Ⲇ, 25 * Ⲇ, Ⲇ * 50, Ⲇ * 26, 60 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 36.5, Ⲇ * 58.5, 36.5 * Ⲇ, Ⲇ * 58.5, Ⲇ * 47, 57 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * ⲆⵠⲆⲆⲆ);
		ᐃ.translate(-7 * Ⲇ, Ⲇ * -20);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 27, 74 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 38, Ⲇ * 77.5, 38 * Ⲇ, 77.5 * Ⲇ, Ⲇ * 49, Ⲇ * 81);
		ᐃ.bezierCurveTo(Ⲇ * 54.5, Ⲇ * 75.5, Ⲇ * 54.5, 75.5 * Ⲇ, Ⲇ * 60, Ⲇ * 70);
		ᐃ.bezierCurveTo(64 * Ⲇ, 72 * Ⲇ, 64 * Ⲇ, 72 * Ⲇ, Ⲇ * 68, 74 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 80.5, 67.5 * Ⲇ, Ⲇ * 80.5, 67.5 * Ⲇ, 93 * Ⲇ, Ⲇ * 61);
		ᐃ.bezierCurveTo(104.5 * Ⲇ, 68 * Ⲇ, Ⲇ * 104.5, 68 * Ⲇ, 116 * Ⲇ, 75 * Ⲇ);
		ᐃ.bezierCurveTo(120.5 * Ⲇ, Ⲇ * 72.5, Ⲇ * 120.5, 72.5 * Ⲇ, Ⲇ * 125, 70 * Ⲇ);
		ᐃ.bezierCurveTo(129 * Ⲇ, Ⲇ * 75, Ⲇ * 129, 75 * Ⲇ, Ⲇ * 133, 80 * Ⲇ);
		ᐃ.bezierCurveTo(145.5 * Ⲇ, Ⲇ * 76.5, Ⲇ * 145.5, Ⲇ * 76.5, 158 * Ⲇ, Ⲇ * 73);
		ᐃ.bezierCurveTo(158 * Ⲇ, Ⲇ * 87, 158 * Ⲇ, 93 * Ⲇ, Ⲇ * 155, Ⲇ * 95);
		ᐃ.bezierCurveTo(Ⲇ * 152.5, 96 * Ⲇ, 152.5 * Ⲇ, 96 * Ⲇ, 150 * Ⲇ, 97 * Ⲇ);
		ᐃ.bezierCurveTo(121 * Ⲇ, Ⲇ * 85, 108 * Ⲇ, 86 * Ⲇ, Ⲇ * 93, 85 * Ⲇ);
		ᐃ.bezierCurveTo(64 * Ⲇ, 85 * Ⲇ, Ⲇ * 52, 95 * Ⲇ, Ⲇ * 38, 99 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 36, Ⲇ * 98.5, 36 * Ⲇ, 98.5 * Ⲇ, Ⲇ * 34, 98 * Ⲇ);
		ᐃ.bezierCurveTo(25 * Ⲇ, 98 * Ⲇ, 27 * Ⲇ, Ⲇ * 91, Ⲇ * 27, Ⲇ * 76);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔⲆΔ], ᐃⲆ[ⲆᐃᐃΔΔ], Ⲇ * 6);
		return ⲆⲆ
	}

	function ⲆⲆⵠᐃΔⲆⲆᐃᐃ(Ⲇ, ᐃⲆ, ⲆⵠΔ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ᐃ.rotate(Math.PI / Δⵠᐃᐃ)
	}

	function ⵠⲆᐃⵠᐃΔΔ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 205;
		var ⲆΔΔ = Ⲇ * 205;
		var ΔΔ = Δⵠᐃ / 2;
		var ΔΔⵠ = ⲆΔΔ / ΔⲆᐃⲆ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		var ⵠᐃⵠ = Ⲇ * 100;
		ᐃ.translate(ΔΔ, ΔΔⵠ);
		ᐃ.globalAlpha = ⵠΔⲆ;
		ᐃΔⵠ(ᐃ, ⲆᐃⲆ, ⵠⲆᐃ, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		return ⲆⲆ
	}

	function ⵠΔⲆᐃΔⲆⵠ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 220;
		var ⲆΔΔ = 220 * Ⲇ;
		var ⵠᐃⵠ = ΔΔⵠᐃⲆ * Ⲇ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(Δⵠᐃ / Ⲇⵠᐃⵠ, ⲆΔΔ / 2);
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, Ⲇᐃⵠⵠ, 0, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔᐃ]);
		ᐃ.globalAlpha = ΔΔⲆΔ;
		return ⲆⲆ
	}

	function ΔᐃⵠᐃⲆⲆᐃ(Ⲇ, ᐃⲆ, Δᐃ, ᐃΔΔⵠⵠⲆΔ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 121;
		ⲆⲆ.height = Ⲇ * 130;
		ᐃ.translate(0, ⲆⲆᐃⵠⲆ * Ⲇ);
		Δᐃ == ⲆΔᐃ && (ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(ΔΔᐃⵠⵠ * Ⲇ, Ⲇ * 23), ᐃ.bezierCurveTo(Ⲇ * 6, 46 * Ⲇ, ᐃΔᐃⲆΔ * Ⲇ, 46 * Ⲇ, Ⲇ * ⵠⲆⲆΔᐃⲆⵠ, Ⲇ * 69), ᐃ.bezierCurveTo(Ⲇ * 21, Ⲇ * 69, 21 * Ⲇ, 69 * Ⲇ, Ⲇ * 36, 69 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 45.5, Ⲇ * 78.5, Ⲇ * 45.5, 78.5 * Ⲇ, 55 * Ⲇ, 88 * Ⲇ), ᐃ.bezierCurveTo(55.5 * Ⲇ, 45.5 * Ⲇ, 55.5 * Ⲇ, 45.5 * Ⲇ, Ⲇ * 56, ⵠᐃⵠΔ * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 47, Ⲇ * ⲆⵠᐃΔΔΔᐃ, Ⲇ * 47, ⵠⵠⲆⵠⲆ * Ⲇ, Ⲇ * 38, 25 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 23, Ⲇ * 25, Ⲇ * 23, 25 * Ⲇ, Ⲇ * 6, 23 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔⲆΔΔ], 13 * Ⲇ));
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ΔΔⲆⵠΔ * Ⲇ, Ⲇ * 23);
		ᐃ.bezierCurveTo(ΔⲆⵠΔΔ * Ⲇ, Ⲇ * 46, Ⲇ * 6, 46 * Ⲇ, 6 * Ⲇ, Ⲇ * 69);
		ᐃ.bezierCurveTo(Ⲇ * 21, 69 * Ⲇ, 21 * Ⲇ, 69 * Ⲇ, 36 * Ⲇ, 69 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 45.5, 78.5 * Ⲇ, 45.5 * Ⲇ, Ⲇ * 78.5, Ⲇ * 55, Ⲇ * 88);
		ᐃ.bezierCurveTo(Ⲇ * 55.5, Ⲇ * 45.5, 55.5 * Ⲇ, Ⲇ * 45.5, 56 * Ⲇ, Ⲇ * 3);
		ᐃ.bezierCurveTo(47 * Ⲇ, 14 * Ⲇ, Ⲇ * 47, 14 * Ⲇ, 38 * Ⲇ, 25 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 23, Ⲇ * 25, 23 * Ⲇ, 25 * Ⲇ, ΔⲆⵠΔΔ * Ⲇ, Ⲇ * 23);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆΔ], ᐃⲆ[ⵠᐃⵠⲆ], Ⲇ * 4);
		if (ᐃΔΔⵠⵠⲆΔ == ⵠΔᐃ) {
			ᐃ.translate(ⵠᐃΔⲆ, Ⲇ * 5);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(67 * Ⲇ, 30 * Ⲇ);
			ᐃ.bezierCurveTo(73 * Ⲇ, 47 * Ⲇ, Ⲇ * 69, 45 * Ⲇ, 67 * Ⲇ, Ⲇ * 58);
			ᐃⵠ(ᐃ, Ⲇᐃⵠⵠⵠ, ᐃⲆ[Ⲇᐃⵠⵠ], Ⲇ * ᐃᐃᐃⵠⵠ);
			ᐃ.translate(ᐃΔΔⵠ, Δⵠⵠ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(70 * Ⲇ, Ⲇ * ᐃⵠⲆΔᐃΔⲆ);
			ᐃ.bezierCurveTo(Ⲇ * 83, 45 * Ⲇ, 76 * Ⲇ, Ⲇ * 55, Ⲇ * 70, Ⲇ * 69);
			ᐃⵠ(ᐃ, ΔΔᐃⵠΔ, ᐃⲆ[ⵠᐃⵠⵠ], Ⲇ * ⵠᐃⵠⲆΔ);
			ᐃ.translate(ᐃΔΔⵠ, Ⲇ * ⵠΔⵠⲆ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(76 * Ⲇ, Ⲇ * 8);
			ᐃ.bezierCurveTo(Ⲇ * 88, Ⲇ * 31, 89 * Ⲇ, Ⲇ * 55, 76 * Ⲇ, Ⲇ * 79);
			ᐃⵠ(ᐃ, ᐃⲆᐃⲆⵠ, ᐃⲆ[ⲆΔⵠΔ], ⲆᐃⲆⲆᐃ * Ⲇ);
			Δᐃᐃ == Δᐃ ? (ᐃ.translate(-6 * Ⲇ, Ⲇ * -ⵠⵠⲆⵠ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(67 * Ⲇ, 30 * Ⲇ), ᐃ.bezierCurveTo(73 * Ⲇ, 47 * Ⲇ, 69 * Ⲇ, Ⲇ * 45, Ⲇ * 67, Ⲇ * 58), ᐃⵠ(ᐃ, undefined, ᐃⲆ[3], 18 * Ⲇ), ᐃ.translate(ᐃⵠⲆⵠ, Ⲇ * 0), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(70 * Ⲇ, 17 * Ⲇ), ᐃ.bezierCurveTo(83 * Ⲇ, 45 * Ⲇ, 76 * Ⲇ, Ⲇ * 55, Ⲇ * 70, 69 * Ⲇ), ᐃⵠ(ᐃ, undefined, ᐃⲆ[3], ΔΔⵠΔⲆΔᐃ * Ⲇ), ᐃ.translate(3, 0 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(76 * Ⲇ, Ⲇ * ⵠΔᐃᐃΔ), ᐃ.bezierCurveTo(88 * Ⲇ, 31 * Ⲇ, Ⲇ * 89, Ⲇ * 55, Ⲇ * 76, Ⲇ * 79), ᐃⵠ(ᐃ, undefined, ᐃⲆ[3], 18 * Ⲇ), ᐃ.translate(-ᐃΔᐃⲆΔ, Ⲇ * 0)) : ᐃ.translate(Ⲇ * -6, -ⵠΔΔΔ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 67, 30 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 73, 47 * Ⲇ, Ⲇ * 69, 45 * Ⲇ, Ⲇ * 67, Ⲇ * 58);
			ᐃⵠ(ᐃ, ᐃΔⵠᐃⵠ, ᐃⲆ[2], Ⲇ * 10);
			ᐃ.translate(3, 0 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 70, Ⲇ * 17);
			ᐃ.bezierCurveTo(Ⲇ * 83, Ⲇ * 45, 76 * Ⲇ, Ⲇ * 55, 70 * Ⲇ, Ⲇ * 69);
			ᐃⵠ(ᐃ, ⵠᐃΔᐃⲆ, ᐃⲆ[ΔⲆᐃⲆ], 10 * Ⲇ);
			ᐃ.translate(ΔⲆΔΔ, Ⲇ * 0);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(76 * Ⲇ, Ⲇ * 8);
			ᐃ.bezierCurveTo(Ⲇ * 88, 31 * Ⲇ, Ⲇ * 89, Ⲇ * 55, 76 * Ⲇ, Ⲇ * 79);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠΔᐃⵠ], Ⲇ * ⲆΔⲆⲆⵠ)
		} else {
			Δᐃ == 1 ? (ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(108 * Ⲇ, 27 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 94, 45.5 * Ⲇ, 94 * Ⲇ, 45.5 * Ⲇ, Ⲇ * 80, 64 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, undefined, ᐃⲆ[3], Ⲇ * ⵠⵠΔⲆᐃⲆΔ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 79, Ⲇ * 30), ᐃ.bezierCurveTo(93 * Ⲇ, 47 * Ⲇ, Ⲇ * 93, Ⲇ * 47, 107 * Ⲇ, Ⲇ * 64), ᐃ.closePath(), ᐃⵠ(ᐃ, undefined, ᐃⲆ[3], Ⲇ * 18)) : (ᐃ.translate(0, Ⲇ * -5), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(108 * Ⲇ, 27 * Ⲇ), ᐃ.bezierCurveTo(94 * Ⲇ, 45.5 * Ⲇ, Ⲇ * 94, Ⲇ * 45.5, 80 * Ⲇ, 64 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ⲆᐃⵠⲆⲆ, ᐃⲆ[0], Ⲇ * ΔᐃⲆΔᐃ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 79, Ⲇ * 30), ᐃ.bezierCurveTo(93 * Ⲇ, Ⲇ * 47, Ⲇ * 93, Ⲇ * 47, Ⲇ * 107, Ⲇ * 64), ᐃ.closePath(), ᐃⵠ(ᐃ, ⵠⲆᐃᐃⲆ, ᐃⲆ[ⵠΔⵠⲆ], 7 * Ⲇ), ᐃ.translate(ΔᐃΔ, Ⲇ * 5));
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(108 * Ⲇ, Ⲇ * 27);
			ᐃ.bezierCurveTo(94 * Ⲇ, 45.5 * Ⲇ, 94 * Ⲇ, Ⲇ * 45.5, Ⲇ * 80, Ⲇ * 64);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃΔⵠᐃⵠ, ᐃⲆ[ᐃⵠΔⲆ], Ⲇ * ⲆⵠΔⲆⵠ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(79 * Ⲇ, 30 * Ⲇ);
			ᐃ.bezierCurveTo(93 * Ⲇ, 47 * Ⲇ, 93 * Ⲇ, 47 * Ⲇ, Ⲇ * 107, Ⲇ * 64);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], 7 * Ⲇ)
		}
		return ⲆⲆ
	}
	const ᐃⲆᐃᐃΔΔⲆ = ΔⲆΔΔΔ;
	var ᐃⵠΔⵠᐃᐃΔ = ⵠΔΔⲆⲆⵠᐃᐃⵠ.console;
	ᐃⵠΔⵠᐃᐃΔ.log = ᐃⵠΔⵠᐃᐃΔ.info = ᐃⵠΔⵠᐃᐃΔ.error = ᐃⵠΔⵠᐃᐃΔ.warn = ᐃⵠΔⵠᐃᐃΔ.debug = ᐃⵠΔⵠᐃᐃΔ.ⲆⵠᐃⵠᐃΔΔΔΔ = ᐃⵠΔⵠᐃᐃΔ.trace = ᐃⵠΔⵠᐃᐃΔ.time = ᐃⵠΔⵠᐃᐃΔ.timeEnd = function() {};

	function ΔΔΔⲆⵠᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 424 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 788;
		ᐃ.translate(Ⲇ * 25, 25 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 193.5, Ⲇ * 602.5);
		ᐃ.rotate(-.12);
		ᐃᐃᐃ(ᐃ, -26.5 * Ⲇ, -97.5 * Ⲇ, Ⲇ * 53, 195 * Ⲇ, Ⲇ * 25);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 137, 519 * Ⲇ);
		ᐃ.bezierCurveTo(182 * Ⲇ, 513 * Ⲇ, 182 * Ⲇ, 513 * Ⲇ, Ⲇ * 227, 507 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 214, 417 * Ⲇ, 189 * Ⲇ, 304 * Ⲇ, 221 * Ⲇ, 180 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 191, Ⲇ * 126, 192 * Ⲇ, 105 * Ⲇ, Ⲇ * 198, Ⲇ * 64);
		ᐃ.bezierCurveTo(Ⲇ * 123, Ⲇ * 102, 99 * Ⲇ, Ⲇ * 285, Ⲇ * 137, Ⲇ * 517);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 175, Ⲇ * 119);
		ᐃ.bezierCurveTo(Ⲇ * 176, Ⲇ * 142, 184 * Ⲇ, 165 * Ⲇ, 197 * Ⲇ, 183 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 167, Ⲇ * 325, Ⲇ * 191, Ⲇ * 405, Ⲇ * 202, 502 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 180, Ⲇ * 503, Ⲇ * 180, 503 * Ⲇ, Ⲇ * 158, Ⲇ * 504);
		ᐃ.bezierCurveTo(Ⲇ * 135, Ⲇ * 396, 134 * Ⲇ, Ⲇ * 185, Ⲇ * 175, 119 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(110 * Ⲇ, 518 * Ⲇ);
		ᐃ.bezierCurveTo(111.5 * Ⲇ, 533 * Ⲇ, Ⲇ * 111.5, Ⲇ * 533, Ⲇ * 113, 548 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 162.5, Ⲇ * 544, Ⲇ * 162.5, 544 * Ⲇ, Ⲇ * 212, 540 * Ⲇ);
		ᐃ.bezierCurveTo(312 * Ⲇ, 535 * Ⲇ, Ⲇ * 281, Ⲇ * 665, 225 * Ⲇ, 665 * Ⲇ);
		ᐃ.bezierCurveTo(227 * Ⲇ, Ⲇ * 686.5, 227 * Ⲇ, 686.5 * Ⲇ, 229 * Ⲇ, Ⲇ * 708);
		ᐃ.bezierCurveTo(Ⲇ * 343, 684 * Ⲇ, 354 * Ⲇ, 496 * Ⲇ, 222 * Ⲇ, Ⲇ * 498);
		ᐃ.bezierCurveTo(165.5 * Ⲇ, 503 * Ⲇ, 165.5 * Ⲇ, Ⲇ * 503, 109 * Ⲇ, 508 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ]);
		ᐃΔⵠ(ᐃ, 204 * Ⲇ, 693 * Ⲇ, Ⲇ * 36.013886210738214);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 105, 518 * Ⲇ, 30 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 171, Ⲇ * 535);
		ᐃ.bezierCurveTo(Ⲇ * 139.5, 537.5 * Ⲇ, 139.5 * Ⲇ, 537.5 * Ⲇ, Ⲇ * 108, 540 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 110, Ⲇ * 527.5, Ⲇ * 110, 527.5 * Ⲇ, Ⲇ * 112, Ⲇ * 515);
		ᐃ.bezierCurveTo(148 * Ⲇ, 513 * Ⲇ, 148 * Ⲇ, 513 * Ⲇ, Ⲇ * 184, Ⲇ * 511);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(244 * Ⲇ, Ⲇ * 669);
		ᐃ.bezierCurveTo(248.5 * Ⲇ, 680 * Ⲇ, 248.5 * Ⲇ, 680 * Ⲇ, 253 * Ⲇ, Ⲇ * 691);
		ᐃ.bezierCurveTo(239.5 * Ⲇ, Ⲇ * 697, Ⲇ * 239.5, 697 * Ⲇ, Ⲇ * 226, 703 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 223, 691.5 * Ⲇ, 223 * Ⲇ, Ⲇ * 691.5, Ⲇ * 220, Ⲇ * 680);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(Ⲇ * -25, Ⲇ * -25);
		ᐃ.globalAlpha = ⲆⵠΔⲆ;
		ᐃ.save();
		ᐃ.translate(193.5 * Ⲇ, Ⲇ * 602.5);
		ᐃ.rotate(-.12);
		ᐃᐃᐃ(ᐃ, -26.5 * Ⲇ, -97.5 * Ⲇ, 53 * Ⲇ, 195 * Ⲇ, 25 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆΔΔ], ΔⵠΔΔᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(137 * Ⲇ, 519 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 182, 513 * Ⲇ, 182 * Ⲇ, 513 * Ⲇ, Ⲇ * 227, 507 * Ⲇ);
		ᐃ.bezierCurveTo(214 * Ⲇ, 417 * Ⲇ, 189 * Ⲇ, Ⲇ * 304, Ⲇ * 221, Ⲇ * 180);
		ᐃ.bezierCurveTo(191 * Ⲇ, Ⲇ * 126, Ⲇ * 192, 105 * Ⲇ, 198 * Ⲇ, 64 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 123, Ⲇ * 102, Ⲇ * 99, 285 * Ⲇ, 137 * Ⲇ, 517 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⲆᐃ], ᐃⲆ[4], Ⲇ * 16);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 175, 119 * Ⲇ);
		ᐃ.bezierCurveTo(176 * Ⲇ, 142 * Ⲇ, Ⲇ * 184, 165 * Ⲇ, 197 * Ⲇ, 183 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 167, Ⲇ * 325, 191 * Ⲇ, Ⲇ * 405, 202 * Ⲇ, 502 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 180, Ⲇ * 503, 180 * Ⲇ, Ⲇ * 503, 158 * Ⲇ, Ⲇ * 504);
		ᐃ.bezierCurveTo(135 * Ⲇ, Ⲇ * 396, 134 * Ⲇ, 185 * Ⲇ, Ⲇ * 175, Ⲇ * 119);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃⵠᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 110, 518 * Ⲇ);
		ᐃ.bezierCurveTo(111.5 * Ⲇ, Ⲇ * 533, 111.5 * Ⲇ, 533 * Ⲇ, Ⲇ * 113, 548 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 162.5, Ⲇ * 544, Ⲇ * 162.5, Ⲇ * 544, Ⲇ * 212, Ⲇ * 540);
		ᐃ.bezierCurveTo(312 * Ⲇ, 535 * Ⲇ, Ⲇ * 281, Ⲇ * 665, Ⲇ * 225, Ⲇ * 665);
		ᐃ.bezierCurveTo(227 * Ⲇ, Ⲇ * 686.5, 227 * Ⲇ, Ⲇ * 686.5, 229 * Ⲇ, Ⲇ * 708);
		ᐃ.bezierCurveTo(Ⲇ * 343, 684 * Ⲇ, 354 * Ⲇ, Ⲇ * 496, 222 * Ⲇ, Ⲇ * 498);
		ᐃ.bezierCurveTo(165.5 * Ⲇ, 503 * Ⲇ, Ⲇ * 165.5, 503 * Ⲇ, 109 * Ⲇ, 508 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[ᐃΔⲆΔⲆ], Ⲇ * ΔᐃⵠΔⵠ);
		ᐃΔⵠ(ᐃ, 204 * Ⲇ, Ⲇ * 693, 36.013886210738214 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[4], ᐃᐃⵠᐃⵠᐃᐃ * Ⲇ);
		ᐃΔⵠ(ᐃ, 105 * Ⲇ, 518 * Ⲇ, 30 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[4], ᐃⵠᐃⲆⲆⵠⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 171, 535 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 139.5, Ⲇ * 537.5, Ⲇ * 139.5, Ⲇ * 537.5, 108 * Ⲇ, 540 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 110, 527.5 * Ⲇ, 110 * Ⲇ, Ⲇ * 527.5, 112 * Ⲇ, 515 * Ⲇ);
		ᐃ.bezierCurveTo(148 * Ⲇ, Ⲇ * 513, Ⲇ * 148, Ⲇ * 513, Ⲇ * 184, 511 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(244 * Ⲇ, 669 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 248.5, Ⲇ * 680, 248.5 * Ⲇ, Ⲇ * 680, 253 * Ⲇ, Ⲇ * 691);
		ᐃ.bezierCurveTo(239.5 * Ⲇ, Ⲇ * 697, Ⲇ * 239.5, 697 * Ⲇ, 226 * Ⲇ, 703 * Ⲇ);
		ᐃ.bezierCurveTo(223 * Ⲇ, Ⲇ * 691.5, Ⲇ * 223, 691.5 * Ⲇ, Ⲇ * 220, Ⲇ * 680);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6]);
		ᐃΔⵠ(ᐃ, Ⲇ * 204, 693 * Ⲇ, 17.029386365926403 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[7]);
		ᐃΔⵠ(ᐃ, Ⲇ * 106, 518 * Ⲇ, ΔⲆΔᐃΔ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[7]);
		return ⲆⲆ
	}

	function ⲆⵠⵠΔⲆⲆⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 170;
		ⲆⲆ.height = 469 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆⵠⲆ;
		ᐃ.translate(Ⲇ * 20, Ⲇ * 20);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(88 * Ⲇ, 30 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 96, Ⲇ * 49.5, 96 * Ⲇ, 49.5 * Ⲇ, Ⲇ * 104, Ⲇ * 69);
		ᐃ.bezierCurveTo(105.5 * Ⲇ, Ⲇ * 41.5, Ⲇ * 105.5, 41.5 * Ⲇ, Ⲇ * 107, Ⲇ * ΔⵠⲆΔⵠⵠⵠ);
		ᐃ.bezierCurveTo(Ⲇ * 114, 9.5 * Ⲇ, 114 * Ⲇ, 9.5 * Ⲇ, Ⲇ * 121, ⵠⵠⲆⵠ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 135.5, Ⲇ * 27.5, Ⲇ * 135.5, 27.5 * Ⲇ, Ⲇ * 150, Ⲇ * 50);
		ᐃ.bezierCurveTo(Ⲇ * 110.5, Ⲇ * 286, 110.5 * Ⲇ, Ⲇ * 286, 103 * Ⲇ, 331 * Ⲇ);
		ᐃ.bezierCurveTo(69.5 * Ⲇ, Ⲇ * 325, 69.5 * Ⲇ, 325 * Ⲇ, Ⲇ * 36, 319 * Ⲇ);
		ᐃ.bezierCurveTo(56.5 * Ⲇ, 180 * Ⲇ, Ⲇ * 56.5, 180 * Ⲇ, 77 * Ⲇ, Ⲇ * 41);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(118 * Ⲇ, Ⲇ * 31);
		ᐃ.bezierCurveTo(Ⲇ * 125, Ⲇ * 43, 125 * Ⲇ, Ⲇ * 43, 132 * Ⲇ, Ⲇ * 55);
		ᐃ.bezierCurveTo(Ⲇ * 109.5, 185.5 * Ⲇ, 109.5 * Ⲇ, 185.5 * Ⲇ, Ⲇ * 87, 316 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 72, 313.5 * Ⲇ, 72 * Ⲇ, Ⲇ * 313.5, Ⲇ * 57, Ⲇ * 311);
		ᐃ.bezierCurveTo(76.5 * Ⲇ, Ⲇ * 181, 76.5 * Ⲇ, Ⲇ * 181, 96 * Ⲇ, 51 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 56, 328 * Ⲇ);
		ᐃ.bezierCurveTo(47 * Ⲇ, Ⲇ * 385.5, 47 * Ⲇ, 385.5 * Ⲇ, Ⲇ * 38, Ⲇ * 443);
		ᐃ.bezierCurveTo(Ⲇ * 52, 446 * Ⲇ, 52 * Ⲇ, Ⲇ * 446, 66 * Ⲇ, 449 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 76.5, Ⲇ * 388.5, 76.5 * Ⲇ, 388.5 * Ⲇ, 87 * Ⲇ, 328 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 74, Ⲇ * 302);
		ᐃ.bezierCurveTo(104 * Ⲇ, Ⲇ * 316.5, Ⲇ * 104, 316.5 * Ⲇ, Ⲇ * 134, 331 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 133, 341 * Ⲇ, 133 * Ⲇ, Ⲇ * 341, 132 * Ⲇ, Ⲇ * 351);
		ᐃ.bezierCurveTo(Ⲇ * 69.5, 342 * Ⲇ, Ⲇ * 69.5, 342 * Ⲇ, Ⲇ * ΔΔⲆⲆⲆ, 333 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 8, Ⲇ * 323, 8 * Ⲇ, Ⲇ * 323, Ⲇ * ⲆᐃⲆᐃⲆ, Ⲇ * 313);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.save();
		ᐃ.translate(51.5 * Ⲇ, Ⲇ * 440.5);
		ᐃ.rotate(.2);
		ᐃᐃᐃ(ᐃ, Ⲇ * -20.5, -18.5 * Ⲇ, Ⲇ * 41, Ⲇ * 37, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(73 * Ⲇ, 316 * Ⲇ);
		ᐃ.bezierCurveTo(90 * Ⲇ, Ⲇ * 324.5, 90 * Ⲇ, Ⲇ * 324.5, 107 * Ⲇ, Ⲇ * 333);
		ᐃ.bezierCurveTo(Ⲇ * 70, Ⲇ * 327.5, Ⲇ * 70, Ⲇ * 327.5, 33 * Ⲇ, Ⲇ * 322);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⲆΔⲆⵠ;
		ᐃ.translate(-ⲆⵠⵠΔⵠ * Ⲇ, Ⲇ * -ᐃⵠⲆᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 88, 30 * Ⲇ);
		ᐃ.bezierCurveTo(96 * Ⲇ, 49.5 * Ⲇ, 96 * Ⲇ, 49.5 * Ⲇ, Ⲇ * 104, 69 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 105.5, 41.5 * Ⲇ, Ⲇ * 105.5, 41.5 * Ⲇ, 107 * Ⲇ, ⵠⵠⲆⵠⲆ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 114, Ⲇ * 9.5, 114 * Ⲇ, Ⲇ * 9.5, Ⲇ * 121, Ⲇ * 5);
		ᐃ.bezierCurveTo(135.5 * Ⲇ, Ⲇ * 27.5, 135.5 * Ⲇ, Ⲇ * 27.5, Ⲇ * 150, Ⲇ * 50);
		ᐃ.bezierCurveTo(Ⲇ * 110.5, 286 * Ⲇ, Ⲇ * 110.5, Ⲇ * 286, Ⲇ * 103, Ⲇ * 331);
		ᐃ.bezierCurveTo(Ⲇ * 69.5, 325 * Ⲇ, 69.5 * Ⲇ, 325 * Ⲇ, 36 * Ⲇ, 319 * Ⲇ);
		ᐃ.bezierCurveTo(56.5 * Ⲇ, Ⲇ * 180, 56.5 * Ⲇ, Ⲇ * 180, Ⲇ * 77, Ⲇ * 41);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆ], ᐃⲆ[2], Ⲇ * ΔᐃⲆΔᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 118, 31 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 125, 43 * Ⲇ, 125 * Ⲇ, Ⲇ * 43, 132 * Ⲇ, 55 * Ⲇ);
		ᐃ.bezierCurveTo(109.5 * Ⲇ, 185.5 * Ⲇ, 109.5 * Ⲇ, Ⲇ * 185.5, Ⲇ * 87, Ⲇ * 316);
		ᐃ.bezierCurveTo(72 * Ⲇ, 313.5 * Ⲇ, 72 * Ⲇ, 313.5 * Ⲇ, 57 * Ⲇ, Ⲇ * 311);
		ᐃ.bezierCurveTo(Ⲇ * 76.5, Ⲇ * 181, Ⲇ * 76.5, Ⲇ * 181, 96 * Ⲇ, 51 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(88 * Ⲇ, 30 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 96, 49.5 * Ⲇ, 96 * Ⲇ, 49.5 * Ⲇ, 104 * Ⲇ, Ⲇ * 69);
		ᐃ.bezierCurveTo(Ⲇ * 105.5, 41.5 * Ⲇ, Ⲇ * 105.5, 41.5 * Ⲇ, Ⲇ * 107, 14 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 114, Ⲇ * 9.5, 114 * Ⲇ, 9.5 * Ⲇ, Ⲇ * 121, Ⲇ * 5);
		ᐃ.bezierCurveTo(135.5 * Ⲇ, Ⲇ * 27.5, 135.5 * Ⲇ, Ⲇ * 27.5, 150 * Ⲇ, Ⲇ * 50);
		ᐃ.bezierCurveTo(Ⲇ * 110.5, 286 * Ⲇ, 110.5 * Ⲇ, 286 * Ⲇ, 103 * Ⲇ, 331 * Ⲇ);
		ᐃ.bezierCurveTo(69.5 * Ⲇ, Ⲇ * 325, Ⲇ * 69.5, Ⲇ * 325, 36 * Ⲇ, 319 * Ⲇ);
		ᐃ.bezierCurveTo(56.5 * Ⲇ, Ⲇ * 180, Ⲇ * 56.5, Ⲇ * 180, 77 * Ⲇ, 41 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], Ⲇ * 7);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(56 * Ⲇ, Ⲇ * 328);
		ᐃ.bezierCurveTo(47 * Ⲇ, 385.5 * Ⲇ, Ⲇ * 47, Ⲇ * 385.5, Ⲇ * 38, Ⲇ * 443);
		ᐃ.bezierCurveTo(52 * Ⲇ, 446 * Ⲇ, Ⲇ * 52, 446 * Ⲇ, 66 * Ⲇ, Ⲇ * 449);
		ᐃ.bezierCurveTo(Ⲇ * 76.5, 388.5 * Ⲇ, Ⲇ * 76.5, 388.5 * Ⲇ, 87 * Ⲇ, Ⲇ * 328);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⲆΔⲆⲆ], Ⲇ * 7);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(74 * Ⲇ, 302 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 104, Ⲇ * 316.5, Ⲇ * 104, Ⲇ * 316.5, 134 * Ⲇ, 331 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 133, 341 * Ⲇ, Ⲇ * 133, Ⲇ * 341, 132 * Ⲇ, Ⲇ * 351);
		ᐃ.bezierCurveTo(Ⲇ * 69.5, Ⲇ * 342, Ⲇ * 69.5, Ⲇ * 342, Ⲇ * ⲆⵠΔⲆⵠ, Ⲇ * 333);
		ᐃ.bezierCurveTo(8 * Ⲇ, 323 * Ⲇ, 8 * Ⲇ, Ⲇ * 323, 9 * Ⲇ, 313 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], Ⲇ * ᐃΔᐃⲆᐃ);
		ᐃ.save();
		ᐃ.translate(51.5 * Ⲇ, 440.5 * Ⲇ);
		ᐃ.rotate(.2);
		ᐃᐃᐃ(ᐃ, -20.5 * Ⲇ, Ⲇ * -18.5, 41 * Ⲇ, Ⲇ * 37, Ⲇ * ⵠᐃᐃⵠⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆᐃ], ᐃⲆ[ⲆΔⵠᐃⵠ], Ⲇ * ᐃΔⵠⲆΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(73 * Ⲇ, Ⲇ * 316);
		ᐃ.bezierCurveTo(90 * Ⲇ, 324.5 * Ⲇ, 90 * Ⲇ, 324.5 * Ⲇ, 107 * Ⲇ, 333 * Ⲇ);
		ᐃ.bezierCurveTo(70 * Ⲇ, Ⲇ * 327.5, 70 * Ⲇ, Ⲇ * 327.5, 33 * Ⲇ, Ⲇ * 322);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6]);
		return ⲆⲆ
	}

	function ᐃⵠΔⵠⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 105;
		var ⲆΔΔ = 125 * Ⲇ;
		var ⲆⲆⵠ = Ⲇ * ᐃⵠⲆⲆ;
		var w2 = Δⵠᐃ / ᐃᐃᐃᐃ;
		var ᐃᐃⲆᐃⵠ = ⲆΔΔ / ⲆⲆᐃⲆ;
		var ΔⲆⵠⵠ = Ⲇ * ⲆᐃⲆⲆᐃ;
		var ⵠⲆⲆΔ = Ⲇ * 5;
		var ⲆΔⵠᐃⵠⲆᐃ = Ⲇ * ᐃⲆᐃⲆᐃ;
		var ΔⲆᐃⲆᐃᐃⵠ = Ⲇ * 110;
		var ᐃⲆᐃⵠΔΔⵠ = ⲆΔⵠᐃⵠⲆᐃ / 2;
		var ⵠᐃⵠⵠⲆᐃⵠ = ΔⲆᐃⲆᐃᐃⵠ / ⵠⲆⵠΔ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.save();
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(Δⵠᐃ / ⵠᐃⵠⲆ + Ⲇ * ⲆᐃⲆΔⲆ, ⲆΔΔ / ΔᐃΔⲆ + ⵠⲆⲆΔ);
		ᐃᐃᐃ(ᐃ, -ᐃⲆᐃⵠΔΔⵠ, -ⵠᐃⵠⵠⲆᐃⵠ, ⲆΔⵠᐃⵠⲆᐃ, ΔⲆᐃⲆᐃᐃⵠ, ΔⲆⵠⵠ);
		if (ᐃᐃⵠΔ) {
			ᐃⵠ(ᐃ, ᐃⲆ[0])
		} else {
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆΔ])
		}
		ᐃ.translate(-130 * Ⲇ + ⵠⲆⲆΔ, -128 * Ⲇ + ⵠⲆⲆΔ);
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(159 * Ⲇ, 93 * Ⲇ, 156 * Ⲇ, Ⲇ * 99, 154 * Ⲇ, 102 * Ⲇ);
		ᐃ.bezierCurveTo(128 * Ⲇ, 92 * Ⲇ, 90 * Ⲇ, 93 * Ⲇ, 72 * Ⲇ, Ⲇ * 96);
		ᐃ.bezierCurveTo(Ⲇ * 68, 84 * Ⲇ, Ⲇ * 143, 73 * Ⲇ, Ⲇ * 162, Ⲇ * 86);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃⵠ]);
		ᐃ.restore();
		ᐃ.translate(Δⵠᐃ / ᐃΔⲆⵠ + 8, ⲆΔΔ / 2);
		ᐃ.globalAlpha = 1;
		ᐃᐃᐃ(ᐃ, -ᐃⲆᐃⵠΔΔⵠ, -ⵠᐃⵠⵠⲆᐃⵠ, ⲆΔⵠᐃⵠⲆᐃ, ΔⲆᐃⲆᐃᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆΔΔ], ᐃⲆ[ⲆΔⵠᐃΔ], ⲆⲆⵠ);
		ᐃ.translate(Ⲇ * -130, -125 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(159 * Ⲇ, Ⲇ * 93, Ⲇ * 156, Ⲇ * 99, Ⲇ * 154, 102 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 128, 92 * Ⲇ, Ⲇ * 90, 93 * Ⲇ, Ⲇ * 72, Ⲇ * 96);
		ᐃ.bezierCurveTo(Ⲇ * 68, Ⲇ * 84, Ⲇ * 143, 73 * Ⲇ, Ⲇ * 162, Ⲇ * 86);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[ᐃΔᐃⲆΔ], ⲆⲆⵠ);
		return ⲆⲆ
	}

	function ᐃΔⲆⵠⵠⵠⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * ᐃᐃⲆⵠΔ;
		ⲆⲆ.height = Ⲇ * 250;
		ᐃ.translate(-135 * Ⲇ, -75 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .8 : ΔⲆΔᐃ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(178.5 * Ⲇ, Ⲇ * 238.03125);
		ᐃ.bezierCurveTo(177 * Ⲇ, 175.03125 * Ⲇ, 177 * Ⲇ, Ⲇ * 175.03125, Ⲇ * 175.5, 112.03125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 184.5, Ⲇ * 100.53125, 184.5 * Ⲇ, 100.53125 * Ⲇ, Ⲇ * 193.5, 89.03125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 202, Ⲇ * 100.03125, Ⲇ * 202, Ⲇ * 100.03125, 210.5 * Ⲇ, Ⲇ * 111.03125);
		ᐃ.bezierCurveTo(209.5 * Ⲇ, 174.03125 * Ⲇ, 209.5 * Ⲇ, 174.03125 * Ⲇ, 208.5 * Ⲇ, Ⲇ * 237.03125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 155.5, Ⲇ * 239.03125);
		ᐃ.bezierCurveTo(Ⲇ * 194, Ⲇ * 238.53125, Ⲇ * 194, Ⲇ * 238.53125, 232.5 * Ⲇ, Ⲇ * 238.03125);
		ᐃ.bezierCurveTo(232.5 * Ⲇ, 243.03125 * Ⲇ, 232.5 * Ⲇ, Ⲇ * 243.03125, 232.5 * Ⲇ, Ⲇ * 248.03125);
		ᐃ.bezierCurveTo(194 * Ⲇ, 248.53125 * Ⲇ, Ⲇ * 194, Ⲇ * 248.53125, Ⲇ * 155.5, 249.03125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃΔⵠ(ᐃ, Ⲇ * 160.5, 243.03125 * Ⲇ, ⵠΔⵠΔᐃ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃΔⵠ(ᐃ, Ⲇ * 227.5, 242.03125 * Ⲇ, Ⲇ * 7);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(185.5 * Ⲇ, Ⲇ * 253.03125);
		ᐃ.bezierCurveTo(193.5 * Ⲇ, Ⲇ * 253.03125, 193.5 * Ⲇ, 253.03125 * Ⲇ, 201.5 * Ⲇ, 253.03125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 201.5, Ⲇ * 276.03125, 201.5 * Ⲇ, 276.03125 * Ⲇ, 201.5 * Ⲇ, Ⲇ * 299.03125);
		ᐃ.bezierCurveTo(Ⲇ * 194.5, 299.03125 * Ⲇ, Ⲇ * 194.5, 299.03125 * Ⲇ, Ⲇ * 187.5, Ⲇ * 299.03125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[Δⵠⵠ], ΔΔⵠΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, 194 * Ⲇ, 298 * Ⲇ, Ⲇ * ⵠᐃΔΔⲆ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔᐃ], ᐃⲆ[0], Ⲇ * ⵠΔΔΔ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(Ⲇ * -ᐃᐃⵠⵠΔ, ⵠᐃᐃⵠⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 178.5, Ⲇ * 238.03125);
		ᐃ.bezierCurveTo(177 * Ⲇ, Ⲇ * 175.03125, Ⲇ * 177, Ⲇ * 175.03125, Ⲇ * 175.5, 112.03125 * Ⲇ);
		ᐃ.bezierCurveTo(184.5 * Ⲇ, 100.53125 * Ⲇ, Ⲇ * 184.5, 100.53125 * Ⲇ, Ⲇ * 193.5, Ⲇ * 89.03125);
		ᐃ.bezierCurveTo(Ⲇ * 202, 100.03125 * Ⲇ, 202 * Ⲇ, Ⲇ * 100.03125, Ⲇ * 210.5, Ⲇ * 111.03125);
		ᐃ.bezierCurveTo(209.5 * Ⲇ, Ⲇ * 174.03125, 209.5 * Ⲇ, 174.03125 * Ⲇ, Ⲇ * 208.5, 237.03125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(155.5 * Ⲇ, Ⲇ * 239.03125);
		ᐃ.bezierCurveTo(194 * Ⲇ, Ⲇ * 238.53125, Ⲇ * 194, Ⲇ * 238.53125, 232.5 * Ⲇ, Ⲇ * 238.03125);
		ᐃ.bezierCurveTo(Ⲇ * 232.5, Ⲇ * 243.03125, 232.5 * Ⲇ, Ⲇ * 243.03125, 232.5 * Ⲇ, Ⲇ * 248.03125);
		ᐃ.bezierCurveTo(Ⲇ * 194, 248.53125 * Ⲇ, 194 * Ⲇ, 248.53125 * Ⲇ, Ⲇ * 155.5, Ⲇ * 249.03125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ⲆΔⲆⲆ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 160.5, Ⲇ * 243.03125, Ⲇ * ⲆΔΔᐃΔ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ], ᐃⲆ[2], 5 * Ⲇ);
		ᐃΔⵠ(ᐃ, 227.5 * Ⲇ, 242.03125 * Ⲇ, ⵠⵠΔΔᐃΔΔ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆΔ], ᐃⲆ[ᐃᐃᐃᐃ], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 185.5, 253.03125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 193.5, 253.03125 * Ⲇ, 193.5 * Ⲇ, Ⲇ * 253.03125, Ⲇ * 201.5, 253.03125 * Ⲇ);
		ᐃ.bezierCurveTo(201.5 * Ⲇ, 276.03125 * Ⲇ, 201.5 * Ⲇ, 276.03125 * Ⲇ, Ⲇ * 201.5, Ⲇ * 299.03125);
		ᐃ.bezierCurveTo(194.5 * Ⲇ, 299.03125 * Ⲇ, Ⲇ * 194.5, 299.03125 * Ⲇ, 187.5 * Ⲇ, Ⲇ * 299.03125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃ], ᐃⲆ[Ⲇⵠᐃⵠ], Ⲇ * 7);
		ᐃΔⵠ(ᐃ, Ⲇ * 194, Ⲇ * 298, 9 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃ], ᐃⲆ[ΔᐃΔⲆ], Ⲇ * ᐃΔᐃⲆᐃ);
		return ⲆⲆ
	}
	const ⲆΔⵠⵠᐃ = ᐃᐃⲆΔΔ;

	function ᐃⵠⵠⲆⵠⲆⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 283;
		ⲆⲆ.height = 224 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 100, 33 * Ⲇ);
		ᐃ.bezierCurveTo(85 * Ⲇ, Ⲇ * 62, Ⲇ * 102, 66 * Ⲇ, 110 * Ⲇ, 83 * Ⲇ);
		ᐃⵠ(ᐃ, ⵠⲆᐃᐃⲆ, ᐃⲆ[ⵠΔΔᐃ], 40 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 181, Ⲇ * 32);
		ᐃ.bezierCurveTo(196 * Ⲇ, Ⲇ * 62, Ⲇ * 181, Ⲇ * 68, Ⲇ * 178, 69 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[0], 40 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(225 * Ⲇ, Ⲇ * 52);
		ᐃ.bezierCurveTo(Ⲇ * 228, 78 * Ⲇ, Ⲇ * 207, Ⲇ * 77, Ⲇ * 192, 88 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠᐃΔ], Ⲇ * 40);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 34, 134 * Ⲇ);
		ᐃ.bezierCurveTo(46 * Ⲇ, Ⲇ * 111, 57 * Ⲇ, Ⲇ * 111, 79 * Ⲇ, Ⲇ * 109);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠⵠΔΔ], 40 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(249 * Ⲇ, 135 * Ⲇ);
		ᐃ.bezierCurveTo(233 * Ⲇ, Ⲇ * 107, 212 * Ⲇ, 112 * Ⲇ, 202 * Ⲇ, Ⲇ * 115);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆΔⵠΔ], 40 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(56 * Ⲇ, 50 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 56, 82 * Ⲇ, Ⲇ * 73, 82 * Ⲇ, 93 * Ⲇ, Ⲇ * 89);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[0], Ⲇ * 40);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 93, 55 * Ⲇ);
		ᐃ.bezierCurveTo(124 * Ⲇ, Ⲇ * 29, 179 * Ⲇ, Ⲇ * 44, Ⲇ * 188, 52 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 207, 64 * Ⲇ, Ⲇ * 226, 94 * Ⲇ, 231 * Ⲇ, 118 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 236, 145 * Ⲇ, 222 * Ⲇ, Ⲇ * 184, 193 * Ⲇ, Ⲇ * 192);
		ᐃ.bezierCurveTo(Ⲇ * 147, 201 * Ⲇ, 116 * Ⲇ, 200 * Ⲇ, 93 * Ⲇ, 193 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 61, 180 * Ⲇ, Ⲇ * 48, 147 * Ⲇ, Ⲇ * 50, Ⲇ * 123);
		ᐃ.bezierCurveTo(50 * Ⲇ, Ⲇ * 93, 76 * Ⲇ, Ⲇ * 66, Ⲇ * 92, 56 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		return ⲆⲆ
	}

	function ᐃⲆⲆⵠⲆᐃΔ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 131;
		ⲆⲆ.height = 121 * Ⲇ;
		ᐃ.translate(ⵠⵠΔᐃ, Ⲇ * 20);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 110, 59 * Ⲇ);
		ᐃ.bezierCurveTo(93 * Ⲇ, 61.5 * Ⲇ, 93 * Ⲇ, Ⲇ * 61.5, Ⲇ * 76, 64 * Ⲇ);
		ᐃ.bezierCurveTo(84.5 * Ⲇ, Ⲇ * 78.5, Ⲇ * 84.5, Ⲇ * 78.5, Ⲇ * 93, 93 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 70, 111 * Ⲇ, Ⲇ * 43, Ⲇ * 103, 30 * Ⲇ, Ⲇ * 82);
		ᐃ.bezierCurveTo(ⵠⵠΔΔⵠᐃΔ * Ⲇ, 61 * Ⲇ, Ⲇ * 25, Ⲇ * 30, Ⲇ * 51, Ⲇ * 21);
		ᐃ.bezierCurveTo(66 * Ⲇ, Ⲇ * 15, 83 * Ⲇ, Ⲇ * 18, Ⲇ * 96, 29 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 104, Ⲇ * 35, 109 * Ⲇ, 47 * Ⲇ, Ⲇ * 110, 58 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⲆⵠⲆ;
		ᐃ.translate(0, Ⲇ * -20);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(110 * Ⲇ, Ⲇ * 59);
		ᐃ.bezierCurveTo(93 * Ⲇ, 61.5 * Ⲇ, 93 * Ⲇ, Ⲇ * 61.5, 76 * Ⲇ, Ⲇ * 64);
		ᐃ.bezierCurveTo(Ⲇ * 84.5, Ⲇ * 78.5, 84.5 * Ⲇ, 78.5 * Ⲇ, 93 * Ⲇ, 93 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 70, 111 * Ⲇ, 43 * Ⲇ, 103 * Ⲇ, Ⲇ * 30, Ⲇ * 82);
		ᐃ.bezierCurveTo(17 * Ⲇ, 61 * Ⲇ, 25 * Ⲇ, 30 * Ⲇ, Ⲇ * 51, Ⲇ * 21);
		ᐃ.bezierCurveTo(66 * Ⲇ, Ⲇ * ⵠⵠΔⲆⵠ, 83 * Ⲇ, ΔΔⵠΔⲆΔᐃ * Ⲇ, Ⲇ * 96, Ⲇ * 29);
		ᐃ.bezierCurveTo(104 * Ⲇ, Ⲇ * 35, Ⲇ * 109, Ⲇ * 47, 110 * Ⲇ, Ⲇ * 58);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆᐃⲆ], 10 * Ⲇ);
		return ⲆⲆ
	}

	function ᐃᐃⲆᐃΔⵠᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 290;
		ⲆⲆ.height = Ⲇ * 525;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆΔᐃΔ;
		ᐃ.translate(Ⲇ * ⵠⲆΔᐃᐃ, Ⲇ * 20);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(111 * Ⲇ, Ⲇ * 351);
		ᐃ.bezierCurveTo(128.5 * Ⲇ, 218.5 * Ⲇ, 128.5 * Ⲇ, 218.5 * Ⲇ, 146 * Ⲇ, Ⲇ * 86);
		ᐃ.bezierCurveTo(Ⲇ * 166.5, Ⲇ * 66.5, 166.5 * Ⲇ, 66.5 * Ⲇ, 187 * Ⲇ, 47 * Ⲇ);
		ᐃ.bezierCurveTo(201 * Ⲇ, 71.5 * Ⲇ, 201 * Ⲇ, 71.5 * Ⲇ, Ⲇ * 215, Ⲇ * 96);
		ᐃ.bezierCurveTo(Ⲇ * 193, Ⲇ * 228.5, 193 * Ⲇ, Ⲇ * 228.5, 171 * Ⲇ, Ⲇ * 361);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠⵠ]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 129.5, 424 * Ⲇ);
		ᐃ.rotate(.16);
		ᐃᐃᐃ(ᐃ, Ⲇ * -15.5, -63 * Ⲇ, Ⲇ * 31, 126 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 121, Ⲇ * 480, Ⲇ * 20.396078054371138);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(90 * Ⲇ, Ⲇ * 311);
		ᐃ.bezierCurveTo(95 * Ⲇ, 324 * Ⲇ, 95 * Ⲇ, Ⲇ * 324, ΔⲆΔΔΔ * Ⲇ, 337 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 141.5, 345.5 * Ⲇ, 141.5 * Ⲇ, 345.5 * Ⲇ, Ⲇ * 183, 354 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 193.5, Ⲇ * 342.5, 193.5 * Ⲇ, 342.5 * Ⲇ, 204 * Ⲇ, 331 * Ⲇ);
		ᐃ.bezierCurveTo(202 * Ⲇ, 354 * Ⲇ, Ⲇ * 202, Ⲇ * 354, Ⲇ * 200, 377 * Ⲇ);
		ᐃ.bezierCurveTo(147 * Ⲇ, Ⲇ * 388, 106 * Ⲇ, 371 * Ⲇ, 79 * Ⲇ, 356 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(-ΔⵠⲆⲆⵠⵠⵠ * Ⲇ, -20 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 111, 351 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 128.5, 218.5 * Ⲇ, 128.5 * Ⲇ, 218.5 * Ⲇ, 146 * Ⲇ, Ⲇ * 86);
		ᐃ.bezierCurveTo(166.5 * Ⲇ, Ⲇ * 66.5, Ⲇ * 166.5, 66.5 * Ⲇ, 187 * Ⲇ, Ⲇ * 47);
		ᐃ.bezierCurveTo(Ⲇ * 201, 71.5 * Ⲇ, 201 * Ⲇ, Ⲇ * 71.5, Ⲇ * 215, Ⲇ * 96);
		ᐃ.bezierCurveTo(193 * Ⲇ, 228.5 * Ⲇ, Ⲇ * 193, Ⲇ * 228.5, 171 * Ⲇ, Ⲇ * 361);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 12.5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(129.5 * Ⲇ, 424 * Ⲇ);
		ᐃ.rotate(.16);
		ᐃᐃᐃ(ᐃ, -15.5 * Ⲇ, Ⲇ * -63, 31 * Ⲇ, Ⲇ * 126, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ΔΔⵠΔ], 12.5 * Ⲇ);
		ᐃΔⵠ(ᐃ, 121 * Ⲇ, Ⲇ * 480, Ⲇ * 20.396078054371138);
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⲆΔⵠⵠᐃ], 12.5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(90 * Ⲇ, Ⲇ * 311);
		ᐃ.bezierCurveTo(95 * Ⲇ, Ⲇ * 324, 95 * Ⲇ, 324 * Ⲇ, Ⲇ * 100, Ⲇ * 337);
		ᐃ.bezierCurveTo(141.5 * Ⲇ, Ⲇ * 345.5, 141.5 * Ⲇ, Ⲇ * 345.5, Ⲇ * 183, Ⲇ * 354);
		ᐃ.bezierCurveTo(193.5 * Ⲇ, 342.5 * Ⲇ, 193.5 * Ⲇ, 342.5 * Ⲇ, Ⲇ * 204, Ⲇ * 331);
		ᐃ.bezierCurveTo(202 * Ⲇ, Ⲇ * 354, 202 * Ⲇ, Ⲇ * 354, Ⲇ * 200, Ⲇ * 377);
		ᐃ.bezierCurveTo(147 * Ⲇ, 388 * Ⲇ, Ⲇ * 106, 371 * Ⲇ, Ⲇ * 79, Ⲇ * 356);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ᐃᐃᐃᐃ], Ⲇ * 12.5);
		return ⲆⲆ
	}

	function ⵠΔⲆᐃⲆⵠΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 290;
		ⲆⲆ.height = Ⲇ * 525;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(ᐃᐃΔΔⲆ * Ⲇ, Ⲇ * 20);
		ᐃ.translate(-20 * Ⲇ, Ⲇ * -20);
		ᐃ.save();
		ᐃ.translate(132 * Ⲇ, 423 * Ⲇ);
		ᐃ.rotate(.16);
		ᐃᐃᐃ(ᐃ, -ΔΔⲆΔΔ * Ⲇ, Ⲇ * -61, 28 * Ⲇ, Ⲇ * 122, Ⲇ * ⲆΔⲆⲆⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ΔⲆΔΔΔ * Ⲇ, 344 * Ⲇ);
		ᐃ.bezierCurveTo(123 * Ⲇ, Ⲇ * 214, 123 * Ⲇ, Ⲇ * 214, 146 * Ⲇ, 84 * Ⲇ);
		ᐃ.bezierCurveTo(166.5 * Ⲇ, Ⲇ * 65, 166.5 * Ⲇ, 65 * Ⲇ, 187 * Ⲇ, Ⲇ * 46);
		ᐃ.bezierCurveTo(201 * Ⲇ, Ⲇ * 71, Ⲇ * 201, 71 * Ⲇ, 215 * Ⲇ, Ⲇ * 96);
		ᐃ.bezierCurveTo(Ⲇ * 199.5, 226.5 * Ⲇ, 199.5 * Ⲇ, Ⲇ * 226.5, 184 * Ⲇ, Ⲇ * 357);
		ᐃ.bezierCurveTo(Ⲇ * 162.5, Ⲇ * 362.5, 162.5 * Ⲇ, 362.5 * Ⲇ, Ⲇ * 141, Ⲇ * 368);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 75, Ⲇ * 328);
		ᐃ.bezierCurveTo(88 * Ⲇ, 336.5 * Ⲇ, 88 * Ⲇ, 336.5 * Ⲇ, 101 * Ⲇ, 345 * Ⲇ);
		ᐃ.bezierCurveTo(123.5 * Ⲇ, 337.5 * Ⲇ, 123.5 * Ⲇ, 337.5 * Ⲇ, Ⲇ * 146, Ⲇ * 330);
		ᐃ.bezierCurveTo(Ⲇ * 165, 343.5 * Ⲇ, Ⲇ * 165, Ⲇ * 343.5, Ⲇ * 184, 357 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 198.5, Ⲇ * 353, 198.5 * Ⲇ, 353 * Ⲇ, 213 * Ⲇ, 349 * Ⲇ);
		ᐃ.bezierCurveTo(200.5 * Ⲇ, 364.5 * Ⲇ, 200.5 * Ⲇ, 364.5 * Ⲇ, 188 * Ⲇ, Ⲇ * 380);
		ᐃ.bezierCurveTo(Ⲇ * 163, Ⲇ * 380.5, Ⲇ * 163, Ⲇ * 380.5, Ⲇ * 138, Ⲇ * 381);
		ᐃ.bezierCurveTo(Ⲇ * 112, 373.5 * Ⲇ, Ⲇ * 112, Ⲇ * 373.5, Ⲇ * 86, 366 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(121 * Ⲇ, Ⲇ * 332);
		ᐃ.bezierCurveTo(133.5 * Ⲇ, Ⲇ * 327.5, Ⲇ * 133.5, Ⲇ * 327.5, Ⲇ * 146, Ⲇ * 323);
		ᐃ.bezierCurveTo(Ⲇ * 157, Ⲇ * 330.5, Ⲇ * 157, 330.5 * Ⲇ, 168 * Ⲇ, 338 * Ⲇ);
		ᐃ.bezierCurveTo(182.5 * Ⲇ, Ⲇ * 219.5, 182.5 * Ⲇ, Ⲇ * 219.5, 197 * Ⲇ, 101 * Ⲇ);
		ᐃ.bezierCurveTo(190 * Ⲇ, 84.5 * Ⲇ, 190 * Ⲇ, 84.5 * Ⲇ, Ⲇ * 183, 68 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 172.5, Ⲇ * 81, 172.5 * Ⲇ, Ⲇ * 81, Ⲇ * 162, Ⲇ * 94);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 105, 463 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 124.5, 466 * Ⲇ, Ⲇ * 124.5, 466 * Ⲇ, Ⲇ * 144, Ⲇ * 469);
		ᐃ.bezierCurveTo(145.5 * Ⲇ, Ⲇ * 478.5, Ⲇ * 145.5, 478.5 * Ⲇ, Ⲇ * 147, Ⲇ * 488);
		ᐃ.bezierCurveTo(Ⲇ * 133.5, Ⲇ * 495.5, Ⲇ * 133.5, Ⲇ * 495.5, Ⲇ * 120, Ⲇ * 503);
		ᐃ.bezierCurveTo(108.5 * Ⲇ, 492 * Ⲇ, Ⲇ * 108.5, Ⲇ * 492, 97 * Ⲇ, Ⲇ * 481);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(-ΔⵠⵠᐃᐃⵠΔ * Ⲇ, Ⲇ * -20);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 132, Ⲇ * 423);
		ᐃ.rotate(.16);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ΔᐃᐃⲆΔ, Ⲇ * -61, Ⲇ * 28, Ⲇ * 122, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⲆⵠ], ᐃⲆ[ᐃᐃⲆΔΔ], 12.5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ⵠⲆⲆⵠⲆ * Ⲇ, 344 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 123, 214 * Ⲇ, Ⲇ * 123, 214 * Ⲇ, 146 * Ⲇ, Ⲇ * 84);
		ᐃ.bezierCurveTo(Ⲇ * 166.5, 65 * Ⲇ, 166.5 * Ⲇ, Ⲇ * 65, Ⲇ * 187, 46 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 201, Ⲇ * 71, Ⲇ * 201, Ⲇ * 71, 215 * Ⲇ, 96 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 199.5, 226.5 * Ⲇ, 199.5 * Ⲇ, 226.5 * Ⲇ, Ⲇ * 184, 357 * Ⲇ);
		ᐃ.bezierCurveTo(162.5 * Ⲇ, Ⲇ * 362.5, 162.5 * Ⲇ, 362.5 * Ⲇ, Ⲇ * 141, Ⲇ * 368);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 12.5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 75, Ⲇ * 328);
		ᐃ.bezierCurveTo(Ⲇ * 88, 336.5 * Ⲇ, Ⲇ * 88, Ⲇ * 336.5, Ⲇ * 101, 345 * Ⲇ);
		ᐃ.bezierCurveTo(123.5 * Ⲇ, Ⲇ * 337.5, Ⲇ * 123.5, Ⲇ * 337.5, Ⲇ * 146, Ⲇ * 330);
		ᐃ.bezierCurveTo(165 * Ⲇ, 343.5 * Ⲇ, Ⲇ * 165, Ⲇ * 343.5, Ⲇ * 184, 357 * Ⲇ);
		ᐃ.bezierCurveTo(198.5 * Ⲇ, Ⲇ * 353, 198.5 * Ⲇ, 353 * Ⲇ, Ⲇ * 213, 349 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 200.5, Ⲇ * 364.5, 200.5 * Ⲇ, 364.5 * Ⲇ, Ⲇ * 188, Ⲇ * 380);
		ᐃ.bezierCurveTo(Ⲇ * 163, 380.5 * Ⲇ, Ⲇ * 163, 380.5 * Ⲇ, Ⲇ * 138, 381 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 112, 373.5 * Ⲇ, Ⲇ * 112, Ⲇ * 373.5, Ⲇ * 86, Ⲇ * 366);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆ], ᐃⲆ[2], Ⲇ * 12.5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 121, 332 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 133.5, 327.5 * Ⲇ, Ⲇ * 133.5, 327.5 * Ⲇ, 146 * Ⲇ, Ⲇ * 323);
		ᐃ.bezierCurveTo(Ⲇ * 157, Ⲇ * 330.5, Ⲇ * 157, Ⲇ * 330.5, 168 * Ⲇ, Ⲇ * 338);
		ᐃ.bezierCurveTo(182.5 * Ⲇ, 219.5 * Ⲇ, Ⲇ * 182.5, Ⲇ * 219.5, Ⲇ * 197, Ⲇ * 101);
		ᐃ.bezierCurveTo(Ⲇ * 190, Ⲇ * 84.5, Ⲇ * 190, Ⲇ * 84.5, Ⲇ * 183, 68 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 172.5, Ⲇ * 81, 172.5 * Ⲇ, Ⲇ * 81, Ⲇ * 162, 94 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(105 * Ⲇ, Ⲇ * 463);
		ᐃ.bezierCurveTo(Ⲇ * 124.5, Ⲇ * 466, Ⲇ * 124.5, 466 * Ⲇ, 144 * Ⲇ, 469 * Ⲇ);
		ᐃ.bezierCurveTo(145.5 * Ⲇ, Ⲇ * 478.5, 145.5 * Ⲇ, Ⲇ * 478.5, 147 * Ⲇ, 488 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 133.5, 495.5 * Ⲇ, Ⲇ * 133.5, Ⲇ * 495.5, Ⲇ * 120, 503 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 108.5, Ⲇ * 492, Ⲇ * 108.5, 492 * Ⲇ, 97 * Ⲇ, Ⲇ * 481);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆΔ], ᐃⲆ[2], Ⲇ * 12.5);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(143 * Ⲇ, Ⲇ * 346);
		ᐃ.bezierCurveTo(125 * Ⲇ, 352 * Ⲇ, Ⲇ * 125, Ⲇ * 352, Ⲇ * 107, 358 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 124, 363 * Ⲇ, Ⲇ * 140, 368 * Ⲇ, Ⲇ * 141, 368 * Ⲇ);
		ᐃ.bezierCurveTo(156.5 * Ⲇ, 367 * Ⲇ, Ⲇ * 156.5, Ⲇ * 367, 172 * Ⲇ, 366 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		return ⲆⲆ
	}

	function ⵠⵠⲆΔⲆΔΔⵠᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 350;
		ⲆⲆ.height = Ⲇ * 140;
		ᐃ.translate(Ⲇ * -50, Ⲇ * -150);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 184.5, Ⲇ * 222.0625);
		ᐃ.bezierCurveTo(Ⲇ * 185.5, 184.0625 * Ⲇ, 302.5 * Ⲇ, Ⲇ * 171.0625, 313.5 * Ⲇ, Ⲇ * 222.0625);
		ᐃ.bezierCurveTo(330.5 * Ⲇ, Ⲇ * 263.0625, 181.5 * Ⲇ, 274.0625 * Ⲇ, Ⲇ * 184.5, Ⲇ * 223.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ], ᐃⲆ[ⲆΔᐃΔ], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 131.5, 241.0625 * Ⲇ);
		ᐃ.bezierCurveTo(144.5 * Ⲇ, 278.0625 * Ⲇ, 270.5 * Ⲇ, Ⲇ * 209.0625, Ⲇ * 228.5, 174.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 196.5, Ⲇ * 147.0625, Ⲇ * 117.5, 196.0625 * Ⲇ, 131.5 * Ⲇ, Ⲇ * 240.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⵠ], ᐃⲆ[ⲆΔⲆⵠ], 8 * Ⲇ);
		ᐃΔⵠ(ᐃ, 270.5 * Ⲇ, 225.0625 * Ⲇ, 15.811388300841896 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃΔⵠ(ᐃ, Ⲇ * 243.5, Ⲇ * 225.0625, Ⲇ * 6.082762530298219);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⲆ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 255.5, Ⲇ * 210.0625, 10.816653826391969 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠΔ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 167.5, Ⲇ * 215.0625, Ⲇ * 15.297058540778355);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃΔⵠ(ᐃ, Ⲇ * 176.5, Ⲇ * 204.0625, Ⲇ * 7.280109889280518);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃΔⵠ(ᐃ, 206.5 * Ⲇ, 189.0625 * Ⲇ, Ⲇ * 7.280109889280518);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 151.5, Ⲇ * 212.0625);
		ᐃ.bezierCurveTo(Ⲇ * 161.5, 204.0625 * Ⲇ, Ⲇ * 173.5, 214.0625 * Ⲇ, Ⲇ * 158.5, Ⲇ * 221.0625);
		ᐃ.bezierCurveTo(Ⲇ * 145.5, Ⲇ * 228.0625, 144.5 * Ⲇ, 216.0625 * Ⲇ, 151.5 * Ⲇ, Ⲇ * 212.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⵠⲆⲆΔΔ], ᐃᐃⲆⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(194.5 * Ⲇ, 209.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 205.5, Ⲇ * 202.0625, Ⲇ * 215.5, Ⲇ * 207.0625, Ⲇ * 199.5, 217.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 187.5, Ⲇ * 224.0625, Ⲇ * 182.5, Ⲇ * 217.0625, 194.5 * Ⲇ, 209.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃᐃⲆⵠ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(188.5 * Ⲇ, 183.0625 * Ⲇ);
		ᐃ.bezierCurveTo(201.5 * Ⲇ, Ⲇ * 176.0625, 213.5 * Ⲇ, 187.0625 * Ⲇ, 193.5 * Ⲇ, Ⲇ * 193.0625);
		ᐃ.bezierCurveTo(Ⲇ * 185.5, 194.0625 * Ⲇ, Ⲇ * 175.5, 189.0625 * Ⲇ, Ⲇ * 188.5, Ⲇ * 183.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠⵠ], ᐃⲆ[4], Ⲇ * ⵠᐃΔΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 261.5, Ⲇ * 202.0625);
		ᐃ.bezierCurveTo(Ⲇ * 274.5, Ⲇ * 201.0625, Ⲇ * 282.5, 214.0625 * Ⲇ, Ⲇ * 261.5, 215.0625 * Ⲇ);
		ᐃ.bezierCurveTo(246.5 * Ⲇ, 214.0625 * Ⲇ, Ⲇ * 248.5, Ⲇ * 203.0625, 261.5 * Ⲇ, Ⲇ * 202.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], ⲆⵠⵠⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 240.5, Ⲇ * 231.0625);
		ᐃ.bezierCurveTo(255.5 * Ⲇ, 231.0625 * Ⲇ, Ⲇ * 254.5, 243.0625 * Ⲇ, Ⲇ * 240.5, 242.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 225.5, 239.0625 * Ⲇ, Ⲇ * 225.5, 232.0625 * Ⲇ, 240.5 * Ⲇ, Ⲇ * 231.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠⵠ], ᐃⲆ[ᐃⵠⲆⲆ], Ⲇ * ΔᐃΔⲆΔ);
		return ⲆⲆ
	}

	function ⵠⲆΔⵠⲆⵠΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 290 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 525;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(ⵠⲆⵠΔⵠᐃᐃ * Ⲇ, 20 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(112 * Ⲇ, 356 * Ⲇ);
		ᐃ.bezierCurveTo(124 * Ⲇ, 220.5 * Ⲇ, Ⲇ * 124, Ⲇ * 220.5, Ⲇ * 136, Ⲇ * 85);
		ᐃ.bezierCurveTo(Ⲇ * 162.5, Ⲇ * 65.5, 162.5 * Ⲇ, 65.5 * Ⲇ, Ⲇ * 189, 46 * Ⲇ);
		ᐃ.bezierCurveTo(208.5 * Ⲇ, Ⲇ * 72.5, Ⲇ * 208.5, Ⲇ * 72.5, Ⲇ * 228, 99 * Ⲇ);
		ᐃ.bezierCurveTo(200 * Ⲇ, 232 * Ⲇ, 200 * Ⲇ, Ⲇ * 232, Ⲇ * 172, 365 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.save();
		ᐃ.translate(131 * Ⲇ, 423 * Ⲇ);
		ᐃ.rotate(.16);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ᐃⲆᐃⲆΔ, -53 * Ⲇ, 28 * Ⲇ, Ⲇ * 106, ᐃⲆⲆⵠⲆ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 122, Ⲇ * 480);
		ᐃ.rotate(1.72);
		ᐃⵠΔⵠ(ᐃ, ᐃᐃⲆⵠ, Ⲇ * 26.476404589747453, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(210 * Ⲇ, Ⲇ * 387);
		ᐃ.bezierCurveTo(Ⲇ * 138, 376 * Ⲇ, Ⲇ * 138, 376 * Ⲇ, Ⲇ * 66, Ⲇ * 365);
		ᐃ.bezierCurveTo(76 * Ⲇ, Ⲇ * 355, 76 * Ⲇ, Ⲇ * 355, 86 * Ⲇ, 345 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 99, 346.5 * Ⲇ, 99 * Ⲇ, Ⲇ * 346.5, 112 * Ⲇ, 348 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 128.5, 344 * Ⲇ, 128.5 * Ⲇ, Ⲇ * 344, Ⲇ * 145, Ⲇ * 340);
		ᐃ.bezierCurveTo(158 * Ⲇ, 348 * Ⲇ, Ⲇ * 158, 348 * Ⲇ, Ⲇ * 171, Ⲇ * 356);
		ᐃ.bezierCurveTo(Ⲇ * 184, Ⲇ * 358, 184 * Ⲇ, Ⲇ * 358, Ⲇ * 197, Ⲇ * 360);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 129, 338 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 137, 336 * Ⲇ, 137 * Ⲇ, Ⲇ * 336, 145 * Ⲇ, Ⲇ * 334);
		ᐃ.bezierCurveTo(Ⲇ * 152.5, Ⲇ * 338, Ⲇ * 152.5, 338 * Ⲇ, 160 * Ⲇ, Ⲇ * 342);
		ᐃ.bezierCurveTo(Ⲇ * 184, 224 * Ⲇ, Ⲇ * 184, 224 * Ⲇ, Ⲇ * 208, 106 * Ⲇ);
		ᐃ.bezierCurveTo(197 * Ⲇ, 88 * Ⲇ, 187 * Ⲇ, Ⲇ * 70, 186 * Ⲇ, 70 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 169.5, Ⲇ * 83, Ⲇ * 169.5, 83 * Ⲇ, 153 * Ⲇ, 96 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⵠΔⲆ;
		ᐃ.translate(-20 * Ⲇ, Ⲇ * -20);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 112, 356 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 124, Ⲇ * 220.5, 124 * Ⲇ, 220.5 * Ⲇ, 136 * Ⲇ, Ⲇ * 85);
		ᐃ.bezierCurveTo(Ⲇ * 162.5, Ⲇ * 65.5, Ⲇ * 162.5, 65.5 * Ⲇ, 189 * Ⲇ, Ⲇ * 46);
		ᐃ.bezierCurveTo(Ⲇ * 208.5, 72.5 * Ⲇ, Ⲇ * 208.5, Ⲇ * 72.5, 228 * Ⲇ, 99 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 200, Ⲇ * 232, 200 * Ⲇ, Ⲇ * 232, Ⲇ * 172, 365 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * 12.5);
		ᐃ.save();
		ᐃ.translate(131 * Ⲇ, Ⲇ * 423);
		ᐃ.rotate(.16);
		ᐃᐃᐃ(ᐃ, -14 * Ⲇ, Ⲇ * -53, Ⲇ * 28, Ⲇ * 106, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⵠⲆ], ᐃⲆ[5], Ⲇ * 12.5);
		ᐃ.save();
		ᐃ.translate(122 * Ⲇ, Ⲇ * 480);
		ᐃ.rotate(1.72);
		ᐃⵠΔⵠ(ᐃ, ΔᐃΔΔ, 26.476404589747453 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆ], ᐃⲆ[2], Ⲇ * 12.5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 210, Ⲇ * 387);
		ᐃ.bezierCurveTo(138 * Ⲇ, Ⲇ * 376, 138 * Ⲇ, 376 * Ⲇ, Ⲇ * 66, Ⲇ * 365);
		ᐃ.bezierCurveTo(Ⲇ * 76, Ⲇ * 355, Ⲇ * 76, Ⲇ * 355, Ⲇ * 86, Ⲇ * 345);
		ᐃ.bezierCurveTo(99 * Ⲇ, 346.5 * Ⲇ, Ⲇ * 99, 346.5 * Ⲇ, 112 * Ⲇ, 348 * Ⲇ);
		ᐃ.bezierCurveTo(128.5 * Ⲇ, Ⲇ * 344, Ⲇ * 128.5, 344 * Ⲇ, 145 * Ⲇ, Ⲇ * 340);
		ᐃ.bezierCurveTo(158 * Ⲇ, 348 * Ⲇ, Ⲇ * 158, Ⲇ * 348, 171 * Ⲇ, Ⲇ * 356);
		ᐃ.bezierCurveTo(184 * Ⲇ, Ⲇ * 358, Ⲇ * 184, 358 * Ⲇ, Ⲇ * 197, 360 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * 12.5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 129, Ⲇ * 338);
		ᐃ.bezierCurveTo(Ⲇ * 137, Ⲇ * 336, 137 * Ⲇ, 336 * Ⲇ, Ⲇ * 145, 334 * Ⲇ);
		ᐃ.bezierCurveTo(152.5 * Ⲇ, 338 * Ⲇ, 152.5 * Ⲇ, 338 * Ⲇ, Ⲇ * 160, Ⲇ * 342);
		ᐃ.bezierCurveTo(184 * Ⲇ, Ⲇ * 224, Ⲇ * 184, 224 * Ⲇ, Ⲇ * 208, 106 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 197, 88 * Ⲇ, 187 * Ⲇ, Ⲇ * 70, 186 * Ⲇ, Ⲇ * 70);
		ᐃ.bezierCurveTo(169.5 * Ⲇ, 83 * Ⲇ, 169.5 * Ⲇ, 83 * Ⲇ, 153 * Ⲇ, Ⲇ * 96);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		return ⲆⲆ
	}

	function ΔⲆⲆᐃΔΔⲆ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 104 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 112;
		ᐃ.translate(ᐃΔΔ, 15 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(16 * Ⲇ, 44 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 30.5, Ⲇ * 48, 30.5 * Ⲇ, Ⲇ * 48, 45 * Ⲇ, Ⲇ * 52);
		ᐃ.bezierCurveTo(Ⲇ * 36.5, Ⲇ * 63, Ⲇ * 36.5, 63 * Ⲇ, Ⲇ * 28, Ⲇ * 74);
		ᐃ.bezierCurveTo(Ⲇ * 32, Ⲇ * 86, 61 * Ⲇ, 92 * Ⲇ, Ⲇ * 78, 76 * Ⲇ);
		ᐃ.bezierCurveTo(93 * Ⲇ, Ⲇ * 62, 92 * Ⲇ, Ⲇ * 40, Ⲇ * 80, Ⲇ * 26);
		ᐃ.bezierCurveTo(Ⲇ * 65, 11 * Ⲇ, 42 * Ⲇ, Ⲇ * ᐃΔⲆⲆⲆ, 34 * Ⲇ, 21 * Ⲇ);
		ᐃ.bezierCurveTo(22 * Ⲇ, 27 * Ⲇ, Ⲇᐃⵠᐃᐃ * Ⲇ, Ⲇ * 39, Ⲇ * ΔⵠⵠΔⵠⵠᐃ, Ⲇ * 44);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, Ⲇ * -15);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ⲆⲆⵠᐃΔ, 44 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 30.5, 48 * Ⲇ, 30.5 * Ⲇ, Ⲇ * 48, Ⲇ * 45, 52 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 36.5, Ⲇ * 63, Ⲇ * 36.5, 63 * Ⲇ, 28 * Ⲇ, 74 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 32, 86 * Ⲇ, Ⲇ * 61, Ⲇ * 92, Ⲇ * 78, Ⲇ * 76);
		ᐃ.bezierCurveTo(93 * Ⲇ, 62 * Ⲇ, Ⲇ * 92, 40 * Ⲇ, 80 * Ⲇ, Ⲇ * 26);
		ᐃ.bezierCurveTo(65 * Ⲇ, Ⲇ * ᐃᐃⵠΔⵠⲆⲆ, 42 * Ⲇ, ᐃⵠᐃⲆⲆⵠⲆ * Ⲇ, Ⲇ * 34, 21 * Ⲇ);
		ᐃ.bezierCurveTo(22 * Ⲇ, Ⲇ * 27, ⲆᐃΔᐃⲆᐃⵠ * Ⲇ, Ⲇ * 39, ᐃᐃᐃⵠΔⲆΔ * Ⲇ, Ⲇ * 44);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆΔ], ᐃⲆ[ΔⲆⲆⵠ], ⵠⲆΔⲆᐃ * Ⲇ);
		return ⲆⲆ
	}

	function ⲆⲆⵠⵠⵠΔⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 321;
		ⲆⲆ.height = 284 * Ⲇ;
		ᐃ.translate(Ⲇ * 100, Ⲇ * 30);
		ᐃ.translate(ΔΔⵠΔ * Ⲇ, 10 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(58 * Ⲇ, 33 * Ⲇ);
		ᐃ.bezierCurveTo(81 * Ⲇ, 22 * Ⲇ, 93 * Ⲇ, Ⲇ * 26, 123 * Ⲇ, Ⲇ * 47);
		ᐃ.bezierCurveTo(Ⲇ * 160, Ⲇ * 73, Ⲇ * 169, 80 * Ⲇ, 191 * Ⲇ, 99 * Ⲇ);
		ᐃ.bezierCurveTo(202 * Ⲇ, 107 * Ⲇ, Ⲇ * 211, 118 * Ⲇ, Ⲇ * 195, 151 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 181, 183 * Ⲇ, 157 * Ⲇ, 192 * Ⲇ, Ⲇ * 129, 174 * Ⲇ);
		ᐃ.bezierCurveTo(78 * Ⲇ, Ⲇ * 140, 68 * Ⲇ, 129 * Ⲇ, 37 * Ⲇ, Ⲇ * 94);
		ᐃ.bezierCurveTo(15 * Ⲇ, 68 * Ⲇ, 25 * Ⲇ, 52 * Ⲇ, Ⲇ * 56, Ⲇ * 34);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]);
		ᐃ.globalAlpha = ⵠⲆⲆⲆ;
		ᐃ.translate(Ⲇ * -ΔⵠⲆᐃⵠ, -10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(58 * Ⲇ, Ⲇ * 33);
		ᐃ.bezierCurveTo(81 * Ⲇ, Ⲇ * 22, Ⲇ * 93, 26 * Ⲇ, 123 * Ⲇ, 47 * Ⲇ);
		ᐃ.bezierCurveTo(160 * Ⲇ, 73 * Ⲇ, Ⲇ * 169, Ⲇ * 80, Ⲇ * 191, Ⲇ * 99);
		ᐃ.bezierCurveTo(Ⲇ * 202, Ⲇ * 107, 211 * Ⲇ, Ⲇ * 118, Ⲇ * 195, Ⲇ * 151);
		ᐃ.bezierCurveTo(181 * Ⲇ, 183 * Ⲇ, 157 * Ⲇ, Ⲇ * 192, Ⲇ * 129, 174 * Ⲇ);
		ᐃ.bezierCurveTo(78 * Ⲇ, 140 * Ⲇ, Ⲇ * 68, 129 * Ⲇ, 37 * Ⲇ, Ⲇ * 94);
		ᐃ.bezierCurveTo(ⵠΔⵠᐃⲆⵠⵠ * Ⲇ, 68 * Ⲇ, Ⲇ * 25, Ⲇ * 52, Ⲇ * 56, Ⲇ * 34);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 167, Ⲇ * 120);
		ᐃ.bezierCurveTo(196 * Ⲇ, 106 * Ⲇ, 207 * Ⲇ, 111 * Ⲇ, 199 * Ⲇ, 135 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 185, 172 * Ⲇ, Ⲇ * 166, Ⲇ * 187, 145 * Ⲇ, Ⲇ * 179);
		ᐃ.bezierCurveTo(Ⲇ * 118, Ⲇ * 166, Ⲇ * 127, Ⲇ * 139, Ⲇ * 166, 121 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(25 * Ⲇ, Ⲇ * 64);
		ᐃ.bezierCurveTo(59 * Ⲇ, Ⲇ * 96, Ⲇ * 97, Ⲇ * 128, Ⲇ * 129, 151 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 126, Ⲇ * 163, Ⲇ * 134, 174 * Ⲇ, 142 * Ⲇ, Ⲇ * 180);
		ᐃ.bezierCurveTo(Ⲇ * 114, Ⲇ * 170, 68 * Ⲇ, 134 * Ⲇ, Ⲇ * 31, Ⲇ * 85);
		ᐃ.bezierCurveTo(24 * Ⲇ, Ⲇ * 71, 24 * Ⲇ, Ⲇ * 70, Ⲇ * 25, 65 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(161 * Ⲇ, 141 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 181, Ⲇ * 131, 186 * Ⲇ, 135 * Ⲇ, 173 * Ⲇ, 152 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 163, 163 * Ⲇ, Ⲇ * 155, 161 * Ⲇ, 151 * Ⲇ, 150 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 147, 140 * Ⲇ, 155 * Ⲇ, Ⲇ * 131, 175 * Ⲇ, Ⲇ * 125);
		ᐃ.bezierCurveTo(Ⲇ * 190, Ⲇ * 120, Ⲇ * 196, 121 * Ⲇ, Ⲇ * 189, Ⲇ * 143);
		ᐃ.bezierCurveTo(182 * Ⲇ, Ⲇ * 167, Ⲇ * 169, Ⲇ * 174, 157 * Ⲇ, Ⲇ * 174);
		ᐃ.bezierCurveTo(Ⲇ * 138, 172 * Ⲇ, Ⲇ * 139, 162 * Ⲇ, 140 * Ⲇ, Ⲇ * 156);
		ᐃⵠ(ᐃ, ᐃΔⵠᐃⵠ, ᐃⲆ[ⲆⵠⵠⲆ], 4 * Ⲇ);
		ᐃ.translate(Ⲇ * -ⵠⲆΔᐃΔ, -30 * Ⲇ);
		ᐃ.translate(Ⲇ * ⲆΔⲆᐃⵠ, 70 * Ⲇ);
		ᐃ.translate(5 * Ⲇ, Ⲇ * 10);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(58 * Ⲇ, 33 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 81, 22 * Ⲇ, 93 * Ⲇ, 26 * Ⲇ, 123 * Ⲇ, 47 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 160, 73 * Ⲇ, 169 * Ⲇ, 80 * Ⲇ, Ⲇ * 191, 99 * Ⲇ);
		ᐃ.bezierCurveTo(202 * Ⲇ, 107 * Ⲇ, 211 * Ⲇ, 118 * Ⲇ, Ⲇ * 195, 151 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 181, 183 * Ⲇ, 157 * Ⲇ, Ⲇ * 192, 129 * Ⲇ, 174 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 78, Ⲇ * 140, 68 * Ⲇ, Ⲇ * 129, Ⲇ * 37, 94 * Ⲇ);
		ᐃ.bezierCurveTo(15 * Ⲇ, Ⲇ * 68, Ⲇ * 25, Ⲇ * 52, 56 * Ⲇ, Ⲇ * 34);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ΔⲆΔᐃ;
		ᐃ.translate(Ⲇ * -5, -ⵠᐃᐃⵠⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 58, 33 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 81, Ⲇ * 22, 93 * Ⲇ, 26 * Ⲇ, Ⲇ * 123, Ⲇ * 47);
		ᐃ.bezierCurveTo(Ⲇ * 160, Ⲇ * 73, Ⲇ * 169, 80 * Ⲇ, 191 * Ⲇ, 99 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 202, Ⲇ * 107, 211 * Ⲇ, Ⲇ * 118, 195 * Ⲇ, 151 * Ⲇ);
		ᐃ.bezierCurveTo(181 * Ⲇ, 183 * Ⲇ, Ⲇ * 157, Ⲇ * 192, 129 * Ⲇ, Ⲇ * 174);
		ᐃ.bezierCurveTo(78 * Ⲇ, Ⲇ * 140, 68 * Ⲇ, 129 * Ⲇ, 37 * Ⲇ, 94 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ΔⵠΔᐃΔᐃᐃ, Ⲇ * 68, 25 * Ⲇ, Ⲇ * 52, 56 * Ⲇ, Ⲇ * 34);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 167, 120 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 196, 106 * Ⲇ, 207 * Ⲇ, Ⲇ * 111, Ⲇ * 199, Ⲇ * 135);
		ᐃ.bezierCurveTo(Ⲇ * 185, 172 * Ⲇ, 166 * Ⲇ, 187 * Ⲇ, 145 * Ⲇ, Ⲇ * 179);
		ᐃ.bezierCurveTo(Ⲇ * 118, Ⲇ * 166, 127 * Ⲇ, Ⲇ * 139, 166 * Ⲇ, Ⲇ * 121);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(25 * Ⲇ, 64 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 59, Ⲇ * 96, 97 * Ⲇ, Ⲇ * 128, 129 * Ⲇ, Ⲇ * 151);
		ᐃ.bezierCurveTo(126 * Ⲇ, Ⲇ * 163, 134 * Ⲇ, 174 * Ⲇ, Ⲇ * 142, Ⲇ * 180);
		ᐃ.bezierCurveTo(Ⲇ * 114, Ⲇ * 170, 68 * Ⲇ, Ⲇ * 134, Ⲇ * 31, Ⲇ * 85);
		ᐃ.bezierCurveTo(24 * Ⲇ, Ⲇ * 71, Ⲇ * 24, 70 * Ⲇ, Ⲇ * 25, Ⲇ * 65);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠΔⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(161 * Ⲇ, Ⲇ * 141);
		ᐃ.bezierCurveTo(Ⲇ * 181, 131 * Ⲇ, Ⲇ * 186, 135 * Ⲇ, Ⲇ * 173, Ⲇ * 152);
		ᐃ.bezierCurveTo(Ⲇ * 163, Ⲇ * 163, 155 * Ⲇ, 161 * Ⲇ, 151 * Ⲇ, Ⲇ * 150);
		ᐃ.bezierCurveTo(147 * Ⲇ, 140 * Ⲇ, Ⲇ * 155, 131 * Ⲇ, 175 * Ⲇ, 125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 190, 120 * Ⲇ, 196 * Ⲇ, 121 * Ⲇ, Ⲇ * 189, 143 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 182, Ⲇ * 167, Ⲇ * 169, 174 * Ⲇ, 157 * Ⲇ, Ⲇ * 174);
		ᐃ.bezierCurveTo(138 * Ⲇ, 172 * Ⲇ, 139 * Ⲇ, 162 * Ⲇ, Ⲇ * 140, Ⲇ * 156);
		ᐃⵠ(ᐃ, ΔᐃᐃⵠⲆ, ᐃⲆ[4], 4 * Ⲇ);
		ᐃ.translate(Ⲇ * 20, Ⲇ * -80);
		ᐃ.translate(ⲆΔⵠⵠᐃ * Ⲇ, ⵠΔΔΔⵠ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(58 * Ⲇ, Ⲇ * 33);
		ᐃ.bezierCurveTo(81 * Ⲇ, 22 * Ⲇ, 93 * Ⲇ, 26 * Ⲇ, Ⲇ * 123, Ⲇ * 47);
		ᐃ.bezierCurveTo(Ⲇ * 160, Ⲇ * 73, 169 * Ⲇ, Ⲇ * 80, Ⲇ * 191, 99 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 202, 107 * Ⲇ, 211 * Ⲇ, Ⲇ * 118, 195 * Ⲇ, 151 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 181, Ⲇ * 183, 157 * Ⲇ, Ⲇ * 192, Ⲇ * 129, 174 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 78, Ⲇ * 140, 68 * Ⲇ, Ⲇ * 129, Ⲇ * 37, Ⲇ * 94);
		ᐃ.bezierCurveTo(Ⲇ * 15, Ⲇ * 68, 25 * Ⲇ, 52 * Ⲇ, 56 * Ⲇ, Ⲇ * 34);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⲆΔᐃΔ;
		ᐃ.translate(Ⲇ * -ᐃᐃⲆΔΔ, -10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 58, Ⲇ * 33);
		ᐃ.bezierCurveTo(81 * Ⲇ, 22 * Ⲇ, 93 * Ⲇ, Ⲇ * 26, Ⲇ * 123, Ⲇ * 47);
		ᐃ.bezierCurveTo(160 * Ⲇ, Ⲇ * 73, Ⲇ * 169, 80 * Ⲇ, 191 * Ⲇ, 99 * Ⲇ);
		ᐃ.bezierCurveTo(202 * Ⲇ, Ⲇ * 107, Ⲇ * 211, 118 * Ⲇ, Ⲇ * 195, Ⲇ * 151);
		ᐃ.bezierCurveTo(181 * Ⲇ, Ⲇ * 183, Ⲇ * 157, 192 * Ⲇ, 129 * Ⲇ, Ⲇ * 174);
		ᐃ.bezierCurveTo(Ⲇ * 78, Ⲇ * 140, Ⲇ * 68, Ⲇ * 129, 37 * Ⲇ, Ⲇ * 94);
		ᐃ.bezierCurveTo(ᐃΔΔᐃᐃ * Ⲇ, 68 * Ⲇ, 25 * Ⲇ, 52 * Ⲇ, 56 * Ⲇ, 34 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆ], ᐃⲆ[2], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 167, 120 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 196, Ⲇ * 106, Ⲇ * 207, Ⲇ * 111, Ⲇ * 199, 135 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 185, Ⲇ * 172, 166 * Ⲇ, Ⲇ * 187, Ⲇ * 145, Ⲇ * 179);
		ᐃ.bezierCurveTo(Ⲇ * 118, 166 * Ⲇ, 127 * Ⲇ, 139 * Ⲇ, Ⲇ * 166, Ⲇ * 121);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(25 * Ⲇ, 64 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 59, Ⲇ * 96, 97 * Ⲇ, 128 * Ⲇ, Ⲇ * 129, 151 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 126, 163 * Ⲇ, 134 * Ⲇ, 174 * Ⲇ, Ⲇ * 142, 180 * Ⲇ);
		ᐃ.bezierCurveTo(114 * Ⲇ, Ⲇ * 170, Ⲇ * 68, 134 * Ⲇ, 31 * Ⲇ, Ⲇ * 85);
		ᐃ.bezierCurveTo(Ⲇ * 24, Ⲇ * 71, 24 * Ⲇ, 70 * Ⲇ, 25 * Ⲇ, 65 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 161, 141 * Ⲇ);
		ᐃ.bezierCurveTo(181 * Ⲇ, Ⲇ * 131, Ⲇ * 186, Ⲇ * 135, 173 * Ⲇ, 152 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 163, Ⲇ * 163, 155 * Ⲇ, 161 * Ⲇ, Ⲇ * 151, 150 * Ⲇ);
		ᐃ.bezierCurveTo(147 * Ⲇ, Ⲇ * 140, 155 * Ⲇ, Ⲇ * 131, Ⲇ * 175, 125 * Ⲇ);
		ᐃ.bezierCurveTo(190 * Ⲇ, 120 * Ⲇ, 196 * Ⲇ, 121 * Ⲇ, Ⲇ * 189, Ⲇ * 143);
		ᐃ.bezierCurveTo(Ⲇ * 182, Ⲇ * 167, Ⲇ * 169, Ⲇ * 174, Ⲇ * 157, 174 * Ⲇ);
		ᐃ.bezierCurveTo(138 * Ⲇ, Ⲇ * 172, 139 * Ⲇ, Ⲇ * 162, 140 * Ⲇ, 156 * Ⲇ);
		ᐃⵠ(ᐃ, ⲆᐃⵠⲆⲆ, ᐃⲆ[ΔᐃΔⲆΔ], Ⲇ * 4);
		return ⲆⲆ
	}

	function ⲆⲆⲆⵠⵠⵠⵠⵠⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 217 * Ⲇ;
		ⲆⲆ.height = 215 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(79 * Ⲇ, 113 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 135, Ⲇ * 98, Ⲇ * 136, Ⲇ * 96, 142 * Ⲇ, 97 * Ⲇ);
		ᐃ.bezierCurveTo(167 * Ⲇ, 106 * Ⲇ, 167 * Ⲇ, Ⲇ * 106, 171 * Ⲇ, 109 * Ⲇ);
		ᐃ.bezierCurveTo(173 * Ⲇ, Ⲇ * 120, Ⲇ * 173, Ⲇ * 134, 169 * Ⲇ, 141 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 140, 149.5 * Ⲇ, 140 * Ⲇ, Ⲇ * 149.5, 111 * Ⲇ, Ⲇ * 158);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(154 * Ⲇ, Ⲇ * 103);
		ᐃ.bezierCurveTo(Ⲇ * 167, Ⲇ * 91, Ⲇ * 175, Ⲇ * 87, 176 * Ⲇ, 94 * Ⲇ);
		ᐃ.bezierCurveTo(175 * Ⲇ, 102 * Ⲇ, Ⲇ * 176, 102 * Ⲇ, 186 * Ⲇ, 103 * Ⲇ);
		ᐃ.bezierCurveTo(191 * Ⲇ, 104 * Ⲇ, 192 * Ⲇ, Ⲇ * 105, Ⲇ * 185, 116 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 183, 120 * Ⲇ, 191 * Ⲇ, Ⲇ * 124, Ⲇ * 189, 129 * Ⲇ);
		ᐃ.bezierCurveTo(185 * Ⲇ, 139 * Ⲇ, Ⲇ * 178, 134 * Ⲇ, Ⲇ * 166, Ⲇ * 131);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆⵠᐃ], ⲆⵠⵠⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(60 * Ⲇ, Ⲇ * 46);
		ᐃ.bezierCurveTo(60 * Ⲇ, 34 * Ⲇ, 60 * Ⲇ, 29 * Ⲇ, Ⲇ * 56, Ⲇ * ΔⲆⲆᐃⵠⵠᐃ);
		ᐃ.bezierCurveTo(52 * Ⲇ, Ⲇ * ᐃⵠⵠⵠⲆΔⲆ, 52 * Ⲇ, Ⲇ * ΔⲆⲆⲆⲆⵠⲆ, Ⲇ * 49, 24 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 48, 27 * Ⲇ, Ⲇ * 46, 28 * Ⲇ, 39 * Ⲇ, Ⲇ * 27);
		ᐃ.bezierCurveTo(Ⲇ * 33, 26 * Ⲇ, 34 * Ⲇ, Ⲇ * 31, Ⲇ * 35, Ⲇ * 37);
		ᐃ.bezierCurveTo(36 * Ⲇ, Ⲇ * 41, 27 * Ⲇ, Ⲇ * 46, 29 * Ⲇ, Ⲇ * 52);
		ᐃ.bezierCurveTo(Ⲇ * 36, Ⲇ * 55, 35 * Ⲇ, Ⲇ * 56, Ⲇ * 31, Ⲇ * 59);
		ᐃ.bezierCurveTo(Ⲇ * 27, Ⲇ * 65, Ⲇ * 32, 64 * Ⲇ, Ⲇ * 35, 62 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔΔ], ᐃⲆ[ⲆΔⲆⲆ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(46 * Ⲇ, 50 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 51, Ⲇ * 35, Ⲇ * 70, Ⲇ * 32, 78 * Ⲇ, Ⲇ * 29);
		ᐃ.bezierCurveTo(84 * Ⲇ, 27 * Ⲇ, 113 * Ⲇ, Ⲇ * 36, Ⲇ * 127, 41 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 140, Ⲇ * 47, 147 * Ⲇ, 69 * Ⲇ, Ⲇ * 137, 73 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 124, Ⲇ * 92, Ⲇ * 117, 92 * Ⲇ, Ⲇ * 109, Ⲇ * 94);
		ᐃ.bezierCurveTo(101 * Ⲇ, 96 * Ⲇ, 89 * Ⲇ, 92 * Ⲇ, 65 * Ⲇ, Ⲇ * 83);
		ᐃ.bezierCurveTo(Ⲇ * 54, Ⲇ * 80, Ⲇ * 46, 58 * Ⲇ, 46 * Ⲇ, 51 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⲆΔΔ], ᐃⲆ[ᐃᐃⲆΔΔ], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 51, 40 * Ⲇ);
		ᐃ.bezierCurveTo(49 * Ⲇ, 34 * Ⲇ, Ⲇ * 49, 34 * Ⲇ, Ⲇ * 47, Ⲇ * 28);
		ᐃ.bezierCurveTo(Ⲇ * 38, Ⲇ * 28, Ⲇ * 34, Ⲇ * 27, Ⲇ * 37, Ⲇ * 37);
		ᐃ.bezierCurveTo(Ⲇ * 43, 40.5 * Ⲇ, Ⲇ * 43, 40.5 * Ⲇ, 49 * Ⲇ, Ⲇ * 44);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠⲆΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(29 * Ⲇ, Ⲇ * 48);
		ᐃ.bezierCurveTo(Ⲇ * 38, 49 * Ⲇ, Ⲇ * 38, 49 * Ⲇ, Ⲇ * 47, Ⲇ * 50);
		ᐃ.bezierCurveTo(46.5 * Ⲇ, Ⲇ * 51.5, 46.5 * Ⲇ, Ⲇ * 51.5, Ⲇ * 46, 53 * Ⲇ);
		ᐃ.bezierCurveTo(40 * Ⲇ, 53.5 * Ⲇ, Ⲇ * 40, 53.5 * Ⲇ, Ⲇ * 34, 54 * Ⲇ);
		ᐃ.bezierCurveTo(29 * Ⲇ, 51 * Ⲇ, Ⲇ * 32, 51.5 * Ⲇ, 30 * Ⲇ, Ⲇ * 49);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[7]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 89, 61 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 101, Ⲇ * 70, Ⲇ * 109, 90 * Ⲇ, Ⲇ * 102, 90 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 97, 91 * Ⲇ, Ⲇ * 87, Ⲇ * 91, Ⲇ * 60, 80 * Ⲇ);
		ᐃ.bezierCurveTo(48 * Ⲇ, 65 * Ⲇ, Ⲇ * 46, Ⲇ * 56, 48 * Ⲇ, 53 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 50, Ⲇ * 52, 66 * Ⲇ, 56 * Ⲇ, 89 * Ⲇ, Ⲇ * 61);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[7]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 99, Ⲇ * 59);
		ᐃ.bezierCurveTo(115 * Ⲇ, Ⲇ * 45, Ⲇ * 125, 42 * Ⲇ, 129 * Ⲇ, Ⲇ * 47);
		ᐃ.bezierCurveTo(138 * Ⲇ, Ⲇ * 56, Ⲇ * 140, Ⲇ * 63, 138 * Ⲇ, Ⲇ * 67);
		ᐃ.bezierCurveTo(131 * Ⲇ, 80 * Ⲇ, Ⲇ * 122, Ⲇ * 87, 114 * Ⲇ, Ⲇ * 90);
		ᐃ.bezierCurveTo(105 * Ⲇ, 80 * Ⲇ, Ⲇ * 95, Ⲇ * 62, 98 * Ⲇ, 61 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠⲆΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 118, Ⲇ * 62);
		ᐃ.bezierCurveTo(Ⲇ * 139, 45 * Ⲇ, Ⲇ * 153, Ⲇ * 40, Ⲇ * 150, Ⲇ * 48);
		ᐃ.bezierCurveTo(Ⲇ * 145, Ⲇ * 57, Ⲇ * 157, Ⲇ * 63, 157 * Ⲇ, 70 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 157, Ⲇ * 74, Ⲇ * 142, Ⲇ * 77, Ⲇ * 142, 85 * Ⲇ);
		ᐃ.bezierCurveTo(143 * Ⲇ, Ⲇ * 91, Ⲇ * 141, Ⲇ * 92, 135 * Ⲇ, Ⲇ * 90);
		ᐃ.bezierCurveTo(132 * Ⲇ, 90 * Ⲇ, 132 * Ⲇ, Ⲇ * 96, 124 * Ⲇ, 99 * Ⲇ);
		ᐃ.bezierCurveTo(118 * Ⲇ, Ⲇ * 93, 116 * Ⲇ, 77 * Ⲇ, 116 * Ⲇ, Ⲇ * 64);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⲆⲆⵠᐃⲆ], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(90 * Ⲇ, 130 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 157, Ⲇ * 115, 165 * Ⲇ, 111 * Ⲇ, 167 * Ⲇ, 115 * Ⲇ);
		ᐃ.bezierCurveTo(170 * Ⲇ, 117 * Ⲇ, 171 * Ⲇ, Ⲇ * 135, Ⲇ * 167, Ⲇ * 141);
		ᐃ.bezierCurveTo(Ⲇ * 135.5, Ⲇ * 149.5, Ⲇ * 135.5, Ⲇ * 149.5, 104 * Ⲇ, Ⲇ * 158);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 53, Ⲇ * 119);
		ᐃ.bezierCurveTo(46 * Ⲇ, 120 * Ⲇ, 40 * Ⲇ, 118 * Ⲇ, 34 * Ⲇ, Ⲇ * 116);
		ᐃ.bezierCurveTo(Ⲇ * 28, Ⲇ * 111, Ⲇ * 41, 112 * Ⲇ, 39 * Ⲇ, Ⲇ * 108);
		ᐃ.bezierCurveTo(36 * Ⲇ, Ⲇ * 100, 49 * Ⲇ, Ⲇ * 102, 53 * Ⲇ, Ⲇ * 95);
		ᐃ.bezierCurveTo(Ⲇ * 57, 84 * Ⲇ, Ⲇ * 58, 85 * Ⲇ, Ⲇ * 63, 93 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 68, 96 * Ⲇ, Ⲇ * 72, 94 * Ⲇ, 80 * Ⲇ, Ⲇ * 88);
		ᐃ.bezierCurveTo(80 * Ⲇ, 96 * Ⲇ, Ⲇ * 78, 107 * Ⲇ, Ⲇ * 66, Ⲇ * 115);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃⵠΔⲆᐃ], ᐃⲆ[ⵠⵠⲆᐃᐃ], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 118, 64 * Ⲇ);
		ᐃ.bezierCurveTo(133.5 * Ⲇ, 57 * Ⲇ, 133.5 * Ⲇ, Ⲇ * 57, Ⲇ * 149, Ⲇ * 50);
		ᐃ.bezierCurveTo(145 * Ⲇ, 54 * Ⲇ, 154 * Ⲇ, 65 * Ⲇ, 157 * Ⲇ, Ⲇ * 68);
		ᐃ.bezierCurveTo(138.5 * Ⲇ, 66.5 * Ⲇ, Ⲇ * 138.5, 66.5 * Ⲇ, Ⲇ * 120, 65 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(118 * Ⲇ, 65 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 129, Ⲇ * 77, 129 * Ⲇ, Ⲇ * 77, 140 * Ⲇ, 89 * Ⲇ);
		ᐃ.bezierCurveTo(131 * Ⲇ, Ⲇ * 89, 130 * Ⲇ, 92 * Ⲇ, Ⲇ * 128, Ⲇ * 96);
		ᐃ.bezierCurveTo(Ⲇ * 123.5, 82 * Ⲇ, 123.5 * Ⲇ, Ⲇ * 82, Ⲇ * 119, Ⲇ * 68);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆⵠⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 51, 112 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 63, Ⲇ * 108, Ⲇ * 78, 111 * Ⲇ, 88 * Ⲇ, 112 * Ⲇ);
		ᐃ.bezierCurveTo(98 * Ⲇ, 122 * Ⲇ, 117 * Ⲇ, Ⲇ * 136, Ⲇ * 125, 157 * Ⲇ);
		ᐃ.bezierCurveTo(123 * Ⲇ, Ⲇ * 180, Ⲇ * 123, 185 * Ⲇ, Ⲇ * 118, 186 * Ⲇ);
		ᐃ.bezierCurveTo(101 * Ⲇ, Ⲇ * 190, 89 * Ⲇ, Ⲇ * 191, Ⲇ * 79, 187 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 53, Ⲇ * 165, 50 * Ⲇ, 153 * Ⲇ, Ⲇ * 47, Ⲇ * 144);
		ᐃ.bezierCurveTo(46 * Ⲇ, 128 * Ⲇ, 46 * Ⲇ, Ⲇ * 124, Ⲇ * 50, 112 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⵠⵠᐃⵠΔ], ᐃⲆ[ⵠⲆⲆᐃⵠ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(50 * Ⲇ, 114 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 81, Ⲇ * 149, Ⲇ * 80, 147 * Ⲇ, 80 * Ⲇ, 149 * Ⲇ);
		ᐃ.bezierCurveTo(82 * Ⲇ, 155 * Ⲇ, Ⲇ * 80, 182 * Ⲇ, 74 * Ⲇ, 182 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 60, Ⲇ * 172, 52 * Ⲇ, Ⲇ * 157, 47 * Ⲇ, 144 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[11], ᐃⲆ[11], ΔΔᐃᐃⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(85 * Ⲇ, Ⲇ * 152);
		ᐃ.bezierCurveTo(99 * Ⲇ, Ⲇ * 150, 109 * Ⲇ, Ⲇ * 152, 119 * Ⲇ, Ⲇ * 156);
		ᐃ.bezierCurveTo(Ⲇ * 122, 163 * Ⲇ, 122 * Ⲇ, 174 * Ⲇ, 117 * Ⲇ, Ⲇ * 182);
		ᐃ.closePath();
		ᐃ.bezierCurveTo(Ⲇ * 93, Ⲇ * 188, Ⲇ * 82, Ⲇ * 187, Ⲇ * 83, Ⲇ * 179);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆΔᐃᐃⲆⵠ], ᐃⲆ[11], ⲆⵠⲆᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(104 * Ⲇ, 166 * Ⲇ);
		ᐃ.bezierCurveTo(133 * Ⲇ, 165 * Ⲇ, 142 * Ⲇ, 168 * Ⲇ, 137 * Ⲇ, Ⲇ * 173);
		ᐃ.bezierCurveTo(127 * Ⲇ, 177 * Ⲇ, Ⲇ * 137, 195 * Ⲇ, Ⲇ * 126, 196 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 112, Ⲇ * 195, Ⲇ * 112, 194 * Ⲇ, 109 * Ⲇ, 199 * Ⲇ);
		ᐃ.bezierCurveTo(105 * Ⲇ, Ⲇ * 205, Ⲇ * 102, Ⲇ * 195, Ⲇ * 96, Ⲇ * 197);
		ᐃ.bezierCurveTo(Ⲇ * 84, 201 * Ⲇ, 88 * Ⲇ, 198 * Ⲇ, 90 * Ⲇ, Ⲇ * 187);
		ᐃ.bezierCurveTo(96 * Ⲇ, 171 * Ⲇ, 97 * Ⲇ, Ⲇ * 170, 103 * Ⲇ, 167 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃΔᐃⵠᐃᐃ], ᐃⲆ[ᐃⵠᐃᐃᐃ], Ⲇ * ⵠᐃΔΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(105 * Ⲇ, 168 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 118, Ⲇ * 172.5, 118 * Ⲇ, 172.5 * Ⲇ, Ⲇ * 131, Ⲇ * 177);
		ᐃ.bezierCurveTo(133 * Ⲇ, 190 * Ⲇ, 132 * Ⲇ, 199 * Ⲇ, Ⲇ * 116, Ⲇ * 194);
		ᐃ.bezierCurveTo(Ⲇ * 110, Ⲇ * 182, 110 * Ⲇ, 182 * Ⲇ, Ⲇ * 104, Ⲇ * 170);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[10]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(102 * Ⲇ, 169 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 100.5, 182 * Ⲇ, Ⲇ * 100.5, Ⲇ * 182, Ⲇ * 99, Ⲇ * 195);
		ᐃ.bezierCurveTo(Ⲇ * 93.5, 196.5 * Ⲇ, 93.5 * Ⲇ, 196.5 * Ⲇ, 88 * Ⲇ, Ⲇ * 198);
		ᐃ.bezierCurveTo(94 * Ⲇ, Ⲇ * 176, Ⲇ * 96, Ⲇ * 174, 101 * Ⲇ, Ⲇ * 168);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[9], ᐃⲆ[ⲆᐃΔᐃⵠᐃᐃ], Ⲇ * ᐃᐃΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(64 * Ⲇ, 107 * Ⲇ);
		ᐃ.bezierCurveTo(64 * Ⲇ, Ⲇ * 101, Ⲇ * 64, 101 * Ⲇ, 64 * Ⲇ, 95 * Ⲇ);
		ᐃ.bezierCurveTo(57 * Ⲇ, Ⲇ * 86, 57 * Ⲇ, Ⲇ * 84, 53 * Ⲇ, Ⲇ * 97);
		ᐃ.bezierCurveTo(55 * Ⲇ, 103.5 * Ⲇ, 55 * Ⲇ, Ⲇ * 103.5, Ⲇ * 57, 110 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔⵠⲆ], ᐃⲆ[ⲆΔΔᐃⵠⵠⵠ], Ⲇ * ⲆΔⵠᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 40, 108 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 46.5, Ⲇ * 111, Ⲇ * 46.5, Ⲇ * 111, 53 * Ⲇ, Ⲇ * 114);
		ᐃ.bezierCurveTo(Ⲇ * 50.5, 117 * Ⲇ, Ⲇ * 50.5, Ⲇ * 117, 48 * Ⲇ, Ⲇ * 120);
		ᐃ.bezierCurveTo(40.5 * Ⲇ, Ⲇ * 117.5, 40.5 * Ⲇ, 117.5 * Ⲇ, Ⲇ * 33, 115 * Ⲇ);
		ᐃ.bezierCurveTo(36 * Ⲇ, 112 * Ⲇ, Ⲇ * 36, 112 * Ⲇ, 39 * Ⲇ, Ⲇ * 109);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[11], ᐃⲆ[11], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 189, 106 * Ⲇ);
		ᐃ.bezierCurveTo(178.5 * Ⲇ, Ⲇ * 110.5, Ⲇ * 178.5, Ⲇ * 110.5, Ⲇ * 168, Ⲇ * 115);
		ᐃ.bezierCurveTo(168.5 * Ⲇ, 119 * Ⲇ, Ⲇ * 168.5, Ⲇ * 119, 169 * Ⲇ, Ⲇ * 123);
		ᐃ.bezierCurveTo(Ⲇ * 179, 124.5 * Ⲇ, 179 * Ⲇ, Ⲇ * 124.5, Ⲇ * 189, 126 * Ⲇ);
		ᐃ.bezierCurveTo(182 * Ⲇ, Ⲇ * 118, Ⲇ * 183, Ⲇ * 115, Ⲇ * 188, 106 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆΔᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(69 * Ⲇ, Ⲇ * 178);
		ᐃ.bezierCurveTo(69 * Ⲇ, Ⲇ * 141, 70 * Ⲇ, Ⲇ * 136, Ⲇ * 77, 137 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 88, Ⲇ * 133, Ⲇ * 101, Ⲇ * 134, Ⲇ * 108, Ⲇ * 137);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔΔⲆᐃ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 55, Ⲇ * 161);
		ᐃ.bezierCurveTo(54 * Ⲇ, 124 * Ⲇ, 55 * Ⲇ, 119 * Ⲇ, 62 * Ⲇ, 119 * Ⲇ);
		ᐃ.bezierCurveTo(74 * Ⲇ, 117 * Ⲇ, 85 * Ⲇ, Ⲇ * 117, 93 * Ⲇ, Ⲇ * 119);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃΔΔⵠ], ΔᐃΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 91, 29 * Ⲇ);
		ᐃ.bezierCurveTo(74 * Ⲇ, Ⲇ * 33, 62 * Ⲇ, Ⲇ * 46, 57 * Ⲇ, 54 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 57, 63 * Ⲇ, Ⲇ * 68, Ⲇ * 76, Ⲇ * 77, 87 * Ⲇ);
		ᐃⵠ(ᐃ, ΔⵠⲆᐃᐃ, ᐃⲆ[Δᐃᐃⵠᐃ], Ⲇ * ᐃⵠⲆⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(107 * Ⲇ, 33 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 82, Ⲇ * 51, 80 * Ⲇ, 52 * Ⲇ, 79 * Ⲇ, Ⲇ * 59);
		ᐃ.bezierCurveTo(78 * Ⲇ, Ⲇ * 65, Ⲇ * 93, 86 * Ⲇ, 101 * Ⲇ, Ⲇ * 93);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[6], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 130, 98 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 126.5, 103 * Ⲇ, 126.5 * Ⲇ, 103 * Ⲇ, 123 * Ⲇ, 108 * Ⲇ);
		ᐃ.bezierCurveTo(133.5 * Ⲇ, Ⲇ * 107, Ⲇ * 133.5, Ⲇ * 107, Ⲇ * 144, 106 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 138.5, Ⲇ * 110, 138.5 * Ⲇ, Ⲇ * 110, 133 * Ⲇ, Ⲇ * 114);
		ᐃ.bezierCurveTo(Ⲇ * 142, 114 * Ⲇ, Ⲇ * 142, Ⲇ * 114, Ⲇ * 151, Ⲇ * 114);
		ᐃ.bezierCurveTo(146.5 * Ⲇ, 119.5 * Ⲇ, 146.5 * Ⲇ, 119.5 * Ⲇ, Ⲇ * 142, 125 * Ⲇ);
		ᐃ.bezierCurveTo(146.5 * Ⲇ, Ⲇ * 127, Ⲇ * 146.5, 127 * Ⲇ, Ⲇ * 151, Ⲇ * 129);
		ᐃ.bezierCurveTo(Ⲇ * 147.5, 132 * Ⲇ, 147.5 * Ⲇ, 132 * Ⲇ, Ⲇ * 144, Ⲇ * 135);
		ᐃ.bezierCurveTo(Ⲇ * 148, Ⲇ * 137, 148 * Ⲇ, Ⲇ * 137, Ⲇ * 152, 139 * Ⲇ);
		ᐃ.bezierCurveTo(149 * Ⲇ, Ⲇ * 142.5, Ⲇ * 149, Ⲇ * 142.5, Ⲇ * 146, 146 * Ⲇ);
		ᐃⵠ(ᐃ, Ⲇᐃⵠⵠⵠ, ᐃⲆ[ᐃⵠᐃⲆ], 4 * Ⲇ);
		return ⲆⲆ
	}

	function ⵠΔᐃⲆΔᐃΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 154 * Ⲇ;
		ⲆⲆ.height = 261 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠⵠᐃ;
		ᐃ.translate(0, Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 125, Ⲇ * 69);
		ᐃ.bezierCurveTo(123.5 * Ⲇ, Ⲇ * 141.5, Ⲇ * 123.5, Ⲇ * 141.5, Ⲇ * 122, 214 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 123, 228 * Ⲇ, Ⲇ * 119, Ⲇ * 239, Ⲇ * 102, 239 * Ⲇ);
		ᐃ.bezierCurveTo(90 * Ⲇ, Ⲇ * 238, Ⲇ * 86, Ⲇ * 225, Ⲇ * 89, 197 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 92, 159 * Ⲇ, 92 * Ⲇ, 141 * Ⲇ, 94 * Ⲇ, Ⲇ * 84);
		ᐃ.bezierCurveTo(94 * Ⲇ, Ⲇ * 58, 87 * Ⲇ, 50 * Ⲇ, Ⲇ * 73, Ⲇ * 52);
		ᐃ.bezierCurveTo(Ⲇ * 53, Ⲇ * 54, 54 * Ⲇ, Ⲇ * 92, Ⲇ * 34, Ⲇ * 87);
		ᐃ.bezierCurveTo(ⲆⵠⵠᐃⵠΔⵠ * Ⲇ, 85 * Ⲇ, Ⲇ * 22, Ⲇ * 58, Ⲇ * 34, Ⲇ * 40);
		ᐃ.bezierCurveTo(44 * Ⲇ, 24 * Ⲇ, Ⲇ * 68, 17 * Ⲇ, 86 * Ⲇ, 21 * Ⲇ);
		ᐃ.bezierCurveTo(111 * Ⲇ, 23 * Ⲇ, 123 * Ⲇ, 39 * Ⲇ, 125 * Ⲇ, Ⲇ * 67);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, Ⲇ * -ΔΔⲆⲆⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 125, 69 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 123.5, 141.5 * Ⲇ, Ⲇ * 123.5, Ⲇ * 141.5, Ⲇ * 122, 214 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 123, 228 * Ⲇ, Ⲇ * 119, Ⲇ * 239, 102 * Ⲇ, 239 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 90, 238 * Ⲇ, 86 * Ⲇ, 225 * Ⲇ, 89 * Ⲇ, 197 * Ⲇ);
		ᐃ.bezierCurveTo(92 * Ⲇ, 159 * Ⲇ, Ⲇ * 92, 141 * Ⲇ, 94 * Ⲇ, 84 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 94, Ⲇ * 58, 87 * Ⲇ, 50 * Ⲇ, 73 * Ⲇ, 52 * Ⲇ);
		ᐃ.bezierCurveTo(53 * Ⲇ, 54 * Ⲇ, 54 * Ⲇ, Ⲇ * 92, 34 * Ⲇ, Ⲇ * 87);
		ᐃ.bezierCurveTo(Ⲇ * 13, 85 * Ⲇ, 22 * Ⲇ, 58 * Ⲇ, Ⲇ * 34, Ⲇ * 40);
		ᐃ.bezierCurveTo(44 * Ⲇ, Ⲇ * 24, Ⲇ * 68, Ⲇ * 17, 86 * Ⲇ, Ⲇ * 21);
		ᐃ.bezierCurveTo(Ⲇ * 111, Ⲇ * 23, Ⲇ * 123, Ⲇ * 39, Ⲇ * 125, 67 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 31, Ⲇ * 43);
		ᐃ.bezierCurveTo(Ⲇ * 31, Ⲇ * 61, Ⲇ * 43, 70 * Ⲇ, 51 * Ⲇ, 75 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 48, Ⲇ * 84, 41 * Ⲇ, Ⲇ * 89, 33 * Ⲇ, Ⲇ * 86);
		ᐃ.bezierCurveTo(23 * Ⲇ, Ⲇ * 88, 20 * Ⲇ, Ⲇ * 76, 23 * Ⲇ, 62 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(45 * Ⲇ, Ⲇ * 29);
		ᐃ.bezierCurveTo(49 * Ⲇ, 45 * Ⲇ, Ⲇ * 61, 54 * Ⲇ, 64 * Ⲇ, Ⲇ * 55);
		ᐃ.bezierCurveTo(67.5 * Ⲇ, Ⲇ * 53, Ⲇ * 67.5, Ⲇ * 53, Ⲇ * 71, Ⲇ * 51);
		ᐃ.bezierCurveTo(Ⲇ * 80, Ⲇ * 44, Ⲇ * 83, Ⲇ * 33, Ⲇ * 82, 20 * Ⲇ);
		ᐃ.bezierCurveTo(59 * Ⲇ, Ⲇ * ᐃᐃᐃΔᐃ, Ⲇ * 51, Ⲇ * 23, Ⲇ * 45, 30 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 86, Ⲇ * 56);
		ᐃ.bezierCurveTo(90 * Ⲇ, Ⲇ * 33, 103 * Ⲇ, Ⲇ * 25, Ⲇ * 105, 27 * Ⲇ);
		ᐃ.bezierCurveTo(116 * Ⲇ, 31 * Ⲇ, 121 * Ⲇ, Ⲇ * 45, Ⲇ * 122, Ⲇ * 50);
		ᐃ.bezierCurveTo(Ⲇ * 112, 62 * Ⲇ, 103 * Ⲇ, Ⲇ * 63, 91 * Ⲇ, Ⲇ * 62);
		ᐃ.bezierCurveTo(89 * Ⲇ, Ⲇ * 59.5, Ⲇ * 89, Ⲇ * 59.5, 87 * Ⲇ, 57 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 93, Ⲇ * 81);
		ᐃ.bezierCurveTo(Ⲇ * 109, Ⲇ * 82, Ⲇ * 123, Ⲇ * 70, 124 * Ⲇ, Ⲇ * 63);
		ᐃ.bezierCurveTo(124 * Ⲇ, Ⲇ * 75.5, Ⲇ * 124, Ⲇ * 75.5, Ⲇ * 124, Ⲇ * 88);
		ᐃ.bezierCurveTo(Ⲇ * 119, 99 * Ⲇ, 103 * Ⲇ, 103 * Ⲇ, 94 * Ⲇ, 103 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(93 * Ⲇ, Ⲇ * 124);
		ᐃ.bezierCurveTo(Ⲇ * 108, 125 * Ⲇ, 122 * Ⲇ, Ⲇ * 113, 124 * Ⲇ, 106 * Ⲇ);
		ᐃ.bezierCurveTo(124 * Ⲇ, 119 * Ⲇ, 124 * Ⲇ, 129 * Ⲇ, 124 * Ⲇ, Ⲇ * 132);
		ᐃ.bezierCurveTo(110 * Ⲇ, Ⲇ * 147, Ⲇ * 94, Ⲇ * 148, Ⲇ * 90, 147 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔᐃⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 90, Ⲇ * 170);
		ᐃ.bezierCurveTo(104 * Ⲇ, Ⲇ * 166, Ⲇ * 122, Ⲇ * 158, 122 * Ⲇ, 151 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 122, Ⲇ * 162.5, Ⲇ * 122, Ⲇ * 162.5, 122 * Ⲇ, Ⲇ * 174);
		ᐃ.bezierCurveTo(111 * Ⲇ, Ⲇ * 191, 97 * Ⲇ, Ⲇ * 191, Ⲇ * 89, Ⲇ * 191);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 88, 208 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ᐃⲆᐃᐃΔⵠᐃ, Ⲇ * 209, Ⲇ * 115, Ⲇ * 205, Ⲇ * 122, 193 * Ⲇ);
		ᐃ.bezierCurveTo(122 * Ⲇ, 205.5 * Ⲇ, 122 * Ⲇ, Ⲇ * 205.5, 122 * Ⲇ, Ⲇ * 218);
		ᐃ.bezierCurveTo(115 * Ⲇ, 229 * Ⲇ, Ⲇ * 103, Ⲇ * 235, Ⲇ * 90, 228 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 88, Ⲇ * 224, 88 * Ⲇ, Ⲇ * 217, 88 * Ⲇ, Ⲇ * 211);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.globalAlpha = .4;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 22, 81 * Ⲇ);
		ᐃ.bezierCurveTo(32 * Ⲇ, Ⲇ * 84, 41 * Ⲇ, 81 * Ⲇ, Ⲇ * 45, 68 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 50, 50 * Ⲇ, 62 * Ⲇ, 40 * Ⲇ, 79 * Ⲇ, Ⲇ * 43);
		ᐃ.bezierCurveTo(95 * Ⲇ, Ⲇ * 45, Ⲇ * 102, Ⲇ * 58, 101 * Ⲇ, Ⲇ * 81);
		ᐃ.bezierCurveTo(Ⲇ * 99.5, Ⲇ * 120.5, Ⲇ * 99.5, 120.5 * Ⲇ, Ⲇ * 98, 160 * Ⲇ);
		ᐃ.bezierCurveTo(96.5 * Ⲇ, 191.5 * Ⲇ, Ⲇ * 96.5, Ⲇ * 191.5, 95 * Ⲇ, Ⲇ * 223);
		ᐃ.bezierCurveTo(93 * Ⲇ, Ⲇ * 232, Ⲇ * 101, Ⲇ * 235, Ⲇ * 108, Ⲇ * 238);
		ᐃ.bezierCurveTo(100 * Ⲇ, 240 * Ⲇ, 90 * Ⲇ, 233 * Ⲇ, 90 * Ⲇ, Ⲇ * 224);
		ᐃ.bezierCurveTo(92 * Ⲇ, 157 * Ⲇ, 92 * Ⲇ, 157 * Ⲇ, Ⲇ * 94, 90 * Ⲇ);
		ᐃ.bezierCurveTo(94 * Ⲇ, 56 * Ⲇ, 89 * Ⲇ, 53 * Ⲇ, Ⲇ * 77, 51 * Ⲇ);
		ᐃ.bezierCurveTo(58 * Ⲇ, Ⲇ * 50, Ⲇ * 54, 59 * Ⲇ, Ⲇ * 49, 75 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 44, 91 * Ⲇ, Ⲇ * 28, Ⲇ * 90, 23 * Ⲇ, 81 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⵠ]);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(82 * Ⲇ, 123 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 88, Ⲇ * 130, 88 * Ⲇ, Ⲇ * 127, 94 * Ⲇ, Ⲇ * 128);
		ᐃ.bezierCurveTo(Ⲇ * 91, 136 * Ⲇ, Ⲇ * 94, Ⲇ * 137, 99 * Ⲇ, Ⲇ * 142);
		ᐃ.bezierCurveTo(97 * Ⲇ, Ⲇ * 149, 99 * Ⲇ, Ⲇ * 152, 105 * Ⲇ, Ⲇ * 155);
		ᐃ.bezierCurveTo(107 * Ⲇ, Ⲇ * 159, 113 * Ⲇ, Ⲇ * 159, Ⲇ * 120, 158 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 121, 160 * Ⲇ, Ⲇ * 125, Ⲇ * 163, Ⲇ * 132, 163 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 133, Ⲇ * 166, Ⲇ * 136, Ⲇ * 169, 138 * Ⲇ, Ⲇ * 170);
		ᐃ.bezierCurveTo(133 * Ⲇ, 171 * Ⲇ, Ⲇ * 132, 172 * Ⲇ, 129 * Ⲇ, 174 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 122, 170 * Ⲇ, Ⲇ * 120, Ⲇ * 170, 116 * Ⲇ, Ⲇ * 174);
		ᐃ.bezierCurveTo(Ⲇ * 108, 170.5 * Ⲇ, Ⲇ * 108, 170.5 * Ⲇ, Ⲇ * ᐃⲆᐃᐃΔⵠᐃ, Ⲇ * 167);
		ᐃ.bezierCurveTo(Ⲇ * 95, Ⲇ * 172, 94 * Ⲇ, Ⲇ * 179, 95 * Ⲇ, 184 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 87, Ⲇ * 185, Ⲇ * 87, Ⲇ * 189, Ⲇ * 88, 194 * Ⲇ);
		ᐃ.bezierCurveTo(82 * Ⲇ, 194 * Ⲇ, 81 * Ⲇ, 195 * Ⲇ, Ⲇ * 79, 197 * Ⲇ);
		ᐃ.bezierCurveTo(78 * Ⲇ, Ⲇ * 192, 78 * Ⲇ, 191 * Ⲇ, 77 * Ⲇ, 189 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 81, 185 * Ⲇ, 82 * Ⲇ, Ⲇ * 183, 80 * Ⲇ, 176 * Ⲇ);
		ᐃ.bezierCurveTo(89 * Ⲇ, 170 * Ⲇ, Ⲇ * 92, Ⲇ * 168, 95 * Ⲇ, 163 * Ⲇ);
		ᐃ.bezierCurveTo(91 * Ⲇ, Ⲇ * 151, Ⲇ * 88, Ⲇ * 151, Ⲇ * 82, 147 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 85, 142 * Ⲇ, 85 * Ⲇ, 137 * Ⲇ, Ⲇ * 81, 133 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 84, 127 * Ⲇ, 84 * Ⲇ, 125 * Ⲇ, 82 * Ⲇ, 124 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ᐃΔⵠΔᐃ], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, Ⲇ * 107, 152 * Ⲇ, 9 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[6]);
		ᐃΔⵠ(ᐃ, 105 * Ⲇ, Ⲇ * 173, Ⲇ * ᐃⵠⲆⲆᐃ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃⵠΔΔ]);
		ᐃΔⵠ(ᐃ, 87 * Ⲇ, 161 * Ⲇ, Ⲇ * 9);
		ᐃⵠ(ᐃ, ᐃⲆ[6]);
		ᐃΔⵠ(ᐃ, 106 * Ⲇ, Ⲇ * 147, Ⲇ * ⵠΔΔⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[7]);
		ᐃΔⵠ(ᐃ, Ⲇ * 104, 167 * Ⲇ, Ⲇ * 4);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔⲆⲆ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 86, Ⲇ * 154, ⲆⵠⵠⲆ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔⵠⵠⲆⲆ]);
		return ⲆⲆ
	}

	function ⲆⵠⲆΔΔᐃⲆ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 283;
		ⲆⲆ.height = Ⲇ * 224;
		ᐃ.translate(ⵠᐃⵠⵠ, 15 * Ⲇ);
		ᐃ.globalAlpha = .5;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(93 * Ⲇ, 55 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 127, Ⲇ * 27, 195 * Ⲇ, 42 * Ⲇ, 213 * Ⲇ, Ⲇ * 78);
		ᐃ.bezierCurveTo(Ⲇ * 254, 134 * Ⲇ, Ⲇ * 226, 198 * Ⲇ, 153 * Ⲇ, 197 * Ⲇ);
		ᐃ.bezierCurveTo(59 * Ⲇ, Ⲇ * 204, Ⲇ * 56, 158 * Ⲇ, Ⲇ * 51, 115 * Ⲇ);
		ᐃ.bezierCurveTo(50 * Ⲇ, 93 * Ⲇ, 81 * Ⲇ, 62 * Ⲇ, 90 * Ⲇ, 57 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(100 * Ⲇ, Ⲇ * 33);
		ᐃ.bezierCurveTo(85 * Ⲇ, 62 * Ⲇ, Ⲇ * 102, Ⲇ * 66, 110 * Ⲇ, 83 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 181, 32 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 196, Ⲇ * 62, Ⲇ * 181, 68 * Ⲇ, 178 * Ⲇ, 69 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(225 * Ⲇ, 52 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 228, 78 * Ⲇ, 207 * Ⲇ, Ⲇ * 77, Ⲇ * 192, 88 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 34, Ⲇ * 134);
		ᐃ.bezierCurveTo(Ⲇ * 46, Ⲇ * 111, 57 * Ⲇ, 111 * Ⲇ, Ⲇ * 79, Ⲇ * 109);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 249, 135 * Ⲇ);
		ᐃ.bezierCurveTo(233 * Ⲇ, Ⲇ * 107, 212 * Ⲇ, Ⲇ * 112, Ⲇ * 202, Ⲇ * 115);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(56 * Ⲇ, 50 * Ⲇ);
		ᐃ.bezierCurveTo(56 * Ⲇ, Ⲇ * 82, Ⲇ * 73, Ⲇ * 82, Ⲇ * 93, 89 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(0, -ⵠΔΔΔⲆᐃΔ * Ⲇ);
		ᐃ.globalAlpha = ⵠⲆⲆⲆ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ⵠᐃΔⲆᐃ, 33 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 85, 62 * Ⲇ, 102 * Ⲇ, Ⲇ * 66, Ⲇ * 110, 83 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃΔⲆⵠ], Ⲇ * 40);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(181 * Ⲇ, Ⲇ * 32);
		ᐃ.bezierCurveTo(196 * Ⲇ, Ⲇ * 62, Ⲇ * 181, Ⲇ * 68, 178 * Ⲇ, Ⲇ * 69);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], Ⲇ * 40);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(225 * Ⲇ, 52 * Ⲇ);
		ᐃ.bezierCurveTo(228 * Ⲇ, 78 * Ⲇ, 207 * Ⲇ, 77 * Ⲇ, 192 * Ⲇ, Ⲇ * 88);
		ᐃⵠ(ᐃ, ⲆᐃⵠⲆⲆ, ᐃⲆ[2], 40 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(34 * Ⲇ, 134 * Ⲇ);
		ᐃ.bezierCurveTo(46 * Ⲇ, 111 * Ⲇ, Ⲇ * 57, 111 * Ⲇ, 79 * Ⲇ, 109 * Ⲇ);
		ᐃⵠ(ᐃ, ⲆⲆΔᐃⵠ, ᐃⲆ[ᐃᐃᐃᐃ], Ⲇ * 40);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 249, Ⲇ * 135);
		ᐃ.bezierCurveTo(233 * Ⲇ, 107 * Ⲇ, 212 * Ⲇ, 112 * Ⲇ, Ⲇ * 202, Ⲇ * 115);
		ᐃⵠ(ᐃ, ⵠᐃΔⵠΔ, ᐃⲆ[ⵠΔᐃⵠ], Ⲇ * 40);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 56, Ⲇ * 50);
		ᐃ.bezierCurveTo(Ⲇ * 56, Ⲇ * 82, Ⲇ * 73, Ⲇ * 82, Ⲇ * 93, 89 * Ⲇ);
		ᐃⵠ(ᐃ, ⵠᐃΔⵠΔ, ᐃⲆ[2], 40 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(93 * Ⲇ, 55 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 127, Ⲇ * 27, Ⲇ * 195, 42 * Ⲇ, Ⲇ * 213, Ⲇ * 78);
		ᐃ.bezierCurveTo(Ⲇ * 254, Ⲇ * 134, 226 * Ⲇ, 198 * Ⲇ, 153 * Ⲇ, 197 * Ⲇ);
		ᐃ.bezierCurveTo(59 * Ⲇ, 204 * Ⲇ, Ⲇ * 56, Ⲇ * 158, Ⲇ * 51, 115 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 50, 93 * Ⲇ, Ⲇ * 81, 62 * Ⲇ, 90 * Ⲇ, 57 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ᐃⲆᐃⵠ], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ⵠᐃⵠⲆⲆ, 33 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 85, 62 * Ⲇ, 102 * Ⲇ, 66 * Ⲇ, Ⲇ * 110, Ⲇ * 83);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠⵠⵠΔ], Ⲇ * 20);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 181, 32 * Ⲇ);
		ᐃ.bezierCurveTo(196 * Ⲇ, Ⲇ * 62, 181 * Ⲇ, 68 * Ⲇ, 178 * Ⲇ, Ⲇ * 69);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔⵠⲆ], Ⲇ * 20);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 225, 52 * Ⲇ);
		ᐃ.bezierCurveTo(228 * Ⲇ, Ⲇ * 78, Ⲇ * 207, 77 * Ⲇ, Ⲇ * 192, Ⲇ * 88);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[1], ΔΔᐃⲆΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 34, 134 * Ⲇ);
		ᐃ.bezierCurveTo(46 * Ⲇ, Ⲇ * 111, Ⲇ * 57, Ⲇ * 111, Ⲇ * 79, Ⲇ * 109);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[1], Ⲇ * 20);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(249 * Ⲇ, 135 * Ⲇ);
		ᐃ.bezierCurveTo(233 * Ⲇ, Ⲇ * 107, Ⲇ * 212, 112 * Ⲇ, 202 * Ⲇ, 115 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠⵠⵠΔ], ⲆᐃⲆⵠᐃᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 56, Ⲇ * 50);
		ᐃ.bezierCurveTo(56 * Ⲇ, Ⲇ * 82, 73 * Ⲇ, 82 * Ⲇ, 93 * Ⲇ, 89 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆΔⲆⵠ], 20 * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 101, Ⲇ * 155, Ⲇ * 20.591260281974);
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃΔⵠ(ᐃ, 180 * Ⲇ, 155 * Ⲇ, Ⲇ * 20.591260281974);
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃΔⵠ(ᐃ, 95 * Ⲇ, 148 * Ⲇ, 7.211102550927978 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃΔⵠ(ᐃ, 173 * Ⲇ, Ⲇ * 148, Ⲇ * 7.211102550927978);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		if (Δᐃ === ⵠⵠⵠΔ) {
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(191 * Ⲇ, Ⲇ * 107);
			ᐃ.bezierCurveTo(Ⲇ * 180, 104 * Ⲇ, 175 * Ⲇ, Ⲇ * 101, Ⲇ * 180, Ⲇ * 95);
			ᐃ.bezierCurveTo(180 * Ⲇ, 95 * Ⲇ, Ⲇ * 181, Ⲇ * 99, Ⲇ * 188, Ⲇ * 103);
			ᐃ.bezierCurveTo(Ⲇ * 191, 101 * Ⲇ, 191 * Ⲇ, Ⲇ * 95, Ⲇ * 190, Ⲇ * 91);
			ᐃ.bezierCurveTo(Ⲇ * 190, Ⲇ * 91, Ⲇ * 196, Ⲇ * 89, 195 * Ⲇ, Ⲇ * 99);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[2]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(206 * Ⲇ, 98 * Ⲇ);
			ᐃ.bezierCurveTo(203 * Ⲇ, Ⲇ * 95, Ⲇ * 200, Ⲇ * 93, Ⲇ * 198, Ⲇ * 101);
			ᐃ.bezierCurveTo(194 * Ⲇ, Ⲇ * 109, 193 * Ⲇ, 109 * Ⲇ, Ⲇ * 196, Ⲇ * 110);
			ᐃ.bezierCurveTo(206 * Ⲇ, Ⲇ * 115, Ⲇ * 209, Ⲇ * 114, Ⲇ * 211, Ⲇ * 111);
			ᐃ.bezierCurveTo(211 * Ⲇ, Ⲇ * 106, 208 * Ⲇ, Ⲇ * 108, Ⲇ * 203, Ⲇ * 108);
			ᐃ.bezierCurveTo(193 * Ⲇ, Ⲇ * 107, 204 * Ⲇ, Ⲇ * 101, Ⲇ * 206, Ⲇ * 99);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃⲆ]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 172, 111 * Ⲇ);
			ᐃ.bezierCurveTo(172 * Ⲇ, Ⲇ * 106, 174 * Ⲇ, 105 * Ⲇ, Ⲇ * 185, Ⲇ * 109);
			ᐃ.bezierCurveTo(190 * Ⲇ, 109 * Ⲇ, 189 * Ⲇ, 114 * Ⲇ, 185 * Ⲇ, Ⲇ * 120);
			ᐃ.bezierCurveTo(181 * Ⲇ, Ⲇ * 125, 180 * Ⲇ, Ⲇ * 126, 176 * Ⲇ, 122 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 182, Ⲇ * 119, 187 * Ⲇ, Ⲇ * 110, Ⲇ * 182, 112 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[2]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(202 * Ⲇ, 125 * Ⲇ);
			ᐃ.bezierCurveTo(197 * Ⲇ, 117 * Ⲇ, Ⲇ * 193, Ⲇ * 116, Ⲇ * 193, 120 * Ⲇ);
			ᐃ.bezierCurveTo(192.5 * Ⲇ, Ⲇ * 124.5, Ⲇ * 192.5, 124.5 * Ⲇ, Ⲇ * 192, 129 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 188, Ⲇ * 129, Ⲇ * 187, Ⲇ * 124, 189 * Ⲇ, Ⲇ * 120);
			ᐃ.bezierCurveTo(191 * Ⲇ, 110 * Ⲇ, 192 * Ⲇ, Ⲇ * 110, 200 * Ⲇ, Ⲇ * 116);
			ᐃ.bezierCurveTo(208 * Ⲇ, Ⲇ * 120, 207 * Ⲇ, 123 * Ⲇ, 202 * Ⲇ, Ⲇ * 125);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[2])
		}
		return ⲆⲆ
	}

	function ⵠᐃᐃⲆΔᐃᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 290 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 525;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠⲆⲆⲆ;
		ᐃ.translate(ⵠⲆⵠΔⵠᐃᐃ * Ⲇ, Ⲇ * 20);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 111, 351 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 129, 218 * Ⲇ, Ⲇ * 129, 218 * Ⲇ, Ⲇ * 147, Ⲇ * 85);
		ᐃ.bezierCurveTo(Ⲇ * 167, 65.5 * Ⲇ, 167 * Ⲇ, Ⲇ * 65.5, 187 * Ⲇ, 46 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 201.5, 70.5 * Ⲇ, 201.5 * Ⲇ, 70.5 * Ⲇ, 216 * Ⲇ, 95 * Ⲇ);
		ᐃ.bezierCurveTo(194.5 * Ⲇ, Ⲇ * 227.5, 194.5 * Ⲇ, 227.5 * Ⲇ, 173 * Ⲇ, 360 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.save();
		ᐃ.translate(131 * Ⲇ, Ⲇ * 425.5);
		ᐃ.rotate(.16);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ⵠⵠΔⵠⵠΔᐃ, Ⲇ * -56.5, Ⲇ * 28, 113 * Ⲇ, ᐃΔⲆΔⲆᐃⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃΔⵠ(ᐃ, 122 * Ⲇ, Ⲇ * 480, 18.439088914585774 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(79 * Ⲇ, 371 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 131, Ⲇ * 373, 145 * Ⲇ, 378 * Ⲇ, Ⲇ * 197, 388 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 205, Ⲇ * 382.5, 205 * Ⲇ, Ⲇ * 382.5, 213 * Ⲇ, Ⲇ * 377);
		ᐃ.bezierCurveTo(Ⲇ * 167, Ⲇ * 352, 117 * Ⲇ, 345 * Ⲇ, 69 * Ⲇ, Ⲇ * 355);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]);
		ᐃ.globalAlpha = ᐃⵠⵠ;
		ᐃ.translate(Ⲇ * -ᐃⵠΔᐃⵠⲆⵠ, Ⲇ * -20);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(111 * Ⲇ, Ⲇ * 351);
		ᐃ.bezierCurveTo(129 * Ⲇ, 218 * Ⲇ, 129 * Ⲇ, Ⲇ * 218, Ⲇ * 147, Ⲇ * 85);
		ᐃ.bezierCurveTo(167 * Ⲇ, Ⲇ * 65.5, 167 * Ⲇ, 65.5 * Ⲇ, 187 * Ⲇ, Ⲇ * 46);
		ᐃ.bezierCurveTo(201.5 * Ⲇ, Ⲇ * 70.5, 201.5 * Ⲇ, 70.5 * Ⲇ, 216 * Ⲇ, Ⲇ * 95);
		ᐃ.bezierCurveTo(Ⲇ * 194.5, 227.5 * Ⲇ, 194.5 * Ⲇ, Ⲇ * 227.5, Ⲇ * 173, 360 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * 12.5);
		ᐃ.save();
		ᐃ.translate(131 * Ⲇ, 425.5 * Ⲇ);
		ᐃ.rotate(.16);
		ᐃᐃᐃ(ᐃ, Ⲇ * -14, -56.5 * Ⲇ, 28 * Ⲇ, 113 * Ⲇ, 8 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⲆΔⵠᐃⵠ], Ⲇ * 12.5);
		ᐃΔⵠ(ᐃ, 122 * Ⲇ, Ⲇ * 480, Ⲇ * 18.439088914585774);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔᐃ], ᐃⲆ[5], Ⲇ * 12.5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 79, 371 * Ⲇ);
		ᐃ.bezierCurveTo(131 * Ⲇ, Ⲇ * 373, Ⲇ * 145, Ⲇ * 378, Ⲇ * 197, 388 * Ⲇ);
		ᐃ.bezierCurveTo(205 * Ⲇ, Ⲇ * 382.5, Ⲇ * 205, 382.5 * Ⲇ, 213 * Ⲇ, Ⲇ * 377);
		ᐃ.bezierCurveTo(Ⲇ * 167, Ⲇ * 352, 117 * Ⲇ, Ⲇ * 345, Ⲇ * 69, 355 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], 12.5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 128, 345 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 142, Ⲇ * 345, 147 * Ⲇ, 346 * Ⲇ, Ⲇ * 158, 349 * Ⲇ);
		ᐃ.bezierCurveTo(177.5 * Ⲇ, 224.5 * Ⲇ, Ⲇ * 177.5, Ⲇ * 224.5, 197 * Ⲇ, 100 * Ⲇ);
		ᐃ.bezierCurveTo(190.5 * Ⲇ, Ⲇ * 84.5, 190.5 * Ⲇ, Ⲇ * 84.5, 184 * Ⲇ, 69 * Ⲇ);
		ᐃ.bezierCurveTo(173.5 * Ⲇ, Ⲇ * 82, Ⲇ * 173.5, Ⲇ * 82, 163 * Ⲇ, Ⲇ * 95);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		return ⲆⲆ
	}
	const ⲆⲆᐃΔ = ᐃΔΔ;

	function ᐃΔⲆᐃⲆⲆΔΔᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 118 * Ⲇ;
		ⲆⲆ.height = 114 * Ⲇ;
		ᐃ.translate(0, ⲆᐃⲆⲆᐃ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 42, Ⲇ * 43, 24.758836806279895 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 65, 90 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 72, 91 * Ⲇ, Ⲇ * 75, Ⲇ * 92, Ⲇ * 71, Ⲇ * 96);
		ᐃ.bezierCurveTo(Ⲇ * 65, 98 * Ⲇ, Ⲇ * 65, Ⲇ * 94, 65 * Ⲇ, Ⲇ * 91);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 87, 45 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 108, 59 * Ⲇ, Ⲇ * ⵠⲆᐃⵠⲆ, Ⲇ * 86, 85 * Ⲇ, Ⲇ * 91);
		ᐃ.bezierCurveTo(Ⲇ * 80, Ⲇ * 96, 68 * Ⲇ, 95 * Ⲇ, 58 * Ⲇ, Ⲇ * 87);
		ᐃ.bezierCurveTo(53 * Ⲇ, 80 * Ⲇ, 61 * Ⲇ, Ⲇ * 64, 66 * Ⲇ, Ⲇ * 58);
		ᐃ.bezierCurveTo(Ⲇ * 73, 48 * Ⲇ, Ⲇ * 78, Ⲇ * 44, Ⲇ * 87, Ⲇ * 45);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(0, Ⲇ * -ᐃⲆⵠΔΔ);
		ᐃΔⵠ(ᐃ, Ⲇ * 42, Ⲇ * 43, 24.758836806279895 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠΔ], ᐃⲆ[ⵠⲆⵠΔ], ΔⵠⲆᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 65, 90 * Ⲇ);
		ᐃ.bezierCurveTo(72 * Ⲇ, Ⲇ * 91, 75 * Ⲇ, 92 * Ⲇ, Ⲇ * 71, 96 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 65, Ⲇ * 98, Ⲇ * 65, Ⲇ * 94, Ⲇ * 65, Ⲇ * 91);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(87 * Ⲇ, 45 * Ⲇ);
		ᐃ.bezierCurveTo(108 * Ⲇ, Ⲇ * 59, Ⲇ * ⵠΔΔΔⲆ, Ⲇ * 86, 85 * Ⲇ, Ⲇ * 91);
		ᐃ.bezierCurveTo(80 * Ⲇ, Ⲇ * 96, Ⲇ * 68, 95 * Ⲇ, 58 * Ⲇ, Ⲇ * 87);
		ᐃ.bezierCurveTo(53 * Ⲇ, Ⲇ * 80, 61 * Ⲇ, Ⲇ * 64, 66 * Ⲇ, Ⲇ * 58);
		ᐃ.bezierCurveTo(73 * Ⲇ, Ⲇ * 48, Ⲇ * 78, Ⲇ * 44, 87 * Ⲇ, 45 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(52 * Ⲇ, Ⲇ * 16);
		ᐃ.bezierCurveTo(Ⲇ * 55, 19 * Ⲇ, Ⲇ * 54, Ⲇ * ⵠⲆΔᐃᐃ, 55 * Ⲇ, 22 * Ⲇ);
		ᐃ.bezierCurveTo(52 * Ⲇ, Ⲇ * 24.5, 52 * Ⲇ, 24.5 * Ⲇ, Ⲇ * 49, Ⲇ * 27);
		ᐃ.bezierCurveTo(45 * Ⲇ, 25 * Ⲇ, 45 * Ⲇ, 25 * Ⲇ, Ⲇ * 41, Ⲇ * 23);
		ᐃ.bezierCurveTo(Ⲇ * 45, Ⲇ * ⵠᐃⵠᐃΔⲆⵠ, 48 * Ⲇ, Ⲇ * 16, 52 * Ⲇ, 16 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆΔ], ᐃⲆ[4], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(62 * Ⲇ, 30 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 66, 29 * Ⲇ, 64 * Ⲇ, Ⲇ * 30, 66 * Ⲇ, 30 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 67, 31 * Ⲇ, 67 * Ⲇ, 31 * Ⲇ, 68 * Ⲇ, Ⲇ * 32);
		ᐃ.bezierCurveTo(66.5 * Ⲇ, Ⲇ * 33.5, Ⲇ * 66.5, Ⲇ * 33.5, Ⲇ * 65, 35 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 63.5, 32.5 * Ⲇ, 63.5 * Ⲇ, Ⲇ * 32.5, Ⲇ * 62, Ⲇ * 30);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔΔ], ᐃⲆ[4], 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(29 * Ⲇ, 21 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 31, 22 * Ⲇ, 31 * Ⲇ, 26 * Ⲇ, Ⲇ * 29, Ⲇ * 29);
		ᐃ.bezierCurveTo(Ⲇ * 26, Ⲇ * 28.5, 26 * Ⲇ, 28.5 * Ⲇ, 23 * Ⲇ, 28 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 23, 26.5 * Ⲇ, Ⲇ * 23, 26.5 * Ⲇ, Ⲇ * 23, 25 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 25, 23 * Ⲇ, Ⲇ * 25, Ⲇ * 23, 27 * Ⲇ, Ⲇ * 21);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃᐃΔΔ], Ⲇ * ⲆΔΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 18, Ⲇ * 36);
		ᐃ.bezierCurveTo(23 * Ⲇ, Ⲇ * 36, Ⲇ * 24, Ⲇ * 42, ⵠⲆⵠⲆⵠ * Ⲇ, 46 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 12, Ⲇ * 39, Ⲇ * ΔᐃⲆⲆⲆ, Ⲇ * 38, ᐃᐃⲆᐃᐃΔⲆ * Ⲇ, 37 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔΔ], ᐃⲆ[ⲆⵠⵠⲆ], ⲆⲆⵠᐃⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 30, Ⲇ * 34);
		ᐃ.bezierCurveTo(35 * Ⲇ, 36 * Ⲇ, Ⲇ * 36, Ⲇ * 39, 32 * Ⲇ, Ⲇ * 45);
		ᐃ.bezierCurveTo(25 * Ⲇ, Ⲇ * 46, Ⲇ * 25, 44 * Ⲇ, Ⲇ * 30, 34 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ], ᐃⲆ[4], Ⲇ * ⵠⵠΔΔⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(59 * Ⲇ, 35 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 58, Ⲇ * 27, Ⲇ * 57, Ⲇ * 27, 52 * Ⲇ, 31 * Ⲇ);
		ᐃ.bezierCurveTo(50 * Ⲇ, 36 * Ⲇ, Ⲇ * 53, 38 * Ⲇ, 58 * Ⲇ, Ⲇ * 36);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃᐃᐃΔⵠ], ᐃΔⵠΔᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(63 * Ⲇ, Ⲇ * 46);
		ᐃ.bezierCurveTo(Ⲇ * 64.5, Ⲇ * 46.5, Ⲇ * 64.5, 46.5 * Ⲇ, Ⲇ * 66, Ⲇ * 47);
		ᐃ.bezierCurveTo(Ⲇ * 70, Ⲇ * 50, Ⲇ * 70, 53 * Ⲇ, 61 * Ⲇ, Ⲇ * 55);
		ᐃ.bezierCurveTo(62 * Ⲇ, Ⲇ * 50.5, 62 * Ⲇ, 50.5 * Ⲇ, 63 * Ⲇ, 46 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆⵠⵠⲆ], ⲆΔⵠᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 41, Ⲇ * 42);
		ᐃ.bezierCurveTo(Ⲇ * 47, Ⲇ * 41, Ⲇ * 53, Ⲇ * 47, Ⲇ * 46, 51 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 38, Ⲇ * 49, 39 * Ⲇ, 46 * Ⲇ, Ⲇ * 41, 43 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃΔⲆΔⲆ], Ⲇ * ΔΔⵠΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(44 * Ⲇ, 57 * Ⲇ);
		ᐃ.bezierCurveTo(54 * Ⲇ, Ⲇ * 57, Ⲇ * 54, 58 * Ⲇ, 55 * Ⲇ, 61 * Ⲇ);
		ᐃ.bezierCurveTo(54 * Ⲇ, 63 * Ⲇ, 52 * Ⲇ, Ⲇ * 64, Ⲇ * 48, Ⲇ * 65);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔᐃΔΔ], ⲆΔΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(20 * Ⲇ, Ⲇ * 52);
		ᐃ.bezierCurveTo(25 * Ⲇ, 51 * Ⲇ, Ⲇ * 27, Ⲇ * 50, Ⲇ * 28, Ⲇ * 54);
		ᐃ.bezierCurveTo(27 * Ⲇ, Ⲇ * 58, 24 * Ⲇ, 58 * Ⲇ, Ⲇ * 22, 58 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 21, Ⲇ * 55.5, 21 * Ⲇ, Ⲇ * 55.5, Ⲇ * ⲆΔⲆΔᐃ, Ⲇ * 53);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆⵠⵠⲆ], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(30 * Ⲇ, Ⲇ * 61);
		ᐃ.bezierCurveTo(37 * Ⲇ, 61 * Ⲇ, 39 * Ⲇ, Ⲇ * 63, Ⲇ * 39, 68 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 36, Ⲇ * 68.5, Ⲇ * 36, Ⲇ * 68.5, Ⲇ * 33, Ⲇ * 69);
		ᐃ.bezierCurveTo(30.5 * Ⲇ, 67.5 * Ⲇ, 30.5 * Ⲇ, 67.5 * Ⲇ, Ⲇ * 28, 66 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔᐃΔΔ], 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 88, Ⲇ * 45);
		ᐃ.bezierCurveTo(Ⲇ * 90, 46.5 * Ⲇ, 90 * Ⲇ, Ⲇ * 46.5, Ⲇ * 92, 48 * Ⲇ);
		ᐃ.bezierCurveTo(92 * Ⲇ, 50 * Ⲇ, 92 * Ⲇ, 50 * Ⲇ, Ⲇ * 92, Ⲇ * 52);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃ], ᐃⲆ[ΔᐃΔⲆΔ], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(96 * Ⲇ, 53 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 97.5, 55 * Ⲇ, Ⲇ * 97.5, Ⲇ * 55, 99 * Ⲇ, Ⲇ * 57);
		ᐃ.bezierCurveTo(97.5 * Ⲇ, Ⲇ * 59.5, 97.5 * Ⲇ, Ⲇ * 59.5, Ⲇ * 96, 62 * Ⲇ);
		ᐃ.bezierCurveTo(93.5 * Ⲇ, 60.5 * Ⲇ, Ⲇ * 93.5, Ⲇ * 60.5, 91 * Ⲇ, 59 * Ⲇ);
		ᐃ.bezierCurveTo(91.5 * Ⲇ, 57 * Ⲇ, Ⲇ * 91.5, 57 * Ⲇ, 92 * Ⲇ, 55 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆⲆ], ᐃⲆ[ᐃΔⲆΔⲆ], 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 92, 71 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 94.5, 70.5 * Ⲇ, Ⲇ * 94.5, 70.5 * Ⲇ, Ⲇ * 97, 70 * Ⲇ);
		ᐃ.bezierCurveTo(98.5 * Ⲇ, 72.5 * Ⲇ, Ⲇ * 98.5, 72.5 * Ⲇ, ⲆᐃᐃΔᐃ * Ⲇ, Ⲇ * 75);
		ᐃ.bezierCurveTo(97 * Ⲇ, 76.5 * Ⲇ, Ⲇ * 97, Ⲇ * 76.5, 94 * Ⲇ, 78 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆⵠⲆᐃ], 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 95, Ⲇ * 82);
		ᐃ.bezierCurveTo(96 * Ⲇ, Ⲇ * 83, 96 * Ⲇ, Ⲇ * 83, 97 * Ⲇ, 84 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 97, Ⲇ * 85.5, Ⲇ * 97, 85.5 * Ⲇ, Ⲇ * 97, Ⲇ * 87);
		ᐃ.bezierCurveTo(Ⲇ * 93.5, 87.5 * Ⲇ, Ⲇ * 93.5, 87.5 * Ⲇ, 90 * Ⲇ, 88 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠᐃⲆ], ᐃⲆ[ΔᐃΔⲆΔ], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(86 * Ⲇ, 72 * Ⲇ);
		ᐃ.bezierCurveTo(89 * Ⲇ, 76 * Ⲇ, 88 * Ⲇ, Ⲇ * 81, Ⲇ * 85, Ⲇ * 82);
		ᐃ.bezierCurveTo(Ⲇ * 80, 80 * Ⲇ, Ⲇ * 82, Ⲇ * 78, Ⲇ * 85, 72 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃᐃⲆⵠ], Δᐃⵠᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 80, Ⲇ * 86);
		ᐃ.bezierCurveTo(84 * Ⲇ, Ⲇ * 88, 86 * Ⲇ, 88 * Ⲇ, 85 * Ⲇ, 93 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 80, 96 * Ⲇ, Ⲇ * 79, 96 * Ⲇ, 76 * Ⲇ, 91 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], ⵠⵠΔΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(84 * Ⲇ, 46 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 93, Ⲇ * 51, 91 * Ⲇ, 62 * Ⲇ, 80 * Ⲇ, 78 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 74, 86 * Ⲇ, 66 * Ⲇ, Ⲇ * 90, 60 * Ⲇ, 86 * Ⲇ);
		ᐃ.bezierCurveTo(55 * Ⲇ, Ⲇ * 79, Ⲇ * 57, 73 * Ⲇ, Ⲇ * 67, Ⲇ * 57);
		ᐃ.bezierCurveTo(71 * Ⲇ, Ⲇ * 51, Ⲇ * 79, 44 * Ⲇ, 84 * Ⲇ, Ⲇ * 46);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃⵠᐃ], ᐃⲆ[6], Ⲇ * ᐃᐃⲆΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 76, 60 * Ⲇ);
		ᐃ.bezierCurveTo(80 * Ⲇ, 66 * Ⲇ, 75 * Ⲇ, 74 * Ⲇ, Ⲇ * 68, Ⲇ * 74);
		ᐃ.bezierCurveTo(Ⲇ * 60, 64 * Ⲇ, Ⲇ * 68, 59 * Ⲇ, Ⲇ * 76, Ⲇ * 59);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⵠΔᐃΔᐃ], ᐃⲆ[8], 5 * Ⲇ);
		return ⲆⲆ
	}

	function ⵠᐃᐃⵠⲆΔⲆⵠᐃ(ᐃᐃⲆΔ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var text = ΔⲆⲆ[ᐃᐃⲆΔ];
		ᐃ.font = "20px Baloo Paaji";
		var ⲆⲆᐃⵠⲆⵠᐃ = ᐃⲆⵠΔ;
		if (ΔΔⲆΔ <= text.length) ⲆⲆᐃⵠⲆⵠᐃ = Math.max(Ⲇᐃⵠⵠ, ᐃ.measureText(text[ⵠΔⵠⲆ]).width);
		ᐃ.font = "17px Baloo Paaji";
		2 <= text.length && (ⲆⲆᐃⵠⲆⵠᐃ = Math.max(ⲆⲆᐃⵠⲆⵠᐃ, ᐃ.measureText(text[1]).width));
		ᐃ.font = "14px Baloo Paaji";
		for (Δᐃ = ΔⲆᐃⲆ; text.length > Δᐃ; Δᐃ++) ⲆⲆᐃⵠⲆⵠᐃ = Math.max(ⲆⲆᐃⵠⲆⵠᐃ, ᐃ.measureText(text[Δᐃ]).width);
		var ⲆⲆⵠ = ⲆⲆᐃⵠⲆⵠᐃ + 35;
		var ᐃΔΔⲆⲆΔᐃ = 26;
		var ΔⲆⵠ = 0;
		if (text.length === ⲆⲆⲆᐃ) ΔⲆⵠ = 55;
		else if (ⲆⲆⵠᐃ === text.length) ΔⲆⵠ = 85;
		else ΔⲆⵠ = ᐃΔΔⲆⲆΔᐃ * (text.length - 2) + 85;
		ⲆⲆ.width = ⲆⲆⵠ;
		ⲆⲆ.height = ΔⲆⵠ;
		ᐃᐃᐃ(ᐃ, ⵠⵠΔᐃ, Δⵠⵠ, ⲆⲆⵠ, ΔⲆⵠ, 10);
		ᐃ.fillStyle = Δ[391];
		ᐃ.globalAlpha = .5;
		ᐃ.fill();
		if (text.length >= 1) {
			ᐃ.textBaseline = Δ[99], ᐃ.font = "20px Baloo Paaji";
			ᐃ.globalAlpha = 1;
			ᐃ.fillStyle = "#e2c340";
			ᐃ.fillText(text[ΔΔⲆⲆ], 15, 28)
		}
		ΔᐃΔⲆ <= text.length && (ᐃ.font = "17px Baloo Paaji", ᐃ.fillStyle = Δ[153], ᐃ.fillText(text[1], ⵠᐃⲆᐃᐃ, 55), ΔⲆⵠ = 55);
		if (3 <= text.length) {
			ᐃ.font = "14px Baloo Paaji";
			ᐃ.globalAlpha = .7;
			for (Δᐃ = ᐃΔⲆⵠ; Δᐃ < text.length; Δᐃ++) {
				ᐃ.fillText(text[Δᐃ], ⵠⲆⲆⲆⵠⲆΔ, ΔⲆⵠ + 28);
				ΔⲆⵠ += ᐃΔΔⲆⲆΔᐃ
			}
		}
		return ⲆⲆ
	}

	function ⲆⵠᐃᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 70 * Ⲇ;
		var ⲆΔΔ = Ⲇ * 90;
		var ⲆⲆⵠ = ΔᐃΔⵠ * Ⲇ;
		var ⵠⲆⲆΔ = Ⲇ * ΔΔⵠΔ;
		var w2 = Δⵠᐃ / ᐃΔⲆⵠ;
		var ᐃᐃⲆᐃⵠ = ⲆΔΔ / 2;
		var ΔⲆⵠⵠ = 10 * Ⲇ;
		var ⲆΔᐃⲆⲆᐃⵠ = ⵠΔΔΔⲆ * Ⲇ;
		var ΔⵠᐃⵠᐃΔΔ = Ⲇ * ⵠⲆⲆⵠⲆ;
		var ΔᐃⲆΔᐃᐃᐃ = ⲆΔᐃⲆⲆᐃⵠ / 2;
		var ⲆⵠⲆⵠᐃⵠᐃ = ΔⵠᐃⵠᐃΔΔ / Δⵠᐃᐃ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.save();
		ᐃ.translate(-80 * Ⲇ, Ⲇ * -70 + ⵠⲆⲆΔ);
		ᐃ.globalAlpha = .5;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(130 * Ⲇ, 79 * Ⲇ, Ⲇ * 132, 86 * Ⲇ, 130 * Ⲇ, Ⲇ * 93);
		ᐃ.bezierCurveTo(128 * Ⲇ, ⵠⲆᐃⵠⲆ * Ⲇ, Ⲇ * 121, Ⲇ * 107, Ⲇ * 120, Ⲇ * 107);
		ᐃ.bezierCurveTo(Ⲇ * 120, Ⲇ * 107, 115 * Ⲇ, 98 * Ⲇ, Ⲇ * 115, Ⲇ * 92);
		ᐃ.bezierCurveTo(Ⲇ * 115, 86 * Ⲇ, Ⲇ * 119, 76 * Ⲇ, 127 * Ⲇ, 73 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, Δ[314]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Ⲇ * -80, -70 * Ⲇ + ⵠⲆⲆΔ);
		ᐃ.globalAlpha = .5;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(Ⲇ * 112, Ⲇ * 109, 111 * Ⲇ, 100 * Ⲇ, Ⲇ * 106, 93 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 104, Ⲇ * 90, Ⲇ * 91, 87 * Ⲇ, Ⲇ * 91, 87 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 91, 88 * Ⲇ, 91 * Ⲇ, Ⲇ * 96, Ⲇ * 94, 102 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 97, Ⲇ * 108, 106 * Ⲇ, 112 * Ⲇ, 113 * Ⲇ, 112 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, Δ[314]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(-80 * Ⲇ, -70 * Ⲇ + ⵠⲆⲆΔ);
		ᐃ.globalAlpha = .5;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(Ⲇ * 108, 120 * Ⲇ, 100 * Ⲇ, Ⲇ * 119, 91 * Ⲇ, Ⲇ * 127);
		ᐃ.bezierCurveTo(Ⲇ * 83, Ⲇ * 134, Ⲇ * 82, 146 * Ⲇ, Ⲇ * 83, Ⲇ * 146);
		ᐃ.bezierCurveTo(Ⲇ * 84, Ⲇ * 146, 98 * Ⲇ, Ⲇ * 142, 103 * Ⲇ, 138 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 107, 135 * Ⲇ, Ⲇ * 110, Ⲇ * 130, 112 * Ⲇ, 121 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, Δ[314]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Ⲇ * 3, -93 * Ⲇ + ⵠⲆⲆΔ);
		ᐃ.rotate(Math.PI / ΔΔⵠΔ);
		ᐃ.globalAlpha = .5;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(Ⲇ * 130, Ⲇ * 79, 132 * Ⲇ, Ⲇ * 86, Ⲇ * 130, 93 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 128, Ⲇ * 100, 121 * Ⲇ, 107 * Ⲇ, 120 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(120 * Ⲇ, Ⲇ * 107, 115 * Ⲇ, Ⲇ * 98, 115 * Ⲇ, 92 * Ⲇ);
		ᐃ.bezierCurveTo(115 * Ⲇ, 86 * Ⲇ, 119 * Ⲇ, Ⲇ * 76, 127 * Ⲇ, Ⲇ * 73);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, Δ[314]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(-80 * Ⲇ, -70 * Ⲇ);
		ᐃ.globalAlpha = ⲆΔⲆⵠ;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(130 * Ⲇ, 79 * Ⲇ, Ⲇ * 132, 86 * Ⲇ, 130 * Ⲇ, 93 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 128, Ⲇ * ⵠⲆᐃⵠⲆ, 121 * Ⲇ, Ⲇ * 107, Ⲇ * 120, 107 * Ⲇ);
		ᐃ.bezierCurveTo(120 * Ⲇ, Ⲇ * 107, Ⲇ * 115, Ⲇ * 98, Ⲇ * 115, Ⲇ * 92);
		ᐃ.bezierCurveTo(Ⲇ * 115, 86 * Ⲇ, 119 * Ⲇ, Ⲇ * 76, Ⲇ * 127, Ⲇ * 73);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ], ᐃⲆ[1], ⲆⲆⵠ);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Ⲇ * -80, Ⲇ * -70);
		ᐃ.globalAlpha = ⲆΔⲆⵠ;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(112 * Ⲇ, Ⲇ * 109, Ⲇ * 111, ᐃⵠⲆⲆⲆ * Ⲇ, 106 * Ⲇ, 93 * Ⲇ);
		ᐃ.bezierCurveTo(104 * Ⲇ, Ⲇ * 90, Ⲇ * 91, 87 * Ⲇ, Ⲇ * 91, Ⲇ * 87);
		ᐃ.bezierCurveTo(91 * Ⲇ, 88 * Ⲇ, Ⲇ * 91, Ⲇ * 96, Ⲇ * 94, Ⲇ * 102);
		ᐃ.bezierCurveTo(Ⲇ * 97, Ⲇ * 108, 106 * Ⲇ, Ⲇ * 112, Ⲇ * 113, Ⲇ * 112);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ᐃⲆΔ], ⲆⲆⵠ);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(-80 * Ⲇ, Ⲇ * -70);
		ᐃ.globalAlpha = ⵠⵠᐃ;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(108 * Ⲇ, 120 * Ⲇ, Ⲇ * 100, Ⲇ * 119, Ⲇ * 91, Ⲇ * 127);
		ᐃ.bezierCurveTo(83 * Ⲇ, Ⲇ * 134, Ⲇ * 82, 146 * Ⲇ, Ⲇ * 83, 146 * Ⲇ);
		ᐃ.bezierCurveTo(84 * Ⲇ, Ⲇ * 146, Ⲇ * 98, 142 * Ⲇ, 103 * Ⲇ, 138 * Ⲇ);
		ᐃ.bezierCurveTo(107 * Ⲇ, 135 * Ⲇ, Ⲇ * 110, Ⲇ * 130, Ⲇ * 112, 121 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ], ᐃⲆ[ΔⲆΔᐃ], ⲆⲆⵠ);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Ⲇ * ⵠᐃⵠΔ, -93 * Ⲇ);
		ᐃ.rotate(Math.PI / ⵠⵠΔⲆ);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(130 * Ⲇ, 79 * Ⲇ, 132 * Ⲇ, 86 * Ⲇ, Ⲇ * 130, 93 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 128, Ⲇ * ΔⲆᐃⵠⵠ, Ⲇ * 121, 107 * Ⲇ, Ⲇ * 120, 107 * Ⲇ);
		ᐃ.bezierCurveTo(120 * Ⲇ, Ⲇ * 107, 115 * Ⲇ, Ⲇ * 98, 115 * Ⲇ, Ⲇ * 92);
		ᐃ.bezierCurveTo(115 * Ⲇ, 86 * Ⲇ, 119 * Ⲇ, 76 * Ⲇ, 127 * Ⲇ, Ⲇ * 73);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], ⲆⲆⵠ);
		ᐃ.restore();
		return ⲆⲆ
	}
	const ⵠᐃⵠΔᐃ = ΔⲆΔᐃⵠ;

	function ᐃⵠⲆⲆΔᐃΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 130;
		ⲆⲆ.height = Ⲇ * 148;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 65, Ⲇ * 85);
		ᐃ.rotate(1.4);
		ᐃⵠΔⵠ(ᐃ, ⲆᐃᐃΔΔ, 60 * Ⲇ, Ⲇ * ⵠΔΔΔⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ]);
		ᐃ.globalAlpha = 1;
		ᐃ.save();
		ᐃ.translate(65 * Ⲇ, Ⲇ * 74);
		ᐃ.rotate(1.4);
		ᐃⵠΔⵠ(ᐃ, ⲆⲆᐃⲆⵠ, Ⲇ * 60, Ⲇ * ᐃⵠᐃᐃᐃ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆΔ], ᐃⲆ[2], 4);
		ᐃ.rotate(.64);
		ᐃⵠΔⵠ(ᐃ, 7, Ⲇ * 40, 10 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔΔ], ᐃⲆ[ⵠΔΔⵠ], ⲆΔⲆᐃΔ);
		ᐃ.rotate(.12);
		ᐃⵠΔⵠ(ᐃ, 7, Ⲇ * 23, 5 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠᐃⵠ]);
		return ⲆⲆ
	}

	function ⵠᐃΔⲆⲆⵠΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 80;
		ⲆⲆ.height = Ⲇ * 100;
		ᐃ.scale(.5, .5);
		ᐃ.translate(ⵠⵠⲆᐃᐃ, 15);
		ᐃ.globalAlpha = .5;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 47, Ⲇ * 5);
		ᐃ.bezierCurveTo(Ⲇ * 19, Ⲇ * 30, Ⲇ * 12, 42 * Ⲇ, Ⲇ * ᐃⲆⵠΔΔ, Ⲇ * 55);
		ᐃ.bezierCurveTo(ᐃᐃΔΔΔΔΔ * Ⲇ, 75 * Ⲇ, 27 * Ⲇ, 76 * Ⲇ, 36 * Ⲇ, Ⲇ * 72);
		ᐃ.bezierCurveTo(Ⲇ * 52, Ⲇ * 60, 53 * Ⲇ, 46 * Ⲇ, 54 * Ⲇ, 31 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 53, 14 * Ⲇ, Ⲇ * 50, Ⲇ * 9, Ⲇ * 48, Ⲇ * 6);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ⲆᐃⵠⲆΔΔⵠ * Ⲇ, 70 * Ⲇ);
		ᐃ.bezierCurveTo(ⲆΔᐃΔΔ * Ⲇ, Ⲇ * 77, 10 * Ⲇ, Ⲇ * 83, 4 * Ⲇ, 87 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[0], 10 * Ⲇ);
		ᐃ.translate(ΔΔⲆⲆ, -10);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(47 * Ⲇ, Ⲇ * ⵠΔΔΔ);
		ᐃ.bezierCurveTo(Ⲇ * 19, Ⲇ * 30, Ⲇ * 12, 42 * Ⲇ, Ⲇ * ᐃⲆⲆⵠⲆ, 55 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 11, 75 * Ⲇ, 27 * Ⲇ, Ⲇ * 76, 36 * Ⲇ, 72 * Ⲇ);
		ᐃ.bezierCurveTo(52 * Ⲇ, Ⲇ * 60, Ⲇ * 53, Ⲇ * 46, 54 * Ⲇ, 31 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 53, 14 * Ⲇ, 50 * Ⲇ, ⵠΔᐃⵠΔᐃⵠ * Ⲇ, 48 * Ⲇ, 6 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆ], ᐃⲆ[2], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ⲆᐃⵠⲆΔΔⵠ * Ⲇ, Ⲇ * 70);
		ᐃ.bezierCurveTo(ᐃᐃⲆᐃᐃΔⲆ * Ⲇ, 77 * Ⲇ, Ⲇ * ⵠᐃᐃⵠⵠ, 83 * Ⲇ, ⵠΔΔⵠ * Ⲇ, Ⲇ * 87);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], Ⲇ * ᐃΔⲆΔΔ);
		ᐃ.globalAlpha = .5;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ⲆⲆⵠⵠᐃⵠΔ * Ⲇ, Ⲇ * 70);
		ᐃ.bezierCurveTo(Ⲇ * 33, Ⲇ * 52, 39 * Ⲇ, 33 * Ⲇ, 48 * Ⲇ, Ⲇ * 7);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], 8 * Ⲇ);
		return ⲆⲆ
	}

	function ⵠⵠΔΔⵠⵠΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 372;
		ⲆⲆ.height = 375 * Ⲇ;
		ᐃ.globalAlpha = .5;
		ᐃ.translate(Ⲇ * 15, ᐃᐃⵠᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 313.0000305175781, Ⲇ * 76.58523559570312);
		ᐃ.bezierCurveTo(308.0000305175781 * Ⲇ, 130.58523559570312 * Ⲇ, Ⲇ * 279.0000305175781, 158.58523559570312 * Ⲇ, Ⲇ * 254.00003051757812, Ⲇ * 175.58523559570312);
		ᐃ.bezierCurveTo(287.0000305175781 * Ⲇ, 182.58523559570312 * Ⲇ, 274.0000305175781 * Ⲇ, 181.08523559570312 * Ⲇ, Ⲇ * 294.0000305175781, Ⲇ * 186.58523559570312);
		ᐃ.bezierCurveTo(293.5000305175781 * Ⲇ, Ⲇ * 196.08523559570312, Ⲇ * 293.5000305175781, 196.08523559570312 * Ⲇ, 293.0000305175781 * Ⲇ, 205.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(304.0000305175781 * Ⲇ, 201.08523559570312 * Ⲇ, 304.0000305175781 * Ⲇ, Ⲇ * 201.08523559570312, 315.0000305175781 * Ⲇ, Ⲇ * 196.58523559570312);
		ᐃ.bezierCurveTo(350.0000305175781 * Ⲇ, 219.58523559570312 * Ⲇ, 343.0000305175781 * Ⲇ, Ⲇ * 221.58523559570312, 351.0000305175781 * Ⲇ, 230.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(296.0000305175781 * Ⲇ, Ⲇ * 260.5852355957031, Ⲇ * 264.0000305175781, Ⲇ * 256.5852355957031, 220.00003051757812 * Ⲇ, Ⲇ * 236.58523559570312);
		ᐃ.bezierCurveTo(233.00003051757812 * Ⲇ, Ⲇ * 266.5852355957031, Ⲇ * 232.00003051757812, 279.5852355957031 * Ⲇ, 231.00003051757812 * Ⲇ, 295.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 222.00003051757812, 297.5852355957031 * Ⲇ, 222.00003051757812 * Ⲇ, Ⲇ * 297.5852355957031, Ⲇ * 213.00003051757812, 299.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 219.50003051757812, 308.0852355957031 * Ⲇ, Ⲇ * 219.50003051757812, 308.0852355957031 * Ⲇ, 226.00003051757812 * Ⲇ, Ⲇ * 316.5852355957031);
		ᐃ.bezierCurveTo(223.00003051757812 * Ⲇ, Ⲇ * 344.5852355957031, Ⲇ * 216.00003051757812, 350.5852355957031 * Ⲇ, Ⲇ * 209.00003051757812, Ⲇ * 363.5852355957031);
		ᐃ.bezierCurveTo(154.00003051757812 * Ⲇ, 318.5852355957031 * Ⲇ, Ⲇ * 156.00003051757812, 268.5852355957031 * Ⲇ, Ⲇ * 160.00003051757812, 238.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 135.00003051757812, Ⲇ * 268.5852355957031, Ⲇ * 125.00003051757812, 267.5852355957031 * Ⲇ, 112.00003051757812 * Ⲇ, 272.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 104.50003051757812, Ⲇ * 266.5852355957031, Ⲇ * 104.50003051757812, Ⲇ * 266.5852355957031, 97.00003051757812 * Ⲇ, 260.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(93.00003051757812 * Ⲇ, 271.0852355957031 * Ⲇ, Ⲇ * 93.00003051757812, Ⲇ * 271.0852355957031, Ⲇ * 89.00003051757812, 281.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 66.00003051757812, Ⲇ * 288.5852355957031, 59.000030517578125 * Ⲇ, Ⲇ * 288.5852355957031, Ⲇ * 39.000030517578125, 285.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 56.000030517578125, Ⲇ * 216.58523559570312, 91.00003051757812 * Ⲇ, 204.58523559570312 * Ⲇ, Ⲇ * 129.00003051757812, 189.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 90.00003051757812, Ⲇ * 176.58523559570312, 89.00003051757812 * Ⲇ, 173.58523559570312 * Ⲇ, 79.00003051757812 * Ⲇ, Ⲇ * 166.58523559570312);
		ᐃ.bezierCurveTo(Ⲇ * 82.00003051757812, 155.08523559570312 * Ⲇ, Ⲇ * 82.00003051757812, Ⲇ * 155.08523559570312, 85.00003051757812 * Ⲇ, 143.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 75.50003051757812, 147.58523559570312 * Ⲇ, 75.50003051757812 * Ⲇ, Ⲇ * 147.58523559570312, Ⲇ * 66.00003051757812, Ⲇ * 151.58523559570312);
		ᐃ.bezierCurveTo(Ⲇ * 44.000030517578125, 133.58523559570312 * Ⲇ, Ⲇ * 41.000030517578125, 124.58523559570312 * Ⲇ, Ⲇ * 34.000030517578125, Ⲇ * 102.58523559570312);
		ᐃ.bezierCurveTo(Ⲇ * 100.00003051757812, 81.58523559570312 * Ⲇ, 134.00003051757812 * Ⲇ, Ⲇ * 118.58523559570312, Ⲇ * 150.00003051757812, Ⲇ * 128.58523559570312);
		ᐃ.bezierCurveTo(144.00003051757812 * Ⲇ, Ⲇ * 102.58523559570312, Ⲇ * 147.00003051757812, Ⲇ * 90.58523559570312, 150.00003051757812 * Ⲇ, Ⲇ * 80.58523559570312);
		ᐃ.bezierCurveTo(159.50003051757812 * Ⲇ, Ⲇ * 79.08523559570312, Ⲇ * 159.50003051757812, 79.08523559570312 * Ⲇ, 169.00003051757812 * Ⲇ, Ⲇ * 77.58523559570312);
		ᐃ.bezierCurveTo(163.00003051757812 * Ⲇ, Ⲇ * 72.58523559570312, 163.00003051757812 * Ⲇ, Ⲇ * 72.58523559570312, Ⲇ * 157.00003051757812, Ⲇ * 67.58523559570312);
		ᐃ.bezierCurveTo(162.00003051757812 * Ⲇ, Ⲇ * 42.585235595703125, Ⲇ * 169.00003051757812, Ⲇ * 29.585235595703125, 182.00003051757812 * Ⲇ, Ⲇ * 14.585235595703125);
		ᐃ.bezierCurveTo(Ⲇ * 219.00003051757812, 48.585235595703125 * Ⲇ, 222.00003051757812 * Ⲇ, Ⲇ * 92.58523559570312, 218.00003051757812 * Ⲇ, 112.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(239.00003051757812 * Ⲇ, 95.58523559570312 * Ⲇ, Ⲇ * 242.00003051757812, Ⲇ * 97.58523559570312, Ⲇ * 249.00003051757812, 94.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(255.00003051757812 * Ⲇ, 103.08523559570312 * Ⲇ, 255.00003051757812 * Ⲇ, Ⲇ * 103.08523559570312, Ⲇ * 261.0000305175781, 111.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(261.5000305175781 * Ⲇ, Ⲇ * 99.58523559570312, 261.5000305175781 * Ⲇ, Ⲇ * 99.58523559570312, Ⲇ * 262.0000305175781, 87.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 282.0000305175781, 77.58523559570312 * Ⲇ, Ⲇ * 301.0000305175781, 74.58523559570312 * Ⲇ, Ⲇ * 314.0000305175781, Ⲇ * 76.58523559570312);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ]);
		ᐃ.globalAlpha = ᐃⵠⵠ;
		ᐃ.translate(-ᐃᐃᐃⵠⲆⲆᐃ * Ⲇ, Ⲇ * -15);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(313.0000305175781 * Ⲇ, Ⲇ * 76.58523559570312);
		ᐃ.bezierCurveTo(Ⲇ * 308.0000305175781, 130.58523559570312 * Ⲇ, Ⲇ * 279.0000305175781, 158.58523559570312 * Ⲇ, 254.00003051757812 * Ⲇ, Ⲇ * 175.58523559570312);
		ᐃ.bezierCurveTo(Ⲇ * 287.0000305175781, Ⲇ * 182.58523559570312, Ⲇ * 274.0000305175781, Ⲇ * 181.08523559570312, Ⲇ * 294.0000305175781, 186.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(293.5000305175781 * Ⲇ, 196.08523559570312 * Ⲇ, 293.5000305175781 * Ⲇ, 196.08523559570312 * Ⲇ, 293.0000305175781 * Ⲇ, Ⲇ * 205.58523559570312);
		ᐃ.bezierCurveTo(304.0000305175781 * Ⲇ, 201.08523559570312 * Ⲇ, 304.0000305175781 * Ⲇ, Ⲇ * 201.08523559570312, Ⲇ * 315.0000305175781, 196.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(350.0000305175781 * Ⲇ, Ⲇ * 219.58523559570312, Ⲇ * 343.0000305175781, 221.58523559570312 * Ⲇ, Ⲇ * 351.0000305175781, 230.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 296.0000305175781, 260.5852355957031 * Ⲇ, Ⲇ * 264.0000305175781, Ⲇ * 256.5852355957031, 220.00003051757812 * Ⲇ, 236.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(233.00003051757812 * Ⲇ, 266.5852355957031 * Ⲇ, 232.00003051757812 * Ⲇ, 279.5852355957031 * Ⲇ, Ⲇ * 231.00003051757812, Ⲇ * 295.5852355957031);
		ᐃ.bezierCurveTo(Ⲇ * 222.00003051757812, Ⲇ * 297.5852355957031, 222.00003051757812 * Ⲇ, 297.5852355957031 * Ⲇ, Ⲇ * 213.00003051757812, 299.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 219.50003051757812, Ⲇ * 308.0852355957031, 219.50003051757812 * Ⲇ, Ⲇ * 308.0852355957031, 226.00003051757812 * Ⲇ, Ⲇ * 316.5852355957031);
		ᐃ.bezierCurveTo(Ⲇ * 223.00003051757812, Ⲇ * 344.5852355957031, Ⲇ * 216.00003051757812, 350.5852355957031 * Ⲇ, Ⲇ * 209.00003051757812, Ⲇ * 363.5852355957031);
		ᐃ.bezierCurveTo(154.00003051757812 * Ⲇ, 318.5852355957031 * Ⲇ, 156.00003051757812 * Ⲇ, 268.5852355957031 * Ⲇ, Ⲇ * 160.00003051757812, Ⲇ * 238.58523559570312);
		ᐃ.bezierCurveTo(Ⲇ * 135.00003051757812, 268.5852355957031 * Ⲇ, 125.00003051757812 * Ⲇ, Ⲇ * 267.5852355957031, 112.00003051757812 * Ⲇ, Ⲇ * 272.5852355957031);
		ᐃ.bezierCurveTo(Ⲇ * 104.50003051757812, Ⲇ * 266.5852355957031, Ⲇ * 104.50003051757812, 266.5852355957031 * Ⲇ, 97.00003051757812 * Ⲇ, 260.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 93.00003051757812, Ⲇ * 271.0852355957031, Ⲇ * 93.00003051757812, 271.0852355957031 * Ⲇ, Ⲇ * 89.00003051757812, Ⲇ * 281.5852355957031);
		ᐃ.bezierCurveTo(Ⲇ * 66.00003051757812, 288.5852355957031 * Ⲇ, 59.000030517578125 * Ⲇ, 288.5852355957031 * Ⲇ, 39.000030517578125 * Ⲇ, Ⲇ * 285.5852355957031);
		ᐃ.bezierCurveTo(56.000030517578125 * Ⲇ, 216.58523559570312 * Ⲇ, Ⲇ * 91.00003051757812, Ⲇ * 204.58523559570312, Ⲇ * 129.00003051757812, 189.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(90.00003051757812 * Ⲇ, 176.58523559570312 * Ⲇ, Ⲇ * 89.00003051757812, Ⲇ * 173.58523559570312, Ⲇ * 79.00003051757812, Ⲇ * 166.58523559570312);
		ᐃ.bezierCurveTo(82.00003051757812 * Ⲇ, 155.08523559570312 * Ⲇ, 82.00003051757812 * Ⲇ, Ⲇ * 155.08523559570312, 85.00003051757812 * Ⲇ, Ⲇ * 143.58523559570312);
		ᐃ.bezierCurveTo(75.50003051757812 * Ⲇ, 147.58523559570312 * Ⲇ, Ⲇ * 75.50003051757812, Ⲇ * 147.58523559570312, 66.00003051757812 * Ⲇ, 151.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(44.000030517578125 * Ⲇ, 133.58523559570312 * Ⲇ, 41.000030517578125 * Ⲇ, Ⲇ * 124.58523559570312, Ⲇ * 34.000030517578125, 102.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 100.00003051757812, 81.58523559570312 * Ⲇ, 134.00003051757812 * Ⲇ, 118.58523559570312 * Ⲇ, 150.00003051757812 * Ⲇ, Ⲇ * 128.58523559570312);
		ᐃ.bezierCurveTo(Ⲇ * 144.00003051757812, Ⲇ * 102.58523559570312, 147.00003051757812 * Ⲇ, 90.58523559570312 * Ⲇ, Ⲇ * 150.00003051757812, 80.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(159.50003051757812 * Ⲇ, Ⲇ * 79.08523559570312, 159.50003051757812 * Ⲇ, Ⲇ * 79.08523559570312, 169.00003051757812 * Ⲇ, Ⲇ * 77.58523559570312);
		ᐃ.bezierCurveTo(163.00003051757812 * Ⲇ, Ⲇ * 72.58523559570312, Ⲇ * 163.00003051757812, Ⲇ * 72.58523559570312, Ⲇ * 157.00003051757812, Ⲇ * 67.58523559570312);
		ᐃ.bezierCurveTo(162.00003051757812 * Ⲇ, 42.585235595703125 * Ⲇ, Ⲇ * 169.00003051757812, 29.585235595703125 * Ⲇ, Ⲇ * 182.00003051757812, Ⲇ * 14.585235595703125);
		ᐃ.bezierCurveTo(Ⲇ * 219.00003051757812, Ⲇ * 48.585235595703125, Ⲇ * 222.00003051757812, Ⲇ * 92.58523559570312, Ⲇ * 218.00003051757812, Ⲇ * 112.58523559570312);
		ᐃ.bezierCurveTo(239.00003051757812 * Ⲇ, 95.58523559570312 * Ⲇ, 242.00003051757812 * Ⲇ, Ⲇ * 97.58523559570312, Ⲇ * 249.00003051757812, 94.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(255.00003051757812 * Ⲇ, 103.08523559570312 * Ⲇ, Ⲇ * 255.00003051757812, Ⲇ * 103.08523559570312, Ⲇ * 261.0000305175781, Ⲇ * 111.58523559570312);
		ᐃ.bezierCurveTo(261.5000305175781 * Ⲇ, Ⲇ * 99.58523559570312, Ⲇ * 261.5000305175781, Ⲇ * 99.58523559570312, 262.0000305175781 * Ⲇ, Ⲇ * 87.58523559570312);
		ᐃ.bezierCurveTo(282.0000305175781 * Ⲇ, 77.58523559570312 * Ⲇ, Ⲇ * 301.0000305175781, 74.58523559570312 * Ⲇ, Ⲇ * 314.0000305175781, 76.58523559570312 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆΔΔ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 186.00003051757812, Ⲇ * 192.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 185.00003051757812, 66.94886779785156 * Ⲇ, 184.50003051757812 * Ⲇ, Ⲇ * 104.94886779785156, Ⲇ * 183.00003051757812, Ⲇ * 16.948867797851562);
		ᐃ.bezierCurveTo(216.00003051757812 * Ⲇ, 47.94886779785156 * Ⲇ, Ⲇ * 219.00003051757812, Ⲇ * 80.94886779785156, Ⲇ * 218.00003051757812, 113.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(209.00003051757812 * Ⲇ, Ⲇ * 165.94886779785156, 200.00003051757812 * Ⲇ, Ⲇ * 176.94886779785156, Ⲇ * 189.00003051757812, 192.94886779785156 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⵠΔⲆΔΔ], ΔᐃΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(190.00003051757812 * Ⲇ, 191.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 207.00003051757812, 348.94886779785156 * Ⲇ, Ⲇ * 205.00003051757812, Ⲇ * 323.94886779785156, 209.00003051757812 * Ⲇ, 358.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(171.00003051757812 * Ⲇ, Ⲇ * 334.94886779785156, 167.00003051757812 * Ⲇ, Ⲇ * 302.94886779785156, Ⲇ * 161.00003051757812, 268.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 160.00003051757812, Ⲇ * 218.94886779785156, Ⲇ * 181.00003051757812, Ⲇ * 191.94886779785156, Ⲇ * 189.00003051757812, 186.94886779785156 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[3], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 194.00003051757812, Ⲇ * 195.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 116.00003051757812, Ⲇ * 150.94886779785156, 116.00003051757812 * Ⲇ, 150.94886779785156 * Ⲇ, 38.000030517578125 * Ⲇ, Ⲇ * 105.94886779785156);
		ᐃ.bezierCurveTo(67.00003051757812 * Ⲇ, 90.94886779785156 * Ⲇ, 96.00003051757812 * Ⲇ, 99.94886779785156 * Ⲇ, Ⲇ * 123.00003051757812, Ⲇ * 111.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 183.00003051757812, Ⲇ * 152.94886779785156, 179.00003051757812 * Ⲇ, Ⲇ * 180.94886779785156, 193.00003051757812 * Ⲇ, Ⲇ * 194.94886779785156);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆΔⲆΔ], ⲆⲆΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 189.00003051757812, 190.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(250.00003051757812 * Ⲇ, Ⲇ * 133.94886779785156, 311.0000305175781 * Ⲇ, Ⲇ * 78.94886779785156, 311.0000305175781 * Ⲇ, 76.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(306.0000305175781 * Ⲇ, 127.94886779785156 * Ⲇ, Ⲇ * 283.0000305175781, Ⲇ * 148.94886779785156, 261.0000305175781 * Ⲇ, 166.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 220.00003051757812, 197.94886779785156 * Ⲇ, Ⲇ * 191.00003051757812, 194.94886779785156 * Ⲇ, 189.00003051757812 * Ⲇ, Ⲇ * 195.94886779785156);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[3], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(189.00003051757812 * Ⲇ, 194.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(268.5000305175781 * Ⲇ, 211.94886779785156 * Ⲇ, 268.5000305175781 * Ⲇ, Ⲇ * 211.94886779785156, 348.0000305175781 * Ⲇ, Ⲇ * 228.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 316.0000305175781, Ⲇ * 247.94886779785156, Ⲇ * 298.0000305175781, Ⲇ * 256.94886779785156, 250.00003051757812 * Ⲇ, Ⲇ * 246.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 197.00003051757812, Ⲇ * 229.94886779785156, 189.00003051757812 * Ⲇ, Ⲇ * 202.94886779785156, 188.00003051757812 * Ⲇ, Ⲇ * 199.94886779785156);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆᐃⲆ], ᐃⲆ[3], Ⲇ * ⵠᐃⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 192.00003051757812, 191.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 116.50003051757812, 238.44886779785156 * Ⲇ, 116.50003051757812 * Ⲇ, 238.44886779785156 * Ⲇ, Ⲇ * 41.000030517578125, Ⲇ * 284.94886779785156);
		ᐃ.bezierCurveTo(49.000030517578125 * Ⲇ, Ⲇ * 252.94886779785156, Ⲇ * 56.000030517578125, Ⲇ * 242.94886779785156, Ⲇ * 80.00003051757812, 215.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(125.00003051757812 * Ⲇ, 181.94886779785156 * Ⲇ, Ⲇ * 174.00003051757812, Ⲇ * 183.94886779785156, Ⲇ * 192.00003051757812, 191.94886779785156 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⵠᐃⵠΔ], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 313.0000305175781, 76.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(308.0000305175781 * Ⲇ, Ⲇ * 130.58523559570312, Ⲇ * 279.0000305175781, 158.58523559570312 * Ⲇ, 254.00003051757812 * Ⲇ, Ⲇ * 175.58523559570312);
		ᐃ.bezierCurveTo(Ⲇ * 287.0000305175781, 182.58523559570312 * Ⲇ, 274.0000305175781 * Ⲇ, 181.08523559570312 * Ⲇ, Ⲇ * 294.0000305175781, 186.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 293.5000305175781, 196.08523559570312 * Ⲇ, 293.5000305175781 * Ⲇ, 196.08523559570312 * Ⲇ, Ⲇ * 293.0000305175781, Ⲇ * 205.58523559570312);
		ᐃ.bezierCurveTo(304.0000305175781 * Ⲇ, Ⲇ * 201.08523559570312, 304.0000305175781 * Ⲇ, Ⲇ * 201.08523559570312, Ⲇ * 315.0000305175781, 196.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(350.0000305175781 * Ⲇ, 219.58523559570312 * Ⲇ, 343.0000305175781 * Ⲇ, 221.58523559570312 * Ⲇ, 351.0000305175781 * Ⲇ, Ⲇ * 230.58523559570312);
		ᐃ.bezierCurveTo(296.0000305175781 * Ⲇ, 260.5852355957031 * Ⲇ, Ⲇ * 264.0000305175781, Ⲇ * 256.5852355957031, Ⲇ * 220.00003051757812, Ⲇ * 236.58523559570312);
		ᐃ.bezierCurveTo(233.00003051757812 * Ⲇ, Ⲇ * 266.5852355957031, Ⲇ * 232.00003051757812, 279.5852355957031 * Ⲇ, Ⲇ * 231.00003051757812, 295.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(222.00003051757812 * Ⲇ, Ⲇ * 297.5852355957031, Ⲇ * 222.00003051757812, Ⲇ * 297.5852355957031, 213.00003051757812 * Ⲇ, Ⲇ * 299.5852355957031);
		ᐃ.bezierCurveTo(Ⲇ * 219.50003051757812, Ⲇ * 308.0852355957031, Ⲇ * 219.50003051757812, 308.0852355957031 * Ⲇ, 226.00003051757812 * Ⲇ, 316.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 223.00003051757812, 344.5852355957031 * Ⲇ, Ⲇ * 216.00003051757812, 350.5852355957031 * Ⲇ, 209.00003051757812 * Ⲇ, 363.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 154.00003051757812, 318.5852355957031 * Ⲇ, 156.00003051757812 * Ⲇ, Ⲇ * 268.5852355957031, 160.00003051757812 * Ⲇ, Ⲇ * 238.58523559570312);
		ᐃ.bezierCurveTo(135.00003051757812 * Ⲇ, Ⲇ * 268.5852355957031, Ⲇ * 125.00003051757812, 267.5852355957031 * Ⲇ, 112.00003051757812 * Ⲇ, 272.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(104.50003051757812 * Ⲇ, 266.5852355957031 * Ⲇ, 104.50003051757812 * Ⲇ, 266.5852355957031 * Ⲇ, Ⲇ * 97.00003051757812, 260.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 93.00003051757812, Ⲇ * 271.0852355957031, Ⲇ * 93.00003051757812, Ⲇ * 271.0852355957031, Ⲇ * 89.00003051757812, 281.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(66.00003051757812 * Ⲇ, Ⲇ * 288.5852355957031, 59.000030517578125 * Ⲇ, Ⲇ * 288.5852355957031, Ⲇ * 39.000030517578125, 285.5852355957031 * Ⲇ);
		ᐃ.bezierCurveTo(56.000030517578125 * Ⲇ, Ⲇ * 216.58523559570312, Ⲇ * 91.00003051757812, 204.58523559570312 * Ⲇ, Ⲇ * 129.00003051757812, 189.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 90.00003051757812, Ⲇ * 176.58523559570312, 89.00003051757812 * Ⲇ, 173.58523559570312 * Ⲇ, 79.00003051757812 * Ⲇ, Ⲇ * 166.58523559570312);
		ᐃ.bezierCurveTo(82.00003051757812 * Ⲇ, 155.08523559570312 * Ⲇ, 82.00003051757812 * Ⲇ, 155.08523559570312 * Ⲇ, Ⲇ * 85.00003051757812, 143.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 75.50003051757812, Ⲇ * 147.58523559570312, 75.50003051757812 * Ⲇ, 147.58523559570312 * Ⲇ, 66.00003051757812 * Ⲇ, Ⲇ * 151.58523559570312);
		ᐃ.bezierCurveTo(Ⲇ * 44.000030517578125, Ⲇ * 133.58523559570312, Ⲇ * 41.000030517578125, Ⲇ * 124.58523559570312, 34.000030517578125 * Ⲇ, Ⲇ * 102.58523559570312);
		ᐃ.bezierCurveTo(100.00003051757812 * Ⲇ, 81.58523559570312 * Ⲇ, Ⲇ * 134.00003051757812, Ⲇ * 118.58523559570312, 150.00003051757812 * Ⲇ, 128.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(144.00003051757812 * Ⲇ, Ⲇ * 102.58523559570312, 147.00003051757812 * Ⲇ, 90.58523559570312 * Ⲇ, 150.00003051757812 * Ⲇ, 80.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 159.50003051757812, 79.08523559570312 * Ⲇ, Ⲇ * 159.50003051757812, 79.08523559570312 * Ⲇ, Ⲇ * 169.00003051757812, Ⲇ * 77.58523559570312);
		ᐃ.bezierCurveTo(Ⲇ * 163.00003051757812, 72.58523559570312 * Ⲇ, 163.00003051757812 * Ⲇ, 72.58523559570312 * Ⲇ, 157.00003051757812 * Ⲇ, Ⲇ * 67.58523559570312);
		ᐃ.bezierCurveTo(162.00003051757812 * Ⲇ, 42.585235595703125 * Ⲇ, 169.00003051757812 * Ⲇ, 29.585235595703125 * Ⲇ, 182.00003051757812 * Ⲇ, Ⲇ * 14.585235595703125);
		ᐃ.bezierCurveTo(Ⲇ * 219.00003051757812, 48.585235595703125 * Ⲇ, 222.00003051757812 * Ⲇ, Ⲇ * 92.58523559570312, 218.00003051757812 * Ⲇ, 112.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 239.00003051757812, 95.58523559570312 * Ⲇ, Ⲇ * 242.00003051757812, 97.58523559570312 * Ⲇ, 249.00003051757812 * Ⲇ, 94.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 255.00003051757812, 103.08523559570312 * Ⲇ, 255.00003051757812 * Ⲇ, 103.08523559570312 * Ⲇ, Ⲇ * 261.0000305175781, Ⲇ * 111.58523559570312);
		ᐃ.bezierCurveTo(261.5000305175781 * Ⲇ, 99.58523559570312 * Ⲇ, Ⲇ * 261.5000305175781, 99.58523559570312 * Ⲇ, Ⲇ * 262.0000305175781, 87.58523559570312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 282.0000305175781, Ⲇ * 77.58523559570312, 301.0000305175781 * Ⲇ, 74.58523559570312 * Ⲇ, 314.0000305175781 * Ⲇ, 76.58523559570312 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], Ⲇ * ΔᐃΔⲆΔ);
		return ⲆⲆ
	}

	function ⵠΔⲆΔᐃΔⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 90 * Ⲇ;
		ⲆⲆ.height = 98 * Ⲇ;
		ᐃ.translate(ⲆⲆⵠⲆ, ⲆⵠⲆᐃ * Ⲇ);
		0 === Δᐃ && (ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1, ᐃ.save(), ᐃ.translate(Ⲇ * 44, 50 * Ⲇ), ᐃ.rotate(.2), ᐃⵠΔⵠ(ᐃ, ΔⲆⲆⲆⲆ, Ⲇ * 41, 10 * Ⲇ), ᐃ.restore(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⵠ]));
		ᐃ.globalAlpha = ⵠⲆⲆⲆ;
		ᐃ.save();
		ᐃ.translate(44 * Ⲇ, 44 * Ⲇ);
		ᐃ.rotate(.2);
		ᐃⵠΔⵠ(ᐃ, 9, 41 * Ⲇ, 10 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[Ⲇⵠᐃⵠ], ⵠᐃΔΔΔ * Ⲇ);
		ᐃ.rotate(-.32);
		ᐃⵠΔⵠ(ᐃ, ᐃΔᐃᐃᐃᐃᐃ, Ⲇ * 32, 10 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], ᐃⵠⲆⲆ * Ⲇ);
		ᐃ.rotate(.68);
		ᐃⵠΔⵠ(ᐃ, ⲆᐃΔᐃⵠᐃᐃ, 23 * Ⲇ, 8 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[6], Ⲇ * 6);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Ⲇ * 45, 45 * Ⲇ);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, Ⲇ * -9, -25.5 * Ⲇ, 18 * Ⲇ, 51 * Ⲇ, 30 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[4], 2 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(45 * Ⲇ, 45 * Ⲇ);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, Ⲇ * -26, Ⲇ * -9, Ⲇ * 52, ΔⵠᐃⲆΔⲆⵠ * Ⲇ, 30 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠᐃΔ], ᐃⲆ[ⲆΔⵠᐃΔ], ⲆⲆⵠᐃ * Ⲇ);
		ᐃΔⵠ(ᐃ, 45 * Ⲇ, 29 * Ⲇ, 7 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃⵠᐃ]);
		ᐃΔⵠ(ᐃ, 45 * Ⲇ, Ⲇ * 61, 7 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃΔⵠ(ᐃ, Ⲇ * 28, Ⲇ * 45, ⲆⵠΔⲆⵠ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃΔⵠ(ᐃ, 62 * Ⲇ, 45 * Ⲇ, ⵠⵠⵠⲆΔ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔΔ]);
		return ⲆⲆ
	}

	function ΔⵠⵠⵠⵠᐃⲆΔⲆ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 118 * Ⲇ;
		ⲆⲆ.height = 129 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(90 * Ⲇ, 90 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -86.5, Ⲇ * -86, 110 * Ⲇ, 110 * Ⲇ, Ⲇ * 15);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⲆⵠΔⲆ], ᐃΔⲆΔⲆ);
		return ⲆⲆ
	}

	function ⵠᐃᐃΔⵠΔΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 130;
		var ⲆΔΔ = 142 * Ⲇ;
		var ΔΔ = Δⵠᐃ / 2;
		var ΔΔⵠ = ⲆΔΔ / ⵠᐃⵠⲆ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(ΔΔ, ΔΔⵠ + 7 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃΔⵠ(ᐃ, ⵠᐃⵠⵠ, ⲆⲆᐃΔ, Ⲇ * 60);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
		ᐃ.translate(0, -7 * Ⲇ);
		ᐃ.globalAlpha = ΔⵠⲆ;
		ᐃΔⵠ(ᐃ, 0, Ⲇᐃⵠⵠ, Ⲇ * 60, 0);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃΔ], ᐃⲆ[ⵠᐃⵠⲆ], ΔⵠⲆᐃ * Ⲇ);
		ᐃΔⵠ(ᐃ, 0, Ⲇᐃⵠⵠ, 40 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃΔⵠ(ᐃ, 0, 0, Ⲇ * 25);
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ᐃᐃⲆΔΔ], Ⲇ * ⲆᐃⲆΔⲆ);
		return ⲆⲆ
	}

	function ⲆᐃⲆⲆⵠⲆΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 501 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 309;
		ᐃ.translate(ⵠⲆᐃ, 6 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 126, Ⲇ * 184);
		ᐃ.bezierCurveTo(169 * Ⲇ, Ⲇ * 196, 194 * Ⲇ, Ⲇ * 198, 227 * Ⲇ, Ⲇ * 198);
		ᐃ.bezierCurveTo(235 * Ⲇ, 222 * Ⲇ, Ⲇ * 236, Ⲇ * 223, 241 * Ⲇ, 226 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 245, 228 * Ⲇ, Ⲇ * 257, 228 * Ⲇ, Ⲇ * 263, Ⲇ * 226);
		ᐃ.bezierCurveTo(Ⲇ * 267, Ⲇ * 225, Ⲇ * 270, 211 * Ⲇ, Ⲇ * 275, 198 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 332, Ⲇ * 194, Ⲇ * 347, 192 * Ⲇ, Ⲇ * 372, 188 * Ⲇ);
		ᐃ.bezierCurveTo(366 * Ⲇ, Ⲇ * 174.5, 366 * Ⲇ, 174.5 * Ⲇ, 360 * Ⲇ, Ⲇ * 161);
		ᐃ.bezierCurveTo(Ⲇ * 253.5, Ⲇ * 162, Ⲇ * 253.5, Ⲇ * 162, 147 * Ⲇ, 163 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⲆⵠⲆ;
		ᐃ.translate(0, Ⲇ * -ⲆⵠᐃΔᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ΔⲆᐃⵠⵠ * Ⲇ, 116 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 90, Ⲇ * 101, 96 * Ⲇ, 89 * Ⲇ, Ⲇ * 106, 83 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 86, Ⲇ * 79, Ⲇ * 86, 52 * Ⲇ, Ⲇ * 93, 38 * Ⲇ);
		ᐃ.bezierCurveTo(99 * Ⲇ, 51 * Ⲇ, Ⲇ * 107, Ⲇ * 57, 122 * Ⲇ, Ⲇ * 63);
		ᐃ.bezierCurveTo(130 * Ⲇ, Ⲇ * 53, Ⲇ * 141, 46 * Ⲇ, 161 * Ⲇ, 46 * Ⲇ);
		ᐃ.bezierCurveTo(157 * Ⲇ, Ⲇ * 31, Ⲇ * 158, Ⲇ * ⲆΔⲆΔᐃ, 169 * Ⲇ, Ⲇ * ΔⵠⵠⵠΔ);
		ᐃ.bezierCurveTo(171 * Ⲇ, Ⲇ * 24, 186 * Ⲇ, Ⲇ * 33, Ⲇ * 198, 45 * Ⲇ);
		ᐃ.bezierCurveTo(252 * Ⲇ, Ⲇ * 45, 252 * Ⲇ, Ⲇ * 45, 306 * Ⲇ, 45 * Ⲇ);
		ᐃ.bezierCurveTo(323 * Ⲇ, 33 * Ⲇ, 332 * Ⲇ, 21 * Ⲇ, 335 * Ⲇ, Ⲇ * ⵠⵠΔΔᐃΔΔ);
		ᐃ.bezierCurveTo(349 * Ⲇ, 21 * Ⲇ, 347 * Ⲇ, Ⲇ * 36, 345 * Ⲇ, Ⲇ * 46);
		ᐃ.bezierCurveTo(Ⲇ * 364, Ⲇ * 46, 369 * Ⲇ, Ⲇ * 48, Ⲇ * 377, Ⲇ * 63);
		ᐃ.bezierCurveTo(398 * Ⲇ, Ⲇ * 58, Ⲇ * 403, Ⲇ * 49, 409 * Ⲇ, 40 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 419, Ⲇ * 57, Ⲇ * 411, Ⲇ * 79, 398 * Ⲇ, Ⲇ * 85);
		ᐃ.bezierCurveTo(Ⲇ * 405, ᐃⲆᐃᐃΔⵠᐃ * Ⲇ, 405 * Ⲇ, Ⲇ * 106, 401 * Ⲇ, 118 * Ⲇ);
		ᐃ.bezierCurveTo(332.5 * Ⲇ, Ⲇ * 128.5, Ⲇ * 332.5, 128.5 * Ⲇ, 264 * Ⲇ, Ⲇ * 139);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ᐃⲆᐃⵠ], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 122, 191 * Ⲇ);
		ᐃ.bezierCurveTo(123 * Ⲇ, 237 * Ⲇ, 135 * Ⲇ, 245 * Ⲇ, 153 * Ⲇ, Ⲇ * 259);
		ᐃ.bezierCurveTo(167 * Ⲇ, Ⲇ * 269, 158 * Ⲇ, 281 * Ⲇ, Ⲇ * 118, Ⲇ * 276);
		ᐃ.bezierCurveTo(Ⲇ * 104, Ⲇ * 273, 98 * Ⲇ, 268 * Ⲇ, 93 * Ⲇ, Ⲇ * 242);
		ᐃ.bezierCurveTo(Ⲇ * 89, 220 * Ⲇ, 92 * Ⲇ, Ⲇ * 201, 102 * Ⲇ, 179 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[2], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 403, 182 * Ⲇ);
		ᐃ.bezierCurveTo(414 * Ⲇ, 215 * Ⲇ, 412 * Ⲇ, 232 * Ⲇ, Ⲇ * 403, 260 * Ⲇ);
		ᐃ.bezierCurveTo(395 * Ⲇ, 274 * Ⲇ, 375 * Ⲇ, Ⲇ * 272, 356 * Ⲇ, 270 * Ⲇ);
		ᐃ.bezierCurveTo(345 * Ⲇ, 268 * Ⲇ, Ⲇ * 339, 262 * Ⲇ, Ⲇ * 354, Ⲇ * 252);
		ᐃ.bezierCurveTo(Ⲇ * 370, 242 * Ⲇ, Ⲇ * 380, 225 * Ⲇ, Ⲇ * 384, 184 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[2], Ⲇ * ⵠᐃᐃⵠⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(155 * Ⲇ, 157 * Ⲇ);
		ᐃ.bezierCurveTo(146 * Ⲇ, Ⲇ * 189, Ⲇ * 137, Ⲇ * 198, 114 * Ⲇ, 219 * Ⲇ);
		ᐃ.bezierCurveTo(104 * Ⲇ, 212 * Ⲇ, Ⲇ * 98, 203 * Ⲇ, Ⲇ * 89, 189 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 82, 178 * Ⲇ, Ⲇ * 91, Ⲇ * 164, 93 * Ⲇ, Ⲇ * 136);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃΔⵠ], ᐃⲆ[ⲆᐃⵠⲆ], Ⲇ * ⵠᐃⵠⲆΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 347, Ⲇ * 162);
		ᐃ.bezierCurveTo(357 * Ⲇ, Ⲇ * 195, Ⲇ * 376, Ⲇ * 209, 387 * Ⲇ, Ⲇ * 217);
		ᐃ.bezierCurveTo(409 * Ⲇ, 201 * Ⲇ, 420 * Ⲇ, 181 * Ⲇ, 416 * Ⲇ, Ⲇ * 166);
		ᐃ.bezierCurveTo(410 * Ⲇ, Ⲇ * 150, Ⲇ * 412, 149 * Ⲇ, Ⲇ * 408, 130 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[2], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 86, Ⲇ * 134);
		ᐃ.bezierCurveTo(79 * Ⲇ, Ⲇ * 102, 92 * Ⲇ, 84 * Ⲇ, 108 * Ⲇ, 92 * Ⲇ);
		ᐃ.bezierCurveTo(149 * Ⲇ, 108 * Ⲇ, Ⲇ * 184, Ⲇ * 111, Ⲇ * 242, 111 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 294, 108 * Ⲇ, 341 * Ⲇ, 105 * Ⲇ, Ⲇ * 386, 98 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 412, Ⲇ * 91, Ⲇ * 417, Ⲇ * 86, Ⲇ * 415, Ⲇ * 133);
		ᐃ.bezierCurveTo(Ⲇ * 413, Ⲇ * 160, 413 * Ⲇ, 160 * Ⲇ, 368 * Ⲇ, Ⲇ * 174);
		ᐃ.bezierCurveTo(308 * Ⲇ, Ⲇ * 184, Ⲇ * 291, Ⲇ * 185, 270 * Ⲇ, 186 * Ⲇ);
		ᐃ.bezierCurveTo(264 * Ⲇ, Ⲇ * 206, Ⲇ * 262, 215 * Ⲇ, 253 * Ⲇ, Ⲇ * 215);
		ᐃ.bezierCurveTo(Ⲇ * 239, 217 * Ⲇ, Ⲇ * 239, Ⲇ * 211, Ⲇ * 231, Ⲇ * 186);
		ᐃ.bezierCurveTo(178 * Ⲇ, 184 * Ⲇ, Ⲇ * 156, 179 * Ⲇ, Ⲇ * 112, Ⲇ * 162);
		ᐃ.bezierCurveTo(Ⲇ * 87, 151 * Ⲇ, 90 * Ⲇ, Ⲇ * 144, 87 * Ⲇ, Ⲇ * 137);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[2], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 63, 98 * Ⲇ);
		ᐃ.bezierCurveTo(84 * Ⲇ, Ⲇ * 121, 109 * Ⲇ, 102 * Ⲇ, Ⲇ * 124, Ⲇ * 117);
		ᐃ.bezierCurveTo(138 * Ⲇ, 136 * Ⲇ, 123 * Ⲇ, Ⲇ * 165, 94 * Ⲇ, 150 * Ⲇ);
		ᐃ.bezierCurveTo(66 * Ⲇ, Ⲇ * 131, Ⲇ * 64, Ⲇ * 115, 63 * Ⲇ, 99 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆᐃⵠⲆ], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(449 * Ⲇ, 97 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 446, 143 * Ⲇ, Ⲇ * 415, 151 * Ⲇ, Ⲇ * 402, Ⲇ * 155);
		ᐃ.bezierCurveTo(Ⲇ * 386, Ⲇ * 157, 373 * Ⲇ, Ⲇ * 133, 391 * Ⲇ, Ⲇ * 116);
		ᐃ.bezierCurveTo(402 * Ⲇ, 106 * Ⲇ, 432 * Ⲇ, 124 * Ⲇ, 449 * Ⲇ, 97 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆ], ᐃⲆ[2], Ⲇ * 10);
		return ⲆⲆ
	}

	function ⵠᐃΔᐃᐃⲆⲆᐃᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 400;
		ⲆⲆ.height = Ⲇ * 400;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 96.5, Ⲇ * 277.34375);
		ᐃ.bezierCurveTo(197.5 * Ⲇ, Ⲇ * 259.84375, Ⲇ * 197.5, 259.84375 * Ⲇ, 298.5 * Ⲇ, Ⲇ * 242.34375);
		ᐃ.bezierCurveTo(311.5 * Ⲇ, Ⲇ * 231.34375, 307.5 * Ⲇ, Ⲇ * 168.34375, Ⲇ * 298.5, 150.34375 * Ⲇ);
		ᐃ.bezierCurveTo(198 * Ⲇ, Ⲇ * 170.34375, Ⲇ * 198, Ⲇ * 170.34375, 97.5 * Ⲇ, 190.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ΔΔᐃᐃ], Ⲇ * ⲆⵠΔⵠᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(98.5 * Ⲇ, 214.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 199, 196.34375 * Ⲇ, Ⲇ * 199, 196.34375 * Ⲇ, Ⲇ * 299.5, Ⲇ * 178.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃᐃᐃᐃ], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(98.5 * Ⲇ, 247.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 201.5, 229.34375 * Ⲇ, Ⲇ * 201.5, 229.34375 * Ⲇ, 304.5 * Ⲇ, 211.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, Ⲇᐃⵠⵠⵠ, ᐃⲆ[ΔΔᐃᐃ], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 97.5, Ⲇ * 189.34375);
		ᐃ.bezierCurveTo(Ⲇ * 97, Ⲇ * 199.84375, Ⲇ * 97, 199.84375 * Ⲇ, Ⲇ * 96.5, 210.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 110.5, 204.34375 * Ⲇ, Ⲇ * 110.5, Ⲇ * 204.34375, 124.5 * Ⲇ, Ⲇ * 198.34375);
		ᐃ.bezierCurveTo(137.5 * Ⲇ, Ⲇ * 203.84375, Ⲇ * 137.5, Ⲇ * 203.84375, Ⲇ * 150.5, Ⲇ * 209.34375);
		ᐃ.bezierCurveTo(Ⲇ * 172, 197.84375 * Ⲇ, 172 * Ⲇ, Ⲇ * 197.84375, 193.5 * Ⲇ, 186.34375 * Ⲇ);
		ᐃ.bezierCurveTo(211.5 * Ⲇ, 189.84375 * Ⲇ, Ⲇ * 211.5, Ⲇ * 189.84375, Ⲇ * 229.5, 193.34375 * Ⲇ);
		ᐃ.bezierCurveTo(240.5 * Ⲇ, 193.34375 * Ⲇ, Ⲇ * 240.5, 193.34375 * Ⲇ, Ⲇ * 251.5, Ⲇ * 193.34375);
		ᐃ.bezierCurveTo(261 * Ⲇ, 182.84375 * Ⲇ, Ⲇ * 261, Ⲇ * 182.84375, Ⲇ * 270.5, Ⲇ * 172.34375);
		ᐃ.bezierCurveTo(Ⲇ * 287.5, 169.34375 * Ⲇ, Ⲇ * 287.5, Ⲇ * 169.34375, 304.5 * Ⲇ, Ⲇ * 166.34375);
		ᐃ.bezierCurveTo(304.5 * Ⲇ, 156.34375 * Ⲇ, 300.5 * Ⲇ, Ⲇ * 145.34375, 298.5 * Ⲇ, Ⲇ * 147.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(300.5 * Ⲇ, 147.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 293.5, Ⲇ * 121.34375, 278.5 * Ⲇ, 106.34375 * Ⲇ, 256.5 * Ⲇ, 101.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 176.5, Ⲇ * 145.34375, 176.5 * Ⲇ, Ⲇ * 145.34375, 96.5 * Ⲇ, Ⲇ * 189.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃⵠᐃ], ᐃⲆ[6], Ⲇ * ΔΔΔⲆΔ);
		ᐃΔⵠ(ᐃ, 252.5 * Ⲇ, Ⲇ * 129.34375, Ⲇ * 18.027756377319946);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠΔᐃ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 248.5, 121.34375 * Ⲇ, 8.246211251235321 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⵠⵠ]);
		return ⲆⲆ
	}

	function ⵠᐃΔⲆⲆⵠΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 234 * Ⲇ;
		ⲆⲆ.height = 183 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(76 * Ⲇ, Ⲇ * 25);
		ᐃ.bezierCurveTo(Ⲇ * 150, 3 * Ⲇ, 181 * Ⲇ, 22 * Ⲇ, 203 * Ⲇ, Ⲇ * 41);
		ᐃ.bezierCurveTo(225 * Ⲇ, Ⲇ * 63, 225 * Ⲇ, 105 * Ⲇ, 198 * Ⲇ, Ⲇ * 133);
		ᐃ.bezierCurveTo(Ⲇ * 179, Ⲇ * 157, Ⲇ * 134, 178 * Ⲇ, Ⲇ * 81, 164 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 19, 148 * Ⲇ, Ⲇ * 6, Ⲇ * 95, 21 * Ⲇ, Ⲇ * 66);
		ᐃ.bezierCurveTo(Ⲇ * 34, Ⲇ * 39, 52 * Ⲇ, 33 * Ⲇ, 75 * Ⲇ, 25 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⵠ], ᐃⲆ[0], Ⲇ * ᐃᐃΔΔ);
		return ⲆⲆ
	}

	function ᐃᐃⵠΔⵠⵠⵠ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ, Δᐃ, ᐃᐃᐃⵠ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		if (Δᐃ == 0) {
			var Δⵠᐃ = Ⲇ * 270;
			var ⲆΔΔ = Ⲇ * 250;
			ⲆⲆ.width = Δⵠᐃ;
			ⲆⲆ.height = ⲆΔΔ;
			ᐃ.beginPath();
			ᐃ.moveTo(Ⲇ * 140, Ⲇ * 3);
			ᐃ.translate(-25 * Ⲇ, -ᐃⵠΔᐃⵠⲆⵠ * Ⲇ);
			ᐃ.bezierCurveTo(218 * Ⲇ, 31 * Ⲇ, 251 * Ⲇ, Ⲇ * 61, Ⲇ * 265, 85 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 278, 108 * Ⲇ, 295 * Ⲇ, Ⲇ * 160, 285 * Ⲇ, 195 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 271, 242 * Ⲇ, 213 * Ⲇ, 268 * Ⲇ, Ⲇ * 188, 266 * Ⲇ);
			ᐃ.bezierCurveTo(139 * Ⲇ, 262 * Ⲇ, 70 * Ⲇ, Ⲇ * 244, 47 * Ⲇ, Ⲇ * 204);
			ᐃ.bezierCurveTo(Ⲇ * ⲆⵠⵠΔⵠ, Ⲇ * 158, 35 * Ⲇ, Ⲇ * 78, 59 * Ⲇ, 56 * Ⲇ);
			ᐃ.bezierCurveTo(90 * Ⲇ, Ⲇ * 28, Ⲇ * 124, 23 * Ⲇ, Ⲇ * 140, 23 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[0])
		} else if (Δᐃ == 1) {
			var Δⵠᐃ = Ⲇ * 430;
			var ⲆΔΔ = 350 * Ⲇ;
			ⲆⲆ.width = Δⵠᐃ;
			ⲆⲆ.height = ⲆΔΔ;
			ᐃ.beginPath();
			ᐃ.moveTo(Ⲇ * 180, Ⲇ * ⵠᐃⵠΔᐃ);
			ᐃ.translate(-30 * Ⲇ, Ⲇ * -60);
			ᐃ.bezierCurveTo(Ⲇ * 283, Ⲇ * 60, Ⲇ * 265, 163 * Ⲇ, 335 * Ⲇ, 206 * Ⲇ);
			ᐃ.bezierCurveTo(376 * Ⲇ, Ⲇ * 231, Ⲇ * 492, 299 * Ⲇ, 434 * Ⲇ, 357 * Ⲇ);
			ᐃ.bezierCurveTo(371 * Ⲇ, 421 * Ⲇ, Ⲇ * 289, Ⲇ * 394, 255 * Ⲇ, Ⲇ * 386);
			ᐃ.bezierCurveTo(Ⲇ * 218, Ⲇ * 377, 91 * Ⲇ, 359 * Ⲇ, Ⲇ * 50, 272 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 12, 192 * Ⲇ, Ⲇ * 107, 75 * Ⲇ, Ⲇ * 178, 69 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ])
		} else if (Δᐃ == ᐃⲆᐃⵠ) {
			var Δⵠᐃ = 400 * Ⲇ;
			var ⲆΔΔ = 300 * Ⲇ;
			ⲆⲆ.width = Δⵠᐃ;
			ⲆⲆ.height = ⲆΔΔ;
			ᐃ.beginPath();
			ᐃ.moveTo(Ⲇ * 80, 52 * Ⲇ);
			ᐃ.translate(Ⲇ * -40, -30 * Ⲇ);
			ᐃ.bezierCurveTo(124 * Ⲇ, Ⲇ * 77, 241 * Ⲇ, 22 * Ⲇ, 311 * Ⲇ, 65 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 352, Ⲇ * 90, Ⲇ * 404, 176 * Ⲇ, 346 * Ⲇ, Ⲇ * 234);
			ᐃ.bezierCurveTo(283 * Ⲇ, Ⲇ * 298, 179 * Ⲇ, 299 * Ⲇ, 145 * Ⲇ, Ⲇ * 291);
			ᐃ.bezierCurveTo(Ⲇ * 108, Ⲇ * 282, ᐃⵠᐃΔᐃ * Ⲇ, 239 * Ⲇ, Ⲇ * 63, 205 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 37, 181 * Ⲇ, 45 * Ⲇ, Ⲇ * 131, Ⲇ * 80, 107 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[0])
		}
		return ⲆⲆ
	}

	function ⲆⲆΔᐃⵠΔⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 130;
		ⲆⲆ.height = Ⲇ * 142;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆⵠⲆ;
		ᐃ.save();
		ᐃ.translate(65 * Ⲇ, Ⲇ * 80);
		ᐃ.rotate(.2);
		ᐃⵠΔⵠ(ᐃ, 9, 60 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.save();
		ᐃ.translate(65 * Ⲇ, Ⲇ * 71);
		ᐃ.rotate(.2);
		ᐃⵠΔⵠ(ᐃ, 9, Ⲇ * 60, ⲆΔⵠᐃⲆ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃ], ᐃⲆ[ᐃΔⲆⵠ], 4);
		ᐃ.rotate(-.32);
		ᐃⵠΔⵠ(ᐃ, ⵠⲆᐃΔᐃ, Ⲇ * 38, 10 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔᐃⲆ], ᐃⲆ[ⲆⲆᐃΔᐃ], 4);
		ᐃ.rotate(.68);
		ᐃⵠΔⵠ(ᐃ, ΔⲆⲆⲆⲆ, Ⲇ * ⵠⵠⵠⲆᐃ, 8 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠⵠᐃ], ᐃⲆ[6], 6);
		ᐃ.restore();
		return ⲆⲆ
	}

	function ᐃᐃⵠⵠᐃⵠᐃᐃᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 309;
		ⲆⲆ.height = 287 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ΔⲆΔᐃ;
		ᐃ.translate(ⲆΔⲆᐃⵠ * Ⲇ, Ⲇ * ᐃΔᐃⲆⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 34.5, Ⲇ * 38.53125);
		ᐃ.bezierCurveTo(Ⲇ * 91.5, 30.53125 * Ⲇ, 138.5 * Ⲇ, Ⲇ * 68.53125, Ⲇ * 169.5, 93.53125 * Ⲇ);
		ᐃ.bezierCurveTo(208.5 * Ⲇ, Ⲇ * 128.53125, 226.5 * Ⲇ, Ⲇ * 157.53125, Ⲇ * 233.5, Ⲇ * 209.53125);
		ᐃ.bezierCurveTo(Ⲇ * 195.5, 218.53125 * Ⲇ, Ⲇ * 138.5, Ⲇ * 191.53125, 105.5 * Ⲇ, 157.53125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 54.5, Ⲇ * 112.53125, 41.5 * Ⲇ, 80.53125 * Ⲇ, 33.5 * Ⲇ, 38.53125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⲆΔⵠΔ], ⵠⲆⲆᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 143.5, Ⲇ * 74.53125);
		ᐃ.bezierCurveTo(164.5 * Ⲇ, Ⲇ * 73.53125, 159 * Ⲇ, Ⲇ * 74.53125, 174.5 * Ⲇ, Ⲇ * 74.53125);
		ᐃ.bezierCurveTo(Ⲇ * 186, 86.53125 * Ⲇ, 186 * Ⲇ, 86.53125 * Ⲇ, 197.5 * Ⲇ, Ⲇ * 98.53125);
		ᐃ.bezierCurveTo(186 * Ⲇ, Ⲇ * 97.03125, Ⲇ * 186, Ⲇ * 97.03125, 174.5 * Ⲇ, Ⲇ * 95.53125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], ᐃⲆᐃⲆᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 87.5, Ⲇ * 142.53125);
		ᐃ.bezierCurveTo(Ⲇ * 92, 160.03125 * Ⲇ, Ⲇ * 92, Ⲇ * 160.03125, Ⲇ * 96.5, Ⲇ * 177.53125);
		ᐃ.bezierCurveTo(108 * Ⲇ, Ⲇ * 181.53125, Ⲇ * 108, Ⲇ * 181.53125, Ⲇ * 119.5, 185.53125 * Ⲇ);
		ᐃ.bezierCurveTo(116.5 * Ⲇ, Ⲇ * 175.53125, Ⲇ * 116.5, 175.53125 * Ⲇ, Ⲇ * 113.5, Ⲇ * 165.53125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[Ⲇᐃⵠⵠ], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 236.5, Ⲇ * 189.53125);
		ᐃ.bezierCurveTo(Ⲇ * 274.5, Ⲇ * 197.53125, 255.5 * Ⲇ, Ⲇ * 194.03125, 274.5 * Ⲇ, 198.53125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 272.5, Ⲇ * 236.53125, 261.5 * Ⲇ, 237.53125 * Ⲇ, 242.5 * Ⲇ, Ⲇ * 248.53125);
		ᐃ.bezierCurveTo(Ⲇ * 230.5, 231.03125 * Ⲇ, 230.5 * Ⲇ, Ⲇ * 231.03125, Ⲇ * 218.5, 213.53125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ], ᐃⲆ[0], ᐃᐃⵠⵠΔ * Ⲇ);
		ᐃ.globalAlpha = ᐃΔⵠΔ;
		ᐃ.translate(Ⲇ * -ᐃᐃⵠⵠΔ, Ⲇ * -ⵠⵠΔΔⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(34.5 * Ⲇ, 38.53125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 91.5, 30.53125 * Ⲇ, 138.5 * Ⲇ, Ⲇ * 68.53125, 169.5 * Ⲇ, Ⲇ * 93.53125);
		ᐃ.bezierCurveTo(208.5 * Ⲇ, 128.53125 * Ⲇ, Ⲇ * 226.5, Ⲇ * 157.53125, Ⲇ * 233.5, 209.53125 * Ⲇ);
		ᐃ.bezierCurveTo(195.5 * Ⲇ, Ⲇ * 218.53125, Ⲇ * 138.5, 191.53125 * Ⲇ, 105.5 * Ⲇ, 157.53125 * Ⲇ);
		ᐃ.bezierCurveTo(54.5 * Ⲇ, Ⲇ * 112.53125, Ⲇ * 41.5, 80.53125 * Ⲇ, Ⲇ * 33.5, Ⲇ * 38.53125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆᐃᐃΔ], ⲆΔⲆᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 143.5, 74.53125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 164.5, Ⲇ * 73.53125, 159 * Ⲇ, Ⲇ * 74.53125, 174.5 * Ⲇ, Ⲇ * 74.53125);
		ᐃ.bezierCurveTo(186 * Ⲇ, Ⲇ * 86.53125, Ⲇ * 186, Ⲇ * 86.53125, Ⲇ * 197.5, 98.53125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 186, Ⲇ * 97.03125, 186 * Ⲇ, 97.03125 * Ⲇ, 174.5 * Ⲇ, Ⲇ * 95.53125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(87.5 * Ⲇ, Ⲇ * 142.53125);
		ᐃ.bezierCurveTo(Ⲇ * 92, 160.03125 * Ⲇ, Ⲇ * 92, Ⲇ * 160.03125, 96.5 * Ⲇ, 177.53125 * Ⲇ);
		ᐃ.bezierCurveTo(108 * Ⲇ, Ⲇ * 181.53125, 108 * Ⲇ, Ⲇ * 181.53125, 119.5 * Ⲇ, Ⲇ * 185.53125);
		ᐃ.bezierCurveTo(Ⲇ * 116.5, 175.53125 * Ⲇ, 116.5 * Ⲇ, Ⲇ * 175.53125, 113.5 * Ⲇ, 165.53125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ⵠᐃᐃⵠⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(236.5 * Ⲇ, Ⲇ * 189.53125);
		ᐃ.bezierCurveTo(Ⲇ * 274.5, 197.53125 * Ⲇ, Ⲇ * 255.5, 194.03125 * Ⲇ, 274.5 * Ⲇ, 198.53125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 272.5, 236.53125 * Ⲇ, Ⲇ * 261.5, Ⲇ * 237.53125, 242.5 * Ⲇ, 248.53125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 230.5, Ⲇ * 231.03125, Ⲇ * 230.5, 231.03125 * Ⲇ, 218.5 * Ⲇ, Ⲇ * 213.53125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆᐃⲆ], Ⲇ * ⲆΔⵠᐃⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 109.5, 51.53125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 107.5, Ⲇ * 92.53125, 91.5 * Ⲇ, Ⲇ * 95.53125, Ⲇ * 59.5, Ⲇ * 101.53125);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⲆⲆ], ᐃⲆ[2], 7 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(72.5 * Ⲇ, Ⲇ * 51.53125);
		ᐃ.bezierCurveTo(71 * Ⲇ, 64.53125 * Ⲇ, Ⲇ * 69.5, Ⲇ * 76.53125, Ⲇ * 69.5, Ⲇ * 77.53125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆᐃⲆ], 7 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 84.5, Ⲇ * 63.53125);
		ᐃ.bezierCurveTo(Ⲇ * 70.5, Ⲇ * 65.03125, 70.5 * Ⲇ, 65.03125 * Ⲇ, Ⲇ * 56.5, Ⲇ * 66.53125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃ], ᐃⲆ[2], Ⲇ * 7);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 125.5, Ⲇ * 84.53125);
		ᐃ.bezierCurveTo(Ⲇ * 125.5, 110.03125 * Ⲇ, 125.5 * Ⲇ, 110.03125 * Ⲇ, Ⲇ * 125.5, Ⲇ * 135.53125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆᐃⵠⲆ], 7 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 149.5, Ⲇ * 108.53125);
		ᐃ.bezierCurveTo(150 * Ⲇ, Ⲇ * 137.03125, 150 * Ⲇ, 137.03125 * Ⲇ, Ⲇ * 150.5, 165.53125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⲆ], ᐃⲆ[2], 7 * Ⲇ);
		return ⲆⲆ
	}

	function ⲆⵠᐃᐃⵠⵠΔ(Ⲇ, ⵠᐃⵠ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 2 * (Ⲇ * ⵠᐃⵠ);
		var ⲆΔΔ = ⵠᐃⵠ * Ⲇ * ⵠⲆⵠΔ;
		var ΔΔ = Δⵠᐃ / ⲆᐃᐃΔ;
		var ΔΔⵠ = ⲆΔΔ / 2;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(ΔΔ, ΔΔⵠ);
		ᐃΔⵠ(ᐃ, ⵠⲆΔⵠ, 0, Ⲇ * ⵠᐃⵠ, ⲆᐃⲆ);
		ᐃⵠ(ᐃ, ᐃⲆ);
		return ⲆⲆ
	}

	function ⵠⲆΔᐃⵠ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 18 * Ⲇ;
		var ⲆΔΔ = ΔⵠᐃⲆΔⲆⵠ * Ⲇ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		var ΔΔ = 9 * Ⲇ;
		var ΔΔⵠ = Ⲇ * ⲆⵠⵠⵠᐃⵠΔ;
		var ⵠᐃⵠ = ⲆᐃⵠⲆⵠ * Ⲇ;
		ᐃ.save();
		ᐃ.translate(ΔΔ, ΔΔⵠ);
		ᐃ.globalAlpha = 1;
		ᐃΔⵠ(ᐃ, 0, ⵠⲆΔⵠ, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		var ⵠᐃⵠ = Ⲇ * 3;
		var ΔΔ = ⲆⲆᐃΔ;
		var ΔΔⵠ = Ⲇ * -ⵠⵠⵠⵠ;
		ᐃ.translate(ΔΔ, ΔΔⵠ);
		ᐃ.globalAlpha = ⵠΔᐃ;
		ᐃΔⵠ(ᐃ, ⵠᐃΔ, 0, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆ]);
		ᐃ.restore();
		return ⲆⲆ
	}

	function ⵠΔᐃⲆᐃⲆⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 90 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 101;
		ᐃ.translate(0 * Ⲇ, Ⲇ * ΔⲆΔᐃⵠ);
		ⵠᐃⵠⵠ === Δᐃ && (ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠⲆⲆⲆ, ᐃΔⵠ(ᐃ, 44 * Ⲇ, 55 * Ⲇ, 41 * Ⲇ), ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠⲆ]));
		ᐃ.globalAlpha = 1;
		ᐃΔⵠ(ᐃ, 44 * Ⲇ, Ⲇ * 45, 41 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆ], ᐃⲆ[2], 4 * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 44, Ⲇ * 45, Ⲇ * 31);
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.save();
		ᐃ.translate(45 * Ⲇ, Ⲇ * 45);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ⵠᐃΔΔⲆ, -25.5 * Ⲇ, Ⲇ * ᐃⲆⲆΔⵠΔⲆ, Ⲇ * 51, 30 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆⵠⲆ], ᐃⲆ[4], Ⲇ * 2);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 45, 45 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -26 * Ⲇ, Ⲇ * -ⵠΔⲆᐃⲆ, 52 * Ⲇ, Ⲇ * ΔⲆⲆⲆΔᐃⵠ, Ⲇ * 30);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠᐃΔ], ᐃⲆ[4], Ⲇ * ⲆᐃⵠⲆ);
		ᐃΔⵠ(ᐃ, Ⲇ * 45, Ⲇ * 29, ΔΔⲆⲆⲆ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃΔⵠ(ᐃ, 45 * Ⲇ, 61 * Ⲇ, Ⲇ * ⵠⵠΔⲆᐃΔⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃΔⵠ(ᐃ, Ⲇ * 28, Ⲇ * 45, 7 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃΔⵠ(ᐃ, Ⲇ * 62, 45 * Ⲇ, 7 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔΔ]);
		return ⲆⲆ
	}

	function ᐃⲆⲆΔᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 220 * Ⲇ;
		var ⲆΔΔ = Ⲇ * 220;
		var ⵠᐃⵠ = ⵠᐃΔᐃⵠ * Ⲇ;
		var ΔⲆⵠⵠ = ⵠᐃⵠ / ΔⵠⲆⵠⲆ;
		var ⵠⲆⲆΔ = 20 * Ⲇ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(Δⵠᐃ / 2, ⲆΔΔ / ⵠⲆⵠΔ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠΔⲆ;
		!ᐃᐃⵠΔ && ᐃ.translate(Ⲇ * 0, -8 * Ⲇ);
		ᐃⵠΔⵠ(ᐃ, 7, ⵠᐃⵠ, ΔⲆⵠⵠ);
		if (ᐃᐃⵠΔ) {
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔ])
		} else {
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ])
		}
		ᐃ.globalAlpha = 1;
		if (ⲆⲆᐃΔ == Δᐃ) {
			ᐃⵠΔⵠ(ᐃ, ᐃΔᐃⲆΔ, .65 * ⵠᐃⵠ, .65 * ΔⲆⵠⵠ);
			ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆⲆⵠ])
		} else if (Δᐃ == 1) {
			ᐃ.translate(ⲆᐃⵠⲆᐃ * Ⲇ, Ⲇ * 20);
			ᐃⵠΔⵠ(ᐃ, ᐃΔᐃⲆΔ, .45 * ⵠᐃⵠ, ΔⲆⵠⵠ * .4);
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⵠⲆ])
		}
		return ⲆⲆ
	}

	function ⵠᐃᐃⵠⵠᐃⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 90 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 98;
		ᐃ.translate(ΔᐃΔ, 4 * Ⲇ);
		Δᐃ === 0 && (ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1, ᐃ.save(), ᐃ.translate(44 * Ⲇ, Ⲇ * 50), ᐃ.rotate(1), ᐃⵠΔⵠ(ᐃ, ᐃΔⲆΔⲆᐃᐃ, 41 * Ⲇ, Ⲇ * 10), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.restore());
		ᐃ.globalAlpha = 1;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 44, 44 * Ⲇ);
		ᐃ.rotate(1);
		ᐃⵠΔⵠ(ᐃ, ⲆΔΔⲆⵠ, 41 * Ⲇ, Ⲇ * ᐃⲆⲆⵠⲆ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ΔΔᐃᐃ], Ⲇ * 4);
		ᐃ.rotate(.56);
		ᐃⵠΔⵠ(ᐃ, ᐃΔⲆΔⲆᐃᐃ, Ⲇ * 33, ᐃⲆⵠΔΔ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆⲆ], ᐃⲆ[4], 4 * Ⲇ);
		ᐃ.rotate(.28);
		ᐃⵠΔⵠ(ᐃ, 8, Ⲇ * 24, Ⲇ * 8);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔΔ]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(45 * Ⲇ, Ⲇ * 45);
		ᐃ.rotate(ᐃΔΔ);
		ᐃᐃᐃ(ᐃ, -9 * Ⲇ, -25.5 * Ⲇ, Ⲇ * ΔᐃΔⵠᐃ, 51 * Ⲇ, Ⲇ * 30);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔΔ], ᐃⲆ[4], Ⲇ * ⲆᐃᐃΔ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 45, 45 * Ⲇ);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, Ⲇ * -26, -9 * Ⲇ, 52 * Ⲇ, ⲆⲆΔⲆⵠ * Ⲇ, 30 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆⵠⲆ], ᐃⲆ[ᐃΔⲆΔⲆ], Ⲇ * 2);
		ᐃΔⵠ(ᐃ, Ⲇ * 45, 29 * Ⲇ, 7 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔᐃⵠ]);
		ᐃΔⵠ(ᐃ, 45 * Ⲇ, 61 * Ⲇ, 7 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⲆⵠ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 28, 45 * Ⲇ, Ⲇ * 7);
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃⵠᐃ]);
		ᐃΔⵠ(ᐃ, 62 * Ⲇ, Ⲇ * 45, Ⲇ * 7);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆᐃⵠ]);
		return ⲆⲆ
	}

	function ⵠⵠⲆᐃᐃᐃᐃ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 220 * Ⲇ;
		var ⲆΔΔ = Ⲇ * 230;
		var ⵠᐃⵠ = Ⲇ * ⵠᐃΔⲆᐃ;
		var ΔⲆⵠⵠ = ⵠᐃⵠ / 4;
		var ⵠⲆⲆΔ = Ⲇ * 20;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(Δⵠᐃ / Δᐃᐃⵠ, ⲆΔΔ / Δⵠᐃᐃ + ⵠⲆⲆΔ);
		ᐃ.globalAlpha = .5;
		ᐃⵠΔⵠ(ᐃ, ⵠⵠᐃΔᐃ, ⵠᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, -ⵠⲆⲆΔ);
		ᐃⵠΔⵠ(ᐃ, 7, ⵠᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃⵠΔⵠ(ᐃ, ΔΔᐃⵠⵠ, .65 * ⵠᐃⵠ, ΔⲆⵠⵠ * .65);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		return ⲆⲆ
	}

	function ΔΔⵠΔΔΔⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 220;
		ⲆⲆ.height = Ⲇ * 180;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(-90 * Ⲇ, Ⲇ * -150);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 104, Ⲇ * 237.8000030517578);
		ᐃ.bezierCurveTo(Ⲇ * 110, Ⲇ * 237.8000030517578, 110 * Ⲇ, Ⲇ * 237.8000030517578, 116 * Ⲇ, Ⲇ * 237.8000030517578);
		ᐃ.bezierCurveTo(Ⲇ * 116, Ⲇ * 241.8000030517578, Ⲇ * 116, Ⲇ * 241.8000030517578, 116 * Ⲇ, Ⲇ * 245.8000030517578);
		ᐃ.bezierCurveTo(115 * Ⲇ, 245.3000030517578 * Ⲇ, 115 * Ⲇ, Ⲇ * 245.3000030517578, 114 * Ⲇ, Ⲇ * 244.8000030517578);
		ᐃ.bezierCurveTo(109.5 * Ⲇ, Ⲇ * 244.8000030517578, 109.5 * Ⲇ, Ⲇ * 244.8000030517578, 105 * Ⲇ, 244.8000030517578 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[5], Ⲇ * ⲆᐃᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 115, 211.20000457763672 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 106, 216.20000457763672 * Ⲇ, 101 * Ⲇ, 234.20000457763672 * Ⲇ, 102 * Ⲇ, 241.20000457763672 * Ⲇ);
		ᐃ.bezierCurveTo(102 * Ⲇ, 260.2000045776367 * Ⲇ, Ⲇ * 115, Ⲇ * 269.2000045776367, 115 * Ⲇ, 269.2000045776367 * Ⲇ);
		ᐃ.bezierCurveTo(116 * Ⲇ, Ⲇ * 265.2000045776367, Ⲇ * 115.5, Ⲇ * 265.2000045776367, 116 * Ⲇ, Ⲇ * 261.2000045776367);
		ᐃ.bezierCurveTo(Ⲇ * 112, 264 * Ⲇ, Ⲇ * 108, 254 * Ⲇ, Ⲇ * 106, 242 * Ⲇ);
		ᐃ.bezierCurveTo(105 * Ⲇ, Ⲇ * 232, Ⲇ * 110, Ⲇ * 222, Ⲇ * 115, 218 * Ⲇ);
		ᐃ.bezierCurveTo(116 * Ⲇ, 216.75 * Ⲇ, 115.5 * Ⲇ, Ⲇ * 217.375, 116 * Ⲇ, 216.75 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[ⲆΔⵠⵠᐃ], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 120, 207 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 115, Ⲇ * 206, 114 * Ⲇ, Ⲇ * 209, 114 * Ⲇ, Ⲇ * 211);
		ᐃ.bezierCurveTo(114 * Ⲇ, Ⲇ * 268, Ⲇ * 114, Ⲇ * 241, 114 * Ⲇ, Ⲇ * 271);
		ᐃ.bezierCurveTo(115 * Ⲇ, 276 * Ⲇ, Ⲇ * 118, 276 * Ⲇ, 120 * Ⲇ, 276 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 122, 273 * Ⲇ, Ⲇ * 120.5, 274.5 * Ⲇ, Ⲇ * 121, 273 * Ⲇ);
		ᐃ.bezierCurveTo(121 * Ⲇ, 241 * Ⲇ, Ⲇ * 121, 241 * Ⲇ, 121 * Ⲇ, Ⲇ * 209);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⲆΔⵠᐃΔ], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(284 * Ⲇ, 238 * Ⲇ);
		ᐃ.bezierCurveTo(289.5 * Ⲇ, Ⲇ * 238, 289.5 * Ⲇ, Ⲇ * 238, Ⲇ * 295, Ⲇ * 238);
		ᐃ.bezierCurveTo(295 * Ⲇ, Ⲇ * 241.5, 295 * Ⲇ, Ⲇ * 241.5, 295 * Ⲇ, 245 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 289.5, Ⲇ * 245, Ⲇ * 289.5, 245 * Ⲇ, 284 * Ⲇ, 245 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⲆⲆ], ᐃⲆ[4], Δᐃᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(283 * Ⲇ, Ⲇ * 211);
		ᐃ.bezierCurveTo(Ⲇ * 293, Ⲇ * 216, 297 * Ⲇ, 231 * Ⲇ, Ⲇ * 297, Ⲇ * 241);
		ᐃ.bezierCurveTo(Ⲇ * 298, 254 * Ⲇ, 290 * Ⲇ, Ⲇ * 265, 284 * Ⲇ, Ⲇ * 269);
		ᐃ.bezierCurveTo(Ⲇ * 283, 266 * Ⲇ, Ⲇ * 283.5, Ⲇ * 266, Ⲇ * 283, Ⲇ * 263);
		ᐃ.bezierCurveTo(Ⲇ * 290, 260 * Ⲇ, Ⲇ * 292, Ⲇ * 251, 293 * Ⲇ, 242 * Ⲇ);
		ᐃ.bezierCurveTo(292 * Ⲇ, 223 * Ⲇ, Ⲇ * 289, 224 * Ⲇ, 284 * Ⲇ, 218 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆΔⲆ], ᐃⲆ[ᐃᐃⲆⵠ], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(280 * Ⲇ, Ⲇ * 206);
		ᐃ.bezierCurveTo(284 * Ⲇ, 206 * Ⲇ, Ⲇ * 285, 208 * Ⲇ, Ⲇ * 285, 211 * Ⲇ);
		ᐃ.bezierCurveTo(285 * Ⲇ, 241.5 * Ⲇ, Ⲇ * 285, Ⲇ * 241.5, Ⲇ * 285, 272 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 284, 275 * Ⲇ, 284 * Ⲇ, Ⲇ * 275, Ⲇ * 280, Ⲇ * 275);
		ᐃ.bezierCurveTo(Ⲇ * 279, Ⲇ * 273.5, Ⲇ * 279, 273.5 * Ⲇ, Ⲇ * 278, Ⲇ * 272);
		ᐃ.bezierCurveTo(Ⲇ * 278, 240.5 * Ⲇ, 278 * Ⲇ, 240.5 * Ⲇ, 278 * Ⲇ, Ⲇ * 209);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[4], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 138, Ⲇ * 298.40000915527344);
		ᐃ.bezierCurveTo(141 * Ⲇ, Ⲇ * 311.40000915527344, Ⲇ * 151, Ⲇ * 314.40000915527344, 162 * Ⲇ, Ⲇ * 316.40000915527344);
		ᐃ.bezierCurveTo(224 * Ⲇ, Ⲇ * 316.40000915527344, 200 * Ⲇ, Ⲇ * 315.90000915527344, Ⲇ * 238, 315.40000915527344 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 254, 316.40000915527344 * Ⲇ, 261 * Ⲇ, Ⲇ * 306.40000915527344, Ⲇ * 264, 298.40000915527344 * Ⲇ);
		ᐃ.bezierCurveTo(255 * Ⲇ, Ⲇ * 304.40000915527344, Ⲇ * 250, 306.40000915527344 * Ⲇ, 244 * Ⲇ, Ⲇ * 306.40000915527344);
		ᐃ.bezierCurveTo(201 * Ⲇ, Ⲇ * 306.90000915527344, Ⲇ * 201, 306.90000915527344 * Ⲇ, 158 * Ⲇ, 307.40000915527344 * Ⲇ);
		ᐃ.bezierCurveTo(150 * Ⲇ, Ⲇ * 306.40000915527344, Ⲇ * 148, 306.40000915527344 * Ⲇ, 139 * Ⲇ, Ⲇ * 300.40000915527344);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆΔⲆ], ᐃⲆ[ΔᐃΔΔ], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(161 * Ⲇ, Ⲇ * 177.5999984741211);
		ᐃ.bezierCurveTo(130 * Ⲇ, Ⲇ * 175.5999984741211, 123 * Ⲇ, 190.5999984741211 * Ⲇ, 122 * Ⲇ, 205.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(121 * Ⲇ, 277.5999984741211 * Ⲇ, Ⲇ * 122, 242.5999984741211 * Ⲇ, 122 * Ⲇ, Ⲇ * 279.5999984741211);
		ᐃ.bezierCurveTo(128 * Ⲇ, 297.5999984741211 * Ⲇ, 137 * Ⲇ, Ⲇ * 299.5999984741211, 143 * Ⲇ, Ⲇ * 300.5999984741211);
		ᐃ.bezierCurveTo(Ⲇ * 163, 301.0999984741211 * Ⲇ, 163 * Ⲇ, Ⲇ * 301.0999984741211, 183 * Ⲇ, Ⲇ * 301.5999984741211);
		ᐃ.bezierCurveTo(Ⲇ * 150, 300.5999984741211 * Ⲇ, 135 * Ⲇ, 290.5999984741211 * Ⲇ, Ⲇ * 134, Ⲇ * 267.5999984741211);
		ᐃ.bezierCurveTo(Ⲇ * 133, 245.5999984741211 * Ⲇ, Ⲇ * 146, Ⲇ * 235.5999984741211, Ⲇ * 164, 235.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 206, Ⲇ * 236.0999984741211, 206 * Ⲇ, 236.0999984741211 * Ⲇ, 248 * Ⲇ, Ⲇ * 236.5999984741211);
		ᐃ.bezierCurveTo(266 * Ⲇ, 243.5999984741211 * Ⲇ, 268 * Ⲇ, Ⲇ * 259.5999984741211, Ⲇ * 267, 266.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(266 * Ⲇ, Ⲇ * 288.5999984741211, 251 * Ⲇ, 294.5999984741211 * Ⲇ, 244 * Ⲇ, Ⲇ * 297.5999984741211);
		ᐃ.bezierCurveTo(228.5 * Ⲇ, 299.5999984741211 * Ⲇ, 228.5 * Ⲇ, Ⲇ * 299.5999984741211, 213 * Ⲇ, Ⲇ * 301.5999984741211);
		ᐃ.bezierCurveTo(Ⲇ * 236, Ⲇ * 301.0999984741211, 236 * Ⲇ, Ⲇ * 301.0999984741211, 259 * Ⲇ, Ⲇ * 300.5999984741211);
		ᐃ.bezierCurveTo(Ⲇ * 272, 295.5999984741211 * Ⲇ, 277 * Ⲇ, Ⲇ * 288.5999984741211, 278 * Ⲇ, 271.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 277.5, 236.5999984741211 * Ⲇ, 277.5 * Ⲇ, Ⲇ * 236.5999984741211, 277 * Ⲇ, 201.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(276 * Ⲇ, Ⲇ * 186.5999984741211, Ⲇ * 265, Ⲇ * 178.5999984741211, Ⲇ * 254, Ⲇ * 177.5999984741211);
		ᐃ.bezierCurveTo(247.5 * Ⲇ, Ⲇ * 177.5999984741211, 247.5 * Ⲇ, 177.5999984741211 * Ⲇ, 241 * Ⲇ, Ⲇ * 177.5999984741211);
		ᐃ.bezierCurveTo(Ⲇ * 255, 202.5999984741211 * Ⲇ, 214 * Ⲇ, Ⲇ * 217.5999984741211, 201 * Ⲇ, Ⲇ * 215.5999984741211);
		ᐃ.bezierCurveTo(Ⲇ * 170, 215.5999984741211 * Ⲇ, 152 * Ⲇ, 197.5999984741211 * Ⲇ, 161 * Ⲇ, Ⲇ * 178.5999984741211);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔⵠ], ᐃⲆ[ᐃⵠⲆⲆ], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(162 * Ⲇ, Ⲇ * 175.5999984741211);
		ᐃ.bezierCurveTo(153 * Ⲇ, 176.0999984741211 * Ⲇ, Ⲇ * 153, Ⲇ * 176.0999984741211, Ⲇ * 144, Ⲇ * 176.5999984741211);
		ᐃ.bezierCurveTo(125 * Ⲇ, 178.5999984741211 * Ⲇ, 121 * Ⲇ, 196.5999984741211 * Ⲇ, Ⲇ * 121, 207.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 121, 243.20000076293945 * Ⲇ, 121 * Ⲇ, 243.20000076293945 * Ⲇ, Ⲇ * 121, 278.8000030517578 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 126, 298.8000030517578 * Ⲇ, Ⲇ * 137, 300.8000030517578 * Ⲇ, Ⲇ * 146, Ⲇ * 302.8000030517578);
		ᐃ.bezierCurveTo(200.5 * Ⲇ, 302.8000030517578 * Ⲇ, Ⲇ * 200.5, 302.8000030517578 * Ⲇ, 255 * Ⲇ, Ⲇ * 302.8000030517578);
		ᐃ.bezierCurveTo(271 * Ⲇ, Ⲇ * 301.8000030517578, 279 * Ⲇ, Ⲇ * 288.8000030517578, Ⲇ * 279, Ⲇ * 273.8000030517578);
		ᐃ.bezierCurveTo(Ⲇ * 279, Ⲇ * 236.8000030517578, 279 * Ⲇ, 236.8000030517578 * Ⲇ, Ⲇ * 279, 199.8000030517578 * Ⲇ);
		ᐃ.bezierCurveTo(274 * Ⲇ, Ⲇ * 178.8000030517578, 263 * Ⲇ, 177.8000030517578 * Ⲇ, 255 * Ⲇ, Ⲇ * 175.8000030517578);
		ᐃ.bezierCurveTo(Ⲇ * 248, 175.8000030517578 * Ⲇ, Ⲇ * 248, Ⲇ * 175.8000030517578, Ⲇ * 241, 175.8000030517578 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 240, Ⲇ * 175.8000030517578, Ⲇ * 240, 175.8000030517578 * Ⲇ, 239 * Ⲇ, Ⲇ * 175.8000030517578);
		ᐃ.bezierCurveTo(Ⲇ * 254, Ⲇ * 200.8000030517578, Ⲇ * 222, Ⲇ * 211.8000030517578, Ⲇ * 202, 212.8000030517578 * Ⲇ);
		ᐃ.bezierCurveTo(168 * Ⲇ, 213.8000030517578 * Ⲇ, 151 * Ⲇ, 190.8000030517578 * Ⲇ, 163 * Ⲇ, Ⲇ * 176.8000030517578);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔⵠⲆᐃᐃ, ᐃⲆ[ⲆΔⵠᐃΔ], Ⲇ * ᐃΔⵠⲆⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(198 * Ⲇ, 161.4000015258789 * Ⲇ);
		ᐃ.bezierCurveTo(198 * Ⲇ, Ⲇ * 186.9000015258789, 198 * Ⲇ, 186.9000015258789 * Ⲇ, Ⲇ * 198, Ⲇ * 212.4000015258789);
		ᐃ.bezierCurveTo(Ⲇ * 201, 212.4000015258789 * Ⲇ, 201 * Ⲇ, Ⲇ * 212.4000015258789, 204 * Ⲇ, 212.4000015258789 * Ⲇ);
		ᐃ.bezierCurveTo(204 * Ⲇ, Ⲇ * 186.9000015258789, 204 * Ⲇ, Ⲇ * 186.9000015258789, Ⲇ * 204, 161.4000015258789 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ᐃᐃⲆⵠ], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(161 * Ⲇ, 194 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 188, 169 * Ⲇ, 231 * Ⲇ, Ⲇ * 179, Ⲇ * 241, Ⲇ * 194);
		ᐃ.bezierCurveTo(Ⲇ * 239.5, Ⲇ * 196, Ⲇ * 239.5, Ⲇ * 196, Ⲇ * 238, 198 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 221, 179 * Ⲇ, 182 * Ⲇ, Ⲇ * 182, 165 * Ⲇ, Ⲇ * 198);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ΔᐃΔⵠ], Ⲇ * Δⵠᐃᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 157, 188.80000019073486 * Ⲇ);
		ᐃ.bezierCurveTo(162 * Ⲇ, Ⲇ * 150.80000019073486, Ⲇ * 241, Ⲇ * 150.80000019073486, Ⲇ * 245, Ⲇ * 188.80000019073486);
		ᐃ.bezierCurveTo(242 * Ⲇ, Ⲇ * 224.80000019073486, 162 * Ⲇ, Ⲇ * 228.80000019073486, Ⲇ * 157, Ⲇ * 188.80000019073486);
		ᐃ.bezierCurveTo(Ⲇ * 159, Ⲇ * 188.80000019073486, 159 * Ⲇ, Ⲇ * 188.80000019073486, Ⲇ * 161, Ⲇ * 188.80000019073486);
		ᐃ.bezierCurveTo(Ⲇ * 168, Ⲇ * 216.80000019073486, 231 * Ⲇ, 218.80000019073486 * Ⲇ, 241 * Ⲇ, Ⲇ * 188.80000019073486);
		ᐃ.bezierCurveTo(Ⲇ * 236, 156.80000019073486 * Ⲇ, Ⲇ * 169, 152.80000019073486 * Ⲇ, Ⲇ * 161, 188.80000019073486 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[4], ᐃΔⲆⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(156 * Ⲇ, 188 * Ⲇ);
		ᐃ.bezierCurveTo(160 * Ⲇ, 164 * Ⲇ, Ⲇ * 183, Ⲇ * 159, 201 * Ⲇ, Ⲇ * 158);
		ᐃ.bezierCurveTo(Ⲇ * 232, Ⲇ * 159, Ⲇ * 244, Ⲇ * 174, 246 * Ⲇ, Ⲇ * 188);
		ᐃ.bezierCurveTo(245 * Ⲇ, Ⲇ * 212, 213 * Ⲇ, 219 * Ⲇ, Ⲇ * 201, 218 * Ⲇ);
		ᐃ.bezierCurveTo(181 * Ⲇ, Ⲇ * 221, 158 * Ⲇ, Ⲇ * 207, 156 * Ⲇ, Ⲇ * 190);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠᐃΔᐃⲆ, ᐃⲆ[ΔⵠⲆᐃ], ⵠΔⲆⵠⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(162 * Ⲇ, 189 * Ⲇ);
		ᐃ.bezierCurveTo(166 * Ⲇ, Ⲇ * 170, Ⲇ * 185, 165 * Ⲇ, Ⲇ * 201, Ⲇ * 164);
		ᐃ.bezierCurveTo(227 * Ⲇ, Ⲇ * 165, 240 * Ⲇ, 178 * Ⲇ, 239 * Ⲇ, 188 * Ⲇ);
		ᐃ.bezierCurveTo(239 * Ⲇ, Ⲇ * 204, 210 * Ⲇ, 210 * Ⲇ, 201 * Ⲇ, 210 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 182, 211 * Ⲇ, 166 * Ⲇ, 200 * Ⲇ, Ⲇ * 162, Ⲇ * 190);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, Ⲇᐃⵠⵠⵠ, ᐃⲆ[ⵠⲆⲆΔΔ], Ⲇ * Δᐃᐃⵠᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(131 * Ⲇ, 262 * Ⲇ);
		ᐃ.bezierCurveTo(136 * Ⲇ, Ⲇ * 241, Ⲇ * 144, 236 * Ⲇ, Ⲇ * 158, Ⲇ * 233);
		ᐃ.bezierCurveTo(Ⲇ * 200.5, 233 * Ⲇ, 229 * Ⲇ, Ⲇ * 232, 243 * Ⲇ, 233 * Ⲇ);
		ᐃ.bezierCurveTo(259 * Ⲇ, Ⲇ * 235, Ⲇ * 267, 248 * Ⲇ, 269 * Ⲇ, 260 * Ⲇ);
		ᐃ.bezierCurveTo(269 * Ⲇ, Ⲇ * 266.5, Ⲇ * 269, Ⲇ * 266.5, 269 * Ⲇ, 273 * Ⲇ);
		ᐃ.bezierCurveTo(265 * Ⲇ, Ⲇ * 290, Ⲇ * 251, 297 * Ⲇ, 242 * Ⲇ, 298 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 202, 298 * Ⲇ, 202 * Ⲇ, Ⲇ * 298, 162 * Ⲇ, 298 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 148, Ⲇ * 298, 136 * Ⲇ, 289 * Ⲇ, 132 * Ⲇ, Ⲇ * 273);
		ᐃ.bezierCurveTo(131.5 * Ⲇ, Ⲇ * 268, Ⲇ * 131.5, Ⲇ * 268, 131 * Ⲇ, Ⲇ * 263);
		ᐃ.bezierCurveTo(135 * Ⲇ, Ⲇ * 263, 135 * Ⲇ, 263 * Ⲇ, Ⲇ * 139, 263 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 139, Ⲇ * 281, 151 * Ⲇ, 287 * Ⲇ, 160 * Ⲇ, 290 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 200.5, 290 * Ⲇ, 200.5 * Ⲇ, Ⲇ * 290, 241 * Ⲇ, 290 * Ⲇ);
		ᐃ.bezierCurveTo(252 * Ⲇ, 290 * Ⲇ, Ⲇ * 257, 281 * Ⲇ, 262 * Ⲇ, 271 * Ⲇ);
		ᐃ.bezierCurveTo(261.5 * Ⲇ, 267 * Ⲇ, Ⲇ * 261.5, Ⲇ * 267, 261 * Ⲇ, 263 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 260, Ⲇ * 249, 251 * Ⲇ, Ⲇ * 242, 241 * Ⲇ, 241 * Ⲇ);
		ᐃ.bezierCurveTo(240.5 * Ⲇ, Ⲇ * 240.5, 240.5 * Ⲇ, Ⲇ * 240.5, 240 * Ⲇ, 240 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 200, Ⲇ * 240, 200 * Ⲇ, Ⲇ * 240, 160 * Ⲇ, 240 * Ⲇ);
		ᐃ.bezierCurveTo(145 * Ⲇ, 244 * Ⲇ, Ⲇ * 142, 250 * Ⲇ, 139 * Ⲇ, 264 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆᐃ], ᐃⲆ[4], Ⲇ * ⲆⲆⵠᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(130 * Ⲇ, Ⲇ * 264);
		ᐃ.bezierCurveTo(Ⲇ * 132, 244 * Ⲇ, Ⲇ * 144, 235 * Ⲇ, Ⲇ * 157, Ⲇ * 232);
		ᐃ.bezierCurveTo(Ⲇ * 245, 232 * Ⲇ, 201 * Ⲇ, 232 * Ⲇ, Ⲇ * 245, 232 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 264, Ⲇ * 235, Ⲇ * 269, 251 * Ⲇ, Ⲇ * 270, 264 * Ⲇ);
		ᐃ.bezierCurveTo(272 * Ⲇ, Ⲇ * 291, 248 * Ⲇ, 299 * Ⲇ, 242 * Ⲇ, Ⲇ * 299);
		ᐃ.bezierCurveTo(Ⲇ * 200, Ⲇ * 299, 200 * Ⲇ, 299 * Ⲇ, 158 * Ⲇ, Ⲇ * 299);
		ᐃ.bezierCurveTo(139 * Ⲇ, Ⲇ * 298, 130 * Ⲇ, Ⲇ * 276, Ⲇ * 130, Ⲇ * 265);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃΔⵠᐃⵠ, ᐃⲆ[4], ⵠΔΔⲆΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 140, Ⲇ * 265.33333587646484);
		ᐃ.bezierCurveTo(141 * Ⲇ, Ⲇ * 250.33333587646484, 148 * Ⲇ, Ⲇ * 244.33333587646484, 160 * Ⲇ, 241.33333587646484 * Ⲇ);
		ᐃ.bezierCurveTo(200 * Ⲇ, 241.33333587646484 * Ⲇ, Ⲇ * 200, 241.33333587646484 * Ⲇ, Ⲇ * 240, Ⲇ * 241.33333587646484);
		ᐃ.bezierCurveTo(256 * Ⲇ, Ⲇ * 243.33333587646484, 260 * Ⲇ, Ⲇ * 255.33333587646484, Ⲇ * 260, 265.33333587646484 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 261, Ⲇ * 281.33333587646484, Ⲇ * 247, Ⲇ * 289.33333587646484, 240 * Ⲇ, 289.33333587646484 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 161, Ⲇ * 289.33333587646484, 200.5 * Ⲇ, Ⲇ * 289.33333587646484, 161 * Ⲇ, Ⲇ * 289.33333587646484);
		ᐃ.bezierCurveTo(Ⲇ * 149, 288.33333587646484 * Ⲇ, Ⲇ * 142, 278.33333587646484 * Ⲇ, 140 * Ⲇ, Ⲇ * 266.33333587646484);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠⵠⵠⲆⵠ, ᐃⲆ[4], 6 * Ⲇ);
		ᐃ.globalAlpha = .5;
		ᐃ.scale(ⲆⵠⲆ, 1);
		ᐃ.translate(Ⲇ * 105, Ⲇ * 155);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 59.27557373046875, 20.406280517578125 * Ⲇ);
		ᐃ.bezierCurveTo(74.27557373046875 * Ⲇ, Ⲇ * 5.406280517578125, Ⲇ * 90.27557373046875, 6.406280517578125 * Ⲇ, 99.27557373046875 * Ⲇ, Ⲇ * 5.406280517578125);
		ᐃ.bezierCurveTo(120.27557373046875 * Ⲇ, Ⲇ * 5.406280517578125, Ⲇ * 126.27557373046875, Ⲇ * 10.406280517578125, 136.27557373046875 * Ⲇ, 20.406280517578125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 157.77557373046875, 37.906280517578125 * Ⲇ, 157.77557373046875 * Ⲇ, 37.906280517578125 * Ⲇ, 179.27557373046875 * Ⲇ, Ⲇ * 55.406280517578125);
		ᐃ.bezierCurveTo(Ⲇ * 190.27557373046875, Ⲇ * 63.406280517578125, Ⲇ * 192.27557373046875, Ⲇ * 77.40628051757812, Ⲇ * 189.27557373046875, 91.40628051757812 * Ⲇ);
		ᐃ.bezierCurveTo(183.27557373046875 * Ⲇ, Ⲇ * 108.40628051757812, 176.27557373046875 * Ⲇ, 110.40628051757812 * Ⲇ, 169.27557373046875 * Ⲇ, 118.40628051757812 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 152.27557373046875, Ⲇ * 133.40628051757812, 152.27557373046875 * Ⲇ, 133.40628051757812 * Ⲇ, Ⲇ * 135.27557373046875, 148.40628051757812 * Ⲇ);
		ᐃ.bezierCurveTo(87.27557373046875 * Ⲇ, 143.40628051757812 * Ⲇ, 87.27557373046875 * Ⲇ, Ⲇ * 143.40628051757812, 39.27557373046875 * Ⲇ, 138.40628051757812 * Ⲇ);
		ᐃ.bezierCurveTo(26.77557373046875 * Ⲇ, 123.40628051757812 * Ⲇ, 26.77557373046875 * Ⲇ, 123.40628051757812 * Ⲇ, Ⲇ * 14.27557373046875, Ⲇ * 108.40628051757812);
		ᐃ.bezierCurveTo(Ⲇ * 2.27557373046875, Ⲇ * 95.40628051757812, Ⲇ * 2.27557373046875, Ⲇ * 92.40628051757812, 3.27557373046875 * Ⲇ, Ⲇ * 83.40628051757812);
		ᐃ.bezierCurveTo(Ⲇ * 4.27557373046875, 63.406280517578125 * Ⲇ, 12.27557373046875 * Ⲇ, 60.406280517578125 * Ⲇ, 24.27557373046875 * Ⲇ, 40.406280517578125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[5], ΔⵠⲆⵠⲆ * Ⲇ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(Ⲇ * -110, -155 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(104 * Ⲇ, Ⲇ * 237.8000030517578);
		ᐃ.bezierCurveTo(110 * Ⲇ, Ⲇ * 237.8000030517578, Ⲇ * 110, 237.8000030517578 * Ⲇ, 116 * Ⲇ, Ⲇ * 237.8000030517578);
		ᐃ.bezierCurveTo(116 * Ⲇ, 241.8000030517578 * Ⲇ, 116 * Ⲇ, 241.8000030517578 * Ⲇ, Ⲇ * 116, Ⲇ * 245.8000030517578);
		ᐃ.bezierCurveTo(115 * Ⲇ, Ⲇ * 245.3000030517578, Ⲇ * 115, 245.3000030517578 * Ⲇ, Ⲇ * 114, Ⲇ * 244.8000030517578);
		ᐃ.bezierCurveTo(109.5 * Ⲇ, Ⲇ * 244.8000030517578, Ⲇ * 109.5, Ⲇ * 244.8000030517578, Ⲇ * 105, 244.8000030517578 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⵠ], ᐃⲆ[ⲆⲆⲆᐃ], Ⲇ * ⵠΔᐃⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(115 * Ⲇ, Ⲇ * 211.20000457763672);
		ᐃ.bezierCurveTo(Ⲇ * 106, 216.20000457763672 * Ⲇ, Ⲇ * 101, Ⲇ * 234.20000457763672, Ⲇ * 102, 241.20000457763672 * Ⲇ);
		ᐃ.bezierCurveTo(102 * Ⲇ, Ⲇ * 260.2000045776367, 115 * Ⲇ, Ⲇ * 269.2000045776367, Ⲇ * 115, Ⲇ * 269.2000045776367);
		ᐃ.bezierCurveTo(Ⲇ * 116, Ⲇ * 265.2000045776367, 115.5 * Ⲇ, Ⲇ * 265.2000045776367, Ⲇ * 116, Ⲇ * 261.2000045776367);
		ᐃ.bezierCurveTo(112 * Ⲇ, 264 * Ⲇ, 108 * Ⲇ, 254 * Ⲇ, Ⲇ * 106, 242 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 105, Ⲇ * 232, 110 * Ⲇ, 222 * Ⲇ, Ⲇ * 115, Ⲇ * 218);
		ᐃ.bezierCurveTo(116 * Ⲇ, 216.75 * Ⲇ, Ⲇ * 115.5, Ⲇ * 217.375, Ⲇ * 116, Ⲇ * 216.75);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ], ᐃⲆ[ΔⵠⲆ], ⲆⲆΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 120, 207 * Ⲇ);
		ᐃ.bezierCurveTo(115 * Ⲇ, 206 * Ⲇ, 114 * Ⲇ, Ⲇ * 209, Ⲇ * 114, Ⲇ * 211);
		ᐃ.bezierCurveTo(Ⲇ * 114, 268 * Ⲇ, Ⲇ * 114, 241 * Ⲇ, Ⲇ * 114, Ⲇ * 271);
		ᐃ.bezierCurveTo(115 * Ⲇ, 276 * Ⲇ, Ⲇ * 118, Ⲇ * 276, 120 * Ⲇ, Ⲇ * 276);
		ᐃ.bezierCurveTo(Ⲇ * 122, Ⲇ * 273, Ⲇ * 120.5, Ⲇ * 274.5, 121 * Ⲇ, Ⲇ * 273);
		ᐃ.bezierCurveTo(121 * Ⲇ, 241 * Ⲇ, 121 * Ⲇ, 241 * Ⲇ, Ⲇ * 121, Ⲇ * 209);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], ᐃⲆᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(284 * Ⲇ, Ⲇ * 238);
		ᐃ.bezierCurveTo(289.5 * Ⲇ, 238 * Ⲇ, 289.5 * Ⲇ, Ⲇ * 238, Ⲇ * 295, 238 * Ⲇ);
		ᐃ.bezierCurveTo(295 * Ⲇ, 241.5 * Ⲇ, 295 * Ⲇ, Ⲇ * 241.5, Ⲇ * 295, 245 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 289.5, Ⲇ * 245, 289.5 * Ⲇ, Ⲇ * 245, 284 * Ⲇ, Ⲇ * 245);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 283, Ⲇ * 211);
		ᐃ.bezierCurveTo(Ⲇ * 293, 216 * Ⲇ, Ⲇ * 297, Ⲇ * 231, Ⲇ * 297, 241 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 298, Ⲇ * 254, Ⲇ * 290, 265 * Ⲇ, Ⲇ * 284, Ⲇ * 269);
		ᐃ.bezierCurveTo(283 * Ⲇ, Ⲇ * 266, Ⲇ * 283.5, 266 * Ⲇ, 283 * Ⲇ, Ⲇ * 263);
		ᐃ.bezierCurveTo(Ⲇ * 290, Ⲇ * 260, 292 * Ⲇ, Ⲇ * 251, 293 * Ⲇ, 242 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 292, 223 * Ⲇ, 289 * Ⲇ, 224 * Ⲇ, 284 * Ⲇ, Ⲇ * 218);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(280 * Ⲇ, 206 * Ⲇ);
		ᐃ.bezierCurveTo(284 * Ⲇ, Ⲇ * 206, 285 * Ⲇ, 208 * Ⲇ, Ⲇ * 285, Ⲇ * 211);
		ᐃ.bezierCurveTo(285 * Ⲇ, 241.5 * Ⲇ, 285 * Ⲇ, 241.5 * Ⲇ, 285 * Ⲇ, Ⲇ * 272);
		ᐃ.bezierCurveTo(284 * Ⲇ, Ⲇ * 275, 284 * Ⲇ, 275 * Ⲇ, Ⲇ * 280, Ⲇ * 275);
		ᐃ.bezierCurveTo(279 * Ⲇ, 273.5 * Ⲇ, 279 * Ⲇ, 273.5 * Ⲇ, Ⲇ * 278, Ⲇ * 272);
		ᐃ.bezierCurveTo(Ⲇ * 278, Ⲇ * 240.5, 278 * Ⲇ, 240.5 * Ⲇ, Ⲇ * 278, Ⲇ * 209);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠΔⲆ], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 138, 298.40000915527344 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 141, Ⲇ * 311.40000915527344, 151 * Ⲇ, 314.40000915527344 * Ⲇ, 162 * Ⲇ, 316.40000915527344 * Ⲇ);
		ᐃ.bezierCurveTo(224 * Ⲇ, 316.40000915527344 * Ⲇ, Ⲇ * 200, Ⲇ * 315.90000915527344, 238 * Ⲇ, Ⲇ * 315.40000915527344);
		ᐃ.bezierCurveTo(254 * Ⲇ, Ⲇ * 316.40000915527344, 261 * Ⲇ, Ⲇ * 306.40000915527344, 264 * Ⲇ, 298.40000915527344 * Ⲇ);
		ᐃ.bezierCurveTo(255 * Ⲇ, 304.40000915527344 * Ⲇ, Ⲇ * 250, 306.40000915527344 * Ⲇ, 244 * Ⲇ, Ⲇ * 306.40000915527344);
		ᐃ.bezierCurveTo(Ⲇ * 201, 306.90000915527344 * Ⲇ, Ⲇ * 201, 306.90000915527344 * Ⲇ, Ⲇ * 158, Ⲇ * 307.40000915527344);
		ᐃ.bezierCurveTo(150 * Ⲇ, Ⲇ * 306.40000915527344, Ⲇ * 148, 306.40000915527344 * Ⲇ, 139 * Ⲇ, Ⲇ * 300.40000915527344);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ], ᐃⲆ[ΔΔⲆΔ], Ⲇ * ᐃⲆᐃⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(161 * Ⲇ, Ⲇ * 177.5999984741211);
		ᐃ.bezierCurveTo(Ⲇ * 130, Ⲇ * 175.5999984741211, Ⲇ * 123, Ⲇ * 190.5999984741211, Ⲇ * 122, Ⲇ * 205.5999984741211);
		ᐃ.bezierCurveTo(Ⲇ * 121, Ⲇ * 277.5999984741211, Ⲇ * 122, 242.5999984741211 * Ⲇ, Ⲇ * 122, 279.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 128, 297.5999984741211 * Ⲇ, Ⲇ * 137, Ⲇ * 299.5999984741211, 143 * Ⲇ, 300.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 163, Ⲇ * 301.0999984741211, Ⲇ * 163, Ⲇ * 301.0999984741211, Ⲇ * 183, Ⲇ * 301.5999984741211);
		ᐃ.bezierCurveTo(Ⲇ * 150, 300.5999984741211 * Ⲇ, 135 * Ⲇ, Ⲇ * 290.5999984741211, Ⲇ * 134, 267.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 133, 245.5999984741211 * Ⲇ, 146 * Ⲇ, Ⲇ * 235.5999984741211, 164 * Ⲇ, Ⲇ * 235.5999984741211);
		ᐃ.bezierCurveTo(206 * Ⲇ, Ⲇ * 236.0999984741211, 206 * Ⲇ, 236.0999984741211 * Ⲇ, 248 * Ⲇ, 236.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(266 * Ⲇ, 243.5999984741211 * Ⲇ, 268 * Ⲇ, Ⲇ * 259.5999984741211, 267 * Ⲇ, Ⲇ * 266.5999984741211);
		ᐃ.bezierCurveTo(266 * Ⲇ, Ⲇ * 288.5999984741211, Ⲇ * 251, Ⲇ * 294.5999984741211, Ⲇ * 244, Ⲇ * 297.5999984741211);
		ᐃ.bezierCurveTo(Ⲇ * 228.5, 299.5999984741211 * Ⲇ, 228.5 * Ⲇ, 299.5999984741211 * Ⲇ, Ⲇ * 213, Ⲇ * 301.5999984741211);
		ᐃ.bezierCurveTo(Ⲇ * 236, Ⲇ * 301.0999984741211, Ⲇ * 236, Ⲇ * 301.0999984741211, Ⲇ * 259, 300.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 272, Ⲇ * 295.5999984741211, Ⲇ * 277, Ⲇ * 288.5999984741211, Ⲇ * 278, 271.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 277.5, Ⲇ * 236.5999984741211, 277.5 * Ⲇ, Ⲇ * 236.5999984741211, 277 * Ⲇ, 201.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 276, Ⲇ * 186.5999984741211, Ⲇ * 265, Ⲇ * 178.5999984741211, 254 * Ⲇ, Ⲇ * 177.5999984741211);
		ᐃ.bezierCurveTo(247.5 * Ⲇ, Ⲇ * 177.5999984741211, Ⲇ * 247.5, 177.5999984741211 * Ⲇ, 241 * Ⲇ, Ⲇ * 177.5999984741211);
		ᐃ.bezierCurveTo(ᐃⵠⲆᐃⲆ * Ⲇ, 202.5999984741211 * Ⲇ, 214 * Ⲇ, Ⲇ * 217.5999984741211, Ⲇ * 201, Ⲇ * 215.5999984741211);
		ᐃ.bezierCurveTo(Ⲇ * 170, 215.5999984741211 * Ⲇ, 152 * Ⲇ, Ⲇ * 197.5999984741211, 161 * Ⲇ, Ⲇ * 178.5999984741211);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ⲆⲆΔΔ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 162, 175.5999984741211 * Ⲇ);
		ᐃ.bezierCurveTo(153 * Ⲇ, Ⲇ * 176.0999984741211, 153 * Ⲇ, Ⲇ * 176.0999984741211, Ⲇ * 144, Ⲇ * 176.5999984741211);
		ᐃ.bezierCurveTo(125 * Ⲇ, Ⲇ * 178.5999984741211, 121 * Ⲇ, 196.5999984741211 * Ⲇ, Ⲇ * 121, Ⲇ * 207.5999984741211);
		ᐃ.bezierCurveTo(121 * Ⲇ, 243.20000076293945 * Ⲇ, 121 * Ⲇ, Ⲇ * 243.20000076293945, Ⲇ * 121, Ⲇ * 278.8000030517578);
		ᐃ.bezierCurveTo(Ⲇ * 126, 298.8000030517578 * Ⲇ, Ⲇ * 137, Ⲇ * 300.8000030517578, Ⲇ * 146, Ⲇ * 302.8000030517578);
		ᐃ.bezierCurveTo(Ⲇ * 200.5, 302.8000030517578 * Ⲇ, 200.5 * Ⲇ, 302.8000030517578 * Ⲇ, Ⲇ * 255, Ⲇ * 302.8000030517578);
		ᐃ.bezierCurveTo(271 * Ⲇ, Ⲇ * 301.8000030517578, Ⲇ * 279, 288.8000030517578 * Ⲇ, Ⲇ * 279, Ⲇ * 273.8000030517578);
		ᐃ.bezierCurveTo(Ⲇ * 279, 236.8000030517578 * Ⲇ, 279 * Ⲇ, Ⲇ * 236.8000030517578, 279 * Ⲇ, Ⲇ * 199.8000030517578);
		ᐃ.bezierCurveTo(Ⲇ * 274, 178.8000030517578 * Ⲇ, 263 * Ⲇ, Ⲇ * 177.8000030517578, 255 * Ⲇ, 175.8000030517578 * Ⲇ);
		ᐃ.bezierCurveTo(248 * Ⲇ, 175.8000030517578 * Ⲇ, Ⲇ * 248, Ⲇ * 175.8000030517578, 241 * Ⲇ, 175.8000030517578 * Ⲇ);
		ᐃ.bezierCurveTo(240 * Ⲇ, Ⲇ * 175.8000030517578, 240 * Ⲇ, Ⲇ * 175.8000030517578, 239 * Ⲇ, 175.8000030517578 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 254, Ⲇ * 200.8000030517578, 222 * Ⲇ, 211.8000030517578 * Ⲇ, 202 * Ⲇ, Ⲇ * 212.8000030517578);
		ᐃ.bezierCurveTo(168 * Ⲇ, 213.8000030517578 * Ⲇ, Ⲇ * 151, 190.8000030517578 * Ⲇ, Ⲇ * 163, 176.8000030517578 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[3], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(198 * Ⲇ, Ⲇ * 161.4000015258789);
		ᐃ.bezierCurveTo(198 * Ⲇ, Ⲇ * 186.9000015258789, Ⲇ * 198, Ⲇ * 186.9000015258789, 198 * Ⲇ, 212.4000015258789 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 201, Ⲇ * 212.4000015258789, Ⲇ * 201, 212.4000015258789 * Ⲇ, Ⲇ * 204, Ⲇ * 212.4000015258789);
		ᐃ.bezierCurveTo(204 * Ⲇ, Ⲇ * 186.9000015258789, 204 * Ⲇ, Ⲇ * 186.9000015258789, Ⲇ * 204, Ⲇ * 161.4000015258789);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], ᐃΔⲆⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(161 * Ⲇ, 194 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 188, 169 * Ⲇ, Ⲇ * 231, 179 * Ⲇ, 241 * Ⲇ, Ⲇ * 194);
		ᐃ.bezierCurveTo(239.5 * Ⲇ, Ⲇ * 196, Ⲇ * 239.5, Ⲇ * 196, Ⲇ * 238, 198 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 221, 179 * Ⲇ, 182 * Ⲇ, 182 * Ⲇ, Ⲇ * 165, Ⲇ * 198);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ], ᐃⲆ[ᐃⲆΔ], Ⲇ * ⵠᐃⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(157 * Ⲇ, 188.80000019073486 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 162, 150.80000019073486 * Ⲇ, Ⲇ * 241, 150.80000019073486 * Ⲇ, 245 * Ⲇ, Ⲇ * 188.80000019073486);
		ᐃ.bezierCurveTo(242 * Ⲇ, Ⲇ * 224.80000019073486, 162 * Ⲇ, 228.80000019073486 * Ⲇ, Ⲇ * 157, 188.80000019073486 * Ⲇ);
		ᐃ.bezierCurveTo(159 * Ⲇ, 188.80000019073486 * Ⲇ, Ⲇ * 159, Ⲇ * 188.80000019073486, Ⲇ * 161, Ⲇ * 188.80000019073486);
		ᐃ.bezierCurveTo(168 * Ⲇ, Ⲇ * 216.80000019073486, Ⲇ * 231, 218.80000019073486 * Ⲇ, Ⲇ * 241, 188.80000019073486 * Ⲇ);
		ᐃ.bezierCurveTo(236 * Ⲇ, Ⲇ * 156.80000019073486, Ⲇ * 169, Ⲇ * 152.80000019073486, Ⲇ * 161, 188.80000019073486 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ], ᐃⲆ[ΔⵠⲆ], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(156 * Ⲇ, 188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 160, Ⲇ * 164, Ⲇ * 183, 159 * Ⲇ, 201 * Ⲇ, 158 * Ⲇ);
		ᐃ.bezierCurveTo(232 * Ⲇ, Ⲇ * 159, 244 * Ⲇ, 174 * Ⲇ, 246 * Ⲇ, 188 * Ⲇ);
		ᐃ.bezierCurveTo(245 * Ⲇ, 212 * Ⲇ, Ⲇ * 213, Ⲇ * 219, 201 * Ⲇ, Ⲇ * 218);
		ᐃ.bezierCurveTo(181 * Ⲇ, 221 * Ⲇ, Ⲇ * 158, 207 * Ⲇ, 156 * Ⲇ, 190 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[1], Ⲇ * Δⵠᐃᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 162, 189 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 166, Ⲇ * 170, 185 * Ⲇ, 165 * Ⲇ, Ⲇ * 201, 164 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 227, 165 * Ⲇ, 240 * Ⲇ, 178 * Ⲇ, 239 * Ⲇ, 188 * Ⲇ);
		ᐃ.bezierCurveTo(239 * Ⲇ, Ⲇ * 204, 210 * Ⲇ, Ⲇ * 210, 201 * Ⲇ, 210 * Ⲇ);
		ᐃ.bezierCurveTo(182 * Ⲇ, Ⲇ * 211, Ⲇ * 166, 200 * Ⲇ, 162 * Ⲇ, Ⲇ * 190);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔⵠⲆᐃᐃ, ᐃⲆ[1], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 131, Ⲇ * 262);
		ᐃ.bezierCurveTo(136 * Ⲇ, Ⲇ * 241, Ⲇ * 144, Ⲇ * 236, Ⲇ * 158, Ⲇ * 233);
		ᐃ.bezierCurveTo(Ⲇ * 200.5, Ⲇ * 233, 229 * Ⲇ, 232 * Ⲇ, Ⲇ * 243, 233 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 259, 235 * Ⲇ, Ⲇ * 267, 248 * Ⲇ, 269 * Ⲇ, Ⲇ * 260);
		ᐃ.bezierCurveTo(Ⲇ * 269, Ⲇ * 266.5, 269 * Ⲇ, Ⲇ * 266.5, Ⲇ * 269, Ⲇ * 273);
		ᐃ.bezierCurveTo(Ⲇ * 265, Ⲇ * 290, 251 * Ⲇ, 297 * Ⲇ, Ⲇ * 242, Ⲇ * 298);
		ᐃ.bezierCurveTo(202 * Ⲇ, 298 * Ⲇ, 202 * Ⲇ, 298 * Ⲇ, 162 * Ⲇ, Ⲇ * 298);
		ᐃ.bezierCurveTo(Ⲇ * 148, Ⲇ * 298, 136 * Ⲇ, 289 * Ⲇ, 132 * Ⲇ, 273 * Ⲇ);
		ᐃ.bezierCurveTo(131.5 * Ⲇ, Ⲇ * 268, 131.5 * Ⲇ, 268 * Ⲇ, Ⲇ * 131, 263 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 135, 263 * Ⲇ, 135 * Ⲇ, 263 * Ⲇ, 139 * Ⲇ, Ⲇ * 263);
		ᐃ.bezierCurveTo(Ⲇ * 139, Ⲇ * 281, 151 * Ⲇ, Ⲇ * 287, 160 * Ⲇ, 290 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 200.5, 290 * Ⲇ, 200.5 * Ⲇ, 290 * Ⲇ, Ⲇ * 241, 290 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 252, 290 * Ⲇ, Ⲇ * 257, Ⲇ * 281, 262 * Ⲇ, Ⲇ * 271);
		ᐃ.bezierCurveTo(Ⲇ * 261.5, Ⲇ * 267, Ⲇ * 261.5, 267 * Ⲇ, Ⲇ * 261, 263 * Ⲇ);
		ᐃ.bezierCurveTo(260 * Ⲇ, Ⲇ * 249, 251 * Ⲇ, 242 * Ⲇ, Ⲇ * 241, 241 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 240.5, 240.5 * Ⲇ, Ⲇ * 240.5, 240.5 * Ⲇ, 240 * Ⲇ, Ⲇ * 240);
		ᐃ.bezierCurveTo(Ⲇ * 200, 240 * Ⲇ, Ⲇ * 200, 240 * Ⲇ, Ⲇ * 160, 240 * Ⲇ);
		ᐃ.bezierCurveTo(145 * Ⲇ, 244 * Ⲇ, Ⲇ * 142, 250 * Ⲇ, 139 * Ⲇ, 264 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ], ᐃⲆ[0], ΔᐃΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 130, 264 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 132, 244 * Ⲇ, 144 * Ⲇ, Ⲇ * 235, 157 * Ⲇ, 232 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 245, 232 * Ⲇ, Ⲇ * 201, Ⲇ * 232, 245 * Ⲇ, 232 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 264, 235 * Ⲇ, Ⲇ * 269, Ⲇ * 251, Ⲇ * 270, 264 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 272, Ⲇ * 291, Ⲇ * 248, Ⲇ * 299, Ⲇ * 242, 299 * Ⲇ);
		ᐃ.bezierCurveTo(200 * Ⲇ, 299 * Ⲇ, 200 * Ⲇ, 299 * Ⲇ, 158 * Ⲇ, Ⲇ * 299);
		ᐃ.bezierCurveTo(139 * Ⲇ, 298 * Ⲇ, 130 * Ⲇ, Ⲇ * 276, 130 * Ⲇ, Ⲇ * 265);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃⲆΔ], Δⵠᐃᐃ * Ⲇ);
		return ⲆⲆ
	}

	function ΔⲆⵠᐃⵠ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 120;
		var ⲆΔΔ = Ⲇ * 150;
		var ⵠᐃⵠ = 60 * Ⲇ;
		var ΔⲆⵠⵠ = ⵠᐃⵠ / ᐃᐃΔΔ;
		var ⵠⲆⲆΔ = Ⲇ * ⲆⵠⲆΔⵠ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / ᐃΔⲆⵠ + ⲆΔⵠΔ * Ⲇ, ⲆΔΔ / 2 + Ⲇ * 0 + ⵠⲆⲆΔ);
		ᐃ.rotate(Math.PI / ᐃⲆᐃⲆ);
		ᐃ.globalAlpha = .5;
		ᐃⵠΔⵠ(ᐃ, ᐃΔⲆΔⲆᐃⵠ, ⵠᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / 2 - Ⲇ * 11, ⲆΔΔ / 2 + Ⲇ * 12);
		ᐃ.globalAlpha = ΔⲆΔᐃ;
		ᐃ.rotate(Math.PI / 3);
		ᐃ.translate(ⵠⵠΔᐃ, -ⵠⲆⲆΔ);
		ᐃⵠΔⵠ(ᐃ, ⲆΔΔⲆⵠ, ⵠᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔ]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / ⵠΔᐃΔᐃ - ᐃⵠⲆⲆᐃ * Ⲇ, ⲆΔΔ / ᐃⲆᐃⵠ - Ⲇ * ᐃⵠⵠᐃⲆᐃⲆ);
		ᐃ.rotate(Math.PI / 2.8);
		ᐃⵠΔⵠ(ᐃ, ΔⵠⲆᐃⵠ, ⵠᐃⵠ * .5, .4 * ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃᐃ]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / 2 + Ⲇ * ΔⵠΔⵠⵠ, ⲆΔΔ / 2 + Ⲇ * ᐃΔⵠΔᐃ);
		ᐃ.rotate(Math.PI / 1);
		ᐃⵠΔⵠ(ᐃ, ⲆⲆⵠᐃⲆ, .5 * ⵠᐃⵠ, ΔⲆⵠⵠ * .4);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / 2 - 8 * Ⲇ, ⲆΔΔ / ⲆⲆᐃⲆ + 20 * Ⲇ);
		ᐃ.rotate(Math.PI / 2.25);
		ᐃⵠΔⵠ(ᐃ, 5, .5 * ⵠᐃⵠ, ΔⲆⵠⵠ * .4);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.restore();
		return ⲆⲆ
	}

	function ⵠⲆⵠᐃⲆᐃᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 115;
		ⲆⲆ.height = 585 * Ⲇ;
		ᐃ.scale(-1, 1);
		ᐃ.translate(-110 * Ⲇ, 0);
		ᐃ.translate(ᐃᐃΔⵠⵠ * Ⲇ, Ⲇ * 10);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ᐃⲆΔ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 51.5, Ⲇ * 342);
		ᐃᐃᐃ(ᐃ, Ⲇ * -14.5, -225 * Ⲇ, Ⲇ * 29, 450 * Ⲇ, Ⲇ * 20);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(54 * Ⲇ, 83 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 70, 69 * Ⲇ, 78 * Ⲇ, 62 * Ⲇ, 82 * Ⲇ, Ⲇ * 40);
		ᐃ.bezierCurveTo(Ⲇ * 93, Ⲇ * 48, Ⲇ * 103, 64 * Ⲇ, Ⲇ * 95, Ⲇ * 102);
		ᐃ.bezierCurveTo(Ⲇ * 60, Ⲇ * 114, 53 * Ⲇ, Ⲇ * 103, 54 * Ⲇ, Ⲇ * 85);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 95, 97 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 56, 102 * Ⲇ, Ⲇ * 43, Ⲇ * 77, 71 * Ⲇ, Ⲇ * ΔΔⲆⵠΔ);
		ᐃ.bezierCurveTo(Ⲇ * 34, Ⲇ * ᐃⲆⵠΔΔ, Δⵠᐃⵠⵠ * Ⲇ, Ⲇ * 43, Ⲇ * 5, Ⲇ * 76);
		ᐃ.bezierCurveTo(Ⲇ * 4, 98 * Ⲇ, Ⲇ * ΔⲆΔⵠⲆ, 130 * Ⲇ, Ⲇ * 64, Ⲇ * 130);
		ᐃ.bezierCurveTo(76 * Ⲇ, Ⲇ * 129, 95 * Ⲇ, Ⲇ * 113, Ⲇ * 97, 97 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(55 * Ⲇ, Ⲇ * 176);
		ᐃ.bezierCurveTo(74 * Ⲇ, Ⲇ * 175, 82 * Ⲇ, Ⲇ * 169, 96 * Ⲇ, 155 * Ⲇ);
		ᐃ.bezierCurveTo(103 * Ⲇ, Ⲇ * 183, 95 * Ⲇ, 214 * Ⲇ, Ⲇ * 54, 219 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 50, Ⲇ * 176);
		ᐃ.bezierCurveTo(25 * Ⲇ, 177 * Ⲇ, Ⲇ * ΔⲆⲆⵠΔ, Ⲇ * 164, ᐃΔᐃⲆᐃ * Ⲇ, Ⲇ * 156);
		ᐃ.bezierCurveTo(Ⲇ * ᐃⲆⵠΔ, Ⲇ * 186, 10 * Ⲇ, 201 * Ⲇ, 43 * Ⲇ, Ⲇ * 220);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 35, 403 * Ⲇ);
		ᐃ.bezierCurveTo(47 * Ⲇ, 412 * Ⲇ, 58 * Ⲇ, 412 * Ⲇ, Ⲇ * 67, 403 * Ⲇ);
		ᐃ.bezierCurveTo(66.5 * Ⲇ, 434 * Ⲇ, Ⲇ * 66.5, 434 * Ⲇ, Ⲇ * 66, 465 * Ⲇ);
		ᐃ.bezierCurveTo(56 * Ⲇ, 480 * Ⲇ, Ⲇ * 40, 472 * Ⲇ, 36 * Ⲇ, Ⲇ * 465);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 59, 67 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 47, Ⲇ * 97, ΔᐃΔⵠᐃ * Ⲇ, Ⲇ * 117, Ⲇ * ⲆΔΔᐃⵠⵠⵠ, Ⲇ * 110);
		ᐃ.bezierCurveTo(Ⲇ * 11, Ⲇ * 115, ᐃᐃⵠΔⵠ * Ⲇ, Ⲇ * 122, 23 * Ⲇ, Ⲇ * 124);
		ᐃ.bezierCurveTo(46 * Ⲇ, 118 * Ⲇ, Ⲇ * 52, 113 * Ⲇ, 62 * Ⲇ, Ⲇ * 86);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(30 * Ⲇ, Ⲇ * 125);
		ᐃ.bezierCurveTo(Ⲇ * 47, Ⲇ * 136, Ⲇ * 57, 134 * Ⲇ, Ⲇ * 77, 127 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 71, 158 * Ⲇ, 71 * Ⲇ, 159 * Ⲇ, Ⲇ * 66, Ⲇ * 159);
		ᐃ.bezierCurveTo(50.5 * Ⲇ, 156.5 * Ⲇ, Ⲇ * 50.5, 156.5 * Ⲇ, Ⲇ * 35, 154 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 31, 145 * Ⲇ, 31 * Ⲇ, 136 * Ⲇ, 31 * Ⲇ, Ⲇ * 125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(35 * Ⲇ, Ⲇ * 171);
		ᐃ.bezierCurveTo(Ⲇ * 32, 221 * Ⲇ, Ⲇ * 43, 233 * Ⲇ, Ⲇ * 70, 247 * Ⲇ);
		ᐃ.bezierCurveTo(75 * Ⲇ, 234 * Ⲇ, Ⲇ * 75, Ⲇ * 230, Ⲇ * 72, Ⲇ * 221);
		ᐃ.bezierCurveTo(48 * Ⲇ, 206 * Ⲇ, Ⲇ * 54, Ⲇ * 188, Ⲇ * 50, Ⲇ * 176);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 60, Ⲇ * 68);
		ᐃ.bezierCurveTo(Ⲇ * 63, 69 * Ⲇ, 65 * Ⲇ, Ⲇ * 71, Ⲇ * 67, 77 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 61, Ⲇ * 123, 52 * Ⲇ, Ⲇ * 137, Ⲇ * 42, Ⲇ * 150);
		ᐃ.bezierCurveTo(Ⲇ * 38, 151 * Ⲇ, 38 * Ⲇ, Ⲇ * 151, 34 * Ⲇ, 152 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 33, Ⲇ * 146.5, 33 * Ⲇ, 146.5 * Ⲇ, 32 * Ⲇ, 141 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 49, 118 * Ⲇ, 63 * Ⲇ, Ⲇ * 87, 59 * Ⲇ, 68 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 71, 172 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 56, Ⲇ * 222, Ⲇ * 49, 234 * Ⲇ, Ⲇ * 35, Ⲇ * 248);
		ᐃ.bezierCurveTo(Ⲇ * 30, Ⲇ * 236, Ⲇ * 30, Ⲇ * 230, 31 * Ⲇ, 217 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 44, 202 * Ⲇ, 49 * Ⲇ, 191 * Ⲇ, Ⲇ * 52, 172 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 35, 151 * Ⲇ);
		ᐃ.bezierCurveTo(27 * Ⲇ, Ⲇ * 165, 31 * Ⲇ, 173 * Ⲇ, Ⲇ * 36, Ⲇ * 178);
		ᐃ.bezierCurveTo(Ⲇ * 56, Ⲇ * 185, Ⲇ * 73, 184 * Ⲇ, 71 * Ⲇ, Ⲇ * 170);
		ᐃ.bezierCurveTo(Ⲇ * 72, 154 * Ⲇ, 71 * Ⲇ, Ⲇ * 154, Ⲇ * 63, Ⲇ * 155);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(-ⲆⵠΔΔⵠ * Ⲇ, -ᐃⲆⵠΔΔ * Ⲇ);
		ᐃ.globalAlpha = ⲆΔⲆⵠ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 51.5, 342 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -14.5 * Ⲇ, Ⲇ * -225, 29 * Ⲇ, Ⲇ * 450, 20 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ᐃⵠΔⲆ], ΔⵠⲆᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 54, 83 * Ⲇ);
		ᐃ.bezierCurveTo(70 * Ⲇ, Ⲇ * 69, Ⲇ * 78, 62 * Ⲇ, 82 * Ⲇ, 40 * Ⲇ);
		ᐃ.bezierCurveTo(93 * Ⲇ, 48 * Ⲇ, 103 * Ⲇ, Ⲇ * 64, Ⲇ * 95, Ⲇ * 102);
		ᐃ.bezierCurveTo(Ⲇ * 60, 114 * Ⲇ, Ⲇ * 53, Ⲇ * 103, 54 * Ⲇ, Ⲇ * 85);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆΔ], ᐃⲆ[ᐃᐃᐃΔⵠ], Ⲇ * 6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(95 * Ⲇ, Ⲇ * 97);
		ᐃ.bezierCurveTo(56 * Ⲇ, 102 * Ⲇ, Ⲇ * 43, Ⲇ * 77, 71 * Ⲇ, Ⲇ * 6);
		ᐃ.bezierCurveTo(34 * Ⲇ, Ⲇ * ⲆⵠΔΔⵠ, Ⲇ * ⵠⲆⲆΔᐃⲆⵠ, 43 * Ⲇ, Δᐃⵠᐃ * Ⲇ, Ⲇ * 76);
		ᐃ.bezierCurveTo(4 * Ⲇ, 98 * Ⲇ, 15 * Ⲇ, Ⲇ * 130, 64 * Ⲇ, 130 * Ⲇ);
		ᐃ.bezierCurveTo(76 * Ⲇ, 129 * Ⲇ, Ⲇ * 95, 113 * Ⲇ, Ⲇ * 97, Ⲇ * 97);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[ΔΔⲆⵠΔ], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(35 * Ⲇ, Ⲇ * 403);
		ᐃ.bezierCurveTo(47 * Ⲇ, 412 * Ⲇ, 58 * Ⲇ, Ⲇ * 412, Ⲇ * 67, 403 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 66.5, 434 * Ⲇ, 66.5 * Ⲇ, Ⲇ * 434, 66 * Ⲇ, Ⲇ * 465);
		ᐃ.bezierCurveTo(Ⲇ * 56, Ⲇ * 480, Ⲇ * 40, 472 * Ⲇ, Ⲇ * 36, Ⲇ * 465);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃᐃⲆⵠ], ᐃⲆ[ⲆᐃⵠᐃⲆ], ΔᐃⵠΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(37 * Ⲇ, Ⲇ * 427);
		ᐃ.bezierCurveTo(47 * Ⲇ, 435 * Ⲇ, Ⲇ * 55, 435 * Ⲇ, 67 * Ⲇ, 427 * Ⲇ);
		ᐃⵠ(ᐃ, ⵠⵠⵠⲆⵠ, ᐃⲆ[8], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 36, 448 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 46, Ⲇ * 454, Ⲇ * 54, 457 * Ⲇ, Ⲇ * 65, 449 * Ⲇ);
		ᐃⵠ(ᐃ, Ⲇᐃⵠⵠⵠ, ᐃⲆ[8], ⵠΔⲆⵠⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(55 * Ⲇ, Ⲇ * 176);
		ᐃ.bezierCurveTo(Ⲇ * 74, Ⲇ * 175, 82 * Ⲇ, 169 * Ⲇ, Ⲇ * 96, 155 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 103, 183 * Ⲇ, 95 * Ⲇ, 214 * Ⲇ, Ⲇ * 54, 219 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃΔⲆΔⲆ], Ⲇⵠᐃᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 50, 176 * Ⲇ);
		ᐃ.bezierCurveTo(25 * Ⲇ, 177 * Ⲇ, Ⲇ * 16, 164 * Ⲇ, Ⲇ * ΔΔⲆⲆⲆ, 156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⵠᐃΔ, 186 * Ⲇ, Ⲇ * ⵠᐃᐃⵠⵠ, Ⲇ * 201, 43 * Ⲇ, 220 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆ], ᐃⲆ[ⵠⲆⲆΔΔ], Ⲇ * 6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(59 * Ⲇ, 67 * Ⲇ);
		ᐃ.bezierCurveTo(47 * Ⲇ, Ⲇ * 97, 18 * Ⲇ, Ⲇ * 117, Ⲇ * ⵠⵠⵠⵠⵠ, Ⲇ * 110);
		ᐃ.bezierCurveTo(11 * Ⲇ, Ⲇ * 115, ⵠⵠΔⲆⵠ * Ⲇ, Ⲇ * 122, Ⲇ * 23, 124 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 46, Ⲇ * 118, 52 * Ⲇ, Ⲇ * 113, 62 * Ⲇ, Ⲇ * 86);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠⲆΔ], ᐃⲆ[ᐃᐃΔⵠΔᐃΔ], Ⲇ * ⲆⵠᐃΔᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 30, 125 * Ⲇ);
		ᐃ.bezierCurveTo(47 * Ⲇ, 136 * Ⲇ, 57 * Ⲇ, 134 * Ⲇ, Ⲇ * 77, 127 * Ⲇ);
		ᐃ.bezierCurveTo(71 * Ⲇ, 158 * Ⲇ, Ⲇ * 71, 159 * Ⲇ, 66 * Ⲇ, Ⲇ * 159);
		ᐃ.bezierCurveTo(50.5 * Ⲇ, 156.5 * Ⲇ, 50.5 * Ⲇ, 156.5 * Ⲇ, 35 * Ⲇ, 154 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 31, Ⲇ * 145, 31 * Ⲇ, Ⲇ * 136, Ⲇ * 31, Ⲇ * 125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔⲆⲆ], ᐃⲆ[ⵠΔᐃᐃΔ], ᐃⲆⵠⲆⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 35, 171 * Ⲇ);
		ᐃ.bezierCurveTo(32 * Ⲇ, 221 * Ⲇ, 43 * Ⲇ, 233 * Ⲇ, Ⲇ * 70, 247 * Ⲇ);
		ᐃ.bezierCurveTo(75 * Ⲇ, 234 * Ⲇ, 75 * Ⲇ, Ⲇ * 230, 72 * Ⲇ, Ⲇ * 221);
		ᐃ.bezierCurveTo(Ⲇ * 48, Ⲇ * 206, 54 * Ⲇ, 188 * Ⲇ, Ⲇ * 50, 176 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆⲆ], ᐃⲆ[8], ᐃⲆⵠⲆⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(60 * Ⲇ, 68 * Ⲇ);
		ᐃ.bezierCurveTo(63 * Ⲇ, Ⲇ * 69, Ⲇ * 65, 71 * Ⲇ, Ⲇ * 67, Ⲇ * 77);
		ᐃ.bezierCurveTo(Ⲇ * 61, Ⲇ * 123, 52 * Ⲇ, 137 * Ⲇ, 42 * Ⲇ, 150 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 38, 151 * Ⲇ, Ⲇ * 38, Ⲇ * 151, 34 * Ⲇ, 152 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 33, 146.5 * Ⲇ, Ⲇ * 33, Ⲇ * 146.5, 32 * Ⲇ, Ⲇ * 141);
		ᐃ.bezierCurveTo(49 * Ⲇ, 118 * Ⲇ, Ⲇ * 63, 87 * Ⲇ, Ⲇ * 59, 68 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆⵠ], ᐃⲆ[8], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 71, Ⲇ * 172);
		ᐃ.bezierCurveTo(56 * Ⲇ, 222 * Ⲇ, Ⲇ * 49, 234 * Ⲇ, 35 * Ⲇ, Ⲇ * 248);
		ᐃ.bezierCurveTo(30 * Ⲇ, 236 * Ⲇ, Ⲇ * 30, Ⲇ * 230, 31 * Ⲇ, 217 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 44, 202 * Ⲇ, 49 * Ⲇ, Ⲇ * 191, Ⲇ * 52, Ⲇ * 172);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[7], ᐃⲆ[8], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(35 * Ⲇ, 151 * Ⲇ);
		ᐃ.bezierCurveTo(27 * Ⲇ, 165 * Ⲇ, Ⲇ * 31, Ⲇ * 173, Ⲇ * 36, Ⲇ * 178);
		ᐃ.bezierCurveTo(Ⲇ * 56, Ⲇ * 185, Ⲇ * 73, Ⲇ * 184, 71 * Ⲇ, 170 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 72, Ⲇ * 154, Ⲇ * 71, 154 * Ⲇ, 63 * Ⲇ, 155 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[7], ᐃⲆ[8], Ⲇ * ᐃΔⲆⵠⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(53 * Ⲇ, Ⲇ * 113);
		ᐃ.bezierCurveTo(Ⲇ * 65, Ⲇ * 140, 75 * Ⲇ, 166 * Ⲇ, 52 * Ⲇ, Ⲇ * 169);
		ᐃ.bezierCurveTo(29 * Ⲇ, Ⲇ * 168, Ⲇ * 41, Ⲇ * 143, 53 * Ⲇ, Ⲇ * 112);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], 6 * Ⲇ);
		return ⲆⲆ
	}

	function ⲆΔⵠⵠⵠ(Ⲇ, text, ⲆΔΔ, ᐃⲆ, ⵠⲆⲆΔ, ᐃⲆΔⵠ, ⲆᐃⵠᐃⵠⲆⵠ, ΔⲆᐃⲆΔ, ΔΔΔⲆ, ⲆⵠΔⵠ, ᐃⲆⵠᐃⵠ) {
		ⵠⵠⵠⲆⵠ === ᐃⲆⵠᐃⵠ && (ᐃⲆⵠᐃⵠ = 0);
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ᐃⲆΔⵠ = !ᐃⲆΔⵠ ? 0 : Ⲇ * ᐃⲆΔⵠ;
		var ΔⲆⵠ = Math.floor(Ⲇ * ⲆΔΔ);
		ᐃ.font = ΔⲆⵠ + Δ[139];
		ᐃ.lineJoin = Δ[237];
		ΔⲆᐃⲆΔ = Ⲇ * ΔⲆᐃⲆΔ;
		var ⲆⵠⲆᐃᐃ = ⲆᐃⵠᐃⵠⲆⵠ ? ΔⲆᐃⲆΔ * 2 : 0;
		if (ΔΔΔⲆ) var ⲆⲆⵠ = Math.min(ᐃ.measureText(text).width + ⵠΔᐃⵠ * Ⲇ + ⲆⵠⲆᐃᐃ, ΔΔΔⲆ);
		else var ⲆⲆⵠ = ᐃ.measureText(text).width + ᐃⵠΔⲆ * Ⲇ + ⲆⵠⲆᐃᐃ + Ⲇ * ᐃⲆⵠᐃⵠ * ⲆⲆΔΔ;
		var ΔⲆⵠ = (ΔⲆⵠ + ᐃⲆΔⵠ + ᐃⲆⵠᐃⵠ) * Ⲇ + ⲆⵠⲆᐃᐃ;
		ⲆⲆ.width = ⲆⲆⵠ;
		ⲆⲆ.height = ΔⲆⵠ;
		if (ⲆᐃⵠᐃⵠⲆⵠ) {
			ᐃ.fillStyle = ⲆᐃⵠᐃⵠⲆⵠ;
			ᐃᐃᐃ(ᐃ, ⵠⲆⵠ, ⲆⲆⵠⲆ, ⲆⲆⵠ, ΔⲆⵠ, Ⲇⵠᐃⵠ * ΔⲆᐃⲆΔ);
			ᐃ.fill();
			ᐃ.translate(ΔⲆᐃⲆΔ, ΔⲆᐃⲆΔ)
		}
		ᐃ.textBaseline = Δ[99], ᐃ.font = ⲆΔΔ + Δ[139];
		ᐃ.lineJoin = Δ[237];
		ⵠⲆⲆΔ && (ᐃ.beginPath(), ᐃ.fillStyle = ⵠⲆⲆΔ, ᐃ.fillText(text, 0, ΔⲆⵠ / ⲆᐃⵠⲆ + ᐃⲆΔⵠ - ⲆⵠⲆᐃᐃ / ⵠᐃⵠⲆ, ⲆⲆⵠ));
		ᐃ.beginPath();
		if (ⲆⵠΔⵠ) {
			ᐃ.strokeStyle = ⲆⵠΔⵠ;
			ᐃ.lineWidth = ᐃⲆⵠᐃⵠ;
			ᐃ.strokeText(text, ᐃⲆⵠᐃⵠ, (ΔⲆⵠ - ⲆⵠⲆᐃᐃ) / ⲆᐃᐃΔ, ⲆⲆⵠ)
		}
		ᐃ.fillStyle = ᐃⲆ;
		ᐃ.fillText(text, ᐃⲆⵠᐃⵠ, (ΔⲆⵠ - ⲆⵠⲆᐃᐃ) / ⵠΔᐃⵠ, ⲆⲆⵠ);
		return ⲆⲆ
	}

	function ⲆΔⲆⵠΔΔⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 300;
		ⲆⲆ.height = 300 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆΔᐃ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 150, Ⲇ * 160);
		ᐃ.rotate(6.28);
		ᐃⵠΔⵠ(ᐃ, ΔᐃⵠΔΔ, Ⲇ * 146, 30 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠⵠ]);
		ᐃ.globalAlpha = 1;
		ᐃ.save();
		ᐃ.translate(150 * Ⲇ, Ⲇ * 150);
		ᐃ.rotate(6.28);
		ᐃⵠΔⵠ(ᐃ, 6, Ⲇ * 146, 30 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔ], ᐃⲆ[2], Ⲇ * 8);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 150, Ⲇ * 150);
		ᐃ.rotate(0);
		ᐃⵠΔⵠ(ᐃ, ΔΔⲆⵠΔ, 105 * Ⲇ, 30 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃⵠᐃⲆ], 8 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 150, Ⲇ * 150);
		ᐃ.rotate(0);
		ᐃⵠΔⵠ(ᐃ, ⵠⲆⲆΔᐃⲆⵠ, 66 * Ⲇ, 30 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⲆⵠ], ᐃⲆ[ΔⲆⲆⵠ], ΔⲆΔⲆⲆ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(131 * Ⲇ, Ⲇ * 116);
		ᐃⵠΔⵠ(ᐃ, 7, Ⲇ * 17, ⲆΔⵠΔⲆⵠᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⵠⵠⲆ]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 163, 168 * Ⲇ);
		ᐃⵠΔⵠ(ᐃ, ᐃΔᐃⲆᐃ, Ⲇ * 25, Ⲇ * 8);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[6]);
		ᐃ.save();
		ᐃ.translate(117 * Ⲇ, Ⲇ * 151);
		ᐃⵠΔⵠ(ᐃ, ⵠⲆⵠⲆΔ, ΔᐃΔⵠⲆ * Ⲇ, Ⲇ * ΔΔⵠⵠⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆⵠΔΔ]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 167, Ⲇ * 122);
		ᐃⵠΔⵠ(ᐃ, ⲆΔΔᐃΔ, Ⲇ * 12, Ⲇ * ⲆᐃⲆⵠⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(150 * Ⲇ, Ⲇ * 207);
		ᐃ.bezierCurveTo(150 * Ⲇ, 151 * Ⲇ, 150 * Ⲇ, Ⲇ * 101, 150 * Ⲇ, 94 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔᐃᐃⵠⲆ, ᐃⲆ[2], Ⲇ * ΔΔⲆⵠⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 118, Ⲇ * 100);
		ᐃ.bezierCurveTo(118 * Ⲇ, 205 * Ⲇ, Ⲇ * 118, 207 * Ⲇ, 118 * Ⲇ, Ⲇ * 200);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃΔⲆⵠ], ΔⲆᐃΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(183 * Ⲇ, 100 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 183, 203 * Ⲇ, 183 * Ⲇ, Ⲇ * 203, 183 * Ⲇ, 200 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], Ⲇ * ΔΔᐃΔΔ);
		return ⲆⲆ
	}

	function ᐃΔΔΔᐃᐃΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 373;
		ⲆⲆ.height = 314 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠΔᐃ;
		ᐃ.translate(ⵠᐃⵠΔᐃ * Ⲇ, Ⲇ * ⲆΔⵠⵠᐃ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 184.048583984375, Ⲇ * 69.1805419921875);
		ᐃᐃᐃ(ᐃ, -40 * Ⲇ, Ⲇ * -28.5, 80 * Ⲇ, 57 * Ⲇ, ᐃⲆᐃⲆᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆ], ᐃⲆ[ⲆⲆΔΔ], ΔΔᐃᐃⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(185.048583984375 * Ⲇ, 61.6805419921875 * Ⲇ);
		ᐃ.bezierCurveTo(145.048583984375 * Ⲇ, 59.6805419921875 * Ⲇ, Ⲇ * 138.048583984375, Ⲇ * 41.6805419921875, 148.048583984375 * Ⲇ, 33.6805419921875 * Ⲇ);
		ᐃ.bezierCurveTo(169.048583984375 * Ⲇ, Ⲇ * 17.6805419921875, 194.048583984375 * Ⲇ, 20.6805419921875 * Ⲇ, Ⲇ * 210.048583984375, Ⲇ * 27.6805419921875);
		ᐃ.bezierCurveTo(234.048583984375 * Ⲇ, 40.6805419921875 * Ⲇ, Ⲇ * 225.048583984375, 57.6805419921875 * Ⲇ, Ⲇ * 186.048583984375, 61.6805419921875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ], ᐃⲆ[0], Ⲇ * ᐃΔⵠⲆⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 224.048583984375, 56.6805419921875 * Ⲇ);
		ᐃ.bezierCurveTo(326.048583984375 * Ⲇ, Ⲇ * 69.6805419921875, Ⲇ * 363.048583984375, 148.6805419921875 * Ⲇ, Ⲇ * 349.048583984375, 206.6805419921875 * Ⲇ);
		ᐃ.bezierCurveTo(329.048583984375 * Ⲇ, Ⲇ * 278.6805419921875, Ⲇ * 252.048583984375, Ⲇ * 283.6805419921875, 206.048583984375 * Ⲇ, 275.6805419921875 * Ⲇ);
		ᐃ.bezierCurveTo(206.548583984375 * Ⲇ, 266.6805419921875 * Ⲇ, 206.548583984375 * Ⲇ, 266.6805419921875 * Ⲇ, Ⲇ * 207.048583984375, Ⲇ * 257.6805419921875);
		ᐃ.bezierCurveTo(Ⲇ * 276.048583984375, Ⲇ * 268.6805419921875, Ⲇ * 308.048583984375, Ⲇ * 239.6805419921875, 323.048583984375 * Ⲇ, Ⲇ * 208.6805419921875);
		ᐃ.bezierCurveTo(352.048583984375 * Ⲇ, 145.6805419921875 * Ⲇ, 292.048583984375 * Ⲇ, Ⲇ * 86.6805419921875, 223.048583984375 * Ⲇ, Ⲇ * 74.6805419921875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], Ⲇ * Ⲇⵠᐃᐃⵠ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 183.548583984375, Ⲇ * 119.6805419921875);
		ᐃᐃᐃ(ᐃ, Ⲇ * -121.5, -45 * Ⲇ, 243 * Ⲇ, 90 * Ⲇ, Ⲇ * 40);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ], ᐃⲆ[0], Δⵠᐃⵠⵠ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 183.048583984375, 155.6805419921875 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -121, Ⲇ * -52, Ⲇ * 242, 104 * Ⲇ, 40 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⲆᐃⲆ], Ⲇ * ⲆΔΔΔΔ);
		ᐃ.save();
		ᐃ.translate(183.048583984375 * Ⲇ, Ⲇ * 205.1805419921875);
		ᐃᐃᐃ(ᐃ, -121 * Ⲇ, -50.5 * Ⲇ, Ⲇ * 242, 101 * Ⲇ, Ⲇ * 40);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔᐃ], ᐃⲆ[ᐃⲆⵠΔ], Ⲇ * ⲆⵠⵠⵠⲆ);
		ᐃ.save();
		ᐃ.translate(185.048583984375 * Ⲇ, 204.1805419921875 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -100 * Ⲇ, Ⲇ * -34.5, 200 * Ⲇ, 69 * Ⲇ, Ⲇ * 40);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⵠ], ᐃⲆ[0], 6 * Ⲇ);
		ᐃΔⵠ(ᐃ, 185.048583984375 * Ⲇ, 257.6805419921875 * Ⲇ, 27.018512172212592 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ], ᐃⲆ[0], Ⲇ * ⵠΔΔⲆΔ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(-5 * Ⲇ, -5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(224.048583984375 * Ⲇ, 56.6805419921875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 326.048583984375, Ⲇ * 69.6805419921875, 363.048583984375 * Ⲇ, Ⲇ * 148.6805419921875, Ⲇ * 349.048583984375, 206.6805419921875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 329.048583984375, 278.6805419921875 * Ⲇ, Ⲇ * 252.048583984375, 283.6805419921875 * Ⲇ, Ⲇ * 206.048583984375, Ⲇ * 275.6805419921875);
		ᐃ.bezierCurveTo(206.548583984375 * Ⲇ, Ⲇ * 266.6805419921875, 206.548583984375 * Ⲇ, Ⲇ * 266.6805419921875, 207.048583984375 * Ⲇ, 257.6805419921875 * Ⲇ);
		ᐃ.bezierCurveTo(276.048583984375 * Ⲇ, Ⲇ * 268.6805419921875, 308.048583984375 * Ⲇ, 239.6805419921875 * Ⲇ, 323.048583984375 * Ⲇ, 208.6805419921875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 352.048583984375, 145.6805419921875 * Ⲇ, 292.048583984375 * Ⲇ, 86.6805419921875 * Ⲇ, Ⲇ * 223.048583984375, 74.6805419921875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃ], ᐃⲆ[4], Ⲇ * 6);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 184.048583984375, 69.1805419921875 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -40, -28.5 * Ⲇ, 80 * Ⲇ, Ⲇ * 57, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ᐃᐃᐃᐃ], ⵠᐃΔΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 185.048583984375, Ⲇ * 61.6805419921875);
		ᐃ.bezierCurveTo(145.048583984375 * Ⲇ, Ⲇ * 59.6805419921875, Ⲇ * 138.048583984375, 41.6805419921875 * Ⲇ, Ⲇ * 148.048583984375, 33.6805419921875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 169.048583984375, Ⲇ * 17.6805419921875, Ⲇ * 194.048583984375, 20.6805419921875 * Ⲇ, Ⲇ * 210.048583984375, 27.6805419921875 * Ⲇ);
		ᐃ.bezierCurveTo(234.048583984375 * Ⲇ, Ⲇ * 40.6805419921875, Ⲇ * 225.048583984375, Ⲇ * 57.6805419921875, Ⲇ * 186.048583984375, 61.6805419921875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * ᐃΔΔⵠΔ);
		ᐃ.save();
		ᐃ.translate(183.548583984375 * Ⲇ, 119.6805419921875 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -121.5, Ⲇ * -45, 243 * Ⲇ, Ⲇ * 90, Ⲇ * 40);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⵠΔ], ᐃⲆ[4], Ⲇ * 6);
		ᐃ.save();
		ᐃ.translate(183.048583984375 * Ⲇ, 155.6805419921875 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -121, Ⲇ * -52, 242 * Ⲇ, Ⲇ * 104, 40 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔᐃΔΔ], ΔⲆⵠΔΔ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(183.048583984375 * Ⲇ, 205.1805419921875 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -121, Ⲇ * -50.5, Ⲇ * 242, Ⲇ * 101, Ⲇ * 40);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⵠⵠΔ], ᐃⲆ[ⵠᐃΔΔΔ], Ⲇ * 6);
		ᐃ.globalCompositeOperation = Δ[289];
		ᐃ.save();
		ᐃ.translate(185.048583984375 * Ⲇ, 204.1805419921875 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -100, Ⲇ * -34.5, 200 * Ⲇ, Ⲇ * 69, 40 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠⲆΔ], ᐃⲆ[8], Ⲇ * 6);
		ᐃ.globalCompositeOperation = Δ[394];
		ᐃ.globalAlpha = .5;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 185.048583984375, Ⲇ * 204.1805419921875);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ᐃⵠⲆⲆⲆ, -34.5 * Ⲇ, Ⲇ * 200, Ⲇ * 69, Ⲇ * 40);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠⲆΔ], ᐃⲆ[ⵠⲆΔⲆᐃ], Ⲇ * 6);
		ᐃ.globalAlpha = 1;
		ᐃ.save();
		ᐃΔⵠ(ᐃ, Ⲇ * 185.048583984375, 257.6805419921875 * Ⲇ, Ⲇ * 27.018512172212592);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆΔ], ᐃⲆ[4], 6 * Ⲇ);
		ᐃ.restore();
		return ⲆⲆ
	}

	function ᐃᐃⲆΔⲆΔⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 248;
		ⲆⲆ.height = 128 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(137 * Ⲇ, 7 * Ⲇ);
		ᐃ.bezierCurveTo(169 * Ⲇ, ⲆⲆⲆⵠᐃⲆᐃ * Ⲇ, 212 * Ⲇ, 9 * Ⲇ, Ⲇ * 241, Ⲇ * ᐃᐃⲆΔΔ);
		ᐃ.bezierCurveTo(Ⲇ * 211, 63 * Ⲇ, Ⲇ * 158, Ⲇ * 92, Ⲇ * 103, Ⲇ * 109);
		ᐃ.bezierCurveTo(73 * Ⲇ, 126 * Ⲇ, Ⲇ * 54, 124 * Ⲇ, Ⲇ * 6, Ⲇ * 99);
		ᐃ.bezierCurveTo(82 * Ⲇ, 63 * Ⲇ, 113 * Ⲇ, 35 * Ⲇ, 137 * Ⲇ, Ⲇ * 8);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ], ᐃⲆ[ᐃⵠⵠ], Ⲇ * ᐃᐃⲆⲆⵠΔⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 73, 124 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 111, Ⲇ * 126, Ⲇ * 162, 97 * Ⲇ, 203 * Ⲇ, 61 * Ⲇ);
		ᐃ.bezierCurveTo(156 * Ⲇ, Ⲇ * 98, 131 * Ⲇ, 106 * Ⲇ, 105 * Ⲇ, 109 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 99, 121 * Ⲇ, Ⲇ * 87, 124 * Ⲇ, 72 * Ⲇ, Ⲇ * 124);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[3], 1 * Ⲇ);
		return ⲆⲆ
	}
	const ᐃᐃᐃᐃΔ = String.fromCharCode;
	const ⵠⵠᐃⵠᐃⲆⵠᐃⵠ = 101;
	const ⵠᐃᐃⲆⵠᐃⲆ = 118;
	const ΔⵠⲆⵠⲆⵠⵠ = "ⲆⲆⲆᐃⲆΔⵠ";
	const ⵠᐃᐃⵠᐃⲆΔ = 97;
	const ΔⵠΔᐃⲆᐃⲆ = 108;
	const ᐃΔⲆΔⲆⲆΔⲆⵠ = ᐃᐃᐃᐃΔ(ⵠⵠᐃⵠᐃⲆⵠᐃⵠ);
	const ᐃⵠⲆⵠᐃⲆΔᐃᐃ = ᐃᐃᐃᐃΔ(ⵠᐃᐃⲆⵠᐃⲆ);

	function ⲆⲆⲆᐃⲆΔⵠ() {
		ᐃᐃⲆⵠΔⵠᐃ = ⲆⲆⲆᐃⲆΔⵠ;
		return ⲆⲆⲆᐃⲆΔⵠ
	}
	const ΔΔⵠᐃⲆⵠⵠ = ᐃᐃᐃᐃΔ(ⵠᐃᐃⵠᐃⲆΔ);
	const ᐃⲆΔⵠᐃΔⲆⲆᐃ = ᐃᐃᐃᐃΔ(ΔⵠΔᐃⲆᐃⲆ);
	const ⲆⲆΔⵠΔᐃΔⵠⵠ = ᐃΔⲆΔⲆⲆΔⲆⵠ + ᐃⵠⲆⵠᐃⲆΔᐃᐃ + ΔΔⵠᐃⲆⵠⵠ + ᐃⲆΔⵠᐃΔⲆⲆᐃ;
	const ΔⲆⵠⵠⵠⵠΔⵠᐃ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ⲆⲆΔⵠΔᐃΔⵠⵠ];
	const ᐃⲆΔᐃⲆⲆᐃ = ΔⲆⵠⵠⵠⵠΔⵠᐃ(ⲆⲆⲆᐃⲆΔⵠ + "try{" + ΔⵠⲆⵠⲆⵠⵠ + "();0;}catch(ΔΔⵠᐃⲆⵠⵠ){1;}");
	if (ᐃⲆΔᐃⲆⲆᐃ) {
		const ᐃᐃᐃᐃΔ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]];
		const ⵠⵠᐃⵠᐃⲆⵠᐃⵠ = ᐃᐃᐃᐃΔ;
		const ⵠᐃᐃⲆⵠᐃⲆ = function() {
			ᐃᐃᐃᐃΔ(ⵠᐃᐃⲆⵠᐃⲆ, 5195);
			ⵠⵠᐃⵠᐃⲆⵠᐃⵠ(ⵠᐃᐃⲆⵠᐃⲆ, 4660)
		};
		ⵠᐃᐃⲆⵠᐃⲆ()
	}

	function ⵠⵠⲆᐃⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 140;
		var ⲆΔΔ = Ⲇ * 150;
		var ⵠⲆⲆΔ = 10 * Ⲇ;
		var ⲆⲆⵠ = 4 * Ⲇ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(-50 * Ⲇ, Ⲇ * -38 + ⵠⲆⲆΔ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(Ⲇ * 160, Ⲇ * 65, 160 * Ⲇ, 85 * Ⲇ, Ⲇ * 152, 95 * Ⲇ);
		ᐃ.bezierCurveTo(152 * Ⲇ, Ⲇ * 95, Ⲇ * 173, 94 * Ⲇ, 187 * Ⲇ, Ⲇ * 102);
		ᐃ.bezierCurveTo(187 * Ⲇ, 102 * Ⲇ, 180 * Ⲇ, Ⲇ * 120, 155 * Ⲇ, 126 * Ⲇ);
		ᐃ.bezierCurveTo(154 * Ⲇ, Ⲇ * 126, 166 * Ⲇ, 138 * Ⲇ, Ⲇ * 169, Ⲇ * 148);
		ᐃ.bezierCurveTo(169 * Ⲇ, 148 * Ⲇ, Ⲇ * 148, Ⲇ * 152, Ⲇ * 133, 140 * Ⲇ);
		ᐃ.bezierCurveTo(133 * Ⲇ, Ⲇ * 140, 134 * Ⲇ, 160 * Ⲇ, Ⲇ * 122, 175 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 122, 175 * Ⲇ, 107 * Ⲇ, Ⲇ * 162, 107 * Ⲇ, Ⲇ * 144);
		ᐃ.bezierCurveTo(107 * Ⲇ, 144 * Ⲇ, Ⲇ * 98, Ⲇ * 164, 73 * Ⲇ, 167 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 73, 167 * Ⲇ, Ⲇ * 72, 134 * Ⲇ, Ⲇ * 90, Ⲇ * 127);
		ᐃ.bezierCurveTo(Ⲇ * 90, 127 * Ⲇ, Ⲇ * 70, 134 * Ⲇ, Ⲇ * 55, 123 * Ⲇ);
		ᐃ.bezierCurveTo(55 * Ⲇ, 123 * Ⲇ, Ⲇ * 58, 115 * Ⲇ, Ⲇ * 75, 104 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 75, Ⲇ * 104, Ⲇ * 66, 96 * Ⲇ, 61 * Ⲇ, 77 * Ⲇ);
		ᐃ.bezierCurveTo(61 * Ⲇ, 77 * Ⲇ, 83 * Ⲇ, Ⲇ * 74, Ⲇ * 102, 89 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 102, 89 * Ⲇ, Ⲇ * 92, Ⲇ * 66, Ⲇ * 110, 41 * Ⲇ);
		ᐃ.bezierCurveTo(111 * Ⲇ, 40 * Ⲇ, 130 * Ⲇ, 54 * Ⲇ, 130 * Ⲇ, 82 * Ⲇ);
		ᐃ.bezierCurveTo(130 * Ⲇ, 82 * Ⲇ, 143 * Ⲇ, Ⲇ * 67, Ⲇ * 159, 65 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ]);
		ᐃ.translate(ⵠⲆΔⵠ, ⵠᐃΔ - ⵠⲆⲆΔ);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.bezierCurveTo(160 * Ⲇ, 65 * Ⲇ, 160 * Ⲇ, 85 * Ⲇ, 152 * Ⲇ, 95 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 152, Ⲇ * 95, Ⲇ * 173, 94 * Ⲇ, 187 * Ⲇ, Ⲇ * 102);
		ᐃ.bezierCurveTo(187 * Ⲇ, 102 * Ⲇ, 180 * Ⲇ, Ⲇ * 120, 155 * Ⲇ, 126 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 154, Ⲇ * 126, 166 * Ⲇ, Ⲇ * 138, 169 * Ⲇ, 148 * Ⲇ);
		ᐃ.bezierCurveTo(169 * Ⲇ, Ⲇ * 148, 148 * Ⲇ, Ⲇ * 152, 133 * Ⲇ, 140 * Ⲇ);
		ᐃ.bezierCurveTo(133 * Ⲇ, 140 * Ⲇ, Ⲇ * 134, Ⲇ * 160, Ⲇ * 122, Ⲇ * 175);
		ᐃ.bezierCurveTo(122 * Ⲇ, 175 * Ⲇ, 107 * Ⲇ, 162 * Ⲇ, 107 * Ⲇ, Ⲇ * 144);
		ᐃ.bezierCurveTo(107 * Ⲇ, 144 * Ⲇ, 98 * Ⲇ, Ⲇ * 164, 73 * Ⲇ, 167 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 73, 167 * Ⲇ, 72 * Ⲇ, 134 * Ⲇ, 90 * Ⲇ, Ⲇ * 127);
		ᐃ.bezierCurveTo(Ⲇ * 90, 127 * Ⲇ, Ⲇ * 70, 134 * Ⲇ, 55 * Ⲇ, Ⲇ * 123);
		ᐃ.bezierCurveTo(55 * Ⲇ, 123 * Ⲇ, 58 * Ⲇ, Ⲇ * 115, 75 * Ⲇ, Ⲇ * 104);
		ᐃ.bezierCurveTo(Ⲇ * 75, Ⲇ * 104, 66 * Ⲇ, 96 * Ⲇ, Ⲇ * 61, 77 * Ⲇ);
		ᐃ.bezierCurveTo(61 * Ⲇ, Ⲇ * 77, Ⲇ * 83, Ⲇ * 74, Ⲇ * 102, Ⲇ * 89);
		ᐃ.bezierCurveTo(102 * Ⲇ, 89 * Ⲇ, 92 * Ⲇ, Ⲇ * 66, Ⲇ * 110, Ⲇ * 41);
		ᐃ.bezierCurveTo(Ⲇ * 111, 40 * Ⲇ, 130 * Ⲇ, Ⲇ * 54, 130 * Ⲇ, 82 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 130, Ⲇ * 82, 143 * Ⲇ, Ⲇ * 67, 159 * Ⲇ, Ⲇ * 65);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ⲆⲆⵠ);
		return ⲆⲆ
	}
	const ⵠⵠΔⵠΔΔᐃᐃⵠ = "";

	function ⵠᐃⵠⵠⲆΔⲆ(ⵠⲆⲆᐃᐃⵠⲆ) {
		if (ⵠⲆⲆᐃᐃⵠⲆ > 0) return ⵠⲆⲆᐃᐃⵠⲆ * ⵠⲆⲆᐃᐃⵠⲆ;
		else return ⵠⲆⲆᐃᐃⵠⲆ
	}

	function ⲆⵠᐃᐃᐃΔᐃ(ⵠⵠᐃⲆⵠⲆᐃ) {
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ.String.fromCharCode(ⵠⵠᐃⲆⵠⲆᐃ)
	}

	function ⵠⲆᐃⲆⲆⲆᐃΔΔ(ΔⵠᐃΔⲆⵠⵠ) {
		return ΔⵠᐃΔⲆⵠⵠ.map(ⲆⵠᐃᐃᐃΔᐃ).join(ⵠⵠΔⵠΔΔᐃᐃⵠ)
	}

	function ΔᐃᐃΔⲆⵠᐃ(ⲆᐃᐃⵠⲆⵠⲆⲆⵠ) {
		const ⲆⵠᐃᐃⵠᐃΔ = ⵠᐃⵠⵠⲆΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[27]]();
		const ⲆᐃΔᐃΔΔᐃ = ⲆⵠᐃᐃⵠᐃΔ.indexOf(ⲆᐃᐃⵠⲆⵠⲆⲆⵠ);
		return ⲆᐃΔᐃΔΔᐃ !== -1 ? 1 : 0
	}
	const ⵠΔⵠΔⲆⵠⲆᐃΔ = ΔᐃᐃΔⲆⵠᐃ(ⵠⲆᐃⲆⲆⲆᐃΔΔ([11616, 5123, 11616, 11616, 11398, 916, 11398]));
	if (ⵠΔⵠΔⲆⵠⲆᐃΔ === 0) {
		const ⵠΔⵠΔⲆⵠⲆᐃΔ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]];
		const ⲆᐃΔᐃΔΔᐃ = ⵠΔⵠΔⲆⵠⲆᐃΔ;
		const ⵠᐃⵠⵠⲆΔⲆ = function() {
			ⵠΔⵠΔⲆⵠⲆᐃΔ(ⵠᐃⵠⵠⲆΔⲆ, 4928);
			ⲆᐃΔᐃΔΔᐃ(ⵠᐃⵠⵠⲆΔⲆ, 5408)
		};
		ⵠᐃⵠⵠⲆΔⲆ()
	}

	function ⵠⲆᐃΔΔᐃΔⵠᐃ(text) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ᐃ.lineJoin = Δ[237];
		while (text.indexOf("\\n") !== -1) text = text.replace("\\n", "\n");
		text = text.split("\n");
		ᐃⲆ = [];
		var ⲆΔΔ = ᐃⲆᐃⲆΔ;
		var ΔⲆⵠ = text.length * (ⲆΔΔ + 4) + 10;
		var ⲆⲆⵠ = 0;
		ᐃ.font = ⲆΔΔ + Δ[139];
		for (var Δᐃ = ⵠⲆΔⵠ; Δᐃ < text.length; Δᐃ++) {
			if (text[Δᐃ].charAt(ⵠⲆᐃ) === "#") {
				ᐃⲆ[Δᐃ] = text[Δᐃ].substring(ⵠⲆⵠ, 7);
				text[Δᐃ] = text[Δᐃ].substring(8)
			} else ᐃⲆ[Δᐃ] = Δ[93];
			ⲆⲆⵠ = Math.max(ᐃ.measureText(text[Δᐃ]).width + 16, ⲆⲆⵠ)
		}
		ⲆⲆ.height = ΔⲆⵠ;
		ⲆⲆ.width = ⲆⲆⵠ;
		for (var Δᐃ = ⵠᐃΔ; Δᐃ < text.length; Δᐃ++) {
			var ⵠΔ = ⲆΔⵠⵠⵠ(1, text[Δᐃ], ⲆΔΔ, ᐃⲆ[Δᐃ], null, null, null, null, null, Δ[287], ΔΔᐃⵠⵠ);
			ᐃ.drawImage(ⵠΔ, 8, (ⲆΔΔ + 4) * Δᐃ + ⲆΔⵠⵠᐃ)
		}
		return ⲆⲆ
	}

	function ⵠⲆⲆᐃᐃⵠΔΔᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 400;
		ⲆⲆ.height = 400 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠⵠᐃ;
		ᐃ.translate(ΔΔⲆⲆⵠ * Ⲇ, Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 100.5, 126.34375 * Ⲇ);
		ᐃ.bezierCurveTo(151.5 * Ⲇ, 104.34375 * Ⲇ, 279.5 * Ⲇ, Ⲇ * 188.34375, Ⲇ * 297.5, Ⲇ * 292.34375);
		ᐃ.bezierCurveTo(Ⲇ * 222.5, 307.34375 * Ⲇ, 106.5 * Ⲇ, Ⲇ * 196.34375, Ⲇ * 100.5, 127.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠⲆΔⵠ], ⲆⲆᐃΔⵠΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(106.5 * Ⲇ, Ⲇ * 131.34375);
		ᐃ.bezierCurveTo(140.5 * Ⲇ, Ⲇ * 142.34375, Ⲇ * 225.5, 184.34375 * Ⲇ, Ⲇ * 290.5, Ⲇ * 287.34375);
		ᐃ.bezierCurveTo(270.5 * Ⲇ, Ⲇ * 188.34375, 152.5 * Ⲇ, Ⲇ * 118.34375, 107.5 * Ⲇ, 131.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 157.5, Ⲇ * 137.34375);
		ᐃ.bezierCurveTo(Ⲇ * 161.5, Ⲇ * 138.34375, Ⲇ * 164.5, 140.34375 * Ⲇ, Ⲇ * 168.5, 142.34375 * Ⲇ);
		ᐃ.bezierCurveTo(165.5 * Ⲇ, Ⲇ * 156.34375, 141.5 * Ⲇ, Ⲇ * 176.34375, Ⲇ * 126.5, 179.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 123.5, 173.34375 * Ⲇ, 120.5 * Ⲇ, 169.34375 * Ⲇ, 120.5 * Ⲇ, 169.34375 * Ⲇ);
		ᐃ.bezierCurveTo(141.5 * Ⲇ, Ⲇ * 161.34375, Ⲇ * 156.5, Ⲇ * 145.34375, Ⲇ * 155.5, 136.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 196.5, Ⲇ * 151.34375);
		ᐃ.bezierCurveTo(Ⲇ * 211.5, 158.34375 * Ⲇ, 224.5 * Ⲇ, Ⲇ * 171.34375, 229.5 * Ⲇ, Ⲇ * 176.34375);
		ᐃ.bezierCurveTo(Ⲇ * 246.5, 163.34375 * Ⲇ, Ⲇ * 259.5, Ⲇ * 166.34375, Ⲇ * 272.5, 168.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 254.5, 146.34375 * Ⲇ, Ⲇ * 214.5, Ⲇ * 145.34375, Ⲇ * 198.5, 151.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], Ⲇ * ΔⲆΔᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(154.5 * Ⲇ, Ⲇ * 222.34375);
		ᐃ.bezierCurveTo(Ⲇ * 164.5, 234.34375 * Ⲇ, 173.5 * Ⲇ, Ⲇ * 242.34375, 178.5 * Ⲇ, Ⲇ * 245.34375);
		ᐃ.bezierCurveTo(Ⲇ * 174.5, 265.34375 * Ⲇ, Ⲇ * 180.5, 274.34375 * Ⲇ, 186.5 * Ⲇ, Ⲇ * 283.34375);
		ᐃ.bezierCurveTo(165.5 * Ⲇ, Ⲇ * 277.34375, 151.5 * Ⲇ, Ⲇ * 245.34375, Ⲇ * 155.5, 224.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ], ᐃⲆ[ⵠᐃΔ], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 279.5, 294.34375 * Ⲇ);
		ᐃ.bezierCurveTo(286.5 * Ⲇ, 285.84375 * Ⲇ, Ⲇ * 286.5, Ⲇ * 285.84375, 293.5 * Ⲇ, 277.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 315.5, Ⲇ * 280.34375, 315.5 * Ⲇ, Ⲇ * 280.34375, Ⲇ * 337.5, 283.34375 * Ⲇ);
		ᐃ.bezierCurveTo(340.5 * Ⲇ, Ⲇ * 311.34375, 317.5 * Ⲇ, 326.34375 * Ⲇ, 307.5 * Ⲇ, Ⲇ * 331.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], Ⲇ * ⵠⲆⵠᐃⲆ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(Ⲇ * -10, Ⲇ * -ΔΔⵠΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(100.5 * Ⲇ, 126.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 151.5, 104.34375 * Ⲇ, 279.5 * Ⲇ, 188.34375 * Ⲇ, Ⲇ * 297.5, Ⲇ * 292.34375);
		ᐃ.bezierCurveTo(222.5 * Ⲇ, 307.34375 * Ⲇ, 106.5 * Ⲇ, 196.34375 * Ⲇ, 100.5 * Ⲇ, Ⲇ * 127.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ΔⲆⲆⵠ], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(106.5 * Ⲇ, Ⲇ * 131.34375);
		ᐃ.bezierCurveTo(140.5 * Ⲇ, Ⲇ * 142.34375, Ⲇ * 225.5, 184.34375 * Ⲇ, 290.5 * Ⲇ, Ⲇ * 287.34375);
		ᐃ.bezierCurveTo(270.5 * Ⲇ, 188.34375 * Ⲇ, 152.5 * Ⲇ, 118.34375 * Ⲇ, 107.5 * Ⲇ, Ⲇ * 131.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 157.5, Ⲇ * 137.34375);
		ᐃ.bezierCurveTo(161.5 * Ⲇ, Ⲇ * 138.34375, Ⲇ * 164.5, Ⲇ * 140.34375, Ⲇ * 168.5, Ⲇ * 142.34375);
		ᐃ.bezierCurveTo(Ⲇ * 165.5, 156.34375 * Ⲇ, 141.5 * Ⲇ, Ⲇ * 176.34375, 126.5 * Ⲇ, 179.34375 * Ⲇ);
		ᐃ.bezierCurveTo(123.5 * Ⲇ, 173.34375 * Ⲇ, Ⲇ * 120.5, Ⲇ * 169.34375, Ⲇ * 120.5, 169.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 141.5, 161.34375 * Ⲇ, Ⲇ * 156.5, Ⲇ * 145.34375, 155.5 * Ⲇ, Ⲇ * 136.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔᐃ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 125.5, 140.34375 * Ⲇ, 11.180339887498949 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔᐃ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 122.5, 135.34375 * Ⲇ, Ⲇ * 5.0990195135927845);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠⲆⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(196.5 * Ⲇ, 151.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 211.5, 158.34375 * Ⲇ, 224.5 * Ⲇ, Ⲇ * 171.34375, Ⲇ * 229.5, Ⲇ * 176.34375);
		ᐃ.bezierCurveTo(246.5 * Ⲇ, Ⲇ * 163.34375, 259.5 * Ⲇ, Ⲇ * 166.34375, Ⲇ * 272.5, 168.34375 * Ⲇ);
		ᐃ.bezierCurveTo(254.5 * Ⲇ, Ⲇ * 146.34375, Ⲇ * 214.5, Ⲇ * 145.34375, 198.5 * Ⲇ, Ⲇ * 151.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠⲆΔ], ᐃⲆ[8], Ⲇ * ᐃⵠⵠᐃⲆᐃⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 154.5, Ⲇ * 222.34375);
		ᐃ.bezierCurveTo(Ⲇ * 164.5, Ⲇ * 234.34375, Ⲇ * 173.5, Ⲇ * 242.34375, 178.5 * Ⲇ, Ⲇ * 245.34375);
		ᐃ.bezierCurveTo(Ⲇ * 174.5, 265.34375 * Ⲇ, Ⲇ * 180.5, 274.34375 * Ⲇ, 186.5 * Ⲇ, Ⲇ * 283.34375);
		ᐃ.bezierCurveTo(Ⲇ * 165.5, Ⲇ * 277.34375, 151.5 * Ⲇ, Ⲇ * 245.34375, Ⲇ * 155.5, Ⲇ * 224.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[7], ᐃⲆ[ⲆᐃⲆΔⲆ], ᐃᐃΔᐃⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(279.5 * Ⲇ, Ⲇ * 294.34375);
		ᐃ.bezierCurveTo(286.5 * Ⲇ, Ⲇ * 285.84375, Ⲇ * 286.5, 285.84375 * Ⲇ, Ⲇ * 293.5, Ⲇ * 277.34375);
		ᐃ.bezierCurveTo(Ⲇ * 315.5, Ⲇ * 280.34375, 315.5 * Ⲇ, 280.34375 * Ⲇ, Ⲇ * 337.5, 283.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 340.5, Ⲇ * 311.34375, 317.5 * Ⲇ, Ⲇ * 326.34375, Ⲇ * 307.5, 331.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠⲆΔ], ᐃⲆ[ⲆᐃⵠⲆⵠ], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(296.5 * Ⲇ, 287.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 311.5, 291.34375 * Ⲇ, Ⲇ * 311.5, 291.34375 * Ⲇ, Ⲇ * 326.5, Ⲇ * 295.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔⵠΔⲆⲆ, ᐃⲆ[ⲆⲆΔᐃⲆ], Ⲇ * 6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 294.5, 289.34375 * Ⲇ);
		ᐃ.bezierCurveTo(308.5 * Ⲇ, 297.34375 * Ⲇ, Ⲇ * 308.5, Ⲇ * 297.34375, 322.5 * Ⲇ, Ⲇ * 305.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆᐃⲆΔⲆⵠⵠ], Ⲇ * Δⵠᐃⵠⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(294.5 * Ⲇ, Ⲇ * 291.34375);
		ᐃ.bezierCurveTo(304 * Ⲇ, Ⲇ * 303.34375, Ⲇ * 304, Ⲇ * 303.34375, Ⲇ * 313.5, Ⲇ * 315.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆᐃΔⵠ, ᐃⲆ[9], ᐃΔΔⵠΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 226.5, 161.34375 * Ⲇ);
		ᐃ.bezierCurveTo(230.5 * Ⲇ, Ⲇ * 160.34375, Ⲇ * 236.5, 158.34375 * Ⲇ, Ⲇ * 238.5, Ⲇ * 161.34375);
		ᐃ.bezierCurveTo(Ⲇ * 238.5, 157.34375 * Ⲇ, Ⲇ * 228.5, Ⲇ * 159.34375, 227.5 * Ⲇ, Ⲇ * 161.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠⲆᐃᐃⲆ, ᐃⲆ[ⵠⵠᐃⵠⲆΔᐃ], Ⲇ * ⲆΔⲆᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(167.5 * Ⲇ, Ⲇ * 248.34375);
		ᐃ.bezierCurveTo(165.5 * Ⲇ, 251.34375 * Ⲇ, 168.5 * Ⲇ, Ⲇ * 256.34375, Ⲇ * 168.5, 253.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 166.5, Ⲇ * 252.34375, Ⲇ * 168.5, 246.34375 * Ⲇ, Ⲇ * 166.5, Ⲇ * 247.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆⲆᐃⵠΔⲆᐃ], 3 * Ⲇ);
		return ⲆⲆ
	}

	function ᐃⲆⵠⲆⵠ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 180 * Ⲇ;
		var ⲆΔΔ = Ⲇ * 210;
		var ⵠᐃⵠ = 60 * Ⲇ;
		var ΔⲆⵠⵠ = ⵠᐃⵠ / ⵠᐃΔΔΔ;
		var ⵠⲆⲆΔ = 20 * Ⲇ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / ΔⲆⲆⵠ - Ⲇ * ᐃΔΔ, ⲆΔΔ / ᐃᐃᐃᐃ - 35 * Ⲇ + ⵠⲆⲆΔ);
		ᐃ.rotate(Math.PI / -1.8);
		ᐃ.globalAlpha = .5;
		ᐃ.translate(0 * Ⲇ, -20 * Ⲇ);
		ᐃⵠΔⵠ(ᐃ, 5, ⵠᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / ΔΔᐃᐃ + ⲆᐃⲆⲆᐃ * Ⲇ, ⲆΔΔ / ΔΔᐃᐃ + Ⲇ * ⵠΔⵠᐃⲆⵠⵠ + ⵠⲆⲆΔ);
		ᐃ.rotate(Math.PI / 2);
		ᐃ.globalAlpha = .5;
		ᐃ.translate(0 * Ⲇ, -ᐃᐃΔΔⲆ * Ⲇ);
		ᐃⵠΔⵠ(ᐃ, 5, ⵠᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / 2 - 50 * Ⲇ, ⲆΔΔ / 2 + Ⲇ * 40 + ⵠⲆⲆΔ);
		ᐃ.rotate(Math.PI / 3);
		ᐃ.globalAlpha = .5;
		ᐃ.translate(0, Ⲇ * -ᐃᐃⵠⵠⲆⲆⲆ);
		ᐃⵠΔⵠ(ᐃ, 5, ⵠᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / ᐃⵠΔⲆ - Ⲇ * ⵠⵠΔΔ, ⲆΔΔ / ΔΔᐃᐃ - Ⲇ * 35);
		ᐃ.rotate(Math.PI / -1.8);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(ⵠⵠΔᐃ * Ⲇ, Ⲇ * -20);
		ᐃⵠΔⵠ(ᐃ, 5, ⵠᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆ]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / 2 + Ⲇ * 10, ⲆΔΔ / Δᐃᐃⵠ + 15 * Ⲇ);
		ᐃ.rotate(Math.PI / ΔⲆⲆⵠ);
		ᐃ.globalAlpha = ⲆⵠΔⲆ;
		ᐃ.translate(0, -20 * Ⲇ);
		ᐃⵠΔⵠ(ᐃ, ⲆΔⵠⵠᐃ, ⵠᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / 2 - 50 * Ⲇ, ⲆΔΔ / ΔΔᐃᐃ + Ⲇ * 40);
		ᐃ.rotate(Math.PI / ⵠΔⲆⲆ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, Ⲇ * -ᐃᐃⵠⵠⲆⲆⲆ);
		ᐃⵠΔⵠ(ᐃ, 5, ⵠᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆ]);
		ᐃ.restore();
		var ⵠᐃⵠ = 30 * Ⲇ;
		var ΔⲆⵠⵠ = ⵠᐃⵠ / 4;
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / 2 + 5 * Ⲇ, ⲆΔΔ / ⲆⲆᐃⲆ - 20 * Ⲇ);
		ᐃ.rotate(Math.PI / -1.8);
		ᐃ.globalAlpha = ⲆⵠⲆ;
		ᐃ.translate(ᐃΔΔ, -ⵠⲆΔᐃᐃ * Ⲇ);
		ᐃⵠΔⵠ(ᐃ, 5, ⵠᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠΔⲆ]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / 2 + 0 * Ⲇ, ⲆΔΔ / 2 + Ⲇ * ΔΔⲆⲆⵠ);
		ᐃ.rotate(Math.PI / 2);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, Ⲇ * -ᐃⵠⲆᐃΔ);
		ᐃⵠΔⵠ(ᐃ, 5, ⵠᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(Δⵠᐃ / 2 - Ⲇ * 45, ⲆΔΔ / 2 + Ⲇ * 35);
		ᐃ.rotate(Math.PI / ΔⲆΔΔ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, -ⵠⲆⵠΔⵠᐃᐃ * Ⲇ);
		ᐃⵠΔⵠ(ᐃ, ᐃᐃⲆΔΔ, ⵠᐃⵠ, ΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.restore();
		ᐃΔⵠ(ᐃ, Δⵠᐃ / ᐃⲆᐃⵠ - ΔᐃⲆΔᐃ * Ⲇ, ⲆΔΔ / ⵠᐃⵠⲆ + Ⲇ * 7, 5);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃᐃΔ]);
		return ⲆⲆ
	}

	function ⵠⵠΔⵠΔᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 125;
		ⲆⲆ.height = 139 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.save();
		ᐃ.translate(63 * Ⲇ, Ⲇ * 79);
		ᐃ.rotate(1);
		ᐃⵠΔⵠ(ᐃ, 8, 60 * Ⲇ, Ⲇ * 10);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.restore();
		ᐃ.globalAlpha = ⲆⵠΔⲆ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 63, 69 * Ⲇ);
		ᐃ.rotate(ΔΔⲆΔ);
		ᐃⵠΔⵠ(ᐃ, 8, 60 * Ⲇ, Ⲇ * ⲆΔⲆᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠΔ], ᐃⲆ[ⵠΔᐃΔᐃ], ᐃᐃᐃΔⵠ);
		ᐃ.rotate(.56);
		ᐃⵠΔⵠ(ᐃ, 8, Ⲇ * 40, Ⲇ * ⵠᐃᐃⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆ], ᐃⲆ[4], 4);
		ᐃ.rotate(.28);
		ᐃⵠΔⵠ(ᐃ, 8, Ⲇ * 28, 8 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃ.restore();
		return ⲆⲆ
	}

	function ⵠⲆᐃⵠⲆΔᐃⲆⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 243;
		ⲆⲆ.height = 172 * Ⲇ;
		ᐃΔⵠ(ᐃ, 119.5 * Ⲇ, Ⲇ * 140.125, Ⲇ * ⵠΔⲆⵠᐃΔⵠ);
		ᐃⵠ(ᐃ, ᐃⵠΔΔΔ, ᐃⲆ[ⲆⵠⲆ], Δᐃⵠᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(36.5 * Ⲇ, Ⲇ * 20.125);
		ᐃ.bezierCurveTo(119.5 * Ⲇ, 20.625 * Ⲇ, 119.5 * Ⲇ, 20.625 * Ⲇ, Ⲇ * 202.5, 21.125 * Ⲇ);
		ᐃ.bezierCurveTo(214.5 * Ⲇ, 22.125 * Ⲇ, Ⲇ * 216.5, Ⲇ * 26.125, 217.5 * Ⲇ, Ⲇ * 35.125);
		ᐃ.bezierCurveTo(Ⲇ * 221, Ⲇ * 76.125, 221 * Ⲇ, Ⲇ * 76.125, 224.5 * Ⲇ, Ⲇ * 117.125);
		ᐃ.bezierCurveTo(225.5 * Ⲇ, Ⲇ * 127.125, Ⲇ * 221.5, 131.125 * Ⲇ, 210.5 * Ⲇ, 132.125 * Ⲇ);
		ᐃ.bezierCurveTo(117.5 * Ⲇ, Ⲇ * 132.125, 117.5 * Ⲇ, 132.125 * Ⲇ, Ⲇ * 24.5, 132.125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 14.5, Ⲇ * 131.125, 13.5 * Ⲇ, 126.125 * Ⲇ, 16.5 * Ⲇ, Ⲇ * 111.125);
		ᐃ.bezierCurveTo(Ⲇ * 19.5, Ⲇ * 73.125, Ⲇ * 19.5, 73.125 * Ⲇ, Ⲇ * 22.5, Ⲇ * 35.125);
		ᐃ.bezierCurveTo(23.5 * Ⲇ, 23.125 * Ⲇ, Ⲇ * 29.5, Ⲇ * 21.125, 36.5 * Ⲇ, 20.125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 15.5, 138.625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 120, 138.625 * Ⲇ, 120 * Ⲇ, Ⲇ * 138.625, Ⲇ * 224.5, Ⲇ * 138.625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆᐃⵠΔⵠ, ᐃⲆ[2], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 13.5, 131.625 * Ⲇ);
		ᐃ.bezierCurveTo(119.5 * Ⲇ, 131.625 * Ⲇ, 119.5 * Ⲇ, 131.625 * Ⲇ, Ⲇ * 225.5, Ⲇ * 131.625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[3], Ⲇ * ᐃᐃⵠⵠΔ);
		ᐃΔⵠ(ᐃ, Ⲇ * 119.5, Ⲇ * 140.125, Ⲇ * 14.866068747318506);
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], ⲆⵠⵠⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(106.5 * Ⲇ, Ⲇ * 146.625);
		ᐃ.bezierCurveTo(116.5 * Ⲇ, 137.625 * Ⲇ, 118.5 * Ⲇ, 136.625 * Ⲇ, 123.5 * Ⲇ, 138.625 * Ⲇ);
		ᐃ.bezierCurveTo(131.5 * Ⲇ, 145.625 * Ⲇ, 133.5 * Ⲇ, 148.625 * Ⲇ, Ⲇ * 127.5, Ⲇ * 152.625);
		ᐃ.bezierCurveTo(115.5 * Ⲇ, 158.625 * Ⲇ, 111.5 * Ⲇ, 153.625 * Ⲇ, Ⲇ * 106.5, 147.625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[7], ⵠⲆⵠΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(105.5 * Ⲇ, 146.625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 116.5, Ⲇ * 159.625, 124.5 * Ⲇ, Ⲇ * 156.625, Ⲇ * 132.5, 146.625 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[8], Ⲇ * ⲆΔⲆⲆ);
		ᐃ.save();
		ᐃ.translate(75.5 * Ⲇ, 80.125 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -39 * Ⲇ, -40 * Ⲇ, 78 * Ⲇ, Ⲇ * 78, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆᐃⲆ]);
		ᐃ.save();
		ᐃ.translate(167 * Ⲇ, Ⲇ * 80.125);
		ᐃᐃᐃ(ᐃ, Ⲇ * -38.5, -39 * Ⲇ, 78 * Ⲇ, 78 * Ⲇ, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[9]);
		return ⲆⲆ
	}

	function ⵠⲆⲆᐃΔⲆⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 175;
		ⲆⲆ.height = Ⲇ * 169;
		ᐃ.globalAlpha = .5;
		ᐃ.translate(0, ⲆΔⲆΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(19 * Ⲇ, Ⲇ * 139);
		ᐃ.bezierCurveTo(Ⲇ * 18, Ⲇ * 163, Ⲇ * 22, Ⲇ * 156, 53 * Ⲇ, Ⲇ * 157);
		ᐃ.bezierCurveTo(97.5 * Ⲇ, 157 * Ⲇ, Ⲇ * 97.5, 157 * Ⲇ, 142 * Ⲇ, 157 * Ⲇ);
		ᐃ.bezierCurveTo(150 * Ⲇ, Ⲇ * 157, 153 * Ⲇ, Ⲇ * 156, Ⲇ * 154, Ⲇ * 142);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, Ⲇ * -ⵠΔⲆΔΔ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 86.5, Ⲇ * 81.5);
		ᐃᐃᐃ(ᐃ, Ⲇ * -66.5, -65.5 * Ⲇ, Ⲇ * 133, 131 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * ΔⲆΔᐃⵠ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 84.5, Ⲇ * 79);
		ᐃᐃᐃ(ᐃ, -50.5 * Ⲇ, Ⲇ * -49, Ⲇ * 101, Ⲇ * 98, ⲆᐃⲆⲆᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆⲆ], ᐃⲆ[2], 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(42 * Ⲇ, Ⲇ * 54);
		ᐃ.bezierCurveTo(Ⲇ * 37, Ⲇ * 48, 39 * Ⲇ, Ⲇ * 44, Ⲇ * 38, Ⲇ * 41);
		ᐃ.bezierCurveTo(42 * Ⲇ, Ⲇ * 40, Ⲇ * 45, Ⲇ * 40, Ⲇ * 50, 41 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 85, 36 * Ⲇ, 98 * Ⲇ, 37 * Ⲇ, 116 * Ⲇ, Ⲇ * 42);
		ᐃ.bezierCurveTo(132 * Ⲇ, Ⲇ * 39, 132 * Ⲇ, Ⲇ * 39, 133 * Ⲇ, Ⲇ * 56);
		ᐃ.bezierCurveTo(Ⲇ * 136, 73 * Ⲇ, 136 * Ⲇ, Ⲇ * 84, Ⲇ * 132, 106 * Ⲇ);
		ᐃ.bezierCurveTo(47 * Ⲇ, 113 * Ⲇ, 85.5 * Ⲇ, 106 * Ⲇ, Ⲇ * 39, 106 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 32, Ⲇ * 81, Ⲇ * 38, Ⲇ * 60, 42 * Ⲇ, Ⲇ * 55);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔΔΔ], ᐃⲆ[5], 5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(28 * Ⲇ, 24 * Ⲇ);
		ᐃ.rotate(ᐃΔΔ);
		ᐃᐃᐃ(ᐃ, -14 * Ⲇ, -14 * Ⲇ, 28 * Ⲇ, Ⲇ * 28, ⲆⵠⲆᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆΔΔ], 5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(143 * Ⲇ, 23 * Ⲇ);
		ᐃ.rotate(ⵠⵠΔΔ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -14, -ⲆⲆⵠⲆⵠⲆⲆ * Ⲇ, 28 * Ⲇ, Ⲇ * 28, Ⲇ * 4);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆΔΔ], 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(55 * Ⲇ, Ⲇ * 80);
		ᐃ.bezierCurveTo(73 * Ⲇ, Ⲇ * 78, Ⲇ * 84, Ⲇ * 74, 100 * Ⲇ, 64 * Ⲇ);
		ᐃ.bezierCurveTo(111 * Ⲇ, Ⲇ * 57, 125 * Ⲇ, Ⲇ * 67, Ⲇ * 108, Ⲇ * 84);
		ᐃ.bezierCurveTo(96 * Ⲇ, Ⲇ * 95, 86 * Ⲇ, Ⲇ * 96, 70 * Ⲇ, 88 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 62.5, Ⲇ * 84, 62.5 * Ⲇ, Ⲇ * 84, Ⲇ * 55, 80 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(17 * Ⲇ, Ⲇ * 112);
		ᐃ.bezierCurveTo(Ⲇ * 14, 146 * Ⲇ, 27 * Ⲇ, Ⲇ * 152, Ⲇ * 37, Ⲇ * 149);
		ᐃ.bezierCurveTo(Ⲇ * 78, Ⲇ * 155, 128 * Ⲇ, Ⲇ * 150, Ⲇ * 146, 150 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 158, 144 * Ⲇ, 158 * Ⲇ, Ⲇ * 121, Ⲇ * 153, Ⲇ * 114);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8], ᐃⲆ[9], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(127 * Ⲇ, 111 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 133, Ⲇ * 136, 115 * Ⲇ, Ⲇ * 149, 88 * Ⲇ, 150 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 119.5, Ⲇ * 151, 119.5 * Ⲇ, 151 * Ⲇ, Ⲇ * 151, Ⲇ * 152);
		ᐃ.bezierCurveTo(Ⲇ * 159, Ⲇ * 136, 155 * Ⲇ, Ⲇ * 126, 154 * Ⲇ, Ⲇ * 113);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⵠᐃΔ]);
		ᐃ.globalAlpha = .5;
		ᐃ.translate(ᐃⲆⵠΔ, Ⲇ * 3);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(15 * Ⲇ, Ⲇ * 117);
		ᐃ.bezierCurveTo(34 * Ⲇ, Ⲇ * 109, Ⲇ * 61, 106 * Ⲇ, Ⲇ * 94, 109 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 126, Ⲇ * 110, 142 * Ⲇ, 113 * Ⲇ, 154 * Ⲇ, 119 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 154, Ⲇ * 123, 154 * Ⲇ, Ⲇ * 123, 154 * Ⲇ, 127 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 127, Ⲇ * 118, Ⲇ * ⵠΔⵠᐃⲆⵠⵠ, 122 * Ⲇ, ⵠⲆΔⲆΔ * Ⲇ, 129 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, Ⲇ * -ⲆΔΔⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 14, Ⲇ * 127);
		ᐃ.bezierCurveTo(Ⲇ * ⵠᐃΔⲆⲆ, Ⲇ * 117, ⵠᐃΔⵠᐃ * Ⲇ, 109 * Ⲇ, 15 * Ⲇ, Ⲇ * 103);
		ᐃ.bezierCurveTo(ᐃⲆᐃⵠⵠᐃⵠ * Ⲇ, 95 * Ⲇ, Ⲇ * 21, 92 * Ⲇ, Ⲇ * 60, 93 * Ⲇ);
		ᐃ.bezierCurveTo(91 * Ⲇ, Ⲇ * 93, Ⲇ * 118, Ⲇ * 93, Ⲇ * 143, 96 * Ⲇ);
		ᐃ.bezierCurveTo(151 * Ⲇ, Ⲇ * 96, 155 * Ⲇ, Ⲇ * 99, 156 * Ⲇ, Ⲇ * 112);
		ᐃ.bezierCurveTo(Ⲇ * 157, 124 * Ⲇ, Ⲇ * 157, 127 * Ⲇ, 156 * Ⲇ, Ⲇ * 128);
		ᐃ.bezierCurveTo(138 * Ⲇ, 112 * Ⲇ, 100 * Ⲇ, Ⲇ * 118, 84 * Ⲇ, 118 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 28, Ⲇ * 118, 20 * Ⲇ, 120 * Ⲇ, 16 * Ⲇ, Ⲇ * 127);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], Ⲇ * 5);
		ᐃ.save();
		ᐃ.translate(27.5 * Ⲇ, 138.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -13.5 * Ⲇ, -14.5 * Ⲇ, Ⲇ * 27, 29 * Ⲇ, 4 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(143.5 * Ⲇ, Ⲇ * 137);
		ᐃᐃᐃ(ᐃ, -13.5 * Ⲇ, -ᐃᐃⵠⵠⲆᐃⵠ * Ⲇ, 27 * Ⲇ, 28 * Ⲇ, Ⲇ * 4);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * ΔΔⵠΔ);
		return ⲆⲆ
	}

	function ΔᐃΔⵠᐃⲆⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 175 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 169;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ΔΔⲆᐃᐃΔⵠ, Ⲇ * 112);
		ᐃ.bezierCurveTo(Ⲇ * ᐃᐃⲆⲆⵠΔⵠ, 146 * Ⲇ, Ⲇ * 27, Ⲇ * 152, Ⲇ * 37, 149 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 78, 155 * Ⲇ, Ⲇ * 128, 150 * Ⲇ, Ⲇ * 146, 150 * Ⲇ);
		ᐃ.bezierCurveTo(158 * Ⲇ, Ⲇ * 144, Ⲇ * 158, Ⲇ * 121, 153 * Ⲇ, Ⲇ * 114);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⲆᐃ], ᐃⲆ[9], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 127, Ⲇ * 111);
		ᐃ.bezierCurveTo(Ⲇ * 133, 136 * Ⲇ, Ⲇ * 115, 149 * Ⲇ, 88 * Ⲇ, 150 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 119.5, Ⲇ * 151, Ⲇ * 119.5, 151 * Ⲇ, Ⲇ * 151, Ⲇ * 152);
		ᐃ.bezierCurveTo(159 * Ⲇ, 136 * Ⲇ, Ⲇ * 155, Ⲇ * 126, 154 * Ⲇ, Ⲇ * 113);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⵠⵠᐃⵠΔ]);
		ᐃ.globalAlpha = .5;
		ᐃ.translate(ⵠⵠΔΔ, Ⲇ * 3);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 15, Ⲇ * 117);
		ᐃ.bezierCurveTo(Ⲇ * 34, Ⲇ * 109, 61 * Ⲇ, Ⲇ * 106, Ⲇ * 94, Ⲇ * 109);
		ᐃ.bezierCurveTo(Ⲇ * 126, 110 * Ⲇ, Ⲇ * 142, 113 * Ⲇ, 154 * Ⲇ, Ⲇ * 119);
		ᐃ.bezierCurveTo(154 * Ⲇ, 123 * Ⲇ, Ⲇ * 154, Ⲇ * 123, Ⲇ * 154, 127 * Ⲇ);
		ᐃ.bezierCurveTo(127 * Ⲇ, Ⲇ * 118, Ⲇ * ΔⲆΔⵠⲆ, Ⲇ * 122, 18 * Ⲇ, 129 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ᐃⲆⲆ;
		ᐃ.translate(0, -ᐃΔΔⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(14 * Ⲇ, Ⲇ * 127);
		ᐃ.bezierCurveTo(13 * Ⲇ, Ⲇ * 117, 12 * Ⲇ, Ⲇ * 109, Ⲇ * ΔⲆⵠⲆⵠᐃⵠ, Ⲇ * 103);
		ᐃ.bezierCurveTo(Ⲇ * 16, Ⲇ * 95, 21 * Ⲇ, 92 * Ⲇ, 60 * Ⲇ, Ⲇ * 93);
		ᐃ.bezierCurveTo(Ⲇ * 91, 93 * Ⲇ, 118 * Ⲇ, 93 * Ⲇ, 143 * Ⲇ, 96 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 151, 96 * Ⲇ, 155 * Ⲇ, 99 * Ⲇ, Ⲇ * 156, 112 * Ⲇ);
		ᐃ.bezierCurveTo(157 * Ⲇ, Ⲇ * 124, Ⲇ * 157, Ⲇ * 127, 156 * Ⲇ, Ⲇ * 128);
		ᐃ.bezierCurveTo(Ⲇ * 138, Ⲇ * 112, Ⲇ * 100, 118 * Ⲇ, Ⲇ * 84, Ⲇ * 118);
		ᐃ.bezierCurveTo(28 * Ⲇ, 118 * Ⲇ, ⵠΔⲆΔⵠ * Ⲇ, 120 * Ⲇ, Ⲇ * ΔⵠⵠΔⵠⵠᐃ, 127 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆⲆⲆ], ᐃⲆ[ⵠⵠΔΔⲆ], 5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 27.5, 138.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -13.5 * Ⲇ, -14.5 * Ⲇ, 27 * Ⲇ, Ⲇ * 29, Ⲇ * 4);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ᐃΔⵠΔᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(143.5 * Ⲇ, Ⲇ * 137);
		ᐃᐃᐃ(ᐃ, -13.5 * Ⲇ, Ⲇ * -14, 27 * Ⲇ, 28 * Ⲇ, ⲆⵠⲆᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔᐃ], ᐃⲆ[2], Ⲇ * 5);
		return ⲆⲆ
	}
	if (ⵠΔΔⲆⲆⵠᐃᐃⵠ.ⵠΔⲆΔΔⵠΔ) {
		var ⲆⵠⲆⵠΔⵠⵠΔΔ = ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].acos;
		ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].acos = ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].asin;
		ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].asin = ⲆⵠⲆⵠΔⵠⵠΔΔ;
		var ΔᐃⵠΔᐃⵠΔⵠΔ = ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].acos;
		ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].acos = ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].asin;
		ⵠΔΔⲆⲆⵠᐃᐃⵠ["Math"].asin = ΔᐃⵠΔᐃⵠΔⵠΔ
	}

	function ᐃᐃⵠΔⵠᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 304;
		ⲆⲆ.height = Ⲇ * 278;
		ᐃ.translate(Ⲇ * 10, Ⲇ * 25);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(128 * Ⲇ, Ⲇ * 137);
		ᐃ.bezierCurveTo(Ⲇ * 155, Ⲇ * 144, Ⲇ * 223, Ⲇ * 143, ⲆⲆΔᐃⵠᐃᐃ * Ⲇ, 122 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 249, Ⲇ * 180, Ⲇ * 210, Ⲇ * 227, Ⲇ * 164, 242 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 74, 213 * Ⲇ, 99 * Ⲇ, Ⲇ * 166, 127 * Ⲇ, Ⲇ * 138);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 284, 52 * Ⲇ);
		ᐃ.bezierCurveTo(126 * Ⲇ, Ⲇ * 112, Ⲇ * 89, 177 * Ⲇ, Ⲇ * 170, 241 * Ⲇ);
		ᐃ.bezierCurveTo(103 * Ⲇ, 275 * Ⲇ, ᐃⵠⲆᐃΔ * Ⲇ, Ⲇ * 239, ᐃⲆⵠⵠΔ * Ⲇ, 159 * Ⲇ);
		ᐃ.bezierCurveTo(ⵠⵠⲆⵠ * Ⲇ, 76 * Ⲇ, 75 * Ⲇ, ⲆⵠⲆⲆⲆ * Ⲇ, 165 * Ⲇ, Ⲇ * 13);
		ᐃ.bezierCurveTo(Ⲇ * 233, Ⲇ * 15, 260 * Ⲇ, Ⲇ * 33, Ⲇ * 284, 52 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(-ⲆⵠΔΔⵠ * Ⲇ, Ⲇ * -25);
		ᐃ.globalAlpha = ⲆⵠⲆ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(128 * Ⲇ, Ⲇ * 137);
		ᐃ.bezierCurveTo(Ⲇ * 155, Ⲇ * 144, Ⲇ * 223, 143 * Ⲇ, ΔᐃⵠⲆΔᐃⵠ * Ⲇ, 122 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 249, Ⲇ * 180, Ⲇ * 210, 227 * Ⲇ, 164 * Ⲇ, Ⲇ * 242);
		ᐃ.bezierCurveTo(74 * Ⲇ, 213 * Ⲇ, 99 * Ⲇ, Ⲇ * 166, Ⲇ * 127, 138 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⲆ], ᐃⲆ[ⵠᐃⵠⲆ], Ⲇ * 15);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(284 * Ⲇ, 52 * Ⲇ);
		ᐃ.bezierCurveTo(126 * Ⲇ, 112 * Ⲇ, 89 * Ⲇ, 177 * Ⲇ, 170 * Ⲇ, 241 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 103, Ⲇ * 275, 20 * Ⲇ, 239 * Ⲇ, Ⲇ * ᐃⵠⵠᐃⲆᐃⲆ, Ⲇ * 159);
		ᐃ.bezierCurveTo(Ⲇ * ⲆΔⵠⵠᐃ, Ⲇ * 76, 75 * Ⲇ, Ⲇ * ᐃⵠⲆⲆ, 165 * Ⲇ, ⲆⵠⵠᐃⵠΔⵠ * Ⲇ);
		ᐃ.bezierCurveTo(233 * Ⲇ, ⲆⵠⲆΔⵠ * Ⲇ, Ⲇ * 260, 33 * Ⲇ, 284 * Ⲇ, 52 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔᐃΔΔ], Ⲇ * 15);
		return ⲆⲆ
	}

	function ΔΔⲆΔΔᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 135;
		ⲆⲆ.height = 120 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(3.5 * Ⲇ, 55.25 * Ⲇ);
		ᐃ.bezierCurveTo(3.5 * Ⲇ, 114.25 * Ⲇ, 2.5 * Ⲇ, 109.25 * Ⲇ, Ⲇ * 3.5, Ⲇ * 112.25);
		ᐃ.bezierCurveTo(Ⲇ * 5.5, Ⲇ * 119.25, Ⲇ * 8.5, Ⲇ * 119.25, Ⲇ * 11.5, Ⲇ * 119.25);
		ᐃ.bezierCurveTo(Ⲇ * 15.5, Ⲇ * 114.25, Ⲇ * 13.5, 95.25 * Ⲇ, 14.5 * Ⲇ, Ⲇ * 82.25);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠⲆ], ᐃⲆ[ⵠΔΔ], Ⲇ * ⲆᐃᐃΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(6.5 * Ⲇ, Ⲇ * 43.25);
		ᐃ.bezierCurveTo(3.5 * Ⲇ, 27.25 * Ⲇ, Ⲇ * 7.5, 20.25 * Ⲇ, 25.5 * Ⲇ, 11.25 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 45.5, -.75 * Ⲇ, 73.5 * Ⲇ, 1.25 * Ⲇ, Ⲇ * 107.5, 10.25 * Ⲇ);
		ᐃ.bezierCurveTo(131.5 * Ⲇ, 21.25 * Ⲇ, 125.5 * Ⲇ, 34.25 * Ⲇ, Ⲇ * 125.5, 36.25 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ], ᐃⲆ[1], Ⲇ * ⵠᐃᐃⲆⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 120.5, Ⲇ * 62.25);
		ᐃ.bezierCurveTo(121.5 * Ⲇ, 95.25 * Ⲇ, Ⲇ * 120.5, Ⲇ * 80.25, 120.5 * Ⲇ, 100.25 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 118.5, 119.25 * Ⲇ, 123.5 * Ⲇ, Ⲇ * 118.25, 129.5 * Ⲇ, 113.25 * Ⲇ);
		ᐃ.bezierCurveTo(133.5 * Ⲇ, Ⲇ * 107.25, 130.5 * Ⲇ, Ⲇ * 97.25, 130.5 * Ⲇ, Ⲇ * 87.25);
		ᐃ.bezierCurveTo(129.5 * Ⲇ, Ⲇ * 56.25, 130 * Ⲇ, 70.75 * Ⲇ, Ⲇ * 129.5, Ⲇ * 54.25);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠⲆ], ᐃⲆ[1], Ⲇ * 7);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 17.5, 27 * Ⲇ);
		ᐃ.bezierCurveTo(48.5 * Ⲇ, Ⲇ * ⲆΔⵠᐃⵠ, Ⲇ * 93.5, 14 * Ⲇ, 118.5 * Ⲇ, 26 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 132.5, 35 * Ⲇ, 133.5 * Ⲇ, 52 * Ⲇ, Ⲇ * 132.5, Ⲇ * 68);
		ᐃ.bezierCurveTo(Ⲇ * 125.5, Ⲇ * 87, Ⲇ * 116.5, 84 * Ⲇ, 96.5 * Ⲇ, 75 * Ⲇ);
		ᐃ.bezierCurveTo(60.5 * Ⲇ, 66 * Ⲇ, 52.5 * Ⲇ, Ⲇ * 74, 37.5 * Ⲇ, 78 * Ⲇ);
		ᐃ.bezierCurveTo(2.5 * Ⲇ, 86 * Ⲇ, 3.5 * Ⲇ, 78 * Ⲇ, Ⲇ * 1.5, 61 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 1.5, Ⲇ * 37, 9.5 * Ⲇ, 32 * Ⲇ, 15.5 * Ⲇ, Ⲇ * 28);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆᐃⲆ], ᐃⲆ[3], 7 * Ⲇ);
		return ⲆⲆ
	}

	function ⲆΔⵠΔⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 90;
		ⲆⲆ.height = 98 * Ⲇ;
		ᐃ.translate(ᐃΔΔ, ⲆⵠⵠⲆ * Ⲇ);
		if (Δᐃ === ⲆⲆᐃΔ) {
			ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
			ᐃ.save();
			ᐃ.translate(44 * Ⲇ, 50 * Ⲇ);
			ᐃ.rotate(1.4);
			ᐃⵠΔⵠ(ᐃ, ⵠⵠᐃΔᐃ, Ⲇ * 41, 10 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[0])
		}
		ᐃ.globalAlpha = ᐃΔⵠΔ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 44, Ⲇ * 44);
		ᐃ.rotate(1.4);
		ᐃⵠΔⵠ(ᐃ, 7, Ⲇ * 41, 10 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⵠ], ᐃⲆ[2], 4 * Ⲇ);
		ᐃⵠΔⵠ(ᐃ, 7, Ⲇ * 35, ᐃⲆⵠΔΔ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔΔ], ᐃⲆ[ⵠΔΔⵠ], Ⲇ * 4);
		ᐃⵠΔⵠ(ᐃ, ⵠⵠᐃΔᐃ, 23 * Ⲇ, Ⲇ * ⲆⲆⵠᐃⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔᐃⵠ]);
		ᐃ.save();
		ᐃ.translate(45 * Ⲇ, 45 * Ⲇ);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, -ⲆⲆΔᐃⲆ * Ⲇ, -25.5 * Ⲇ, 18 * Ⲇ, Ⲇ * 51, Ⲇ * 30);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ΔᐃΔΔ], Ⲇ * 2);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 45, Ⲇ * 45);
		ᐃ.rotate(ΔᐃΔ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -26, -ΔΔΔᐃΔΔΔ * Ⲇ, Ⲇ * 52, 18 * Ⲇ, 30 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[4], Ⲇ * ⲆᐃᐃΔ);
		ᐃΔⵠ(ᐃ, Ⲇ * 45, 29 * Ⲇ, Ⲇ * ⵠⵠᐃΔᐃ);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃΔⵠ(ᐃ, Ⲇ * 45, Ⲇ * 61, 7 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⲆⵠ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 28, 45 * Ⲇ, Ⲇ * 7);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⲆ]);
		ᐃΔⵠ(ᐃ, 62 * Ⲇ, Ⲇ * 45, Ⲇ * ⵠⵠⵠⲆΔ);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		return ⲆⲆ
	}

	function ᐃⲆⵠⲆⲆΔᐃΔΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 130;
		var ⲆΔΔ = Ⲇ * 142;
		var ΔΔ = Δⵠᐃ / Δⵠᐃᐃ;
		var ΔΔⵠ = ⲆΔΔ / 2;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃΔⵠ(ᐃ, ΔΔ, ΔΔⵠ, Ⲇ * 40, ᐃⲆⵠΔ);
		ᐃⵠ(ᐃ, ᐃⵠⲆⵠⲆ, ᐃⲆ[ⵠᐃⵠⵠ], 7 * Ⲇ);
		ᐃΔⵠ(ᐃ, ΔΔ, ΔΔⵠ, Ⲇ * 30, ⲆΔⵠΔ);
		ᐃⵠ(ᐃ, ⵠᐃΔⵠΔ, ᐃⲆ[Ⲇᐃⵠⵠ], ⲆΔⲆᐃⲆ * Ⲇ);
		ᐃΔⵠ(ᐃ, ΔΔ, ΔΔⵠ, Ⲇ * 20, ΔᐃΔ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]);
		return ⲆⲆ
	}

	function ⲆⲆΔⲆⲆᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 300;
		ⲆⲆ.height = Ⲇ * 300;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.save();
		ᐃ.translate(150 * Ⲇ, Ⲇ * 160);
		ᐃ.rotate(6.28);
		ᐃⵠΔⵠ(ᐃ, ⵠΔΔⲆΔ, Ⲇ * 146, 30 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔᐃ]);
		ᐃ.globalAlpha = 1;
		ᐃ.save();
		ᐃ.translate(150 * Ⲇ, Ⲇ * 150);
		ᐃ.rotate(6.28);
		ᐃⵠΔⵠ(ᐃ, ⵠΔΔⲆΔ, 146 * Ⲇ, 30 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔᐃ], ᐃⲆ[2], Ⲇ * 8);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 150, Ⲇ * 150);
		ᐃ.rotate(Δⵠⵠ);
		ᐃⵠΔⵠ(ᐃ, 6, Ⲇ * 105, 30 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆΔ], ᐃⲆ[3], 8 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(150 * Ⲇ, 150 * Ⲇ);
		ᐃ.rotate(ⵠᐃⵠⵠ);
		ᐃⵠΔⵠ(ᐃ, 6, Ⲇ * 66, Ⲇ * 30);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[2], ᐃΔⲆΔΔ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(150 * Ⲇ, Ⲇ * 150);
		ᐃ.rotate(0);
		ᐃⵠΔⵠ(ᐃ, 6, 31 * Ⲇ, Ⲇ * 30);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[6], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(150 * Ⲇ, 207 * Ⲇ);
		ᐃ.bezierCurveTo(150 * Ⲇ, 151 * Ⲇ, 150 * Ⲇ, Ⲇ * 101, 150 * Ⲇ, 94 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆᐃⵠⲆⲆ, ᐃⲆ[Δⵠᐃᐃ], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(118 * Ⲇ, Ⲇ * 100);
		ᐃ.bezierCurveTo(Ⲇ * 118, 205 * Ⲇ, 118 * Ⲇ, Ⲇ * 207, Ⲇ * 118, 200 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆᐃΔⵠ, ᐃⲆ[ᐃΔⲆⵠ], Ⲇ * ⲆᐃⲆΔⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(183 * Ⲇ, Ⲇ * ⵠᐃⵠⲆⲆ);
		ᐃ.bezierCurveTo(Ⲇ * 183, 203 * Ⲇ, 183 * Ⲇ, Ⲇ * 203, 183 * Ⲇ, 200 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠⵠⵠⲆⵠ, ᐃⲆ[2], Ⲇ * 8);
		return ⲆⲆ
	}
	const ⲆⲆⲆᐃᐃ = ⲆΔⲆⲆ;

	function ΔⵠΔᐃᐃⲆᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 81 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 626;
		ᐃ.translate(Ⲇ * ᐃΔⲆΔᐃ, 20 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠΔᐃ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(55 * Ⲇ, Ⲇ * 565);
		ᐃ.bezierCurveTo(Ⲇ * 56, Ⲇ * 586, Ⲇ * 53, 591 * Ⲇ, 40 * Ⲇ, Ⲇ * 592);
		ᐃ.bezierCurveTo(Ⲇ * 28, Ⲇ * 591, 27 * Ⲇ, 583 * Ⲇ, 28 * Ⲇ, 557 * Ⲇ);
		ᐃ.bezierCurveTo(27.5 * Ⲇ, Ⲇ * 346, 27.5 * Ⲇ, 346 * Ⲇ, Ⲇ * 27, Ⲇ * 135);
		ᐃ.bezierCurveTo(Ⲇ * 26, 74 * Ⲇ, Ⲇ * 36, Ⲇ * 26, Ⲇ * 41, 15 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 54, Ⲇ * 51, Ⲇ * 54, Ⲇ * 81, 55 * Ⲇ, 128 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(-ᐃᐃΔΔⲆ * Ⲇ, Ⲇ * -ᐃⵠⲆᐃΔ);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 55, 565 * Ⲇ);
		ᐃ.bezierCurveTo(56 * Ⲇ, Ⲇ * 586, Ⲇ * 53, 591 * Ⲇ, 40 * Ⲇ, 592 * Ⲇ);
		ᐃ.bezierCurveTo(28 * Ⲇ, 591 * Ⲇ, 27 * Ⲇ, Ⲇ * 583, 28 * Ⲇ, Ⲇ * 557);
		ᐃ.bezierCurveTo(Ⲇ * 27.5, 346 * Ⲇ, Ⲇ * 27.5, Ⲇ * 346, 27 * Ⲇ, 135 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 26, Ⲇ * 74, Ⲇ * 36, 26 * Ⲇ, 41 * Ⲇ, Ⲇ * 15);
		ᐃ.bezierCurveTo(54 * Ⲇ, Ⲇ * 51, Ⲇ * 54, 81 * Ⲇ, Ⲇ * 55, 128 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃ], ᐃⲆ[ᐃᐃᐃᐃ], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(27 * Ⲇ, Ⲇ * 129);
		ᐃ.bezierCurveTo(Ⲇ * 32, Ⲇ * 135, Ⲇ * 48, Ⲇ * 136, 53 * Ⲇ, Ⲇ * 129);
		ᐃ.bezierCurveTo(56 * Ⲇ, 97 * Ⲇ, 53 * Ⲇ, 82 * Ⲇ, Ⲇ * 52, 64 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 49, 33 * Ⲇ, 44 * Ⲇ, 27 * Ⲇ, 41 * Ⲇ, 21 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 31, Ⲇ * 40, Ⲇ * 28, Ⲇ * 84, 27 * Ⲇ, 127 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(55 * Ⲇ, 565 * Ⲇ);
		ᐃ.bezierCurveTo(56 * Ⲇ, Ⲇ * 586, 53 * Ⲇ, 591 * Ⲇ, Ⲇ * 40, Ⲇ * 592);
		ᐃ.bezierCurveTo(Ⲇ * 28, 591 * Ⲇ, Ⲇ * 27, Ⲇ * 583, 28 * Ⲇ, 557 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 27.5, Ⲇ * 346, Ⲇ * 27.5, 346 * Ⲇ, Ⲇ * 27, 135 * Ⲇ);
		ᐃ.bezierCurveTo(26 * Ⲇ, Ⲇ * 74, Ⲇ * 36, Ⲇ * 26, 41 * Ⲇ, ⲆⵠⲆΔⵠ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 54, Ⲇ * 51, Ⲇ * 54, Ⲇ * 81, 55 * Ⲇ, Ⲇ * 128);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃⵠΔⲆ], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 28, Ⲇ * 475);
		ᐃ.bezierCurveTo(Ⲇ * 38, Ⲇ * 482, Ⲇ * 48, 480 * Ⲇ, 54 * Ⲇ, 474 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 54, 509.5 * Ⲇ, Ⲇ * 54, Ⲇ * 509.5, Ⲇ * 54, Ⲇ * 545);
		ᐃ.bezierCurveTo(46 * Ⲇ, Ⲇ * 554, 36 * Ⲇ, Ⲇ * 552, 28 * Ⲇ, Ⲇ * 545);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⵠΔΔΔ], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(28 * Ⲇ, 496 * Ⲇ);
		ᐃ.bezierCurveTo(39 * Ⲇ, Ⲇ * 506, Ⲇ * 49, 503 * Ⲇ, Ⲇ * 54, Ⲇ * 496);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[5], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(28 * Ⲇ, 521 * Ⲇ);
		ᐃ.bezierCurveTo(41 * Ⲇ, 529 * Ⲇ, Ⲇ * 49, Ⲇ * 524, Ⲇ * 54, 520 * Ⲇ);
		ᐃⵠ(ᐃ, ⲆᐃⵠⲆⲆ, ᐃⲆ[ⵠⵠΔΔⲆ], ΔΔᐃΔΔ * Ⲇ);
		return ⲆⲆ
	}
	const ⵠᐃᐃΔᐃ = ⲆΔⵠⵠᐃ;

	function ⲆΔᐃⲆΔᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 202 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 202;
		ᐃ.translate(2 * Ⲇ, Ⲇ * ᐃⲆΔ);
		ᐃ.globalAlpha = .3;
		ᐃΔⵠ(ᐃ, Ⲇ * 98, 99 * Ⲇ, Ⲇ * ᐃᐃⲆⵠΔ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, 98 * Ⲇ, 99 * Ⲇ, 90 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		return ⲆⲆ
	}

	function ᐃⵠⲆᐃᐃⵠⵠ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 253;
		ⲆⲆ.height = 260 * Ⲇ;
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, 126.5 * Ⲇ, 134 * Ⲇ, 119 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ᐃⵠⵠ;
		ᐃΔⵠ(ᐃ, 126.5 * Ⲇ, Ⲇ * 124, Ⲇ * 119);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * ᐃᐃⲆⵠ);
		ᐃΔⵠ(ᐃ, Ⲇ * 126.5, Ⲇ * 127, Ⲇ * 100);
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, 126.5 * Ⲇ, Ⲇ * 135, Ⲇ * 81);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⲆΔᐃΔ;
		ᐃΔⵠ(ᐃ, 126.5 * Ⲇ, 125 * Ⲇ, Ⲇ * 84);
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, Ⲇ * 126.5, Ⲇ * 125, Ⲇ * 61);
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[ⵠⵠᐃΔᐃ], Ⲇ * ΔᐃΔⲆΔ);
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, Ⲇ * 126.5, 134 * Ⲇ, Ⲇ * 40);
		ᐃⵠ(ᐃ, ᐃⲆ[8]);
		ᐃ.globalAlpha = 1;
		ᐃΔⵠ(ᐃ, Ⲇ * 126.5, Ⲇ * 125, Ⲇ * 40);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⲆⲆᐃ]);
		return ⲆⲆ
	}

	function ⲆⵠⲆᐃⲆᐃᐃ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 271;
		ⲆⲆ.height = 366 * Ⲇ;
		ᐃ.globalAlpha = .5;
		ᐃ.translate(ⵠᐃΔ, 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 133, 99 * Ⲇ);
		ᐃ.bezierCurveTo(186 * Ⲇ, 123 * Ⲇ, Ⲇ * 199, Ⲇ * 152, 209 * Ⲇ, Ⲇ * 169);
		ᐃ.bezierCurveTo(Ⲇ * 228, 205 * Ⲇ, 224 * Ⲇ, Ⲇ * 245, Ⲇ * 190, 276 * Ⲇ);
		ᐃ.bezierCurveTo(161 * Ⲇ, 296 * Ⲇ, 99 * Ⲇ, Ⲇ * 292, Ⲇ * 79, 274 * Ⲇ);
		ᐃ.bezierCurveTo(49 * Ⲇ, 253 * Ⲇ, 47 * Ⲇ, 214 * Ⲇ, 50 * Ⲇ, Ⲇ * 197);
		ᐃ.bezierCurveTo(61 * Ⲇ, 143 * Ⲇ, Ⲇ * 102, Ⲇ * 113, Ⲇ * 131, 99 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 73, Ⲇ * 270);
		ᐃ.bezierCurveTo(79 * Ⲇ, Ⲇ * 280, Ⲇ * 77, 280 * Ⲇ, Ⲇ * 78, Ⲇ * 287);
		ᐃ.bezierCurveTo(Ⲇ * 78, Ⲇ * 290, 83 * Ⲇ, 291 * Ⲇ, Ⲇ * 82, 299 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 81, Ⲇ * 301, 87 * Ⲇ, Ⲇ * 301, Ⲇ * 92, Ⲇ * 314);
		ᐃ.bezierCurveTo(Ⲇ * 94, 319 * Ⲇ, 100 * Ⲇ, 321 * Ⲇ, 107 * Ⲇ, Ⲇ * 320);
		ᐃ.bezierCurveTo(111 * Ⲇ, 323 * Ⲇ, Ⲇ * 114, Ⲇ * 324, Ⲇ * 119, 320 * Ⲇ);
		ᐃ.bezierCurveTo(137 * Ⲇ, Ⲇ * 321, 146 * Ⲇ, Ⲇ * 323, 139 * Ⲇ, Ⲇ * 320);
		ᐃ.bezierCurveTo(141 * Ⲇ, Ⲇ * 324, 150 * Ⲇ, 324 * Ⲇ, 153 * Ⲇ, Ⲇ * 320);
		ᐃ.bezierCurveTo(Ⲇ * 168, 319 * Ⲇ, Ⲇ * 171, 316 * Ⲇ, 173 * Ⲇ, Ⲇ * 307);
		ᐃ.bezierCurveTo(180 * Ⲇ, 305 * Ⲇ, Ⲇ * 180, Ⲇ * 301, 178 * Ⲇ, Ⲇ * 296);
		ᐃ.bezierCurveTo(183 * Ⲇ, 296 * Ⲇ, Ⲇ * 185, Ⲇ * 289, Ⲇ * 188, 279 * Ⲇ);
		ᐃ.bezierCurveTo(171 * Ⲇ, 286 * Ⲇ, 149 * Ⲇ, Ⲇ * 290, 132 * Ⲇ, 289 * Ⲇ);
		ᐃ.bezierCurveTo(101 * Ⲇ, Ⲇ * 290, Ⲇ * 86, 280 * Ⲇ, 74 * Ⲇ, 271 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 76, 252 * Ⲇ);
		ᐃ.bezierCurveTo(85 * Ⲇ, 294 * Ⲇ, Ⲇ * 96, Ⲇ * 314, Ⲇ * 103, Ⲇ * 314);
		ᐃ.bezierCurveTo(106 * Ⲇ, Ⲇ * 316, 151 * Ⲇ, Ⲇ * 314, Ⲇ * 156, Ⲇ * 314);
		ᐃ.bezierCurveTo(Ⲇ * 169, 317 * Ⲇ, 182 * Ⲇ, 285 * Ⲇ, Ⲇ * 191, 256 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 134.5, Ⲇ * 254, Ⲇ * 134.5, 254 * Ⲇ, 78 * Ⲇ, Ⲇ * 252);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(84 * Ⲇ, 257 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 122, Ⲇ * 273, Ⲇ * 146, 268 * Ⲇ, Ⲇ * 179, Ⲇ * 261);
		ᐃ.bezierCurveTo(190 * Ⲇ, 258 * Ⲇ, Ⲇ * 187, Ⲇ * 266, 178 * Ⲇ, Ⲇ * 272);
		ᐃ.bezierCurveTo(Ⲇ * 160, 284 * Ⲇ, 123 * Ⲇ, Ⲇ * 282, Ⲇ * 100, Ⲇ * 277);
		ᐃ.bezierCurveTo(Ⲇ * 73, 260 * Ⲇ, 79 * Ⲇ, Ⲇ * 257, 84 * Ⲇ, Ⲇ * 257);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 125, 65 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 133, Ⲇ * 45, Ⲇ * 136, 42 * Ⲇ, Ⲇ * 141, 55 * Ⲇ);
		ᐃ.bezierCurveTo(151 * Ⲇ, 96 * Ⲇ, Ⲇ * 164, Ⲇ * 117, Ⲇ * 175, Ⲇ * 134);
		ᐃ.bezierCurveTo(203 * Ⲇ, 181 * Ⲇ, Ⲇ * 207, 182 * Ⲇ, 208 * Ⲇ, 215 * Ⲇ);
		ᐃ.bezierCurveTo(206 * Ⲇ, Ⲇ * 240, Ⲇ * 205, 246 * Ⲇ, 184 * Ⲇ, Ⲇ * 258);
		ᐃ.bezierCurveTo(Ⲇ * 161, 267 * Ⲇ, Ⲇ * 131, 272 * Ⲇ, Ⲇ * 86, 258 * Ⲇ);
		ᐃ.bezierCurveTo(67 * Ⲇ, Ⲇ * 252, Ⲇ * 68, Ⲇ * 239, 64 * Ⲇ, 216 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 62, 194 * Ⲇ, 72 * Ⲇ, Ⲇ * 169, Ⲇ * 92, 142 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 106, 121 * Ⲇ, 114 * Ⲇ, 101 * Ⲇ, Ⲇ * 125, 65 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 115, Ⲇ * 37);
		ᐃ.bezierCurveTo(Ⲇ * 116, 28 * Ⲇ, 119 * Ⲇ, Ⲇ * 27, Ⲇ * 126, Ⲇ * 37);
		ᐃ.bezierCurveTo(Ⲇ * 134, Ⲇ * 48, 134 * Ⲇ, Ⲇ * 49, 132 * Ⲇ, Ⲇ * 59);
		ᐃ.bezierCurveTo(Ⲇ * 131, Ⲇ * 67, Ⲇ * 127, Ⲇ * 65, Ⲇ * 120, Ⲇ * 56);
		ᐃ.bezierCurveTo(Ⲇ * 114, 49 * Ⲇ, Ⲇ * 113, 43 * Ⲇ, 115 * Ⲇ, 38 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(146 * Ⲇ, Ⲇ * 34);
		ᐃ.bezierCurveTo(152 * Ⲇ, Ⲇ * 28, 155 * Ⲇ, Ⲇ * 27, 157 * Ⲇ, Ⲇ * 39);
		ᐃ.bezierCurveTo(157 * Ⲇ, Ⲇ * 45, 157 * Ⲇ, 49 * Ⲇ, Ⲇ * 150, Ⲇ * 56);
		ᐃ.bezierCurveTo(Ⲇ * 141, Ⲇ * 66, 138 * Ⲇ, 66 * Ⲇ, 138 * Ⲇ, Ⲇ * 57);
		ᐃ.bezierCurveTo(137 * Ⲇ, Ⲇ * 50, Ⲇ * 137, 47 * Ⲇ, Ⲇ * 141, Ⲇ * 42);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 143, Ⲇ * 69);
		ᐃ.bezierCurveTo(148 * Ⲇ, 56 * Ⲇ, 156 * Ⲇ, Ⲇ * 50, 158 * Ⲇ, 58 * Ⲇ);
		ᐃ.bezierCurveTo(159 * Ⲇ, Ⲇ * 64, Ⲇ * 160, 67 * Ⲇ, Ⲇ * 153, Ⲇ * 77);
		ᐃ.bezierCurveTo(Ⲇ * 148, Ⲇ * 83, 145 * Ⲇ, 84 * Ⲇ, 143 * Ⲇ, Ⲇ * 77);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 149, Ⲇ * 92);
		ᐃ.bezierCurveTo(149 * Ⲇ, 89 * Ⲇ, Ⲇ * 151, Ⲇ * 84, 156 * Ⲇ, Ⲇ * 79);
		ᐃ.bezierCurveTo(Ⲇ * 161, Ⲇ * 73, Ⲇ * 163, Ⲇ * 78, 162 * Ⲇ, Ⲇ * 86);
		ᐃ.bezierCurveTo(Ⲇ * 161, Ⲇ * 91, 155 * Ⲇ, Ⲇ * 99, Ⲇ * 152, Ⲇ * 98);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(111 * Ⲇ, 61 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 114, 51 * Ⲇ, 117 * Ⲇ, Ⲇ * 51, Ⲇ * 124, Ⲇ * 64);
		ᐃ.bezierCurveTo(Ⲇ * 128, 68 * Ⲇ, 128 * Ⲇ, 76 * Ⲇ, 126 * Ⲇ, 79 * Ⲇ);
		ᐃ.bezierCurveTo(123 * Ⲇ, 84 * Ⲇ, 122 * Ⲇ, Ⲇ * 82, 115 * Ⲇ, Ⲇ * 74);
		ᐃ.bezierCurveTo(Ⲇ * 112, 67 * Ⲇ, Ⲇ * 115, 74 * Ⲇ, Ⲇ * 115, Ⲇ * 74);
		ᐃ.bezierCurveTo(Ⲇ * 111, Ⲇ * 68, Ⲇ * 111, 66 * Ⲇ, Ⲇ * 111, Ⲇ * 62);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(107 * Ⲇ, 81 * Ⲇ);
		ᐃ.bezierCurveTo(108 * Ⲇ, 74 * Ⲇ, 112 * Ⲇ, 73 * Ⲇ, Ⲇ * 118, Ⲇ * 84);
		ᐃ.bezierCurveTo(122 * Ⲇ, 88 * Ⲇ, 122 * Ⲇ, 93 * Ⲇ, Ⲇ * 121, 98 * Ⲇ);
		ᐃ.bezierCurveTo(114 * Ⲇ, Ⲇ * 98, Ⲇ * 113, 98 * Ⲇ, Ⲇ * 109, 90 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 107, 87 * Ⲇ, 106 * Ⲇ, Ⲇ * 85, Ⲇ * 107, 82 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔ]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(ⵠⵠΔΔ, Ⲇ * -10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 133, 99 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 186, Ⲇ * 123, 199 * Ⲇ, Ⲇ * 152, Ⲇ * 209, Ⲇ * 169);
		ᐃ.bezierCurveTo(Ⲇ * 228, 205 * Ⲇ, Ⲇ * 224, Ⲇ * 245, 190 * Ⲇ, Ⲇ * 276);
		ᐃ.bezierCurveTo(Ⲇ * 161, 296 * Ⲇ, Ⲇ * 99, Ⲇ * 292, 79 * Ⲇ, Ⲇ * 274);
		ᐃ.bezierCurveTo(Ⲇ * 49, 253 * Ⲇ, Ⲇ * 47, Ⲇ * 214, Ⲇ * 50, 197 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 61, Ⲇ * 143, 102 * Ⲇ, Ⲇ * 113, 131 * Ⲇ, Ⲇ * 99);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ], ᐃⲆ[ⵠⵠⵠⵠ], Ⲇ * ⵠⲆΔⲆᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 73, 270 * Ⲇ);
		ᐃ.bezierCurveTo(79 * Ⲇ, 280 * Ⲇ, 77 * Ⲇ, Ⲇ * 280, 78 * Ⲇ, Ⲇ * 287);
		ᐃ.bezierCurveTo(Ⲇ * 78, 290 * Ⲇ, 83 * Ⲇ, Ⲇ * 291, Ⲇ * 82, 299 * Ⲇ);
		ᐃ.bezierCurveTo(81 * Ⲇ, 301 * Ⲇ, 87 * Ⲇ, Ⲇ * 301, Ⲇ * 92, 314 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 94, Ⲇ * 319, Ⲇ * 100, 321 * Ⲇ, Ⲇ * 107, Ⲇ * 320);
		ᐃ.bezierCurveTo(Ⲇ * 111, Ⲇ * 323, 114 * Ⲇ, Ⲇ * 324, 119 * Ⲇ, Ⲇ * 320);
		ᐃ.bezierCurveTo(Ⲇ * 137, Ⲇ * 321, Ⲇ * 146, 323 * Ⲇ, Ⲇ * 139, 320 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 141, Ⲇ * 324, Ⲇ * 150, Ⲇ * 324, 153 * Ⲇ, 320 * Ⲇ);
		ᐃ.bezierCurveTo(168 * Ⲇ, 319 * Ⲇ, 171 * Ⲇ, Ⲇ * 316, Ⲇ * 173, 307 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 180, 305 * Ⲇ, Ⲇ * 180, 301 * Ⲇ, 178 * Ⲇ, 296 * Ⲇ);
		ᐃ.bezierCurveTo(183 * Ⲇ, Ⲇ * 296, 185 * Ⲇ, 289 * Ⲇ, Ⲇ * 188, Ⲇ * 279);
		ᐃ.bezierCurveTo(Ⲇ * 171, 286 * Ⲇ, 149 * Ⲇ, 290 * Ⲇ, 132 * Ⲇ, 289 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 101, 290 * Ⲇ, Ⲇ * 86, 280 * Ⲇ, 74 * Ⲇ, Ⲇ * 271);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[3], Ⲇ * ΔΔⲆⵠⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(76 * Ⲇ, Ⲇ * 252);
		ᐃ.bezierCurveTo(Ⲇ * 85, Ⲇ * 294, Ⲇ * 96, Ⲇ * 314, Ⲇ * 103, Ⲇ * 314);
		ᐃ.bezierCurveTo(Ⲇ * 106, 316 * Ⲇ, Ⲇ * 151, Ⲇ * 314, Ⲇ * 156, 314 * Ⲇ);
		ᐃ.bezierCurveTo(169 * Ⲇ, 317 * Ⲇ, Ⲇ * 182, 285 * Ⲇ, Ⲇ * 191, Ⲇ * ᐃᐃᐃᐃᐃΔⲆ);
		ᐃ.bezierCurveTo(Ⲇ * 134.5, 254 * Ⲇ, Ⲇ * 134.5, 254 * Ⲇ, 78 * Ⲇ, 252 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃⵠᐃⲆ], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(84 * Ⲇ, Ⲇ * 257);
		ᐃ.bezierCurveTo(Ⲇ * 122, Ⲇ * 273, 146 * Ⲇ, 268 * Ⲇ, Ⲇ * 179, 261 * Ⲇ);
		ᐃ.bezierCurveTo(190 * Ⲇ, 258 * Ⲇ, Ⲇ * 187, 266 * Ⲇ, 178 * Ⲇ, Ⲇ * 272);
		ᐃ.bezierCurveTo(Ⲇ * 160, Ⲇ * 284, 123 * Ⲇ, 282 * Ⲇ, Ⲇ * ⵠⲆΔᐃΔ, 277 * Ⲇ);
		ᐃ.bezierCurveTo(73 * Ⲇ, 260 * Ⲇ, Ⲇ * 79, 257 * Ⲇ, Ⲇ * 84, Ⲇ * 257);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ], ᐃⲆ[ⵠⵠᐃΔ], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(125 * Ⲇ, Ⲇ * 65);
		ᐃ.bezierCurveTo(Ⲇ * 133, Ⲇ * 45, 136 * Ⲇ, 42 * Ⲇ, 141 * Ⲇ, 55 * Ⲇ);
		ᐃ.bezierCurveTo(151 * Ⲇ, Ⲇ * 96, 164 * Ⲇ, Ⲇ * 117, 175 * Ⲇ, Ⲇ * 134);
		ᐃ.bezierCurveTo(203 * Ⲇ, Ⲇ * 181, Ⲇ * 207, Ⲇ * 182, 208 * Ⲇ, 215 * Ⲇ);
		ᐃ.bezierCurveTo(206 * Ⲇ, 240 * Ⲇ, Ⲇ * 205, 246 * Ⲇ, 184 * Ⲇ, 258 * Ⲇ);
		ᐃ.bezierCurveTo(161 * Ⲇ, Ⲇ * 267, Ⲇ * 131, 272 * Ⲇ, 86 * Ⲇ, Ⲇ * 258);
		ᐃ.bezierCurveTo(Ⲇ * 67, 252 * Ⲇ, Ⲇ * 68, 239 * Ⲇ, Ⲇ * 64, 216 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 62, 194 * Ⲇ, 72 * Ⲇ, Ⲇ * 169, Ⲇ * 92, Ⲇ * 142);
		ᐃ.bezierCurveTo(Ⲇ * 106, Ⲇ * 121, Ⲇ * 114, Ⲇ * 101, Ⲇ * 125, Ⲇ * 65);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔᐃⲆ], ᐃⲆ[ΔΔⲆᐃ], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(115 * Ⲇ, Ⲇ * 37);
		ᐃ.bezierCurveTo(116 * Ⲇ, Ⲇ * 28, 119 * Ⲇ, Ⲇ * 27, Ⲇ * 126, 37 * Ⲇ);
		ᐃ.bezierCurveTo(134 * Ⲇ, 48 * Ⲇ, Ⲇ * 134, Ⲇ * 49, 132 * Ⲇ, 59 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 131, Ⲇ * 67, Ⲇ * 127, Ⲇ * 65, Ⲇ * 120, 56 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 114, Ⲇ * 49, 113 * Ⲇ, Ⲇ * 43, Ⲇ * 115, Ⲇ * 38);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠᐃⲆ], ᐃⲆ[3], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 146, Ⲇ * 34);
		ᐃ.bezierCurveTo(Ⲇ * 152, Ⲇ * 28, Ⲇ * 155, 27 * Ⲇ, 157 * Ⲇ, 39 * Ⲇ);
		ᐃ.bezierCurveTo(157 * Ⲇ, 45 * Ⲇ, 157 * Ⲇ, 49 * Ⲇ, 150 * Ⲇ, Ⲇ * 56);
		ᐃ.bezierCurveTo(141 * Ⲇ, Ⲇ * 66, 138 * Ⲇ, Ⲇ * 66, Ⲇ * 138, 57 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 137, 50 * Ⲇ, Ⲇ * 137, 47 * Ⲇ, Ⲇ * 141, 42 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ], ᐃⲆ[ᐃᐃΔⵠ], Ⲇ * ΔΔⵠⵠⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 143, 69 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 148, Ⲇ * 56, 156 * Ⲇ, Ⲇ * 50, 158 * Ⲇ, Ⲇ * 58);
		ᐃ.bezierCurveTo(159 * Ⲇ, Ⲇ * 64, 160 * Ⲇ, 67 * Ⲇ, 153 * Ⲇ, 77 * Ⲇ);
		ᐃ.bezierCurveTo(148 * Ⲇ, Ⲇ * 83, 145 * Ⲇ, 84 * Ⲇ, 143 * Ⲇ, Ⲇ * 77);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆᐃ], ᐃⲆ[ᐃⵠⲆⵠ], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 149, Ⲇ * 92);
		ᐃ.bezierCurveTo(149 * Ⲇ, 89 * Ⲇ, Ⲇ * 151, 84 * Ⲇ, 156 * Ⲇ, Ⲇ * 79);
		ᐃ.bezierCurveTo(Ⲇ * 161, Ⲇ * 73, Ⲇ * 163, Ⲇ * 78, 162 * Ⲇ, Ⲇ * 86);
		ᐃ.bezierCurveTo(161 * Ⲇ, Ⲇ * 91, 155 * Ⲇ, Ⲇ * 99, Ⲇ * 152, Ⲇ * 98);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔΔ], ᐃⲆ[3], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 111, 61 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 114, Ⲇ * 51, Ⲇ * 117, 51 * Ⲇ, 124 * Ⲇ, 64 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 128, 68 * Ⲇ, 128 * Ⲇ, Ⲇ * 76, 126 * Ⲇ, Ⲇ * 79);
		ᐃ.bezierCurveTo(123 * Ⲇ, 84 * Ⲇ, 122 * Ⲇ, Ⲇ * 82, Ⲇ * 115, Ⲇ * 74);
		ᐃ.bezierCurveTo(112 * Ⲇ, 67 * Ⲇ, Ⲇ * 115, Ⲇ * 74, 115 * Ⲇ, Ⲇ * 74);
		ᐃ.bezierCurveTo(Ⲇ * 111, Ⲇ * 68, 111 * Ⲇ, 66 * Ⲇ, 111 * Ⲇ, Ⲇ * 62);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔⵠᐃⲆ], Ⲇ * ⲆᐃⵠᐃⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 107, Ⲇ * 81);
		ᐃ.bezierCurveTo(Ⲇ * 108, Ⲇ * 74, Ⲇ * 112, Ⲇ * 73, Ⲇ * 118, Ⲇ * 84);
		ᐃ.bezierCurveTo(Ⲇ * 122, Ⲇ * 88, 122 * Ⲇ, Ⲇ * 93, 121 * Ⲇ, Ⲇ * 98);
		ᐃ.bezierCurveTo(114 * Ⲇ, Ⲇ * 98, Ⲇ * 113, 98 * Ⲇ, 109 * Ⲇ, 90 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 107, 87 * Ⲇ, Ⲇ * 106, 85 * Ⲇ, Ⲇ * 107, 82 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[3], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(133 * Ⲇ, 99 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 186, 123 * Ⲇ, Ⲇ * 199, 152 * Ⲇ, 209 * Ⲇ, 169 * Ⲇ);
		ᐃ.bezierCurveTo(228 * Ⲇ, Ⲇ * 205, Ⲇ * 224, Ⲇ * 245, 190 * Ⲇ, Ⲇ * 276);
		ᐃ.bezierCurveTo(161 * Ⲇ, Ⲇ * 296, 99 * Ⲇ, Ⲇ * 292, Ⲇ * 79, Ⲇ * 274);
		ᐃ.bezierCurveTo(49 * Ⲇ, 253 * Ⲇ, 47 * Ⲇ, 214 * Ⲇ, 50 * Ⲇ, 197 * Ⲇ);
		ᐃ.bezierCurveTo(61 * Ⲇ, Ⲇ * 143, Ⲇ * 102, Ⲇ * 113, Ⲇ * 131, Ⲇ * 99);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(73 * Ⲇ, Ⲇ * 270);
		ᐃ.bezierCurveTo(79 * Ⲇ, Ⲇ * 280, 77 * Ⲇ, Ⲇ * 280, Ⲇ * 78, 287 * Ⲇ);
		ᐃ.bezierCurveTo(78 * Ⲇ, Ⲇ * 290, 83 * Ⲇ, 291 * Ⲇ, Ⲇ * 82, Ⲇ * 299);
		ᐃ.bezierCurveTo(81 * Ⲇ, Ⲇ * 301, 87 * Ⲇ, Ⲇ * 301, Ⲇ * 92, 314 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 94, 319 * Ⲇ, ᐃⲆᐃᐃΔΔⲆ * Ⲇ, 321 * Ⲇ, Ⲇ * 107, Ⲇ * 320);
		ᐃ.bezierCurveTo(Ⲇ * 111, Ⲇ * 323, 114 * Ⲇ, Ⲇ * 324, Ⲇ * 119, Ⲇ * 320);
		ᐃ.bezierCurveTo(137 * Ⲇ, 321 * Ⲇ, 146 * Ⲇ, 323 * Ⲇ, Ⲇ * 139, 320 * Ⲇ);
		ᐃ.bezierCurveTo(141 * Ⲇ, Ⲇ * 324, Ⲇ * 150, 324 * Ⲇ, Ⲇ * 153, 320 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 168, 319 * Ⲇ, Ⲇ * 171, 316 * Ⲇ, 173 * Ⲇ, 307 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 180, Ⲇ * 305, 180 * Ⲇ, 301 * Ⲇ, Ⲇ * 178, Ⲇ * 296);
		ᐃ.bezierCurveTo(183 * Ⲇ, 296 * Ⲇ, 185 * Ⲇ, Ⲇ * 289, Ⲇ * 188, 279 * Ⲇ);
		ᐃ.bezierCurveTo(171 * Ⲇ, 286 * Ⲇ, Ⲇ * 149, Ⲇ * 290, 132 * Ⲇ, Ⲇ * 289);
		ᐃ.bezierCurveTo(Ⲇ * 101, Ⲇ * 290, Ⲇ * 86, 280 * Ⲇ, 74 * Ⲇ, 271 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(76 * Ⲇ, Ⲇ * 252);
		ᐃ.bezierCurveTo(Ⲇ * 85, 294 * Ⲇ, 96 * Ⲇ, 314 * Ⲇ, 103 * Ⲇ, Ⲇ * 314);
		ᐃ.bezierCurveTo(106 * Ⲇ, 316 * Ⲇ, 151 * Ⲇ, 314 * Ⲇ, 156 * Ⲇ, 314 * Ⲇ);
		ᐃ.bezierCurveTo(169 * Ⲇ, Ⲇ * 317, 182 * Ⲇ, 285 * Ⲇ, Ⲇ * 191, 256 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 134.5, Ⲇ * 254, Ⲇ * 134.5, Ⲇ * 254, 78 * Ⲇ, 252 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(84 * Ⲇ, Ⲇ * 257);
		ᐃ.bezierCurveTo(Ⲇ * 122, Ⲇ * 273, 146 * Ⲇ, 268 * Ⲇ, 179 * Ⲇ, Ⲇ * 261);
		ᐃ.bezierCurveTo(Ⲇ * 190, 258 * Ⲇ, 187 * Ⲇ, Ⲇ * 266, Ⲇ * 178, 272 * Ⲇ);
		ᐃ.bezierCurveTo(160 * Ⲇ, Ⲇ * 284, 123 * Ⲇ, Ⲇ * 282, ᐃΔⵠⵠⵠ * Ⲇ, Ⲇ * 277);
		ᐃ.bezierCurveTo(73 * Ⲇ, 260 * Ⲇ, 79 * Ⲇ, 257 * Ⲇ, 84 * Ⲇ, 257 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 102, Ⲇ * 269, 11 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠⵠ]);
		ᐃΔⵠ(ᐃ, 98 * Ⲇ, 266 * Ⲇ, Ⲇ * ⲆⲆⵠᐃⲆ);
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠᐃⵠⵠ]);
		ᐃΔⵠ(ᐃ, 168 * Ⲇ, Ⲇ * 269, 11 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆᐃ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 164, 266 * Ⲇ, ΔΔⵠΔ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[6]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 125, 65 * Ⲇ);
		ᐃ.bezierCurveTo(133 * Ⲇ, 45 * Ⲇ, Ⲇ * 136, Ⲇ * 42, 141 * Ⲇ, Ⲇ * 55);
		ᐃ.bezierCurveTo(151 * Ⲇ, 96 * Ⲇ, 164 * Ⲇ, 117 * Ⲇ, 175 * Ⲇ, Ⲇ * 134);
		ᐃ.bezierCurveTo(Ⲇ * 203, Ⲇ * 181, Ⲇ * 207, 182 * Ⲇ, Ⲇ * 208, 215 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 206, 240 * Ⲇ, Ⲇ * 205, Ⲇ * 246, Ⲇ * 184, 258 * Ⲇ);
		ᐃ.bezierCurveTo(161 * Ⲇ, Ⲇ * 267, Ⲇ * 131, Ⲇ * 272, 86 * Ⲇ, Ⲇ * 258);
		ᐃ.bezierCurveTo(67 * Ⲇ, Ⲇ * 252, Ⲇ * 68, 239 * Ⲇ, Ⲇ * 64, 216 * Ⲇ);
		ᐃ.bezierCurveTo(62 * Ⲇ, Ⲇ * 194, 72 * Ⲇ, 169 * Ⲇ, 92 * Ⲇ, 142 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 106, 121 * Ⲇ, 114 * Ⲇ, 101 * Ⲇ, 125 * Ⲇ, Ⲇ * 65);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(115 * Ⲇ, 235 * Ⲇ);
		ᐃ.bezierCurveTo(118 * Ⲇ, 258 * Ⲇ, 137 * Ⲇ, 268 * Ⲇ, 148 * Ⲇ, Ⲇ * 246);
		ᐃ.bezierCurveTo(156 * Ⲇ, 228 * Ⲇ, 152 * Ⲇ, Ⲇ * 169, 150 * Ⲇ, Ⲇ * 140);
		ᐃ.bezierCurveTo(Ⲇ * 147, Ⲇ * 87, 143 * Ⲇ, 69 * Ⲇ, Ⲇ * 142, Ⲇ * 60);
		ᐃ.bezierCurveTo(Ⲇ * 136, Ⲇ * 44, 132 * Ⲇ, Ⲇ * 43, 127 * Ⲇ, Ⲇ * 62);
		ᐃ.bezierCurveTo(Ⲇ * 119, Ⲇ * 116, 119 * Ⲇ, Ⲇ * 140, Ⲇ * 116, Ⲇ * 166);
		ᐃ.bezierCurveTo(Ⲇ * 113, 202 * Ⲇ, 113 * Ⲇ, Ⲇ * 223, 115 * Ⲇ, 233 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃΔⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(132 * Ⲇ, 219 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 140, Ⲇ * 229, Ⲇ * 142, Ⲇ * 231, Ⲇ * 145, Ⲇ * 237);
		ᐃ.bezierCurveTo(145 * Ⲇ, 245 * Ⲇ, Ⲇ * 139, Ⲇ * 249, 133 * Ⲇ, Ⲇ * 249);
		ᐃ.bezierCurveTo(123 * Ⲇ, 248 * Ⲇ, Ⲇ * 123, Ⲇ * 243, Ⲇ * 121, Ⲇ * 239);
		ᐃ.bezierCurveTo(126 * Ⲇ, Ⲇ * 227, 129 * Ⲇ, 223 * Ⲇ, Ⲇ * 132, Ⲇ * 219);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 133, Ⲇ * 179);
		ᐃ.bezierCurveTo(Ⲇ * 140, Ⲇ * 188.5, 140 * Ⲇ, Ⲇ * 188.5, 147 * Ⲇ, Ⲇ * 198);
		ᐃ.bezierCurveTo(148 * Ⲇ, Ⲇ * 209, 142 * Ⲇ, 214 * Ⲇ, Ⲇ * 133, Ⲇ * 214);
		ᐃ.bezierCurveTo(Ⲇ * 121, Ⲇ * 211, 121 * Ⲇ, Ⲇ * 207, Ⲇ * 120, Ⲇ * 200);
		ᐃ.bezierCurveTo(126.5 * Ⲇ, 189.5 * Ⲇ, 126.5 * Ⲇ, Ⲇ * 189.5, Ⲇ * 133, 179 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⵠⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 133, 143 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 139, 151.5 * Ⲇ, 139 * Ⲇ, 151.5 * Ⲇ, 145 * Ⲇ, 160 * Ⲇ);
		ᐃ.bezierCurveTo(143 * Ⲇ, 167 * Ⲇ, 140 * Ⲇ, 170 * Ⲇ, 134 * Ⲇ, 170 * Ⲇ);
		ᐃ.bezierCurveTo(128 * Ⲇ, 169 * Ⲇ, Ⲇ * 124, Ⲇ * 167, Ⲇ * 123, 161 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 128, 152 * Ⲇ, Ⲇ * 128, Ⲇ * 152, 133 * Ⲇ, 143 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⵠⲆⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(133 * Ⲇ, 115 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 137.5, Ⲇ * 121.5, 137.5 * Ⲇ, Ⲇ * 121.5, 142 * Ⲇ, Ⲇ * 128);
		ᐃ.bezierCurveTo(Ⲇ * 141, Ⲇ * 133, 138 * Ⲇ, Ⲇ * 135, 133 * Ⲇ, 135 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 129, Ⲇ * 135, 125 * Ⲇ, Ⲇ * 132, Ⲇ * 125, 129 * Ⲇ);
		ᐃ.bezierCurveTo(129 * Ⲇ, 122 * Ⲇ, Ⲇ * 129, 122 * Ⲇ, 133 * Ⲇ, Ⲇ * 115);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 133, 94 * Ⲇ);
		ᐃ.bezierCurveTo(136.5 * Ⲇ, Ⲇ * 98.5, 136.5 * Ⲇ, Ⲇ * 98.5, Ⲇ * 140, 103 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 139, 109 * Ⲇ, Ⲇ * 137, 109 * Ⲇ, 133 * Ⲇ, Ⲇ * 110);
		ᐃ.bezierCurveTo(127 * Ⲇ, 108 * Ⲇ, 129 * Ⲇ, 107 * Ⲇ, Ⲇ * 127, Ⲇ * 105);
		ᐃ.bezierCurveTo(130 * Ⲇ, 99.5 * Ⲇ, 130 * Ⲇ, 99.5 * Ⲇ, 133 * Ⲇ, 94 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆΔᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(130 * Ⲇ, 279 * Ⲇ);
		ᐃ.bezierCurveTo(136.5 * Ⲇ, 287.5 * Ⲇ, 136.5 * Ⲇ, 287.5 * Ⲇ, 143 * Ⲇ, Ⲇ * 296);
		ᐃ.bezierCurveTo(Ⲇ * 143, 302 * Ⲇ, 139 * Ⲇ, Ⲇ * 309, Ⲇ * 131, 308 * Ⲇ);
		ᐃ.bezierCurveTo(123 * Ⲇ, 306 * Ⲇ, Ⲇ * 121, Ⲇ * 303, Ⲇ * 120, Ⲇ * 297);
		ᐃ.bezierCurveTo(Ⲇ * 125.5, 288.5 * Ⲇ, Ⲇ * 125.5, Ⲇ * 288.5, 131 * Ⲇ, 280 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆΔⲆᐃⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 147, Ⲇ * 303);
		ᐃ.bezierCurveTo(Ⲇ * 151, 311 * Ⲇ, Ⲇ * 151, Ⲇ * 319, 147 * Ⲇ, Ⲇ * 321);
		ᐃ.bezierCurveTo(Ⲇ * 138, 320 * Ⲇ, 145 * Ⲇ, Ⲇ * 308, Ⲇ * 147, 303 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 115, Ⲇ * 303);
		ᐃ.bezierCurveTo(115 * Ⲇ, 312 * Ⲇ, Ⲇ * 118, Ⲇ * 319, 115 * Ⲇ, 319 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 112, Ⲇ * 324, Ⲇ * 109, 318 * Ⲇ, Ⲇ * 109, Ⲇ * 314);
		ᐃ.bezierCurveTo(109 * Ⲇ, 308 * Ⲇ, Ⲇ * 112, Ⲇ * 303, 115 * Ⲇ, 303 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠᐃⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(89 * Ⲇ, 280 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 83, 279 * Ⲇ, 80 * Ⲇ, Ⲇ * 281, 81 * Ⲇ, 286 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 83, 290 * Ⲇ, 84 * Ⲇ, 290 * Ⲇ, 87 * Ⲇ, 286 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(94 * Ⲇ, Ⲇ * 290);
		ᐃ.bezierCurveTo(93 * Ⲇ, 294 * Ⲇ, 90 * Ⲇ, 303 * Ⲇ, 86 * Ⲇ, 298 * Ⲇ);
		ᐃ.bezierCurveTo(84 * Ⲇ, 295 * Ⲇ, 84 * Ⲇ, Ⲇ * 291, Ⲇ * 89, 291 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(163 * Ⲇ, 295 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 175, Ⲇ * 294, 176 * Ⲇ, 296 * Ⲇ, Ⲇ * 175, 301 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 174, 305 * Ⲇ, Ⲇ * 171, 305 * Ⲇ, Ⲇ * 166, 300 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 172, 286 * Ⲇ);
		ᐃ.bezierCurveTo(180 * Ⲇ, Ⲇ * 285, Ⲇ * 181, Ⲇ * 285, Ⲇ * 180, 291 * Ⲇ);
		ᐃ.bezierCurveTo(176 * Ⲇ, 295 * Ⲇ, 174 * Ⲇ, Ⲇ * 294, 172 * Ⲇ, Ⲇ * 286);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆΔⲆᐃᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(115 * Ⲇ, Ⲇ * 37);
		ᐃ.bezierCurveTo(116 * Ⲇ, Ⲇ * 28, Ⲇ * 119, 27 * Ⲇ, 126 * Ⲇ, 37 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 134, 48 * Ⲇ, Ⲇ * 134, 49 * Ⲇ, 132 * Ⲇ, Ⲇ * 59);
		ᐃ.bezierCurveTo(Ⲇ * 131, Ⲇ * 67, Ⲇ * 127, Ⲇ * 65, 120 * Ⲇ, 56 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 114, 49 * Ⲇ, Ⲇ * 113, 43 * Ⲇ, 115 * Ⲇ, 38 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⵠΔᐃΔᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(146 * Ⲇ, 34 * Ⲇ);
		ᐃ.bezierCurveTo(152 * Ⲇ, Ⲇ * 28, 155 * Ⲇ, Ⲇ * 27, 157 * Ⲇ, Ⲇ * 39);
		ᐃ.bezierCurveTo(Ⲇ * 157, Ⲇ * 45, 157 * Ⲇ, 49 * Ⲇ, 150 * Ⲇ, 56 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 141, Ⲇ * 66, Ⲇ * 138, 66 * Ⲇ, 138 * Ⲇ, 57 * Ⲇ);
		ᐃ.bezierCurveTo(137 * Ⲇ, 50 * Ⲇ, Ⲇ * 137, 47 * Ⲇ, 141 * Ⲇ, Ⲇ * 42);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[7]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 143, Ⲇ * 69);
		ᐃ.bezierCurveTo(Ⲇ * 148, Ⲇ * 56, Ⲇ * 156, Ⲇ * 50, 158 * Ⲇ, Ⲇ * 58);
		ᐃ.bezierCurveTo(Ⲇ * 159, 64 * Ⲇ, Ⲇ * 160, Ⲇ * 67, Ⲇ * 153, 77 * Ⲇ);
		ᐃ.bezierCurveTo(148 * Ⲇ, 83 * Ⲇ, Ⲇ * 145, Ⲇ * 84, Ⲇ * 143, Ⲇ * 77);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[7]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(149 * Ⲇ, 92 * Ⲇ);
		ᐃ.bezierCurveTo(149 * Ⲇ, Ⲇ * 89, 151 * Ⲇ, Ⲇ * 84, Ⲇ * 156, 79 * Ⲇ);
		ᐃ.bezierCurveTo(161 * Ⲇ, 73 * Ⲇ, Ⲇ * 163, Ⲇ * 78, Ⲇ * 162, Ⲇ * 86);
		ᐃ.bezierCurveTo(Ⲇ * 161, 91 * Ⲇ, Ⲇ * 155, Ⲇ * 99, Ⲇ * 152, 98 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔⲆⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(111 * Ⲇ, Ⲇ * 61);
		ᐃ.bezierCurveTo(Ⲇ * 114, 51 * Ⲇ, Ⲇ * 117, 51 * Ⲇ, Ⲇ * 124, Ⲇ * 64);
		ᐃ.bezierCurveTo(128 * Ⲇ, Ⲇ * 68, Ⲇ * 128, Ⲇ * 76, Ⲇ * 126, 79 * Ⲇ);
		ᐃ.bezierCurveTo(123 * Ⲇ, 84 * Ⲇ, Ⲇ * 122, 82 * Ⲇ, Ⲇ * 115, Ⲇ * 74);
		ᐃ.bezierCurveTo(112 * Ⲇ, Ⲇ * 67, 115 * Ⲇ, 74 * Ⲇ, 115 * Ⲇ, 74 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 111, 68 * Ⲇ, 111 * Ⲇ, Ⲇ * 66, Ⲇ * 111, 62 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[7]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 107, Ⲇ * 81);
		ᐃ.bezierCurveTo(Ⲇ * 108, 74 * Ⲇ, 112 * Ⲇ, 73 * Ⲇ, 118 * Ⲇ, Ⲇ * 84);
		ᐃ.bezierCurveTo(122 * Ⲇ, 88 * Ⲇ, Ⲇ * 122, Ⲇ * 93, 121 * Ⲇ, Ⲇ * 98);
		ᐃ.bezierCurveTo(Ⲇ * 114, Ⲇ * 98, 113 * Ⲇ, 98 * Ⲇ, Ⲇ * 109, Ⲇ * 90);
		ᐃ.bezierCurveTo(Ⲇ * 107, Ⲇ * 87, 106 * Ⲇ, 85 * Ⲇ, 107 * Ⲇ, Ⲇ * 82);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆᐃⲆⲆ]);
		return ⲆⲆ
	}

	function ᐃⲆᐃⲆᐃΔⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 202;
		ⲆⲆ.height = 202 * Ⲇ;
		ᐃ.translate(Ⲇ * 2, Ⲇ * 1);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆΔⲆⵠ;
		ᐃ.translate(ⵠⲆⵠ, 10 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 98, 41.15177917480469 * Ⲇ);
		ᐃ.rotate(.8);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ⲆⲆⵠᐃΔ, Ⲇ * -16.5, Ⲇ * 32, Ⲇ * 33, 7 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆⲆⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(98 * Ⲇ, Ⲇ * 22.5089111328125);
		ᐃ.bezierCurveTo(97.5 * Ⲇ, 41.5089111328125 * Ⲇ, 97.5 * Ⲇ, 41.5089111328125 * Ⲇ, Ⲇ * 97, 60.5089111328125 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 147.5, Ⲇ * 69.5089111328125);
		ᐃ.rotate(.2);
		ᐃᐃᐃ(ᐃ, -15.5 * Ⲇ, Ⲇ * -ᐃⲆᐃⵠⵠᐃⵠ, 31 * Ⲇ, Ⲇ * 32, Ⲇ * ᐃΔΔⲆⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 163, 59.50892639160156 * Ⲇ);
		ᐃ.bezierCurveTo(147 * Ⲇ, 69.50892639160156 * Ⲇ, Ⲇ * 127, 82.50892639160156 * Ⲇ, Ⲇ * 131, Ⲇ * 79.50892639160156);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 143.5, Ⲇ * 128.2946319580078);
		ᐃ.rotate(1.24);
		ᐃᐃᐃ(ᐃ, Ⲇ * -16.5, -17.5 * Ⲇ, Ⲇ * 33, 35 * Ⲇ, Ⲇ * ⵠⵠᐃΔᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 162, Ⲇ * 135.93748474121094);
		ᐃ.bezierCurveTo(Ⲇ * 143.5, 128.43748474121094 * Ⲇ, 129 * Ⲇ, Ⲇ * 120.93748474121094, 125 * Ⲇ, 120.93748474121094 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 99, Ⲇ * 156.08035278320312);
		ᐃ.rotate(.84);
		ᐃᐃᐃ(ᐃ, Ⲇ * -18, -18 * Ⲇ, Ⲇ * 36, Ⲇ * 36, Ⲇ * ᐃΔΔⲆⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 98, Ⲇ * 136.08035278320312);
		ᐃ.bezierCurveTo(98 * Ⲇ, Ⲇ * 156.08035278320312, Ⲇ * 98, 156.08035278320312 * Ⲇ, 98 * Ⲇ, 176.08035278320312 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 54, Ⲇ * 72.22320556640625);
		ᐃ.rotate(1.32);
		ᐃᐃᐃ(ᐃ, Ⲇ * -18, Ⲇ * -19, Ⲇ * 36, Ⲇ * 38, Ⲇ * 7);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 34, Ⲇ * 60.79463195800781);
		ᐃ.bezierCurveTo(53.5 * Ⲇ, 72.29463195800781 * Ⲇ, Ⲇ * 69, 79.79463195800781 * Ⲇ, Ⲇ * 73, Ⲇ * 83.79463195800781);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.save();
		ᐃ.translate(49 * Ⲇ, Ⲇ * 127.29463195800781);
		ᐃ.rotate(1.76);
		ᐃᐃᐃ(ᐃ, -20 * Ⲇ, -17.5 * Ⲇ, 40 * Ⲇ, 35 * Ⲇ, Ⲇ * 7);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 30, 141.7946319580078 * Ⲇ);
		ᐃ.bezierCurveTo(47 * Ⲇ, Ⲇ * 130.2946319580078, Ⲇ * 64, Ⲇ * 119.79463195800781, Ⲇ * 64, Ⲇ * 118.79463195800781);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.globalAlpha = Δᐃᐃ;
		ᐃ.translate(ⵠᐃⵠⵠ, -ᐃⲆⵠΔΔ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 98, 41.15177917480469 * Ⲇ);
		ᐃ.rotate(.8);
		ᐃᐃᐃ(ᐃ, -ΔⵠΔΔᐃ * Ⲇ, -16.5 * Ⲇ, Ⲇ * 32, 33 * Ⲇ, Ⲇ * 7);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆΔ], ᐃⲆ[4], ⲆΔⵠⵠᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 98, Ⲇ * 22.5089111328125);
		ᐃ.bezierCurveTo(Ⲇ * 97.5, Ⲇ * 41.5089111328125, 97.5 * Ⲇ, 41.5089111328125 * Ⲇ, 97 * Ⲇ, Ⲇ * 60.5089111328125);
		ᐃⵠ(ᐃ, ⵠΔᐃᐃⵠ, ᐃⲆ[4], Ⲇ * ⲆΔⵠⵠᐃ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 147.5, Ⲇ * 69.5089111328125);
		ᐃ.rotate(.2);
		ᐃᐃᐃ(ᐃ, Ⲇ * -15.5, Ⲇ * -ⵠⲆᐃᐃⵠⵠᐃ, 31 * Ⲇ, 32 * Ⲇ, Ⲇ * ᐃⲆᐃⲆⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆⵠⲆᐃ], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(163 * Ⲇ, Ⲇ * 59.50892639160156);
		ᐃ.bezierCurveTo(Ⲇ * 147, Ⲇ * 69.50892639160156, Ⲇ * 127, 82.50892639160156 * Ⲇ, 131 * Ⲇ, Ⲇ * 79.50892639160156);
		ᐃⵠ(ᐃ, ⵠⲆᐃᐃⲆ, ᐃⲆ[4], 5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(143.5 * Ⲇ, 128.2946319580078 * Ⲇ);
		ᐃ.rotate(1.24);
		ᐃᐃᐃ(ᐃ, -16.5 * Ⲇ, Ⲇ * -17.5, Ⲇ * 33, 35 * Ⲇ, Ⲇ * 7);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆΔ], ᐃⲆ[4], Ⲇ * Δᐃⵠᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(162 * Ⲇ, Ⲇ * 135.93748474121094);
		ᐃ.bezierCurveTo(Ⲇ * 143.5, Ⲇ * 128.43748474121094, Ⲇ * 129, Ⲇ * 120.93748474121094, Ⲇ * 125, Ⲇ * 120.93748474121094);
		ᐃⵠ(ᐃ, ᐃⵠΔΔΔ, ᐃⲆ[ΔᐃΔⵠ], 5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(99 * Ⲇ, Ⲇ * 156.08035278320312);
		ᐃ.rotate(.84);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ΔΔⵠΔⲆΔᐃ, Ⲇ * -18, Ⲇ * 36, Ⲇ * 36, Ⲇ * ⲆⲆᐃⲆⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], ⲆΔΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 98, Ⲇ * 136.08035278320312);
		ᐃ.bezierCurveTo(98 * Ⲇ, 156.08035278320312 * Ⲇ, 98 * Ⲇ, 156.08035278320312 * Ⲇ, 98 * Ⲇ, Ⲇ * 176.08035278320312);
		ᐃⵠ(ᐃ, ᐃⲆᐃΔⵠ, ᐃⲆ[ⵠᐃΔΔΔ], Ⲇ * 5);
		ᐃ.save();
		ᐃ.translate(54 * Ⲇ, Ⲇ * 72.22320556640625);
		ᐃ.rotate(1.32);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ⵠⲆΔⲆΔ, Ⲇ * -ⵠᐃΔⵠⲆ, 36 * Ⲇ, Ⲇ * 38, 7 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆ], ᐃⲆ[ᐃᐃⲆⵠ], Ⲇ * ⲆⲆⲆᐃᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 34, 60.79463195800781 * Ⲇ);
		ᐃ.bezierCurveTo(53.5 * Ⲇ, 72.29463195800781 * Ⲇ, 69 * Ⲇ, 79.79463195800781 * Ⲇ, Ⲇ * 73, 83.79463195800781 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⵠΔΔΔ, ᐃⲆ[ΔᐃΔΔ], Ⲇ * 5);
		ᐃ.save();
		ᐃ.translate(49 * Ⲇ, Ⲇ * 127.29463195800781);
		ᐃ.rotate(1.76);
		ᐃᐃᐃ(ᐃ, Ⲇ * -20, Ⲇ * -17.5, 40 * Ⲇ, 35 * Ⲇ, ⲆΔⲆᐃⲆ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], ⵠᐃⵠΔᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 30, Ⲇ * 141.7946319580078);
		ᐃ.bezierCurveTo(47 * Ⲇ, 130.2946319580078 * Ⲇ, Ⲇ * 64, Ⲇ * 119.79463195800781, 64 * Ⲇ, Ⲇ * 118.79463195800781);
		ᐃⵠ(ᐃ, ⲆⲆⲆⲆⲆ, ᐃⲆ[ⲆⲆᐃΔᐃ], 5 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ΔⵠⲆ;
		ᐃ.translate(0, Ⲇ * ⲆΔⲆⲆⵠ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 98, Ⲇ * 99);
		ᐃⵠΔⵠ(ᐃ, 6, 70.28669492273468 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⲆ]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 98, Ⲇ * 99);
		ᐃⵠΔⵠ(ᐃ, ᐃΔᐃⲆΔ, 56.455940020351264 * Ⲇ, Ⲇ * ⲆΔⲆⲆⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃⵠ]);
		ᐃ.globalAlpha = ⲆΔᐃ;
		ᐃ.translate(0, Ⲇ * -ⵠΔΔΔⵠ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 98, 99 * Ⲇ);
		ᐃⵠΔⵠ(ᐃ, ΔⲆⵠΔΔ, Ⲇ * 70.28669492273468, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔᐃⵠ], ᐃⲆ[6], ⲆΔⵠⵠᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 98, 99 * Ⲇ);
		ᐃⵠΔⵠ(ᐃ, Δⵠᐃⵠⵠ, 56.455940020351264 * Ⲇ, ⲆᐃⲆⲆᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[7], ᐃⲆ[8], 7 * Ⲇ);
		return ⲆⲆ
	}

	function ⲆⵠⵠᐃᐃⲆΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 163 * Ⲇ;
		ⲆⲆ.height = 163 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 82.5, 81.1015625 * Ⲇ);
		ᐃ.rotate(ⲆⲆⵠⲆ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -65.5, Ⲇ * -66, Ⲇ * 131, 131 * Ⲇ, ᐃΔⵠΔᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ᐃΔⵠΔ;
		ᐃ.translate(ᐃΔⵠΔᐃ * Ⲇ, 5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 80, Ⲇ * 17.1015625);
		ᐃᐃᐃ(ᐃ, Ⲇ * -64, Ⲇ * -4.5, Ⲇ * 129, Ⲇ * 9, Ⲇ * ΔⲆΔᐃⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠⵠ]);
		ᐃ.globalAlpha = ⵠΔⲆ;
		ᐃ.translate(Ⲇ * -5, -ⵠⵠΔⲆ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(80 * Ⲇ, Ⲇ * 17.1015625);
		ᐃᐃᐃ(ᐃ, Ⲇ * -64, Ⲇ * -4.5, 129 * Ⲇ, Ⲇ * ᐃⲆⲆⵠⲆⵠⵠ, 5 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃᐃ], ᐃⲆ[ⲆΔⲆΔ], Ⲇ * 3);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆⵠΔⲆ;
		ᐃ.translate(Ⲇ * Δᐃⵠᐃ, ⲆΔⵠᐃⵠ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(145.5 * Ⲇ, Ⲇ * 83.6015625);
		ᐃᐃᐃ(ᐃ, Ⲇ * -4.5, -61 * Ⲇ, Ⲇ * 9, Ⲇ * 129, Δᐃⵠᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(-5 * Ⲇ, Ⲇ * -5);
		ᐃ.save();
		ᐃ.translate(145.5 * Ⲇ, Ⲇ * 83.6015625);
		ᐃᐃᐃ(ᐃ, Ⲇ * -4.5, Ⲇ * -61, 9 * Ⲇ, Ⲇ * 129, 5 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[3], Ⲇ * 3);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(Ⲇ * 5, ⵠᐃⵠΔᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(17.5 * Ⲇ, 82.6015625 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -4.5, Ⲇ * -65, 9 * Ⲇ, Ⲇ * 129, ⵠΔΔΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ]);
		ᐃ.globalAlpha = ᐃⲆΔ;
		ᐃ.translate(-5 * Ⲇ, Ⲇ * -5);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 17.5, 82.6015625 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -4.5 * Ⲇ, -65 * Ⲇ, ⵠⲆᐃΔᐃ * Ⲇ, Ⲇ * 129, Ⲇ * ⲆⲆⵠᐃⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ⵠⵠᐃΔ], Ⲇ * 3);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ᐃⵠⵠ;
		ᐃ.translate(ⲆΔⲆⲆ * Ⲇ, ⲆⲆⲆᐃᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(80.5 * Ⲇ, 145.6015625 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -65.5, Ⲇ * -ⲆⵠⲆᐃ, 129 * Ⲇ, 9 * Ⲇ, 5 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠⵠ]);
		ᐃ.globalAlpha = ⲆⵠΔⲆ;
		ᐃ.translate(Ⲇ * -ⵠᐃᐃΔᐃ, -5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 80.5, 145.6015625 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -65.5, Ⲇ * -ⵠⲆⲆΔΔ, 129 * Ⲇ, Ⲇ * 9, 5 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠΔ], ᐃⲆ[ⵠⵠᐃΔ], 3 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ᐃΔⵠΔ;
		ᐃ.translate(5 * Ⲇ, Ⲇ * 5);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 17, 18.1015625 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -11 * Ⲇ, Ⲇ * -11.5, 22 * Ⲇ, 22 * Ⲇ, ⵠⵠΔⲆ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠⲆ]);
		ᐃ.globalAlpha = ⵠΔΔ;
		ᐃ.translate(Ⲇ * -ⲆΔⵠⵠᐃ, Ⲇ * -ⵠⵠΔⲆ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 17, 18.1015625 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -11, Ⲇ * -11.5, 22 * Ⲇ, Ⲇ * 22, Ⲇ * ⲆΔΔΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆⲆⵠ], ᐃⲆ[3], 3 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(Ⲇ * 5, Δᐃⵠᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 145.5, Ⲇ * 16.6015625);
		ᐃᐃᐃ(ᐃ, -10.5 * Ⲇ, -11.5 * Ⲇ, Ⲇ * 21, Ⲇ * 22, Ⲇ * 5);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⵠΔΔ;
		ᐃ.translate(-ⵠᐃᐃⵠᐃ * Ⲇ, Ⲇ * -5);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 145.5, 16.6015625 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -10.5, Ⲇ * -11.5, 21 * Ⲇ, 22 * Ⲇ, Ⲇ * ⵠᐃⵠΔᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[3], ᐃΔΔⵠ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠΔΔ;
		ᐃ.translate(Ⲇ * 5, ⵠΔΔΔ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(145.5 * Ⲇ, Ⲇ * 144.1015625);
		ᐃᐃᐃ(ᐃ, Ⲇ * -10.5, -11 * Ⲇ, Ⲇ * 22, 22 * Ⲇ, 5 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(Ⲇ * -5, Ⲇ * -ⲆⲆⵠᐃⲆ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 145.5, Ⲇ * 144.1015625);
		ᐃᐃᐃ(ᐃ, -10.5 * Ⲇ, -11 * Ⲇ, Ⲇ * 22, Ⲇ * 22, Ⲇ * ⲆΔΔΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[3], Ⲇ * 3);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ᐃⲆΔ;
		ᐃ.translate(ⵠᐃᐃΔᐃ * Ⲇ, Ⲇ * ⵠⵠⲆⵠ);
		ᐃ.save();
		ᐃ.translate(17.5 * Ⲇ, 145.1015625 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -11.5 * Ⲇ, -ΔᐃΔᐃᐃⵠⵠ * Ⲇ, 22 * Ⲇ, Ⲇ * 22, ᐃΔⵠΔᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠ]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(-5 * Ⲇ, Ⲇ * -ⵠⵠⲆⵠ);
		ᐃ.save();
		ᐃ.translate(17.5 * Ⲇ, Ⲇ * 145.1015625);
		ᐃᐃᐃ(ᐃ, Ⲇ * -11.5, -ⵠᐃΔⵠᐃ * Ⲇ, Ⲇ * 22, Ⲇ * 22, Ⲇ * ⵠᐃⵠΔᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆⲆⵠ], ᐃⲆ[ⵠⵠⵠⵠ], ⵠΔⲆⲆ * Ⲇ);
		return ⲆⲆ
	}

	function ΔⵠΔⵠⲆⲆⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 198 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 147;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆⵠⲆ;
		ᐃ.translate(ⵠⵠΔΔ, Ⲇ * 6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 44, Ⲇ * 76);
		ᐃ.bezierCurveTo(50 * Ⲇ, 82 * Ⲇ, 50 * Ⲇ, Ⲇ * 82, Ⲇ * 56, Ⲇ * 88);
		ᐃ.bezierCurveTo(59 * Ⲇ, 82 * Ⲇ, 59 * Ⲇ, 82 * Ⲇ, 62 * Ⲇ, 76 * Ⲇ);
		ᐃ.bezierCurveTo(59 * Ⲇ, Ⲇ * 71, 59 * Ⲇ, 71 * Ⲇ, 56 * Ⲇ, 66 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 59, 69 * Ⲇ, 59 * Ⲇ, Ⲇ * 69, 62 * Ⲇ, 72 * Ⲇ);
		ᐃ.bezierCurveTo(80 * Ⲇ, Ⲇ * 48, 102 * Ⲇ, 50 * Ⲇ, 120 * Ⲇ, Ⲇ * 62);
		ᐃ.bezierCurveTo(Ⲇ * 127, 58 * Ⲇ, 127 * Ⲇ, 58 * Ⲇ, 134 * Ⲇ, Ⲇ * 54);
		ᐃ.bezierCurveTo(129 * Ⲇ, Ⲇ * 60, 129 * Ⲇ, Ⲇ * 60, 124 * Ⲇ, Ⲇ * 66);
		ᐃ.bezierCurveTo(Ⲇ * 129, Ⲇ * 73, 129 * Ⲇ, Ⲇ * 73, Ⲇ * 134, 80 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 140, 74 * Ⲇ, 140 * Ⲇ, Ⲇ * 74, Ⲇ * 146, 68 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 142, 76 * Ⲇ, Ⲇ * 142, Ⲇ * 76, Ⲇ * 138, Ⲇ * 84);
		ᐃ.bezierCurveTo(Ⲇ * 144, 90 * Ⲇ, Ⲇ * 142, Ⲇ * 90, 144 * Ⲇ, 90 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 136, 97 * Ⲇ, 136 * Ⲇ, 97 * Ⲇ, Ⲇ * 128, 104 * Ⲇ);
		ᐃ.bezierCurveTo(154 * Ⲇ, Ⲇ * 110, Ⲇ * 164, 90 * Ⲇ, 160 * Ⲇ, Ⲇ * 80);
		ᐃ.bezierCurveTo(138 * Ⲇ, Ⲇ * 22, Ⲇ * 148, Ⲇ * 51, Ⲇ * 136, 22 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 97, 24 * Ⲇ, 97 * Ⲇ, 24 * Ⲇ, 58 * Ⲇ, 26 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 47, 54 * Ⲇ, Ⲇ * 36, 80 * Ⲇ, 36 * Ⲇ, Ⲇ * 82);
		ᐃ.bezierCurveTo(Ⲇ * 40, Ⲇ * 108, 54 * Ⲇ, 104 * Ⲇ, Ⲇ * 62, Ⲇ * 104);
		ᐃ.bezierCurveTo(Ⲇ * 46, 92 * Ⲇ, Ⲇ * 54, 97 * Ⲇ, Ⲇ * 46, 90 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(36 * Ⲇ, 80 * Ⲇ);
		ᐃ.bezierCurveTo(30 * Ⲇ, 84 * Ⲇ, 28 * Ⲇ, Ⲇ * 92, Ⲇ * 34, Ⲇ * 100);
		ᐃ.bezierCurveTo(Ⲇ * 41.5, 102 * Ⲇ, 41.5 * Ⲇ, Ⲇ * 102, Ⲇ * 49, 104 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 43, 105.5 * Ⲇ, 43 * Ⲇ, Ⲇ * 105.5, 37 * Ⲇ, 107 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 46, 111 * Ⲇ, 60 * Ⲇ, Ⲇ * 114, 76 * Ⲇ, 114 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 78, 110.5 * Ⲇ, Ⲇ * 78, 110.5 * Ⲇ, 80 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(Ⲇ * 81, 110.5 * Ⲇ, Ⲇ * 81, Ⲇ * 110.5, 82 * Ⲇ, 114 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 94.5, Ⲇ * 113.5, 94.5 * Ⲇ, 113.5 * Ⲇ, 107 * Ⲇ, 113 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 108.5, Ⲇ * 110, Ⲇ * 108.5, Ⲇ * 110, Ⲇ * 110, 107 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 111.5, 110.5 * Ⲇ, Ⲇ * 111.5, Ⲇ * 110.5, 113 * Ⲇ, Ⲇ * 114);
		ᐃ.bezierCurveTo(131 * Ⲇ, Ⲇ * 112.5, 131 * Ⲇ, Ⲇ * 112.5, Ⲇ * 149, Ⲇ * 111);
		ᐃ.bezierCurveTo(Ⲇ * 148.5, Ⲇ * 107.5, Ⲇ * 148.5, 107.5 * Ⲇ, Ⲇ * 148, Ⲇ * 104);
		ᐃ.bezierCurveTo(150.5 * Ⲇ, Ⲇ * 107, Ⲇ * 150.5, Ⲇ * 107, Ⲇ * 153, Ⲇ * 110);
		ᐃ.bezierCurveTo(Ⲇ * 155.5, 108.5 * Ⲇ, Ⲇ * 155.5, 108.5 * Ⲇ, Ⲇ * 158, 107 * Ⲇ);
		ᐃ.bezierCurveTo(156.5 * Ⲇ, 104 * Ⲇ, Ⲇ * 156.5, Ⲇ * 104, 155 * Ⲇ, Ⲇ * 101);
		ᐃ.bezierCurveTo(Ⲇ * 158.5, Ⲇ * 102.5, Ⲇ * 158.5, 102.5 * Ⲇ, 162 * Ⲇ, 104 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 168, ⵠᐃⵠⲆⵠ * Ⲇ, Ⲇ * 170, 92 * Ⲇ, 169 * Ⲇ, Ⲇ * 85);
		ᐃ.bezierCurveTo(Ⲇ * 166, 86 * Ⲇ, Ⲇ * 166, 86 * Ⲇ, Ⲇ * 163, 87 * Ⲇ);
		ᐃ.bezierCurveTo(165.5 * Ⲇ, 83 * Ⲇ, 165.5 * Ⲇ, 83 * Ⲇ, Ⲇ * 168, 79 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 165.5, 76.5 * Ⲇ, 165.5 * Ⲇ, 76.5 * Ⲇ, 163 * Ⲇ, 74 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 155, Ⲇ * 82.5, Ⲇ * 155, 82.5 * Ⲇ, Ⲇ * 147, Ⲇ * 91);
		ᐃ.bezierCurveTo(139 * Ⲇ, Ⲇ * 95.5, Ⲇ * 139, 95.5 * Ⲇ, 131 * Ⲇ, ⵠᐃⵠⲆⲆ * Ⲇ);
		ᐃ.bezierCurveTo(97.5 * Ⲇ, Ⲇ * 100.5, Ⲇ * 97.5, 100.5 * Ⲇ, 64 * Ⲇ, Ⲇ * 101);
		ᐃ.bezierCurveTo(Ⲇ * 49, 102 * Ⲇ, 43 * Ⲇ, 90 * Ⲇ, 36 * Ⲇ, 80 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, Ⲇ * -6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(36 * Ⲇ, 80 * Ⲇ);
		ᐃ.bezierCurveTo(30 * Ⲇ, Ⲇ * 84, 28 * Ⲇ, Ⲇ * 92, 34 * Ⲇ, Ⲇ * 100);
		ᐃ.bezierCurveTo(41.5 * Ⲇ, Ⲇ * 102, 41.5 * Ⲇ, 102 * Ⲇ, 49 * Ⲇ, Ⲇ * 104);
		ᐃ.bezierCurveTo(Ⲇ * 43, 105.5 * Ⲇ, 43 * Ⲇ, 105.5 * Ⲇ, 37 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(46 * Ⲇ, Ⲇ * 111, 60 * Ⲇ, Ⲇ * 114, Ⲇ * 76, Ⲇ * 114);
		ᐃ.bezierCurveTo(Ⲇ * 78, Ⲇ * 110.5, Ⲇ * 78, 110.5 * Ⲇ, 80 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(Ⲇ * 81, Ⲇ * 110.5, Ⲇ * 81, Ⲇ * 110.5, 82 * Ⲇ, Ⲇ * 114);
		ᐃ.bezierCurveTo(94.5 * Ⲇ, 113.5 * Ⲇ, Ⲇ * 94.5, Ⲇ * 113.5, 107 * Ⲇ, 113 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 108.5, 110 * Ⲇ, Ⲇ * 108.5, 110 * Ⲇ, 110 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(Ⲇ * 111.5, 110.5 * Ⲇ, 111.5 * Ⲇ, Ⲇ * 110.5, Ⲇ * 113, Ⲇ * 114);
		ᐃ.bezierCurveTo(131 * Ⲇ, Ⲇ * 112.5, 131 * Ⲇ, 112.5 * Ⲇ, 149 * Ⲇ, 111 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 148.5, Ⲇ * 107.5, Ⲇ * 148.5, 107.5 * Ⲇ, 148 * Ⲇ, Ⲇ * 104);
		ᐃ.bezierCurveTo(Ⲇ * 150.5, Ⲇ * 107, Ⲇ * 150.5, Ⲇ * 107, Ⲇ * 153, 110 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 155.5, Ⲇ * 108.5, Ⲇ * 155.5, Ⲇ * 108.5, 158 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(156.5 * Ⲇ, Ⲇ * 104, Ⲇ * 156.5, 104 * Ⲇ, Ⲇ * 155, 101 * Ⲇ);
		ᐃ.bezierCurveTo(158.5 * Ⲇ, Ⲇ * 102.5, Ⲇ * 158.5, Ⲇ * 102.5, 162 * Ⲇ, Ⲇ * 104);
		ᐃ.bezierCurveTo(Ⲇ * 168, Ⲇ * ΔⲆΔΔΔ, 170 * Ⲇ, Ⲇ * 92, 169 * Ⲇ, Ⲇ * 85);
		ᐃ.bezierCurveTo(166 * Ⲇ, Ⲇ * 86, 166 * Ⲇ, Ⲇ * 86, 163 * Ⲇ, Ⲇ * 87);
		ᐃ.bezierCurveTo(165.5 * Ⲇ, Ⲇ * 83, Ⲇ * 165.5, Ⲇ * 83, Ⲇ * 168, Ⲇ * 79);
		ᐃ.bezierCurveTo(165.5 * Ⲇ, 76.5 * Ⲇ, 165.5 * Ⲇ, Ⲇ * 76.5, Ⲇ * 163, 74 * Ⲇ);
		ᐃ.bezierCurveTo(155 * Ⲇ, Ⲇ * 82.5, Ⲇ * 155, 82.5 * Ⲇ, Ⲇ * 147, Ⲇ * 91);
		ᐃ.bezierCurveTo(139 * Ⲇ, Ⲇ * 95.5, Ⲇ * 139, Ⲇ * 95.5, 131 * Ⲇ, 100 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 97.5, 100.5 * Ⲇ, 97.5 * Ⲇ, 100.5 * Ⲇ, Ⲇ * 64, Ⲇ * 101);
		ᐃ.bezierCurveTo(Ⲇ * 49, 102 * Ⲇ, 43 * Ⲇ, 90 * Ⲇ, Ⲇ * 36, 80 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[Δᐃᐃⵠ], ΔᐃΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(49 * Ⲇ, Ⲇ * 98);
		ᐃ.bezierCurveTo(Ⲇ * 96.5, 98 * Ⲇ, Ⲇ * 96.5, 98 * Ⲇ, 144 * Ⲇ, Ⲇ * 98);
		ᐃ.bezierCurveTo(Ⲇ * 136.5, 102 * Ⲇ, Ⲇ * 136.5, 102 * Ⲇ, 129 * Ⲇ, 106 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 103, Ⲇ * 105.5, 103 * Ⲇ, 105.5 * Ⲇ, Ⲇ * 77, 105 * Ⲇ);
		ᐃ.bezierCurveTo(65 * Ⲇ, Ⲇ * 105, Ⲇ * 65, 105 * Ⲇ, Ⲇ * 53, 105 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃ.globalAlpha = .5;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(54 * Ⲇ, 98 * Ⲇ);
		ᐃ.bezierCurveTo(97 * Ⲇ, Ⲇ * 98, 97 * Ⲇ, 98 * Ⲇ, 140 * Ⲇ, Ⲇ * 98);
		ᐃ.bezierCurveTo(134 * Ⲇ, Ⲇ * 101, 134 * Ⲇ, 101 * Ⲇ, 128 * Ⲇ, 104 * Ⲇ);
		ᐃ.bezierCurveTo(92 * Ⲇ, 104 * Ⲇ, 92 * Ⲇ, Ⲇ * 104, Ⲇ * 56, Ⲇ * 104);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 118, 47 * Ⲇ);
		ᐃ.bezierCurveTo(124.5 * Ⲇ, Ⲇ * 43.5, Ⲇ * 124.5, 43.5 * Ⲇ, 131 * Ⲇ, Ⲇ * 40);
		ᐃ.bezierCurveTo(128 * Ⲇ, Ⲇ * 46, 128 * Ⲇ, Ⲇ * 46, 125 * Ⲇ, Ⲇ * 52);
		ᐃ.bezierCurveTo(Ⲇ * 131, 57 * Ⲇ, 135 * Ⲇ, 64 * Ⲇ, 139 * Ⲇ, 73 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 142.5, 69.5 * Ⲇ, Ⲇ * 142.5, Ⲇ * 69.5, 146 * Ⲇ, Ⲇ * 66);
		ᐃ.bezierCurveTo(Ⲇ * 143.5, Ⲇ * 72.5, Ⲇ * 143.5, Ⲇ * 72.5, Ⲇ * 141, Ⲇ * 79);
		ᐃ.bezierCurveTo(Ⲇ * 142, Ⲇ * 91, 141 * Ⲇ, Ⲇ * 94, Ⲇ * 132, Ⲇ * 98);
		ᐃ.bezierCurveTo(Ⲇ * 117, 102 * Ⲇ, Ⲇ * 126, 108 * Ⲇ, Ⲇ * 142, Ⲇ * 102);
		ᐃ.bezierCurveTo(159 * Ⲇ, Ⲇ * 98, Ⲇ * 164, Ⲇ * 80, Ⲇ * 162, 47 * Ⲇ);
		ᐃ.bezierCurveTo(160 * Ⲇ, ΔⵠΔⵠⵠ * Ⲇ, 150 * Ⲇ, 6 * Ⲇ, Ⲇ * 117, Ⲇ * ⲆⵠⲆᐃ);
		ᐃ.bezierCurveTo(Ⲇ * 44, Ⲇ * ⵠⵠΔΔ, Ⲇ * 35, Ⲇ * ⲆᐃⵠⲆᐃ, Ⲇ * 33, Ⲇ * 37);
		ᐃ.bezierCurveTo(29 * Ⲇ, Ⲇ * 69, 33 * Ⲇ, 88 * Ⲇ, Ⲇ * 44, 96 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 64, Ⲇ * 107, Ⲇ * 70, 102 * Ⲇ, Ⲇ * 54, 93 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 49, 88 * Ⲇ, Ⲇ * 50, Ⲇ * 82, Ⲇ * 53, 77 * Ⲇ);
		ᐃ.bezierCurveTo(51.5 * Ⲇ, 71 * Ⲇ, Ⲇ * 51.5, 71 * Ⲇ, 50 * Ⲇ, Ⲇ * 65);
		ᐃ.bezierCurveTo(53 * Ⲇ, 68.5 * Ⲇ, 53 * Ⲇ, 68.5 * Ⲇ, 56 * Ⲇ, 72 * Ⲇ);
		ᐃ.bezierCurveTo(59 * Ⲇ, 67.5 * Ⲇ, Ⲇ * 59, 67.5 * Ⲇ, 62 * Ⲇ, Ⲇ * 63);
		ᐃ.bezierCurveTo(60.5 * Ⲇ, 59.5 * Ⲇ, 60.5 * Ⲇ, Ⲇ * 59.5, Ⲇ * 59, 56 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 62, Ⲇ * 57, 62 * Ⲇ, 57 * Ⲇ, Ⲇ * 65, Ⲇ * 58);
		ᐃ.bezierCurveTo(Ⲇ * 78, Ⲇ * 35, Ⲇ * 103, 36 * Ⲇ, 117 * Ⲇ, Ⲇ * 47);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ], ᐃⲆ[ⲆᐃᐃΔ], ΔᐃⵠΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(62 * Ⲇ, Ⲇ * 21);
		ᐃ.bezierCurveTo(63 * Ⲇ, Ⲇ * 34, Ⲇ * 64, Ⲇ * 37, 66 * Ⲇ, 40 * Ⲇ);
		ᐃ.bezierCurveTo(54 * Ⲇ, 49 * Ⲇ, 53 * Ⲇ, Ⲇ * 51, Ⲇ * 48, Ⲇ * 58);
		ᐃ.bezierCurveTo(Ⲇ * 44, 51 * Ⲇ, Ⲇ * 42, Ⲇ * 43, 40 * Ⲇ, Ⲇ * 36);
		ᐃ.bezierCurveTo(Ⲇ * 47, Ⲇ * 28, Ⲇ * 52, Ⲇ * 25, 61 * Ⲇ, 21 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(60 * Ⲇ, 29 * Ⲇ);
		ᐃ.bezierCurveTo(62 * Ⲇ, Ⲇ * 25, Ⲇ * 65, 24 * Ⲇ, Ⲇ * 70, Ⲇ * 23);
		ᐃⵠ(ᐃ, ΔᐃᐃⵠⲆ, ᐃⲆ[ⵠⵠᐃΔ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 61, 37 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 63, Ⲇ * 32, Ⲇ * 66, Ⲇ * 32, 71 * Ⲇ, Ⲇ * 32);
		ᐃⵠ(ᐃ, ⲆⲆⲆⲆⲆ, ᐃⲆ[3], ⲆΔⲆᐃΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(52 * Ⲇ, 31 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 50, Ⲇ * 26, 50 * Ⲇ, Ⲇ * 25, 51 * Ⲇ, 23 * Ⲇ);
		ᐃⵠ(ᐃ, ΔⵠⲆᐃᐃ, ᐃⲆ[ᐃΔΔⵠ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(46 * Ⲇ, Ⲇ * 35);
		ᐃ.bezierCurveTo(44 * Ⲇ, 31 * Ⲇ, Ⲇ * 43, 29 * Ⲇ, Ⲇ * 45, 26 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[3], Ⲇ * ⵠⲆⲆΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(58 * Ⲇ, 44 * Ⲇ);
		ᐃ.bezierCurveTo(57 * Ⲇ, Ⲇ * 48, 57 * Ⲇ, Ⲇ * 50, 60 * Ⲇ, Ⲇ * 52);
		ᐃⵠ(ᐃ, ΔⵠΔⲆⲆ, ᐃⲆ[3], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 53, Ⲇ * 48);
		ᐃ.bezierCurveTo(52 * Ⲇ, Ⲇ * 52, Ⲇ * 52, Ⲇ * 54, Ⲇ * 55, Ⲇ * 57);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[3], Ⲇ * ΔᐃΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(46 * Ⲇ, 41 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 41, 42 * Ⲇ, Ⲇ * 39, Ⲇ * 45, Ⲇ * 38, 48 * Ⲇ);
		ᐃⵠ(ᐃ, Ⲇᐃⵠⵠⵠ, ᐃⲆ[3], Ⲇ * ΔᐃΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 48, 48 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 42, Ⲇ * 51, Ⲇ * 42, Ⲇ * 53, 40 * Ⲇ, 55 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⵠΔΔΔ, ᐃⲆ[ᐃΔᐃⲆ], Ⲇ * 4);
		0 == Δᐃ ? (ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 99, 101 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 118.6666259765625, Ⲇ * 104.33331298828125, 124.6666259765625 * Ⲇ, Ⲇ * 116.33331298828125, Ⲇ * 112.6666259765625, Ⲇ * 114.33331298828125), ᐃ.bezierCurveTo(104.6666259765625 * Ⲇ, 112.33331298828125 * Ⲇ, 100.6666259765625 * Ⲇ, 105.33331298828125 * Ⲇ, Ⲇ * 99.6666259765625, Ⲇ * 101.33331298828125), ᐃⵠ(ᐃ, undefined, ᐃⲆ[5], Ⲇ * 6), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 97.6666259765625, 101.33331298828125 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 81.6666259765625, 106.33331298828125 * Ⲇ, Ⲇ * 79.6666259765625, 114.33331298828125 * Ⲇ, 89.6666259765625 * Ⲇ, Ⲇ * 114.33331298828125), ᐃ.bezierCurveTo(95.6666259765625 * Ⲇ, Ⲇ * 111.33331298828125, Ⲇ * 95.6666259765625, Ⲇ * 109.33331298828125, Ⲇ * 98.6666259765625, 102.33331298828125 * Ⲇ), ᐃⵠ(ᐃ, undefined, ᐃⲆ[5], Ⲇ * Ⲇⵠᐃᐃⵠ)) : (ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 103, 100.39999389648438 * Ⲇ), ᐃ.bezierCurveTo(120 * Ⲇ, Ⲇ * 106.39999389648438, 118 * Ⲇ, Ⲇ * 107.39999389648438, Ⲇ * 120, Ⲇ * 111.39999389648438), ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆΔⲆⲆ], 6 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(103 * Ⲇ, Ⲇ * 100.39999389648438), ᐃ.bezierCurveTo(Ⲇ * 90, 103.39999389648438 * Ⲇ, 89 * Ⲇ, 106.39999389648438 * Ⲇ, 87 * Ⲇ, Ⲇ * 112.39999389648438), ᐃⵠ(ᐃ, undefined, ᐃⲆ[5], Ⲇ * ᐃⲆⵠⲆⲆ), ᐃΔⵠ(ᐃ, Ⲇ * 86, Ⲇ * 114.39999389648438, 4.5 * Ⲇ), ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ], ᐃⲆ[5], 6 * Ⲇ), ᐃΔⵠ(ᐃ, 121 * Ⲇ, 114.39999389648438 * Ⲇ, Ⲇ * 4.5), ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[5], Ⲇ * Δⵠᐃⵠⵠ));
		return ⲆⲆ
	}

	function ΔᐃⵠᐃⲆᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 88;
		ⲆⲆ.height = Ⲇ * 88;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 44, Ⲇ * 44);
		ᐃ.rotate(.52);
		ᐃⵠΔⵠ(ᐃ, ⲆΔΔΔΔ, 43 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ΔⲆΔᐃ], 3 * Ⲇ);
		return ⲆⲆ
	}

	function ⵠⵠⵠΔᐃᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 170 * Ⲇ;
		ⲆⲆ.height = 200 * Ⲇ;
		ᐃ.translate(Ⲇ * ᐃΔᐃⲆⲆ, 15 * Ⲇ);
		if (Δᐃ == ΔΔⲆΔ) {
			ᐃ.translate(ⲆᐃⲆ, Ⲇ * -5);
			ᐃΔⵠ(ᐃ, Ⲇ * 77.00003051757812, 104.49432373046875 * Ⲇ, Ⲇ * 71.84010022264724);
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⵠᐃᐃΔᐃ], Ⲇ * ⲆⵠⵠΔⵠ);
			ᐃΔⵠ(ᐃ, Ⲇ * 77.00003051757812, 104.22160339355469 * Ⲇ, Ⲇ * 61.554853586049575);
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆⵠᐃⲆ], 20 * Ⲇ);
			ᐃ.save();
			ᐃ.translate(77.00003051757812 * Ⲇ, 31.267044067382812 * Ⲇ);
			ᐃᐃᐃ(ᐃ, -6 * Ⲇ, -12.5 * Ⲇ, Ⲇ * 12, Ⲇ * 25, Ⲇ * 10);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[Δᐃⵠᐃ], ΔⵠⲆⲆⵠⵠⵠ * Ⲇ);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 77.00003051757812, Ⲇ * 13.267044067382812);
			ᐃᐃᐃ(ᐃ, -ΔⵠΔᐃΔᐃᐃ * Ⲇ, Ⲇ * -10.5, 30 * Ⲇ, 21 * Ⲇ, Ⲇ * 10);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ΔⲆΔᐃⵠ], ᐃⵠⲆᐃΔ * Ⲇ)
		}
		ᐃΔⵠ(ᐃ, Ⲇ * 77.00003051757812, Ⲇ * 104.49432373046875, 71.84010022264724 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆ], ᐃⲆ[ΔΔᐃᐃ], Ⲇ * ⵠⵠᐃΔᐃ);
		ᐃΔⵠ(ᐃ, Ⲇ * 77.00003051757812, 104.22160339355469 * Ⲇ, Ⲇ * 61.554853586049575);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ], ᐃⲆ[2], Ⲇ * ᐃΔᐃⲆᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(18.000030517578125 * Ⲇ, 105.85795593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 134.00003051757812, Ⲇ * 104.85795593261719, Ⲇ * 77.00003051757812, Ⲇ * 104.85795593261719, Ⲇ * 136.00003051757812, 103.85795593261719 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ᐃⵠΔⲆΔΔⵠ * Ⲇ);
		ᐃΔⵠ(ᐃ, 77.00003051757812 * Ⲇ, Ⲇ * 104.6761474609375, Ⲇ * 32.55764119219941);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ], ᐃⲆ[2], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 78.00003051757812, 112.03977966308594 * Ⲇ);
		ᐃ.bezierCurveTo(78.00003051757812 * Ⲇ, 87.03977966308594 * Ⲇ, Ⲇ * 78.00003051757812, 87.03977966308594 * Ⲇ, Ⲇ * 78.00003051757812, Ⲇ * 62.03977966308594);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆ], ᐃⲆ[ⲆᐃᐃΔ], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(78.00003051757812 * Ⲇ, 48.03977966308594 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 82.00003051757812, Ⲇ * 55.53977966308594, 82.00003051757812 * Ⲇ, 55.53977966308594 * Ⲇ, 86.00003051757812 * Ⲇ, Ⲇ * 63.03977966308594);
		ᐃ.bezierCurveTo(Ⲇ * 78.00003051757812, Ⲇ * 63.03977966308594, Ⲇ * 78.00003051757812, Ⲇ * 63.03977966308594, 70.00003051757812 * Ⲇ, Ⲇ * 63.03977966308594);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃ], ᐃⲆ[ⲆⲆᐃⲆ], Ⲇ * ⲆΔⲆᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 80.00003051757812, 111.6761474609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 95.00003051757812, 97.1761474609375 * Ⲇ, Ⲇ * 95.00003051757812, Ⲇ * 97.1761474609375, Ⲇ * 110.00003051757812, Ⲇ * 82.6761474609375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃᐃᐃᐃ], ⲆᐃⲆΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 107.00003051757812, Ⲇ * 76.6761474609375);
		ᐃ.bezierCurveTo(Ⲇ * 111.50003051757812, Ⲇ * 82.6761474609375, Ⲇ * 111.50003051757812, Ⲇ * 82.6761474609375, 116.00003051757812 * Ⲇ, 88.6761474609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 118.50003051757812, Ⲇ * 81.6761474609375, 118.50003051757812 * Ⲇ, 81.6761474609375 * Ⲇ, 121.00003051757812 * Ⲇ, 74.6761474609375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[Δⵠᐃᐃ], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, Ⲇ * 77.00003051757812, Ⲇ * 105.03977966308594, 15.556349186104045 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[2], 4 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(77.00003051757812 * Ⲇ, 31.267044067382812 * Ⲇ);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ᐃΔΔⵠΔ, Ⲇ * -12.5, Ⲇ * ⲆⵠⵠⲆⲆ, 25 * Ⲇ, Ⲇ * ᐃᐃⵠⵠΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔᐃ], ᐃⲆ[ⲆⲆⵠᐃ], ⵠΔⵠΔᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(77.00003051757812 * Ⲇ, Ⲇ * 13.267044067382812);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ⵠⲆᐃⵠⵠ, -10.5 * Ⲇ, 30 * Ⲇ, Ⲇ * 21, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[Δᐃᐃⵠ], 7 * Ⲇ);
		return ⲆⲆ
	}

	function ᐃΔᐃⲆⲆⵠΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 440;
		ⲆⲆ.height = Ⲇ * 388;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(5 * Ⲇ, Ⲇ * 5);
		ᐃΔⵠ(ᐃ, 220 * Ⲇ, Ⲇ * 201, 170.41713528867922 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], 6 * Ⲇ);
		ᐃ.globalAlpha = ΔΔⲆΔ;
		ᐃ.translate(-5 * Ⲇ, -ᐃᐃⲆΔΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 220, 201 * Ⲇ, 170.41713528867922 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[Δᐃᐃⵠ], Ⲇ * ΔᐃⵠΔΔ);
		ᐃΔⵠ(ᐃ, Ⲇ * 220, Ⲇ * 201, Ⲇ * 130);
		ᐃⵠ(ᐃ, ᐃⲆ[11], ᐃⲆ[ΔΔᐃᐃ], Ⲇ * 6);
		ᐃΔⵠ(ᐃ, Ⲇ * 222, Ⲇ * 199, 120.74767078498864 * Ⲇ);
		ᐃⵠ(ᐃ, ⲆⲆⲆⲆⲆ, ᐃⲆ[3], Ⲇ * 40);
		ᐃΔⵠ(ᐃ, Ⲇ * 220, 200 * Ⲇ, 95.44108130150245 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], 15 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(5 * Ⲇ, Ⲇ * 5);
		ᐃΔⵠ(ᐃ, 63 * Ⲇ, 136 * Ⲇ, Ⲇ * 49.193495504995376);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ], ᐃⲆ[ⵠᐃⵠⵠ], Ⲇ * 4);
		ᐃ.globalAlpha = ⲆΔᐃ;
		ᐃ.translate(-ⲆΔⵠᐃⵠ * Ⲇ, -ΔΔⵠΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 63, Ⲇ * 136, Ⲇ * 49.193495504995376);
		ᐃⵠ(ᐃ, ᐃⲆ[8], ᐃⲆ[ᐃⵠΔⲆ], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, Ⲇ * 63, 137 * Ⲇ, 25.632011235952593 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[7], ᐃⲆ[2], 4 * Ⲇ);
		return ⲆⲆ
	}

	function ⲆᐃΔᐃⵠⲆⵠⵠᐃ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 271;
		ⲆⲆ.height = Ⲇ * 366;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 133, Ⲇ * 99);
		ᐃ.bezierCurveTo(Ⲇ * 186, 123 * Ⲇ, 199 * Ⲇ, 152 * Ⲇ, Ⲇ * 209, 169 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 228, 205 * Ⲇ, Ⲇ * 224, 245 * Ⲇ, Ⲇ * 190, 276 * Ⲇ);
		ᐃ.bezierCurveTo(161 * Ⲇ, 296 * Ⲇ, 99 * Ⲇ, Ⲇ * 292, Ⲇ * 79, 274 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 49, Ⲇ * 253, Ⲇ * 47, 214 * Ⲇ, Ⲇ * 50, 197 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 61, 143 * Ⲇ, Ⲇ * 102, Ⲇ * 113, 131 * Ⲇ, 99 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(73 * Ⲇ, 270 * Ⲇ);
		ᐃ.bezierCurveTo(79 * Ⲇ, 280 * Ⲇ, Ⲇ * 77, 280 * Ⲇ, Ⲇ * 78, Ⲇ * 287);
		ᐃ.bezierCurveTo(78 * Ⲇ, 290 * Ⲇ, 83 * Ⲇ, Ⲇ * 291, 82 * Ⲇ, 299 * Ⲇ);
		ᐃ.bezierCurveTo(81 * Ⲇ, 301 * Ⲇ, Ⲇ * 87, 301 * Ⲇ, 92 * Ⲇ, Ⲇ * 314);
		ᐃ.bezierCurveTo(Ⲇ * 94, 319 * Ⲇ, Ⲇ * 100, 321 * Ⲇ, Ⲇ * 107, 320 * Ⲇ);
		ᐃ.bezierCurveTo(111 * Ⲇ, Ⲇ * 323, Ⲇ * 114, 324 * Ⲇ, Ⲇ * 119, 320 * Ⲇ);
		ᐃ.bezierCurveTo(137 * Ⲇ, Ⲇ * 321, Ⲇ * 146, 323 * Ⲇ, 139 * Ⲇ, Ⲇ * 320);
		ᐃ.bezierCurveTo(Ⲇ * 141, 324 * Ⲇ, Ⲇ * 150, 324 * Ⲇ, 153 * Ⲇ, Ⲇ * 320);
		ᐃ.bezierCurveTo(Ⲇ * 168, Ⲇ * 319, 171 * Ⲇ, Ⲇ * 316, 173 * Ⲇ, 307 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 180, 305 * Ⲇ, 180 * Ⲇ, Ⲇ * 301, 178 * Ⲇ, Ⲇ * 296);
		ᐃ.bezierCurveTo(183 * Ⲇ, 296 * Ⲇ, Ⲇ * 185, Ⲇ * 289, Ⲇ * 188, 279 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 171, 286 * Ⲇ, Ⲇ * 149, 290 * Ⲇ, Ⲇ * 132, Ⲇ * 289);
		ᐃ.bezierCurveTo(101 * Ⲇ, Ⲇ * 290, 86 * Ⲇ, Ⲇ * 280, 74 * Ⲇ, 271 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(76 * Ⲇ, 252 * Ⲇ);
		ᐃ.bezierCurveTo(85 * Ⲇ, 294 * Ⲇ, 96 * Ⲇ, 314 * Ⲇ, 103 * Ⲇ, Ⲇ * 314);
		ᐃ.bezierCurveTo(106 * Ⲇ, 316 * Ⲇ, 151 * Ⲇ, 314 * Ⲇ, 156 * Ⲇ, Ⲇ * 314);
		ᐃ.bezierCurveTo(Ⲇ * 169, 317 * Ⲇ, Ⲇ * 182, Ⲇ * 285, 191 * Ⲇ, Ⲇ * 256);
		ᐃ.bezierCurveTo(134.5 * Ⲇ, Ⲇ * 254, 134.5 * Ⲇ, 254 * Ⲇ, 78 * Ⲇ, Ⲇ * 252);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 84, Ⲇ * 257);
		ᐃ.bezierCurveTo(Ⲇ * 122, 273 * Ⲇ, 146 * Ⲇ, Ⲇ * 268, 179 * Ⲇ, 261 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 190, Ⲇ * 258, Ⲇ * 187, Ⲇ * 266, 178 * Ⲇ, 272 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 160, 284 * Ⲇ, Ⲇ * 123, Ⲇ * 282, Ⲇ * 100, Ⲇ * 277);
		ᐃ.bezierCurveTo(Ⲇ * 73, 260 * Ⲇ, Ⲇ * 79, 257 * Ⲇ, 84 * Ⲇ, Ⲇ * 257);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 125, Ⲇ * 65);
		ᐃ.bezierCurveTo(133 * Ⲇ, 45 * Ⲇ, 136 * Ⲇ, Ⲇ * 42, 141 * Ⲇ, 55 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 151, Ⲇ * 96, 164 * Ⲇ, 117 * Ⲇ, 175 * Ⲇ, Ⲇ * 134);
		ᐃ.bezierCurveTo(Ⲇ * 203, 181 * Ⲇ, 207 * Ⲇ, 182 * Ⲇ, Ⲇ * 208, Ⲇ * 215);
		ᐃ.bezierCurveTo(206 * Ⲇ, 240 * Ⲇ, 205 * Ⲇ, Ⲇ * 246, Ⲇ * 184, Ⲇ * 258);
		ᐃ.bezierCurveTo(Ⲇ * 161, 267 * Ⲇ, 131 * Ⲇ, Ⲇ * 272, Ⲇ * 86, Ⲇ * 258);
		ᐃ.bezierCurveTo(Ⲇ * 67, 252 * Ⲇ, 68 * Ⲇ, 239 * Ⲇ, 64 * Ⲇ, 216 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 62, 194 * Ⲇ, Ⲇ * 72, Ⲇ * 169, Ⲇ * 92, Ⲇ * 142);
		ᐃ.bezierCurveTo(106 * Ⲇ, 121 * Ⲇ, Ⲇ * 114, 101 * Ⲇ, Ⲇ * 125, Ⲇ * 65);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 115, Ⲇ * 37);
		ᐃ.bezierCurveTo(116 * Ⲇ, Ⲇ * 28, Ⲇ * 119, Ⲇ * 27, 126 * Ⲇ, Ⲇ * 37);
		ᐃ.bezierCurveTo(Ⲇ * 134, Ⲇ * 48, Ⲇ * 134, Ⲇ * 49, Ⲇ * 132, 59 * Ⲇ);
		ᐃ.bezierCurveTo(131 * Ⲇ, Ⲇ * 67, 127 * Ⲇ, 65 * Ⲇ, Ⲇ * 120, 56 * Ⲇ);
		ᐃ.bezierCurveTo(114 * Ⲇ, Ⲇ * 49, 113 * Ⲇ, 43 * Ⲇ, 115 * Ⲇ, 38 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 146, Ⲇ * 34);
		ᐃ.bezierCurveTo(152 * Ⲇ, 28 * Ⲇ, Ⲇ * 155, Ⲇ * 27, Ⲇ * 157, 39 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 157, 45 * Ⲇ, 157 * Ⲇ, 49 * Ⲇ, Ⲇ * 150, Ⲇ * 56);
		ᐃ.bezierCurveTo(Ⲇ * 141, Ⲇ * 66, 138 * Ⲇ, 66 * Ⲇ, Ⲇ * 138, 57 * Ⲇ);
		ᐃ.bezierCurveTo(137 * Ⲇ, 50 * Ⲇ, 137 * Ⲇ, 47 * Ⲇ, Ⲇ * 141, Ⲇ * 42);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(143 * Ⲇ, Ⲇ * 69);
		ᐃ.bezierCurveTo(Ⲇ * 148, Ⲇ * 56, 156 * Ⲇ, 50 * Ⲇ, 158 * Ⲇ, 58 * Ⲇ);
		ᐃ.bezierCurveTo(159 * Ⲇ, 64 * Ⲇ, 160 * Ⲇ, Ⲇ * 67, 153 * Ⲇ, Ⲇ * 77);
		ᐃ.bezierCurveTo(148 * Ⲇ, 83 * Ⲇ, 145 * Ⲇ, Ⲇ * 84, 143 * Ⲇ, 77 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(149 * Ⲇ, Ⲇ * 92);
		ᐃ.bezierCurveTo(149 * Ⲇ, 89 * Ⲇ, 151 * Ⲇ, Ⲇ * 84, Ⲇ * 156, Ⲇ * 79);
		ᐃ.bezierCurveTo(Ⲇ * 161, Ⲇ * 73, 163 * Ⲇ, Ⲇ * 78, 162 * Ⲇ, 86 * Ⲇ);
		ᐃ.bezierCurveTo(161 * Ⲇ, Ⲇ * 91, 155 * Ⲇ, Ⲇ * 99, 152 * Ⲇ, 98 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(111 * Ⲇ, Ⲇ * 61);
		ᐃ.bezierCurveTo(114 * Ⲇ, Ⲇ * 51, 117 * Ⲇ, Ⲇ * 51, Ⲇ * 124, Ⲇ * 64);
		ᐃ.bezierCurveTo(128 * Ⲇ, 68 * Ⲇ, Ⲇ * 128, 76 * Ⲇ, 126 * Ⲇ, 79 * Ⲇ);
		ᐃ.bezierCurveTo(123 * Ⲇ, 84 * Ⲇ, Ⲇ * 122, 82 * Ⲇ, 115 * Ⲇ, 74 * Ⲇ);
		ᐃ.bezierCurveTo(112 * Ⲇ, 67 * Ⲇ, Ⲇ * 115, 74 * Ⲇ, Ⲇ * 115, 74 * Ⲇ);
		ᐃ.bezierCurveTo(111 * Ⲇ, 68 * Ⲇ, Ⲇ * 111, Ⲇ * 66, 111 * Ⲇ, Ⲇ * 62);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(107 * Ⲇ, Ⲇ * 81);
		ᐃ.bezierCurveTo(Ⲇ * 108, 74 * Ⲇ, 112 * Ⲇ, Ⲇ * 73, 118 * Ⲇ, 84 * Ⲇ);
		ᐃ.bezierCurveTo(122 * Ⲇ, Ⲇ * 88, 122 * Ⲇ, Ⲇ * 93, 121 * Ⲇ, 98 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 114, Ⲇ * 98, 113 * Ⲇ, Ⲇ * 98, 109 * Ⲇ, Ⲇ * 90);
		ᐃ.bezierCurveTo(Ⲇ * 107, 87 * Ⲇ, 106 * Ⲇ, Ⲇ * 85, Ⲇ * 107, Ⲇ * 82);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		return ⲆⲆ
	}

	function ᐃᐃⲆΔⲆⵠΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 170 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 170;
		ᐃ.translate(0, 3 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ΔⵠⲆ;
		ᐃ.save();
		ᐃ.translate(85 * Ⲇ, 95 * Ⲇ);
		ᐃ.rotate(1.4);
		ᐃⵠΔⵠ(ᐃ, ⵠⵠᐃΔᐃ, 60 * Ⲇ, ⲆⵠΔΔⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(Ⲇ * 85, Ⲇ * 82);
		for (var Δᐃ = ⵠΔΔᐃ; Δᐃ < 10; Δᐃ++) {
			ᐃ.rotate(Math.PI / ⵠΔΔΔ);
			ᐃ.save();
			ᐃ.translate(65 * Ⲇ, ⵠⲆᐃ);
			ᐃⵠΔⵠ(ᐃ, 3, 21 * Ⲇ, Ⲇ * 4);
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 4 * Ⲇ);
			ᐃ.restore()
		}
		ᐃ.save();
		ᐃ.translate(Ⲇ * 0, Ⲇ * 0);
		ᐃ.rotate(.2);
		ᐃⵠΔⵠ(ᐃ, 9, Ⲇ * 60, 10 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔⵠⲆⵠⲆ], 4 * Ⲇ);
		ᐃ.rotate(-.32);
		ᐃⵠΔⵠ(ᐃ, ⵠⵠᐃⵠⲆΔᐃ, Ⲇ * 38, Ⲇ * ⵠⲆⲆᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃᐃⵠᐃ], ᐃⲆ[ΔⲆⵠΔΔ], Ⲇ * 4);
		ᐃ.rotate(.68);
		ᐃⵠΔⵠ(ᐃ, 9, 20 * Ⲇ, 8 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[7], ᐃⲆ[8], 6 * Ⲇ);
		ᐃ.restore();
		return ⲆⲆ
	}

	function ᐃⵠᐃᐃⲆⵠᐃⵠⲆ() {
		var Ⲇ = ᐃΔⵠΔ;
		var ⲆΔⵠᐃᐃΔᐃⲆⲆ = (new Date).getTime();
		ᐃⵠⵠⲆᐃⵠⲆ();
		ⵠΔⵠⵠⲆΔΔⲆΔ();
		Ⲇⵠ[ⵠ.ΔⲆⲆΔΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⲆΔΔⵠᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⲆΔΔⵠᐃ][ⵠ.ⵠᐃⲆ] = [];
		for (var Δᐃ = ⲆΔⵠΔ; ⵠ.ⵠⲆⲆΔΔᐃΔ > Δᐃ; Δᐃ++) {
			Ⲇⵠ[ⵠ.ΔⲆⲆΔΔⵠᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⲆⵠᐃᐃⵠⵠΔ(Ⲇ, 4 + Δᐃ, "#59B8CE")));
			Ⲇⵠ[ⵠ.ΔⲆⲆΔΔⵠᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⲆⵠᐃᐃⵠⵠΔ(Ⲇ, 4 + Δᐃ, "#90DDD9")))
		}
		Ⲇⵠ[ⵠ.ⲆᐃⲆⲆⵠⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⲆⲆⵠⵠⵠ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⲆⲆⵠⵠⵠ][ⵠ.ⵠᐃⲆ] = [];
		for (var Δᐃ = 0; ⵠ.ᐃⵠᐃⵠΔⵠⲆ > Δᐃ; Δᐃ++) {
			Ⲇⵠ[ⵠ.ⲆᐃⲆⲆⵠⵠⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⲆⵠᐃᐃⵠⵠΔ(Ⲇ, ⲆⵠⲆⲆⲆ + Δᐃ, Δ[182])));
			Ⲇⵠ[ⵠ.ⲆᐃⲆⲆⵠⵠⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⲆⵠᐃᐃⵠⵠΔ(Ⲇ, ΔⵠⲆⵠⲆ + Δᐃ, Δ[182])))
		}
		Ⲇⵠ[ⵠ.ᐃⲆΔⲆΔⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆΔⲆΔⵠⲆ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆΔⲆΔⵠⲆ][ⵠ.ⵠᐃⲆ] = [];
		for (var Δᐃ = 0; ⵠ.ᐃⵠᐃⵠΔⵠⲆ > Δᐃ; Δᐃ++) {
			Ⲇⵠ[ⵠ.ᐃⲆΔⲆΔⵠⲆ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⲆⵠᐃᐃⵠⵠΔ(Ⲇ, Δᐃᐃⵠᐃ + Δᐃ, "#DDCD8A")));
			Ⲇⵠ[ⵠ.ᐃⲆΔⲆΔⵠⲆ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⲆⵠᐃᐃⵠⵠΔ(Ⲇ, 6 + Δᐃ, "#155E57")))
		}
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔᐃΔ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔᐃΔ][ⵠ.ⵠᐃⲆ] = [];
		for (var Δᐃ = ΔᐃΔ; Δᐃ < ⵠ.ᐃⵠΔⵠⲆⵠΔ; Δᐃ++) {
			Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔᐃΔ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⲆⵠᐃᐃⵠⵠΔ(Ⲇ, ⵠΔΔⵠ + Δᐃ, "#353326")));
			Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔᐃΔ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⲆⵠᐃᐃⵠⵠΔ(Ⲇ, 4 + Δᐃ, "#1D2526")))
		}
		Ⲇⵠ[ⵠ.ⲆⵠⵠⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⵠⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⲆⵠⵠⵠ(Ⲇ * 1.5, ⲆᐃⵠⵠⲆ, ["#ee71a9"]));
		Ⲇⵠ[ⵠ.ⲆⵠⵠⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⲆⵠⵠⵠ(1.5 * Ⲇ, ᐃΔᐃⵠᐃ, ["#ee71a9"]));
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ] = [Ⲇⵠ[ⵠ.ⲆⵠⵠⲆᐃ]];
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ][ⲆⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ][ᐃⲆᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ][ΔⵠⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ][ΔᐃΔⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ][ᐃⲆⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⲆⵠⵠⵠ(1.5 * Ⲇ, true, ["#e2d63b"]));
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ][ΔⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⲆⵠⵠⵠ(1.5 * Ⲇ, true, ["#e2d63b"]));
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ][ᐃⲆᐃⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⲆⵠⵠⵠ(Ⲇ * 1.5, ΔᐃⲆⵠΔ, ["#309cbd"]));
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ][ΔΔᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⲆⵠⵠⵠ(1.5 * Ⲇ, true, ["#309cbd"]));
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ][ⲆΔⲆΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⲆⵠⵠⵠ(1.5 * Ⲇ, ΔⵠⲆΔⲆ, ["#cd232d"]));
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ][ᐃΔΔΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⲆⵠⵠⵠ(Ⲇ * 1.5, true, ["#cd232d"]));
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ][4][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⲆⵠⵠⵠ(1.5 * Ⲇ, true, ["#42b672"]));
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ][ΔⵠⲆⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⲆⵠⵠⵠ(Ⲇ * 1.5, true, ["#42b672"]));
		var ⲆⲆⵠᐃᐃⵠΔΔᐃ = ⵠᐃΔᐃ.ᐃᐃΔΔⲆⲆⵠ("cti", ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[194]][ᐃⲆᐃᐃᐃᐃⵠ[216]]);
		ⲆⲆⵠᐃᐃⵠΔΔᐃ ? document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("version")[ᐃⲆᐃᐃᐃᐃⵠ[83]] += "[CTI]" : Δᐃⵠ = function(ᐃᐃᐃⵠ) {
			ᐃᐃᐃⵠ.loaded = 1;
			return ᐃᐃᐃⵠ
		};
		Ⲇⵠ[ⵠ.ⵠΔⲆⵠⵠⵠⵠ] = Δᐃⵠ(ᐃⵠᐃⵠⵠᐃᐃⵠⵠ());
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⵠⲆᐃᐃᐃᐃ(1.1 * Ⲇ, ΔⲆᐃⵠΔ, [Δ[519], "#c3d1cb", Δ[564]])));
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⵠⲆᐃᐃᐃᐃ(Ⲇ * .9, ᐃⲆⵠⵠᐃ, [Δ[519], "#c3d1cb", Δ[564]])));
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⵠⲆᐃᐃᐃᐃ(Ⲇ * .6, false, [Δ[519], "#c3d1cb", Δ[564]])));
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⵠⲆᐃᐃᐃᐃ(Ⲇ * 1.1, false, [Δ[421], "#3c8e88", "#40a39b"])));
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⵠⲆᐃᐃᐃᐃ(.9 * Ⲇ, ΔΔᐃⵠᐃ, [Δ[421], "#3c8e88", "#40a39b"])));
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⵠⲆᐃᐃᐃᐃ(.6 * Ⲇ, ⲆᐃⲆⲆΔ, [Δ[421], "#3c8e88", "#40a39b"])));
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ΔⲆⵠᐃⵠ(1.5 * Ⲇ, false, [Δ[145], Δ[429], Δ[188]])));
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ΔⲆⵠᐃⵠ(Ⲇ * 1.3, false, [Δ[145], Δ[429], Δ[188]])));
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ΔⲆⵠᐃⵠ(Ⲇ * 1.1, ΔᐃⲆⵠⵠ, [Δ[145], Δ[429], Δ[188]])));
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ΔⲆⵠᐃⵠ(Ⲇ * 1.5, ΔⲆΔΔᐃ, [Δ[204], "#1b4444", "#16605a"])));
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ΔⲆⵠᐃⵠ(1.3 * Ⲇ, ΔᐃⲆⵠⵠ, [Δ[204], "#1b4444", "#16605a"])));
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ΔⲆⵠᐃⵠ(Ⲇ * 1.1, ΔΔΔⵠⵠ, [Δ[204], "#1b4444", "#16605a"])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⵠⲆⵠ(Ⲇ * 1.1, ⲆΔⲆⲆΔ, [Δ[528], Δ[367], Δ[216]])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⵠⲆⵠ(.9 * Ⲇ, false, [Δ[528], Δ[367], Δ[216]])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⵠⲆⵠ(Ⲇ * .7, false, [Δ[528], Δ[367], Δ[216]])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⵠⲆⵠ(Ⲇ * 1.1, false, [Δ[204], Δ[137], "#57bcb5"])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⵠⲆⵠ(.9 * Ⲇ, ΔΔΔⵠⵠ, [Δ[204], Δ[137], "#57bcb5"])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⵠⲆⵠ(Ⲇ * .7, ⲆΔΔⵠⵠ, [Δ[204], Δ[137], "#57bcb5"])));
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⲆⵠΔΔⵠΔ;
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆᐃⲆⵠΔᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠΔⲆᐃΔⲆⵠ(Ⲇ * .6, [Δ[314]]));
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠΔⲆᐃΔⲆⵠ(.6 * Ⲇ, [Δ[204]]));
		Ⲇⵠ[ⵠ.ᐃⲆⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⲆⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔᐃⵠᐃΔᐃⲆ(Ⲇ * .6, [Δ[200], Δ[47]]));
		Ⲇⵠ[ⵠ.ᐃⲆⲆⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔᐃⵠᐃΔᐃⲆ(Ⲇ * .6, ["#1b1e30", "#161921"]));
		Ⲇⵠ[ⵠ.ΔΔⵠᐃΔⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔΔⵠᐃΔⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⲆΔΔΔⲆΔ(.6 * Ⲇ, true, [Δ[314], "#759e6e", "#55604b", "#7d7252", "#575043"]));
		Ⲇⵠ[ⵠ.ΔΔⵠᐃΔⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⲆΔΔΔⲆΔ(Ⲇ * .6, true, [Δ[204], "#11635e", "#02373e", "#0b524d", "#07423f"]));
		Ⲇⵠ[ⵠ.ⲆⵠᐃⵠΔᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠᐃⵠΔᐃΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔᐃΔⲆⲆⲆΔ(.6 * Ⲇ, true, [Δ[314], "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", Δ[93]]));
		Ⲇⵠ[ⵠ.ⲆⵠᐃⵠΔᐃΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔᐃΔⲆⲆⲆΔ(.6 * Ⲇ, ⲆⲆᐃᐃⵠ, [Δ[204], "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", Δ[93]]));
		Ⲇⵠ[ⵠ.ⲆⲆⵠᐃΔᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⵠᐃΔᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔⲆⲆᐃΔⵠ(Ⲇ * .4, [Δ[314], "#759e6e", "#55604b"]));
		Ⲇⵠ[ⵠ.ⲆⲆⵠᐃΔᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔⲆⲆᐃΔⵠ(.4 * Ⲇ, [Δ[204], "#11635e", "#02373e"]));
		Ⲇⵠ[ⵠ.ᐃⵠⵠⵠⵠΔⵠ] = Δᐃⵠ(ᐃⵠⵠⲆⵠΔⲆ(.6 * Ⲇ, [Δ[60]]));
		Ⲇⵠ[ⵠ.ⲆΔΔᐃΔΔⲆ] = Δᐃⵠ(ᐃⵠⵠⲆⵠΔⲆ(Ⲇ * .6, ["#DBE71C"]));
		Ⲇⵠ[ⵠ.ⵠⵠⲆⵠⵠⲆᐃ] = Δᐃⵠ(ᐃⵠⵠⲆⵠΔⲆ(Ⲇ * .6, ["#00BB00"]));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ].push(ⲆⵠΔΔⲆ(1.1 * Ⲇ, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], ΔⲆᐃⵠΔ, 0));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ].push(ⲆⵠΔΔⲆ(1.1 * Ⲇ, [Δ[529], "#0f9862", "#0b8750", "#26ab6e"], ⲆⵠᐃⵠⲆ, 0));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ].push(ⲆⵠΔΔⲆ(Ⲇ * .9, [Δ[529], "#0e7d4c", "#258a4d", "#248c4d"], ⲆⵠΔᐃⵠ, ⵠⲆΔⵠ));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ].push(ⲆⵠΔΔⲆ(Ⲇ * .9, [Δ[529], Δ[543], "#1f7b43", "#1f7b43"], true, ⵠΔΔᐃ));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ].push(ⲆⵠΔΔⲆ(.7 * Ⲇ, [Δ[529], "#124c34", "#0E3D26", "#155136"], false, ⲆᐃⲆ));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ].push(ⲆⵠΔΔⲆ(.7 * Ⲇ, [Δ[529], "#124c34", "#0E3D26", "#155136"], ⵠⵠᐃⵠⵠ, ΔᐃΔ));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ].push(ⲆⵠΔΔⲆ(Ⲇ * 1.1, [Δ[204], Δ[230], Δ[295], Δ[499]], ΔΔΔⵠⵠ, ⵠΔⵠⲆ));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ].push(ⲆⵠΔΔⲆ(Ⲇ * 1.1, [Δ[204], Δ[230], Δ[295], Δ[499]], ΔᐃⲆⵠΔ, 0));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ].push(ⲆⵠΔΔⲆ(Ⲇ * .9, [Δ[204], "#0b3534", "#144443", "#174240"], ΔΔΔⵠⵠ, ⵠⵠΔᐃ));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ].push(ⲆⵠΔΔⲆ(.9 * Ⲇ, [Δ[204], "#0b3534", "#144443", "#174240"], ⲆⲆⵠⵠⲆ, ΔᐃΔ));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ].push(ⲆⵠΔΔⲆ(.7 * Ⲇ, [Δ[204], "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ].push(ⲆⵠΔΔⲆ(.7 * Ⲇ, [Δ[204], "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], ᐃⲆⲆⲆΔ, 0));
		Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠᐃⵠΔΔⵠΔ(ᐃⲆᐃⲆᐃⲆⲆ(1.1 * Ⲇ, [Δ[529], Δ[573], Δ[92], Δ[543], "#08562e", Δ[53]], ⲆΔᐃⵠᐃ), Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][0])));
		Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠᐃⵠΔΔⵠΔ(ᐃⲆᐃⲆᐃⲆⲆ(1.1 * Ⲇ, [Δ[529], Δ[573], Δ[92], Δ[543], "#08562e", Δ[53]], ᐃⲆᐃᐃΔ), Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][1])));
		Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠᐃⵠΔΔⵠΔ(ᐃⲆᐃⲆᐃⲆⲆ(Ⲇ * 1.1, [Δ[204], Δ[386], Δ[24], "#0a3333", Δ[86], Δ[86]], false), Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][0])));
		Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠᐃⵠΔΔⵠΔ(ᐃⲆᐃⲆᐃⲆⲆ(Ⲇ * 1.1, [Δ[204], Δ[386], Δ[24], "#0a3333", Δ[86], Δ[86]], ᐃⲆᐃᐃΔ), Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][ⵠⵠⵠΔ])));
		Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠᐃⵠΔΔⵠΔ(ᐃⲆᐃⲆᐃⲆⲆ(.9 * Ⲇ, [Δ[529], Δ[573], Δ[92], Δ[543], Δ[53], Δ[53]], ΔΔᐃⵠᐃ), Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][2])));
		Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠᐃⵠΔΔⵠΔ(ᐃⲆᐃⲆᐃⲆⲆ(Ⲇ * .9, [Δ[529], Δ[573], Δ[92], Δ[543], Δ[53], Δ[53]], ᐃΔᐃⵠᐃ), Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][ⲆᐃᐃΔ])));
		Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠᐃⵠΔΔⵠΔ(ᐃⲆᐃⲆᐃⲆⲆ(.9 * Ⲇ, [Δ[204], Δ[386], Δ[24], "#082b29", Δ[546], Δ[546]], false), Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][2])));
		Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠᐃⵠΔΔⵠΔ(ᐃⲆᐃⲆᐃⲆⲆ(.9 * Ⲇ, [Δ[204], Δ[386], Δ[24], "#082b29", Δ[546], Δ[546]], ⲆⲆⵠⵠⲆ), Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][ᐃⲆᐃⲆ])));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][5] = Δᐃⵠ(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][5]);
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][4] = Δᐃⵠ(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][ⵠΔΔⵠ]);
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][ΔⵠᐃⲆ] = Δᐃⵠ(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][3]);
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][2] = Δᐃⵠ(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][ᐃᐃᐃᐃ]);
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][1] = Δᐃⵠ(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][1]);
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][0] = Δᐃⵠ(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ΔΔΔ][0]);
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][ᐃΔᐃⲆⲆ] = Δᐃⵠ(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][5]);
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][4] = Δᐃⵠ(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][ᐃᐃᐃΔⵠ]);
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][3] = Δᐃⵠ(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][ⲆΔΔⲆ]);
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][2] = Δᐃⵠ(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][2]);
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][1] = Δᐃⵠ(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][1]);
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][0] = Δᐃⵠ(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ][ᐃⲆⵠΔ]);
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃΔⲆΔⲆ, ᐃⵠΔⵠⲆ(Ⲇ * .75, true, [Δ[314], Δ[391], Δ[314], Δ[573], Δ[92], Δ[573], Δ[92]])));
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃΔⲆΔⲆ, ᐃⵠΔⵠⲆ(Ⲇ * .75, ᐃⲆᐃⵠΔ, [Δ[204], Δ[391], Δ[204], Δ[471], Δ[492], Δ[471], Δ[492]])));
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(4, ᐃⵠΔⵠⲆ(.75 * Ⲇ, ΔⵠⲆΔⲆ, [Δ[314], Δ[391], Δ[314], Δ[573], Δ[92], Δ[318], Δ[175]])));
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ⲆⵠⲆᐃ, ᐃⵠΔⵠⲆ(Ⲇ * .75, ⵠⵠᐃⵠⵠ, [Δ[204], Δ[391], Δ[204], Δ[471], Δ[492], Δ[85], Δ[487]])));
		Ⲇⵠ[ⵠ.Ⲇⵠᐃᐃᐃ] = [];
		Ⲇⵠ[ⵠ.Ⲇⵠᐃᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ⲆΔⲆᐃΔ, ᐃⵠΔⵠⲆ(.75 * Ⲇ, ⲆⲆⵠⵠⲆ, [Δ[314], Δ[391], Δ[314], Δ[301], Δ[305], Δ[277], Δ[427]])));
		Ⲇⵠ[ⵠ.Ⲇⵠᐃᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ⲆⵠⲆⲆⲆ, ᐃⵠΔⵠⲆ(.75 * Ⲇ, ⲆⲆᐃᐃⵠ, [Δ[204], Δ[391], Δ[204], Δ[250], Δ[250], Δ[435], Δ[474]])));
		Ⲇⵠ[ⵠ.ⵠᐃⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ⲆⵠⲆᐃ, ᐃⵠΔⵠⲆ(.75 * Ⲇ, true, [Δ[314], Δ[391], Δ[314], Δ[170], Δ[534], Δ[77], Δ[116]])));
		Ⲇⵠ[ⵠ.ⵠᐃⲆⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ⲆΔⵠᐃΔ, ᐃⵠΔⵠⲆ(Ⲇ * .75, ᐃⲆᐃⵠΔ, [Δ[204], Δ[391], Δ[204], Δ[406], Δ[555], Δ[312], Δ[54]])));
		Ⲇⵠ[ⵠ.ⲆᐃΔⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃΔⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃᐃⲆⵠ, ᐃⵠΔⵠⲆ(.75 * Ⲇ, true, [Δ[314], Δ[391], Δ[314], Δ[170], Δ[534], Δ[321], Δ[208]])));
		Ⲇⵠ[ⵠ.ⲆᐃΔⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(4, ᐃⵠΔⵠⲆ(Ⲇ * .75, true, [Δ[204], Δ[391], Δ[204], Δ[406], Δ[555], Δ[71], Δ[173]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃⵠᐃⲆ, ΔΔΔⲆⵠᐃⲆ(.17 * Ⲇ, true, [Δ[314], "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", Δ[400], "#d6d1d1"])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ΔΔΔⲆⵠᐃⲆ(.17 * Ⲇ, true, [Δ[314], Δ[471], Δ[492], "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(Ⲇⵠᐃᐃ, ⵠΔᐃⲆΔᐃΔ(.32 * Ⲇ, ᐃⲆΔⵠΔ, [Δ[314], Δ[153], Δ[175], "#eb2933", "#57b74e", "#42a54d", Δ[12], Δ[282]])));
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃᐃΔⵠ, ⵠΔᐃⲆΔᐃΔ(Ⲇ * .42, true, [Δ[314], Δ[85], Δ[487], Δ[471], Δ[492]])));
		Ⲇⵠ[ⵠ.ΔᐃΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ΔᐃΔΔΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ⲆⵠⵠΔⲆⲆⵠ(.4 * Ⲇ, ΔⵠⲆΔⲆ, [Δ[314], Δ[426], "#493425", Δ[384], "#5e4530", "#473221", "#745840"])));
		Ⲇⵠ[ⵠ.ΔᐃΔΔΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ⲆⵠⵠΔⲆⲆⵠ(.4 * Ⲇ, ⵠⵠᐃⵠⵠ, [Δ[314], "#0b3d3a", "#092b2a", "#144642", "#082927", Δ[177]])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(Ⲇⵠᐃᐃ, ⵠᐃᐃⲆΔᐃᐃ(.4 * Ⲇ, true, [Δ[314], Δ[318], Δ[175], "#b1afaf", "#493d36", "#332b28"])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ⵠᐃᐃⲆΔᐃᐃ(.4 * Ⲇ, true, [Δ[314], Δ[85], Δ[487], "#5d757e", Δ[471], Δ[492]])));
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ᐃᐃⲆᐃΔⵠᐃ(.4 * Ⲇ, true, [Δ[314], Δ[277], Δ[427], Δ[277], Δ[301], Δ[305]])));
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃΔΔΔ, ᐃᐃⲆᐃΔⵠᐃ(Ⲇ * .4, true, [Δ[314], Δ[435], Δ[474], "#54bf96", Δ[250], Δ[540]])));
		Ⲇⵠ[ⵠ.ᐃΔᐃᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃΔᐃᐃⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ⵠᐃⵠΔ, ⵠⲆΔⵠⲆⵠΔ(.4 * Ⲇ, ⵠⲆΔΔᐃ, [Δ[314], "#6ad9e8", Δ[116], "#95e9f5", "#022320", "#011e19", Δ[93]])));
		Ⲇⵠ[ⵠ.ᐃΔᐃᐃⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ⵠⲆΔⵠⲆⵠΔ(.4 * Ⲇ, true, [Δ[314], Δ[312], Δ[54], "#93eaf1", Δ[406], Δ[555]])));
		Ⲇⵠ[ⵠ.ⵠΔⵠⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⵠⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃΔᐃⲆ, ⵠΔⲆᐃⲆⵠΔ(Ⲇ * .4, true, [Δ[314], Δ[321], Δ[208], "#cc81e7", Δ[170], Δ[534], Δ[93]])));
		Ⲇⵠ[ⵠ.ⵠΔⵠⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ⵠⵠᐃΔ, ⵠΔⲆᐃⲆⵠΔ(.4 * Ⲇ, true, [Δ[314], Δ[71], Δ[173], "#966de6", Δ[406], Δ[555]])));
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃᐃⵠΔⵠⵠⵠ(Ⲇ * .9, false, ["#0d4f35"], Ⲇᐃⵠⵠ)));
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃᐃⵠΔⵠⵠⵠ(Ⲇ * .9, false, ["#0d4f35"], 1)));
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃᐃⵠΔⵠⵠⵠ(Ⲇ * .9, ⲆᐃⲆⲆΔ, ["#0d4f35"], 2)));
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃᐃⵠΔⵠⵠⵠ(.9 * Ⲇ, false, ["#053339"], ⲆΔⵠΔ)));
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃᐃⵠΔⵠⵠⵠ(.9 * Ⲇ, false, ["#053339"], 1)));
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃᐃⵠΔⵠⵠⵠ(Ⲇ * .9, false, ["#053339"], ⲆᐃⵠⲆ)));
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠᐃΔⲆⲆⵠΔ(.8 * Ⲇ, ["#241301", "#ba6b0e", "#6d3f04"])));
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠᐃΔⲆⲆⵠΔ(Ⲇ * .8, ["#292002", "#ba930e", "#6d5704"])));
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠᐃΔⲆⲆⵠΔ(.9 * Ⲇ, ["#052919", "#0a4738", "#06321f"])));
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠᐃΔⲆⲆⵠΔ(Ⲇ * .8, ["#052918", "#08491c", "#063417"])));
		Ⲇⵠ[ⵠ.ᐃΔΔⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃΔΔⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(Math.PI / 2, ⲆΔⲆᐃᐃⵠⵠ(.25 * Ⲇ, ᐃΔᐃⵠᐃ, [Δ[314], Δ[42], Δ[119], Δ[17]])));
		Ⲇⵠ[ⵠ.ᐃΔΔⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(Math.PI / ⲆⲆᐃⲆ, ⲆΔⲆᐃᐃⵠⵠ(Ⲇ * .25, ᐃⲆⲆⲆΔ, [Δ[204], Δ[484], Δ[129], Δ[495]])));
		Ⲇⵠ[ⵠ.ⵠⲆΔⵠΔΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆΔⵠΔΔⵠ].push(Δᐃⵠ(ⲆΔᐃⵠΔᐃⲆ(Ⲇ * .25, [Δ[42], Δ[119], Δ[17]], ⵠᐃΔ)));
		Ⲇⵠ[ⵠ.ⵠⲆΔⵠΔΔⵠ].push(Δᐃⵠ(ⲆΔᐃⵠΔᐃⲆ(.25 * Ⲇ, ["#4f371e", "#624d30", "#5e472c", Δ[547]], ᐃⲆΔ)));
		Ⲇⵠ[ⵠ.ⵠⲆΔⵠΔΔⵠ].push(Δᐃⵠ(ⲆΔᐃⵠΔᐃⲆ(Ⲇ * .25, ["#382715", "#4e3c25", "#473620", Δ[254]], 2)));
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⵠ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⵠ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃΔᐃᐃ(Math.PI / 2, ⵠⵠΔᐃⵠΔⵠ(.25 * Ⲇ, ⵠΔⵠᐃᐃ, [Δ[314], Δ[42], Δ[119], Δ[17], Δ[157]], 1))));
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃΔᐃᐃ(Math.PI / 2, ⵠⵠΔᐃⵠΔⵠ(Ⲇ * .25, false, [Δ[204], Δ[484], Δ[129], Δ[495], Δ[157]], ᐃⲆΔ))));
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃΔᐃᐃ(Math.PI / ᐃᐃᐃᐃ, ⵠⵠΔᐃⵠΔⵠ(Ⲇ * .25, false, [Δ[314], Δ[42], Δ[119], Δ[17], "#4f9246"], ᐃᐃᐃᐃ))));
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃΔᐃᐃ(Math.PI / 2, ⵠⵠΔᐃⵠΔⵠ(Ⲇ * .25, false, [Δ[204], Δ[484], Δ[129], Δ[495], "#4f9246"], Ⲇⵠᐃⵠ))));
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃΔᐃᐃ(Math.PI / 2, ⵠⵠΔᐃⵠΔⵠ(Ⲇ * .25, ΔΔΔⵠⵠ, [Δ[314], Δ[42], Δ[119], Δ[ΔᐃᐃΔⵠⵠⵠ], Δ[157], Δ[153]], 3))));
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃΔᐃᐃ(Math.PI / 2, ⵠⵠΔᐃⵠΔⵠ(Ⲇ * .25, ⲆΔᐃⵠᐃ, [Δ[204], Δ[484], Δ[129], Δ[495], Δ[157], Δ[153]], ΔⲆΔΔ))));
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃΔᐃᐃ(Math.PI / 2, ⵠⵠΔᐃⵠΔⵠ(.25 * Ⲇ, ᐃⵠⵠⲆⵠ, [Δ[314], Δ[42], Δ[119], Δ[ᐃⵠⲆΔᐃΔⲆ], Δ[157], "#362513"], 4))));
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃΔᐃᐃ(Math.PI / ᐃⲆᐃⵠ, ⵠⵠΔᐃⵠΔⵠ(Ⲇ * .25, ⵠΔΔᐃᐃ, [Δ[204], Δ[484], Δ[129], Δ[495], Δ[157], "#664d2e"], 4))));
		Ⲇⵠ[ⵠ.ⲆⲆⲆᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⲆᐃⵠ][ⵠ.ΔΔΔ] = [Δᐃⵠ(ⵠⵠⲆᐃⵠ(1.2 * Ⲇ, true, [Δ[529], "#0b8052", Δ[434]]))];
		Ⲇⵠ[ⵠ.ⲆⲆⲆᐃⵠ][ⵠ.ⵠᐃⲆ] = [Δᐃⵠ(ⵠⵠⲆᐃⵠ(1.2 * Ⲇ, true, [Δ[204], "#084442", Δ[334]]))];
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠⵠⲆᐃⵠ(Ⲇ * .8, ᐃⲆᐃⵠΔ, [Δ[529], Δ[453], Δ[294]]));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠⵠⲆᐃⵠ(Ⲇ * .8, true, [Δ[204], Δ[320], Δ[239]]));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠΔⲆΔᐃⵠ(Ⲇ * .5, true, [Δ[143], Δ[460], "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠΔⲆΔᐃⵠ(.5 * Ⲇ, true, [Δ[204], "#0a3429", Δ[129], "#082f25", "#082925", "#0a3630"]));
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆΔ] = [];
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠⲆΔΔⵠⵠ(.5 * Ⲇ, true, [Δ[143], Δ[297], "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠⲆΔΔⵠⵠ(Ⲇ * .5, true, [Δ[204], "#2b5254", "#264a46", "#396260", "#244743"]));
		Ⲇⵠ[ⵠ.ⵠΔⵠΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⵠΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠᐃⲆΔᐃⲆⲆ(.5 * Ⲇ, true, [Δ[143], "#349970", "#245c45", "#348361", Δ[297], Δ[400]]));
		Ⲇⵠ[ⵠ.ⵠΔⵠΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠᐃⲆΔᐃⲆⲆ(Ⲇ * .5, ᐃᐃᐃΔΔ, [Δ[204], "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
		Ⲇⵠ[ⵠ.ΔⲆᐃⵠⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ΔⲆᐃⵠⲆⲆΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠⵠⲆᐃⵠ(Ⲇ * .8, ᐃⲆᐃᐃΔ, [Δ[143], "#0b8052", Δ[434]]));
		Ⲇⵠ[ⵠ.ΔⲆᐃⵠⲆⲆΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠⵠⲆᐃⵠ(Ⲇ * .8, ᐃⲆᐃᐃΔ, [Δ[204], "#084442", Δ[334]]));
		Ⲇⵠ[ⵠ.ⲆΔΔᐃΔⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆΔΔᐃΔⲆⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠΔⲆΔᐃⵠ(Ⲇ * .5, true, [Δ[143], Δ[453], Δ[294], "#5e5823", "#86683e", "#6e502d"]));
		Ⲇⵠ[ⵠ.ⲆΔΔᐃΔⲆⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠΔⲆΔᐃⵠ(Ⲇ * .5, ᐃⲆⵠⵠΔⲆⲆ, [Δ[204], Δ[320], Δ[239], "#0c301e", "#062a1f", "#083b2b"]));
		Ⲇⵠ[ⵠ.ᐃΔΔᐃⲆⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃΔΔᐃⲆⲆⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠⲆΔΔⵠⵠ(.5 * Ⲇ, true, [Δ[143], "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
		Ⲇⵠ[ⵠ.ᐃΔΔᐃⲆⲆⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠⲆΔΔⵠⵠ(.5 * Ⲇ, ⲆⲆⵠⲆᐃ, [Δ[204], "#164a44", "#124244", "#13373b", "#133e3e"]));
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆᐃΔΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆᐃΔΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠᐃⲆΔᐃⲆⲆ(.5 * Ⲇ, true, [Δ[143], "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆᐃΔΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠᐃⲆΔᐃⲆⲆ(.5 * Ⲇ, true, [Δ[204], "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
		Ⲇⵠ[ⵠ.ΔᐃᐃⵠΔ] = [];
		Ⲇⵠ[ⵠ.ΔᐃᐃⵠΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔⲆⲆΔⵠΔ(.45 * Ⲇ, ⲆⵠᐃⵠⲆ, [Δ[529], Δ[ΔΔΔⲆΔ], "#98171e", "#22a84f", "#1f924a"]));
		Ⲇⵠ[ⵠ.ΔᐃᐃⵠΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔⲆⲆΔⵠΔ(.45 * Ⲇ, true, [Δ[529], "#19386e", "#0b2752", "#124252", "#0d3441"]));
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠᐃᐃΔ] = Δᐃⵠ(ⲆΔⲆⲆΔⵠΔ(.65 * Ⲇ, ᐃⲆᐃⵠΔ, ["rgba(14, 48, 34, 0)", Δ[60], Δ[60], Δ[60], Δ[60]]));
		Ⲇⵠ[ⵠ.ᐃᐃΔᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃΔᐃⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠⲆΔᐃⵠ(Ⲇ * 1.4, ⲆΔᐃⵠᐃ, [Δ[ᐃᐃⵠⲆⲆⲆⲆ], Δ[282]]));
		Ⲇⵠ[ⵠ.ᐃᐃΔᐃⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠⲆΔᐃⵠ(1.4 * Ⲇ, ΔⲆΔΔᐃ, ["#46195e", "#744188"]));
		Ⲇⵠ[ⵠ.ⲆⵠⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⲆⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃᐃΔⲆΔⵠΔ(Ⲇ * .9, ⵠΔΔᐃᐃ, [Δ[132], "#ec8d35", "#e96132"]));
		Ⲇⵠ[ⵠ.ⲆⵠⲆⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃᐃΔⲆΔⵠΔ(.9 * Ⲇ, ΔΔᐃⵠᐃ, ["#efdb7b", "#efe854", "#e8ef62"]));
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔΔⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔΔⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔⵠⲆⵠⵠΔ(Ⲇ * .9, false, [Δ[573], Δ[92]]));
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔΔⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔⵠⲆⵠⵠΔ(Ⲇ * .9, ⲆⲆⲆΔᐃ, ["#282404", "#0a0a01"]));
		Ⲇⵠ[ⵠ.ΔⵠⲆⵠΔⵠΔ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⲆⵠΔⵠΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⲆᐃᐃⲆᐃⲆ(Ⲇ * .9, false, [Δ[573], Δ[92]]));
		Ⲇⵠ[ⵠ.ΔⵠⲆⵠΔⵠΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⲆᐃᐃⲆᐃⲆ(Ⲇ * .9, ⲆⵠⵠΔᐃ, ["#282404", "#0a0a01"]));
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃΔⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃΔⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⲆⵠᐃᐃⲆᐃ(Ⲇ * .9, false, [Δ[132]]));
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃΔⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⲆⵠᐃᐃⲆᐃ(.9 * Ⲇ, ⵠΔⵠᐃᐃ, ["#fffabb"]));
		Ⲇⵠ[ⵠ.ⲆᐃⲆΔⵠΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⲆΔⵠΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠⲆᐃⵠᐃΔΔ(.9 * Ⲇ, ⲆⵠⵠΔᐃ, [Δ[132]]));
		Ⲇⵠ[ⵠ.ⲆᐃⲆΔⵠΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠⲆᐃⵠᐃΔΔ(.9 * Ⲇ, ⲆΔⲆⲆΔ, ["#fffabb"]));
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠⲆⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠⲆⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⲆⵠᐃᐃⲆᐃ(Ⲇ * .9, ⲆΔⲆⲆΔ, [Δ[132]]));
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠⲆⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⲆⵠᐃᐃⲆᐃ(.9 * Ⲇ, false, ["rgba(255, 84, 0, 1)"]));
		Ⲇⵠ[ⵠ.ⲆⲆⵠⵠᐃⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⵠⵠᐃⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠⲆᐃⵠᐃΔΔ(Ⲇ * .9, false, [Δ[132]]));
		Ⲇⵠ[ⵠ.ⲆⲆⵠⵠᐃⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠⲆᐃⵠᐃΔΔ(Ⲇ * .9, ΔⲆΔΔᐃ, ["#ff5704"]));
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⲆⲆᐃ] = Δᐃⵠ(ⲆᐃⵠⲆⵠᐃΔ(Ⲇ, Δ[153], 1));
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⵠⵠᐃ] = Δᐃⵠ(ⲆᐃⵠⲆⵠᐃΔ(Ⲇ * 1.5, Δ[153], ⲆⵠⲆ));
		Ⲇⵠ[ⵠ.ⲆᐃⵠⲆΔᐃⵠ] = Δᐃⵠ(ⲆΔⵠⵠⵠ(Ⲇ, "Your score:", ᐃΔΔᐃᐃ * Ⲇ, Δ[560]));
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆΔⵠ] = Δᐃⵠ(ⵠⲆᐃⵠⲆΔᐃⲆⲆ(Ⲇ * .9, [Δ[329], Δ[207], "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
		Ⲇⵠ[ⵠ.ᐃⲆⲆΔᐃᐃᐃ] = ΔⲆ.ᐃⲆⲆΔᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ᐃᐃᐃⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃᐃⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃⵠᐃⲆΔΔΔ(Ⲇ * 1.5, true, [Δ[314], Δ[329], Δ[207], Δ[ΔᐃΔⵠ], Δ[224], Δ[14], Δ[169], Δ[217], Δ[329], Δ[207]]));
		Ⲇⵠ[ⵠ.ᐃᐃᐃⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃⵠᐃⲆΔΔΔ(Ⲇ * 1.5, ᐃⲆᐃᐃΔ, [Δ[204], Δ[130], Δ[126], Δ[433], "#225755", "#07393D", "#07454a", "#0c484d", Δ[130], Δ[126]]));
		Ⲇⵠ[ⵠ.ΔⲆⵠΔΔᐃΔ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠΔΔᐃΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃⲆΔᐃⵠⵠⲆ(Ⲇ * 2, ⵠΔᐃⵠΔ, [Δ[314], Δ[329], Δ[207], Δ[4], Δ[224], Δ[ⲆⲆⲆⵠᐃⲆᐃ], Δ[169], Δ[217], Δ[329], Δ[207]]));
		Ⲇⵠ[ⵠ.ΔⲆⵠΔΔᐃΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃⲆΔᐃⵠⵠⲆ(Ⲇ * ΔⲆᐃⲆ, ᐃⲆⵠⵠΔⲆⲆ, [Δ[204], Δ[130], Δ[126], Δ[433], "#225755", "#07393D", "#07454a", "#0c484d", Δ[130], Δ[126]]));
		Ⲇⵠ[ⵠ.ΔΔⵠⵠΔⲆΔ] = [];
		Ⲇⵠ[ⵠ.ΔΔⵠⵠΔⲆΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠΔⵠⲆᐃΔⵠ(1.5 * Ⲇ, ⲆᐃⵠⵠⲆ, [Δ[314], Δ[329], Δ[207], Δ[4], Δ[224], Δ[ᐃᐃⵠⵠⲆᐃⵠ], Δ[169], Δ[217], Δ[329], Δ[207]]));
		Ⲇⵠ[ⵠ.ΔΔⵠⵠΔⲆΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠΔⵠⲆᐃΔⵠ(1.5 * Ⲇ, ᐃⲆⵠⵠΔⲆⲆ, [Δ[204], Δ[130], Δ[126], Δ[433], "#225755", "#07393D", "#07454a", "#0c484d", Δ[130], Δ[126]]));
		Ⲇⵠ[ⵠ.ⲆᐃΔᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃΔᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃⵠⲆⲆⲆⵠⵠ(Ⲇ * 2.2, true, [Δ[83], Δ[574]]));
		Ⲇⵠ[ⵠ.ⲆᐃΔᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃⵠⲆⲆⲆⵠⵠ(Ⲇ * 2.2, true, ["#0B4049", "#08383D"]));
		Ⲇⵠ[ⵠ.ΔΔⵠⲆᐃⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ΔΔⵠⲆᐃⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃⵠⲆⲆⲆⵠⵠ(2.2 * Ⲇ, true, [Δ[453], Δ[294]]));
		Ⲇⵠ[ⵠ.ΔΔⵠⲆᐃⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃⵠⲆⲆⲆⵠⵠ(2.2 * Ⲇ, true, [Δ[320], Δ[239]]));
		Ⲇⵠ[ⵠ.ⲆⲆⵠⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⵠⲆΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(Ⲇ * .8, true, [Δ[83], Δ[574]]));
		Ⲇⵠ[ⵠ.ⲆⲆⵠⲆΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(.8 * Ⲇ, true, ["#15514F", "#0F3F3D"]));
		Ⲇⵠ[ⵠ.ᐃⵠΔΔⵠⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠΔΔⵠⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(.8 * Ⲇ, true, [Δ[460], "#b17238"]));
		Ⲇⵠ[ⵠ.ᐃⵠΔΔⵠⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(.8 * Ⲇ, ⲆⵠᐃⵠⲆ, [Δ[247], Δ[448]]));
		Ⲇⵠ[ⵠ.Ⲇⵠⵠⵠᐃⵠⵠ] = [];
		Ⲇⵠ[ⵠ.Ⲇⵠⵠⵠᐃⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(.8 * Ⲇ, ⵠΔᐃⵠΔ, ["#3a8214", "#4a9c1e"]));
		Ⲇⵠ[ⵠ.Ⲇⵠⵠⵠᐃⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(Ⲇ * .8, ⲆⲆⵠⲆᐃ, ["#032d29", "#044640"]));
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(Ⲇ * .8, true, [Δ[297], Δ[400]]));
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(Ⲇ * .8, ᐃⲆᐃⵠΔ, ["#1c6161", "#07413f"]));
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔᐃΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(Ⲇ * .8, true, ["#328a56", "#449573"]));
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔᐃΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(Ⲇ * .8, ᐃᐃᐃΔΔ, [Δ[247], Δ[448]]));
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃⲆΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃⲆΔΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(Ⲇ * .8, ΔᐃⲆⵠΔ, ["#c98e2f", "#a36b11"]));
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃⲆΔΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(Ⲇ * .8, ⵠΔᐃⵠΔ, [Δ[247], Δ[448]]));
		Ⲇⵠ[ⵠ.ⲆⲆⵠᐃᐃⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⵠᐃᐃⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(Ⲇ * .8, ⵠΔᐃⵠΔ, ["#b22419", "#99110e"]));
		Ⲇⵠ[ⵠ.ⲆⲆⵠᐃᐃⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(.8 * Ⲇ, ᐃⲆᐃᐃΔ, ["#04323c", "#03222b"]));
		Ⲇⵠ[ⵠ.ΔΔⲆΔⲆΔⵠ] = [];
		Ⲇⵠ[ⵠ.ΔΔⲆΔⲆΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(Ⲇ * .8, true, ["#13a56d", "#098a58"]));
		Ⲇⵠ[ⵠ.ΔΔⲆΔⲆΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠᐃᐃⲆ(.8 * Ⲇ, ⲆⵠᐃⵠⲆ, [Δ[247], Δ[448]]));
		Ⲇⵠ[ⵠ.ⲆΔΔΔΔᐃⵠ] = ΔⵠΔᐃ(ΔⵠⲆ, [{
			f: ᐃⵠⲆⲆⲆⵠⵠ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: [Δ[83], Δ[574]]
		}], 1.2, [Δ[343], Δ[510], Δ[16]], .7);
		Ⲇⵠ[ⵠ.ΔΔΔⲆᐃᐃΔ] = ΔⵠΔᐃ(ΔΔⲆΔ, [{
			f: ⲆⲆᐃᐃⲆᐃⲆ,
			x: ⵠᐃΔ,
			y: ⲆⲆⵠⲆ,
			a: ⲆΔⲆⵠ,
			r: -Math.PI / ⲆΔⲆⲆ,
			c: [Δ[573], Δ[92]]
		}], .3, [Δ[343], Δ[510], Δ[ᐃᐃⵠᐃⵠᐃᐃ]], .7);
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃᐃⲆⲆ] = ΔⵠΔᐃ(1, [{
			f: ᐃⲆΔⵠⵠⲆᐃ,
			x: ⵠΔΔᐃ,
			y: -5,
			a: 1,
			r: ⵠⲆᐃ,
			c: [Δ[121], "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
		}], .15, [Δ[343], Δ[510], Δ[ⲆⲆⲆⲆᐃⲆⲆ]], .7);
		Ⲇⵠ[ⵠ.ΔᐃⲆᐃΔᐃΔ] = ΔⵠΔᐃ(.9, [], .3, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆΔⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(Ⲇ * .9, ΔⲆΔΔᐃ, ["#7d613e", "#9e7e5a"]));
		Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, ["#084442", "#125e5a"]));
		Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, [Δ[574], Δ[83]]));
		Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, ["#1b6f6a", "#0d4e4c"]));
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃⵠΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(Ⲇ * .9, ΔΔᐃⵠᐃ, [Δ[294], Δ[453]]));
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃⵠΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(Ⲇ * .9, false, [Δ[239], Δ[320]]));
		Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆⲆΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, [Δ[460], "#ec952d"]));
		Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆⲆΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(Ⲇ * .9, false, ["#0e6553", "#094437"]));
		Ⲇⵠ[ⵠ.ⵠᐃⵠᐃΔΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⵠᐃΔΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(Ⲇ * .9, ⲆⵠⲆΔᐃ, ["#375809", "#4b770e"]));
		Ⲇⵠ[ⵠ.ⵠᐃⵠᐃΔΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, ["#09542d", "#0d5d2f"]));
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆᐃᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆᐃᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(Ⲇ * .9, false, ["#585809", "#72770e"]));
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆᐃᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(Ⲇ * .9, ⵠΔⵠᐃᐃ, ["#295209", "#305d0d"]));
		Ⲇⵠ[ⵠ.ΔⲆᐃⲆΔΔⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⲆᐃⲆΔΔⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(Ⲇ * .9, false, ["#b9b094", "#e2d2c0"]));
		Ⲇⵠ[ⵠ.ΔⲆᐃⲆΔΔⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, ⵠΔⵠᐃᐃ, ["#126366", "#0d484b"]));
		Ⲇⵠ[ⵠ.ᐃⵠⵠⵠⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⵠⵠⵠᐃⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, ⵠΔⵠᐃᐃ, ["#3f8662", "#30915d"]));
		Ⲇⵠ[ⵠ.ᐃⵠⵠⵠⵠᐃⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(Ⲇ * .9, false, ["#0e6553", "#094437"]));
		Ⲇⵠ[ⵠ.ⵠΔⵠⵠⵠⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⵠⵠⵠⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, ⲆⵠΔᐃⵠ, ["#c79153", "#dfa868"]));
		Ⲇⵠ[ⵠ.ⵠΔⵠⵠⵠⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, ["#073927", "#075040"]));
		Ⲇⵠ[ⵠ.ⵠᐃⲆΔⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆΔⵠᐃⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(Ⲇ * .9, false, ["#768b5b", "#819984"]));
		Ⲇⵠ[ⵠ.ⵠᐃⲆΔⵠᐃⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, ["#0c4540", "#0e5153"]));
		Ⲇⵠ[ⵠ.ΔΔⵠᐃⵠⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ΔΔⵠᐃⵠⲆⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, ["#567465", "#627c6e"]));
		Ⲇⵠ[ⵠ.ΔΔⵠᐃⵠⲆⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(Ⲇ * .9, false, ["#073927", "#075040"]));
		Ⲇⵠ[ⵠ.ΔΔⲆΔΔⵠΔ] = [];
		Ⲇⵠ[ⵠ.ΔΔⲆΔΔⵠΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, ΔΔΔⵠⵠ, ["#996b3a", "#bf956b"]));
		Ⲇⵠ[ⵠ.ΔΔⲆΔΔⵠΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, ["#0e6553", "#094437"]));
		Ⲇⵠ[ⵠ.ᐃⲆⲆΔΔⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⲆΔΔⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, ["#7a634a", "#a68f77"]));
		Ⲇⵠ[ⵠ.ᐃⲆⲆΔΔⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(Ⲇ * .9, ⲆΔΔⵠⵠ, ["#1e4d43", "#113c32"]));
		Ⲇⵠ[ⵠ.ΔΔᐃⲆⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔΔᐃⲆⲆⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, ᐃⵠⵠⲆⵠ, ["#99403c", "#bc796c"]));
		Ⲇⵠ[ⵠ.ΔΔᐃⲆⲆⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, ["#1e434d", "#11303c"]));
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⵠⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⵠⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, ["#88504e", "#b3857c"]));
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⵠⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, ΔΔΔⵠⵠ, ["#253b41", "#162930"]));
		Ⲇⵠ[ⵠ.ΔΔΔᐃⵠΔⵠ] = [];
		Ⲇⵠ[ⵠ.ΔΔΔᐃⵠΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, ["#0f8870", "#23af93"]));
		Ⲇⵠ[ⵠ.ΔΔΔᐃⵠΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, ΔΔᐃⵠᐃ, ["#032829", "#083233"]));
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⵠΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⵠΔᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(Ⲇ * .9, ΔΔᐃⵠᐃ, ["#618a20", "#84a74e"]));
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⵠΔᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⲆⲆⲆ(.9 * Ⲇ, false, ["#1f4632", "#335d47"]));
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔΔⵠⵠⲆⲆᐃ(Ⲇ * 1.2, ⲆⲆⵠⵠⲆ, [Δ[314], Δ[573], Δ[92], "#756e52", "#663f22", "#9e9577"]));
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔΔⵠⵠⲆⲆᐃ(1.2 * Ⲇ, true, [Δ[204], Δ[471], "#072322", "#3e706b", "#123d3f", "#4e827c"]));
		Ⲇⵠ[ⵠ.ⲆᐃⲆⲆⲆ] = [], Ⲇⵠ[ⵠ.ⲆᐃⲆⲆⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠᐃᐃΔⵠΔΔ(Ⲇ * ᐃⲆⲆ, ⵠΔᐃⵠΔ, [Δ[314], Δ[325], Δ[531], Δ[90], Δ[531], Δ[325]]));
		Ⲇⵠ[ⵠ.ⲆᐃⲆⲆⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠᐃᐃΔⵠΔΔ(ⵠΔᐃ * Ⲇ, ⵠΔᐃⵠΔ, [Δ[204], Δ[471], Δ[286], Δ[18], Δ[471], "#174444"]));
		Ⲇⵠ[ⵠ.ⲆⵠⵠⲆΔ] = [], Ⲇⵠ[ⵠ.ⲆⵠⵠⲆΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⲆΔᐃⵠΔⵠ(ᐃⲆΔ * Ⲇ, true, [Δ[314], Δ[331], Δ[74], Δ[296], Δ[336], Δ[148], Δ[418]]));
		Ⲇⵠ[ⵠ.ⲆⵠⵠⲆΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⲆΔᐃⵠΔⵠ(1 * Ⲇ, ΔᐃⲆⵠΔ, [Δ[204], Δ[137], Δ[486], Δ[486], "#4bbcb4", Δ[55], Δ[575]]));
		Ⲇⵠ[ⵠ.ᐃᐃΔᐃᐃ] = [], Ⲇⵠ[ⵠ.ᐃᐃΔᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃⵠⲆⲆΔᐃΔ(1 * Ⲇ, ⵠΔΔᐃⲆ, [Δ[314], Δ[502], Δ[208], Δ[446], Δ[324], Δ[469]]));
		Ⲇⵠ[ⵠ.ᐃᐃΔᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃⵠⲆⲆΔᐃΔ(1 * Ⲇ, ⵠΔΔᐃⲆ, [Δ[204], Δ[71], Δ[173], "#8f65de", "#7f55cc", "#9d77e6"]));
		Ⲇⵠ[ⵠ.ΔⲆⵠΔⵠ] = [], Ⲇⵠ[ⵠ.ΔⲆⵠΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃⵠⲆⲆΔᐃΔ(ⲆΔᐃ * Ⲇ, true, [Δ[314], Δ[567], Δ[307], Δ[456], Δ[52], Δ[201]]));
		Ⲇⵠ[ⵠ.ΔⲆⵠΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃⵠⲆⲆΔᐃΔ(1 * Ⲇ, ᐃⲆΔⵠΔ, [Δ[204], Δ[260], "#214c4b", Δ[150], "#295957", "#1f5955"]));
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠΔ] = [], Ⲇⵠ[ⵠ.ⵠⲆⵠⵠΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠⵠΔⵠΔᐃⲆ(1 * Ⲇ, true, [Δ[314], Δ[293], Δ[265], Δ[339], Δ[291], Δ[500]]));
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠⵠΔⵠΔᐃⲆ(ⵠⲆⲆⲆ * Ⲇ, ᐃⲆᐃⵠΔ, [Δ[204], Δ[150], "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
		Ⲇⵠ[ⵠ.ᐃⵠᐃⲆᐃ] = [], Ⲇⵠ[ⵠ.ᐃⵠᐃⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔᐃΔᐃⵠᐃΔ(.8 * Ⲇ, true, [Δ[314], Δ[175], Δ[318], Δ[325], Δ[531], Δ[90], Δ[531], Δ[325]]));
		Ⲇⵠ[ⵠ.ᐃⵠᐃⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔᐃΔᐃⵠᐃΔ(Ⲇ * .8, true, [Δ[204], Δ[487], Δ[85], Δ[471], Δ[286], Δ[ⲆᐃΔΔⵠ], Δ[471], "#174444"]));
		Ⲇⵠ[ⵠ.ΔᐃΔⵠⵠ] = [], Ⲇⵠ[ⵠ.ΔᐃΔⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔΔⵠⵠⵠⵠ(Ⲇ * .8, ΔⵠⲆΔⲆ, [Δ[314], "#69685a", "#9c9683", Δ[293], Δ[265], Δ[339], Δ[291], Δ[500]]));
		Ⲇⵠ[ⵠ.ΔᐃΔⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔΔⵠⵠⵠⵠ(.8 * Ⲇ, true, [Δ[204], "#1a3732", "#1e544c", Δ[150], "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
		Ⲇⵠ[ⵠ.ⲆⲆΔᐃᐃ] = [], Ⲇⵠ[ⵠ.ⲆⲆΔᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃᐃⲆΔⲆⵠΔ(.8 * Ⲇ, ⵠΔᐃⵠΔ, [Δ[314], "#7d8b90", "#9facaa", Δ[331], Δ[74], Δ[296], Δ[336], Δ[148], Δ[418]]));
		Ⲇⵠ[ⵠ.ⲆⲆΔᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃᐃⲆΔⲆⵠΔ(.8 * Ⲇ, ⵠΔΔᐃⲆ, [Δ[204], "#2c4b55", "#546d77", Δ[137], Δ[486], Δ[486], "#4bbcb4", Δ[55], Δ[575]]));
		Ⲇⵠ[ⵠ.ⵠⵠΔᐃᐃ] = [], Ⲇⵠ[ⵠ.ⵠⵠΔᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⵠⲆΔⵠΔ(Ⲇ * .8, ⵠΔᐃⵠΔ, [Δ[314], Δ[567], Δ[318], Δ[567], Δ[307], Δ[456], Δ[52], Δ[201]]));
		Ⲇⵠ[ⵠ.ⵠⵠΔᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⵠⲆΔⵠΔ(Ⲇ * .8, ⵠΔΔᐃⲆ, [Δ[204], Δ[487], Δ[85], Δ[260], "#214c4b", Δ[150], "#295957", "#1f5955"]));
		Ⲇⵠ[ⵠ.ⵠᐃΔΔⵠ] = [], Ⲇⵠ[ⵠ.ⵠᐃΔΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠⵠⲆΔⵠΔ(Ⲇ * .8, ⵠΔΔᐃⲆ, [Δ[314], Δ[567], Δ[318], Δ[502], Δ[208], Δ[446], Δ[324], Δ[469]]));
		Ⲇⵠ[ⵠ.ⵠᐃΔΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠⵠⲆΔⵠΔ(.8 * Ⲇ, ⲆⵠᐃⵠⲆ, [Δ[204], Δ[487], Δ[85], Δ[71], Δ[173], "#8f65de", "#7f55cc", "#9d77e6"]));
		Ⲇⵠ[ⵠ.ᐃᐃΔⲆΔⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃΔⲆΔⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠΔᐃⲆᐃⲆⵠ(1.5 * Ⲇ, true, [Δ[314], Δ[438], Δ[285], "#644928", Δ[285], "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
		Ⲇⵠ[ⵠ.ᐃᐃΔⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠΔᐃⲆᐃⲆⵠ(Ⲇ * 1.5, true, [Δ[204], Δ[471], Δ[286], Δ[18], Δ[471], "#174444"]));
		Ⲇⵠ[ⵠ.ⲆΔⵠⲆΔⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⵠⲆΔⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠΔᐃⲆᐃⲆⵠ(ⲆΔᐃ * Ⲇ, ΔΔᐃⵠᐃ, [Δ[317], Δ[317], Δ[352], Δ[352], Δ[317], Δ[352]]));
		Ⲇⵠ[ⵠ.ⲆΔⵠⲆΔⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠΔᐃⲆᐃⲆⵠ(Ⲇ * 1, ⵠΔΔᐃᐃ, [Δ[127], Δ[127], "#0b342b", "#0b342b", Δ[127], "#0b342b"]));
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⲆⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⲆⲆⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔⵠΔⵠ(Ⲇ * 1.5, true, [Δ[314], Δ[567], Δ[307], Δ[456], Δ[201], Δ[52]]));
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⲆⲆⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔⵠΔⵠ(Ⲇ * 1.5, ⲆⲆⵠⵠⲆ, [Δ[204], Δ[260], "#214c4b", Δ[150], "#164542", "#295957"]));
		Ⲇⵠ[ⵠ.ⲆΔⵠⲆⲆⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⵠⲆⲆⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔⵠΔⵠ(1 * Ⲇ, ⲆⲆⲆΔᐃ, [Δ[317], Δ[317], Δ[352], Δ[352], Δ[317], Δ[352]]));
		Ⲇⵠ[ⵠ.ⲆΔⵠⲆⲆⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔⵠΔⵠ(Ⲇ * ⲆΔᐃΔ, false, [Δ[407], Δ[407], Δ[109], Δ[109], Δ[407], Δ[109]]));
		Ⲇⵠ[ⵠ.ⲆΔⵠᐃΔΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⵠᐃΔΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔⵠΔⵠ(1.5 * Ⲇ, ΔᐃⲆⵠΔ, [Δ[314], Δ[502], Δ[208], Δ[446], Δ[324], Δ[469]]));
		Ⲇⵠ[ⵠ.ⲆΔⵠᐃΔΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔⵠΔⵠ(Ⲇ * 1.5, true, [Δ[204], Δ[71], Δ[173], "#8f65de", "#7f55cc", "#9d77e6"]));
		Ⲇⵠ[ⵠ.ⲆⲆᐃΔⵠⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆᐃΔⵠⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔⵠΔⵠ(Ⲇ * 1, false, [Δ[317], Δ[317], Δ[352], Δ[352], Δ[317], Δ[352]]));
		Ⲇⵠ[ⵠ.ⲆⲆᐃΔⵠⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔⵠΔⵠ(ΔΔⲆΔ * Ⲇ, false, [Δ[407], Δ[407], Δ[109], Δ[109], Δ[407], Δ[109]]));
		Ⲇⵠ[ⵠ.ᐃⵠᐃᐃΔΔⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠᐃᐃΔΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠᐃᐃⵠⵠᐃⵠ(1.5 * Ⲇ, true, [Δ[314], Δ[293], Δ[265], Δ[339], "#9a8636", Δ[500]]));
		Ⲇⵠ[ⵠ.ᐃⵠᐃᐃΔΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠᐃᐃⵠⵠᐃⵠ(1.5 * Ⲇ, ⵠΔΔᐃⲆ, [Δ[204], Δ[150], "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆⵠᐃⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠᐃᐃⵠⵠᐃⵠ(Ⲇ * 1, ΔᐃⲆⵠⵠ, [Δ[317], Δ[317], Δ[352], Δ[352], Δ[317], Δ[352]]));
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆⵠᐃⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠᐃᐃⵠⵠᐃⵠ(Ⲇ * ⵠΔᐃ, ⵠᐃᐃⵠΔ, [Δ[407], Δ[407], Δ[109], Δ[109], Δ[407], Δ[109]]));
		Ⲇⵠ[ⵠ.ⲆⵠΔΔΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔΔΔⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠΔⲆΔᐃΔⲆ(1.5 * Ⲇ, ΔᐃⲆⵠΔ, [Δ[314], Δ[331], Δ[74], Δ[296], Δ[336], Δ[148], Δ[418]]));
		Ⲇⵠ[ⵠ.ⲆⵠΔΔΔⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠΔⲆΔᐃΔⲆ(Ⲇ * 1.5, ⲆⲆⵠⵠⲆ, [Δ[204], Δ[137], Δ[486], Δ[486], "#4bbcb4", Δ[55], Δ[575]]));
		Ⲇⵠ[ⵠ.ⵠᐃⵠⲆΔⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⵠⲆΔⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠΔⲆΔᐃΔⲆ(Ⲇ * ΔⲆΔᐃ, ⲆΔᐃⵠᐃ, [Δ[317], Δ[317], Δ[352], Δ[352], Δ[317], Δ[352]]));
		Ⲇⵠ[ⵠ.ⵠᐃⵠⲆΔⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠΔⲆΔᐃΔⲆ(Ⲇ * 1, false, [Δ[407], Δ[407], Δ[109], Δ[109], Δ[407], Δ[109]]));
		Ⲇⵠ[ⵠ.ᐃⵠΔⵠΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠΔⵠΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃⲆᐃᐃΔ(Ⲇ * .5, true, [Δ[317], "#9e8838", Δ[164], Δ[438], Δ[246], Δ[246], Δ[246], Δ[164], Δ[164], Δ[164]]));
		Ⲇⵠ[ⵠ.ᐃⵠΔⵠΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃⲆᐃᐃΔ(Ⲇ * .5, true, [Δ[407], "#266161", Δ[78], Δ[556], Δ[98], Δ[98], Δ[98], Δ[78], Δ[78], Δ[78]]));
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃⲆᐃⲆᐃⵠᐃ(Ⲇ * .5, [Δ[317], "#9e8838", Δ[164], Δ[438], Δ[246]]));
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃⲆᐃⲆᐃⵠᐃ(Ⲇ * .5, [Δ[407], "#266161", Δ[78], Δ[556], Δ[98]]));
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔΔⲆᐃΔΔΔ(Ⲇ * .9, [Δ[529], "#ee97bf", Δ[93], Δ[391], Δ[153]]));
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔΔⲆᐃΔΔΔ(Ⲇ * .9, [Δ[204], "#4d1b59", "#5d3f77", "#220e26", Δ[153]]));
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(Math.PI, ΔΔΔΔᐃⵠⵠ(.9 * Ⲇ, [Δ[391], Δ[440], Δ[440], Δ[440], Δ[93], Δ[391]])));
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(Math.PI, ΔΔΔΔᐃⵠⵠ(Ⲇ * .9, [Δ[204], "#401d49", Δ[440], "#401d49", Δ[93], Δ[391]])));
		Ⲇⵠ[ⵠ.ΔᐃᐃⵠⵠⵠΔ] = Δᐃⵠ(ᐃᐃⵠⲆΔⲆⲆΔΔ(Ⲇ * .6, [Δ[93]]));
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆᐃⵠⲆⵠⲆΔ(Ⲇ * 1.1, [Δ[529], "#231f20", Δ[440], "#7d7679", Δ[153]]));
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆᐃⵠⲆⵠⲆΔ(Ⲇ * 1.1, [Δ[204], "#1e181c", Δ[274], "#3e3e4a", Δ[153]]));
		Ⲇⵠ[ⵠ.ⲆⲆⵠⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⵠⲆⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⲆⲆⲆⵠⲆⲆ(Ⲇ * .6, ⲆⲆᐃᐃⵠ, [Δ[41], Δ[281], Δ[409], Δ[558]]));
		Ⲇⵠ[ⵠ.ⲆⲆⵠⲆⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⲆⲆⲆⵠⲆⲆ(.6 * Ⲇ, ⲆΔᐃⵠⵠ, ["#478e8b", "#327e73", Δ[553], "#08403f"]));
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔΔⲆΔΔᐃⲆ(Ⲇ * .6, true, [Δ[409], Δ[558], Δ[41], Δ[281]]));
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔΔⲆΔΔᐃⲆ(Ⲇ * .6, ᐃⲆⵠⵠΔⲆⲆ, [Δ[553], "#08403f", "#478e8b", "#327e73"]));
		Ⲇⵠ[ⵠ.ⲆⲆᐃᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆᐃᐃΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⲆᐃᐃⵠⲆⵠ(Ⲇ * .63, ⲆⲆⵠⲆᐃ, [Δ[539], "#dee7e7", "#b8cccb", Δ[153], "#e3e8e8"]));
		Ⲇⵠ[ⵠ.ⲆⲆᐃᐃΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⲆᐃᐃⵠⲆⵠ(Ⲇ * .63, ᐃΔᐃⵠᐃ, [Δ[553], "#368981", "#1c635e", "#7bbab4", "#469e95"]));
		Ⲇⵠ[ⵠ.ᐃᐃⵠΔΔ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃⵠΔΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃᐃⲆⵠⲆⲆΔ(Ⲇ * .6, ⲆⵠᐃⵠⲆ, [Δ[539], "#c5232c", "#84191d", "#a72027", Δ[349], Δ[262]]));
		Ⲇⵠ[ⵠ.ᐃᐃⵠΔΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃᐃⲆⵠⲆⲆΔ(Ⲇ * .6, true, [Δ[553], "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
		Ⲇⵠ[ⵠ.ⵠᐃᐃΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃᐃΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔΔΔᐃⵠᐃᐃ(Ⲇ * .6, true, [Δ[539], "#0f964c", "#106e3b", "#138344", Δ[349], Δ[262], "#C5232C", "#A92D2D"]));
		Ⲇⵠ[ⵠ.ⵠᐃᐃΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔΔΔᐃⵠᐃᐃ(Ⲇ * .6, true, [Δ[553], Δ[230], Δ[295], Δ[499], "#66aaa3", "#469e95", "#292f66", "#202559"]));
		Ⲇⵠ[ⵠ.ΔΔⲆⲆⲆΔᐃ] = [];
		Ⲇⵠ[ⵠ.ΔΔⲆⲆⲆΔᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔΔΔᐃΔᐃ(Ⲇ * .42, ⲆⵠᐃⵠⲆ, [Δ[314], "#515C57", "#3A4942", "#68736F", Δ[373], Δ[351], Δ[110], "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
		Ⲇⵠ[ⵠ.ΔΔⲆⲆⲆΔᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔΔΔᐃΔᐃ(.42 * Ⲇ, ΔⵠⲆΔⲆ, [Δ[314], "#485E66", Δ[392], "#60757D", Δ[373], Δ[351], Δ[110], Δ[392], "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
		Ⲇⵠ[ⵠ.ΔΔΔΔⵠⵠΔ] = [];
		Ⲇⵠ[ⵠ.ΔΔΔΔⵠⵠΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠⵠⵠΔⵠᐃⵠ(Ⲇ * .9, ["#e4c027"]));
		Ⲇⵠ[ⵠ.ΔΔΔΔⵠⵠΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠⵠⵠΔⵠᐃⵠ(Ⲇ * .9, ["#D8E57F"]));
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆᐃⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆᐃⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃⲆⲆⵠΔ(.42 * Ⲇ, ⲆⲆⵠⲆᐃ, [Δ[314], "#515C57", "#3A4942", "#68736F", Δ[373], Δ[351], Δ[110], "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆᐃⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃⲆⲆⵠΔ(Ⲇ * .42, true, [Δ[314], "#485E66", Δ[392], "#60757D", Δ[373], Δ[351], Δ[110], Δ[392], "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
		Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃⵠⵠ] = Δᐃⵠ(ΔⵠᐃⵠᐃᐃΔⲆⵠ(Ⲇ * ΔⲆΔᐃ, [Δ[329], Δ[207], "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
		Ⲇⵠ[ⵠ.ᐃΔⵠᐃⲆΔΔ] = [];
		Ⲇⵠ[ⵠ.ᐃΔⵠᐃⲆΔΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⲆΔⲆⲆᐃⲆ(Ⲇ * .5, ᐃⲆⲆⲆΔ, [Δ[314], Δ[318], Δ[175], "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
		Ⲇⵠ[ⵠ.ᐃΔⵠᐃⲆΔΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⲆΔⲆⲆᐃⲆ(Ⲇ * .5, true, [Δ[314], Δ[85], Δ[487], "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
		Ⲇⵠ[ⵠ.ᐃⵠΔⵠⲆⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠΔⵠⲆⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔⲆⵠΔΔⵠ(Ⲇ * .5, ⲆⵠᐃⵠⲆ, [Δ[314], Δ[318], Δ[175], "#c0c0c0", "#4f4f4f", "#6c6c6c", Δ[447]]));
		Ⲇⵠ[ⵠ.ᐃⵠΔⵠⲆⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔⲆⵠΔΔⵠ(.5 * Ⲇ, true, [Δ[314], Δ[85], Δ[487], "#60757d", "#152229", "#0c1113", "#0c1113"]));
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠΔᐃᐃ] = Δᐃⵠ(ΔⵠⵠⵠⵠᐃⲆΔⲆ(Ⲇ * .8, ᐃᐃᐃΔΔ, [Δ[175], Δ[318]]));
		Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃᐃΔ] = ΔⵠΔᐃ(1, [{
			f: ⲆⲆᐃᐃⲆᐃⲆ,
			x: ᐃΔΔ,
			y: 0,
			a: ⵠΔᐃ,
			r: Math.PI / 2.5,
			c: [Δ[573], Δ[92]]
		}], .3, ["#494949", "#5b5858", "#3d3b3b"], ᐃΔⵠΔ);
		Ⲇⵠ[ⵠ.ⵠⲆⵠΔΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⵠΔΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠⲆⲆᐃΔⲆⵠ(Ⲇ * 1, ᐃⲆⲆⲆΔ, [Δ[314], Δ[313], Δ[152], "#261912", "#eee6c5", "#d1c599", Δ[313], Δ[152], "#86509b", "#703a99"]));
		Ⲇⵠ[ⵠ.ⵠⲆⵠΔΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠⲆⲆᐃΔⲆⵠ(Ⲇ * 1, ᐃⲆᐃⵠΔ, [Δ[314], Δ[414], Δ[177], "#052120", "#104d5b", "#0b424f", Δ[414], Δ[177], "#2b0b4a", "#23073e"]));
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆⵠⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆⵠⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔᐃΔⵠᐃⲆⵠ(Ⲇ * 1, ᐃⲆᐃᐃΔ, [Δ[314], Δ[313], Δ[152], "#261912", "#eee6c5", "#d1c599", Δ[313], Δ[152], "#86509b", "#703a99"]));
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆⵠⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔᐃΔⵠᐃⲆⵠ(1 * Ⲇ, ⲆⲆⵠⵠⲆ, [Δ[314], Δ[414], Δ[177], "#052120", "#104d5b", "#083b37", Δ[414], Δ[177], "#2b0b4a", "#23073e"]));
		Ⲇⵠ[ⵠ.ᐃⵠᐃᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠᐃᐃⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ⵠΔⲆΔΔ, ⵠⲆⵠᐃⲆᐃᐃ(Ⲇ * .7, true, [Δ[314], Δ[350], Δ[454], Δ[210], Δ[551], Δ[551], Δ[298], Δ[10], Δ[69]])));
		Ⲇⵠ[ⵠ.ᐃⵠᐃᐃⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ⵠᐃⲆᐃ, ⵠⲆⵠᐃⲆᐃᐃ(Ⲇ * .7, ⵠⲆΔΔᐃ, [Δ[314], Δ[414], Δ[177], Δ[439], "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
		Ⲇⵠ[ⵠ.ΔᐃⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔᐃⵠᐃⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃΔΔⵠ, ΔⵠΔᐃᐃⲆᐃ(Ⲇ * .7, ⵠΔΔᐃⲆ, [Δ[314], Δ[350], Δ[454], "#765d42", Δ[10], Δ[69]])));
		Ⲇⵠ[ⵠ.ΔᐃⵠᐃⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃΔᐃⲆ, ΔⵠΔᐃᐃⲆᐃ(.7 * Ⲇ, ⵠΔΔᐃⲆ, [Δ[314], Δ[414], Δ[177], "#0e4d49", "#1a6c67", "#07322f"])));
		Ⲇⵠ[ⵠ.ⵠᐃⵠⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ⲆᐃⵠⲆⲆᐃⲆ(Ⲇ * .65, ⵠⵠᐃⵠⵠ, [Δ[314], Δ[573], Δ[92], Δ[ⲆΔⵠᐃⲆ], Δ[69], "#7a7575", "#454749", "#8c8787", Δ[318], Δ[175], "#aaa6a6"])));
		Ⲇⵠ[ⵠ.ⵠᐃⵠⵠΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ⵠΔⲆΔΔ, ⲆᐃⵠⲆⲆᐃⲆ(Ⲇ * .65, true, [Δ[314], Δ[471], Δ[492], "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", Δ[85], Δ[487], "#546e78"])));
		Ⲇⵠ[ⵠ.ⵠΔⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⲆⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃⵠᐃⲆ, Ⲇⵠⵠᐃᐃⵠⵠ(.67 * Ⲇ, true, [Δ[314], Δ[301], Δ[305], "#a69e39", "#9c8828", "#bab143", Δ[277], Δ[427], "#d2ca59"])));
		Ⲇⵠ[ⵠ.ⵠΔⲆⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, Ⲇⵠⵠᐃᐃⵠⵠ(Ⲇ * .67, true, [Δ[204], Δ[250], Δ[540], "#33916d", "#197c62", "#3eab81", Δ[435], Δ[474], "#52be94"])));
		Ⲇⵠ[ⵠ.ᐃⵠᐃⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠᐃⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ⵠⵠⵠⵠ, ⲆⲆⵠⵠⲆⲆⵠ(.67 * Ⲇ, ᐃⲆᐃᐃΔ, [Δ[314], Δ[170], Δ[534], "#4ba8b4", "#198a82", "#6ccad7", Δ[77], Δ[116], "#7bd9e6"])));
		Ⲇⵠ[ⵠ.ᐃⵠᐃⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ⲆⲆⵠⵠⲆⲆⵠ(.67 * Ⲇ, true, [Δ[314], Δ[406], Δ[555], "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", Δ[54], Δ[312]])));
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ΔᐃⲆΔⵠⲆⲆ(.67 * Ⲇ, ⲆⲆⵠⲆᐃ, [Δ[314], Δ[170], Δ[534], "#9443b1", "#6f1988", "#a752c6", "#9e35be", Δ[208], Δ[321]])));
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ΔᐃⲆΔⵠⲆⲆ(.67 * Ⲇ, true, [Δ[314], Δ[406], Δ[555], "#6e43bf", "#673fa4", "#784bcc", "#845bc6", Δ[173], "#966be7"])));
		Ⲇⵠ[ⵠ.ⵠᐃⵠⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⵠⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃⵠⲆⵠ, ⲆⲆΔⵠⲆⲆΔ(Ⲇ * ⵠⵠᐃ, ⲆⲆᐃᐃⵠ, [Δ[314], "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
		Ⲇⵠ[ⵠ.ⵠᐃⵠⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ⲆⲆΔⵠⲆⲆΔ(1 * Ⲇ, true, [Δ[314], "#1c2026", Δ[555], "#7dc6d9", "#6cbacf", Δ[395], "#49b2cf", Δ[395]])));
		Ⲇⵠ[ⵠ.ΔΔΔⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ΔΔΔⲆⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ᐃⵠᐃⵠΔ(Ⲇ * 1, true, [Δ[314], Δ[573], Δ[92], Δ[318], Δ[175]])));
		Ⲇⵠ[ⵠ.ΔΔΔⲆⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃΔᐃⲆ, ᐃⵠᐃⵠΔ(1 * Ⲇ, ᐃⲆΔⵠΔ, [Δ[204], Δ[250], Δ[540], Δ[85], Δ[487]])));
		Ⲇⵠ[ⵠ.ᐃⵠᐃᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠᐃᐃⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ΔⵠᐃⲆ, ΔⲆⵠΔⵠⲆᐃ(Ⲇ * .5, ᐃⲆΔⵠΔ, [Δ[314], Δ[318], Δ[175]])));
		Ⲇⵠ[ⵠ.ᐃⵠᐃᐃⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ΔⲆⵠΔⵠⲆᐃ(.5 * Ⲇ, true, [Δ[204], Δ[85], Δ[487]])));
		Ⲇⵠ[ⵠ.ⲆⵠⲆΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⲆΔΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ΔⵠⲆⲆ, ᐃⵠⵠΔᐃᐃⲆ(ⲆΔᐃΔ * Ⲇ, ᐃⲆⵠⵠΔⲆⲆ, [Δ[314], "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
		Ⲇⵠ[ⵠ.ⲆⵠⲆΔΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ΔΔⲆᐃ, ᐃⵠⵠΔᐃᐃⲆ(ᐃⵠⵠ * Ⲇ, true, [Δ[314], "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ᐃⵠᐃⵠΔ(Ⲇ * ⵠΔΔ, true, [Δ[314], Δ[301], Δ[305], Δ[277], Δ[427]])));
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ᐃⵠᐃⵠΔ(1 * Ⲇ, true, [Δ[314], Δ[471], Δ[492], Δ[435], Δ[474]])));
		Ⲇⵠ[ⵠ.ⵠᐃΔΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃΔΔᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ᐃⵠᐃⵠΔ(1 * Ⲇ, ⲆⲆⵠⵠⲆ, [Δ[314], Δ[170], Δ[534], Δ[77], Δ[116]])));
		Ⲇⵠ[ⵠ.ⵠᐃΔΔᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ᐃⵠᐃⵠΔ(Ⲇ * 1, true, [Δ[314], Δ[406], Δ[555], Δ[312], Δ[54]])));
		Ⲇⵠ[ⵠ.ⵠΔⲆⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⲆⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ᐃⵠᐃⵠΔ(1 * Ⲇ, ᐃⲆᐃᐃΔ, [Δ[314], Δ[170], Δ[534], Δ[321], Δ[208]])));
		Ⲇⵠ[ⵠ.ⵠΔⲆⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ΔⲆΔΔ, ᐃⵠᐃⵠΔ(ΔⲆΔᐃ * Ⲇ, ⲆⵠᐃⵠⲆ, [Δ[314], Δ[406], Δ[555], Δ[71], Δ[173]])));
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔⲆΔΔᐃᐃ(Ⲇ * .55, false, [Δ[11], Δ[0], Δ[164], "#3a3a3a"]));
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔⲆΔΔᐃᐃ(.55 * Ⲇ, ⵠᐃᐃⵠΔ, ["#080707", "#133d3c", Δ[78], "#1b2529"]));
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠΔⲆ] = [];
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠΔⲆ].push(Δᐃⵠ(ᐃΔⲆΔΔᐃᐃ(Ⲇ * .8, ᐃⲆⵠⵠᐃ, [Δ[11], Δ[0], Δ[164], "#3a3a3a"])));
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠΔⲆ].push(Δᐃⵠ(ᐃΔⲆΔΔᐃᐃ(Ⲇ * .8, false, [Δ[ⵠⵠᐃΔΔ], "#9f7d17", "#dab33c", "#474545"])));
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠΔⲆ].push(Δᐃⵠ(ᐃΔⲆΔΔᐃᐃ(.8 * Ⲇ, ⲆⲆⲆΔᐃ, [Δ[ΔᐃⲆⲆΔⲆᐃ], "#73590d", "#a88a2c", "#2a2828"])));
		Ⲇⵠ[ⵠ.ΔⵠⵠᐃᐃⲆΔ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⵠᐃᐃⲆΔ].push(Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠΔⲆ][0]);
		Ⲇⵠ[ⵠ.ΔⵠⵠᐃᐃⲆΔ].push(Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠΔⲆ][0]);
		Ⲇⵠ[ⵠ.ΔⵠⵠᐃᐃⲆΔ].push(Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠΔⲆ][0]);
		Ⲇⵠ[ⵠ.ⵠⵠⵠΔⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⵠΔⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔΔⵠΔΔⲆ(Ⲇ * .06, ᐃⲆⵠⵠᐃ, [Δ[ⲆΔΔᐃⵠⵠⵠ], Δ[164], Δ[0]]));
		Ⲇⵠ[ⵠ.ⵠⵠⵠΔⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔΔⵠΔΔⲆ(Ⲇ * .06, false, [Δ[204], Δ[78], "#133d3c"]));
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆΔⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆΔⲆⲆ].push(Δᐃⵠ(ᐃΔΔⵠΔΔⲆ(.08 * Ⲇ, ⲆⵠⵠΔᐃ, [Δ[ⵠⵠⵠⵠⵠ], Δ[164], Δ[ⵠⵠΔᐃ]])));
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆΔⲆⲆ].push(Δᐃⵠ(ᐃΔΔⵠΔΔⲆ(Ⲇ * .08, false, [Δ[11], "#e2bd4e", "#a38018"])));
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆΔⲆⲆ].push(Δᐃⵠ(ᐃΔΔⵠΔΔⲆ(.08 * Ⲇ, ΔΔᐃⵠᐃ, [Δ[ΔᐃⵠⲆᐃΔΔ], "#b0902e", "#634d09"])));
		Ⲇⵠ[ⵠ.ᐃᐃᐃⵠΔ] = ΔⵠΔᐃ(1.5, [{
			f: ᐃⵠΔΔᐃΔΔ,
			x: ⲆⲆᐃΔ,
			y: 0,
			a: ⲆΔⲆⵠ,
			r: ΔᐃΔ,
			c: [Δ[11], "#178a99", "#0a6372", "#03282e"]
		}], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9);
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠΔⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠΔⲆΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔᐃⲆΔᐃⲆ(Ⲇ * .8, true, [Δ[33], Δ[452]]));
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠΔⲆΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔᐃⲆΔᐃⲆ(Ⲇ * .8, true, ["#98ede3", "#94f2e7"]));
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆΔΔⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆΔΔⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠⵠᐃᐃⵠΔ(Ⲇ * .8, ⲆⲆⵠⲆᐃ, [Δ[477], Δ[ⲆΔⵠᐃⵠ], "#418ba5", "#59b8ce"]));
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆΔΔⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠⵠᐃᐃⵠΔ(Ⲇ * .8, ⵠⲆΔΔⲆ, [Δ[575], Δ[55], "#3fa097", "#90ddd9"]));
		Ⲇⵠ[ⵠ.ⵠΔΔᐃᐃⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠΔΔᐃᐃⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔᐃⵠᐃⲆᐃⲆ(.8 * Ⲇ, true, [Δ[477], Δ[ⲆΔΔΔ]]));
		Ⲇⵠ[ⵠ.ⵠΔΔᐃᐃⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔᐃⵠᐃⲆᐃⲆ(Ⲇ * .8, true, [Δ[55], Δ[85]]));
		Ⲇⵠ[ⵠ.ⵠΔⲆΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⲆΔᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃⲆᐃⲆᐃΔⵠ(Ⲇ * .8, true, [Δ[33], Δ[452], "#1c2528", Δ[477], Δ[5], "#959da0", "#697072", "#929da0", "#afb9bc"]));
		Ⲇⵠ[ⵠ.ⵠΔⲆΔᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃⲆᐃⲆᐃΔⵠ(Ⲇ * .8, ⲆⲆⵠⵠⲆ, ["#98ede3", "#94f2e7", Δ[487], Δ[575], Δ[55], Δ[85], "#2d484f", "#546d6d", "#597b84"]));
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠⲆᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠⲆᐃΔ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⲆᐃΔᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠⲆᐃΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔᐃΔΔⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆᐃⵠΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⲆᐃⵠΔⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃᐃⵠΔⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆᐃⵠΔⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⵠⵠⲆⲆΔⲆ;
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃᐃΔⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃᐃΔⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃΔⲆⲆΔⲆⲆ;
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃᐃΔⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⵠⲆⲆⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ΔΔⵠⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ΔΔⵠⲆⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⵠΔⲆⵠⲆΔ;
		Ⲇⵠ[ⵠ.ΔΔⵠⲆⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⵠᐃⲆⲆΔ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠⵠΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠⵠΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⲆᐃⵠᐃᐃΔ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠⵠΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃᐃΔᐃᐃⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆⵠΔⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔⵠⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ΔᐃΔᐃΔⵠΔ;
		Ⲇⵠ[ⵠ.ⲆⵠΔⵠⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆΔⵠⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⲆΔⵠⵠⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ΔᐃΔᐃⲆΔΔ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆΔⵠⵠⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆⵠᐃΔΔ;
		Ⲇⵠ[ⵠ.ᐃⵠⵠΔⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⵠΔⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⵠΔⲆΔΔⵠ;
		Ⲇⵠ[ⵠ.ᐃⵠⵠΔⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⲆᐃⵠᐃΔᐃ;
		Ⲇⵠ[ⵠ.ⵠᐃⵠΔⲆᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⵠΔⲆᐃΔ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⵠⲆΔᐃⲆΔ;
		Ⲇⵠ[ⵠ.ⵠᐃⵠΔⲆᐃΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⲆⲆΔⲆⵠ;
		Ⲇⵠ[ⵠ.ᐃⵠⵠⵠΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⵠⵠΔ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⲆⲆᐃᐃⵠᐃ;
		Ⲇⵠ[ⵠ.ᐃⵠⵠⵠΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆΔΔΔⲆ;
		Ⲇⵠ[ⵠ.ΔⲆΔᐃⲆⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⲆΔᐃⲆⵠⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆᐃⲆᐃⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ΔⲆΔᐃⲆⵠⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⲆΔᐃⲆᐃΔ;
		Ⲇⵠ[ⵠ.ΔⲆᐃΔᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⲆᐃΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⵠΔⲆᐃΔΔ;
		Ⲇⵠ[ⵠ.ΔⲆᐃΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⵠⵠⲆᐃⲆ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆᐃᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆᐃᐃⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⵠΔⵠΔΔⵠ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆᐃᐃⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔᐃⲆⵠΔⵠⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆΔᐃΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆΔᐃΔ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⵠΔᐃⲆᐃᐃ;
		Ⲇⵠ[ⵠ.ᐃⲆΔᐃΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔΔᐃΔᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆᐃΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃΔⵠᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⲆⵠᐃⵠⲆΔ;
		Ⲇⵠ[ⵠ.ⲆᐃΔⵠᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⲆΔᐃⲆΔ;
		Ⲇⵠ[ⵠ.ΔⵠᐃⵠⲆΔΔ] = ΔⲆ.ΔⵠᐃⵠⲆΔΔ;
		Ⲇⵠ[ⵠ.ᐃΔΔⵠᐃ] = [], Ⲇⵠ[ⵠ.ᐃΔΔⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆᐃⵠᐃⲆΔⵠ(Ⲇ * .75, ᐃⲆᐃⵠΔ, [Δ[314], Δ[325], Δ[531], Δ[90]]));
		Ⲇⵠ[ⵠ.ᐃΔΔⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆᐃⵠᐃⲆΔⵠ(Ⲇ * .75, true, [Δ[204], Δ[471], Δ[286], Δ[18]]));
		Ⲇⵠ[ⵠ.ᐃΔᐃᐃⲆΔᐃ] = Δᐃⵠ(ᐃⲆⵠⲆᐃᐃΔ(Ⲇ * .3, [Δ[357], Δ[213]], ⲆΔⵠΔ));
		Ⲇⵠ[ⵠ.ᐃⲆⲆⲆᐃΔΔ] = Δᐃⵠ(ᐃⲆⵠⲆᐃᐃΔ(Ⲇ * .3, [Δ[357], Δ[213]], ᐃⵠⵠ));
		Ⲇⵠ[ⵠ.ⲆᐃⲆⲆⵠⵠⲆ] = Δᐃⵠ(ⵠΔᐃᐃⵠΔⵠΔⲆ(.6 * Ⲇ, [Δ[357], Δ[213]]));
		Ⲇⵠ[ⵠ.ᐃΔΔΔⲆⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃΔΔΔⲆⲆⵠ].push(Δᐃⵠ(ᐃΔⲆⵠⲆ(.7 * Ⲇ, [Δ[357], Δ[213], "#165b2b", Δ[325], Δ[213]], ⲆΔⵠΔ)));
		Ⲇⵠ[ⵠ.ᐃΔΔΔⲆⲆⵠ].push(Δᐃⵠ(ᐃΔⲆⵠⲆ(.7 * Ⲇ, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
		Ⲇⵠ[ⵠ.ᐃΔΔΔⲆⲆⵠ].push(Δᐃⵠ(ᐃΔⲆⵠⲆ(Ⲇ * .7, ["#092a14", "#186733", "#124a23", Δ[325], "#1b6735"], 0)));
		Ⲇⵠ[ⵠ.ΔⵠⵠΔΔᐃⲆ] = [];
		var ⵠΔ = Δᐃⵠ(ᐃΔⲆⵠⲆ(Ⲇ * .7, [Δ[413], Δ[228], Δ[413], "#2e2410", Δ[228]], ⲆⲆᐃΔ));
		Ⲇⵠ[ⵠ.ΔⵠⵠΔΔᐃⲆ].push(ⵠΔ);
		Ⲇⵠ[ⵠ.ΔⵠⵠΔΔᐃⲆ].push(ⵠΔ);
		Ⲇⵠ[ⵠ.ΔⵠⵠΔΔᐃⲆ].push(ⵠΔ);
		Ⲇⵠ[ⵠ.ⵠᐃᐃᐃᐃᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃᐃᐃᐃᐃⵠ].push(Δᐃⵠ(ᐃΔⲆⵠⲆ(.7 * Ⲇ, [Δ[357], Δ[213], "#165b2b", Δ[325], Δ[213]], 1)));
		Ⲇⵠ[ⵠ.ⵠᐃᐃᐃᐃᐃⵠ].push(Δᐃⵠ(ᐃΔⲆⵠⲆ(Ⲇ * .7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], ⵠΔᐃ)));
		Ⲇⵠ[ⵠ.ⵠᐃᐃᐃᐃᐃⵠ].push(Δᐃⵠ(ᐃΔⲆⵠⲆ(Ⲇ * .7, ["#092a14", "#186733", "#124a23", Δ[325], "#1b6735"], 1)));
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔᐃⲆⵠ] = Δᐃⵠ(ⵠΔᐃᐃⲆⲆⵠΔΔ(Ⲇ * .3, [Δ[93]]));
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆⲆⲆΔ] = Δᐃⵠ(ᐃⲆⵠⲆⲆΔᐃΔΔ(.3 * Ⲇ, [Δ[93]]));
		Ⲇⵠ[ⵠ.ⵠⲆⵠΔⲆᐃⲆ] = Δᐃⵠ(ᐃⲆⵠⲆᐃᐃΔ(Ⲇ * .4, [Δ[100], Δ[93]], ⵠᐃⵠⵠ));
		Ⲇⵠ[ⵠ.ⵠⵠΔΔᐃⵠⵠ] = Δᐃⵠ(ᐃΔᐃᐃ(Math.PI / ⲆΔΔΔ, ᐃⵠⲆᐃΔⲆᐃⵠⲆ(.2 * Ⲇ, [Δ[93]])));
		Ⲇⵠ[ⵠ.ΔⲆΔⲆⵠ] = [], Ⲇⵠ[ⵠ.ΔⲆΔⲆⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠᐃⵠⵠⵠⵠⲆ(.85 * Ⲇ, ΔᐃⲆⵠΔ, [Δ[314], "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
		Ⲇⵠ[ⵠ.ΔⲆΔⲆⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠᐃⵠⵠⵠⵠⲆ(.85 * Ⲇ, ⲆⲆᐃᐃⵠ, [Δ[314], "#4e4e93", "#393977", "#444187", Δ[137], "#277a74", "#7da8db"]));
		Ⲇⵠ[ⵠ.ⲆᐃⵠᐃᐃⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⵠᐃᐃⵠⲆ].push(Δᐃⵠ(ᐃΔⲆⵠⲆ(Ⲇ * .7, [Δ[413], Δ[228], Δ[413], "#2e2410", Δ[228]], 1)));
		Ⲇⵠ[ⵠ.ⲆᐃⵠᐃᐃⵠⲆ].push(Δᐃⵠ(ᐃΔⲆⵠⲆ(.7 * Ⲇ, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
		Ⲇⵠ[ⵠ.ⲆᐃⵠᐃᐃⵠⲆ].push(Δᐃⵠ(ᐃΔⲆⵠⲆ(Ⲇ * .7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], ⵠⵠⵠΔ)));
		Ⲇⵠ[ⵠ.ᐃΔΔᐃⵠ] = [], Ⲇⵠ[ⵠ.ᐃΔΔᐃⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃⵠⵠⵠⵠΔᐃ(Ⲇ * .37, ΔᐃⲆⵠΔ, [Δ[200], Δ[47], Δ[64]]));
		Ⲇⵠ[ⵠ.ᐃΔΔᐃⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃⵠⵠⵠⵠΔᐃ(Ⲇ * .37, ᐃⲆΔⵠΔ, ["#1b1e30", "#161921", "#252f3e"]));
		Ⲇⵠ[ⵠ.ΔⵠΔⲆⵠ] = [], Ⲇⵠ[ⵠ.ΔⵠΔⲆⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔⵠⵠⵠᐃⵠ(.17 * Ⲇ, ⵠΔᐃⵠΔ, [Δ[200], Δ[47], Δ[64], "#1b1a25", "#d62c0e"]));
		Ⲇⵠ[ⵠ.ΔⵠΔⲆⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔⵠⵠⵠᐃⵠ(Ⲇ * .17, true, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
		Ⲇⵠ[ⵠ.ΔΔΔΔΔ] = [], Ⲇⵠ[ⵠ.ΔΔΔΔΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠΔⵠⲆⲆⵠ(.55 * Ⲇ, true, [Δ[165], "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
		Ⲇⵠ[ⵠ.ΔΔΔΔΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠΔⵠⲆⲆⵠ(Ⲇ * .55, ᐃᐃᐃΔΔ, [Δ[165], "#216661", "#134945", "#2b8079", "#17504c"], 1));
		Ⲇⵠ[ⵠ.ⵠⵠⵠᐃᐃ] = [], Ⲇⵠ[ⵠ.ⵠⵠⵠᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠΔⵠⲆⲆⵠ(.55 * Ⲇ, true, [Δ[165], "#8c7654", Δ[147], "#a88e6c", Δ[147], "#705845"], 0));
		Ⲇⵠ[ⵠ.ⵠⵠⵠᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠΔⵠⲆⲆⵠ(.55 * Ⲇ, ⵠⲆΔΔⲆ, [Δ[165], "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
		Ⲇⵠ[ⵠ.ⲆᐃⲆᐃΔ] = [], Ⲇⵠ[ⵠ.ⲆᐃⲆᐃΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃᐃⵠⵠᐃᐃⲆ(Ⲇ * .2, ᐃΔᐃⵠᐃ, [Δ[314], Δ[570], Δ[144], Δ[565], "#49B669", "#19994C", "#71C187"]));
		Ⲇⵠ[ⵠ.ⲆᐃⲆᐃΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃᐃⵠⵠᐃᐃⲆ(Ⲇ * .2, true, [Δ[20], "#114933", "#1b6656", Δ[266], "#3db76f", "#118254", "#40c696"]));
		Ⲇⵠ[ⵠ.ᐃᐃⵠⲆⵠ] = [], Ⲇⵠ[ⵠ.ᐃᐃⵠⲆⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃᐃⵠⵠᐃᐃⲆ(Ⲇ * .2, true, [Δ[314], Δ[570], Δ[144], Δ[565], "#C45727", "#994617", "#DB9358"]));
		Ⲇⵠ[ⵠ.ᐃᐃⵠⲆⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃᐃⵠⵠᐃᐃⲆ(Ⲇ * .2, true, [Δ[ΔⲆᐃⲆⲆ], "#114933", "#1b6656", Δ[266], "#69b681", "#509a75", "#7ec387"]));
		Ⲇⵠ[ⵠ.ΔᐃⲆⵠᐃ] = [], Ⲇⵠ[ⵠ.ΔᐃⲆⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃᐃⵠⵠᐃᐃⲆ(.2 * Ⲇ, ΔⵠⲆΔⲆ, [Δ[314], Δ[570], Δ[144], Δ[565], "#2792C1", "#196599", "#59C0D8"]));
		Ⲇⵠ[ⵠ.ΔᐃⲆⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃᐃⵠⵠᐃᐃⲆ(.2 * Ⲇ, ⲆᐃⵠⵠⲆ, [Δ[ᐃᐃⵠⵠⲆⲆⲆ], "#114933", "#1b6656", Δ[266], "#19899e", "#16688b", "#4ea3c7"]));
		Ⲇⵠ[ⵠ.ΔΔⲆΔⲆ] = [], Ⲇⵠ[ⵠ.ΔΔⲆΔⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆᐃⲆⲆⵠⲆΔ(.24 * Ⲇ, ᐃⲆᐃⵠΔ, [Δ[391], "#b03431", "#94312d", "#bd3c33", Δ[403]]));
		Ⲇⵠ[ⵠ.ΔΔⲆΔⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆᐃⲆⲆⵠⲆΔ(Ⲇ * .24, true, [Δ[391], "#1b103e", "#190f3b", "#261a4e", Δ[439]]));
		Ⲇⵠ[ⵠ.ΔⵠΔⵠⲆ] = [], Ⲇⵠ[ⵠ.ΔⵠΔⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⲆᐃΔⲆⲆᐃ(.32 * Ⲇ, ⵠⲆΔΔⲆ, [Δ[314], "#cae9eb", "#75bcae", Δ[153], "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
		Ⲇⵠ[ⵠ.ΔⵠΔⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⲆᐃΔⲆⲆᐃ(Ⲇ * .32, true, [Δ[314], "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
		Ⲇⵠ[ⵠ.ᐃⵠΔᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠΔᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ⲆΔΔⲆ, ⲆⲆⵠⲆΔⲆΔ(Ⲇ * .9, ᐃΔᐃⵠᐃ, [Δ[314], "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
		Ⲇⵠ[ⵠ.ᐃⵠΔᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ⲆⲆⵠⲆΔⲆΔ(.9 * Ⲇ, true, [Δ[314], "#18332e", "#112320", Δ[395], "#49b2cf"])));
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠᐃⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠᐃⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ⲆⲆⵠⲆΔⲆΔ(1 * Ⲇ, true, [ΔⵠⲆᐃᐃ, Ⲇᐃⵠⵠⵠ, undefined, "#c8efef", "#c8efef"])));
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠᐃⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ⲆⲆⵠⲆΔⲆΔ(Ⲇ * 1, true, [ᐃⲆᐃⲆⵠ, undefined, undefined, Δ[395], Δ[395]])));
		Ⲇⵠ[ⵠ.ᐃᐃΔⵠΔⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃΔⵠΔⵠⲆ].push(Δᐃⵠ(ⵠⵠⵠΔᐃᐃⲆ(.3 * Ⲇ, true, [Δ[314], Δ[193], Δ[234], "darkred", Δ[405], Δ[547]], ΔᐃΔ)));
		Ⲇⵠ[ⵠ.ᐃᐃΔⵠΔⵠⲆ].push(Δᐃⵠ(ⵠⵠⵠΔᐃᐃⲆ(Ⲇ * .3, true, [Δ[314], Δ[193], Δ[234], "darkred", Δ[405], Δ[547]], ⲆⲆⲆᐃ)));
		Ⲇⵠ[ⵠ.ᐃᐃΔⵠΔⵠⲆ].push(Δᐃⵠ(ⵠⵠⵠΔᐃᐃⲆ(Ⲇ * .3, ⲆⲆᐃᐃⵠ, [Δ[314], Δ[193], Δ[234], "darkred", Δ[405], Δ[254]], ⲆΔⲆⵠ)));
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠⵠⵠ].push(Δᐃⵠ(ᐃΔᐃⵠᐃⲆᐃ(.7 * Ⲇ, [Δ[193], Δ[234], "#85592c", Δ[547]], 0)));
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠⵠⵠ].push(Δᐃⵠ(ᐃΔᐃⵠᐃⲆᐃ(.7 * Ⲇ, [Δ[193], Δ[234], "#85592c", Δ[547]], 1)));
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠⵠⵠ].push(Δᐃⵠ(ᐃΔᐃⵠᐃⲆᐃ(.7 * Ⲇ, [Δ[193], Δ[234], "#85592c", Δ[547]], 1))); // edit
		Ⲇⵠ[ⵠ.ⲆⲆᐃⵠⲆᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆᐃⵠⲆᐃⵠ].push(Δᐃⵠ(ΔᐃⵠᐃⲆⲆᐃ(Ⲇ * .4, [Δ[314], Δ[193], Δ[234], Δ[547]], 0, ΔΔⲆΔ)));
		Ⲇⵠ[ⵠ.ⲆⲆᐃⵠⲆᐃⵠ].push(Δᐃⵠ(ΔᐃⵠᐃⲆⲆᐃ(.4 * Ⲇ, [Δ[314], Δ[193], Δ[234], Δ[547]], ⵠΔΔ, ΔΔⲆΔ)));
		Ⲇⵠ[ⵠ.ⲆⲆᐃⵠⲆᐃⵠ].push(Δᐃⵠ(ΔᐃⵠᐃⲆⲆᐃ(Ⲇ * .4, [Δ[314], Δ[193], Δ[234], Δ[254]], 1, ⲆⵠΔⲆ)));
		Ⲇⵠ[ⵠ.ΔⲆⲆᐃⲆᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⲆᐃⲆᐃᐃ].push(Δᐃⵠ(ΔᐃⵠᐃⲆⲆᐃ(Ⲇ * .4, [Δ[314], Δ[193], Δ[234], Δ[547]], ⵠⲆΔⵠ, 0)));
		Ⲇⵠ[ⵠ.ΔⲆⲆᐃⲆᐃᐃ].push(Δᐃⵠ(ΔᐃⵠᐃⲆⲆᐃ(.4 * Ⲇ, [Δ[314], Δ[193], Δ[234], Δ[547]], ᐃⲆⲆ, 0)));
		Ⲇⵠ[ⵠ.ΔⲆⲆᐃⲆᐃᐃ].push(Δᐃⵠ(ΔᐃⵠᐃⲆⲆᐃ(.4 * Ⲇ, [Δ[314], Δ[193], Δ[234], Δ[254]], 1, ⵠᐃΔⲆ)));
		Ⲇⵠ[ⵠ.ⵠⲆΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆΔⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ⲆᐃΔΔᐃ(Ⲇ * .7, true, [Δ[314], "#6d5041", "#4f3d35", Δ[318], Δ[175], "#757575"])));
		Ⲇⵠ[ⵠ.ⵠⲆΔⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ⲆᐃΔΔᐃ(Ⲇ * .7, true, [Δ[314], Δ[471], Δ[492], Δ[85], Δ[487], "#274352"])));
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ⲆΔⲆΔ, ⲆᐃΔΔᐃ(Ⲇ * .7, true, [Δ[314], Δ[301], Δ[305], Δ[277], Δ[427], "#ada437"])));
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃᐃΔⵠ, ⲆᐃΔΔᐃ(Ⲇ * .7, ⵠⲆΔΔⲆ, [Δ[314], Δ[250], Δ[540], Δ[435], Δ[474], "#32916c"])));
		Ⲇⵠ[ⵠ.ⵠᐃΔⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃΔⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ΔΔⲆᐃ, ⲆᐃΔΔᐃ(.7 * Ⲇ, ΔᐃⲆⵠΔ, [Δ[314], Δ[170], Δ[534], Δ[77], Δ[116], "#42aab8"])));
		Ⲇⵠ[ⵠ.ⵠᐃΔⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ᐃᐃΔⵠ, ⲆᐃΔΔᐃ(.7 * Ⲇ, true, [Δ[314], Δ[406], Δ[555], Δ[312], Δ[54], "#49bdc6"])));
		Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(ⵠᐃⲆᐃ, ⲆᐃΔΔᐃ(Ⲇ * .7, true, [Δ[314], Δ[170], Δ[534], Δ[321], Δ[208], "#9641b5"])));
		Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(3, ⲆᐃΔΔᐃ(.7 * Ⲇ, ᐃⲆΔⵠΔ, [Δ[314], Δ[406], Δ[555], Δ[71], Δ[173], "#6f45c2"])));
		Ⲇⵠ[ⵠ.ⲆⵠᐃⲆΔⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠᐃⲆΔⲆΔ].push(Δᐃⵠ(ᐃⲆΔΔΔᐃⲆ(.7 * Ⲇ, ["#3b330d", "#b5a118", "#c8ac16"], ⲆᐃⲆ)));
		Ⲇⵠ[ⵠ.ⲆⵠᐃⲆΔⲆΔ].push(Δᐃⵠ(ᐃⲆΔΔΔᐃⲆ(Ⲇ * .7, ["#524712", "#c7b11c", "#d9ba18"], ⵠᐃⵠⵠ)));
		Ⲇⵠ[ⵠ.ⲆⵠᐃⲆΔⲆΔ].push(Δᐃⵠ(ᐃⲆΔΔΔᐃⲆ(Ⲇ * .7, ["#2a2409", "#9f8e14", "#ad9511"], ⲆⲆᐃΔ)));
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠⵠⵠᐃ] = Δᐃⵠ(ⵠⲆⵠⵠⵠⵠⵠⲆᐃ(Ⲇ * 1.1, [Δ[60]]));
		Ⲇⵠ[ⵠ.ᐃΔᐃΔⲆΔᐃ] = Δᐃⵠ(ᐃΔᐃᐃ(Math.PI, ΔΔᐃΔⵠⲆᐃⵠᐃ(.9 * Ⲇ, Δ[60])));
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⵠᐃⵠᐃⲆᐃ(Ⲇ * .55, ᐃᐃᐃΔΔ, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⵠᐃⵠᐃⲆᐃ(Ⲇ * .55, ᐃⲆΔⵠΔ, [Δ[499], "#0f3f3d", Δ[556], "#0d2d2b", Δ[78], "#070d16"]));
		Ⲇⵠ[ⵠ.ᐃΔᐃΔⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃΔᐃΔⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠⵠᐃⲆⵠⲆ(Ⲇ * .55, ΔᐃⲆⵠΔ, [Δ[340], Δ[426], "#573f29", Δ[384]]));
		Ⲇⵠ[ⵠ.ᐃΔᐃΔⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠⵠᐃⲆⵠⲆ(.55 * Ⲇ, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
		Ⲇⵠ[ⵠ.ᐃⲆⲆⵠΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⲆⵠΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔΔΔⵠᐃⵠⲆ(.6 * Ⲇ, true, [Δ[340], "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", Δ[309], "#747474", "#969696", Δ[447]]));
		Ⲇⵠ[ⵠ.ᐃⲆⲆⵠΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔΔΔⵠᐃⵠⲆ(Ⲇ * .6, true, [Δ[204], "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", Δ[260]]));
		Ⲇⵠ[ⵠ.ⵠΔΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⵠΔΔΔΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠᐃⵠΔⵠⵠⵠ(Ⲇ * .58, ⲆΔᐃⵠⵠ, ["#dbce71", Δ[427], Δ[277]]));
		Ⲇⵠ[ⵠ.ⵠΔΔΔΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠᐃⵠΔⵠⵠⵠ(Ⲇ * .58, true, [Δ[ⵠⵠⵠⲆᐃ], "#15543c", Δ[266]]));
		Ⲇⵠ[ⵠ.ⲆᐃⵠΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⵠΔΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔⵠᐃⵠΔᐃ(.69 * Ⲇ, true, ["#717171", "#485252", Δ[309], "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
		Ⲇⵠ[ⵠ.ⲆᐃⵠΔΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔⵠᐃⵠΔᐃ(Ⲇ * .69, ⵠⵠᐃⵠⵠ, [Δ[537], "#092121", Δ[556], Δ[137], "#277a74", "#1f665f", Δ[55], Δ[575]]));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⵠⲆᐃᐃⵠⵠ(1.3 * Ⲇ, [Δ[519], "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", Δ[519], Δ[564]])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃΔᐃᐃᐃᐃⵠ(1.5 * Ⲇ, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", Δ[564]])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⲆΔⵠᐃⵠΔ(1.5 * Ⲇ, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⵠⲆᐃᐃⵠⵠ(Ⲇ * 1.3, [Δ[391], "#0e3638", Δ[252], Δ[115], Δ[252], "#1d5559", Δ[115], "#48a8aa", Δ[421], "#56afac"])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃΔᐃᐃᐃᐃⵠ(1.5 * Ⲇ, [Δ[391], "#0e3638", Δ[252], Δ[115], "#48a8aa", "#56afac"])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⲆΔⵠᐃⵠΔ(1.5 * Ⲇ, [Δ[391], "#0e3638", Δ[252], Δ[115], Δ[421], "#56afac"])));
		Ⲇⵠ[ⵠ.ⵠⵠⲆΔⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⲆΔⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠⲆᐃⲆᐃᐃ(ⲆΔᐃ * Ⲇ, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", Δ[153], "#57aba6", Δ[153]]));
		Ⲇⵠ[ⵠ.ⵠⵠⲆΔⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠⲆᐃⲆᐃᐃ(ᐃⲆΔ * Ⲇ, ["#050505", "#1d3a38", "#0b514a", Δ[304], "#327570", "#1d3a38", Δ[153], "#0b514a", "#63afa9"]));
		Ⲇⵠ[ⵠ.ᐃⲆⵠⲆᐃᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⵠⲆᐃᐃⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃᐃⵠⲆⲆⲆⵠ(ⲆⵠⲆ * Ⲇ, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
		Ⲇⵠ[ⵠ.ᐃⲆⵠⲆᐃᐃⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃᐃⵠⲆⲆⲆⵠ(Ⲇ * 1, ["#050505", "#327570", "#021724", Δ[304]]));
		Ⲇⵠ[ⵠ.ⲆᐃⲆᐃΔⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⲆᐃΔⲆⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⲆⲆⲆⲆΔᐃ(Ⲇ * ᐃⲆΔ, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
		Ⲇⵠ[ⵠ.ⲆᐃⲆᐃΔⲆⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⲆⲆⲆⲆΔᐃ(1 * Ⲇ, ["#050505", "#327570", "#021724", Δ[304]]));
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆΔⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆΔⲆⵠ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆΔⲆⵠ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆΔⲆⵠ][ⵠ.ΔΔΔ] = [ΔⲆ.ⵠΔⵠⵠᐃᐃⲆ, ΔⲆ.ΔⲆⲆⲆⲆᐃⵠ, ΔⲆ.ⲆⲆᐃⲆΔⲆΔ, ΔⲆ.ⲆΔⲆⵠⵠⵠⲆ, ΔⲆ.ΔⲆⵠⲆᐃᐃⲆ, ΔⲆ.ΔΔⵠΔⲆᐃᐃ, ΔⲆ.ⵠᐃᐃᐃⲆΔⵠ, ΔⲆ.ⵠⵠᐃⲆⲆᐃⲆ, ΔⲆ.ⲆᐃΔⲆⲆᐃΔ, ΔⲆ.ᐃⲆⵠⵠΔᐃⲆ, ΔⲆ.ⲆΔΔⲆⵠΔᐃ, ΔⲆ.ⲆⲆΔΔⵠΔⵠ, ΔⲆ.ΔⵠᐃᐃⲆⲆΔ, ΔⲆ.ᐃΔⵠᐃⵠⵠᐃ, ΔⲆ.ⵠⵠⲆⲆⲆΔᐃ, ΔⲆ.ΔⲆⵠⵠⵠⵠⲆ, ΔⲆ.ᐃᐃⲆⵠᐃⲆᐃ, ΔⲆ.ⲆⵠᐃᐃⵠΔΔ, ΔⲆ.ΔΔⵠᐃⲆⲆΔ, ΔⲆ.ⲆᐃᐃΔⵠᐃⲆ, ΔⲆ.ⵠⲆⲆⲆⵠΔᐃ, ΔⲆ.ⵠᐃΔⵠⵠⲆⵠ, ΔⲆ.ⲆᐃⵠⵠᐃΔⵠ, ΔⲆ.ΔᐃΔΔΔⵠΔ, ΔⲆ.ⵠᐃΔⲆⲆΔⲆ, ΔⲆ.ᐃⵠⲆⵠⲆᐃⲆ, ΔⲆ.ᐃⲆⲆᐃΔⵠᐃ, ΔⲆ.ⲆⲆᐃⲆΔᐃⵠ, ΔⲆ.ᐃᐃⵠⲆⵠⲆᐃ, ΔⲆ.ⲆΔⵠᐃΔᐃⵠ, ΔⲆ.ⵠᐃⲆΔⲆⲆΔ, ΔⲆ.ΔⵠⲆⲆΔⲆᐃ, ΔⲆ.ⵠΔᐃᐃᐃⵠⲆ, ΔⲆ.ⲆᐃⲆᐃΔⵠΔ, ΔⲆ.ΔᐃⵠΔᐃΔΔ, ΔⲆ.ⲆⵠΔᐃⵠΔⲆ, ΔⲆ.ⵠΔᐃⵠⵠⲆⲆ, ΔⲆ.ⵠΔⲆᐃⵠⲆⵠ, ΔⲆ.ΔΔᐃΔᐃᐃᐃ, ΔⲆ.ⲆᐃᐃΔᐃᐃⵠ, ΔⲆ.ΔᐃⲆⵠΔⵠⲆ, ΔⲆ.ⵠⵠΔⲆᐃΔΔ, ΔⲆ.ᐃΔΔΔⲆΔⵠ, ΔⲆ.ⲆⵠⲆⲆᐃᐃⲆ, ΔⲆ.ⵠᐃΔⵠΔⵠⵠ, ΔⲆ.ᐃⵠᐃⵠⲆⲆⲆ, ΔⲆ.ΔⵠⵠᐃⵠΔΔ, ΔⲆ.ΔᐃⲆΔᐃΔⵠ, ΔⲆ.ΔΔⵠⲆⲆΔⵠ, ΔⲆ.ᐃⵠᐃⲆⲆⲆΔ, ΔⲆ.ΔᐃⲆⵠⵠⲆΔ, ΔⲆ.ⲆᐃⵠᐃᐃΔᐃ, ΔⲆ.ᐃᐃⵠⵠΔⲆⵠ, ΔⲆ.ⵠᐃⲆⲆⵠⵠⲆ, ΔⲆ.ᐃᐃΔᐃΔⵠᐃ, ΔⲆ.ΔᐃⵠΔΔΔⵠ];
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆΔⲆⵠ][ⵠ.ⵠᐃⲆ] = [ΔⲆ.ⲆⵠⲆⵠΔᐃⲆ, ΔⲆ.ⵠᐃᐃⵠⵠᐃᐃ, ΔⲆ.ⵠⵠᐃⵠⵠᐃΔ, ΔⲆ.ⲆⲆⵠᐃⵠⵠⲆ, ΔⲆ.ΔᐃⲆⵠⵠⲆⲆ, ΔⲆ.ⲆΔᐃⲆΔΔᐃ, ΔⲆ.ⲆᐃⵠⲆᐃΔᐃ, ΔⲆ.ⲆᐃⲆᐃΔΔΔ, ΔⲆ.ΔᐃⵠᐃⵠΔⲆ, ΔⲆ.ⲆᐃᐃᐃⲆΔΔ, ΔⲆ.ΔⲆⵠᐃᐃⵠᐃ, ΔⲆ.ⲆᐃⲆⲆⲆⵠⲆ, ΔⲆ.ΔᐃΔⲆΔⵠΔ, ΔⲆ.ᐃⵠΔⲆⵠⲆⵠ, ΔⲆ.ΔⲆⵠΔⲆⵠᐃ, ΔⲆ.ⲆᐃⲆᐃⵠⵠⲆ, ΔⲆ.ΔᐃⲆⲆΔΔᐃ, ΔⲆ.ΔⲆΔⵠᐃΔΔ, ΔⲆ.ΔᐃⵠⵠᐃΔⵠ, ΔⲆ.ᐃΔᐃⵠΔᐃⵠ, ΔⲆ.ΔΔⲆⵠΔᐃᐃ, ΔⲆ.ᐃⵠⲆᐃⲆᐃⵠ, ΔⲆ.ΔᐃᐃⲆΔⲆⵠ, ΔⲆ.ⲆΔⵠⲆᐃᐃΔ, ΔⲆ.ⲆΔᐃⵠΔΔⵠ, ΔⲆ.ᐃⵠΔΔⲆⵠΔ, ΔⲆ.ⵠⲆⵠΔⲆΔⵠ, ΔⲆ.ⲆᐃⲆⵠᐃΔⲆ, ΔⲆ.ⵠᐃⲆⲆᐃⲆᐃ, ΔⲆ.ᐃⲆΔⲆᐃᐃᐃ, ΔⲆ.ΔⵠᐃⵠⲆⲆⵠ, ΔⲆ.ⲆᐃᐃⲆᐃᐃⲆ, ΔⲆ.ΔⵠⲆⲆΔᐃΔ, ΔⲆ.ᐃΔⲆΔⵠⲆⲆ, ΔⲆ.ΔᐃⲆΔⲆⵠᐃ, ΔⲆ.ⲆΔⵠⵠΔΔΔ, ΔⲆ.ΔᐃᐃᐃΔⲆᐃ, ΔⲆ.ⵠⵠΔΔᐃᐃΔ, ΔⲆ.ⵠⲆΔΔⲆⵠΔ, ΔⲆ.ⵠⲆⲆᐃΔⵠⲆ, ΔⲆ.ᐃⵠΔⲆⲆⲆᐃ, ΔⲆ.ΔᐃᐃΔⲆⵠⵠ, ΔⲆ.ΔⲆⲆⵠΔΔΔ, ΔⲆ.ⵠⵠⲆΔⵠΔⲆ, ΔⲆ.ⵠΔᐃΔᐃⵠⵠ, ΔⲆ.ΔᐃⲆⲆⵠⵠⲆ, ΔⲆ.ΔⵠᐃⲆⲆⲆⲆ, ΔⲆ.ᐃᐃⲆᐃᐃⲆᐃ, ΔⲆ.ᐃΔⵠΔΔⵠᐃ, ΔⲆ.ᐃΔΔΔⵠΔⲆ, ΔⲆ.ΔⵠᐃⲆΔΔⵠ, ΔⲆ.ⲆⲆⲆⵠΔⲆⲆ, ΔⲆ.ΔⲆⵠⵠᐃⵠⲆ, ΔⲆ.ⵠΔΔⲆⲆⲆᐃ, ΔⲆ.ⲆⲆⵠⵠΔᐃⵠ, ΔⲆ.ⲆⲆⲆΔⲆΔΔ];
		Ⲇⵠ[ⵠ.ΔⵠΔᐃΔ] = [];
		Ⲇⵠ[ⵠ.ΔⵠΔᐃΔ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ΔⵠΔᐃΔ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⵠΔᐃΔ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(1.1 * Ⲇ, false, [Δ[402], Δ[292], Δ[104]], ⵠᐃΔⲆ)));
		Ⲇⵠ[ⵠ.ΔⵠΔᐃΔ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(Ⲇ * .9, false, [Δ[402], Δ[292], Δ[104]], 1)));
		Ⲇⵠ[ⵠ.ΔⵠΔᐃΔ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(1 * Ⲇ, false, [Δ[402], Δ[292], Δ[104]], 2)));
		Ⲇⵠ[ⵠ.ΔⵠΔᐃΔ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(.9 * Ⲇ, false, [Δ[402], Δ[292], Δ[104]], Δⵠᐃᐃ)));
		Ⲇⵠ[ⵠ.ΔⵠΔᐃΔ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(Ⲇ * 1.1, false, [Δ[204], Δ[556], Δ[537]], ⵠⵠΔΔ)));
		Ⲇⵠ[ⵠ.ΔⵠΔᐃΔ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(Ⲇ * .9, ᐃⵠⵠⲆⵠ, [Δ[204], Δ[556], Δ[537]], ⲆⵠⲆ)));
		Ⲇⵠ[ⵠ.ΔⵠΔᐃΔ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(Ⲇ * Δᐃᐃ, ⵠΔⵠᐃᐃ, [Δ[204], Δ[556], Δ[537]], 2)));
		Ⲇⵠ[ⵠ.ΔⵠΔᐃΔ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(.9 * Ⲇ, ⵠⲆⵠᐃᐃ, [Δ[204], Δ[556], Δ[537]], ⲆⲆᐃⲆ)));
		Ⲇⵠ[ⵠ.Δⵠᐃⵠᐃ] = [];
		Ⲇⵠ[ⵠ.Δⵠᐃⵠᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.Δⵠᐃⵠᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.Δⵠᐃⵠᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(1.1 * Ⲇ, ᐃⲆⲆⲆΔ, [Δ[402], Δ[276], Δ[215]], 2)));
		Ⲇⵠ[ⵠ.Δⵠᐃⵠᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(Ⲇ * .9, true, [Δ[402], Δ[276], Δ[215]], 2)));
		Ⲇⵠ[ⵠ.Δⵠᐃⵠᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(Ⲇ * ⲆΔᐃΔ, true, [Δ[402], Δ[276], Δ[215]], 2)));
		Ⲇⵠ[ⵠ.Δⵠᐃⵠᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(.9 * Ⲇ, ᐃⲆΔⵠΔ, [Δ[402], Δ[276], Δ[215]], 2)));
		Ⲇⵠ[ⵠ.Δⵠᐃⵠᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(1.1 * Ⲇ, ᐃΔᐃⵠᐃ, [Δ[204], Δ[556], Δ[537]], ⲆᐃᐃΔ)));
		Ⲇⵠ[ⵠ.Δⵠᐃⵠᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(.9 * Ⲇ, true, [Δ[204], Δ[556], Δ[537]], 2)));
		Ⲇⵠ[ⵠ.Δⵠᐃⵠᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(1 * Ⲇ, ᐃⲆᐃᐃΔ, [Δ[204], Δ[556], Δ[537]], ⲆᐃᐃΔ)));
		Ⲇⵠ[ⵠ.Δⵠᐃⵠᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⲆΔᐃ(Ⲇ * .9, true, [Δ[204], Δ[556], Δ[537]], 2)));
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ΔⲆⵠᐃⵠ(Ⲇ * 1.5, ᐃⵠⵠⲆⵠ, [Δ[145], Δ[429], Δ[188]])));
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ΔⲆⵠᐃⵠ(Ⲇ * 1.3, false, [Δ[145], Δ[429], Δ[188]])));
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ΔⲆⵠᐃⵠ(Ⲇ * 1.1, false, [Δ[145], Δ[429], Δ[188]])));
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ΔⲆⵠᐃⵠ(Ⲇ * 1.5, false, [Δ[421], "#3e8989", "#50a09c"])));
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ΔⲆⵠᐃⵠ(Ⲇ * 1.3, false, [Δ[421], "#3e8989", "#50a09c"])));
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ΔⲆⵠᐃⵠ(1.1 * Ⲇ, ⵠΔⵠᐃᐃ, [Δ[421], "#3e8989", "#50a09c"])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃⵠ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃⵠ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⵠⲆⵠ(Ⲇ * 1.1, ΔΔᐃⵠᐃ, [Δ[65], "#70e0dd", "#95efea"])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⵠⲆⵠ(.9 * Ⲇ, ΔⲆΔΔᐃ, [Δ[65], "#70e0dd", "#95efea"])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⲆⵠⲆⵠ(Ⲇ * .7, ⲆⵠΔᐃⵠ, [Δ[65], "#70e0dd", "#95efea"])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⵠⲆⵠ(Ⲇ * 1.1, ΔⲆΔΔᐃ, [Δ[65], "#47b2ac", Δ[75]])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⵠⲆⵠ(.9 * Ⲇ, false, [Δ[65], "#47b2ac", Δ[75]])));
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⲆⵠⲆⵠ(.7 * Ⲇ, false, [Δ[65], "#47b2ac", Δ[75]])));
		Ⲇⵠ[ⵠ.ᐃΔⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃΔⲆᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ᐃΔⲆᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃΔⲆᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⵠΔᐃΔⵠⵠ(1.7 * Ⲇ, true, [Δ[121], Δ[76], Δ[577]])));
		Ⲇⵠ[ⵠ.ᐃΔⲆᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⵠΔᐃΔⵠⵠ(Ⲇ * 1.5, true, [Δ[121], Δ[76], Δ[577]])));
		Ⲇⵠ[ⵠ.ᐃΔⲆᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ᐃⵠΔᐃΔⵠⵠ(Ⲇ * 1.3, ⵠⵠᐃⵠⵠ, [Δ[121], Δ[76], Δ[577]])));
		Ⲇⵠ[ⵠ.ᐃΔⲆᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⵠΔᐃΔⵠⵠ(1.7 * Ⲇ, ⵠⲆΔΔᐃ, [Δ[121], "#41aaa0", Δ[75]])));
		Ⲇⵠ[ⵠ.ᐃΔⲆᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⵠΔᐃΔⵠⵠ(Ⲇ * 1.5, true, [Δ[121], "#41aaa0", Δ[75]])));
		Ⲇⵠ[ⵠ.ᐃΔⲆᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ᐃⵠΔᐃΔⵠⵠ(1.3 * Ⲇ, ᐃᐃᐃΔΔ, [Δ[121], "#41aaa0", Δ[75]])));
		Ⲇⵠ[ⵠ.ⲆⵠⵠⵠΔΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⵠⵠΔΔⵠ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⵠⵠΔΔⵠ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⵠⵠΔΔⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⲆᐃΔΔⵠⲆᐃ(Ⲇ, ["#2d53c4"])));
		Ⲇⵠ[ⵠ.ⲆⵠⵠⵠΔΔⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⲆᐃΔΔⵠⲆᐃ(Ⲇ, ["#2d53c4"])));
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔⵠⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔⵠⵠᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔⵠⵠᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔⵠⵠᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⲆᐃΔΔⵠⲆᐃ(Ⲇ, ["#c4912d"])));
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔⵠⵠᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⲆᐃΔΔⵠⲆᐃ(Ⲇ, ["#c4912d"])));
		Ⲇⵠ[ⵠ.ⲆΔⵠΔⵠⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⵠΔⵠⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃᐃᐃⲆΔ(Ⲇ, ["#414040"]));
		Ⲇⵠ[ⵠ.ⲆΔⵠΔⵠⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃᐃᐃⲆΔ(Ⲇ, ["#153635"]));
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠᐃⵠΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠᐃⵠΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠΔᐃⲆᐃⲆⵠ(Δᐃᐃ * Ⲇ, ΔⲆΔΔᐃ, [Δ[288], Δ[288], Δ[532], Δ[532], Δ[288], Δ[532]]));
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠᐃⵠΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠΔᐃⲆᐃⲆⵠ(Ⲇ * 1, false, [Δ[91], Δ[91], Δ[315], Δ[315], Δ[91], Δ[315]]));
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠᐃΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠᐃΔΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔⵠΔⵠ(ⲆΔᐃ * Ⲇ, ⲆⵠⲆΔᐃ, [Δ[288], Δ[288], Δ[532], Δ[532], Δ[288], Δ[532]]));
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠᐃΔΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔⵠΔⵠ(1 * Ⲇ, false, [Δ[91], Δ[91], Δ[315], Δ[315], Δ[91], Δ[315]]));
		Ⲇⵠ[ⵠ.ⵠᐃΔᐃΔᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃΔᐃΔᐃⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔⵠΔⵠ(Ⲇ * 1, ⲆⲆⲆΔᐃ, [Δ[288], Δ[288], Δ[532], Δ[532], Δ[288], Δ[532]]));
		Ⲇⵠ[ⵠ.ⵠᐃΔᐃΔᐃⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔⵠΔⵠ(1 * Ⲇ, false, [Δ[91], Δ[91], Δ[315], Δ[315], Δ[91], Δ[315]]));
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔΔⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠΔⲆΔᐃΔⲆ(ⲆΔᐃ * Ⲇ, ⲆⵠⲆⵠΔ, [Δ[288], Δ[288], Δ[532], Δ[532], Δ[288], Δ[532]]));
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔΔⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠΔⲆΔᐃΔⲆ(Ⲇ * 1, false, [Δ[91], Δ[91], Δ[315], Δ[315], Δ[91], Δ[315]]));
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆᐃⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆᐃⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠᐃᐃⵠⵠᐃⵠ(1 * Ⲇ, false, [Δ[288], Δ[288], Δ[532], Δ[532], Δ[288], Δ[532]]));
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆᐃⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠᐃᐃⵠⵠᐃⵠ(1 * Ⲇ, ᐃⵠⵠⲆⵠ, [Δ[91], Δ[91], Δ[315], Δ[315], Δ[91], Δ[315]]));
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔᐃΔⲆⲆΔⲆ(Ⲇ * .9, [Δ[121], Δ[153], "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔᐃΔⲆⲆΔⲆ(Ⲇ * .9, [Δ[65], "#1a847f", Δ[304], "#131919", "#01333a", "#b6f2db"]));
		Ⲇⵠ[ⵠ.ⵠⵠΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠΔⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠᐃⵠΔⵠⲆ(.9 * Ⲇ, [Δ[121], Δ[153], "#c41c50", "#c63450", Δ[153], "#f7e7f0", "#2b2d2d"]));
		Ⲇⵠ[ⵠ.ⵠⵠΔⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠᐃⵠΔⵠⲆ(Ⲇ * .9, [Δ[65], "#1a847f", Δ[304], "#01333a", Δ[153], "#b6f2db", "#2b2d2d"]));
		Ⲇⵠ[ⵠ.ⲆΔΔⲆΔΔⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆΔᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔᐃⵠⲆⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃ] = [];
		for (var Δᐃ = 0; ᐃⵠΔⲆ > Δᐃ; Δᐃ++) {
			Ⲇⵠ[ⵠ.ⲆΔΔⲆΔΔⵠ][Δᐃ] = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
			Ⲇⵠ[ⵠ.ⲆΔΔⲆΔΔⵠ][Δᐃ].width = 193;
			Ⲇⵠ[ⵠ.ⲆΔΔⲆΔΔⵠ][Δᐃ].height = 193;
			Ⲇⵠ[ⵠ.ᐃⲆΔᐃⲆ][Δᐃ] = Ⲇⵠ[ⵠ.ⲆΔΔⲆΔΔⵠ][Δᐃ].getContext(Δ[160]);
			Ⲇⵠ[ⵠ.ΔᐃⵠⲆⵠᐃⲆ][Δᐃ] = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
			Ⲇⵠ[ⵠ.ΔᐃⵠⲆⵠᐃⲆ][Δᐃ].width = 600;
			Ⲇⵠ[ⵠ.ΔᐃⵠⲆⵠᐃⲆ][Δᐃ].height = 600;
			Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃ][Δᐃ] = Ⲇⵠ[ⵠ.ΔᐃⵠⲆⵠᐃⲆ][Δᐃ].getContext(Δ[160])
		}
		Ⲇⵠ[ⵠ.ΔⲆⲆᐃⵠⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⲆᐃⵠⲆⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃᐃᐃⲆΔ(Ⲇ, ["#c8e0de"]));
		Ⲇⵠ[ⵠ.ΔⲆⲆᐃⵠⲆⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃᐃᐃⲆΔ(Ⲇ, ["#147071"]));
		Ⲇⵠ[ⵠ.ΔΔᐃᐃΔⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ΔΔᐃᐃΔⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃᐃᐃⲆΔ(Ⲇ, ["#231912"]));
		Ⲇⵠ[ⵠ.ΔΔᐃᐃΔⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃᐃᐃⲆΔ(Ⲇ, ["#021719"]));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠⵠᐃ] = Δᐃⵠ(ᐃᐃⲆΔΔⵠⲆⲆⲆ(.5 * Ⲇ, [Δ[60]]));
		Ⲇⵠ[ⵠ.ΔⲆΔΔᐃᐃⵠ] = Δᐃⵠ(ΔⲆΔⲆΔΔⲆⵠΔ(.9 * Ⲇ, Δ[60]));
		Ⲇⵠ[ⵠ.ΔᐃⵠᐃᐃᐃΔ] = Δᐃⵠ(ᐃᐃⲆⵠΔⲆᐃᐃΔ(Ⲇ * .9, Δ[60]));
		Ⲇⵠ[ⵠ.ΔⵠⵠᐃⵠᐃⲆ] = Δᐃⵠ(ⲆᐃΔᐃⵠⲆⵠⵠᐃ(1 * Ⲇ, [Δ[60]]));
		Ⲇⵠ[ⵠ.ⲆᐃⲆΔᐃᐃⵠ] = Δᐃⵠ(ᐃᐃⲆΔⵠᐃⲆᐃⲆ(.8 * Ⲇ, Δ[60]));
		Ⲇⵠ[ⵠ.ΔⲆⲆᐃΔⵠᐃ] = Δᐃⵠ(ΔΔΔᐃΔᐃᐃⵠⲆ(Ⲇ * .8, Δ[60]));
		Ⲇⵠ[ⵠ.ⵠⵠᐃⵠᐃᐃⲆ] = Δᐃⵠ(ⲆΔΔⵠⵠⵠⵠᐃΔ(.9 * Ⲇ, Δ[60]));
		Ⲇⵠ[ⵠ.ΔΔⵠⵠ] = Δᐃⵠ(ΔⵠⵠΔᐃⵠⲆ(Ⲇ * .6, Δ[60]));
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆⵠ] = Δᐃⵠ(ΔⵠⵠΔᐃⵠⲆ(.6 * Ⲇ, "#1CE7E0"));
		Ⲇⵠ[ⵠ.ΔⲆⲆᐃⲆᐃⲆ] = Δᐃⵠ(ΔⵠⵠΔᐃⵠⲆ(Ⲇ * .6, "#DBE71C"));
		Ⲇⵠ[ⵠ.ᐃⲆΔΔⲆᐃΔ] = Δᐃⵠ(ΔⵠⵠΔᐃⵠⲆ(.6 * Ⲇ, "#00BB00"));
		Ⲇⵠ[ⵠ.ⵠⲆΔⲆᐃⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆΔⲆᐃⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃᐃᐃⲆΔ(Ⲇ, ["#dac291"]));
		Ⲇⵠ[ⵠ.ⵠⲆΔⲆᐃⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃᐃᐃⲆΔ(Ⲇ, ["#0D423D"]));
		Ⲇⵠ[ⵠ.ΔᐃⲆⵠⲆⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ΔᐃⲆⵠⲆⵠᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃᐃᐃⲆΔ(Ⲇ, ["#dac291"]));
		Ⲇⵠ[ⵠ.ΔᐃⲆⵠⲆⵠᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃᐃᐃⲆΔ(Ⲇ, ["#0D423D"]));
		Ⲇⵠ[ⵠ.ⲆΔΔⵠΔⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆΔΔⵠΔⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠⵠΔᐃΔⲆⵠ(.3 * Ⲇ, true, [Δ[417], "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
		Ⲇⵠ[ⵠ.ⲆΔΔⵠΔⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠⵠΔᐃΔⲆⵠ(Ⲇ * .3, ⲆᐃⵠⵠⲆ, [Δ[417], Δ[433], Δ[260], "#245d5d", "#1f5454", Δ[149]]));
		Ⲇⵠ[ⵠ.ⲆⲆⲆⲆⵠⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⲆⲆⵠⲆⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠⵠΔᐃΔⲆⵠ(.3 * Ⲇ, true, [Δ[417], "#717273", "#606162", "#a09f9f", "#878787", Δ[447]]));
		Ⲇⵠ[ⵠ.ⲆⲆⲆⲆⵠⲆⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠⵠΔᐃΔⲆⵠ(.3 * Ⲇ, ᐃⲆⵠⵠΔⲆⲆ, [Δ[417], Δ[433], Δ[260], "#245d5d", "#1f5454", "#0b2121"]));
		Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃ] = [Δᐃⵠ(ΔᐃⲆΔᐃⲆⵠ(Ⲇ, ⵠⲆΔΔⲆ, [Δ[103], Δ[63], Δ[81], Δ[68], Δ[422], Δ[373], Δ[396]]))];
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆ] = [Δᐃⵠ(ΔᐃⲆΔᐃⲆⵠ(Ⲇ, ⵠΔΔᐃⲆ, [Δ[103], Δ[63], Δ[81], Δ[68], Δ[422], Δ[373], Δ[396]]))];
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⲆΔⲆⵠⵠⲆⲆ(ⵠⵠᐃ * Ⲇ, [Δ[559]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⲆᐃΔⵠΔⵠ(Ⲇ * 1, [Δ[559]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ΔᐃΔⲆⵠⲆΔ(ⲆΔᐃΔ * Ⲇ, [Δ[559]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ΔⲆᐃΔⲆᐃΔ(Ⲇ * 1, [Δ[559]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⲆΔΔΔⲆⲆⲆ(1 * Ⲇ, [Δ[559]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⲆⲆⵠⲆⵠᐃ(ᐃⲆΔ * Ⲇ, [Δ[559]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⲆⵠᐃⲆᐃⵠⲆ(ⲆⵠⲆ * Ⲇ, [Δ[559]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⲆΔⲆⵠⵠⲆⲆ(Ⲇ * 1, [Δ[149]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⲆᐃΔⵠΔⵠ(Ⲇ * 1, [Δ[149]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ΔᐃΔⲆⵠⲆΔ(ⲆⵠΔⲆ * Ⲇ, [Δ[149]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ΔⲆᐃΔⲆᐃΔ(Ⲇ * ᐃⲆⲆ, [Δ[149]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⲆΔΔΔⲆⲆⲆ(Ⲇ * 1, [Δ[149]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⲆⲆⵠⲆⵠᐃ(1 * Ⲇ, [Δ[149]])));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⲆⵠᐃⲆᐃⵠⲆ(Ⲇ * 1, [Δ[149]])));
		Ⲇⵠ[ⵠ.ΔᐃⵠⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔᐃⵠⲆᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ΔᐃⵠⲆᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔᐃⵠⲆᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(1.7 * Ⲇ, ["#FBEFBC"], ΔΔⲆⲆ)));
		Ⲇⵠ[ⵠ.ΔᐃⵠⲆᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(1.9 * Ⲇ, ["#FBEFBC"], ⲆⵠⲆ)));
		Ⲇⵠ[ⵠ.ΔᐃⵠⲆᐃ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(Ⲇ * 1.7, ["#FBEFBC"], 2)));
		Ⲇⵠ[ⵠ.ΔᐃⵠⲆᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(1.7 * Ⲇ, ["#0F4C48"], ⵠⲆΔⵠ)));
		Ⲇⵠ[ⵠ.ΔᐃⵠⲆᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(1.9 * Ⲇ, ["#0F4C48"], 1)));
		Ⲇⵠ[ⵠ.ΔᐃⵠⲆᐃ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(Ⲇ * 1.7, ["#0F4C48"], Ⲇⵠᐃⵠ)));
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(Ⲇ * 1.8, [Δ[342]], ⲆᐃⲆ)));
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(Ⲇ * 2, [Δ[342]], ⲆΔᐃ)));
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(1.8 * Ⲇ, [Δ[342]], 2)));
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(Ⲇ * 1.8, [Δ[326]], 0)));
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(2 * Ⲇ, [Δ[326]], ΔΔⲆΔ)));
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(1.8 * Ⲇ, [Δ[326]], Ⲇⵠᐃⵠ)));
		Ⲇⵠ[ⵠ.ⲆⲆΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆΔΔΔ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆΔΔΔ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆΔΔΔ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(Ⲇ * 1.9, [Δ[464]], 0)));
		Ⲇⵠ[ⵠ.ⲆⲆΔΔΔ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(2.1 * Ⲇ, [Δ[464]], ⵠΔᐃ)));
		Ⲇⵠ[ⵠ.ⲆⲆΔΔΔ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(1.9 * Ⲇ, [Δ[464]], 2)));
		Ⲇⵠ[ⵠ.ⲆⲆΔΔΔ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(Ⲇ * 1.9, [Δ[388]], 0)));
		Ⲇⵠ[ⵠ.ⲆⲆΔΔΔ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(2.1 * Ⲇ, [Δ[388]], ⵠΔΔ)));
		Ⲇⵠ[ⵠ.ⲆⲆΔΔΔ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⲆᐃΔΔ(1.9 * Ⲇ, [Δ[388]], 2)));
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃⵠ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃⵠ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⵠΔΔⵠⵠΔ(.8 * Ⲇ, ["#231F20", "#0c8e5b", "#037542", Δ[434]])));
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⵠΔΔⵠⵠΔ(Ⲇ * 1, ["#231F20", "#0c8e5b", "#037542", Δ[434]])));
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃⵠ][ⵠ.ΔΔΔ].push(Δᐃⵠ(ⵠⵠΔΔⵠⵠΔ(Ⲇ * 1.2, ["#231F20", "#0c8e5b", "#037542", Δ[434]])));
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⵠΔΔⵠⵠΔ(.8 * Ⲇ, ["#041e22", Δ[230], Δ[295], Δ[334]])));
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⵠΔΔⵠⵠΔ(Ⲇ * ⵠⵠⵠΔ, ["#041e22", Δ[230], Δ[295], Δ[334]])));
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃⵠ][ⵠ.ⵠᐃⲆ].push(Δᐃⵠ(ⵠⵠΔΔⵠⵠΔ(1.2 * Ⲇ, ["#041e22", Δ[230], Δ[295], Δ[334]])));
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠᐃⲆᐃⲆⲆ(Ⲇ * .8, [Δ[417], Δ[30], "#201851", Δ[473], "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", Δ[473], "#052830", Δ[396], Δ[30], Δ[93]]));
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠᐃⲆᐃⲆⲆ(.8 * Ⲇ, [Δ[245], Δ[274], "#081B2D", Δ[473], "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", Δ[396], Δ[274], "#72898C"]));
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆΔᐃΔ] = Δᐃⵠ(ᐃΔΔⲆⵠΔΔΔⲆ(.8 * Ⲇ, [Δ[30]]));
		Ⲇⵠ[ⵠ.ⵠⲆⲆⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⲆⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⲆΔⲆⵠΔΔ(.8 * Ⲇ, true, [Δ[417], "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
		Ⲇⵠ[ⵠ.ⵠⲆⲆⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⲆΔⲆⵠΔΔ(Ⲇ * .8, ⲆⲆⵠⵠⲆ, [Δ[245], Δ[482], Δ[9], Δ[274], "#321C56", "#1C073D", Δ[93], "#1C0833", "#1B1238"]));
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃΔΔⲆ] = Δᐃⵠ(ⲆᐃⵠⵠⲆΔΔⲆᐃ(.8 * Ⲇ, [Δ[30]]));
		Ⲇⵠ[ⵠ.ΔᐃΔᐃᐃΔᐃ] = [];
		Ⲇⵠ[ⵠ.ΔᐃΔᐃᐃΔᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔΔⲆᐃᐃⲆ(.4 * Ⲇ, ⲆⲆⵠⵠⲆ, [Δ[417], "#db6f26", Δ[153], Δ[391], "#833813"], 0));
		Ⲇⵠ[ⵠ.ΔᐃΔᐃᐃΔᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔΔⲆᐃᐃⲆ(.4 * Ⲇ, ᐃΔᐃⵠᐃ, [Δ[245], Δ[482], Δ[ᐃΔⲆⵠΔ], Δ[274]], Δⵠⵠ));
		Ⲇⵠ[ⵠ.ⵠⲆΔⵠⲆΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆΔⵠⲆΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔΔⲆᐃᐃⲆ(Ⲇ * .4, ⵠΔΔᐃⲆ, [Δ[417], "#d35e35", Δ[153], Δ[391], Δ[391]], ⵠΔⲆ));
		Ⲇⵠ[ⵠ.ⵠⲆΔⵠⲆΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔΔⲆᐃᐃⲆ(.4 * Ⲇ, true, [Δ[245], Δ[482], Δ[9], Δ[274]], ᐃⲆⲆ));
		Ⲇⵠ[ⵠ.ⵠᐃΔⲆΔⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃΔⲆΔⵠⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆΔΔⲆᐃᐃⲆ(Ⲇ * .4, true, [Δ[417], "#2973a5", Δ[153], "#ffff00", Δ[391], "#03243f", "#f2ec30", "#162f6d"], ᐃΔΔ));
		Ⲇⵠ[ⵠ.ⵠᐃΔⲆΔⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆΔΔⲆᐃᐃⲆ(.4 * Ⲇ, true, [Δ[245], Δ[482], Δ[ⵠⵠᐃⵠⲆΔᐃ], Δ[274]], ⵠᐃΔⲆ));
		Ⲇⵠ[ⵠ.ᐃⲆᐃⵠᐃᐃⵠ] = Δᐃⵠ(ΔᐃⵠⲆⲆⲆᐃ(Ⲇ * .4, [Δ[30]]));
		Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠⲆⲆ] = Δᐃⵠ(ΔᐃⵠⲆⲆⲆᐃ(Ⲇ * .4, [Δ[30]]));
		Ⲇⵠ[ⵠ.ⲆΔᐃᐃⵠΔᐃⲆᐃ] = Δᐃⵠ(ΔᐃⵠⲆⲆⲆᐃ(Ⲇ * .4, [Δ[30]]));
		Ⲇⵠ[ⵠ.ᐃΔⲆᐃᐃ] = Δᐃⵠ(ᐃᐃⵠΔⵠᐃⲆ(.35 * Ⲇ, ⲆⲆⵠⵠⲆ, [Δ[314], Δ[551], Δ[298], Δ[210], Δ[551]], ⲆΔᐃ));
		Ⲇⵠ[ⵠ.ⲆⵠΔⵠⲆ] = Δᐃⵠ(ⲆⲆⵠⵠⵠΔⵠ(.35 * Ⲇ, ᐃⲆⵠⵠΔⲆⲆ, [Δ[417], "#ed5f4f", "#ce4545", Δ[153], "#e2dad7"], ⵠΔᐃ));
		Ⲇⵠ[ⵠ.ᐃⵠΔΔⵠᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠΔΔⵠᐃⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠⲆΔΔᐃⲆ(.35 * Ⲇ, true, [Δ[417], Δ[403], Δ[30], Δ[30], Δ[93]], ⵠΔⲆ));
		Ⲇⵠ[ⵠ.ᐃⵠΔΔⵠᐃⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠⲆΔΔᐃⲆ(Ⲇ * .35, ᐃᐃᐃΔΔ, [Δ[245], "#613577", Δ[274], "#1C073D", Δ[93]], ⵠⵠⵠΔ));
		Ⲇⵠ[ⵠ.ΔΔᐃΔⲆ] = [];
		Ⲇⵠ[ⵠ.ΔΔᐃΔⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠⲆΔΔᐃⲆ(Ⲇ * .35, true, [Δ[417], Δ[403], Δ[153], "#181414", Δ[93]], 0));
		Ⲇⵠ[ⵠ.ΔΔᐃΔⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠⲆΔΔᐃⲆ(.35 * Ⲇ, true, [Δ[245], Δ[439], "#563f83", "#180f21", Δ[93]], 0));
		Ⲇⵠ[ⵠ.ΔⵠⵠᐃΔΔᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⵠᐃΔΔᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃⲆⲆⵠⲆᐃΔ(.35 * Ⲇ, true, [Δ[417], Δ[403], Δ[153]]));
		Ⲇⵠ[ⵠ.ΔⵠⵠᐃΔΔᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃⲆⲆⵠⲆᐃΔ(Ⲇ * .35, ⲆⲆᐃᐃⵠ, [Δ[245], Δ[439], "#563f83"]));
		Ⲇⵠ[ⵠ.ⵠΔⲆⵠⲆΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⲆⵠⲆΔⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⲆⲆᐃΔΔⲆ(.42 * Ⲇ, ΔⵠⲆΔⲆ, [Δ[417], Δ[403], Δ[153]]));
		Ⲇⵠ[ⵠ.ⵠΔⲆⵠⲆΔⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⲆⲆᐃΔΔⲆ(.42 * Ⲇ, ⵠΔᐃⵠΔ, [Δ[245], Δ[439], "#563f83"]));
		Ⲇⵠ[ⵠ.ⲆⵠΔⵠⵠⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔⵠⵠⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃⲆⲆⵠⲆᐃΔ(Ⲇ * .35, true, [Δ[417], Δ[403], Δ[30]]));
		Ⲇⵠ[ⵠ.ⲆⵠΔⵠⵠⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃⲆⲆⵠⲆᐃΔ(.35 * Ⲇ, true, [Δ[245], "#613577", Δ[274]]));
		Ⲇⵠ[ⵠ.ᐃΔⲆⲆΔⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃΔⲆⲆΔⵠⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔⲆⲆᐃΔΔⲆ(.42 * Ⲇ, ᐃⲆⲆⲆΔ, [Δ[417], Δ[403], Δ[30]]));
		Ⲇⵠ[ⵠ.ᐃΔⲆⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔⲆⲆᐃΔΔⲆ(.42 * Ⲇ, ⵠⲆΔΔᐃ, [Δ[245], "#613577", Δ[274]]));
		Ⲇⵠ[ⵠ.ⵠⵠⲆⲆⲆᐃᐃ] = Δᐃⵠ(ᐃⵠⵠⲆⵠⲆⲆ(Ⲇ * .35, [Δ[30]]));
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆᐃⲆⲆ] = Δᐃⵠ(ᐃⲆⲆⵠⲆᐃΔ(Ⲇ * .35, ᐃᐃᐃΔΔ, [ⲆⲆⲆⲆⲆ, Δ[30]]));
		Ⲇⵠ[ⵠ.ⵠⵠᐃΔⵠⲆⵠ] = Δᐃⵠ(ΔⲆⲆᐃΔΔⲆ(.35 * Ⲇ, ᐃⲆⵠⵠΔⲆⲆ, [undefined, Δ[30]]));
		Ⲇⵠ[ⵠ.ⲆᐃᐃΔⲆⵠΔ] = Δᐃⵠ(ᐃⵠⵠⲆⵠⲆⲆ(.35 * Ⲇ, ["#22E066"]));
		Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⲆⲆⵠ] = Δᐃⵠ(ᐃⲆⲆⵠⲆᐃΔ(Ⲇ * .35, true, [undefined, "#22E066"]));
		Ⲇⵠ[ⵠ.ᐃΔᐃΔΔΔⵠ] = Δᐃⵠ(ΔⲆⲆᐃΔΔⲆ(.35 * Ⲇ, ᐃⲆᐃⵠΔ, [ΔΔᐃⵠΔ, "#22E066"]));
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔΔΔᐃᐃΔ(.3 * Ⲇ, ⲆΔᐃⵠⵠ, [Δ[417], "#65A8B7", Δ[370], "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", Δ[370]]));
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔΔΔᐃᐃΔ(.3 * Ⲇ, ⲆⲆⵠⵠⲆ, [Δ[245], "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
		Ⲇⵠ[ⵠ.ΔⵠΔᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⵠΔᐃⵠ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔΔⵠΔΔΔⵠ(.45 * Ⲇ, ⲆⲆᐃᐃⵠ, ["#C4BC51", "#B29C32", "#201851", "#652D8E", Δ[417], Δ[370]]));
		Ⲇⵠ[ⵠ.ΔⵠΔᐃⵠ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔΔⵠΔΔΔⵠ(Ⲇ * .45, ᐃⲆᐃⵠΔ, ["#235050", "#357472", "#081B2D", Δ[473], Δ[245], "#135367"]));
		Ⲇⵠ[ⵠ.ΔΔⲆᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔΔⲆᐃⲆ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⲆⵠⵠᐃᐃⲆΔ(.63 * Ⲇ, ⲆⲆⵠⲆᐃ, [Δ[417], "#352E1E", Δ[14], Δ[285]]));
		Ⲇⵠ[ⵠ.ΔΔⲆᐃⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⲆⵠⵠᐃᐃⲆΔ(Ⲇ * .63, true, [Δ[245], "#071f22", Δ[471], Δ[286]]));
		Ⲇⵠ[ⵠ.ⲆΔⵠᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⵠᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃⵠᐃᐃΔΔᐃ(Ⲇ, true, [Δ[417], "#332715", Δ[ΔᐃᐃⲆΔ], Δ[285]]));
		Ⲇⵠ[ⵠ.ⲆΔⵠᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃⵠᐃᐃΔΔᐃ(Ⲇ, ᐃᐃᐃΔΔ, [Δ[245], "#071f22", Δ[471], Δ[286]]));
		Ⲇⵠ[ⵠ.ⲆᐃⲆΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⲆΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ΔΔⵠΔⲆΔⲆⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆᐃⲆΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⲆΔᐃΔⵠⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ⵠΔⵠᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⵠᐃΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ΔΔᐃᐃⲆᐃⲆ(Ⲇ * .59, true, [Δ[314], Δ[42], Δ[119], Δ[ᐃⵠⲆΔᐃΔⲆ]]));
		Ⲇⵠ[ⵠ.ⵠΔⵠᐃΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ΔΔᐃᐃⲆᐃⲆ(Ⲇ * .59, true, [Δ[245], "#062124", "#10373d", "#0f3333"]));
		Ⲇⵠ[ⵠ.ⵠᐃᐃⲆⵠΔⲆ] = [Ⲇⵠ[ⵠ.ⵠΔⵠᐃΔ]];
		Ⲇⵠ[ⵠ.ⵠᐃᐃⲆⵠΔⲆ][ⲆΔᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃᐃⲆⵠΔⲆ][2] = [];
		Ⲇⵠ[ⵠ.ⵠᐃᐃⲆⵠΔⲆ][1][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠᐃⵠⵠⲆⲆⵠ(.59 * Ⲇ, ᐃᐃᐃΔΔ, [Δ[314], Δ[42], Δ[119], Δ[17]]));
		Ⲇⵠ[ⵠ.ⵠᐃᐃⲆⵠΔⲆ][ΔⵠⲆ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠᐃⵠⵠⲆⲆⵠ(.59 * Ⲇ, ⲆⲆᐃᐃⵠ, [Δ[245], "#062124", "#10373d", "#0f3333"]));
		Ⲇⵠ[ⵠ.ⵠᐃᐃⲆⵠΔⲆ][ΔΔᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃⲆⲆⵠΔⵠΔ(.59 * Ⲇ, true, [Δ[314], Δ[42], Δ[119], Δ[17]]));
		Ⲇⵠ[ⵠ.ⵠᐃᐃⲆⵠΔⲆ][2][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃⲆⲆⵠΔⵠΔ(.59 * Ⲇ, true, [Δ[245], "#062124", "#10373d", "#0f3333"]));
		Ⲇⵠ[ⵠ.ⲆⵠⲆᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⲆᐃΔ][ⵠ.ΔΔΔ] = Δᐃⵠ(ᐃΔᐃᐃ(3 - Math.PI / 2, ΔⵠΔⵠⲆⵠΔ(.6 * Ⲇ, ᐃⲆᐃⵠΔ, [Δ[417], Δ[169], Δ[ΔⲆᐃⲆⵠᐃⵠ], "#594225", Δ[37]])));
		Ⲇⵠ[ⵠ.ⲆⵠⲆᐃΔ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ᐃΔᐃᐃ(ⵠⵠᐃΔ - Math.PI / 2, ΔⵠΔⵠⲆⵠΔ(Ⲇ * .6, true, [Δ[245], "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
		Ⲇⵠ[ⵠ.ᐃⵠᐃΔⵠᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠᐃΔⵠᐃᐃ][ⵠ.ΔΔΔ] = Δᐃⵠ(ⵠΔΔΔᐃⵠᐃ(Ⲇ * .3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
		Ⲇⵠ[ⵠ.ᐃⵠᐃΔⵠᐃᐃ][ⵠ.ⵠᐃⲆ] = Δᐃⵠ(ⵠΔΔΔᐃⵠᐃ(.3 * Ⲇ, ["#1F5453", Δ[556], "#1D4947", "#1F5453", "#0c2629"], ⵠᐃⵠⵠ));
		Ⲇⵠ[ⵠ.ᐃΔⵠⲆΔᐃⵠ] = Δᐃⵠ(ΔΔᐃΔⵠΔᐃΔᐃ(Ⲇ * .3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
		Ⲇⵠ[ⵠ.ⵠⲆᐃⵠᐃᐃᐃ] = Δᐃⵠ(ΔⵠΔΔⲆΔⲆⲆⵠ(.3 * Ⲇ, [Δ[60]]));
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠᐃⵠⵠ] = ΔⵠΔᐃ(ⵠⵠⵠΔ, [{
			f: ΔⵠⵠᐃᐃΔⲆ,
			x: 0,
			y: 0,
			a: 1,
			r: ⵠΔⵠⲆ,
			c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
		}], .25, [Δ[343], Δ[510], Δ[ᐃᐃⵠᐃⵠᐃᐃ]], .7);
		Ⲇⵠ[ⵠ.ⵠⲆᐃΔⵠ] = ΔⵠΔᐃ(1.5, [{
			f: ᐃⵠΔΔᐃΔΔ,
			x: 0,
			y: ᐃⲆⵠΔ,
			a: 1,
			r: ΔΔⲆⲆ,
			c: [Δ[206], "#750a0a", "#991616", Δ[206]]
		}], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9);
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃΔⲆᐃ] = ⲆΔᐃᐃⵠΔΔ(Ⲇ * .35, ["#072428", "#67A242", "#67A242"], ΔᐃΔ);
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠⵠⲆΔ] = ⲆΔᐃᐃⵠΔΔ(.35 * Ⲇ, ["#172130", "#649BB2", Δ[93], Δ[93], "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], ⲆΔᐃΔ);
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠᐃΔⲆ] = ⲆΔᐃᐃⵠΔΔ(.35 * Ⲇ, ["#3F0B11", "#B13424", Δ[93], "#B13424", "#7e180b"], ᐃΔⲆⵠ);
		Ⲇⵠ[ⵠ.ⵠⵠⲆⵠΔᐃⵠ] = ⲆΔᐃᐃⵠΔΔ(.35 * Ⲇ, ["#1B2F4C", "#29488E", "#76c3e8", Δ[153]], ΔⲆΔΔ);
		!ΔΔΔΔⵠᐃΔ ? Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⲆΔΔ] = Δᐃⵠ(ΔᐃⲆⵠΔⲆⲆΔᐃ(Ⲇ)) : Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⲆΔΔ] = Δᐃⵠ(ⲆᐃΔⵠΔΔᐃΔᐃ(Ⲇ));
		!ΔΔΔΔⵠᐃΔ ? Ⲇⵠ[ⵠ.ΔᐃᐃⵠⵠΔΔ] = Δᐃⵠ(ⵠⲆⲆΔⲆⲆⲆⵠⵠ(Ⲇ)) : Ⲇⵠ[ⵠ.ΔᐃᐃⵠⵠΔΔ] = Δᐃⵠ(ⵠⵠⲆᐃⵠⵠⵠⵠΔ(.75));
		!ΔΔΔΔⵠᐃΔ ? Ⲇⵠ[ⵠ.ⵠⲆᐃⵠᐃⵠⲆ] = Δᐃⵠ(ⲆΔΔⵠᐃΔΔ(Ⲇ)) : Ⲇⵠ[ⵠ.ⵠⲆᐃⵠᐃⵠⲆ] = Δᐃⵠ(ⲆΔΔⵠᐃΔΔ(.75));
		Ⲇⵠ[ⵠ.ΔᐃΔΔᐃⵠⵠ] = Δᐃⵠ(ΔΔΔⵠᐃⵠⲆ(Ⲇ * .16, ᐃⲆᐃᐃΔ, ["rgba(0, 0, 0, 0)", Δ[93], Δ[93], Δ[93], Δ[93]]));
		Ⲇⵠ[ⵠ.ⵠΔⵠᐃΔⵠⵠ] = Δᐃⵠ(ᐃΔᐃᐃ(5.8, ᐃΔⲆⵠⵠⵠⵠ(.15 * Ⲇ, ⵠⲆΔΔᐃ, ["rgba(0, 0, 0, 0)", Δ[93], Δ[93], Δ[93], Δ[93]])));
		Ⲇⵠ[ⵠ.ⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ΔΔΔⲆⵠⵠᐃ] = [];
		for (var Δᐃ = 0; Δᐃ < ⵠΔᐃⲆ.ΔⲆΔᐃᐃΔⲆ + ᐃΔⲆⵠ; Δᐃ++) Ⲇⵠ[ⵠ.ΔΔΔⲆⵠⵠᐃ][Δᐃ] = ⲆΔⵠⵠⵠ(Ⲇ, "" + (Δᐃ + ⲆΔᐃΔ), 12, Δ[560]);
		Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⲆᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⲆᐃΔ].push(Δᐃⵠ(ⲆᐃΔᐃᐃΔᐃ(Ⲇ * .12, ["#790401", "#790401", "black", "white", "red"])));
		Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⲆᐃΔ].push(Δᐃⵠ(ⲆᐃΔᐃᐃΔᐃ(.12 * Ⲇ, ["black", "white", "black", "white", "white"], 1)));
		Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⲆᐃΔ].push(Δᐃⵠ(ⲆᐃΔᐃᐃΔᐃ(.12 * Ⲇ, ["black", "white", "black", "white", "white"], 1)));
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃⲆᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃⲆᐃᐃ].push(Δᐃⵠ(ΔⲆⲆᐃᐃᐃᐃⲆᐃ(.22 * Ⲇ)));
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃⲆᐃᐃ].push(Δᐃⵠ(Ⲇⵠᐃᐃⵠⵠⵠᐃᐃ(.22 * Ⲇ)));
		Ⲇⵠ[ⵠ.ΔⵠΔΔᐃᐃΔ] = Δᐃⵠ(ⵠΔᐃⲆⵠΔⲆᐃΔ(.22 * Ⲇ));
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃⵠⵠ].push(Δᐃⵠ(ΔΔⵠⵠΔⲆᐃ(1.5 * Ⲇ, ["black", "#790401", "white"], 0)));
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃⵠⵠ].push(Δᐃⵠ(ΔΔⵠⵠΔⲆᐃ(Ⲇ * 1.5, ["black", "white", "white"], ΔⲆΔᐃ)));
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃⵠⵠ].push(Δᐃⵠ(ΔΔⵠⵠΔⲆᐃ(1.5 * Ⲇ, ["black", "white", "white"], ᐃⲆΔ)));
		Ⲇⵠ[ⵠ.ⲆΔᐃΔᐃΔᐃ] = ΔⲆ.ⲆΔᐃΔᐃΔᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆⵠᐃΔⵠΔ] = ΔⲆ.ⵠⲆⵠᐃΔⵠΔ;
		Ⲇⵠ[ⵠ.ⲆᐃⲆΔΔΔⲆ] = ΔⲆ.ⲆᐃⲆΔΔΔⲆ;
		Ⲇⵠ[ⵠ.ⲆⵠᐃΔΔᐃᐃ] = ΔⲆ.ⲆⵠᐃΔΔᐃᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆΔⲆⲆΔ] = ⲆΔⵠⵠⵠ(Ⲇ, "Show spectators", 25, Δ[560], ⲆⲆⲆⲆⲆ, ᐃⲆᐃΔⵠ, Δ[287], ΔⵠⲆᐃⵠ, 220);
		Ⲇⵠ[ⵠ.ⵠᐃⵠⲆᐃⵠᐃ] = ⲆΔⵠⵠⵠ(Ⲇ, "Reconnecting...", 30, "red");
		console.log(undefined, ⲆⲆΔᐃⵠ)
	}

	function ᐃⲆᐃⲆⵠΔⵠᐃᐃ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		if (ⵠⲆⵠ == Δᐃ) {
			ⲆⲆ.width = 543 * Ⲇ;
			ⲆⲆ.height = 393 * Ⲇ;
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 196.23297119140625, 77.8948974609375 * Ⲇ);
			ᐃ.bezierCurveTo(276.23297119140625 * Ⲇ, Ⲇ * 69.8948974609375, Ⲇ * 360.23297119140625, Ⲇ * 87.8948974609375, 431.23297119140625 * Ⲇ, 121.8948974609375 * Ⲇ);
			ᐃ.bezierCurveTo(474.23297119140625 * Ⲇ, 146.8948974609375 * Ⲇ, Ⲇ * 463.23297119140625, Ⲇ * 184.8948974609375, Ⲇ * 437.23297119140625, 235.8948974609375 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 413.23297119140625, 277.8948974609375 * Ⲇ, Ⲇ * 383.23297119140625, Ⲇ * 289.8948974609375, Ⲇ * 303.23297119140625, Ⲇ * 289.8948974609375);
			ᐃ.bezierCurveTo(Ⲇ * 178.23297119140625, 292.8948974609375 * Ⲇ, 127.23297119140625 * Ⲇ, Ⲇ * 301.8948974609375, Ⲇ * 92.23297119140625, Ⲇ * 268.8948974609375);
			ᐃ.bezierCurveTo(Ⲇ * 55.23297119140625, 234.8948974609375 * Ⲇ, 59.23297119140625 * Ⲇ, 147.8948974609375 * Ⲇ, Ⲇ * 100.23297119140625, 112.8948974609375 * Ⲇ);
			ᐃ.bezierCurveTo(133.23297119140625 * Ⲇ, Ⲇ * 83.8948974609375, 167.23297119140625 * Ⲇ, Ⲇ * 82.8948974609375, Ⲇ * 196.23297119140625, Ⲇ * 77.8948974609375);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ])
		} else if (1 == Δᐃ) {
			ⲆⲆ.width = Ⲇ * 543;
			ⲆⲆ.height = 470 * Ⲇ;
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 285.23297119140625, 51.803985595703125 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 408.23297119140625, 57.803985595703125 * Ⲇ, Ⲇ * 463.23297119140625, Ⲇ * 107.80398559570312, Ⲇ * 480.23297119140625, 183.80398559570312 * Ⲇ);
			ᐃ.bezierCurveTo(500.23297119140625 * Ⲇ, Ⲇ * 282.8039855957031, 473.23297119140625 * Ⲇ, 351.8039855957031 * Ⲇ, 373.23297119140625 * Ⲇ, 390.8039855957031 * Ⲇ);
			ᐃ.bezierCurveTo(286.23297119140625 * Ⲇ, 420.8039855957031 * Ⲇ, 173.23297119140625 * Ⲇ, 396.8039855957031 * Ⲇ, 86.23297119140625 * Ⲇ, Ⲇ * 331.8039855957031);
			ᐃ.bezierCurveTo(Ⲇ * 13.23297119140625, Ⲇ * 267.8039855957031, Ⲇ * 19.23297119140625, Ⲇ * 79.80398559570312, 143.23297119140625 * Ⲇ, Ⲇ * 50.803985595703125);
			ᐃ.bezierCurveTo(175.23297119140625 * Ⲇ, Ⲇ * 41.803985595703125, Ⲇ * 263.23297119140625, 51.803985595703125 * Ⲇ, Ⲇ * 285.23297119140625, 51.803985595703125 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ])
		} else {
			ⲆⲆ.width = 543 * Ⲇ;
			ⲆⲆ.height = Ⲇ * 470;
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(492.23297119140625 * Ⲇ, 170.0767059326172 * Ⲇ);
			ᐃ.bezierCurveTo(493.23297119140625 * Ⲇ, 300.16761779785156 * Ⲇ, Ⲇ * 411.23297119140625, Ⲇ * 382.16761779785156, Ⲇ * 321.23297119140625, Ⲇ * 419.16761779785156);
			ᐃ.bezierCurveTo(251.23297119140625 * Ⲇ, 444.16761779785156 * Ⲇ, Ⲇ * 125.23297119140625, Ⲇ * 422.16761779785156, Ⲇ * 63.23297119140625, 347.16761779785156 * Ⲇ);
			ᐃ.bezierCurveTo(22.23297119140625 * Ⲇ, Ⲇ * 282.16761779785156, 53.23297119140625 * Ⲇ, 152.16761779785156 * Ⲇ, Ⲇ * 179.23297119140625, Ⲇ * 79.16761779785156);
			ᐃ.bezierCurveTo(237.23297119140625 * Ⲇ, 46.16761779785156 * Ⲇ, 326.23297119140625 * Ⲇ, 27.167617797851562 * Ⲇ, 409.23297119140625 * Ⲇ, Ⲇ * 50.16761779785156);
			ᐃ.bezierCurveTo(470.23297119140625 * Ⲇ, Ⲇ * 66.16761779785156, 493.23297119140625 * Ⲇ, Ⲇ * 104.16761779785156, Ⲇ * 492.23297119140625, Ⲇ * 170.0767059326172);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[0])
		}
		return ⲆⲆ
	}

	function ᐃⲆΔΔΔᐃⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 120;
		var ⲆΔΔ = Ⲇ * 140;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ⲆⲆ.width = Ⲇ * 130;
		ⲆⲆ.height = Ⲇ * 120;
		ᐃᐃᐃ(ᐃ, ⲆⵠΔΔⵠ * Ⲇ, 12 * Ⲇ, Ⲇ * 110, 90 * Ⲇ, ⵠⲆⲆᐃⵠ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃᐃᐃ(ᐃ, Ⲇ * 10, Ⲇ * ⵠᐃⵠΔᐃ, Ⲇ * 110, 90 * Ⲇ, 10 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⵠΔᐃⵠ], 4 * Ⲇ);
		var ⵠΔ = ᐃΔᐃᐃ(-Math.PI / ΔΔⵠΔ, ᐃⵠΔⵠⲆ(.5 * Ⲇ, true, [Δ[100], Δ[100], Δ[100], Δ[560], Δ[560], Δ[560], Δ[560]]));
		ᐃ.drawImage(ⵠΔ, Ⲇ * ⲆⵠⵠⲆⲆ, 18 * Ⲇ);
		var ⵠΔ = ᐃΔᐃᐃ(Math.PI / 4, ᐃⵠᐃⵠΔ(Ⲇ * .55, true, [Δ[100], Δ[560], Δ[560], Δ[560], Δ[560]]));
		ᐃ.drawImage(ⵠΔ, 36 * Ⲇ, Ⲇ * ΔⲆⲆⵠΔ);
		return ⲆⲆ
	}

	function ᐃΔΔΔΔᐃᐃⲆΔ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 167 * Ⲇ;
		ⲆⲆ.height = 136 * Ⲇ;
		ᐃ.globalAlpha = .5;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 76.71426391601562, Ⲇ * 67.85713195800781);
		ᐃᐃᐃ(ᐃ, -57.5 * Ⲇ, -54.5 * Ⲇ, 115 * Ⲇ, Ⲇ * 109, Ⲇ * 15);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ]);
		ᐃ.globalAlpha = .8;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 76.71426391601562, 67.85713195800781 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -57.5 * Ⲇ, -54.5 * Ⲇ, Ⲇ * 115, 109 * Ⲇ, Ⲇ * 15);
		ᐃ.restore();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[1], Ⲇ * 7);
		ᐃ.globalAlpha = .5;
		ᐃ.save();
		ᐃ.translate(91.21426391601562 * Ⲇ, Ⲇ * 67.35713195800781);
		ᐃᐃᐃ(ᐃ, -56 * Ⲇ, Ⲇ * -55, 115 * Ⲇ, 109 * Ⲇ, Ⲇ * ΔⲆⵠⲆⵠᐃⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
		ᐃ.globalAlpha = 1;
		ᐃ.save();
		ᐃ.translate(91.21426391601562 * Ⲇ, 67.35713195800781 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -56 * Ⲇ, -55 * Ⲇ, 115 * Ⲇ, Ⲇ * 109, Ⲇ * 15);
		ᐃ.restore();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃⵠⵠ], Ⲇ * ΔΔⲆⲆⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 131.21426391601562, 70.35713195800781 * Ⲇ);
		ᐃ.bezierCurveTo(133.21426391601562 * Ⲇ, Ⲇ * 95.35713195800781, Ⲇ * 128.21426391601562, 109.35713195800781 * Ⲇ, 108.21426391601562 * Ⲇ, 108.35713195800781 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃⲆΔ], ⵠᐃᐃⵠⵠ * Ⲇ);
		return ⲆⲆ
	}

	function ⲆΔⲆⲆΔⵠΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 160;
		ⲆⲆ.height = 161 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠⵠᐃ;
		ᐃ.translate(ᐃΔΔ, Ⲇ * 10);
		ᐃ.save();
		ᐃ.translate(80.5 * Ⲇ, 78 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -71.5 * Ⲇ, -71 * Ⲇ, Ⲇ * 143, 143 * Ⲇ, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ]);
		ᐃ.globalAlpha = ΔⵠⲆ;
		ᐃ.translate(ⵠⲆΔⵠ, Ⲇ * -10);
		ᐃ.save();
		ᐃ.translate(80.5 * Ⲇ, 78 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -71.5, Ⲇ * -71, 143 * Ⲇ, Ⲇ * 143, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * 6);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 80, 78.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -17, -72.5 * Ⲇ, Ⲇ * 34, Ⲇ * 145, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆΔⵠᐃΔ], ΔΔᐃⵠⵠ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(0, Ⲇ * ⲆΔⲆᐃⵠ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 80, Ⲇ * 79.5);
		ᐃᐃᐃ(ᐃ, Ⲇ * -73, Ⲇ * -16.5, 145 * Ⲇ, 34 * Ⲇ, ᐃⲆⲆⵠⲆ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ]);
		ᐃ.globalAlpha = Δᐃᐃ;
		ᐃ.translate(Δⵠⵠ, -ᐃⲆⲆⵠⲆ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 80, 79.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -73 * Ⲇ, Ⲇ * -16.5, 145 * Ⲇ, Ⲇ * 34, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], Ⲇ * ΔⵠⵠⵠΔ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ᐃⲆⲆ;
		ᐃ.translate(ⲆᐃⲆ, ᐃⲆⲆⵠⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(79 * Ⲇ, 71 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 90, 42 * Ⲇ, Ⲇ * 98, 36 * Ⲇ, Ⲇ * 109, Ⲇ * 43);
		ᐃ.bezierCurveTo(Ⲇ * 119, Ⲇ * 47, Ⲇ * 128, Ⲇ * 62, 107 * Ⲇ, Ⲇ * 72);
		ᐃ.bezierCurveTo(Ⲇ * 96, Ⲇ * 78.5, Ⲇ * 96, Ⲇ * 78.5, Ⲇ * 85, 85 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(84 * Ⲇ, 78 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 113, 82 * Ⲇ, 123 * Ⲇ, 97 * Ⲇ, Ⲇ * 115, 108 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 110, Ⲇ * 119, Ⲇ * 98, 124 * Ⲇ, Ⲇ * 87, 107 * Ⲇ);
		ᐃ.bezierCurveTo(81.5 * Ⲇ, Ⲇ * 94.5, 81.5 * Ⲇ, 94.5 * Ⲇ, 76 * Ⲇ, Ⲇ * 82);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 80, Ⲇ * 73);
		ᐃ.bezierCurveTo(Ⲇ * 64, 37 * Ⲇ, 55 * Ⲇ, 34 * Ⲇ, Ⲇ * 45, 42 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 30, Ⲇ * 54, 36 * Ⲇ, 65 * Ⲇ, 51 * Ⲇ, Ⲇ * 72);
		ᐃ.bezierCurveTo(Ⲇ * 62.5, Ⲇ * 77, Ⲇ * 62.5, Ⲇ * 77, Ⲇ * 74, 82 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 82, 83 * Ⲇ);
		ᐃ.bezierCurveTo(73 * Ⲇ, 107 * Ⲇ, Ⲇ * 60, Ⲇ * 123, Ⲇ * 47, 113 * Ⲇ);
		ᐃ.bezierCurveTo(33 * Ⲇ, Ⲇ * 105, Ⲇ * 33, 92 * Ⲇ, Ⲇ * 52, 85 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 74, Ⲇ * 73, Ⲇ * 77, Ⲇ * 76, 76 * Ⲇ, 75 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔ]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, Ⲇ * -ᐃⲆⵠΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 79, 71 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 90, Ⲇ * 42, 98 * Ⲇ, Ⲇ * 36, 109 * Ⲇ, Ⲇ * 43);
		ᐃ.bezierCurveTo(119 * Ⲇ, 47 * Ⲇ, Ⲇ * 128, Ⲇ * 62, 107 * Ⲇ, Ⲇ * 72);
		ᐃ.bezierCurveTo(Ⲇ * 96, Ⲇ * 78.5, 96 * Ⲇ, Ⲇ * 78.5, Ⲇ * 85, 85 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆ], ᐃⲆ[4], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 84, Ⲇ * 78);
		ᐃ.bezierCurveTo(113 * Ⲇ, 82 * Ⲇ, Ⲇ * 123, Ⲇ * 97, Ⲇ * 115, Ⲇ * 108);
		ᐃ.bezierCurveTo(110 * Ⲇ, 119 * Ⲇ, Ⲇ * 98, Ⲇ * 124, 87 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(81.5 * Ⲇ, Ⲇ * 94.5, 81.5 * Ⲇ, Ⲇ * 94.5, Ⲇ * 76, 82 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⵠᐃΔΔΔ], Ⲇ * 6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(80 * Ⲇ, 73 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 64, 37 * Ⲇ, Ⲇ * 55, 34 * Ⲇ, Ⲇ * 45, 42 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 30, Ⲇ * 54, Ⲇ * 36, 65 * Ⲇ, 51 * Ⲇ, 72 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 62.5, 77 * Ⲇ, Ⲇ * 62.5, 77 * Ⲇ, Ⲇ * 74, Ⲇ * 82);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆⵠⲆᐃ], ΔⲆⵠΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(82 * Ⲇ, 83 * Ⲇ);
		ᐃ.bezierCurveTo(73 * Ⲇ, 107 * Ⲇ, Ⲇ * 60, 123 * Ⲇ, Ⲇ * 47, 113 * Ⲇ);
		ᐃ.bezierCurveTo(33 * Ⲇ, Ⲇ * 105, 33 * Ⲇ, 92 * Ⲇ, Ⲇ * 52, Ⲇ * 85);
		ᐃ.bezierCurveTo(Ⲇ * 74, 73 * Ⲇ, 77 * Ⲇ, 76 * Ⲇ, 76 * Ⲇ, Ⲇ * 75);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⲆⵠ], ᐃⲆ[4], ΔⵠⵠⵠΔ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(ᐃΔΔ, Ⲇ * ΔⲆⲆΔΔ);
		ᐃ.save();
		ᐃ.translate(78.5 * Ⲇ, Ⲇ * 78);
		ᐃᐃᐃ(ᐃ, Ⲇ * -13.5, -14 * Ⲇ, 27 * Ⲇ, 27 * Ⲇ, ΔⵠⵠⵠΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ᐃⵠⵠ;
		ᐃ.translate(0, Ⲇ * -ⵠΔΔΔⵠ);
		ᐃ.save();
		ᐃ.translate(78.5 * Ⲇ, Ⲇ * 78);
		ᐃᐃᐃ(ᐃ, -13.5 * Ⲇ, Ⲇ * -14, Ⲇ * 27, Ⲇ * 27, Ⲇ * 6);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆᐃⲆ], ᐃⲆ[4], Ⲇ * ⵠΔⲆⵠⲆ);
		return ⲆⲆ
	}

	function ⲆΔΔΔⲆⲆⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 48 * Ⲇ;
		ⲆⲆ.height = 47 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(7.1875 * Ⲇ, 25.434661865234375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 11.1875, 13.434661865234375 * Ⲇ, Ⲇ * 18.1875, Ⲇ * 8.434661865234375, 32.1875 * Ⲇ, Ⲇ * 10.434661865234375);
		ᐃ.bezierCurveTo(45.1875 * Ⲇ, Ⲇ * 14.434661865234375, Ⲇ * 41.1875, 24.434661865234375 * Ⲇ, Ⲇ * 36.1875, 30.434661865234375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 22.1875, 42.434661865234375 * Ⲇ, 2.1875 * Ⲇ, Ⲇ * 41.434661865234375, 7.1875 * Ⲇ, 25.434661865234375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		return ⲆⲆ
	}

	function ΔⲆΔⲆΔΔⲆⵠΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 161 * Ⲇ;
		ⲆⲆ.height = 190 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ᐃᐃⵠᐃΔ, 93 * Ⲇ);
		ᐃ.bezierCurveTo(17 * Ⲇ, 95 * Ⲇ, ΔⲆⲆᐃⵠⵠᐃ * Ⲇ, Ⲇ * 95, 21 * Ⲇ, 95 * Ⲇ);
		ᐃ.bezierCurveTo(ⲆⲆΔᐃⲆ * Ⲇ, 83 * Ⲇ, 17 * Ⲇ, 93 * Ⲇ, Ⲇ * 4, Ⲇ * 76);
		ᐃ.bezierCurveTo(Ⲇ * ⵠⵠᐃΔΔ, 75 * Ⲇ, Ⲇ * 11, 75 * Ⲇ, 18 * Ⲇ, Ⲇ * 75);
		ᐃ.bezierCurveTo(13 * Ⲇ, Ⲇ * 67, 13 * Ⲇ, 67 * Ⲇ, ⵠⲆⵠⲆΔ * Ⲇ, 59 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ᐃᐃⲆⲆⵠΔⵠ, 59 * Ⲇ, Ⲇ * 14, 59 * Ⲇ, Ⲇ * 21, Ⲇ * 59);
		ᐃ.bezierCurveTo(Ⲇ * 46, Ⲇ * 35, 35 * Ⲇ, 45 * Ⲇ, 49 * Ⲇ, Ⲇ * 31);
		ᐃ.bezierCurveTo(Ⲇ * 53, 24 * Ⲇ, 51 * Ⲇ, 21 * Ⲇ, 51 * Ⲇ, Ⲇ * 16);
		ᐃ.bezierCurveTo(63 * Ⲇ, Ⲇ * 23, Ⲇ * 63, Ⲇ * 24, Ⲇ * 69, 29 * Ⲇ);
		ᐃ.bezierCurveTo(76 * Ⲇ, Ⲇ * 7, Ⲇ * 75, 11 * Ⲇ, Ⲇ * 76, Ⲇ * 6);
		ᐃ.bezierCurveTo(81 * Ⲇ, 12 * Ⲇ, 84 * Ⲇ, ΔᐃΔⵠᐃ * Ⲇ, Ⲇ * 89, 27 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 95, 25 * Ⲇ, Ⲇ * ᐃⵠᐃⲆⵠ, Ⲇ * 16, Ⲇ * 105, 14 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 103, Ⲇ * 25, Ⲇ * 111, Ⲇ * 33, 110 * Ⲇ, Ⲇ * 34);
		ᐃ.bezierCurveTo(123 * Ⲇ, 48 * Ⲇ, Ⲇ * 123, 48 * Ⲇ, 136 * Ⲇ, 62 * Ⲇ);
		ᐃ.bezierCurveTo(142 * Ⲇ, Ⲇ * 60, 147 * Ⲇ, Ⲇ * 59, 155 * Ⲇ, 58 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 147, 65 * Ⲇ, Ⲇ * 147, Ⲇ * 65, 139 * Ⲇ, 73 * Ⲇ);
		ᐃ.bezierCurveTo(145 * Ⲇ, Ⲇ * 73, 145 * Ⲇ, Ⲇ * 73, Ⲇ * 151, Ⲇ * 73);
		ᐃ.bezierCurveTo(145 * Ⲇ, 80 * Ⲇ, 145 * Ⲇ, Ⲇ * 80, Ⲇ * 138, 87 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 144, Ⲇ * 88, 144 * Ⲇ, 88 * Ⲇ, 150 * Ⲇ, Ⲇ * 89);
		ᐃ.bezierCurveTo(Ⲇ * 125, Ⲇ * 103, 125 * Ⲇ, 125 * Ⲇ, Ⲇ * 113, 141 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 92, Ⲇ * 178, Ⲇ * 85, Ⲇ * 177, 76 * Ⲇ, Ⲇ * 178);
		ᐃ.bezierCurveTo(64 * Ⲇ, 179 * Ⲇ, 51 * Ⲇ, 164 * Ⲇ, Ⲇ * 35, Ⲇ * 131);
		ᐃ.bezierCurveTo(Ⲇ * 18, Ⲇ * 95, Ⲇ * ⵠΔᐃⲆⵠ, Ⲇ * 99, Ⲇ * 8, Ⲇ * 93);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ, ᐃⲆ, 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 25, 63 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 16, 58 * Ⲇ, 17 * Ⲇ, Ⲇ * 51, Ⲇ * 17, Ⲇ * 33);
		ᐃ.bezierCurveTo(Ⲇ * 19, 12 * Ⲇ, 21 * Ⲇ, 12 * Ⲇ, Ⲇ * 32, Ⲇ * ΔᐃᐃΔⵠⵠⵠ);
		ᐃ.bezierCurveTo(Ⲇ * 63, Ⲇ * 31, Ⲇ * 66, Ⲇ * 45, Ⲇ * 66, 54 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ, ᐃⲆ, Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(91 * Ⲇ, 53 * Ⲇ);
		ᐃ.bezierCurveTo(91 * Ⲇ, Ⲇ * 40, Ⲇ * 98, 33 * Ⲇ, Ⲇ * 121, Ⲇ * ⲆⵠⵠΔⵠ);
		ᐃ.bezierCurveTo(137 * Ⲇ, Ⲇ * 12, 137 * Ⲇ, 16 * Ⲇ, Ⲇ * 139, 27 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 141, Ⲇ * 49, Ⲇ * 140, 57 * Ⲇ, Ⲇ * 134, 64 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ, ᐃⲆ, Ⲇ * 4);
		return ⲆⲆ
	}

	function ᐃΔΔⵠΔΔⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 450 * Ⲇ;
		ⲆⲆ.height = 790 * Ⲇ;
		ᐃ.translate(Ⲇ * 5, 5 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? ΔᐃΔ : ⲆⲆᐃΔ;
		ᐃΔⵠ(ᐃ, 178.5 * Ⲇ, Ⲇ * 172.828125, Ⲇ * 150);
		ᐃⵠ(ᐃ, ⲆⲆΔᐃⵠ, ᐃⲆ[ᐃΔΔ], 65 * Ⲇ);
		ᐃΔⵠ(ᐃ, 178.5 * Ⲇ, Ⲇ * 172.828125, Ⲇ * 150);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆΔⵠΔ], Ⲇ * 55);
		ᐃ.closePath();
		ᐃ.save();
		ᐃ.translate(177 * Ⲇ, Ⲇ * 512.328125);
		ᐃᐃᐃ(ᐃ, -25 * Ⲇ, -202.5 * Ⲇ, 65 * Ⲇ, 405 * Ⲇ, Ⲇ * 25);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 136, Ⲇ * 581.828125);
		ᐃᐃᐃ(ᐃ, -39 * Ⲇ, -23 * Ⲇ, 78 * Ⲇ, 46 * Ⲇ, Ⲇ * 25);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 135.5, Ⲇ * 663.828125);
		ᐃᐃᐃ(ᐃ, -39.5 * Ⲇ, Ⲇ * -22, Ⲇ * 79, Ⲇ * 44, 25 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(114 * Ⲇ, 594.828125 * Ⲇ);
		ᐃ.bezierCurveTo(175 * Ⲇ, Ⲇ * 596.828125, Ⲇ * 163, Ⲇ * 596.828125, 172 * Ⲇ, Ⲇ * 594.828125);
		ᐃ.bezierCurveTo(Ⲇ * 171.5, 633.828125 * Ⲇ, 171.5 * Ⲇ, Ⲇ * 633.828125, 171 * Ⲇ, Ⲇ * 672.828125);
		ᐃ.bezierCurveTo(110 * Ⲇ, Ⲇ * 673.828125, 140.5 * Ⲇ, Ⲇ * 673.328125, 110 * Ⲇ, 673.828125 * Ⲇ);
		ᐃ.bezierCurveTo(110.5 * Ⲇ, 661.828125 * Ⲇ, 110.5 * Ⲇ, Ⲇ * 661.828125, Ⲇ * 111, Ⲇ * 649.828125);
		ᐃ.bezierCurveTo(Ⲇ * 157, 633.828125 * Ⲇ, 134 * Ⲇ, 607.828125 * Ⲇ, Ⲇ * 114, 594.828125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(ⵠⲆⵠ, Ⲇ * ⲆⲆⵠᐃⲆ);
		ᐃ.moveTo(140 * Ⲇ, Ⲇ * 294.828125);
		ᐃ.bezierCurveTo(Ⲇ * 212, 295.828125 * Ⲇ, Ⲇ * 176.5, Ⲇ * 295.328125, 213 * Ⲇ, Ⲇ * 295.828125);
		ᐃ.bezierCurveTo(Ⲇ * 201.5, Ⲇ * 325.328125, 201.5 * Ⲇ, 325.328125 * Ⲇ, Ⲇ * 190, Ⲇ * 354.828125);
		ᐃ.bezierCurveTo(Ⲇ * 175.5, Ⲇ * 355.828125, 175.5 * Ⲇ, Ⲇ * 355.828125, 161 * Ⲇ, 356.828125 * Ⲇ);
		ᐃ.bezierCurveTo(154.5 * Ⲇ, Ⲇ * 328.828125, 154.5 * Ⲇ, 328.828125 * Ⲇ, Ⲇ * 148, 300.828125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(3, Ⲇ * -5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 159, Ⲇ * 679.828125);
		ᐃ.bezierCurveTo(180 * Ⲇ, 665.828125 * Ⲇ, 155 * Ⲇ, 675.828125 * Ⲇ, 151 * Ⲇ, 671.828125 * Ⲇ);
		ᐃ.bezierCurveTo(154.5 * Ⲇ, Ⲇ * 685.328125, Ⲇ * 154.5, Ⲇ * 685.328125, Ⲇ * 158, 698.828125 * Ⲇ);
		ᐃ.bezierCurveTo(171 * Ⲇ, Ⲇ * 699.828125, 171 * Ⲇ, 699.828125 * Ⲇ, 184 * Ⲇ, 700.828125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠ]);
		ᐃ.save();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(157 * Ⲇ, 548.828125 * Ⲇ);
		ᐃ.bezierCurveTo(157 * Ⲇ, 561.828125 * Ⲇ, 157 * Ⲇ, 561.828125 * Ⲇ, 157 * Ⲇ, Ⲇ * 574.828125);
		ᐃ.bezierCurveTo(Ⲇ * 132.5, 580.828125 * Ⲇ, Ⲇ * 132.5, 580.828125 * Ⲇ, 108 * Ⲇ, 586.828125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 112, Ⲇ * 599.828125, 111 * Ⲇ, 593.828125 * Ⲇ, Ⲇ * 112, 599.828125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 159, 603.828125 * Ⲇ, Ⲇ * 126.5, Ⲇ * 601.328125, Ⲇ * 141, Ⲇ * 602.828125);
		ᐃ.bezierCurveTo(Ⲇ * 145, 641.828125 * Ⲇ, Ⲇ * 143.5, Ⲇ * 623.828125, 146 * Ⲇ, 644.828125 * Ⲇ);
		ᐃ.bezierCurveTo(129.5 * Ⲇ, 645.328125 * Ⲇ, 129.5 * Ⲇ, 645.328125 * Ⲇ, Ⲇ * 113, Ⲇ * 645.828125);
		ᐃ.bezierCurveTo(107.5 * Ⲇ, Ⲇ * 652.828125, Ⲇ * 107.5, Ⲇ * 652.828125, Ⲇ * 102, 659.828125 * Ⲇ);
		ᐃ.bezierCurveTo(104 * Ⲇ, Ⲇ * 669.328125, 104 * Ⲇ, Ⲇ * 669.328125, Ⲇ * 106, 678.828125 * Ⲇ);
		ᐃ.bezierCurveTo(145 * Ⲇ, 679.328125 * Ⲇ, Ⲇ * 145, Ⲇ * 679.328125, Ⲇ * 184, 679.828125 * Ⲇ);
		ᐃ.bezierCurveTo(185 * Ⲇ, Ⲇ * 615.828125, 185 * Ⲇ, Ⲇ * 615.828125, 186 * Ⲇ, Ⲇ * 551.828125);
		ᐃ.bezierCurveTo(Ⲇ * 172.5, Ⲇ * 551.328125, Ⲇ * 172.5, Ⲇ * 551.328125, 159 * Ⲇ, 550.828125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ], ᐃⲆ[ⵠⲆᐃ], Ⲇ * ⵠⵠᐃΔᐃ);
		ᐃ.restore();
		ᐃ.globalAlpha = ᐃⵠⵠ;
		ᐃ.translate(ⲆⵠⲆΔⵠ * Ⲇ, Ⲇ * 35);
		ᐃΔⵠ(ᐃ, 178.5 * Ⲇ, 172.828125 * Ⲇ, Ⲇ * 150);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔⲆⲆⵠ], 95 * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 178.5, Ⲇ * 172.828125, 150 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⵠΔΔΔ, ᐃⲆ[1], 55 * Ⲇ);
		ᐃ.closePath();
		ᐃ.save();
		ᐃ.translate(Ⲇ * 177, Ⲇ * 512.328125);
		ᐃᐃᐃ(ᐃ, -25 * Ⲇ, -202.5 * Ⲇ, 65 * Ⲇ, 405 * Ⲇ, 25 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔᐃ], ᐃⲆ[2], ᐃⵠΔᐃⵠⲆⵠ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 136, 581.828125 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -39 * Ⲇ, -23 * Ⲇ, 78 * Ⲇ, 46 * Ⲇ, Ⲇ * 25);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * ΔⵠⲆⲆⵠⵠⵠ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 135.5, Ⲇ * 663.828125);
		ᐃᐃᐃ(ᐃ, -39.5 * Ⲇ, -22 * Ⲇ, Ⲇ * 79, Ⲇ * 44, 25 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⵠᐃⵠⲆ], Ⲇ * ᐃΔⲆΔᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 114, 594.828125 * Ⲇ);
		ᐃ.bezierCurveTo(175 * Ⲇ, 596.828125 * Ⲇ, Ⲇ * 163, 596.828125 * Ⲇ, 172 * Ⲇ, Ⲇ * 594.828125);
		ᐃ.bezierCurveTo(171.5 * Ⲇ, Ⲇ * 633.828125, 171.5 * Ⲇ, Ⲇ * 633.828125, 171 * Ⲇ, Ⲇ * 672.828125);
		ᐃ.bezierCurveTo(110 * Ⲇ, Ⲇ * 673.828125, Ⲇ * 140.5, Ⲇ * 673.328125, 110 * Ⲇ, 673.828125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 110.5, 661.828125 * Ⲇ, Ⲇ * 110.5, Ⲇ * 661.828125, 111 * Ⲇ, Ⲇ * 649.828125);
		ᐃ.bezierCurveTo(Ⲇ * 157, 633.828125 * Ⲇ, 134 * Ⲇ, 607.828125 * Ⲇ, Ⲇ * 114, Ⲇ * 594.828125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(ᐃⲆⵠΔ, Ⲇ * ΔⲆΔᐃⵠ);
		ᐃ.moveTo(123 * Ⲇ, 294.828125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 212, 295.828125 * Ⲇ, Ⲇ * 190.5, 295.328125 * Ⲇ, Ⲇ * 250, 295.828125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 231.5, 325.328125 * Ⲇ, Ⲇ * 231.5, Ⲇ * 325.328125, Ⲇ * 220, 354.828125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 175.5, 355.828125 * Ⲇ, 175.5 * Ⲇ, Ⲇ * 355.828125, 140 * Ⲇ, 356.828125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 123.5, 328.828125 * Ⲇ, Ⲇ * 123.5, Ⲇ * 328.828125, 123 * Ⲇ, Ⲇ * 294.828125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃ.translate(ⵠᐃΔ, Ⲇ * -5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(159 * Ⲇ, Ⲇ * 679.828125);
		ᐃ.bezierCurveTo(180 * Ⲇ, 665.828125 * Ⲇ, 155 * Ⲇ, Ⲇ * 675.828125, 151 * Ⲇ, Ⲇ * 671.828125);
		ᐃ.bezierCurveTo(Ⲇ * 154.5, Ⲇ * 685.328125, Ⲇ * 154.5, 685.328125 * Ⲇ, Ⲇ * 158, 698.828125 * Ⲇ);
		ᐃ.bezierCurveTo(171 * Ⲇ, Ⲇ * 699.828125, Ⲇ * 171, Ⲇ * 699.828125, Ⲇ * 184, 700.828125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ]);
		ᐃ.save();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 157, Ⲇ * 548.828125);
		ᐃ.bezierCurveTo(157 * Ⲇ, 561.828125 * Ⲇ, 157 * Ⲇ, Ⲇ * 561.828125, 157 * Ⲇ, Ⲇ * 574.828125);
		ᐃ.bezierCurveTo(Ⲇ * 132.5, Ⲇ * 580.828125, 132.5 * Ⲇ, Ⲇ * 580.828125, 108 * Ⲇ, Ⲇ * 586.828125);
		ᐃ.bezierCurveTo(112 * Ⲇ, 599.828125 * Ⲇ, 111 * Ⲇ, 593.828125 * Ⲇ, 112 * Ⲇ, 599.828125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 159, 603.828125 * Ⲇ, 126.5 * Ⲇ, Ⲇ * 601.328125, Ⲇ * 141, 602.828125 * Ⲇ);
		ᐃ.bezierCurveTo(145 * Ⲇ, 641.828125 * Ⲇ, Ⲇ * 143.5, Ⲇ * 623.828125, Ⲇ * 146, 644.828125 * Ⲇ);
		ᐃ.bezierCurveTo(129.5 * Ⲇ, Ⲇ * 645.328125, 129.5 * Ⲇ, Ⲇ * 645.328125, Ⲇ * 113, 645.828125 * Ⲇ);
		ᐃ.bezierCurveTo(107.5 * Ⲇ, 652.828125 * Ⲇ, 107.5 * Ⲇ, 652.828125 * Ⲇ, Ⲇ * 102, 659.828125 * Ⲇ);
		ᐃ.bezierCurveTo(104 * Ⲇ, 669.328125 * Ⲇ, 104 * Ⲇ, Ⲇ * 669.328125, Ⲇ * 106, 678.828125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 145, 679.328125 * Ⲇ, Ⲇ * 145, Ⲇ * 679.328125, 184 * Ⲇ, Ⲇ * 679.828125);
		ᐃ.bezierCurveTo(185 * Ⲇ, 615.828125 * Ⲇ, Ⲇ * 185, Ⲇ * 615.828125, 186 * Ⲇ, 551.828125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 172.5, Ⲇ * 551.328125, Ⲇ * 172.5, 551.328125 * Ⲇ, Ⲇ * 159, Ⲇ * 550.828125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[1], 7 * Ⲇ);
		ᐃ.restore();
		return ⲆⲆ
	}

	function ΔⲆᐃΔⲆᐃΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 120 * Ⲇ;
		ⲆⲆ.height = 330 * Ⲇ;
		ᐃ.translate(Ⲇ * -60, -10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 188.5, Ⲇ * 7.953125);
		ᐃ.bezierCurveTo(188.5 * Ⲇ, Ⲇ * 334.953125, Ⲇ * 188.5, Ⲇ * 332.953125, 188.5 * Ⲇ, Ⲇ * 339.953125);
		ᐃ.bezierCurveTo(166.5 * Ⲇ, 295.953125 * Ⲇ, Ⲇ * 145.5, Ⲇ * 295.953125, Ⲇ * 139.5, Ⲇ * 282.953125);
		ᐃ.bezierCurveTo(124.5 * Ⲇ, Ⲇ * 244.953125, Ⲇ * 139.5, 243.953125 * Ⲇ, Ⲇ * 131.5, 212.953125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 118.5, Ⲇ * 161.953125, 69.5 * Ⲇ, 156.953125 * Ⲇ, 74.5 * Ⲇ, Ⲇ * 92.953125);
		ᐃ.bezierCurveTo(85.5 * Ⲇ, Ⲇ * 41.953125, Ⲇ * 158.5, Ⲇ * 49.953125, 188.5 * Ⲇ, Ⲇ * 7.953125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⵠ]);
		return ⲆⲆ
	}

	function ᐃᐃⵠⲆΔᐃⵠᐃᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 200 * Ⲇ;
		ⲆⲆ.height = 200 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(112 * Ⲇ, 158 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -86.5 * Ⲇ, -86 * Ⲇ, Ⲇ * 150, Ⲇ * 35, Ⲇ * ᐃⵠⲆᐃΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ]);
		ᐃ.save();
		ᐃ.translate(170 * Ⲇ, Ⲇ * ⵠᐃⵠⲆⵠ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -86.5, Ⲇ * -86, 35 * Ⲇ, 150 * Ⲇ, Ⲇ * ΔⵠⲆⲆⵠⵠⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠⵠ]);
		return ⲆⲆ
	}

	function ᐃⵠⵠᐃⲆⵠΔ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 218;
		ⲆⲆ.height = 185 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(64 * Ⲇ, 53.135406494140625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 92, 17.135406494140625 * Ⲇ, 116 * Ⲇ, 11.135406494140625 * Ⲇ, 158 * Ⲇ, 53.135406494140625 * Ⲇ);
		ᐃ.bezierCurveTo(178 * Ⲇ, 74.13540649414062 * Ⲇ, 181 * Ⲇ, Ⲇ * 81.13540649414062, 196 * Ⲇ, Ⲇ * 101.13540649414062);
		ᐃ.bezierCurveTo(214 * Ⲇ, Ⲇ * 127.13540649414062, Ⲇ * 192, 138.13540649414062 * Ⲇ, Ⲇ * 173, 149.13540649414062 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 137, 166.13540649414062 * Ⲇ, Ⲇ * 74, 170.13540649414062 * Ⲇ, Ⲇ * 36, Ⲇ * 141.13540649414062);
		ᐃ.bezierCurveTo(Ⲇ * ⵠΔᐃⲆⵠ, Ⲇ * 127.13540649414062, ΔⲆᐃⲆⲆ * Ⲇ, 119.13540649414062 * Ⲇ, Ⲇ * 30, Ⲇ * 103.13540649414062);
		ᐃ.bezierCurveTo(48 * Ⲇ, Ⲇ * 71.13540649414062, 54 * Ⲇ, Ⲇ * 67.13540649414062, Ⲇ * 63, Ⲇ * 54.135406494140625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ], ᐃⲆ[1], Ⲇ * ᐃⲆᐃⲆᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(107 * Ⲇ, 25.135406494140625 * Ⲇ);
		ᐃ.bezierCurveTo(62 * Ⲇ, Ⲇ * 90.13540649414062, 54 * Ⲇ, 129.13540649414062 * Ⲇ, 53 * Ⲇ, 151.13540649414062 * Ⲇ);
		ᐃ.bezierCurveTo(39.5 * Ⲇ, 142.13540649414062 * Ⲇ, 39.5 * Ⲇ, Ⲇ * 142.13540649414062, 26 * Ⲇ, Ⲇ * 133.13540649414062);
		ᐃ.bezierCurveTo(Ⲇ * 23.5, 128.63540649414062 * Ⲇ, 23.5 * Ⲇ, Ⲇ * 128.63540649414062, 21 * Ⲇ, 124.13540649414062 * Ⲇ);
		ᐃ.bezierCurveTo(22 * Ⲇ, Ⲇ * 113.13540649414062, 31 * Ⲇ, Ⲇ * 99.13540649414062, Ⲇ * 40, 88.13540649414062 * Ⲇ);
		ᐃ.bezierCurveTo(54.5 * Ⲇ, Ⲇ * 67.13540649414062, Ⲇ * 54.5, Ⲇ * 67.13540649414062, Ⲇ * 69, Ⲇ * 46.135406494140625);
		ᐃ.bezierCurveTo(Ⲇ * 80.5, 36.635406494140625 * Ⲇ, Ⲇ * 80.5, Ⲇ * 36.635406494140625, 92 * Ⲇ, Ⲇ * 27.135406494140625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		return ⲆⲆ
	}

	function ΔᐃⵠᐃᐃΔⵠⲆΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 201 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 164;
		ᐃ.translate(ⵠΔΔᐃ, 5 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ΔⲆΔᐃ;
		ᐃΔⵠ(ᐃ, Ⲇ * 100.5, Ⲇ * 82, Ⲇ * 74.92746655359852);
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⲆΔⵠΔ], 4 * Ⲇ);
		ᐃΔⵠ(ᐃ, 100.5 * Ⲇ, Ⲇ * 82, Ⲇ * 65.9417374971317);
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠⵠΔᐃ], Ⲇ * ⲆⵠⵠⲆ);
		ᐃ.translate(ⲆΔⵠΔ, -5);
		ᐃ.globalAlpha = ⲆΔᐃΔ;
		ᐃΔⵠ(ᐃ, 100.5 * Ⲇ, Ⲇ * 82, Ⲇ * 74.92746655359852);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⲆ], ᐃⲆ[ᐃⵠⲆⵠ], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, 100.5 * Ⲇ, 82 * Ⲇ, 65.9417374971317 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆⵠᐃ], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, Ⲇ * 100.5, 82 * Ⲇ, Ⲇ * 35.9417374971317);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ], ᐃⲆ[2], Ⲇ * 20);
		ᐃΔⵠ(ᐃ, Ⲇ * 100.5, 82 * Ⲇ, 15.9417374971317 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ᐃΔᐃⲆΔ * Ⲇ);
		return ⲆⲆ
	}

	function ⲆⵠΔⵠᐃᐃᐃΔⲆ(ⲆᐃΔⲆ, ⵠΔⵠⵠᐃᐃΔᐃΔ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = ⲆᐃΔⲆ.w + ⲆᐃΔⲆ.ᐃᐃΔⵠᐃ;
		var ⲆΔΔ = ⲆᐃΔⲆ.ⲆΔΔ + ⲆᐃΔⲆ.ᐃᐃΔⵠᐃ;
		var ⵠⲆⲆΔ = .1 * ⲆΔΔ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ + ⵠⲆⲆΔ;
		ᐃ.beginPath();
		ᐃ.translate(Δⵠᐃ / 2, ⲆΔΔ / ⲆⲆᐃⲆ + ⵠⲆⲆΔ);
		ᐃ.globalAlpha = .5;
		ᐃᐃᐃ(ᐃ, -ⲆᐃΔⲆ.w / ΔⲆⲆⵠ, -ⲆᐃΔⲆ.ⲆΔΔ / 2, ⲆᐃΔⲆ.w, ⲆᐃΔⲆ.ⲆΔΔ, ⲆᐃΔⲆ.r);
		ᐃⵠ(ᐃ, Δ[287], Δ[287], ⲆᐃΔⲆ.ᐃᐃΔⵠᐃ);
		ᐃ.globalAlpha = ⵠΔᐃ;
		ᐃ.beginPath();
		!ⵠΔⵠⵠᐃᐃΔᐃΔ && ᐃ.translate(ⲆⲆᐃΔ, -ⵠⲆⲆΔ);
		ᐃᐃᐃ(ᐃ, -ⲆᐃΔⲆ.w / ⲆⲆᐃⲆ, -ⲆᐃΔⲆ.ⲆΔΔ / 2, ⲆᐃΔⲆ.w, ⲆᐃΔⲆ.ⲆΔΔ, ⲆᐃΔⲆ.r);
		ᐃⵠ(ᐃ, ⲆᐃΔⲆ.ᐃⵠⵠΔⲆⵠᐃ, ⲆᐃΔⲆ.ΔⲆⲆΔΔΔᐃⲆⲆ, ⲆᐃΔⲆ.ᐃᐃΔⵠᐃ);
		ᐃ.beginPath();
		ᐃ.fillStyle = ⲆᐃΔⲆ.color;
		ᐃ.textBaseline = Δ[99], ᐃ.textAlign = "center", ᐃ.font = ⲆᐃΔⲆ.size + "px " + ⲆᐃΔⲆ.font;
		ᐃ.fillText(ⲆᐃΔⲆ.text, ⵠⲆⵠ, ⲆⲆᐃΔ);
		return ⲆⲆ
	}

	function ⵠⵠᐃᐃᐃⲆⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 104 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 117;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(4 * Ⲇ, Ⲇ * 90);
		ᐃ.bezierCurveTo(ⲆΔⲆΔᐃ * Ⲇ, Ⲇ * 99.5, Ⲇ * ⲆΔⲆΔⵠ, Ⲇ * 99.5, Ⲇ * 36, Ⲇ * 109);
		ᐃ.bezierCurveTo(67 * Ⲇ, Ⲇ * 92, 67 * Ⲇ, 92 * Ⲇ, Ⲇ * 98, 75 * Ⲇ);
		ᐃ.bezierCurveTo(91 * Ⲇ, 27 * Ⲇ, Ⲇ * 91, Ⲇ * 27, Ⲇ * 91, Ⲇ * 28);
		ᐃ.bezierCurveTo(Ⲇ * 72.5, ᐃΔⲆⲆⲆ * Ⲇ, 72.5 * Ⲇ, ⲆᐃΔᐃⲆᐃⵠ * Ⲇ, 54 * Ⲇ, Ⲇ * 4);
		ᐃ.bezierCurveTo(Ⲇ * 33.5, Ⲇ * 10, Ⲇ * 33.5, Ⲇ * 10, ⲆⲆⵠΔᐃ * Ⲇ, ⲆⵠⲆᐃᐃΔⵠ * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(6 * Ⲇ, 76 * Ⲇ);
		ᐃ.bezierCurveTo(13.5 * Ⲇ, Ⲇ * 51.5, 13.5 * Ⲇ, 51.5 * Ⲇ, 21 * Ⲇ, 27 * Ⲇ);
		ᐃ.bezierCurveTo(37.5 * Ⲇ, Ⲇ * 17, 37.5 * Ⲇ, ⵠᐃⲆⲆⲆ * Ⲇ, 54 * Ⲇ, ⲆΔΔᐃΔ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 33.5, 12.5 * Ⲇ, Ⲇ * 33.5, Ⲇ * 12.5, Ⲇ * ΔⵠⵠΔᐃ, Ⲇ * ⲆᐃᐃΔΔᐃⵠ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(24 * Ⲇ, 62 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 28.5, Ⲇ * 53, Ⲇ * 28.5, Ⲇ * 53, Ⲇ * 33, Ⲇ * 44);
		ᐃ.bezierCurveTo(Ⲇ * 41.5, Ⲇ * 41, Ⲇ * 41.5, Ⲇ * 41, Ⲇ * 50, Ⲇ * 38);
		ᐃ.bezierCurveTo(52.5 * Ⲇ, Ⲇ * 35, Ⲇ * 52.5, 35 * Ⲇ, 55 * Ⲇ, 32 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 52, 30 * Ⲇ, 52 * Ⲇ, 30 * Ⲇ, 49 * Ⲇ, 28 * Ⲇ);
		ᐃ.bezierCurveTo(38 * Ⲇ, 31.5 * Ⲇ, 38 * Ⲇ, 31.5 * Ⲇ, Ⲇ * 27, Ⲇ * 35);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(36 * Ⲇ, 107 * Ⲇ);
		ᐃ.bezierCurveTo(66 * Ⲇ, Ⲇ * 90.5, 66 * Ⲇ, Ⲇ * 90.5, Ⲇ * 96, Ⲇ * 74);
		ᐃ.bezierCurveTo(Ⲇ * 93, Ⲇ * 52.5, 93 * Ⲇ, Ⲇ * 52.5, 90 * Ⲇ, 31 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 87, Ⲇ * 48, 87 * Ⲇ, Ⲇ * 48, Ⲇ * 84, Ⲇ * 65);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔᐃᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 1, Ⲇ * 89);
		ᐃ.bezierCurveTo(18 * Ⲇ, 100 * Ⲇ, 34 * Ⲇ, Ⲇ * 110, Ⲇ * 35, Ⲇ * 111);
		ᐃ.bezierCurveTo(67 * Ⲇ, Ⲇ * 93, 67 * Ⲇ, Ⲇ * 93, Ⲇ * 99, Ⲇ * 75);
		ᐃ.bezierCurveTo(100 * Ⲇ, Ⲇ * 78.5, ⵠⲆⲆⵠⲆ * Ⲇ, 78.5 * Ⲇ, 101 * Ⲇ, Ⲇ * 82);
		ᐃ.bezierCurveTo(68 * Ⲇ, 99 * Ⲇ, 68 * Ⲇ, 99 * Ⲇ, 35 * Ⲇ, 116 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⲆᐃΔᐃⲆ, 106.5 * Ⲇ, Ⲇ * 18, 106.5 * Ⲇ, 1 * Ⲇ, Ⲇ * 97);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 36, 107 * Ⲇ);
		ᐃ.bezierCurveTo(66.5 * Ⲇ, 91.5 * Ⲇ, Ⲇ * 66.5, 91.5 * Ⲇ, 97 * Ⲇ, Ⲇ * 76);
		ᐃ.bezierCurveTo(Ⲇ * 94.5, Ⲇ * 52, Ⲇ * 94.5, Ⲇ * 52, 92 * Ⲇ, 28 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 73, 15.5 * Ⲇ, Ⲇ * 73, 15.5 * Ⲇ, Ⲇ * 54, 3 * Ⲇ);
		ᐃ.bezierCurveTo(33 * Ⲇ, Ⲇ * 9.5, Ⲇ * 33, 9.5 * Ⲇ, Ⲇ * ᐃⲆⵠΔⵠ, 16 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ΔΔᐃΔΔ, 53 * Ⲇ, Ⲇ * 8, Ⲇ * 53, 4 * Ⲇ, Ⲇ * 90);
		ᐃ.bezierCurveTo(Ⲇ * 18.5, 99 * Ⲇ, Ⲇ * 18.5, Ⲇ * 99, Ⲇ * 33, 108 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔᐃΔⲆΔ], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(22 * Ⲇ, Ⲇ * 71);
		ᐃ.bezierCurveTo(Ⲇ * 30, Ⲇ * 76.5, Ⲇ * 30, Ⲇ * 76.5, 38 * Ⲇ, 82 * Ⲇ);
		ᐃ.bezierCurveTo(53 * Ⲇ, 72 * Ⲇ, 53 * Ⲇ, Ⲇ * 72, 68 * Ⲇ, Ⲇ * 62);
		ᐃ.bezierCurveTo(68 * Ⲇ, Ⲇ * 52, Ⲇ * 68, Ⲇ * 52, 68 * Ⲇ, Ⲇ * 42);
		ᐃ.bezierCurveTo(59.5 * Ⲇ, Ⲇ * 35.5, 59.5 * Ⲇ, 35.5 * Ⲇ, 51 * Ⲇ, 29 * Ⲇ);
		ᐃ.bezierCurveTo(39.5 * Ⲇ, 32 * Ⲇ, Ⲇ * 39.5, Ⲇ * 32, Ⲇ * 28, 35 * Ⲇ);
		ᐃ.bezierCurveTo(25 * Ⲇ, Ⲇ * 52, 25 * Ⲇ, Ⲇ * 52, 22 * Ⲇ, Ⲇ * 69);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆᐃⲆⵠ, ᐃⲆ[ΔⵠⲆⵠⲆ], Ⲇ * 6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ᐃΔᐃⲆⲆ, Ⲇ * 89);
		ᐃ.bezierCurveTo(ⲆⵠⵠΔⵠ * Ⲇ, Ⲇ * 73, 12.5 * Ⲇ, 80.5 * Ⲇ, Ⲇ * 20, Ⲇ * 72);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔΔᐃᐃⲆ], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(35 * Ⲇ, 102 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 36, Ⲇ * 92.5, Ⲇ * 36, Ⲇ * 92.5, Ⲇ * 37, 83 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[4], Ⲇ * 6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(68 * Ⲇ, 62 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 81, Ⲇ * 67.5, 81 * Ⲇ, 67.5 * Ⲇ, 94 * Ⲇ, 73 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠΔᐃᐃⵠ, ᐃⲆ[4], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(70 * Ⲇ, 41 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 80, 35.5 * Ⲇ, Ⲇ * 80, Ⲇ * 35.5, Ⲇ * 90, 30 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[4], Ⲇ * 6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 28, 33 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 21.5, 26.5 * Ⲇ, Ⲇ * 21.5, Ⲇ * 26.5, Ⲇ * 15, 20 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔⵠΔⲆⲆ, ᐃⲆ[ΔᐃΔⵠ], ΔᐃⵠΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(51 * Ⲇ, Ⲇ * 28);
		ᐃ.bezierCurveTo(53 * Ⲇ, 17 * Ⲇ, 53 * Ⲇ, ΔⲆᐃᐃΔΔⵠ * Ⲇ, 55 * Ⲇ, Ⲇ * ΔΔⲆⵠΔ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃⵠⲆⲆ], ⵠⵠⵠᐃⵠ * Ⲇ);
		return ⲆⲆ
	}

	function ⵠⲆΔⵠᐃⵠΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 149;
		ⲆⲆ.height = Ⲇ * 153;
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, 74.5 * Ⲇ, 85 * Ⲇ, Ⲇ * 66);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]);
		ᐃ.globalAlpha = ᐃⲆΔ;
		ᐃΔⵠ(ᐃ, 75.5 * Ⲇ, 72.5 * Ⲇ, Ⲇ * 67);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆ], ᐃⲆ[ΔⲆⲆⵠ], ΔᐃΔⵠ * Ⲇ);
		ᐃΔⵠ(ᐃ, 75.5 * Ⲇ, 73.5 * Ⲇ, 54 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, Ⲇ * 74.5, Ⲇ * 80.5, Ⲇ * 39);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆᐃ]);
		ᐃ.globalAlpha = ⵠⵠⵠΔ;
		ᐃΔⵠ(ᐃ, Ⲇ * 74.5, 74.5 * Ⲇ, 37 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		return ⲆⲆ
	}

	function ΔⲆⲆⲆⵠⲆⲆ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 151 * Ⲇ;
		ⲆⲆ.height = 80 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 133, Ⲇ * 54);
		ᐃ.bezierCurveTo(136 * Ⲇ, 18 * Ⲇ, 129 * Ⲇ, ⲆΔᐃΔΔ * Ⲇ, Ⲇ * 114, Ⲇ * 13);
		ᐃ.bezierCurveTo(51 * Ⲇ, Ⲇ * Δⵠⵠ, Ⲇ * 36, 16 * Ⲇ, 34 * Ⲇ, ⲆᐃΔᐃⲆᐃⵠ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⲆᐃⲆΔⲆ, 28 * Ⲇ, 22 * Ⲇ, Ⲇ * 56, Ⲇ * 21, 57 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ΔΔⲆᐃ], 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(130 * Ⲇ, 40 * Ⲇ);
		ᐃ.bezierCurveTo(132 * Ⲇ, 35 * Ⲇ, 132 * Ⲇ, 30 * Ⲇ, Ⲇ * 132, 29 * Ⲇ);
		ᐃ.bezierCurveTo(145 * Ⲇ, Ⲇ * 38, Ⲇ * 144, Ⲇ * 43, Ⲇ * 137, 54 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], ⲆⵠⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ⵠⲆΔᐃᐃ * Ⲇ, 33 * Ⲇ);
		ᐃ.bezierCurveTo(24 * Ⲇ, 44 * Ⲇ, 215 * Ⲇ, Ⲇ * 39, 23 * Ⲇ, Ⲇ * 44);
		ᐃ.bezierCurveTo(Ⲇ * 19, 49 * Ⲇ, 19 * Ⲇ, Ⲇ * 49, ΔⵠΔᐃΔᐃᐃ * Ⲇ, Ⲇ * 54);
		ᐃ.bezierCurveTo(Ⲇ * ⵠᐃΔΔΔ, Ⲇ * 43, ⲆΔⲆᐃⵠ * Ⲇ, 35 * Ⲇ, 20 * Ⲇ, 32 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⵠ], ᐃⲆ[1], 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ΔᐃΔΔᐃΔⲆ, Ⲇ * 52);
		ᐃ.bezierCurveTo(24 * Ⲇ, Ⲇ * 31, Ⲇ * 34, Ⲇ * 25, 75 * Ⲇ, Ⲇ * 23);
		ᐃ.bezierCurveTo(Ⲇ * 130, 24 * Ⲇ, Ⲇ * 129, Ⲇ * 32, Ⲇ * 134, 51 * Ⲇ);
		ᐃ.bezierCurveTo(138 * Ⲇ, 70 * Ⲇ, 126 * Ⲇ, 72 * Ⲇ, Ⲇ * 90, 73 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⲆⲆΔᐃⵠⲆΔ, Ⲇ * 72, ᐃᐃᐃⵠⲆⲆᐃ * Ⲇ, Ⲇ * 68, 18 * Ⲇ, 54 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠⵠᐃ], ΔᐃΔⲆΔ);
		return ⲆⲆ
	}

	function ΔⲆΔⲆⵠΔΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 158 * Ⲇ;
		ⲆⲆ.height = 201 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 96.5, 76.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 100.5, 64.421875 * Ⲇ, 103.5 * Ⲇ, Ⲇ * 62.421875, 110.5 * Ⲇ, 65.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 116.5, 66.421875 * Ⲇ, 117.5 * Ⲇ, Ⲇ * 67.421875, Ⲇ * 112.5, 73.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 107, 79.921875 * Ⲇ, Ⲇ * 107, 79.921875 * Ⲇ, Ⲇ * 101.5, Ⲇ * 86.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8], ᐃⲆ[ΔⲆᐃΔΔ], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 61.5, Ⲇ * 78.421875);
		ᐃ.bezierCurveTo(57.5 * Ⲇ, 73.421875 * Ⲇ, Ⲇ * 51.5, Ⲇ * 66.421875, 45.5 * Ⲇ, 68.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 32.5, 73.421875 * Ⲇ, 38.5 * Ⲇ, Ⲇ * 75.421875, Ⲇ * 46.5, Ⲇ * 81.421875);
		ᐃ.bezierCurveTo(Ⲇ * 51.5, Ⲇ * 84.921875, 51.5 * Ⲇ, Ⲇ * 84.921875, 56.5 * Ⲇ, Ⲇ * 88.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8], ᐃⲆ[8], ⵠⵠⲆᐃᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 116.5, Ⲇ * 127.421875);
		ᐃ.bezierCurveTo(124.5 * Ⲇ, Ⲇ * 108.421875, 129.5 * Ⲇ, Ⲇ * 104.421875, 141.5 * Ⲇ, Ⲇ * 107.421875);
		ᐃ.bezierCurveTo(Ⲇ * 156.5, Ⲇ * 112.421875, Ⲇ * 153.5, Ⲇ * 113.421875, Ⲇ * 132.5, Ⲇ * 134.421875);
		ᐃ.bezierCurveTo(123.5 * Ⲇ, Ⲇ * 141.921875, 123.5 * Ⲇ, Ⲇ * 141.921875, Ⲇ * 114.5, 149.421875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆΔΔ], ᐃⲆ[ΔΔᐃΔΔ], ⲆΔⵠᐃⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 41.5, 134.421875 * Ⲇ);
		ᐃ.bezierCurveTo(30.5 * Ⲇ, 119.421875 * Ⲇ, Ⲇ * 25.5, 111.421875 * Ⲇ, 12.5 * Ⲇ, Ⲇ * 115.421875);
		ᐃ.bezierCurveTo(4.5 * Ⲇ, 120.421875 * Ⲇ, Ⲇ * 4.5, Ⲇ * 121.421875, Ⲇ * 26.5, Ⲇ * 142.421875);
		ᐃ.bezierCurveTo(Ⲇ * 35, Ⲇ * 149.921875, 35 * Ⲇ, 149.921875 * Ⲇ, 43.5 * Ⲇ, Ⲇ * 157.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⵠⵠ], ᐃⲆ[8], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(78.5 * Ⲇ, 51.921875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 99.5, 75.921875 * Ⲇ, 110.5 * Ⲇ, Ⲇ * 96.921875, Ⲇ * 118.5, 120.921875 * Ⲇ);
		ᐃ.bezierCurveTo(121.5 * Ⲇ, Ⲇ * 140.921875, Ⲇ * 107.5, 179.921875 * Ⲇ, 75.5 * Ⲇ, Ⲇ * 183.921875);
		ᐃ.bezierCurveTo(Ⲇ * 30.5, 169.921875 * Ⲇ, Ⲇ * 37.5, Ⲇ * 131.921875, 34.5 * Ⲇ, 120.921875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 41.5, Ⲇ * 89.921875, Ⲇ * 61.5, 67.921875 * Ⲇ, 78.5 * Ⲇ, 51.921875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆΔⲆ], ᐃⲆ[ᐃᐃΔⵠΔᐃΔ], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(72.5 * Ⲇ, 72.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 76.5, 79.421875 * Ⲇ, 79.5 * Ⲇ, 80.421875 * Ⲇ, 83.5 * Ⲇ, Ⲇ * 73.421875);
		ᐃ.bezierCurveTo(80.5 * Ⲇ, Ⲇ * 96.921875, 79.5 * Ⲇ, Ⲇ * 114.421875, Ⲇ * 77.5, Ⲇ * 120.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠᐃⵠ], ᐃⲆ[ⲆᐃⵠⲆⵠ], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(42.5 * Ⲇ, 163.421875 * Ⲇ);
		ᐃ.bezierCurveTo(62.5 * Ⲇ, 185.421875 * Ⲇ, 86.5 * Ⲇ, Ⲇ * 186.421875, Ⲇ * 111.5, Ⲇ * 165.421875);
		ᐃ.bezierCurveTo(107.5 * Ⲇ, 176.421875 * Ⲇ, 95.5 * Ⲇ, 187.421875 * Ⲇ, Ⲇ * 75.5, Ⲇ * 188.421875);
		ᐃ.bezierCurveTo(53.5 * Ⲇ, Ⲇ * 188.421875, Ⲇ * 43.5, 171.421875 * Ⲇ, Ⲇ * 42.5, Ⲇ * 164.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8], ᐃⲆ[ΔΔⵠⵠⵠ], Ⲇ * ⵠᐃⵠᐃⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(79.5 * Ⲇ, Ⲇ * 61.421875);
		ᐃ.bezierCurveTo(88.5 * Ⲇ, Ⲇ * 31.421875, Ⲇ * 81.5, 16.421875 * Ⲇ, Ⲇ * 75.5, 7.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 77.5, Ⲇ * 28.421875, Ⲇ * 77.5, 37.421875 * Ⲇ, Ⲇ * 68.5, 42.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 79.5, 57.421875 * Ⲇ, 79.5 * Ⲇ, 58.421875 * Ⲇ, 80.5 * Ⲇ, 61.421875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⵠⲆⵠ], ᐃⲆ[8], Ⲇ * ᐃᐃΔⵠⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 72.5, 72.421875 * Ⲇ);
		ᐃ.bezierCurveTo(76.5 * Ⲇ, Ⲇ * 79.421875, 79.5 * Ⲇ, 80.421875 * Ⲇ, 83.5 * Ⲇ, Ⲇ * 73.421875);
		ᐃ.bezierCurveTo(Ⲇ * 80.5, Ⲇ * 96.921875, 79.5 * Ⲇ, Ⲇ * 114.421875, Ⲇ * 77.5, Ⲇ * 120.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8], ᐃⲆ[8], Ⲇ * ᐃⵠᐃᐃᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(96.5 * Ⲇ, 76.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 100.5, Ⲇ * 64.421875, Ⲇ * 103.5, Ⲇ * 62.421875, 110.5 * Ⲇ, 65.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 116.5, 66.421875 * Ⲇ, Ⲇ * 117.5, 67.421875 * Ⲇ, Ⲇ * 112.5, 73.421875 * Ⲇ);
		ᐃ.bezierCurveTo(107 * Ⲇ, 79.921875 * Ⲇ, Ⲇ * 107, Ⲇ * 79.921875, 101.5 * Ⲇ, 86.421875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ΔⲆⲆⵠ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(61.5 * Ⲇ, Ⲇ * 78.421875);
		ᐃ.bezierCurveTo(Ⲇ * 57.5, 73.421875 * Ⲇ, Ⲇ * 51.5, 66.421875 * Ⲇ, 45.5 * Ⲇ, Ⲇ * 68.421875);
		ᐃ.bezierCurveTo(32.5 * Ⲇ, 73.421875 * Ⲇ, Ⲇ * 38.5, 75.421875 * Ⲇ, 46.5 * Ⲇ, Ⲇ * 81.421875);
		ᐃ.bezierCurveTo(Ⲇ * 51.5, Ⲇ * 84.921875, Ⲇ * 51.5, 84.921875 * Ⲇ, 56.5 * Ⲇ, Ⲇ * 88.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃΔ], ᐃⲆ[2], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 116.5, 127.421875 * Ⲇ);
		ᐃ.bezierCurveTo(124.5 * Ⲇ, Ⲇ * 108.421875, Ⲇ * 129.5, 104.421875 * Ⲇ, 141.5 * Ⲇ, Ⲇ * 107.421875);
		ᐃ.bezierCurveTo(156.5 * Ⲇ, Ⲇ * 112.421875, Ⲇ * 153.5, Ⲇ * 113.421875, Ⲇ * 132.5, Ⲇ * 134.421875);
		ᐃ.bezierCurveTo(Ⲇ * 123.5, 141.921875 * Ⲇ, Ⲇ * 123.5, Ⲇ * 141.921875, Ⲇ * 114.5, 149.421875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⵠ], ᐃⲆ[ᐃⲆᐃⵠ], Ⲇ * ΔⵠⲆᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 41.5, 134.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 30.5, Ⲇ * 119.421875, Ⲇ * 25.5, Ⲇ * 111.421875, 12.5 * Ⲇ, Ⲇ * 115.421875);
		ᐃ.bezierCurveTo(4.5 * Ⲇ, Ⲇ * 120.421875, Ⲇ * 4.5, Ⲇ * 121.421875, Ⲇ * 26.5, Ⲇ * 142.421875);
		ᐃ.bezierCurveTo(Ⲇ * 35, 149.921875 * Ⲇ, 35 * Ⲇ, Ⲇ * 149.921875, 43.5 * Ⲇ, Ⲇ * 157.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆᐃᐃΔ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(78.5 * Ⲇ, Ⲇ * 51.921875);
		ᐃ.bezierCurveTo(99.5 * Ⲇ, 75.921875 * Ⲇ, 110.5 * Ⲇ, 96.921875 * Ⲇ, Ⲇ * 118.5, 120.921875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 121.5, Ⲇ * 140.921875, 107.5 * Ⲇ, 179.921875 * Ⲇ, Ⲇ * 75.5, Ⲇ * 183.921875);
		ᐃ.bezierCurveTo(Ⲇ * 30.5, Ⲇ * 169.921875, 37.5 * Ⲇ, 131.921875 * Ⲇ, 34.5 * Ⲇ, Ⲇ * 120.921875);
		ᐃ.bezierCurveTo(41.5 * Ⲇ, Ⲇ * 89.921875, 61.5 * Ⲇ, Ⲇ * 67.921875, Ⲇ * 78.5, Ⲇ * 51.921875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆ], ᐃⲆ[ᐃⵠΔⲆ], Ⲇ * ⵠΔΔⵠ);
		ᐃΔⵠ(ᐃ, 108.5 * Ⲇ, Ⲇ * 148.421875, ⲆⵠⵠⵠᐃⵠΔ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⲆΔΔ]);
		ᐃΔⵠ(ᐃ, 106.5 * Ⲇ, Ⲇ * 144.421875, ⵠⵠᐃΔ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[6]);
		ᐃΔⵠ(ᐃ, 46.5 * Ⲇ, Ⲇ * 148.421875, Ⲇ * ⵠΔᐃⵠΔᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃΔⵠ(ᐃ, Ⲇ * 44.5, Ⲇ * 144.421875, 3 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[6]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 116.5, 114.421875 * Ⲇ);
		ᐃ.bezierCurveTo(121.5 * Ⲇ, 137.421875 * Ⲇ, Ⲇ * 118.5, Ⲇ * 133.421875, Ⲇ * 108.5, 139.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 94.5, Ⲇ * 146.421875, 96.5 * Ⲇ, 148.421875 * Ⲇ, Ⲇ * 95.5, Ⲇ * 152.421875);
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆⲆⵠᐃ], ⵠΔΔⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.translate(ⵠᐃΔⲆ, Ⲇ * -ⵠᐃⵠⲆ);
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(35.5 * Ⲇ, Ⲇ * 131.421875);
		ᐃ.bezierCurveTo(36.5 * Ⲇ, 140.421875 * Ⲇ, 39.5 * Ⲇ, Ⲇ * 140.421875, 49.5 * Ⲇ, Ⲇ * 143.421875);
		ᐃ.bezierCurveTo(59.5 * Ⲇ, 149.421875 * Ⲇ, Ⲇ * 57.5, Ⲇ * 151.421875, 59.5 * Ⲇ, Ⲇ * 155.421875);
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[2], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 84.5, 57.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 101.5, Ⲇ * 120.421875, Ⲇ * 92.5, 127.421875 * Ⲇ, 78.5 * Ⲇ, 134.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 51.5, 131.421875 * Ⲇ, Ⲇ * 63.5, 102.421875 * Ⲇ, 70.5 * Ⲇ, Ⲇ * 59.421875);
		ᐃ.bezierCurveTo(Ⲇ * 75, Ⲇ * 55.421875, 78.5 * Ⲇ, Ⲇ * 52.421875, Ⲇ * 79.5, 51.421875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(79.5 * Ⲇ, 61.421875 * Ⲇ);
		ᐃ.bezierCurveTo(88.5 * Ⲇ, 31.421875 * Ⲇ, 81.5 * Ⲇ, Ⲇ * 16.421875, Ⲇ * 75.5, 7.421875 * Ⲇ);
		ᐃ.bezierCurveTo(77.5 * Ⲇ, 28.421875 * Ⲇ, 77.5 * Ⲇ, Ⲇ * 37.421875, Ⲇ * 68.5, Ⲇ * 42.421875);
		ᐃ.bezierCurveTo(Ⲇ * 79.5, 57.421875 * Ⲇ, Ⲇ * 79.5, 58.421875 * Ⲇ, Ⲇ * 80.5, Ⲇ * 61.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[2], ΔⵠⲆᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 72.5, Ⲇ * 72.421875);
		ᐃ.bezierCurveTo(76.5 * Ⲇ, Ⲇ * 79.421875, Ⲇ * 79.5, 80.421875 * Ⲇ, 83.5 * Ⲇ, Ⲇ * 73.421875);
		ᐃ.bezierCurveTo(Ⲇ * 80.5, 96.921875 * Ⲇ, Ⲇ * 79.5, Ⲇ * 114.421875, Ⲇ * 77.5, 120.421875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⵠΔᐃΔᐃ], Ⲇ * ⲆⵠⲆⲆⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 87.5, Ⲇ * 154.421875);
		ᐃ.bezierCurveTo(93.5 * Ⲇ, Ⲇ * 163.921875, Ⲇ * 93.5, 163.921875 * Ⲇ, Ⲇ * 99.5, Ⲇ * 173.421875);
		ᐃ.bezierCurveTo(95 * Ⲇ, Ⲇ * 177.421875, 95 * Ⲇ, 177.421875 * Ⲇ, 90.5 * Ⲇ, 181.421875 * Ⲇ);
		ᐃ.bezierCurveTo(89 * Ⲇ, 167.921875 * Ⲇ, Ⲇ * 89, Ⲇ * 167.921875, Ⲇ * 87.5, Ⲇ * 154.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[ΔᐃⲆΔᐃ], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 81.5, Ⲇ * 164.421875);
		ᐃ.bezierCurveTo(Ⲇ * 84, Ⲇ * 172.921875, Ⲇ * 84, 172.921875 * Ⲇ, Ⲇ * 86.5, Ⲇ * 181.421875);
		ᐃ.bezierCurveTo(Ⲇ * 82.5, 182.421875 * Ⲇ, 82.5 * Ⲇ, Ⲇ * 182.421875, 78.5 * Ⲇ, Ⲇ * 183.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⵠΔ], ᐃⲆ[ⲆΔⲆᐃⲆ], Ⲇ * ΔⲆⲆⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(72.5 * Ⲇ, 164.421875 * Ⲇ);
		ᐃ.bezierCurveTo(73.5 * Ⲇ, Ⲇ * 173.921875, 73.5 * Ⲇ, 173.921875 * Ⲇ, Ⲇ * 74.5, 183.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 70.5, Ⲇ * 182.921875, Ⲇ * 70.5, 182.921875 * Ⲇ, 66.5 * Ⲇ, 182.421875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃᐃⵠᐃ], ᐃⲆ[ⲆⲆᐃⲆⵠ], Ⲇ * ⵠᐃⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 65.5, 156.421875 * Ⲇ);
		ᐃ.bezierCurveTo(65 * Ⲇ, 168.421875 * Ⲇ, 65 * Ⲇ, Ⲇ * 168.421875, Ⲇ * 64.5, Ⲇ * 180.421875);
		ᐃ.bezierCurveTo(58.5 * Ⲇ, Ⲇ * 177.421875, 58.5 * Ⲇ, 177.421875 * Ⲇ, Ⲇ * 52.5, Ⲇ * 174.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[ⵠⵠΔⲆᐃΔⵠ], ⵠΔᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 42.5, 163.421875 * Ⲇ);
		ᐃ.bezierCurveTo(62.5 * Ⲇ, 185.421875 * Ⲇ, Ⲇ * 86.5, Ⲇ * 186.421875, Ⲇ * 111.5, Ⲇ * 165.421875);
		ᐃ.bezierCurveTo(Ⲇ * 107.5, 176.421875 * Ⲇ, 95.5 * Ⲇ, Ⲇ * 187.421875, Ⲇ * 75.5, Ⲇ * 188.421875);
		ᐃ.bezierCurveTo(Ⲇ * 53.5, Ⲇ * 188.421875, 43.5 * Ⲇ, Ⲇ * 171.421875, 42.5 * Ⲇ, 164.421875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆΔ], ᐃⲆ[2], 4 * Ⲇ);
		return ⲆⲆ
	}

	function ᐃⵠⵠⵠⵠΔᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 465;
		ⲆⲆ.height = 310 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(126 * Ⲇ, 192 * Ⲇ);
		ᐃ.bezierCurveTo(198 * Ⲇ, Ⲇ * 202, 245 * Ⲇ, 203 * Ⲇ, Ⲇ * 335, 194 * Ⲇ);
		ᐃ.bezierCurveTo(336 * Ⲇ, Ⲇ * 232, 326 * Ⲇ, 235 * Ⲇ, 232 * Ⲇ, 237 * Ⲇ);
		ᐃ.bezierCurveTo(161 * Ⲇ, 235 * Ⲇ, Ⲇ * 122, Ⲇ * 235, Ⲇ * 126, Ⲇ * 193);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 146, 239 * Ⲇ);
		ᐃ.bezierCurveTo(174 * Ⲇ, Ⲇ * 74, 287 * Ⲇ, 88 * Ⲇ, Ⲇ * 320, 240 * Ⲇ);
		ᐃ.bezierCurveTo(329 * Ⲇ, 231 * Ⲇ, 340 * Ⲇ, Ⲇ * 219, 332 * Ⲇ, 115 * Ⲇ);
		ᐃ.bezierCurveTo(330 * Ⲇ, 40 * Ⲇ, 144 * Ⲇ, Ⲇ * 30, 129 * Ⲇ, 116 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 124, Ⲇ * 217, 124 * Ⲇ, 228 * Ⲇ, 143 * Ⲇ, Ⲇ * 237);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], ⲆΔⵠᐃΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 126, 193 * Ⲇ);
		ᐃ.bezierCurveTo(173 * Ⲇ, 94 * Ⲇ, Ⲇ * 209, Ⲇ * 100, 228 * Ⲇ, Ⲇ * 57);
		ᐃ.bezierCurveTo(190 * Ⲇ, 112 * Ⲇ, 165 * Ⲇ, Ⲇ * 115, 127 * Ⲇ, 184 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[1], ᐃᐃᐃΔⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(230 * Ⲇ, 57 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 266, Ⲇ * 117, Ⲇ * 310, 130 * Ⲇ, 332 * Ⲇ, 183 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 290, 112 * Ⲇ, 262 * Ⲇ, Ⲇ * 109, Ⲇ * 230, Ⲇ * 56);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠΔᐃᐃⵠ, ᐃⲆ[1], Ⲇ * ⵠᐃΔΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(154 * Ⲇ, 212 * Ⲇ);
		ᐃ.bezierCurveTo(208 * Ⲇ, Ⲇ * 224, Ⲇ * 252, Ⲇ * 219, 305 * Ⲇ, 212 * Ⲇ);
		ᐃ.bezierCurveTo(267 * Ⲇ, Ⲇ * 219, 204 * Ⲇ, 222 * Ⲇ, 155 * Ⲇ, 212 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠΔⲆ], ΔᐃΔⲆΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(239 * Ⲇ, Ⲇ * 59);
		ᐃ.bezierCurveTo(Ⲇ * 302, Ⲇ * 72, 325 * Ⲇ, 84 * Ⲇ, 326 * Ⲇ, 115 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 289, 80 * Ⲇ, Ⲇ * 270, Ⲇ * 88, 253 * Ⲇ, Ⲇ * 78);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(216 * Ⲇ, 61 * Ⲇ);
		ᐃ.bezierCurveTo(209 * Ⲇ, 70 * Ⲇ, 209 * Ⲇ, Ⲇ * 70, 202 * Ⲇ, 79 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 173, Ⲇ * 87, Ⲇ * 162, 91 * Ⲇ, 137 * Ⲇ, 107 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 153, 78 * Ⲇ, Ⲇ * 174, 67 * Ⲇ, Ⲇ * 212, 62 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 175, Ⲇ * 125);
		ᐃ.bezierCurveTo(218 * Ⲇ, 94 * Ⲇ, Ⲇ * 238, 90 * Ⲇ, Ⲇ * 281, Ⲇ * 125);
		ᐃ.bezierCurveTo(Ⲇ * 245, Ⲇ * 89, Ⲇ * 240, 80 * Ⲇ, Ⲇ * 228, Ⲇ * 67);
		ᐃ.bezierCurveTo(Ⲇ * 207, Ⲇ * 100, 192 * Ⲇ, Ⲇ * 104, Ⲇ * 177, Ⲇ * 123);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		return ⲆⲆ
	}

	function ΔΔΔᐃΔᐃᐃⵠⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 85 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 145;
		ᐃ.translate(-165 * Ⲇ, -95 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(217 * Ⲇ, 103 * Ⲇ);
		ᐃ.bezierCurveTo(209 * Ⲇ, 129 * Ⲇ, 203 * Ⲇ, 137 * Ⲇ, 195 * Ⲇ, Ⲇ * 146);
		ᐃ.bezierCurveTo(Ⲇ * 195, Ⲇ * 159, 194 * Ⲇ, 167 * Ⲇ, Ⲇ * 189, Ⲇ * 178);
		ᐃ.bezierCurveTo(Ⲇ * 193, Ⲇ * 186, Ⲇ * 196, Ⲇ * 195, Ⲇ * 198, Ⲇ * 216);
		ᐃ.bezierCurveTo(Ⲇ * 217.5, Ⲇ * 189.5, 217.5 * Ⲇ, Ⲇ * 189.5, Ⲇ * 237, Ⲇ * 163);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(231 * Ⲇ, 163 * Ⲇ);
		ᐃ.bezierCurveTo(221 * Ⲇ, 139 * Ⲇ, Ⲇ * 218, 128 * Ⲇ, Ⲇ * 215, 114 * Ⲇ);
		ᐃ.bezierCurveTo(213 * Ⲇ, Ⲇ * 102, 220 * Ⲇ, 92 * Ⲇ, 222 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(224 * Ⲇ, Ⲇ * 118, 233 * Ⲇ, Ⲇ * 138, 244 * Ⲇ, Ⲇ * 161);
		ᐃ.bezierCurveTo(235 * Ⲇ, 188 * Ⲇ, 224 * Ⲇ, 198 * Ⲇ, Ⲇ * 204, Ⲇ * 221);
		ᐃ.bezierCurveTo(190 * Ⲇ, 233 * Ⲇ, Ⲇ * 190, 235 * Ⲇ, Ⲇ * 180, Ⲇ * 235);
		ᐃ.bezierCurveTo(Ⲇ * 167, 235 * Ⲇ, 164 * Ⲇ, 216 * Ⲇ, Ⲇ * 175, Ⲇ * 211);
		ᐃ.bezierCurveTo(Ⲇ * 176, Ⲇ * 208, Ⲇ * 181, Ⲇ * 207, Ⲇ * 191, Ⲇ * 205);
		ᐃ.bezierCurveTo(213 * Ⲇ, 186 * Ⲇ, 218 * Ⲇ, 180 * Ⲇ, 230 * Ⲇ, Ⲇ * 163);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ, ᐃⲆ, Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(234 * Ⲇ, 154 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 227, 156 * Ⲇ, Ⲇ * 222, Ⲇ * 156, 199 * Ⲇ, 148 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 201, 151 * Ⲇ, Ⲇ * 216, Ⲇ * 159, 224 * Ⲇ, 162 * Ⲇ);
		ᐃ.bezierCurveTo(209 * Ⲇ, 169.5 * Ⲇ, Ⲇ * 209, 169.5 * Ⲇ, 194 * Ⲇ, 177 * Ⲇ);
		ᐃ.bezierCurveTo(213.5 * Ⲇ, Ⲇ * 175, 213.5 * Ⲇ, 175 * Ⲇ, 233 * Ⲇ, 173 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ);
		return ⲆⲆ
	}

	function ᐃΔⵠᐃⵠΔᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 142 * Ⲇ;
		ⲆⲆ.height = 118 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 111, 27.3671875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 128, Ⲇ * 9.3671875, 125 * Ⲇ, Ⲇ * 13.3671875, Ⲇ * 126, Ⲇ * 21.3671875);
		ᐃ.bezierCurveTo(Ⲇ * 126, Ⲇ * 33.3671875, 119 * Ⲇ, 43.3671875 * Ⲇ, 118 * Ⲇ, Ⲇ * 42.3671875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔⵠ], ᐃⲆ[ⲆⵠⵠⲆ], ᐃᐃΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 31, Ⲇ * 23.3671875);
		ᐃ.bezierCurveTo(ⵠⵠΔΔⵠᐃΔ * Ⲇ, Ⲇ * 15.3671875, Ⲇ * 16, 14.3671875 * Ⲇ, Ⲇ * ⵠᐃⲆⲆⲆ, Ⲇ * 20.3671875);
		ᐃ.bezierCurveTo(Ⲇ * 22, 33.3671875 * Ⲇ, ⲆⵠⵠΔⵠ * Ⲇ, 27.3671875 * Ⲇ, Ⲇ * 24, 34.3671875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ], ᐃⲆ[4], Ⲇ * 4);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 70.5, 34.8671875 * Ⲇ);
		ᐃ.rotate(Ⲇᐃⵠⵠ);
		ᐃᐃᐃ(ᐃ, -49.5 * Ⲇ, -21.5 * Ⲇ, 99 * Ⲇ, 43 * Ⲇ, Ⲇ * 15);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ], ᐃⲆ[1], ⲆⵠⲆⲆⲆ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(71 * Ⲇ, 40.8671875 * Ⲇ);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, -49 * Ⲇ, -12.5 * Ⲇ, Ⲇ * 98, Ⲇ * 25, 15 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ⲆΔᐃΔ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 19.800003051757812, Ⲇ * 75.95625305175781);
		ᐃ.bezierCurveTo(Ⲇ * 19.300003051757812, Ⲇ * 82.95625305175781, Ⲇ * 19.300003051757812, Ⲇ * 82.95625305175781, Ⲇ * 18.800003051757812, 89.95625305175781 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 38.80000305175781, Ⲇ * 115.95625305175781, Ⲇ * 37.80000305175781, 104.95625305175781 * Ⲇ, 31.800003051757812 * Ⲇ, 91.95625305175781 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃⵠ], ᐃⲆ[1], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(119.80000305175781 * Ⲇ, 75.95625305175781 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 120.80000305175781, 82.95625305175781 * Ⲇ, 120.80000305175781 * Ⲇ, Ⲇ * 82.95625305175781, Ⲇ * 121.80000305175781, Ⲇ * 89.95625305175781);
		ᐃ.bezierCurveTo(Ⲇ * 101.80000305175781, Ⲇ * 111.95625305175781, Ⲇ * 99.80000305175781, Ⲇ * 111.95625305175781, 112.80000305175781 * Ⲇ, 81.95625305175781 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[1], Ⲇ * ᐃⵠⲆⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(17.800003051757812 * Ⲇ, 49.15625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 17.800003051757812, 64.15625 * Ⲇ, Ⲇ * 17.800003051757812, 64.15625 * Ⲇ, Ⲇ * 17.800003051757812, Ⲇ * 79.15625);
		ᐃ.bezierCurveTo(Ⲇ * 23.300003051757812, Ⲇ * 85.15625, 23.300003051757812 * Ⲇ, 85.15625 * Ⲇ, Ⲇ * 28.800003051757812, Ⲇ * 91.15625);
		ᐃ.bezierCurveTo(36.80000305175781 * Ⲇ, Ⲇ * 96.15625, 32.80000305175781 * Ⲇ, Ⲇ * 91.15625, Ⲇ * 28.800003051757812, Ⲇ * 77.15625);
		ᐃ.bezierCurveTo(33.80000305175781 * Ⲇ, Ⲇ * 65.15625, Ⲇ * 33.80000305175781, Ⲇ * 65.15625, 38.80000305175781 * Ⲇ, 53.15625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 123.80000305175781, Ⲇ * 53.95625305175781);
		ᐃ.bezierCurveTo(121.80000305175781 * Ⲇ, 77.95625305175781 * Ⲇ, 121.80000305175781 * Ⲇ, Ⲇ * 74.95625305175781, Ⲇ * 121.80000305175781, 78.95625305175781 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 115.80000305175781, 84.95625305175781 * Ⲇ, Ⲇ * 115.80000305175781, 84.95625305175781 * Ⲇ, 109.80000305175781 * Ⲇ, Ⲇ * 90.95625305175781);
		ᐃ.bezierCurveTo(102.80000305175781 * Ⲇ, 93.95625305175781 * Ⲇ, Ⲇ * 105.80000305175781, Ⲇ * 86.95625305175781, 110.80000305175781 * Ⲇ, 76.95625305175781 * Ⲇ);
		ᐃ.bezierCurveTo(107.30000305175781 * Ⲇ, 65.45625305175781 * Ⲇ, 103.80000305175781 * Ⲇ, Ⲇ * 53.95625305175781, Ⲇ * 103.80000305175781, Ⲇ * 53.95625305175781);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔΔ], ᐃⲆ[ⵠᐃΔΔΔ], ΔᐃΔⲆΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ⲆᐃΔᐃⲆ * Ⲇ, Ⲇ * 56.3671875);
		ᐃ.bezierCurveTo(Ⲇ * 70, 56.8671875 * Ⲇ, 70 * Ⲇ, Ⲇ * 56.8671875, Ⲇ * 122, Ⲇ * 57.3671875);
		ᐃ.bezierCurveTo(Ⲇ * 137, Ⲇ * 20.3671875, 137 * Ⲇ, 16.3671875 * Ⲇ, Ⲇ * 126, 22.3671875 * Ⲇ);
		ᐃ.bezierCurveTo(115.5 * Ⲇ, Ⲇ * 34.3671875, Ⲇ * 115.5, Ⲇ * 34.3671875, 105 * Ⲇ, 46.3671875 * Ⲇ);
		ᐃ.bezierCurveTo(70.5 * Ⲇ, Ⲇ * 46.3671875, 70.5 * Ⲇ, 46.3671875 * Ⲇ, Ⲇ * 36, Ⲇ * 46.3671875);
		ᐃ.bezierCurveTo(ⲆⵠⲆᐃ * Ⲇ, Ⲇ * 14.3671875, ᐃΔⵠⲆΔ * Ⲇ, Ⲇ * 18.3671875, Ⲇ * 8, 27.3671875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 12.5, Ⲇ * 41.8671875, 12.5 * Ⲇ, 41.8671875 * Ⲇ, Ⲇ * 17, 56.3671875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃᐃᐃΔⵠ], 4 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(68.30000305175781 * Ⲇ, 41.45625305175781 * Ⲇ);
		ᐃ.rotate(.76);
		ᐃᐃᐃ(ᐃ, Ⲇ * -20.5, -20.5 * Ⲇ, 41 * Ⲇ, Ⲇ * 41, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ⲆⲆⲆⲆⲆ, ᐃⲆ[5], Ⲇ * 4);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 68.80000305175781, Ⲇ * 44.45625305175781);
		ᐃ.rotate(.76);
		ᐃᐃᐃ(ᐃ, Ⲇ * -21, Ⲇ * -20.5, 42 * Ⲇ, 41 * Ⲇ, ᐃⲆⲆⵠⲆ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆΔΔ], ᐃⲆ[4], 4 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(69.80000305175781 * Ⲇ, Ⲇ * 44.556243896484375);
		ᐃ.rotate(.76);
		ᐃᐃᐃ(ᐃ, -10 * Ⲇ, -10 * Ⲇ, 20 * Ⲇ, 20 * Ⲇ, Ⲇ * ⵠⵠⲆⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠᐃΔᐃ], ᐃⲆ[7], 4 * Ⲇ);
		return ⲆⲆ
	}

	function ᐃᐃⵠⵠᐃᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 372 * Ⲇ;
		ⲆⲆ.height = 358 * Ⲇ;
		ᐃ.translate(0 * Ⲇ, ⲆΔⵠᐃⲆ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .2 : ⲆⵠΔⲆ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(247.00003051757812 * Ⲇ, Ⲇ * 115.76704406738281);
		ᐃ.bezierCurveTo(Ⲇ * 305.0000305175781, Ⲇ * 124.76704406738281, 335.0000305175781 * Ⲇ, 112.76704406738281 * Ⲇ, Ⲇ * 359.0000305175781, 93.76704406738281 * Ⲇ);
		ᐃ.bezierCurveTo(359.5000305175781 * Ⲇ, Ⲇ * 113.26704406738281, Ⲇ * 359.5000305175781, Ⲇ * 113.26704406738281, 360.0000305175781 * Ⲇ, 132.7670440673828 * Ⲇ);
		ᐃ.bezierCurveTo(339.0000305175781 * Ⲇ, Ⲇ * 177.7670440673828, 281.0000305175781 * Ⲇ, Ⲇ * 178.7670440673828, Ⲇ * 243.00003051757812, Ⲇ * 183.7670440673828);
		ᐃ.bezierCurveTo(214.50003051757812 * Ⲇ, Ⲇ * 214.2670440673828, 214.50003051757812 * Ⲇ, 214.2670440673828 * Ⲇ, Ⲇ * 186.00003051757812, Ⲇ * 244.7670440673828);
		ᐃ.bezierCurveTo(155.00003051757812 * Ⲇ, 214.2670440673828 * Ⲇ, 155.00003051757812 * Ⲇ, Ⲇ * 214.2670440673828, Ⲇ * 124.00003051757812, Ⲇ * 183.7670440673828);
		ᐃ.bezierCurveTo(51.000030517578125 * Ⲇ, Ⲇ * 180.7670440673828, Ⲇ * 21.000030517578125, 161.7670440673828 * Ⲇ, 9.000030517578125 * Ⲇ, 129.7670440673828 * Ⲇ);
		ᐃ.bezierCurveTo(8.500030517578125 * Ⲇ, Ⲇ * 110.76704406738281, Ⲇ * 8.500030517578125, Ⲇ * 110.76704406738281, 8.000030517578125 * Ⲇ, 91.76704406738281 * Ⲇ);
		ᐃ.bezierCurveTo(31.000030517578125 * Ⲇ, Ⲇ * 112.76704406738281, 87.00003051757812 * Ⲇ, Ⲇ * 119.76704406738281, 116.00003051757812 * Ⲇ, Ⲇ * 117.76704406738281);
		ᐃ.bezierCurveTo(Ⲇ * 175.00003051757812, 18.767044067382812 * Ⲇ, Ⲇ * 170.00003051757812, Ⲇ * 23.767044067382812, 181.00003051757812 * Ⲇ, 14.767044067382812 * Ⲇ);
		ᐃ.bezierCurveTo(199.00003051757812 * Ⲇ, Ⲇ * 34.76704406738281, Ⲇ * 203.00003051757812, Ⲇ * 54.76704406738281, 247.00003051757812 * Ⲇ, Ⲇ * 115.76704406738281);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], ⲆΔⲆᐃⵠ * Ⲇ);
		ᐃ.translate(ΔΔⲆⲆ * Ⲇ, Ⲇ * -ⵠⲆⲆᐃⵠ);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 107.00003051757812, Ⲇ * 54.13069152832031);
		ᐃ.bezierCurveTo(Ⲇ * 106.50003051757812, Ⲇ * 38.63069152832031, 106.50003051757812 * Ⲇ, Ⲇ * 38.63069152832031, Ⲇ * 106.00003051757812, 23.130691528320312 * Ⲇ);
		ᐃ.bezierCurveTo(121.50003051757812 * Ⲇ, 38.13069152832031 * Ⲇ, Ⲇ * 121.50003051757812, 38.13069152832031 * Ⲇ, 137.00003051757812 * Ⲇ, Ⲇ * 53.13069152832031);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[3], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 233.00003051757812, 53.6761474609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 247.00003051757812, Ⲇ * 37.1761474609375, 247.00003051757812 * Ⲇ, 37.1761474609375 * Ⲇ, 261.0000305175781 * Ⲇ, Ⲇ * 20.6761474609375);
		ᐃ.bezierCurveTo(Ⲇ * 261.0000305175781, 36.1761474609375 * Ⲇ, 261.0000305175781 * Ⲇ, Ⲇ * 36.1761474609375, Ⲇ * 261.0000305175781, 51.6761474609375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃᐃ], ᐃⲆ[ⲆΔⲆΔ], ᐃⲆᐃⲆᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(293.0000305175781 * Ⲇ, Ⲇ * 54.403411865234375);
		ᐃ.bezierCurveTo(Ⲇ * 300.0000305175781, 49.903411865234375 * Ⲇ, Ⲇ * 300.0000305175781, 49.903411865234375 * Ⲇ, Ⲇ * 307.0000305175781, Ⲇ * 45.403411865234375);
		ᐃ.bezierCurveTo(307.0000305175781 * Ⲇ, 49.903411865234375 * Ⲇ, Ⲇ * 307.0000305175781, 49.903411865234375 * Ⲇ, Ⲇ * 307.0000305175781, Ⲇ * 54.403411865234375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆᐃⲆ], ᐃⲆ[3], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(77.00003051757812 * Ⲇ, Ⲇ * 54.403411865234375);
		ᐃ.bezierCurveTo(70.00003051757812 * Ⲇ, Ⲇ * 50.403411865234375, Ⲇ * 70.00003051757812, Ⲇ * 50.403411865234375, 63.000030517578125 * Ⲇ, 46.403411865234375 * Ⲇ);
		ᐃ.bezierCurveTo(62.500030517578125 * Ⲇ, Ⲇ * 50.903411865234375, 62.500030517578125 * Ⲇ, Ⲇ * 50.903411865234375, 62.000030517578125 * Ⲇ, Ⲇ * 55.403411865234375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃᐃΔ], ᐃⲆ[ᐃⵠᐃⲆ], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(58.000030517578125 * Ⲇ, 122.3125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 59.500030517578125, Ⲇ * 97.3125, 59.500030517578125 * Ⲇ, Ⲇ * 97.3125, 61.000030517578125 * Ⲇ, 72.3125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 91.00003051757812, Ⲇ * 89.3125, 91.00003051757812 * Ⲇ, Ⲇ * 89.3125, Ⲇ * 121.00003051757812, Ⲇ * 106.3125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[1], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(310.0000305175781 * Ⲇ, 127.3125 * Ⲇ);
		ᐃ.bezierCurveTo(308.0000305175781 * Ⲇ, Ⲇ * 98.3125, 308.0000305175781 * Ⲇ, 98.3125 * Ⲇ, Ⲇ * 306.0000305175781, 69.3125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 274.5000305175781, 88.8125 * Ⲇ, Ⲇ * 274.5000305175781, 88.8125 * Ⲇ, 243.00003051757812 * Ⲇ, 108.3125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⵠΔᐃ], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(226.00003051757812 * Ⲇ, Ⲇ * 87.85795593261719);
		ᐃ.bezierCurveTo(243.50003051757812 * Ⲇ, Ⲇ * 66.85795593261719, Ⲇ * 243.50003051757812, Ⲇ * 66.85795593261719, 261.0000305175781 * Ⲇ, 45.85795593261719 * Ⲇ);
		ᐃ.bezierCurveTo(265.0000305175781 * Ⲇ, 83.85795593261719 * Ⲇ, Ⲇ * 265.0000305175781, Ⲇ * 83.85795593261719, Ⲇ * 269.0000305175781, Ⲇ * 121.85795593261719);
		ᐃ.bezierCurveTo(235.00003051757812 * Ⲇ, 122.85795593261719 * Ⲇ, Ⲇ * 233.00003051757812, 107.85795593261719 * Ⲇ, 228.00003051757812 * Ⲇ, Ⲇ * 90.85795593261719);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃⵠ], ᐃⲆ[ᐃⵠᐃⲆ], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 105.00003051757812, Ⲇ * 128.8579559326172);
		ᐃ.bezierCurveTo(Ⲇ * 104.50003051757812, Ⲇ * 87.85795593261719, 104.50003051757812 * Ⲇ, Ⲇ * 87.85795593261719, 104.00003051757812 * Ⲇ, Ⲇ * 46.85795593261719);
		ᐃ.bezierCurveTo(126.50003051757812 * Ⲇ, 69.35795593261719 * Ⲇ, Ⲇ * 126.50003051757812, 69.35795593261719 * Ⲇ, Ⲇ * 149.00003051757812, 91.85795593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 130.00003051757812, Ⲇ * 123.85795593261719, Ⲇ * 123.00003051757812, 132.8579559326172 * Ⲇ, 107.00003051757812 * Ⲇ, Ⲇ * 130.8579559326172);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔᐃ], ᐃⲆ[ΔⵠⲆ], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 59.000030517578125, Ⲇ * 121.85795593261719);
		ᐃ.bezierCurveTo(59.500030517578125 * Ⲇ, Ⲇ * 99.35795593261719, 59.500030517578125 * Ⲇ, 99.35795593261719 * Ⲇ, 60.000030517578125 * Ⲇ, Ⲇ * 76.85795593261719);
		ᐃ.bezierCurveTo(84.00003051757812 * Ⲇ, Ⲇ * 92.35795593261719, 84.00003051757812 * Ⲇ, 92.35795593261719 * Ⲇ, 108.00003051757812 * Ⲇ, 107.85795593261719 * Ⲇ);
		ᐃ.bezierCurveTo(106.00003051757812 * Ⲇ, Ⲇ * 148.8579559326172, Ⲇ * 86.00003051757812, 148.8579559326172 * Ⲇ, 62.000030517578125 * Ⲇ, 123.85795593261719 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⲆ], ᐃⲆ[3], Ⲇ * ⲆΔⵠᐃⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 105.00003051757812, Ⲇ * 132.8579559326172);
		ᐃ.bezierCurveTo(104.50003051757812 * Ⲇ, Ⲇ * 93.35795593261719, Ⲇ * 104.50003051757812, Ⲇ * 93.35795593261719, Ⲇ * 104.00003051757812, Ⲇ * 53.85795593261719);
		ᐃ.bezierCurveTo(Ⲇ * 126.50003051757812, Ⲇ * 75.85795593261719, Ⲇ * 126.50003051757812, 75.85795593261719 * Ⲇ, Ⲇ * 149.00003051757812, Ⲇ * 97.85795593261719);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[3], ⵠⲆΔΔⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(311.0000305175781 * Ⲇ, 126.85795593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 309.0000305175781, Ⲇ * 101.35795593261719, 309.0000305175781 * Ⲇ, 101.35795593261719 * Ⲇ, 307.0000305175781 * Ⲇ, 75.85795593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 271.0000305175781, 96.85795593261719 * Ⲇ, 271.0000305175781 * Ⲇ, 96.85795593261719 * Ⲇ, 235.00003051757812 * Ⲇ, Ⲇ * 117.85795593261719);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ᐃⵠᐃⲆ], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 228.00003051757812, 96.85795593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 244.50003051757812, 74.85795593261719 * Ⲇ, Ⲇ * 244.50003051757812, Ⲇ * 74.85795593261719, 261.0000305175781 * Ⲇ, Ⲇ * 52.85795593261719);
		ᐃ.bezierCurveTo(265.5000305175781 * Ⲇ, Ⲇ * 89.85795593261719, Ⲇ * 265.5000305175781, Ⲇ * 89.85795593261719, Ⲇ * 270.0000305175781, 126.85795593261719 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃΔᐃ], ᐃⲆ[3], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 12.000030517578125, Ⲇ * 86.13069152832031);
		ᐃ.bezierCurveTo(36.000030517578125 * Ⲇ, 113.13069152832031 * Ⲇ, Ⲇ * 84.00003051757812, 111.13069152832031 * Ⲇ, Ⲇ * 116.00003051757812, 113.13069152832031 * Ⲇ);
		ᐃ.bezierCurveTo(164.00003051757812 * Ⲇ, 23.130691528320312 * Ⲇ, Ⲇ * 172.00003051757812, 18.130691528320312 * Ⲇ, Ⲇ * 181.00003051757812, 9.130691528320312 * Ⲇ);
		ᐃ.bezierCurveTo(199.00003051757812 * Ⲇ, 29.130691528320312 * Ⲇ, 221.00003051757812 * Ⲇ, 78.13069152832031 * Ⲇ, 247.00003051757812 * Ⲇ, 112.13069152832031 * Ⲇ);
		ᐃ.bezierCurveTo(301.0000305175781 * Ⲇ, Ⲇ * 122.13069152832031, Ⲇ * 338.0000305175781, Ⲇ * 111.13069152832031, Ⲇ * 359.0000305175781, 94.13069152832031 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 359.0000305175781, 113.13069152832031 * Ⲇ, Ⲇ * 358.5000305175781, 105.13069152832031 * Ⲇ, Ⲇ * 358.0000305175781, Ⲇ * 116.13069152832031);
		ᐃ.bezierCurveTo(270.5000305175781 * Ⲇ, 130.1306915283203 * Ⲇ, Ⲇ * 270.5000305175781, Ⲇ * 130.1306915283203, 183.00003051757812 * Ⲇ, 144.1306915283203 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 98.00003051757812, Ⲇ * 128.6306915283203, 98.00003051757812 * Ⲇ, Ⲇ * 128.6306915283203, Ⲇ * 13.000030517578125, Ⲇ * 113.13069152832031);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆΔ], ᐃⲆ[1], ⵠⲆⲆᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(247.00003051757812 * Ⲇ, Ⲇ * 115.76704406738281);
		ᐃ.bezierCurveTo(305.0000305175781 * Ⲇ, 124.76704406738281 * Ⲇ, 335.0000305175781 * Ⲇ, Ⲇ * 112.76704406738281, 359.0000305175781 * Ⲇ, 93.76704406738281 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 359.5000305175781, Ⲇ * 113.26704406738281, Ⲇ * 359.5000305175781, 113.26704406738281 * Ⲇ, Ⲇ * 360.0000305175781, Ⲇ * 132.7670440673828);
		ᐃ.bezierCurveTo(339.0000305175781 * Ⲇ, 177.7670440673828 * Ⲇ, 281.0000305175781 * Ⲇ, 178.7670440673828 * Ⲇ, 243.00003051757812 * Ⲇ, Ⲇ * 183.7670440673828);
		ᐃ.bezierCurveTo(214.50003051757812 * Ⲇ, Ⲇ * 214.2670440673828, Ⲇ * 214.50003051757812, 214.2670440673828 * Ⲇ, Ⲇ * 186.00003051757812, 244.7670440673828 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 155.00003051757812, Ⲇ * 214.2670440673828, 155.00003051757812 * Ⲇ, Ⲇ * 214.2670440673828, Ⲇ * 124.00003051757812, Ⲇ * 183.7670440673828);
		ᐃ.bezierCurveTo(Ⲇ * 51.000030517578125, 180.7670440673828 * Ⲇ, Ⲇ * 21.000030517578125, 161.7670440673828 * Ⲇ, 9.000030517578125 * Ⲇ, 129.7670440673828 * Ⲇ);
		ᐃ.bezierCurveTo(8.500030517578125 * Ⲇ, 110.76704406738281 * Ⲇ, Ⲇ * 8.500030517578125, 110.76704406738281 * Ⲇ, Ⲇ * 8.000030517578125, Ⲇ * 91.76704406738281);
		ᐃ.bezierCurveTo(31.000030517578125 * Ⲇ, Ⲇ * 112.76704406738281, Ⲇ * 87.00003051757812, Ⲇ * 119.76704406738281, Ⲇ * 116.00003051757812, Ⲇ * 117.76704406738281);
		ᐃ.bezierCurveTo(175.00003051757812 * Ⲇ, Ⲇ * 18.767044067382812, 170.00003051757812 * Ⲇ, 23.767044067382812 * Ⲇ, Ⲇ * 181.00003051757812, Ⲇ * 14.767044067382812);
		ᐃ.bezierCurveTo(199.00003051757812 * Ⲇ, 34.76704406738281 * Ⲇ, 203.00003051757812 * Ⲇ, 54.76704406738281 * Ⲇ, Ⲇ * 247.00003051757812, 115.76704406738281 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ⵠΔⲆΔΔ], Ⲇ * ⵠᐃⵠⲆΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 27.000030517578125, Ⲇ * 94.76704406738281);
		ᐃ.bezierCurveTo(11.000030517578125 * Ⲇ, 81.76704406738281 * Ⲇ, Ⲇ * 31.000030517578125, 72.76704406738281 * Ⲇ, 44.000030517578125 * Ⲇ, 59.76704406738281 * Ⲇ);
		ᐃ.bezierCurveTo(9.000030517578125 * Ⲇ, Ⲇ * 65.76704406738281, 4.000030517578125 * Ⲇ, 78.76704406738281 * Ⲇ, Ⲇ * 9.000030517578125, 89.76704406738281 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ⵠⵠᐃΔ], ᐃᐃΔⵠⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(352.0000305175781 * Ⲇ, 100.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(362.0000305175781 * Ⲇ, Ⲇ * 92.76705932617188, 352.0000305175781 * Ⲇ, 84.76705932617188 * Ⲇ, Ⲇ * 340.0000305175781, Ⲇ * 68.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 360.0000305175781, 69.76705932617188 * Ⲇ, 364.0000305175781 * Ⲇ, Ⲇ * 79.76705932617188, 364.0000305175781 * Ⲇ, 94.76705932617188 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆΔⲆⵠ], Ⲇ * 1);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(25.000030517578125 * Ⲇ, 97.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 2.000030517578125, 76.94886779785156 * Ⲇ, 29.000030517578125 * Ⲇ, Ⲇ * 62.94886779785156, 44.000030517578125 * Ⲇ, Ⲇ * 59.94886779785156);
		ᐃ.bezierCurveTo(8.000030517578125 * Ⲇ, 59.94886779785156 * Ⲇ, -.999969482421875 * Ⲇ, Ⲇ * 81.94886779785156, 4.000030517578125 * Ⲇ, 92.94886779785156 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆᐃⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(349.0000305175781 * Ⲇ, Ⲇ * 100.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 366.0000305175781, Ⲇ * 82.94886779785156, 353.0000305175781 * Ⲇ, Ⲇ * 76.94886779785156, Ⲇ * 337.0000305175781, 67.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(366.0000305175781 * Ⲇ, Ⲇ * 69.94886779785156, 366.0000305175781 * Ⲇ, 83.94886779785156 * Ⲇ, Ⲇ * 363.0000305175781, 101.94886779785156 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ᐃΔᐃⲆ], ΔΔⲆⲆⵠ * Ⲇ);
		ᐃΔⵠ(ᐃ, 46.000030517578125 * Ⲇ, 137.5852279663086 * Ⲇ, Ⲇ * 9.219544457292887);
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⵠΔΔΔ], Ⲇ * 1);
		ᐃΔⵠ(ᐃ, 308.0000305175781 * Ⲇ, 141.5852279663086 * Ⲇ, Ⲇ * 8.54400374531753);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃΔⵠ], ᐃⲆ[5], Ⲇ * ⵠⲆⲆⲆ);
		ᐃΔⵠ(ᐃ, Ⲇ * 92.00003051757812, Ⲇ * 149.58523559570312, 14.866068747318506 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], 1 * Ⲇ);
		ᐃΔⵠ(ᐃ, 262.0000305175781 * Ⲇ, Ⲇ * 148.8579559326172, 15.620499351813308 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠᐃΔ], ᐃⲆ[5], Δᐃᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 184.00003051757812, 68.85795593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 203.00003051757812, 108.85795593261719 * Ⲇ, 203.00003051757812 * Ⲇ, 108.85795593261719 * Ⲇ, 222.00003051757812 * Ⲇ, Ⲇ * 148.8579559326172);
		ᐃ.bezierCurveTo(202.50003051757812 * Ⲇ, 177.8579559326172 * Ⲇ, Ⲇ * 202.50003051757812, 177.8579559326172 * Ⲇ, 183.00003051757812 * Ⲇ, Ⲇ * 206.8579559326172);
		ᐃ.bezierCurveTo(162.00003051757812 * Ⲇ, 178.8579559326172 * Ⲇ, 162.00003051757812 * Ⲇ, Ⲇ * 178.8579559326172, 141.00003051757812 * Ⲇ, 150.8579559326172 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⵠⵠΔΔⲆ], ΔⲆⲆΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(183.00003051757812 * Ⲇ, 104.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 192.50003051757812, Ⲇ * 125.44886779785156, 192.50003051757812 * Ⲇ, Ⲇ * 125.44886779785156, Ⲇ * 202.00003051757812, Ⲇ * 145.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 192.00003051757812, 163.94886779785156 * Ⲇ, Ⲇ * 192.00003051757812, Ⲇ * 163.94886779785156, 182.00003051757812 * Ⲇ, Ⲇ * 181.94886779785156);
		ᐃ.bezierCurveTo(172.50003051757812 * Ⲇ, 164.44886779785156 * Ⲇ, Ⲇ * 172.50003051757812, 164.44886779785156 * Ⲇ, Ⲇ * 163.00003051757812, 146.94886779785156 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃⵠ]);
		return ⲆⲆ
	}

	function ⵠᐃⲆΔᐃⲆⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 247 * Ⲇ;
		ⲆⲆ.height = 247 * Ⲇ;
		ᐃ.translate(0, Ⲇ * ᐃⵠᐃᐃᐃ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠⵠⵠΔ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 150, 62 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 151.5, Ⲇ * 71.5, 149 * Ⲇ, Ⲇ * 70, 153 * Ⲇ, Ⲇ * 81);
		ᐃ.bezierCurveTo(Ⲇ * 158, Ⲇ * 73.5, Ⲇ * 158, 73.5 * Ⲇ, 163 * Ⲇ, 66 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(164 * Ⲇ, Ⲇ * 171);
		ᐃ.bezierCurveTo(149 * Ⲇ, Ⲇ * 159, Ⲇ * 156.5, 165 * Ⲇ, Ⲇ * 149, 159 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 149, 167 * Ⲇ, Ⲇ * 149, 170 * Ⲇ, 152 * Ⲇ, Ⲇ * 178);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 132, 95 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 154, Ⲇ * 102, Ⲇ * 154, Ⲇ * 126, Ⲇ * 137, Ⲇ * 139);
		ᐃ.bezierCurveTo(113 * Ⲇ, Ⲇ * 152, 89 * Ⲇ, 136 * Ⲇ, Ⲇ * 80, 121 * Ⲇ);
		ᐃ.bezierCurveTo(57 * Ⲇ, 89 * Ⲇ, Ⲇ * 69, Ⲇ * 63, 79 * Ⲇ, Ⲇ * 52);
		ᐃ.bezierCurveTo(110 * Ⲇ, 20 * Ⲇ, Ⲇ * 139, 21 * Ⲇ, 150 * Ⲇ, Ⲇ * 25);
		ᐃ.bezierCurveTo(197 * Ⲇ, Ⲇ * 36, Ⲇ * 221, Ⲇ * 67, 226 * Ⲇ, 90 * Ⲇ);
		ᐃ.bezierCurveTo(234 * Ⲇ, 134 * Ⲇ, 214 * Ⲇ, Ⲇ * 177, 195 * Ⲇ, Ⲇ * 197);
		ᐃ.bezierCurveTo(Ⲇ * 144, Ⲇ * 242, 79 * Ⲇ, 216 * Ⲇ, Ⲇ * 58, 206 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⵠⵠᐃᐃΔ, Ⲇ * 174, 20 * Ⲇ, Ⲇ * 134, Ⲇ * 23, 107 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 26, Ⲇ * 78, Ⲇ * 33, Ⲇ * 60, 38 * Ⲇ, 43 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 42, Ⲇ * 32, 47 * Ⲇ, Ⲇ * 32, Ⲇ * 50, 36 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 54, Ⲇ * 37, 50 * Ⲇ, Ⲇ * 52, 44 * Ⲇ, Ⲇ * 87);
		ᐃ.bezierCurveTo(Ⲇ * 40, Ⲇ * 115, Ⲇ * 46, 142 * Ⲇ, Ⲇ * 57, Ⲇ * 158);
		ᐃ.bezierCurveTo(Ⲇ * 76, Ⲇ * 189, Ⲇ * 129, 182 * Ⲇ, Ⲇ * 152, Ⲇ * 173);
		ᐃ.bezierCurveTo(186 * Ⲇ, Ⲇ * 156, Ⲇ * 191, 106 * Ⲇ, Ⲇ * 176, 85 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 159, Ⲇ * 61, 132 * Ⲇ, Ⲇ * 62, Ⲇ * 122, Ⲇ * 66);
		ᐃ.bezierCurveTo(108 * Ⲇ, 74 * Ⲇ, 108 * Ⲇ, 89 * Ⲇ, Ⲇ * 116, Ⲇ * 90);
		ᐃ.bezierCurveTo(123 * Ⲇ, Ⲇ * 92, 130 * Ⲇ, 93 * Ⲇ, Ⲇ * 131, Ⲇ * 94);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ]);
		ᐃ.translate(0, Ⲇ * -ᐃᐃⵠⵠΔ);
		ᐃ.globalAlpha = ΔⲆΔᐃ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(150 * Ⲇ, 62 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 151.5, 71.5 * Ⲇ, 149 * Ⲇ, 70 * Ⲇ, Ⲇ * 153, 81 * Ⲇ);
		ᐃ.bezierCurveTo(158 * Ⲇ, Ⲇ * 73.5, Ⲇ * 158, Ⲇ * 73.5, 163 * Ⲇ, Ⲇ * 66);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 164, Ⲇ * 171);
		ᐃ.bezierCurveTo(149 * Ⲇ, 159 * Ⲇ, 156.5 * Ⲇ, 165 * Ⲇ, 149 * Ⲇ, Ⲇ * 159);
		ᐃ.bezierCurveTo(149 * Ⲇ, 167 * Ⲇ, Ⲇ * 149, 170 * Ⲇ, Ⲇ * 152, Ⲇ * 178);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 132, Ⲇ * 95);
		ᐃ.bezierCurveTo(Ⲇ * 154, Ⲇ * 102, 154 * Ⲇ, 126 * Ⲇ, Ⲇ * 137, 139 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 113, 152 * Ⲇ, 89 * Ⲇ, Ⲇ * 136, 80 * Ⲇ, 121 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 57, Ⲇ * 89, 69 * Ⲇ, Ⲇ * 63, Ⲇ * 79, 52 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 110, 20 * Ⲇ, Ⲇ * 139, Ⲇ * 21, Ⲇ * 150, Ⲇ * 25);
		ᐃ.bezierCurveTo(197 * Ⲇ, 36 * Ⲇ, Ⲇ * 221, 67 * Ⲇ, 226 * Ⲇ, Ⲇ * 90);
		ᐃ.bezierCurveTo(234 * Ⲇ, Ⲇ * 134, 214 * Ⲇ, Ⲇ * 177, 195 * Ⲇ, Ⲇ * 197);
		ᐃ.bezierCurveTo(Ⲇ * 144, Ⲇ * 242, 79 * Ⲇ, 216 * Ⲇ, 58 * Ⲇ, 206 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ΔⵠⲆⵠⵠⲆΔ, Ⲇ * 174, 20 * Ⲇ, Ⲇ * 134, 23 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(26 * Ⲇ, 78 * Ⲇ, Ⲇ * 33, Ⲇ * 60, Ⲇ * 38, Ⲇ * 43);
		ᐃ.bezierCurveTo(Ⲇ * 42, 32 * Ⲇ, Ⲇ * 47, 32 * Ⲇ, 50 * Ⲇ, 36 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 54, Ⲇ * 37, Ⲇ * 50, Ⲇ * 52, 44 * Ⲇ, 87 * Ⲇ);
		ᐃ.bezierCurveTo(40 * Ⲇ, Ⲇ * 115, Ⲇ * 46, Ⲇ * 142, 57 * Ⲇ, Ⲇ * 158);
		ᐃ.bezierCurveTo(Ⲇ * 76, Ⲇ * 189, Ⲇ * 129, 182 * Ⲇ, 152 * Ⲇ, 173 * Ⲇ);
		ᐃ.bezierCurveTo(186 * Ⲇ, Ⲇ * 156, Ⲇ * 191, Ⲇ * 106, 176 * Ⲇ, 85 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 159, Ⲇ * 61, 132 * Ⲇ, 62 * Ⲇ, 122 * Ⲇ, 66 * Ⲇ);
		ᐃ.bezierCurveTo(108 * Ⲇ, 74 * Ⲇ, 108 * Ⲇ, Ⲇ * 89, 116 * Ⲇ, Ⲇ * 90);
		ᐃ.bezierCurveTo(Ⲇ * 123, Ⲇ * 92, 130 * Ⲇ, Ⲇ * 93, 131 * Ⲇ, Ⲇ * 94);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ], ᐃⲆ[ᐃΔⲆⵠ], ᐃΔᐃⲆⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(137 * Ⲇ, 137 * Ⲇ);
		ᐃ.bezierCurveTo(145 * Ⲇ, Ⲇ * 125, Ⲇ * 138, Ⲇ * 108, Ⲇ * 123, 104 * Ⲇ);
		ᐃ.bezierCurveTo(81 * Ⲇ, Ⲇ * 101, Ⲇ * 88, Ⲇ * 77, 98 * Ⲇ, 65 * Ⲇ);
		ᐃ.bezierCurveTo(117 * Ⲇ, 38 * Ⲇ, 138 * Ⲇ, 39 * Ⲇ, Ⲇ * 165, Ⲇ * 52);
		ᐃ.bezierCurveTo(197 * Ⲇ, Ⲇ * 72, Ⲇ * 207, 111 * Ⲇ, 197 * Ⲇ, Ⲇ * 140);
		ᐃ.bezierCurveTo(Ⲇ * 182, Ⲇ * 180, 161 * Ⲇ, 197 * Ⲇ, Ⲇ * 112, 194 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 58, 194 * Ⲇ, 37 * Ⲇ, 170 * Ⲇ, 34 * Ⲇ, 142 * Ⲇ);
		ᐃ.bezierCurveTo(29 * Ⲇ, Ⲇ * 102, 40 * Ⲇ, Ⲇ * 63, 51 * Ⲇ, 45 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 43, Ⲇ * 78, 41 * Ⲇ, Ⲇ * 103, 43 * Ⲇ, Ⲇ * 122);
		ᐃ.bezierCurveTo(51 * Ⲇ, Ⲇ * 158, Ⲇ * 63, Ⲇ * 174, Ⲇ * 95, 179 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 129, Ⲇ * 186, Ⲇ * 169, 172 * Ⲇ, 177 * Ⲇ, 144 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 197, Ⲇ * 105, Ⲇ * 172, 76 * Ⲇ, 160 * Ⲇ, Ⲇ * 71);
		ᐃ.bezierCurveTo(Ⲇ * 125, 52 * Ⲇ, Ⲇ * 111, 73 * Ⲇ, 111 * Ⲇ, 81 * Ⲇ);
		ᐃ.bezierCurveTo(106 * Ⲇ, Ⲇ * 93, Ⲇ * 140, Ⲇ * 92, Ⲇ * 147, Ⲇ * 107);
		ᐃ.bezierCurveTo(Ⲇ * 153, Ⲇ * 128, 140 * Ⲇ, Ⲇ * 135, Ⲇ * 137, Ⲇ * 139);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠᐃⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(132 * Ⲇ, Ⲇ * 95);
		ᐃ.bezierCurveTo(154 * Ⲇ, Ⲇ * 102, Ⲇ * 154, Ⲇ * 126, Ⲇ * 137, 139 * Ⲇ);
		ᐃ.bezierCurveTo(113 * Ⲇ, Ⲇ * 152, 89 * Ⲇ, 136 * Ⲇ, Ⲇ * 80, Ⲇ * 121);
		ᐃ.bezierCurveTo(Ⲇ * 57, Ⲇ * 89, 69 * Ⲇ, Ⲇ * 63, Ⲇ * 79, 52 * Ⲇ);
		ᐃ.bezierCurveTo(110 * Ⲇ, ⵠΔⲆΔⵠ * Ⲇ, 139 * Ⲇ, 21 * Ⲇ, 150 * Ⲇ, 25 * Ⲇ);
		ᐃ.bezierCurveTo(197 * Ⲇ, Ⲇ * 36, Ⲇ * 221, 67 * Ⲇ, 226 * Ⲇ, 90 * Ⲇ);
		ᐃ.bezierCurveTo(234 * Ⲇ, Ⲇ * 134, Ⲇ * 214, Ⲇ * 177, Ⲇ * 195, Ⲇ * 197);
		ᐃ.bezierCurveTo(Ⲇ * 144, Ⲇ * 242, Ⲇ * 79, Ⲇ * 216, 58 * Ⲇ, Ⲇ * 206);
		ᐃ.bezierCurveTo(Ⲇ * ᐃΔΔΔⵠ, 174 * Ⲇ, ΔⲆᐃⲆⲆ * Ⲇ, 134 * Ⲇ, Ⲇ * 23, Ⲇ * 107);
		ᐃ.bezierCurveTo(Ⲇ * 26, Ⲇ * 78, 33 * Ⲇ, Ⲇ * 60, 38 * Ⲇ, 43 * Ⲇ);
		ᐃ.bezierCurveTo(42 * Ⲇ, 32 * Ⲇ, Ⲇ * 47, 32 * Ⲇ, Ⲇ * 50, Ⲇ * 36);
		ᐃ.bezierCurveTo(Ⲇ * 54, Ⲇ * 37, Ⲇ * 50, Ⲇ * 52, 44 * Ⲇ, 87 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 40, Ⲇ * 115, Ⲇ * 46, Ⲇ * 142, Ⲇ * 57, 158 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 76, Ⲇ * 189, Ⲇ * 129, 182 * Ⲇ, Ⲇ * 152, Ⲇ * 173);
		ᐃ.bezierCurveTo(186 * Ⲇ, 156 * Ⲇ, Ⲇ * 191, Ⲇ * 106, Ⲇ * 176, Ⲇ * 85);
		ᐃ.bezierCurveTo(159 * Ⲇ, Ⲇ * 61, 132 * Ⲇ, 62 * Ⲇ, 122 * Ⲇ, Ⲇ * 66);
		ᐃ.bezierCurveTo(108 * Ⲇ, Ⲇ * 74, 108 * Ⲇ, 89 * Ⲇ, Ⲇ * 116, 90 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 123, Ⲇ * 92, Ⲇ * 130, 93 * Ⲇ, Ⲇ * 131, Ⲇ * 94);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 82, Ⲇ * 63);
		ᐃ.bezierCurveTo(Ⲇ * 91, Ⲇ * 64, Ⲇ * 96, 62 * Ⲇ, 98 * Ⲇ, Ⲇ * 53);
		ᐃ.bezierCurveTo(91 * Ⲇ, 45 * Ⲇ, Ⲇ * 85, 42 * Ⲇ, Ⲇ * 78, Ⲇ * 41);
		ᐃ.bezierCurveTo(81 * Ⲇ, Ⲇ * 51, Ⲇ * 82, Ⲇ * 57, Ⲇ * 82, Ⲇ * 63);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⵠⲆ], ᐃⲆ[ᐃΔⵠΔᐃ], 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 148, Ⲇ * 40);
		ᐃ.bezierCurveTo(Ⲇ * 140, 52 * Ⲇ, 131 * Ⲇ, Ⲇ * 51, Ⲇ * 123, Ⲇ * 43);
		ᐃ.bezierCurveTo(123 * Ⲇ, 25 * Ⲇ, 129 * Ⲇ, ΔᐃⲆⵠΔᐃᐃ * Ⲇ, Ⲇ * 134, ΔΔΔⲆΔ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 138, 35 * Ⲇ, Ⲇ * 142, Ⲇ * 31, Ⲇ * 148, Ⲇ * 40);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆⵠⲆ], ᐃⲆ[ΔΔⵠΔ], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 189, Ⲇ * 43);
		ᐃ.bezierCurveTo(Ⲇ * 191, Ⲇ * 54, 196 * Ⲇ, Ⲇ * 58, Ⲇ * 205, 59 * Ⲇ);
		ᐃ.bezierCurveTo(211 * Ⲇ, Ⲇ * 42, Ⲇ * 214, 37 * Ⲇ, Ⲇ * 216, Ⲇ * 31);
		ᐃ.bezierCurveTo(Ⲇ * 202, 34 * Ⲇ, Ⲇ * 195, 39 * Ⲇ, Ⲇ * 190, Ⲇ * 43);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 216, 98 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 219, 105 * Ⲇ, 225 * Ⲇ, 107 * Ⲇ, Ⲇ * 230, 109 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 227, Ⲇ * 113, 221 * Ⲇ, Ⲇ * 115, Ⲇ * 215, Ⲇ * 115);
		ᐃ.bezierCurveTo(Ⲇ * 208, Ⲇ * 109, Ⲇ * 211, Ⲇ * 101, 216 * Ⲇ, 98 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 180, 85 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 193, Ⲇ * 86, Ⲇ * 196, Ⲇ * 98, 191 * Ⲇ, 108 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 179, Ⲇ * 112, 167 * Ⲇ, 113 * Ⲇ, 155 * Ⲇ, Ⲇ * 111);
		ᐃ.bezierCurveTo(Ⲇ * 169, 100 * Ⲇ, 176 * Ⲇ, Ⲇ * 96, Ⲇ * 180, 85 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆᐃΔ], ᐃⲆ[5], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 96, 114 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 102, 109 * Ⲇ, 112 * Ⲇ, 110 * Ⲇ, 114 * Ⲇ, Ⲇ * 118);
		ᐃ.bezierCurveTo(111 * Ⲇ, 134 * Ⲇ, 102 * Ⲇ, Ⲇ * 143, 95 * Ⲇ, Ⲇ * 147);
		ᐃ.bezierCurveTo(Ⲇ * 98, Ⲇ * 123, Ⲇ * 97, 119 * Ⲇ, 96 * Ⲇ, 115 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 79, Ⲇ * 92);
		ᐃ.bezierCurveTo(86 * Ⲇ, Ⲇ * 95, 89 * Ⲇ, Ⲇ * 102, 83 * Ⲇ, Ⲇ * 111);
		ᐃ.bezierCurveTo(Ⲇ * 70, Ⲇ * 110, Ⲇ * 61, 107 * Ⲇ, Ⲇ * 54, Ⲇ * ᐃᐃⲆⵠΔ);
		ᐃ.bezierCurveTo(70 * Ⲇ, Ⲇ * 97, 70 * Ⲇ, 95 * Ⲇ, Ⲇ * 78, 92 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆᐃΔ], ᐃⲆ[ΔΔⵠΔ], 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 39, 130 * Ⲇ);
		ᐃ.bezierCurveTo(37 * Ⲇ, 141 * Ⲇ, 41 * Ⲇ, Ⲇ * 143, 48 * Ⲇ, Ⲇ * 144);
		ᐃ.bezierCurveTo(54 * Ⲇ, Ⲇ * 134, 55 * Ⲇ, 131 * Ⲇ, 56 * Ⲇ, Ⲇ * 123);
		ᐃ.bezierCurveTo(Ⲇ * 47, 129 * Ⲇ, 43 * Ⲇ, Ⲇ * 129, Ⲇ * 39, Ⲇ * 129);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 113, 189 * Ⲇ);
		ᐃ.bezierCurveTo(119 * Ⲇ, 201 * Ⲇ, Ⲇ * 127, 198 * Ⲇ, Ⲇ * 134, 192 * Ⲇ);
		ᐃ.bezierCurveTo(128 * Ⲇ, 175 * Ⲇ, Ⲇ * 128, Ⲇ * 173, 128 * Ⲇ, Ⲇ * 165);
		ᐃ.bezierCurveTo(Ⲇ * 117, Ⲇ * 176, Ⲇ * 116, Ⲇ * 182, 113 * Ⲇ, 187 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆᐃ], ᐃⲆ[ⵠΔΔΔ], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(74 * Ⲇ, 154 * Ⲇ);
		ᐃ.bezierCurveTo(76 * Ⲇ, 163 * Ⲇ, 76 * Ⲇ, 170 * Ⲇ, 75 * Ⲇ, 177 * Ⲇ);
		ᐃ.bezierCurveTo(68 * Ⲇ, 179 * Ⲇ, 66 * Ⲇ, 176 * Ⲇ, 63 * Ⲇ, Ⲇ * 171);
		ᐃ.bezierCurveTo(Ⲇ * 69, Ⲇ * 164, Ⲇ * 72, Ⲇ * 159, Ⲇ * 74, 154 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⲆΔⵠⵠᐃ], ⵠⵠΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(206 * Ⲇ, Ⲇ * 152);
		ᐃ.bezierCurveTo(198 * Ⲇ, 158 * Ⲇ, Ⲇ * 198, 166 * Ⲇ, 201 * Ⲇ, 171 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 209, Ⲇ * 170, Ⲇ * 221, 170 * Ⲇ, 226 * Ⲇ, Ⲇ * 172);
		ᐃ.bezierCurveTo(219 * Ⲇ, Ⲇ * 159, 210 * Ⲇ, 155 * Ⲇ, 207 * Ⲇ, Ⲇ * 153);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⵠⵠΔΔⲆ], Ⲇ * ⲆΔΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(181 * Ⲇ, Ⲇ * 184);
		ᐃ.bezierCurveTo(Ⲇ * 170, 184 * Ⲇ, Ⲇ * 167, 187 * Ⲇ, Ⲇ * 163, Ⲇ * 195);
		ᐃ.bezierCurveTo(171 * Ⲇ, 207 * Ⲇ, 183 * Ⲇ, 214 * Ⲇ, Ⲇ * 191, 217 * Ⲇ);
		ᐃ.bezierCurveTo(183 * Ⲇ, Ⲇ * 204, Ⲇ * 184, 196 * Ⲇ, 181 * Ⲇ, Ⲇ * 184);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 66, 199 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 73, Ⲇ * 197, Ⲇ * 78, Ⲇ * 199, 79 * Ⲇ, 206 * Ⲇ);
		ᐃ.bezierCurveTo(71 * Ⲇ, Ⲇ * 216, Ⲇ * 67, 221 * Ⲇ, 57 * Ⲇ, 223 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 182, 143 * Ⲇ);
		ᐃ.bezierCurveTo(183 * Ⲇ, 146 * Ⲇ, 183 * Ⲇ, 149 * Ⲇ, 179 * Ⲇ, Ⲇ * 152);
		ᐃ.bezierCurveTo(Ⲇ * 174, 146 * Ⲇ, 174 * Ⲇ, 146 * Ⲇ, Ⲇ * 169, 140 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(32 * Ⲇ, 159 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 45, 160 * Ⲇ, 48 * Ⲇ, Ⲇ * 164, 45 * Ⲇ, 175 * Ⲇ);
		ᐃ.bezierCurveTo(28 * Ⲇ, Ⲇ * 183, 25 * Ⲇ, 184 * Ⲇ, ⵠΔⲆⵠᐃΔⵠ * Ⲇ, 184 * Ⲇ);
		ᐃ.bezierCurveTo(30 * Ⲇ, Ⲇ * 170, 29 * Ⲇ, Ⲇ * 164, Ⲇ * 31, 160 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃΔⵠ], ᐃⲆ[ⲆⲆⵠᐃⲆ], Ⲇ * ⲆⲆⲆᐃᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 110, Ⲇ * 214);
		ᐃ.bezierCurveTo(Ⲇ * 106, Ⲇ * 212, 104 * Ⲇ, Ⲇ * 213, Ⲇ * 102, Ⲇ * 218);
		ᐃ.bezierCurveTo(Ⲇ * 104, 220 * Ⲇ, Ⲇ * 107, 222 * Ⲇ, Ⲇ * 110, 224 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 110.5, Ⲇ * 219, Ⲇ * 110.5, Ⲇ * 219, Ⲇ * 111, Ⲇ * 214);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 40, 52 * Ⲇ);
		ᐃ.bezierCurveTo(41 * Ⲇ, 57 * Ⲇ, 40 * Ⲇ, 61 * Ⲇ, 34 * Ⲇ, Ⲇ * 60);
		ᐃ.bezierCurveTo(Ⲇ * 31.5, 55 * Ⲇ, 31.5 * Ⲇ, Ⲇ * 55, 29 * Ⲇ, Ⲇ * 50);
		ᐃ.bezierCurveTo(34 * Ⲇ, Ⲇ * 50.5, 34 * Ⲇ, 50.5 * Ⲇ, Ⲇ * 39, 51 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⲆΔΔΔ], Ⲇ * ΔΔⵠΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 31, 81 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 37, 84 * Ⲇ, Ⲇ * 38, Ⲇ * 90, 34 * Ⲇ, 99 * Ⲇ);
		ᐃ.bezierCurveTo(23 * Ⲇ, Ⲇ * 97, ᐃΔⵠⲆⲆ * Ⲇ, 96 * Ⲇ, 16 * Ⲇ, 93 * Ⲇ);
		ᐃ.bezierCurveTo(24 * Ⲇ, 88 * Ⲇ, 28 * Ⲇ, 85 * Ⲇ, Ⲇ * 30, Ⲇ * 81);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆΔⲆ], ᐃⲆ[5], Ⲇ * 5);
		return ⲆⲆ
	}

	function ⲆⵠᐃⲆᐃⵠⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 33 * Ⲇ;
		ⲆⲆ.height = 35 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(12.75 * Ⲇ, Ⲇ * 7.1328125);
		ᐃ.bezierCurveTo(Ⲇ * 26.75, 8.1328125 * Ⲇ, 27.75 * Ⲇ, 14.1328125 * Ⲇ, 24.75 * Ⲇ, 23.1328125 * Ⲇ);
		ᐃ.bezierCurveTo(19.75 * Ⲇ, 31.1328125 * Ⲇ, Ⲇ * 15.75, Ⲇ * 33.1328125, Ⲇ * 6.75, 26.1328125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * .75, 19.1328125 * Ⲇ, 4.75 * Ⲇ, Ⲇ * 8.1328125, Ⲇ * 12.75, 7.1328125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⵠ]);
		return ⲆⲆ
	}

	function ⵠⵠΔᐃΔⲆⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 496;
		ⲆⲆ.height = Ⲇ * 520;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆⵠⲆ;
		ᐃ.translate(ⲆΔⵠΔ, ⵠΔΔΔⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(19.000030517578125 * Ⲇ, 256.67613983154297 * Ⲇ);
		ᐃ.bezierCurveTo(1.000030517578125 * Ⲇ, Ⲇ * 332.67613983154297, Ⲇ * 23.000030517578125, 404.67613983154297 * Ⲇ, 95.00003051757812 * Ⲇ, Ⲇ * 463.67613983154297);
		ᐃ.bezierCurveTo(Ⲇ * 128.00003051757812, 491.67613983154297 * Ⲇ, 165.00003051757812 * Ⲇ, 507.67613983154297 * Ⲇ, 194.00003051757812 * Ⲇ, 512.676139831543 * Ⲇ);
		ᐃ.bezierCurveTo(280.0000305175781 * Ⲇ, Ⲇ * 517.676139831543, 291.0000305175781 * Ⲇ, 516.676139831543 * Ⲇ, 342.0000305175781 * Ⲇ, Ⲇ * 497.67613983154297);
		ᐃ.bezierCurveTo(425.0000305175781 * Ⲇ, 454.67613983154297 * Ⲇ, 469.0000305175781 * Ⲇ, Ⲇ * 392.67613983154297, 468.0000305175781 * Ⲇ, Ⲇ * 300.67613983154297);
		ᐃ.bezierCurveTo(Ⲇ * 408.5000305175781, 365.17613983154297 * Ⲇ, 408.5000305175781 * Ⲇ, Ⲇ * 365.17613983154297, Ⲇ * 349.0000305175781, 429.67613983154297 * Ⲇ);
		ᐃ.bezierCurveTo(256.0000305175781 * Ⲇ, 473.67613983154297 * Ⲇ, 167.00003051757812 * Ⲇ, 459.67613983154297 * Ⲇ, 78.00003051757812 * Ⲇ, 384.67613983154297 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔᐃ]);
		ᐃ.globalAlpha = ⵠΔⲆ;
		ᐃ.translate(0, -10 * Ⲇ);
		ᐃΔⵠ(ᐃ, 247.01138305664062 * Ⲇ, Ⲇ * 249.3125, Ⲇ * 161.4465855941215);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⲆⵠ], ⵠΔᐃᐃⵠ, Ⲇ * ᐃⵠᐃⵠⵠ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆⵠΔⲆ;
		ᐃ.translate(ⵠΔΔᐃ, 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 65.00003051757812, Ⲇ * 263.4034118652344);
		ᐃ.bezierCurveTo(109.00003051757812 * Ⲇ, 160.40341186523438 * Ⲇ, Ⲇ * 185.00003051757812, 128.40341186523438 * Ⲇ, 222.00003051757812 * Ⲇ, 124.40341186523438 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 277.0000305175781, Ⲇ * 116.40341186523438, Ⲇ * 339.0000305175781, 134.40341186523438 * Ⲇ, Ⲇ * 379.0000305175781, 195.40341186523438 * Ⲇ);
		ᐃ.bezierCurveTo(409.0000305175781 * Ⲇ, 242.40341186523438 * Ⲇ, Ⲇ * 416.0000305175781, 256.4034118652344 * Ⲇ, Ⲇ * 428.0000305175781, Ⲇ * 304.4034118652344);
		ᐃ.bezierCurveTo(Ⲇ * 457.0000305175781, 203.40341186523438 * Ⲇ, Ⲇ * 449.0000305175781, 183.40341186523438 * Ⲇ, 438.0000305175781 * Ⲇ, 162.40341186523438 * Ⲇ);
		ᐃ.bezierCurveTo(381.0000305175781 * Ⲇ, 73.40341186523438 * Ⲇ, Ⲇ * 360.0000305175781, 66.40341186523438 * Ⲇ, 257.0000305175781 * Ⲇ, Ⲇ * 46.403411865234375);
		ᐃ.bezierCurveTo(Ⲇ * 191.00003051757812, 45.403411865234375 * Ⲇ, Ⲇ * 142.00003051757812, Ⲇ * 65.40341186523438, Ⲇ * 101.00003051757812, 115.40341186523438 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		var ⵠΔ = ΔⵠⵠΔΔⵠⵠⲆᐃ(Ⲇ, ᐃⲆ);
		ᐃ.drawImage(ⵠΔ, ⵠⲆΔⵠ, ⲆᐃⲆ);
		ᐃ.translate(0, Ⲇ * -ⲆΔⲆⲆⵠ);
		ᐃΔⵠ(ᐃ, 247.01138305664062 * Ⲇ, 249.3125 * Ⲇ, Ⲇ * 161.4465855941215);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], 12 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(Ⲇᐃⵠⵠ, 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(325.0113830566406 * Ⲇ, Ⲇ * 13.767059326171875);
		ᐃ.bezierCurveTo(349.5113830566406 * Ⲇ, Ⲇ * 25.767059326171875, 349.5113830566406 * Ⲇ, 25.767059326171875 * Ⲇ, Ⲇ * 374.0113830566406, Ⲇ * 37.767059326171875);
		ᐃ.bezierCurveTo(384.0113830566406 * Ⲇ, Ⲇ * 44.767059326171875, Ⲇ * 383.0113830566406, 50.767059326171875 * Ⲇ, 368.0113830566406 * Ⲇ, Ⲇ * 68.76705932617188);
		ᐃ.bezierCurveTo(352.5113830566406 * Ⲇ, Ⲇ * 91.26705932617188, 352.5113830566406 * Ⲇ, Ⲇ * 91.26705932617188, 337.0113830566406 * Ⲇ, Ⲇ * 113.76705932617188);
		ᐃ.bezierCurveTo(328.0113830566406 * Ⲇ, 119.76705932617188 * Ⲇ, 328.0113830566406 * Ⲇ, 121.76705932617188 * Ⲇ, 312.0113830566406 * Ⲇ, 112.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 303.0113830566406, Ⲇ * 108.26705932617188, Ⲇ * 303.0113830566406, 108.26705932617188 * Ⲇ, Ⲇ * 294.0113830566406, Ⲇ * 103.76705932617188);
		ᐃ.bezierCurveTo(287.0113830566406 * Ⲇ, 99.76705932617188 * Ⲇ, 293.0113830566406 * Ⲇ, 84.76705932617188 * Ⲇ, 297.0113830566406 * Ⲇ, 67.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(302.0113830566406 * Ⲇ, Ⲇ * 47.767059326171875, Ⲇ * 302.0113830566406, 47.767059326171875 * Ⲇ, 307.0113830566406 * Ⲇ, 27.767059326171875 * Ⲇ);
		ᐃ.bezierCurveTo(310.0113830566406 * Ⲇ, 15.767059326171875 * Ⲇ, 317.0113830566406 * Ⲇ, Ⲇ * 12.767059326171875, Ⲇ * 323.0113830566406, Ⲇ * 13.767059326171875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ], ᐃⲆ[0], Ⲇ * 12);
		ᐃ.globalAlpha = ΔⵠⲆ;
		ᐃ.translate(0, Ⲇ * -ⲆΔⲆⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(325.0113830566406 * Ⲇ, Ⲇ * 13.767059326171875);
		ᐃ.bezierCurveTo(349.5113830566406 * Ⲇ, Ⲇ * 25.767059326171875, 349.5113830566406 * Ⲇ, 25.767059326171875 * Ⲇ, Ⲇ * 374.0113830566406, Ⲇ * 37.767059326171875);
		ᐃ.bezierCurveTo(384.0113830566406 * Ⲇ, Ⲇ * 44.767059326171875, 383.0113830566406 * Ⲇ, Ⲇ * 50.767059326171875, 368.0113830566406 * Ⲇ, 68.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(352.5113830566406 * Ⲇ, Ⲇ * 91.26705932617188, 352.5113830566406 * Ⲇ, Ⲇ * 91.26705932617188, 337.0113830566406 * Ⲇ, 113.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(328.0113830566406 * Ⲇ, Ⲇ * 119.76705932617188, 328.0113830566406 * Ⲇ, Ⲇ * 121.76705932617188, 312.0113830566406 * Ⲇ, Ⲇ * 112.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 303.0113830566406, Ⲇ * 108.26705932617188, 303.0113830566406 * Ⲇ, Ⲇ * 108.26705932617188, 294.0113830566406 * Ⲇ, 103.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 287.0113830566406, Ⲇ * 99.76705932617188, Ⲇ * 293.0113830566406, 84.76705932617188 * Ⲇ, Ⲇ * 297.0113830566406, 67.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 302.0113830566406, Ⲇ * 47.767059326171875, Ⲇ * 302.0113830566406, 47.767059326171875 * Ⲇ, Ⲇ * 307.0113830566406, Ⲇ * 27.767059326171875);
		ᐃ.bezierCurveTo(310.0113830566406 * Ⲇ, Ⲇ * 15.767059326171875, Ⲇ * 317.0113830566406, Ⲇ * 12.767059326171875, Ⲇ * 323.0113830566406, Ⲇ * 13.767059326171875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[Δⵠᐃᐃ], ᐃⵠᐃⵠⵠ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ᐃⲆⲆ;
		ᐃ.translate(0, 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 403.0113830566406, Ⲇ * 89.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 413.0113830566406, 76.76705932617188 * Ⲇ, Ⲇ * 418.0113830566406, 79.76705932617188 * Ⲇ, Ⲇ * 428.0113830566406, 92.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 435.0113830566406, 99.76705932617188 * Ⲇ, 435.0113830566406 * Ⲇ, 99.76705932617188 * Ⲇ, 442.0113830566406 * Ⲇ, 106.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 450.0113830566406, Ⲇ * 116.76705932617188, Ⲇ * 445.0113830566406, 119.76705932617188 * Ⲇ, 433.0113830566406 * Ⲇ, 128.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(408.0113830566406 * Ⲇ, 146.26705932617188 * Ⲇ, Ⲇ * 408.0113830566406, 146.26705932617188 * Ⲇ, 383.0113830566406 * Ⲇ, 163.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 376.0113830566406, 166.76705932617188 * Ⲇ, 377.0113830566406 * Ⲇ, 165.76705932617188 * Ⲇ, 368.0113830566406 * Ⲇ, Ⲇ * 156.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 359.0113830566406, Ⲇ * 144.76705932617188, 359.0113830566406 * Ⲇ, Ⲇ * 142.76705932617188, Ⲇ * 367.0113830566406, Ⲇ * 133.76705932617188);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], Ⲇ * 12);
		ᐃ.globalAlpha = ᐃⲆΔ;
		ᐃ.translate(0, -ⵠⵠΔΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 403.0113830566406, Ⲇ * 89.76705932617188);
		ᐃ.bezierCurveTo(413.0113830566406 * Ⲇ, Ⲇ * 76.76705932617188, 418.0113830566406 * Ⲇ, Ⲇ * 79.76705932617188, Ⲇ * 428.0113830566406, Ⲇ * 92.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 435.0113830566406, Ⲇ * 99.76705932617188, 435.0113830566406 * Ⲇ, Ⲇ * 99.76705932617188, 442.0113830566406 * Ⲇ, 106.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 450.0113830566406, Ⲇ * 116.76705932617188, Ⲇ * 445.0113830566406, 119.76705932617188 * Ⲇ, Ⲇ * 433.0113830566406, 128.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(408.0113830566406 * Ⲇ, 146.26705932617188 * Ⲇ, 408.0113830566406 * Ⲇ, 146.26705932617188 * Ⲇ, Ⲇ * 383.0113830566406, Ⲇ * 163.76705932617188);
		ᐃ.bezierCurveTo(376.0113830566406 * Ⲇ, Ⲇ * 166.76705932617188, 377.0113830566406 * Ⲇ, 165.76705932617188 * Ⲇ, Ⲇ * 368.0113830566406, Ⲇ * 156.76705932617188);
		ᐃ.bezierCurveTo(359.0113830566406 * Ⲇ, 144.76705932617188 * Ⲇ, 359.0113830566406 * Ⲇ, Ⲇ * 142.76705932617188, 367.0113830566406 * Ⲇ, 133.76705932617188 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[2], ⲆⵠⵠⲆⲆ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(ᐃΔΔ, 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 228.01138305664062, Ⲇ * 1.767059326171875);
		ᐃ.bezierCurveTo(Ⲇ * 246.51138305664062, Ⲇ * 3.267059326171875, 246.51138305664062 * Ⲇ, 3.267059326171875 * Ⲇ, Ⲇ * 265.0113830566406, Ⲇ * 4.767059326171875);
		ᐃ.bezierCurveTo(273.0113830566406 * Ⲇ, 5.767059326171875 * Ⲇ, Ⲇ * 275.0113830566406, 11.767059326171875 * Ⲇ, 270.0113830566406 * Ⲇ, Ⲇ * 27.767059326171875);
		ᐃ.bezierCurveTo(Ⲇ * 264.0113830566406, 54.267059326171875 * Ⲇ, 264.0113830566406 * Ⲇ, Ⲇ * 54.267059326171875, Ⲇ * 258.0113830566406, Ⲇ * 80.76705932617188);
		ᐃ.bezierCurveTo(256.0113830566406 * Ⲇ, 92.76705932617188 * Ⲇ, Ⲇ * 256.0113830566406, 94.76705932617188 * Ⲇ, Ⲇ * 242.01138305664062, 93.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 226.01138305664062, 95.76705932617188 * Ⲇ, Ⲇ * 225.01138305664062, Ⲇ * 91.76705932617188, 225.01138305664062 * Ⲇ, Ⲇ * 80.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 223.51138305664062, Ⲇ * 50.267059326171875, 223.51138305664062 * Ⲇ, Ⲇ * 50.267059326171875, 222.01138305664062 * Ⲇ, Ⲇ * 19.767059326171875);
		ᐃ.bezierCurveTo(Ⲇ * 219.01138305664062, 8.767059326171875 * Ⲇ, 224.01138305664062 * Ⲇ, 4.767059326171875 * Ⲇ, 227.01138305664062 * Ⲇ, Ⲇ * 2.767059326171875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ΔΔⲆⲆ], Ⲇ * ᐃⲆⵠΔⵠ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(ⵠⵠΔᐃ, Ⲇ * -ΔⵠⲆᐃⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(228.01138305664062 * Ⲇ, Ⲇ * 1.767059326171875);
		ᐃ.bezierCurveTo(Ⲇ * 246.51138305664062, 3.267059326171875 * Ⲇ, 246.51138305664062 * Ⲇ, Ⲇ * 3.267059326171875, 265.0113830566406 * Ⲇ, 4.767059326171875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 273.0113830566406, Ⲇ * 5.767059326171875, Ⲇ * 275.0113830566406, Ⲇ * 11.767059326171875, Ⲇ * 270.0113830566406, 27.767059326171875 * Ⲇ);
		ᐃ.bezierCurveTo(264.0113830566406 * Ⲇ, Ⲇ * 54.267059326171875, Ⲇ * 264.0113830566406, 54.267059326171875 * Ⲇ, Ⲇ * 258.0113830566406, 80.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(256.0113830566406 * Ⲇ, Ⲇ * 92.76705932617188, 256.0113830566406 * Ⲇ, 94.76705932617188 * Ⲇ, Ⲇ * 242.01138305664062, 93.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(226.01138305664062 * Ⲇ, 95.76705932617188 * Ⲇ, 225.01138305664062 * Ⲇ, Ⲇ * 91.76705932617188, Ⲇ * 225.01138305664062, Ⲇ * 80.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 223.51138305664062, 50.267059326171875 * Ⲇ, 223.51138305664062 * Ⲇ, 50.267059326171875 * Ⲇ, Ⲇ * 222.01138305664062, 19.767059326171875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 219.01138305664062, Ⲇ * 8.767059326171875, 224.01138305664062 * Ⲇ, 4.767059326171875 * Ⲇ, 227.01138305664062 * Ⲇ, Ⲇ * 2.767059326171875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃΔⵠ], ᐃⲆ[2], Ⲇ * ⲆⵠⵠⲆⲆ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠΔΔ;
		ᐃ.translate(0, Ⲇ * ⲆΔⵠⵠᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(142.01138305664062 * Ⲇ, Ⲇ * 25.767059326171875);
		ᐃ.bezierCurveTo(Ⲇ * 158.51138305664062, 19.767059326171875 * Ⲇ, Ⲇ * 158.51138305664062, Ⲇ * 19.767059326171875, 175.01138305664062 * Ⲇ, Ⲇ * 13.767059326171875);
		ᐃ.bezierCurveTo(Ⲇ * 188.01138305664062, Ⲇ * 11.767059326171875, 188.01138305664062 * Ⲇ, 16.767059326171875 * Ⲇ, Ⲇ * 191.01138305664062, Ⲇ * 29.767059326171875);
		ᐃ.bezierCurveTo(197.01138305664062 * Ⲇ, 60.267059326171875 * Ⲇ, 197.01138305664062 * Ⲇ, 60.267059326171875 * Ⲇ, 203.01138305664062 * Ⲇ, Ⲇ * 90.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 206.01138305664062, 102.76705932617188 * Ⲇ, Ⲇ * 196.01138305664062, 99.76705932617188 * Ⲇ, Ⲇ * 181.01138305664062, 105.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 175.01138305664062, 108.76705932617188 * Ⲇ, Ⲇ * 172.01138305664062, Ⲇ * 104.76705932617188, Ⲇ * 164.01138305664062, 84.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 152.51138305664062, Ⲇ * 63.267059326171875, 152.51138305664062 * Ⲇ, 63.267059326171875 * Ⲇ, 141.01138305664062 * Ⲇ, 41.767059326171875 * Ⲇ);
		ᐃ.bezierCurveTo(138.01138305664062 * Ⲇ, 35.767059326171875 * Ⲇ, Ⲇ * 138.01138305664062, 29.767059326171875 * Ⲇ, Ⲇ * 141.01138305664062, 27.767059326171875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠᐃΔ], 12 * Ⲇ);
		ᐃ.globalAlpha = ⵠΔᐃ;
		ᐃ.translate(ⵠᐃⵠⵠ, Ⲇ * -ᐃᐃⲆΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 142.01138305664062, Ⲇ * 25.767059326171875);
		ᐃ.bezierCurveTo(Ⲇ * 158.51138305664062, 19.767059326171875 * Ⲇ, Ⲇ * 158.51138305664062, 19.767059326171875 * Ⲇ, 175.01138305664062 * Ⲇ, 13.767059326171875 * Ⲇ);
		ᐃ.bezierCurveTo(188.01138305664062 * Ⲇ, 11.767059326171875 * Ⲇ, 188.01138305664062 * Ⲇ, Ⲇ * 16.767059326171875, Ⲇ * 191.01138305664062, 29.767059326171875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 197.01138305664062, 60.267059326171875 * Ⲇ, 197.01138305664062 * Ⲇ, Ⲇ * 60.267059326171875, 203.01138305664062 * Ⲇ, Ⲇ * 90.76705932617188);
		ᐃ.bezierCurveTo(206.01138305664062 * Ⲇ, Ⲇ * 102.76705932617188, Ⲇ * 196.01138305664062, 99.76705932617188 * Ⲇ, Ⲇ * 181.01138305664062, Ⲇ * 105.76705932617188);
		ᐃ.bezierCurveTo(175.01138305664062 * Ⲇ, 108.76705932617188 * Ⲇ, 172.01138305664062 * Ⲇ, 104.76705932617188 * Ⲇ, 164.01138305664062 * Ⲇ, 84.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 152.51138305664062, Ⲇ * 63.267059326171875, Ⲇ * 152.51138305664062, Ⲇ * 63.267059326171875, Ⲇ * 141.01138305664062, 41.767059326171875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 138.01138305664062, Ⲇ * 35.767059326171875, Ⲇ * 138.01138305664062, 29.767059326171875 * Ⲇ, Ⲇ * 141.01138305664062, 27.767059326171875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔⵠ], ᐃⲆ[2], ᐃⵠᐃΔⲆ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ΔΔⲆΔ;
		ᐃ.translate(ⲆⲆᐃΔ, ΔΔⵠΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 70.01138305664062, Ⲇ * 76.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 83.01138305664062, Ⲇ * 64.26705932617188, 83.01138305664062 * Ⲇ, Ⲇ * 64.26705932617188, Ⲇ * 96.01138305664062, 51.767059326171875 * Ⲇ);
		ᐃ.bezierCurveTo(104.01138305664062 * Ⲇ, 44.767059326171875 * Ⲇ, Ⲇ * 110.01138305664062, 51.767059326171875 * Ⲇ, 119.01138305664062 * Ⲇ, Ⲇ * 66.76705932617188);
		ᐃ.bezierCurveTo(135.01138305664062 * Ⲇ, Ⲇ * 88.26705932617188, 135.01138305664062 * Ⲇ, 88.26705932617188 * Ⲇ, Ⲇ * 151.01138305664062, 109.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 157.01138305664062, 119.76705932617188 * Ⲇ, 153.01138305664062 * Ⲇ, 122.76705932617188 * Ⲇ, Ⲇ * 147.01138305664062, Ⲇ * 129.76705932617188);
		ᐃ.bezierCurveTo(138.01138305664062 * Ⲇ, Ⲇ * 140.76705932617188, 136.01138305664062 * Ⲇ, 140.76705932617188 * Ⲇ, 122.01138305664062 * Ⲇ, Ⲇ * 127.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 99.51138305664062, 110.26705932617188 * Ⲇ, 99.51138305664062 * Ⲇ, Ⲇ * 110.26705932617188, Ⲇ * 77.01138305664062, Ⲇ * 92.76705932617188);
		ᐃ.bezierCurveTo(66.01138305664062 * Ⲇ, 83.76705932617188 * Ⲇ, Ⲇ * 66.01138305664062, 82.76705932617188 * Ⲇ, Ⲇ * 69.01138305664062, 78.76705932617188 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔᐃ], ᐃⲆ[0], Ⲇ * ᐃᐃᐃΔᐃΔΔ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, -5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(70.01138305664062 * Ⲇ, Ⲇ * 76.76705932617188);
		ᐃ.bezierCurveTo(83.01138305664062 * Ⲇ, Ⲇ * 64.26705932617188, 83.01138305664062 * Ⲇ, 64.26705932617188 * Ⲇ, 96.01138305664062 * Ⲇ, Ⲇ * 51.767059326171875);
		ᐃ.bezierCurveTo(Ⲇ * 104.01138305664062, Ⲇ * 44.767059326171875, 110.01138305664062 * Ⲇ, 51.767059326171875 * Ⲇ, 119.01138305664062 * Ⲇ, Ⲇ * 66.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 135.01138305664062, 88.26705932617188 * Ⲇ, Ⲇ * 135.01138305664062, Ⲇ * 88.26705932617188, 151.01138305664062 * Ⲇ, Ⲇ * 109.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 157.01138305664062, Ⲇ * 119.76705932617188, Ⲇ * 153.01138305664062, Ⲇ * 122.76705932617188, Ⲇ * 147.01138305664062, 129.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 138.01138305664062, Ⲇ * 140.76705932617188, 136.01138305664062 * Ⲇ, 140.76705932617188 * Ⲇ, Ⲇ * 122.01138305664062, Ⲇ * 127.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 99.51138305664062, 110.26705932617188 * Ⲇ, 99.51138305664062 * Ⲇ, 110.26705932617188 * Ⲇ, Ⲇ * 77.01138305664062, 92.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(66.01138305664062 * Ⲇ, Ⲇ * 83.76705932617188, 66.01138305664062 * Ⲇ, 82.76705932617188 * Ⲇ, Ⲇ * 69.01138305664062, 78.76705932617188 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔⵠ], ᐃⲆ[ⲆⲆΔΔ], ᐃⵠᐃⵠⵠ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(0, Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(33.011383056640625 * Ⲇ, 126.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(22.011383056640625 * Ⲇ, Ⲇ * 149.76705932617188, Ⲇ * 22.011383056640625, 149.76705932617188 * Ⲇ, 11.011383056640625 * Ⲇ, Ⲇ * 172.76705932617188);
		ᐃ.bezierCurveTo(7.011383056640625 * Ⲇ, Ⲇ * 184.76705932617188, Ⲇ * 11.011383056640625, Ⲇ * 189.76705932617188, 36.011383056640625 * Ⲇ, Ⲇ * 195.76705932617188);
		ᐃ.bezierCurveTo(61.011383056640625 * Ⲇ, Ⲇ * 202.26705932617188, 61.011383056640625 * Ⲇ, Ⲇ * 202.26705932617188, 86.01138305664062 * Ⲇ, Ⲇ * 208.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 100.01138305664062, 214.76705932617188 * Ⲇ, Ⲇ * 102.01138305664062, Ⲇ * 203.76705932617188, Ⲇ * 109.01138305664062, 189.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(117.01138305664062 * Ⲇ, 171.76705932617188 * Ⲇ, 116.01138305664062 * Ⲇ, Ⲇ * 166.76705932617188, 97.01138305664062 * Ⲇ, 156.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(74.01138305664062 * Ⲇ, 140.76705932617188 * Ⲇ, Ⲇ * 74.01138305664062, 140.76705932617188 * Ⲇ, Ⲇ * 51.011383056640625, 124.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 42.011383056640625, 118.76705932617188 * Ⲇ, Ⲇ * 37.011383056640625, 119.76705932617188 * Ⲇ, Ⲇ * 33.011383056640625, 126.76705932617188 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ], ᐃⲆ[0], Ⲇ * 12);
		ᐃ.globalAlpha = ⲆΔᐃ;
		ᐃ.translate(ⵠⲆⵠ, Ⲇ * -5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 33.011383056640625, Ⲇ * 126.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 22.011383056640625, Ⲇ * 149.76705932617188, Ⲇ * 22.011383056640625, Ⲇ * 149.76705932617188, Ⲇ * 11.011383056640625, Ⲇ * 172.76705932617188);
		ᐃ.bezierCurveTo(7.011383056640625 * Ⲇ, Ⲇ * 184.76705932617188, Ⲇ * 11.011383056640625, Ⲇ * 189.76705932617188, 36.011383056640625 * Ⲇ, Ⲇ * 195.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 61.011383056640625, 202.26705932617188 * Ⲇ, 61.011383056640625 * Ⲇ, 202.26705932617188 * Ⲇ, Ⲇ * 86.01138305664062, 208.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 100.01138305664062, Ⲇ * 214.76705932617188, Ⲇ * 102.01138305664062, 203.76705932617188 * Ⲇ, Ⲇ * 109.01138305664062, Ⲇ * 189.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 117.01138305664062, Ⲇ * 171.76705932617188, 116.01138305664062 * Ⲇ, 166.76705932617188 * Ⲇ, 97.01138305664062 * Ⲇ, Ⲇ * 156.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 74.01138305664062, 140.76705932617188 * Ⲇ, 74.01138305664062 * Ⲇ, Ⲇ * 140.76705932617188, 51.011383056640625 * Ⲇ, 124.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(42.011383056640625 * Ⲇ, 118.76705932617188 * Ⲇ, 37.011383056640625 * Ⲇ, 119.76705932617188 * Ⲇ, Ⲇ * 33.011383056640625, 126.76705932617188 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔⵠ], ᐃⲆ[ΔΔᐃᐃ], Ⲇ * ΔⲆΔΔᐃⲆⵠ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠⵠⵠΔ;
		ᐃ.translate(ⵠᐃⵠⵠ, Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 13.011383056640625, Ⲇ * 229.76705932617188);
		ᐃ.bezierCurveTo(45.511383056640625 * Ⲇ, 233.76705932617188 * Ⲇ, Ⲇ * 45.511383056640625, Ⲇ * 233.76705932617188, 78.01138305664062 * Ⲇ, 237.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(92.01138305664062 * Ⲇ, 239.76705932617188 * Ⲇ, 92.01138305664062 * Ⲇ, 246.76705932617188 * Ⲇ, Ⲇ * 91.01138305664062, 257.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 92.01138305664062, Ⲇ * 275.7670593261719, 91.01138305664062 * Ⲇ, Ⲇ * 274.7670593261719, 68.01138305664062 * Ⲇ, Ⲇ * 276.7670593261719);
		ᐃ.bezierCurveTo(Ⲇ * 42.511383056640625, Ⲇ * 279.7670593261719, Ⲇ * 42.511383056640625, 279.7670593261719 * Ⲇ, 17.011383056640625 * Ⲇ, 282.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(2.011383056640625 * Ⲇ, Ⲇ * 282.7670593261719, Ⲇ * 3.011383056640625, Ⲇ * 276.7670593261719, Ⲇ * 2.011383056640625, 260.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 2.011383056640625, Ⲇ * 231.76705932617188, 4.011383056640625 * Ⲇ, 232.76705932617188 * Ⲇ, Ⲇ * 11.011383056640625, Ⲇ * 230.76705932617188);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], 12 * Ⲇ);
		ᐃ.globalAlpha = ᐃⲆⲆ;
		ᐃ.translate(0, Ⲇ * -5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 13.011383056640625, Ⲇ * 229.76705932617188);
		ᐃ.bezierCurveTo(45.511383056640625 * Ⲇ, 233.76705932617188 * Ⲇ, 45.511383056640625 * Ⲇ, Ⲇ * 233.76705932617188, 78.01138305664062 * Ⲇ, Ⲇ * 237.76705932617188);
		ᐃ.bezierCurveTo(92.01138305664062 * Ⲇ, 239.76705932617188 * Ⲇ, 92.01138305664062 * Ⲇ, Ⲇ * 246.76705932617188, 91.01138305664062 * Ⲇ, Ⲇ * 257.7670593261719);
		ᐃ.bezierCurveTo(Ⲇ * 92.01138305664062, Ⲇ * 275.7670593261719, Ⲇ * 91.01138305664062, 274.7670593261719 * Ⲇ, 68.01138305664062 * Ⲇ, 276.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(42.511383056640625 * Ⲇ, 279.7670593261719 * Ⲇ, Ⲇ * 42.511383056640625, Ⲇ * 279.7670593261719, 17.011383056640625 * Ⲇ, 282.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 2.011383056640625, Ⲇ * 282.7670593261719, 3.011383056640625 * Ⲇ, 276.7670593261719 * Ⲇ, Ⲇ * 2.011383056640625, 260.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 2.011383056640625, 231.76705932617188 * Ⲇ, 4.011383056640625 * Ⲇ, 232.76705932617188 * Ⲇ, 11.011383056640625 * Ⲇ, Ⲇ * 230.76705932617188);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆΔⲆ], ᐃⲆ[2], Ⲇ * 12);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠⲆⲆⲆ;
		ᐃ.translate(ⵠᐃⵠⵠ, ⵠᐃᐃⵠᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 97.01138305664062, Ⲇ * 329.7670593261719);
		ᐃ.bezierCurveTo(68.51138305664062 * Ⲇ, Ⲇ * 343.7670593261719, 68.51138305664062 * Ⲇ, 343.7670593261719 * Ⲇ, Ⲇ * 40.011383056640625, Ⲇ * 357.7670593261719);
		ᐃ.bezierCurveTo(Ⲇ * 29.011383056640625, Ⲇ * 360.7670593261719, 27.011383056640625 * Ⲇ, Ⲇ * 361.7670593261719, 20.011383056640625 * Ⲇ, 346.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 16.511383056640625, Ⲇ * 336.2670593261719, Ⲇ * 16.511383056640625, Ⲇ * 336.2670593261719, 13.011383056640625 * Ⲇ, Ⲇ * 325.7670593261719);
		ᐃ.bezierCurveTo(Ⲇ * 10.011383056640625, Ⲇ * 307.7670593261719, Ⲇ * 18.011383056640625, 312.7670593261719 * Ⲇ, Ⲇ * 34.011383056640625, 306.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 59.511383056640625, Ⲇ * 302.2670593261719, 59.511383056640625 * Ⲇ, Ⲇ * 302.2670593261719, 85.01138305664062 * Ⲇ, 297.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 97.01138305664062, Ⲇ * 294.7670593261719, 100.01138305664062 * Ⲇ, 297.7670593261719 * Ⲇ, 100.01138305664062 * Ⲇ, 307.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(105.01138305664062 * Ⲇ, Ⲇ * 326.7670593261719, Ⲇ * 103.01138305664062, Ⲇ * 325.7670593261719, Ⲇ * 97.01138305664062, 329.7670593261719 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ], ᐃⲆ[0], Ⲇ * ΔⲆΔΔᐃⲆⵠ);
		ᐃ.globalAlpha = ⲆⲆⲆᐃ;
		ᐃ.translate(0, -5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 97.01138305664062, 329.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(68.51138305664062 * Ⲇ, Ⲇ * 343.7670593261719, 68.51138305664062 * Ⲇ, Ⲇ * 343.7670593261719, 40.011383056640625 * Ⲇ, Ⲇ * 357.7670593261719);
		ᐃ.bezierCurveTo(Ⲇ * 29.011383056640625, 360.7670593261719 * Ⲇ, Ⲇ * 27.011383056640625, 361.7670593261719 * Ⲇ, 20.011383056640625 * Ⲇ, Ⲇ * 346.7670593261719);
		ᐃ.bezierCurveTo(16.511383056640625 * Ⲇ, 336.2670593261719 * Ⲇ, 16.511383056640625 * Ⲇ, Ⲇ * 336.2670593261719, 13.011383056640625 * Ⲇ, Ⲇ * 325.7670593261719);
		ᐃ.bezierCurveTo(Ⲇ * 10.011383056640625, Ⲇ * 307.7670593261719, Ⲇ * 18.011383056640625, 312.7670593261719 * Ⲇ, 34.011383056640625 * Ⲇ, Ⲇ * 306.7670593261719);
		ᐃ.bezierCurveTo(Ⲇ * 59.511383056640625, Ⲇ * 302.2670593261719, 59.511383056640625 * Ⲇ, 302.2670593261719 * Ⲇ, 85.01138305664062 * Ⲇ, Ⲇ * 297.7670593261719);
		ᐃ.bezierCurveTo(97.01138305664062 * Ⲇ, Ⲇ * 294.7670593261719, Ⲇ * 100.01138305664062, Ⲇ * 297.7670593261719, 100.01138305664062 * Ⲇ, 307.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 105.01138305664062, Ⲇ * 326.7670593261719, Ⲇ * 103.01138305664062, Ⲇ * 325.7670593261719, Ⲇ * 97.01138305664062, 329.7670593261719 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔᐃᐃⲆ], ᐃⲆ[2], Ⲇ * ᐃⵠⵠᐃⲆᐃⲆ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ΔⵠⲆ;
		ᐃ.translate(ⵠⲆⵠ, Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(394.0113830566406 * Ⲇ, Ⲇ * 181.76705932617188);
		ᐃ.bezierCurveTo(426.5113830566406 * Ⲇ, 166.76705932617188 * Ⲇ, 426.5113830566406 * Ⲇ, 166.76705932617188 * Ⲇ, Ⲇ * 459.0113830566406, 151.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 469.0113830566406, Ⲇ * 152.76705932617188, Ⲇ * 469.0113830566406, 155.76705932617188 * Ⲇ, 472.0113830566406 * Ⲇ, 165.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 476.0113830566406, 177.26705932617188 * Ⲇ, 476.0113830566406 * Ⲇ, 177.26705932617188 * Ⲇ, Ⲇ * 480.0113830566406, 188.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(483.0113830566406 * Ⲇ, 199.76705932617188 * Ⲇ, 480.0113830566406 * Ⲇ, 200.76705932617188 * Ⲇ, 460.0113830566406 * Ⲇ, 205.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(433.5113830566406 * Ⲇ, Ⲇ * 210.26705932617188, 433.5113830566406 * Ⲇ, Ⲇ * 210.26705932617188, 407.0113830566406 * Ⲇ, Ⲇ * 214.76705932617188);
		ᐃ.bezierCurveTo(395.0113830566406 * Ⲇ, Ⲇ * 218.76705932617188, 397.0113830566406 * Ⲇ, Ⲇ * 211.76705932617188, Ⲇ * 393.0113830566406, 202.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 387.0113830566406, 188.76705932617188 * Ⲇ, Ⲇ * 387.0113830566406, Ⲇ * 187.76705932617188, 394.0113830566406 * Ⲇ, Ⲇ * 181.76705932617188);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠⲆ], ᐃⲆ[Δⵠⵠ], Ⲇ * 12);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(ⵠⲆΔⵠ, Ⲇ * -5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 394.0113830566406, Ⲇ * 181.76705932617188);
		ᐃ.bezierCurveTo(426.5113830566406 * Ⲇ, Ⲇ * 166.76705932617188, 426.5113830566406 * Ⲇ, Ⲇ * 166.76705932617188, Ⲇ * 459.0113830566406, Ⲇ * 151.76705932617188);
		ᐃ.bezierCurveTo(469.0113830566406 * Ⲇ, 152.76705932617188 * Ⲇ, 469.0113830566406 * Ⲇ, Ⲇ * 155.76705932617188, Ⲇ * 472.0113830566406, 165.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(476.0113830566406 * Ⲇ, Ⲇ * 177.26705932617188, 476.0113830566406 * Ⲇ, 177.26705932617188 * Ⲇ, 480.0113830566406 * Ⲇ, 188.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(483.0113830566406 * Ⲇ, 199.76705932617188 * Ⲇ, 480.0113830566406 * Ⲇ, Ⲇ * 200.76705932617188, Ⲇ * 460.0113830566406, Ⲇ * 205.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 433.5113830566406, Ⲇ * 210.26705932617188, 433.5113830566406 * Ⲇ, 210.26705932617188 * Ⲇ, Ⲇ * 407.0113830566406, Ⲇ * 214.76705932617188);
		ᐃ.bezierCurveTo(395.0113830566406 * Ⲇ, 218.76705932617188 * Ⲇ, Ⲇ * 397.0113830566406, Ⲇ * 211.76705932617188, 393.0113830566406 * Ⲇ, Ⲇ * 202.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 387.0113830566406, 188.76705932617188 * Ⲇ, Ⲇ * 387.0113830566406, Ⲇ * 187.76705932617188, Ⲇ * 394.0113830566406, Ⲇ * 181.76705932617188);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[2], Ⲇ * 12);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆΔᐃ;
		ᐃ.translate(0, ⵠⵠΔΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 411.0113830566406, 234.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 446.0113830566406, Ⲇ * 233.26705932617188, Ⲇ * 446.0113830566406, 233.26705932617188 * Ⲇ, 481.0113830566406 * Ⲇ, 231.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 491.0113830566406, 232.76705932617188 * Ⲇ, 493.0113830566406 * Ⲇ, 239.76705932617188 * Ⲇ, 491.0113830566406 * Ⲇ, Ⲇ * 251.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 490.0113830566406, 263.7670593261719 * Ⲇ, Ⲇ * 490.0113830566406, 263.7670593261719 * Ⲇ, 489.0113830566406 * Ⲇ, Ⲇ * 275.7670593261719);
		ᐃ.bezierCurveTo(Ⲇ * 487.0113830566406, Ⲇ * 283.7670593261719, Ⲇ * 483.0113830566406, Ⲇ * 284.7670593261719, Ⲇ * 464.0113830566406, 280.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 437.0113830566406, Ⲇ * 273.7670593261719, 437.0113830566406 * Ⲇ, Ⲇ * 273.7670593261719, Ⲇ * 410.0113830566406, Ⲇ * 266.7670593261719);
		ᐃ.bezierCurveTo(400.0113830566406 * Ⲇ, Ⲇ * 261.7670593261719, 401.0113830566406 * Ⲇ, Ⲇ * 259.7670593261719, Ⲇ * 402.0113830566406, Ⲇ * 249.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 401.0113830566406, Ⲇ * 237.76705932617188, 403.0113830566406 * Ⲇ, 235.76705932617188 * Ⲇ, Ⲇ * 408.0113830566406, 234.76705932617188 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], ᐃᐃⵠⲆⲆⲆⲆ * Ⲇ);
		ᐃ.globalAlpha = ᐃⲆΔ;
		ᐃ.translate(0, -5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 411.0113830566406, 234.76705932617188 * Ⲇ);
		ᐃ.bezierCurveTo(446.0113830566406 * Ⲇ, Ⲇ * 233.26705932617188, Ⲇ * 446.0113830566406, 233.26705932617188 * Ⲇ, 481.0113830566406 * Ⲇ, Ⲇ * 231.76705932617188);
		ᐃ.bezierCurveTo(Ⲇ * 491.0113830566406, Ⲇ * 232.76705932617188, Ⲇ * 493.0113830566406, 239.76705932617188 * Ⲇ, Ⲇ * 491.0113830566406, Ⲇ * 251.76705932617188);
		ᐃ.bezierCurveTo(490.0113830566406 * Ⲇ, Ⲇ * 263.7670593261719, Ⲇ * 490.0113830566406, Ⲇ * 263.7670593261719, 489.0113830566406 * Ⲇ, 275.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(487.0113830566406 * Ⲇ, Ⲇ * 283.7670593261719, Ⲇ * 483.0113830566406, 284.7670593261719 * Ⲇ, 464.0113830566406 * Ⲇ, Ⲇ * 280.7670593261719);
		ᐃ.bezierCurveTo(437.0113830566406 * Ⲇ, Ⲇ * 273.7670593261719, Ⲇ * 437.0113830566406, 273.7670593261719 * Ⲇ, 410.0113830566406 * Ⲇ, 266.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 400.0113830566406, 261.7670593261719 * Ⲇ, 401.0113830566406 * Ⲇ, 259.7670593261719 * Ⲇ, 402.0113830566406 * Ⲇ, Ⲇ * 249.76705932617188);
		ᐃ.bezierCurveTo(401.0113830566406 * Ⲇ, 237.76705932617188 * Ⲇ, Ⲇ * 403.0113830566406, Ⲇ * 235.76705932617188, 408.0113830566406 * Ⲇ, 234.76705932617188 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⵠⲆ], ᐃⲆ[2], 12 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(ⵠⵠΔᐃ, Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 400.0113830566406, Ⲇ * 290.7670593261719);
		ᐃ.bezierCurveTo(437.0113830566406 * Ⲇ, 301.2670593261719 * Ⲇ, Ⲇ * 437.0113830566406, 301.2670593261719 * Ⲇ, Ⲇ * 474.0113830566406, 311.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(484.0113830566406 * Ⲇ, 319.7670593261719 * Ⲇ, 481.0113830566406 * Ⲇ, 322.7670593261719 * Ⲇ, Ⲇ * 474.0113830566406, 335.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 465.5113830566406, Ⲇ * 354.7670593261719, 465.5113830566406 * Ⲇ, Ⲇ * 354.7670593261719, 457.0113830566406 * Ⲇ, 373.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 449.0113830566406, 386.7670593261719 * Ⲇ, 444.0113830566406 * Ⲇ, Ⲇ * 384.7670593261719, 427.0113830566406 * Ⲇ, Ⲇ * 370.7670593261719);
		ᐃ.bezierCurveTo(403.0113830566406 * Ⲇ, Ⲇ * 354.7670593261719, 403.0113830566406 * Ⲇ, Ⲇ * 354.7670593261719, 379.0113830566406 * Ⲇ, Ⲇ * 338.7670593261719);
		ᐃ.bezierCurveTo(371.0113830566406 * Ⲇ, Ⲇ * 327.7670593261719, Ⲇ * 373.0113830566406, Ⲇ * 323.7670593261719, Ⲇ * 377.0113830566406, Ⲇ * 313.7670593261719);
		ᐃ.bezierCurveTo(Ⲇ * 386.0113830566406, 292.7670593261719 * Ⲇ, Ⲇ * 393.0113830566406, 288.7670593261719 * Ⲇ, 398.0113830566406 * Ⲇ, 291.7670593261719 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[Ⲇᐃⵠⵠ], 12 * Ⲇ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, -5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(400.0113830566406 * Ⲇ, Ⲇ * 290.7670593261719);
		ᐃ.bezierCurveTo(437.0113830566406 * Ⲇ, 301.2670593261719 * Ⲇ, Ⲇ * 437.0113830566406, Ⲇ * 301.2670593261719, 474.0113830566406 * Ⲇ, 311.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(484.0113830566406 * Ⲇ, Ⲇ * 319.7670593261719, Ⲇ * 481.0113830566406, Ⲇ * 322.7670593261719, Ⲇ * 474.0113830566406, Ⲇ * 335.7670593261719);
		ᐃ.bezierCurveTo(Ⲇ * 465.5113830566406, Ⲇ * 354.7670593261719, 465.5113830566406 * Ⲇ, 354.7670593261719 * Ⲇ, Ⲇ * 457.0113830566406, Ⲇ * 373.7670593261719);
		ᐃ.bezierCurveTo(Ⲇ * 449.0113830566406, Ⲇ * 386.7670593261719, 444.0113830566406 * Ⲇ, 384.7670593261719 * Ⲇ, Ⲇ * 427.0113830566406, Ⲇ * 370.7670593261719);
		ᐃ.bezierCurveTo(403.0113830566406 * Ⲇ, 354.7670593261719 * Ⲇ, 403.0113830566406 * Ⲇ, 354.7670593261719 * Ⲇ, 379.0113830566406 * Ⲇ, 338.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 371.0113830566406, Ⲇ * 327.7670593261719, 373.0113830566406 * Ⲇ, Ⲇ * 323.7670593261719, 377.0113830566406 * Ⲇ, 313.7670593261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 386.0113830566406, 292.7670593261719 * Ⲇ, 393.0113830566406 * Ⲇ, Ⲇ * 288.7670593261719, 398.0113830566406 * Ⲇ, Ⲇ * 291.7670593261719);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃⵠΔⲆ], 12 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠⵠᐃ;
		ᐃ.translate(0, Ⲇ * ΔΔⵠΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 366.0113830566406, Ⲇ * 361.2216033935547);
		ᐃ.bezierCurveTo(393.0113830566406 * Ⲇ, 383.2216033935547 * Ⲇ, Ⲇ * 393.0113830566406, 383.2216033935547 * Ⲇ, Ⲇ * 420.0113830566406, Ⲇ * 405.2216033935547);
		ᐃ.bezierCurveTo(427.0113830566406 * Ⲇ, Ⲇ * 414.2216033935547, 425.0113830566406 * Ⲇ, Ⲇ * 417.2216033935547, Ⲇ * 413.0113830566406, Ⲇ * 428.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 405.5113830566406, 435.2216033935547 * Ⲇ, 405.5113830566406 * Ⲇ, Ⲇ * 435.2216033935547, Ⲇ * 398.0113830566406, Ⲇ * 442.2216033935547);
		ᐃ.bezierCurveTo(388.0113830566406 * Ⲇ, Ⲇ * 451.2216033935547, 385.0113830566406 * Ⲇ, 445.2216033935547 * Ⲇ, Ⲇ * 373.0113830566406, 428.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(358.5113830566406 * Ⲇ, 408.2216033935547 * Ⲇ, 358.5113830566406 * Ⲇ, Ⲇ * 408.2216033935547, 344.0113830566406 * Ⲇ, 388.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 337.0113830566406, Ⲇ * 378.2216033935547, 342.0113830566406 * Ⲇ, Ⲇ * 377.2216033935547, Ⲇ * 347.0113830566406, 371.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(359.0113830566406 * Ⲇ, Ⲇ * 359.2216033935547, 361.0113830566406 * Ⲇ, 358.2216033935547 * Ⲇ, 364.0113830566406 * Ⲇ, 361.2216033935547 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ], ᐃⲆ[0], Ⲇ * 12);
		ᐃ.globalAlpha = ⲆⲆⲆᐃ;
		ᐃ.translate(ⵠⵠΔᐃ, -ⵠᐃⵠΔᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 366.0113830566406, Ⲇ * 361.2216033935547);
		ᐃ.bezierCurveTo(393.0113830566406 * Ⲇ, Ⲇ * 383.2216033935547, Ⲇ * 393.0113830566406, Ⲇ * 383.2216033935547, 420.0113830566406 * Ⲇ, 405.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 427.0113830566406, Ⲇ * 414.2216033935547, Ⲇ * 425.0113830566406, 417.2216033935547 * Ⲇ, Ⲇ * 413.0113830566406, Ⲇ * 428.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 405.5113830566406, 435.2216033935547 * Ⲇ, 405.5113830566406 * Ⲇ, 435.2216033935547 * Ⲇ, 398.0113830566406 * Ⲇ, Ⲇ * 442.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 388.0113830566406, 451.2216033935547 * Ⲇ, 385.0113830566406 * Ⲇ, Ⲇ * 445.2216033935547, 373.0113830566406 * Ⲇ, 428.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 358.5113830566406, 408.2216033935547 * Ⲇ, Ⲇ * 358.5113830566406, Ⲇ * 408.2216033935547, Ⲇ * 344.0113830566406, Ⲇ * 388.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 337.0113830566406, Ⲇ * 378.2216033935547, 342.0113830566406 * Ⲇ, Ⲇ * 377.2216033935547, Ⲇ * 347.0113830566406, 371.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 359.0113830566406, 359.2216033935547 * Ⲇ, Ⲇ * 361.0113830566406, Ⲇ * 358.2216033935547, 364.0113830566406 * Ⲇ, 361.2216033935547 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[Δᐃᐃⵠ], Ⲇ * ᐃᐃⵠⲆⲆⲆⲆ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆⵠⲆ;
		ᐃ.translate(0, 5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 323.0113830566406, Ⲇ * 393.2216033935547);
		ᐃ.bezierCurveTo(338.0113830566406 * Ⲇ, 424.7216033935547 * Ⲇ, Ⲇ * 338.0113830566406, Ⲇ * 424.7216033935547, 353.0113830566406 * Ⲇ, 456.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 355.0113830566406, Ⲇ * 467.2216033935547, 354.0113830566406 * Ⲇ, Ⲇ * 469.2216033935547, 336.0113830566406 * Ⲇ, 475.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 326.0113830566406, 478.2216033935547 * Ⲇ, Ⲇ * 326.0113830566406, 478.2216033935547 * Ⲇ, 316.0113830566406 * Ⲇ, 481.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(304.0113830566406 * Ⲇ, Ⲇ * 484.2216033935547, Ⲇ * 304.0113830566406, Ⲇ * 477.2216033935547, 301.0113830566406 * Ⲇ, 454.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(295.5113830566406 * Ⲇ, Ⲇ * 429.2216033935547, 295.5113830566406 * Ⲇ, 429.2216033935547 * Ⲇ, 290.0113830566406 * Ⲇ, 404.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(287.0113830566406 * Ⲇ, 396.2216033935547 * Ⲇ, 297.0113830566406 * Ⲇ, Ⲇ * 394.2216033935547, 303.0113830566406 * Ⲇ, Ⲇ * 392.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 316.0113830566406, Ⲇ * 387.2216033935547, 318.0113830566406 * Ⲇ, Ⲇ * 387.2216033935547, Ⲇ * 323.0113830566406, Ⲇ * 394.2216033935547);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⲆΔⵠΔ], ᐃᐃΔᐃⲆ * Ⲇ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, -ⲆΔΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 323.0113830566406, 393.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(338.0113830566406 * Ⲇ, Ⲇ * 424.7216033935547, 338.0113830566406 * Ⲇ, Ⲇ * 424.7216033935547, Ⲇ * 353.0113830566406, 456.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(355.0113830566406 * Ⲇ, 467.2216033935547 * Ⲇ, Ⲇ * 354.0113830566406, 469.2216033935547 * Ⲇ, Ⲇ * 336.0113830566406, 475.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(326.0113830566406 * Ⲇ, 478.2216033935547 * Ⲇ, Ⲇ * 326.0113830566406, Ⲇ * 478.2216033935547, 316.0113830566406 * Ⲇ, 481.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 304.0113830566406, Ⲇ * 484.2216033935547, Ⲇ * 304.0113830566406, Ⲇ * 477.2216033935547, Ⲇ * 301.0113830566406, 454.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 295.5113830566406, 429.2216033935547 * Ⲇ, 295.5113830566406 * Ⲇ, Ⲇ * 429.2216033935547, Ⲇ * 290.0113830566406, 404.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 287.0113830566406, 396.2216033935547 * Ⲇ, 297.0113830566406 * Ⲇ, 394.2216033935547 * Ⲇ, 303.0113830566406 * Ⲇ, 392.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 316.0113830566406, Ⲇ * 387.2216033935547, Ⲇ * 318.0113830566406, 387.2216033935547 * Ⲇ, 323.0113830566406 * Ⲇ, Ⲇ * 394.2216033935547);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃΔⵠ], ᐃⲆ[ⲆⲆⵠᐃ], Ⲇ * ΔΔΔⲆΔ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(ⵠᐃΔ, ⵠᐃᐃⵠᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 270.0113830566406, 413.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 271.0113830566406, Ⲇ * 445.7216033935547, 271.0113830566406 * Ⲇ, 445.7216033935547 * Ⲇ, 272.0113830566406 * Ⲇ, Ⲇ * 478.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 273.0113830566406, Ⲇ * 490.2216033935547, 267.0113830566406 * Ⲇ, Ⲇ * 493.2216033935547, Ⲇ * 249.01138305664062, Ⲇ * 490.2216033935547);
		ᐃ.bezierCurveTo(222.01138305664062 * Ⲇ, Ⲇ * 492.2216033935547, 220.01138305664062 * Ⲇ, 485.2216033935547 * Ⲇ, 225.01138305664062 * Ⲇ, Ⲇ * 467.2216033935547);
		ᐃ.bezierCurveTo(230.51138305664062 * Ⲇ, 440.2216033935547 * Ⲇ, 230.51138305664062 * Ⲇ, Ⲇ * 440.2216033935547, 236.01138305664062 * Ⲇ, 413.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 237.01138305664062, 405.2216033935547 * Ⲇ, Ⲇ * 238.01138305664062, Ⲇ * 404.2216033935547, 253.01138305664062 * Ⲇ, 403.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(269.0113830566406 * Ⲇ, Ⲇ * 405.2216033935547, 270.0113830566406 * Ⲇ, 407.2216033935547 * Ⲇ, Ⲇ * 269.0113830566406, Ⲇ * 412.2216033935547);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⲆΔⵠΔ], ᐃⲆⵠΔⵠ * Ⲇ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, Ⲇ * -ΔⵠⲆᐃⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(270.0113830566406 * Ⲇ, 413.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 271.0113830566406, Ⲇ * 445.7216033935547, 271.0113830566406 * Ⲇ, 445.7216033935547 * Ⲇ, Ⲇ * 272.0113830566406, Ⲇ * 478.2216033935547);
		ᐃ.bezierCurveTo(273.0113830566406 * Ⲇ, 490.2216033935547 * Ⲇ, Ⲇ * 267.0113830566406, Ⲇ * 493.2216033935547, 249.01138305664062 * Ⲇ, Ⲇ * 490.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 222.01138305664062, 492.2216033935547 * Ⲇ, Ⲇ * 220.01138305664062, Ⲇ * 485.2216033935547, Ⲇ * 225.01138305664062, 467.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 230.51138305664062, 440.2216033935547 * Ⲇ, 230.51138305664062 * Ⲇ, 440.2216033935547 * Ⲇ, Ⲇ * 236.01138305664062, Ⲇ * 413.2216033935547);
		ᐃ.bezierCurveTo(237.01138305664062 * Ⲇ, Ⲇ * 405.2216033935547, Ⲇ * 238.01138305664062, Ⲇ * 404.2216033935547, 253.01138305664062 * Ⲇ, Ⲇ * 403.2216033935547);
		ᐃ.bezierCurveTo(269.0113830566406 * Ⲇ, Ⲇ * 405.2216033935547, 270.0113830566406 * Ⲇ, Ⲇ * 407.2216033935547, Ⲇ * 269.0113830566406, Ⲇ * 412.2216033935547);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[2], Ⲇ * 12);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆΔⲆⵠ;
		ᐃ.translate(0, Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(207.01138305664062 * Ⲇ, Ⲇ * 406.2216033935547);
		ᐃ.bezierCurveTo(197.51138305664062 * Ⲇ, Ⲇ * 440.7216033935547, Ⲇ * 197.51138305664062, Ⲇ * 440.7216033935547, 188.01138305664062 * Ⲇ, 475.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 184.01138305664062, 485.2216033935547 * Ⲇ, 179.01138305664062 * Ⲇ, 491.2216033935547 * Ⲇ, 152.01138305664062 * Ⲇ, Ⲇ * 477.2216033935547);
		ᐃ.bezierCurveTo(136.51138305664062 * Ⲇ, Ⲇ * 469.7216033935547, Ⲇ * 136.51138305664062, Ⲇ * 469.7216033935547, 121.01138305664062 * Ⲇ, 462.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(109.01138305664062 * Ⲇ, 453.2216033935547 * Ⲇ, 117.01138305664062 * Ⲇ, 447.2216033935547 * Ⲇ, 133.01138305664062 * Ⲇ, 427.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(146.51138305664062 * Ⲇ, Ⲇ * 406.7216033935547, 146.51138305664062 * Ⲇ, 406.7216033935547 * Ⲇ, 160.01138305664062 * Ⲇ, Ⲇ * 386.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 163.01138305664062, Ⲇ * 377.2216033935547, 168.01138305664062 * Ⲇ, 378.2216033935547 * Ⲇ, 187.01138305664062 * Ⲇ, Ⲇ * 387.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 206.01138305664062, 395.2216033935547 * Ⲇ, 208.01138305664062 * Ⲇ, 398.2216033935547 * Ⲇ, 207.01138305664062 * Ⲇ, 405.2216033935547 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠΔΔᐃ], Ⲇ * 12);
		ᐃ.globalAlpha = ⵠΔΔ;
		ᐃ.translate(0, -5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 207.01138305664062, 406.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 197.51138305664062, 440.7216033935547 * Ⲇ, Ⲇ * 197.51138305664062, Ⲇ * 440.7216033935547, 188.01138305664062 * Ⲇ, Ⲇ * 475.2216033935547);
		ᐃ.bezierCurveTo(184.01138305664062 * Ⲇ, Ⲇ * 485.2216033935547, Ⲇ * 179.01138305664062, Ⲇ * 491.2216033935547, Ⲇ * 152.01138305664062, Ⲇ * 477.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 136.51138305664062, 469.7216033935547 * Ⲇ, 136.51138305664062 * Ⲇ, 469.7216033935547 * Ⲇ, Ⲇ * 121.01138305664062, 462.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 109.01138305664062, Ⲇ * 453.2216033935547, 117.01138305664062 * Ⲇ, Ⲇ * 447.2216033935547, 133.01138305664062 * Ⲇ, 427.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(146.51138305664062 * Ⲇ, 406.7216033935547 * Ⲇ, 146.51138305664062 * Ⲇ, 406.7216033935547 * Ⲇ, 160.01138305664062 * Ⲇ, Ⲇ * 386.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 163.01138305664062, 377.2216033935547 * Ⲇ, 168.01138305664062 * Ⲇ, Ⲇ * 378.2216033935547, 187.01138305664062 * Ⲇ, Ⲇ * 387.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 206.01138305664062, Ⲇ * 395.2216033935547, 208.01138305664062 * Ⲇ, Ⲇ * 398.2216033935547, 207.01138305664062 * Ⲇ, 405.2216033935547 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[2], ᐃⲆⵠⵠΔ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(ⵠᐃⵠⵠ, Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 130.01138305664062, 375.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 109.51138305664062, 400.7216033935547 * Ⲇ, 109.51138305664062 * Ⲇ, Ⲇ * 400.7216033935547, 89.01138305664062 * Ⲇ, Ⲇ * 426.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 82.01138305664062, Ⲇ * 435.2216033935547, 77.01138305664062 * Ⲇ, Ⲇ * 435.2216033935547, 62.011383056640625 * Ⲇ, Ⲇ * 417.2216033935547);
		ᐃ.bezierCurveTo(43.011383056640625 * Ⲇ, Ⲇ * 397.2216033935547, 47.011383056640625 * Ⲇ, 395.2216033935547 * Ⲇ, Ⲇ * 62.011383056640625, 382.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 84.01138305664062, 366.7216033935547 * Ⲇ, 84.01138305664062 * Ⲇ, 366.7216033935547 * Ⲇ, Ⲇ * 106.01138305664062, Ⲇ * 351.2216033935547);
		ᐃ.bezierCurveTo(116.01138305664062 * Ⲇ, Ⲇ * 344.2216033935547, 120.01138305664062 * Ⲇ, 347.2216033935547 * Ⲇ, 127.01138305664062 * Ⲇ, 356.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 137.01138305664062, 366.2216033935547 * Ⲇ, Ⲇ * 137.01138305664062, 366.2216033935547 * Ⲇ, Ⲇ * 131.01138305664062, Ⲇ * 376.2216033935547);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⲆΔⵠΔ], 12 * Ⲇ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(ⵠᐃⵠⵠ, -5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(130.01138305664062 * Ⲇ, Ⲇ * 375.2216033935547);
		ᐃ.bezierCurveTo(109.51138305664062 * Ⲇ, Ⲇ * 400.7216033935547, Ⲇ * 109.51138305664062, Ⲇ * 400.7216033935547, 89.01138305664062 * Ⲇ, 426.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(82.01138305664062 * Ⲇ, 435.2216033935547 * Ⲇ, 77.01138305664062 * Ⲇ, Ⲇ * 435.2216033935547, Ⲇ * 62.011383056640625, Ⲇ * 417.2216033935547);
		ᐃ.bezierCurveTo(43.011383056640625 * Ⲇ, 397.2216033935547 * Ⲇ, Ⲇ * 47.011383056640625, 395.2216033935547 * Ⲇ, Ⲇ * 62.011383056640625, Ⲇ * 382.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 84.01138305664062, 366.7216033935547 * Ⲇ, 84.01138305664062 * Ⲇ, 366.7216033935547 * Ⲇ, 106.01138305664062 * Ⲇ, Ⲇ * 351.2216033935547);
		ᐃ.bezierCurveTo(Ⲇ * 116.01138305664062, 344.2216033935547 * Ⲇ, 120.01138305664062 * Ⲇ, Ⲇ * 347.2216033935547, Ⲇ * 127.01138305664062, 356.2216033935547 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 137.01138305664062, 366.2216033935547 * Ⲇ, 137.01138305664062 * Ⲇ, Ⲇ * 366.2216033935547, Ⲇ * 131.01138305664062, Ⲇ * 376.2216033935547);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆᐃ], ᐃⲆ[Δᐃᐃⵠ], ᐃⲆⵠΔⵠ * Ⲇ);
		return ⲆⲆ
	}

	function ᐃⵠΔᐃΔⵠⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 139;
		ⲆⲆ.height = Ⲇ * 135;
		ᐃ.translate(0, ⲆᐃⲆⲆᐃ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(32 * Ⲇ, 77 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ᐃⲆⵠⲆⲆ, Ⲇ * 41, Ⲇ * ⲆⵠⵠⵠⲆ, Ⲇ * 33, Ⲇ * 12, Ⲇ * 27);
		ᐃ.bezierCurveTo(27 * Ⲇ, Ⲇ * 6, 28 * Ⲇ, ᐃⲆⵠⲆⲆ * Ⲇ, 37 * Ⲇ, Ⲇⵠᐃᐃⵠ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 62, Ⲇ * 3, Ⲇ * 64, Ⲇ * ⵠⵠⲆⵠ, 67 * Ⲇ, Ⲇ * ᐃΔΔΔⵠ);
		ᐃ.bezierCurveTo(80 * Ⲇ, 36 * Ⲇ, Ⲇ * 73.5, 25 * Ⲇ, Ⲇ * 80, Ⲇ * 37);
		ᐃ.bezierCurveTo(Ⲇ * 73.5, Ⲇ * 54, Ⲇ * 65, 74 * Ⲇ, 67 * Ⲇ, 71 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 65, Ⲇ * 37);
		ᐃ.bezierCurveTo(Ⲇ * 105, 40 * Ⲇ, 113 * Ⲇ, 39 * Ⲇ, 117 * Ⲇ, Ⲇ * 48);
		ᐃ.bezierCurveTo(Ⲇ * 126, Ⲇ * 70, Ⲇ * 128, Ⲇ * 72, 124 * Ⲇ, Ⲇ * 80);
		ᐃ.bezierCurveTo(112 * Ⲇ, 101 * Ⲇ, Ⲇ * 110, Ⲇ * 104, 99 * Ⲇ, 104 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 59, Ⲇ * 100, 55 * Ⲇ, Ⲇ * 99, 56 * Ⲇ, 99 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 47.5, Ⲇ * 79, 45 * Ⲇ, 66 * Ⲇ, Ⲇ * 39, 59 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(30 * Ⲇ, Ⲇ * 63);
		ᐃ.bezierCurveTo(Ⲇ * ⲆΔⵠᐃⵠ, Ⲇ * 99, Ⲇ * 5, Ⲇ * 101, ⵠᐃⵠᐃⵠ * Ⲇ, Ⲇ * 103);
		ᐃ.bezierCurveTo(Ⲇ * 19, 123 * Ⲇ, 22 * Ⲇ, Ⲇ * 125, 28 * Ⲇ, 126 * Ⲇ);
		ᐃ.bezierCurveTo(57 * Ⲇ, Ⲇ * 127, 55 * Ⲇ, 127 * Ⲇ, 58 * Ⲇ, Ⲇ * 120);
		ᐃ.bezierCurveTo(82 * Ⲇ, Ⲇ * 86, 83 * Ⲇ, 78 * Ⲇ, 82 * Ⲇ, 87 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⵠ]);
		ᐃ.translate(0, Ⲇ * -ⲆⵠΔΔⵠ);
		ᐃ.globalAlpha = ⲆΔⲆⵠ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(32 * Ⲇ, Ⲇ * 77);
		ᐃ.bezierCurveTo(Ⲇ * 6, Ⲇ * 41, 6 * Ⲇ, Ⲇ * 33, Ⲇ * ΔΔΔⲆΔ, Ⲇ * 27);
		ᐃ.bezierCurveTo(Ⲇ * 27, ᐃΔΔⵠΔ * Ⲇ, 28 * Ⲇ, 6 * Ⲇ, Ⲇ * 37, 6 * Ⲇ);
		ᐃ.bezierCurveTo(62 * Ⲇ, Ⲇ * ᐃΔΔΔ, 64 * Ⲇ, 5 * Ⲇ, 67 * Ⲇ, Ⲇ * 13);
		ᐃ.bezierCurveTo(Ⲇ * 80, Ⲇ * 36, Ⲇ * 73.5, 25 * Ⲇ, Ⲇ * 80, 37 * Ⲇ);
		ᐃ.bezierCurveTo(73.5 * Ⲇ, Ⲇ * 54, 65 * Ⲇ, 74 * Ⲇ, 67 * Ⲇ, Ⲇ * 71);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 65, Ⲇ * 37);
		ᐃ.bezierCurveTo(Ⲇ * 105, Ⲇ * 40, 113 * Ⲇ, 39 * Ⲇ, 117 * Ⲇ, 48 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 126, 70 * Ⲇ, Ⲇ * 128, Ⲇ * 72, Ⲇ * 124, Ⲇ * 80);
		ᐃ.bezierCurveTo(Ⲇ * 112, 101 * Ⲇ, 110 * Ⲇ, Ⲇ * 104, 99 * Ⲇ, 104 * Ⲇ);
		ᐃ.bezierCurveTo(59 * Ⲇ, 100 * Ⲇ, 55 * Ⲇ, Ⲇ * 99, Ⲇ * 56, Ⲇ * 99);
		ᐃ.bezierCurveTo(47.5 * Ⲇ, Ⲇ * 79, Ⲇ * 45, 66 * Ⲇ, Ⲇ * 39, Ⲇ * 59);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(30 * Ⲇ, 63 * Ⲇ);
		ᐃ.bezierCurveTo(ⵠΔΔΔ * Ⲇ, Ⲇ * 99, 5 * Ⲇ, Ⲇ * 101, Ⲇ * 8, Ⲇ * 103);
		ᐃ.bezierCurveTo(Ⲇ * ⵠᐃⲆⵠᐃᐃⲆ, Ⲇ * 123, Ⲇ * 22, Ⲇ * 125, 28 * Ⲇ, Ⲇ * 126);
		ᐃ.bezierCurveTo(57 * Ⲇ, 127 * Ⲇ, Ⲇ * 55, 127 * Ⲇ, Ⲇ * 58, 120 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 82, 86 * Ⲇ, Ⲇ * 83, 78 * Ⲇ, 82 * Ⲇ, Ⲇ * 87);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(80 * Ⲇ, Ⲇ * 38);
		ᐃ.bezierCurveTo(Ⲇ * 72.5, 52 * Ⲇ, Ⲇ * 72.5, 52 * Ⲇ, 65 * Ⲇ, 66 * Ⲇ);
		ᐃ.bezierCurveTo(47.5 * Ⲇ, 37 * Ⲇ, Ⲇ * 47.5, Ⲇ * 37, 30 * Ⲇ, Ⲇ * 7);
		ᐃ.bezierCurveTo(48 * Ⲇ, ⲆⲆᐃΔᐃ * Ⲇ, Ⲇ * 57, ᐃΔⲆΔⲆ * Ⲇ, Ⲇ * 64, Ⲇ * 10);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(65 * Ⲇ, Ⲇ * 65);
		ᐃ.bezierCurveTo(125 * Ⲇ, 73 * Ⲇ, Ⲇ * 95.5, 69 * Ⲇ, Ⲇ * 126, Ⲇ * 73);
		ᐃ.bezierCurveTo(119 * Ⲇ, 98 * Ⲇ, Ⲇ * 106, Ⲇ * 104, 98 * Ⲇ, Ⲇ * 103);
		ᐃ.bezierCurveTo(Ⲇ * 84.5, 102 * Ⲇ, 84.5 * Ⲇ, Ⲇ * 102, Ⲇ * 71, 101 * Ⲇ);
		ᐃ.bezierCurveTo(64 * Ⲇ, 86 * Ⲇ, 64 * Ⲇ, 86 * Ⲇ, Ⲇ * 57, 70 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 27, Ⲇ * 69);
		ᐃ.bezierCurveTo(Ⲇ * 64, Ⲇ * 65, 46 * Ⲇ, Ⲇ * 67, Ⲇ * 65, Ⲇ * 65);
		ᐃ.bezierCurveTo(43.5 * Ⲇ, Ⲇ * 94, 43.5 * Ⲇ, 94 * Ⲇ, 22 * Ⲇ, 123 * Ⲇ);
		ᐃ.bezierCurveTo(8 * Ⲇ, 103 * Ⲇ, Ⲇ * ΔⲆᐃΔΔ, 103 * Ⲇ, 9 * Ⲇ, 103 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⲆΔⵠᐃⵠ, Ⲇ * 98, ⲆⵠΔΔᐃ * Ⲇ, Ⲇ * 89, Ⲇ * 26, Ⲇ * 70);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 26, 69 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 65, Ⲇ * 60, 45 * Ⲇ, Ⲇ * 65, Ⲇ * 64, Ⲇ * 60);
		ᐃ.bezierCurveTo(Ⲇ * 63, 65 * Ⲇ, 63 * Ⲇ, 65 * Ⲇ, Ⲇ * 62, 70 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(80 * Ⲇ, Ⲇ * 38);
		ᐃ.bezierCurveTo(68 * Ⲇ, Ⲇ * 70, Ⲇ * 75, Ⲇ * 53, 70 * Ⲇ, 68 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 65, Ⲇ * 67, Ⲇ * 65, 67 * Ⲇ, 60 * Ⲇ, Ⲇ * 65);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠᐃᐃ]);
		return ⲆⲆ
	}

	function ᐃΔΔΔᐃΔᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 440;
		ⲆⲆ.height = 388 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ΔⲆΔᐃ;
		ᐃ.translate(ⲆⲆⵠᐃⲆ * Ⲇ, 5 * Ⲇ);
		ᐃΔⵠ(ᐃ, 220 * Ⲇ, 201 * Ⲇ, Ⲇ * 170.41713528867922);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ], ᐃⲆ[0], Ⲇ * ΔᐃⵠΔΔ);
		ᐃ.globalAlpha = ⵠⲆⲆⲆ;
		ᐃ.translate(Ⲇ * -5, -ΔΔⵠΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 220, Ⲇ * 201, Ⲇ * 170.41713528867922);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆ], ᐃⲆ[2], Ⲇ * 6);
		ᐃΔⵠ(ᐃ, Ⲇ * 220, Ⲇ * 201, Ⲇ * 130);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆΔᐃᐃⲆⵠ], ᐃⲆ[2], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(218 * Ⲇ, Ⲇ * 97);
		ᐃ.bezierCurveTo(Ⲇ * 219, Ⲇ * 163, 201 * Ⲇ, Ⲇ * 176, 191 * Ⲇ, Ⲇ * 175);
		ᐃ.bezierCurveTo(Ⲇ * 176, 177 * Ⲇ, 168 * Ⲇ, 167 * Ⲇ, 160 * Ⲇ, Ⲇ * 115);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃᐃΔᐃ], ᐃⲆ[6], Ⲇ * ᐃᐃⲆⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(224 * Ⲇ, 181 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 225, 138 * Ⲇ, 246 * Ⲇ, Ⲇ * 115, Ⲇ * 263, Ⲇ * 137);
		ᐃ.bezierCurveTo(282 * Ⲇ, Ⲇ * 174, 279 * Ⲇ, 217 * Ⲇ, Ⲇ * 265, Ⲇ * 243);
		ᐃ.bezierCurveTo(253 * Ⲇ, 264 * Ⲇ, 240 * Ⲇ, 256 * Ⲇ, Ⲇ * 233, 238 * Ⲇ);
		ᐃ.bezierCurveTo(221 * Ⲇ, 212 * Ⲇ, 225 * Ⲇ, 198 * Ⲇ, 224 * Ⲇ, Ⲇ * 184);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[ⵠⵠⵠᐃⵠ], Ⲇ * ᐃᐃΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(169 * Ⲇ, Ⲇ * 289);
		ᐃ.bezierCurveTo(161 * Ⲇ, Ⲇ * 234, 168 * Ⲇ, Ⲇ * 197, 187 * Ⲇ, Ⲇ * 195);
		ᐃ.bezierCurveTo(Ⲇ * 219, 189 * Ⲇ, 222 * Ⲇ, Ⲇ * ⵠΔⵠⲆᐃΔᐃ, Ⲇ * 216, 307 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔⲆ], ᐃⲆ[6], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 143, 146 * Ⲇ);
		ᐃ.bezierCurveTo(161 * Ⲇ, Ⲇ * 199, Ⲇ * 151, 245 * Ⲇ, 138 * Ⲇ, 266 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 120.5, 239.5 * Ⲇ, Ⲇ * 120.5, Ⲇ * 239.5, Ⲇ * 103, Ⲇ * 213);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔⲆ], ᐃⲆ[6], ⲆⵠⵠⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(283 * Ⲇ, Ⲇ * 135);
		ᐃ.bezierCurveTo(Ⲇ * 277, Ⲇ * 176, 298 * Ⲇ, Ⲇ * 194, Ⲇ * 315, Ⲇ * 205);
		ᐃ.bezierCurveTo(Ⲇ * 323.5, Ⲇ * 175, Ⲇ * 323.5, 175 * Ⲇ, Ⲇ * 332, 145 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠⵠᐃ], ᐃⲆ[Δᐃᐃⵠᐃ], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 318, 223 * Ⲇ);
		ᐃ.bezierCurveTo(290 * Ⲇ, 195 * Ⲇ, 271 * Ⲇ, ⵠΔⵠⲆᐃΔᐃ * Ⲇ, Ⲇ * 283, 281 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 303.5, Ⲇ * 267, 303.5 * Ⲇ, Ⲇ * 267, 324 * Ⲇ, 253 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[6], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 142, 223 * Ⲇ);
		ᐃ.bezierCurveTo(128 * Ⲇ, Ⲇ * 213, Ⲇ * 123, Ⲇ * 214, Ⲇ * 111, Ⲇ * 223);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔΔ], ᐃⲆ[ⲆΔⵠᐃⲆ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 251, Ⲇ * 133);
		ᐃ.bezierCurveTo(269 * Ⲇ, Ⲇ * 188, Ⲇ * 262, Ⲇ * 229, 251 * Ⲇ, Ⲇ * 253);
		ᐃ.bezierCurveTo(Ⲇ * 288, Ⲇ * 224, 273 * Ⲇ, Ⲇ * 139, 252 * Ⲇ, 133 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃᐃⵠⵠ], ᐃⲆ[10], ⵠᐃΔΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(203 * Ⲇ, 102 * Ⲇ);
		ᐃ.bezierCurveTo(204 * Ⲇ, Ⲇ * 136, Ⲇ * 200, Ⲇ * 159, 189 * Ⲇ, Ⲇ * 174);
		ᐃ.bezierCurveTo(223 * Ⲇ, Ⲇ * 164, 219 * Ⲇ, 87 * Ⲇ, 205 * Ⲇ, 83 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⲆⵠ], ᐃⲆ[ΔⲆⲆΔΔ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(196 * Ⲇ, Ⲇ * 324);
		ᐃ.bezierCurveTo(Ⲇ * 209, Ⲇ * 239, 200 * Ⲇ, Ⲇ * 219, 192 * Ⲇ, 196 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 229, Ⲇ * 216, 219 * Ⲇ, Ⲇ * 316, 198 * Ⲇ, Ⲇ * 325);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆᐃⵠ], ᐃⲆ[ΔⲆⲆΔΔ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 266, Ⲇ * 166);
		ᐃ.bezierCurveTo(249 * Ⲇ, Ⲇ * 154, 243 * Ⲇ, 161 * Ⲇ, Ⲇ * 233, Ⲇ * 167);
		ᐃⵠ(ᐃ, Ⲇᐃⵠⵠⵠ, ᐃⲆ[6], ΔΔⲆⵠΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(269 * Ⲇ, Ⲇ * 192);
		ᐃ.bezierCurveTo(256 * Ⲇ, Ⲇ * 183, 241 * Ⲇ, Ⲇ * 186, 233 * Ⲇ, Ⲇ * 192);
		ᐃⵠ(ᐃ, ⵠⵠⵠⲆⵠ, ᐃⲆ[ⲆΔΔΔΔ], Ⲇ * 6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 263, Ⲇ * 217);
		ᐃ.bezierCurveTo(Ⲇ * 251, Ⲇ * 211, 242 * Ⲇ, 213 * Ⲇ, Ⲇ * 236, Ⲇ * 218);
		ᐃⵠ(ᐃ, ⲆΔⲆⵠⲆ, ᐃⲆ[ᐃΔⲆⵠⵠ], Ⲇ * 6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 204, 141 * Ⲇ);
		ᐃ.bezierCurveTo(191 * Ⲇ, Ⲇ * 131, 187 * Ⲇ, Ⲇ * 133, 176 * Ⲇ, Ⲇ * 141);
		ᐃⵠ(ᐃ, ⲆᐃⵠΔⵠ, ᐃⲆ[ⵠΔⲆⵠⲆ], Ⲇ * 6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 207, 230 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 193, 222 * Ⲇ, Ⲇ * 185, Ⲇ * 224, Ⲇ * 177, Ⲇ * 231);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠⲆⲆΔᐃⲆⵠ], 6 * Ⲇ);
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(210 * Ⲇ, Ⲇ * 258);
		ᐃ.bezierCurveTo(196 * Ⲇ, 247 * Ⲇ, Ⲇ * 191, Ⲇ * 250, Ⲇ * 177, Ⲇ * 259);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃΔⲆⵠⵠ], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 145, 196 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 130, Ⲇ * 186, 124 * Ⲇ, Ⲇ * 187, Ⲇ * 114, 195 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔᐃⵠΔΔ], Ⲇ * 6);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 218, 97 * Ⲇ);
		ᐃ.bezierCurveTo(219 * Ⲇ, Ⲇ * 163, 201 * Ⲇ, Ⲇ * 176, Ⲇ * 191, 175 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 176, Ⲇ * 177, Ⲇ * 168, 167 * Ⲇ, 160 * Ⲇ, 115 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[6], ᐃΔΔⵠΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(224 * Ⲇ, Ⲇ * 181);
		ᐃ.bezierCurveTo(Ⲇ * 225, Ⲇ * 138, Ⲇ * 246, 115 * Ⲇ, 263 * Ⲇ, 137 * Ⲇ);
		ᐃ.bezierCurveTo(282 * Ⲇ, Ⲇ * 174, 279 * Ⲇ, 217 * Ⲇ, Ⲇ * 265, Ⲇ * 243);
		ᐃ.bezierCurveTo(Ⲇ * 253, 264 * Ⲇ, 240 * Ⲇ, 256 * Ⲇ, 233 * Ⲇ, Ⲇ * 238);
		ᐃ.bezierCurveTo(Ⲇ * 221, Ⲇ * 212, 225 * Ⲇ, Ⲇ * 198, Ⲇ * 224, 184 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔⵠⵠⵠΔ], ᐃΔΔⵠΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 169, 289 * Ⲇ);
		ᐃ.bezierCurveTo(161 * Ⲇ, Ⲇ * 234, 168 * Ⲇ, 197 * Ⲇ, Ⲇ * 187, 195 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 219, 189 * Ⲇ, Ⲇ * 222, Ⲇ * 256, Ⲇ * 216, 307 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[6], ᐃΔⵠⲆⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(143 * Ⲇ, Ⲇ * 146);
		ᐃ.bezierCurveTo(Ⲇ * 161, 199 * Ⲇ, Ⲇ * 151, Ⲇ * 245, Ⲇ * 138, Ⲇ * 266);
		ᐃ.bezierCurveTo(Ⲇ * 120.5, 239.5 * Ⲇ, Ⲇ * 120.5, 239.5 * Ⲇ, Ⲇ * 103, 213 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆᐃⵠⲆⲆ, ᐃⲆ[6], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(283 * Ⲇ, Ⲇ * 135);
		ᐃ.bezierCurveTo(277 * Ⲇ, Ⲇ * 176, 298 * Ⲇ, 194 * Ⲇ, 315 * Ⲇ, Ⲇ * 205);
		ᐃ.bezierCurveTo(Ⲇ * 323.5, Ⲇ * 175, 323.5 * Ⲇ, Ⲇ * 175, Ⲇ * 332, 145 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆⲆⲆⲆⲆ, ᐃⲆ[6], 6 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(318 * Ⲇ, Ⲇ * 223);
		ᐃ.bezierCurveTo(Ⲇ * 290, Ⲇ * 195, Ⲇ * 271, ΔᐃᐃᐃⲆᐃΔ * Ⲇ, 283 * Ⲇ, Ⲇ * 281);
		ᐃ.bezierCurveTo(303.5 * Ⲇ, 267 * Ⲇ, Ⲇ * 303.5, Ⲇ * 267, 324 * Ⲇ, 253 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⵠΔΔΔ, ᐃⲆ[Δᐃᐃⵠᐃ], 6 * Ⲇ);
		ᐃΔⵠ(ᐃ, 222 * Ⲇ, Ⲇ * 199, Ⲇ * 120.74767078498864);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃΔΔΔ], Ⲇ * 40);
		ᐃΔⵠ(ᐃ, 220 * Ⲇ, Ⲇ * 200, 95.44108130150245 * Ⲇ);
		ᐃⵠ(ᐃ, ΔᐃᐃⵠⲆ, ᐃⲆ[2], ⲆⲆᐃⵠΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 220, 201 * Ⲇ, 85 * Ⲇ);
		ᐃⵠ(ᐃ, ΔΔᐃⵠΔ, ᐃⲆ[ᐃΔⲆΔⲆ], Ⲇ * 10);
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, 220 * Ⲇ, Ⲇ * 201, 82 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⲆⵠⲆⵠⵠ]);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(ⲆΔⲆⲆ * Ⲇ, Ⲇ * ⵠⵠΔⲆ);
		ᐃΔⵠ(ᐃ, 63 * Ⲇ, 136 * Ⲇ, Ⲇ * 49.193495504995376);
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ᐃⲆⵠΔ], 4 * Ⲇ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(Ⲇ * -5, -ⲆΔⵠⵠᐃ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 63, Ⲇ * 136, Ⲇ * 49.193495504995376);
		ᐃⵠ(ᐃ, ᐃⲆ[8], ᐃⲆ[2], 4 * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 63, Ⲇ * 137, Ⲇ * 25.632011235952593);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆⵠ], ᐃⲆ[ⵠΔᐃΔᐃ], ΔΔᐃᐃⲆ * Ⲇ);
		return ⲆⲆ
	}

	function ΔⲆᐃᐃⵠⲆⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 138;
		ⲆⲆ.height = 133 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .3 : 1;
		ᐃ.translate(0, ⵠΔΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 26, Ⲇ * 79.640625);
		ᐃ.bezierCurveTo(Ⲇ * ⲆⵠΔΔΔᐃᐃ, Ⲇ * 84.640625, Ⲇ * 9, Ⲇ * 86.640625, Ⲇ * ⵠⵠᐃΔᐃ, 78.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⲆⵠⵠⵠⲆ, Ⲇ * 69.640625, ᐃᐃᐃⵠⲆⲆᐃ * Ⲇ, 67.640625 * Ⲇ, 31 * Ⲇ, 62.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 63, 55.640625 * Ⲇ, Ⲇ * 85, Ⲇ * 57.640625, 104 * Ⲇ, Ⲇ * 63.640625);
		ᐃ.bezierCurveTo(Ⲇ * 131, 69.640625 * Ⲇ, Ⲇ * 132, 71.640625 * Ⲇ, 131 * Ⲇ, Ⲇ * 78.640625);
		ᐃ.bezierCurveTo(Ⲇ * 131, 91.640625 * Ⲇ, 112 * Ⲇ, 80.640625 * Ⲇ, Ⲇ * 91, Ⲇ * 75.640625);
		ᐃ.bezierCurveTo(Ⲇ * 51, 70.640625 * Ⲇ, Ⲇ * 45, 74.640625 * Ⲇ, 28 * Ⲇ, 78.640625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 8, 82.640625 * Ⲇ);
		ᐃ.bezierCurveTo(40 * Ⲇ, Ⲇ * 107.640625, Ⲇ * 53, Ⲇ * 104.640625, Ⲇ * 67, Ⲇ * 106.640625);
		ᐃ.bezierCurveTo(101 * Ⲇ, Ⲇ * 103.640625, 117 * Ⲇ, 93.640625 * Ⲇ, Ⲇ * 127, Ⲇ * 84.640625);
		ᐃ.bezierCurveTo(Ⲇ * 135, 95.640625 * Ⲇ, 131 * Ⲇ, Ⲇ * 107.640625, Ⲇ * 110, 118.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 78, 129.640625 * Ⲇ, 67 * Ⲇ, 130.640625 * Ⲇ, Ⲇ * 27, 119.640625 * Ⲇ);
		ᐃ.bezierCurveTo(0 * Ⲇ, 105.640625 * Ⲇ, Ⲇ * ΔΔⵠⵠⵠ, Ⲇ * 83.640625, 10 * Ⲇ, 84.640625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⵠⵠⵠΔ;
		ᐃ.translate(ⲆⲆⵠⲆ, -ⵠᐃᐃⵠᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 8, 73.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⵠᐃᐃⲆⵠ, 23.640625 * Ⲇ, Ⲇ * 33, Ⲇ * 19.640625, Ⲇ * 71, 17.640625 * Ⲇ);
		ᐃ.bezierCurveTo(129 * Ⲇ, 19.640625 * Ⲇ, 130 * Ⲇ, Ⲇ * 45.640625, 130 * Ⲇ, Ⲇ * 76.640625);
		ᐃ.bezierCurveTo(90 * Ⲇ, Ⲇ * 63.640625, Ⲇ * 85, Ⲇ * 63.640625, Ⲇ * 73, 63.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 38, Ⲇ * 63.640625, 33 * Ⲇ, 66.640625 * Ⲇ, 8 * Ⲇ, Ⲇ * 73.640625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔ], ᐃⲆ[2], ⵠΔΔⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 72, 28.640625 * Ⲇ);
		ᐃ.bezierCurveTo(51 * Ⲇ, Ⲇ * 25.640625, Ⲇ * 56, 7.640625 * Ⲇ, 70 * Ⲇ, 5.640625 * Ⲇ);
		ᐃ.bezierCurveTo(94 * Ⲇ, 7.640625 * Ⲇ, 87 * Ⲇ, Ⲇ * 29.640625, 72 * Ⲇ, Ⲇ * 28.640625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆᐃⵠⲆ], Ⲇ * ΔⵠⲆᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(51 * Ⲇ, Ⲇ * 26.640625);
		ᐃ.bezierCurveTo(42 * Ⲇ, 29.640625 * Ⲇ, Ⲇ * 43, 31.640625 * Ⲇ, 42 * Ⲇ, 37.640625 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⵠⲆⵠⲆ, ᐃⲆ[2], Ⲇ * ⵠᐃΔΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(90 * Ⲇ, 26.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⵠⲆⲆⵠᐃΔᐃ, 28.640625 * Ⲇ, 98 * Ⲇ, Ⲇ * 34.640625, 99 * Ⲇ, 38.640625 * Ⲇ);
		ᐃⵠ(ᐃ, ⲆΔⲆⵠⲆ, ᐃⲆ[2], ⲆⲆᐃΔᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(26 * Ⲇ, 79.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 13, 84.640625 * Ⲇ, 9 * Ⲇ, Ⲇ * 86.640625, 7 * Ⲇ, Ⲇ * 78.640625);
		ᐃ.bezierCurveTo(Ⲇ * ⲆⵠᐃΔᐃ, 69.640625 * Ⲇ, Ⲇ * ΔⲆΔⵠⲆ, 67.640625 * Ⲇ, Ⲇ * 31, 62.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 63, Ⲇ * 55.640625, 85 * Ⲇ, 57.640625 * Ⲇ, 104 * Ⲇ, Ⲇ * 63.640625);
		ᐃ.bezierCurveTo(Ⲇ * 131, Ⲇ * 69.640625, 132 * Ⲇ, Ⲇ * 71.640625, Ⲇ * 131, 78.640625 * Ⲇ);
		ᐃ.bezierCurveTo(131 * Ⲇ, Ⲇ * 91.640625, 112 * Ⲇ, Ⲇ * 80.640625, 91 * Ⲇ, 75.640625 * Ⲇ);
		ᐃ.bezierCurveTo(51 * Ⲇ, 70.640625 * Ⲇ, 45 * Ⲇ, Ⲇ * 74.640625, 28 * Ⲇ, Ⲇ * 78.640625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃ], ᐃⲆ[ᐃᐃΔΔ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(8 * Ⲇ, Ⲇ * 82.640625);
		ᐃ.bezierCurveTo(Ⲇ * 40, Ⲇ * 107.640625, 53 * Ⲇ, 104.640625 * Ⲇ, Ⲇ * 67, Ⲇ * 106.640625);
		ᐃ.bezierCurveTo(Ⲇ * 101, 103.640625 * Ⲇ, 117 * Ⲇ, Ⲇ * 93.640625, 127 * Ⲇ, Ⲇ * 84.640625);
		ᐃ.bezierCurveTo(Ⲇ * 135, Ⲇ * 95.640625, Ⲇ * 131, Ⲇ * 107.640625, 110 * Ⲇ, Ⲇ * 118.640625);
		ᐃ.bezierCurveTo(Ⲇ * 78, Ⲇ * 129.640625, Ⲇ * 67, 130.640625 * Ⲇ, Ⲇ * 27, Ⲇ * 119.640625);
		ᐃ.bezierCurveTo(Ⲇ * ⵠⲆⵠ, 105.640625 * Ⲇ, Ⲇ * ⲆᐃⲆⵠⲆ, 83.640625 * Ⲇ, ⵠⲆΔΔⵠ * Ⲇ, Ⲇ * 84.640625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], 4 * Ⲇ);
		return ⲆⲆ
	}

	function ᐃΔᐃⵠᐃⲆᐃ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 81 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 77;
		ᐃ.translate(0, Ⲇ * ⲆᐃⲆⲆᐃ);
		ᐃ.scale(.2, .2);
		ᐃ.translate(0, Ⲇ * -30);
		Δᐃ == 1 && (ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 36.5, Ⲇ * 278.0625), ᐃ.bezierCurveTo(67.5 * Ⲇ, Ⲇ * 316.0625, Ⲇ * 134.5, 334.0625 * Ⲇ, 199.5 * Ⲇ, 319.0625 * Ⲇ), ᐃ.bezierCurveTo(254.5 * Ⲇ, Ⲇ * 304.0625, 346.5 * Ⲇ, 270.0625 * Ⲇ, Ⲇ * 348.5, Ⲇ * 237.0625), ᐃ.bezierCurveTo(Ⲇ * 359.5, 206.0625 * Ⲇ, Ⲇ * 318.5, 129.0625 * Ⲇ, 262.5 * Ⲇ, 122.0625 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 213.5, Ⲇ * 115.0625, 166.5 * Ⲇ, Ⲇ * 133.0625, Ⲇ * 104.5, Ⲇ * 166.0625), ᐃ.bezierCurveTo(54.5 * Ⲇ, Ⲇ * 194.0625, 23.5 * Ⲇ, 241.0625 * Ⲇ, 36.5 * Ⲇ, 277.0625 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ᐃⵠᐃⲆ], Ⲇ * 50));
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 36.5, 278.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 67.5, 316.0625 * Ⲇ, Ⲇ * 134.5, 334.0625 * Ⲇ, 199.5 * Ⲇ, Ⲇ * 319.0625);
		ᐃ.bezierCurveTo(Ⲇ * 254.5, 304.0625 * Ⲇ, Ⲇ * 346.5, Ⲇ * 270.0625, 348.5 * Ⲇ, 237.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 359.5, 206.0625 * Ⲇ, Ⲇ * 318.5, Ⲇ * 129.0625, 262.5 * Ⲇ, Ⲇ * 122.0625);
		ᐃ.bezierCurveTo(213.5 * Ⲇ, 115.0625 * Ⲇ, 166.5 * Ⲇ, Ⲇ * 133.0625, Ⲇ * 104.5, 166.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 54.5, Ⲇ * 194.0625, Ⲇ * 23.5, Ⲇ * 241.0625, Ⲇ * 36.5, Ⲇ * 277.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ], ᐃⲆ[ᐃⲆⲆ], Ⲇ * ΔⵠΔⵠⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 214.5, 124.0625 * Ⲇ);
		ᐃ.bezierCurveTo(242.5 * Ⲇ, Ⲇ * 125.0625, 272.5 * Ⲇ, Ⲇ * 159.0625, 283.5 * Ⲇ, Ⲇ * 184.0625);
		ᐃ.bezierCurveTo(Ⲇ * 277.5, Ⲇ * 161.0625, Ⲇ * 233.5, 128.0625 * Ⲇ, 219.5 * Ⲇ, Ⲇ * 122.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⵠ], ᐃⲆ[1], 19 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 157.5, Ⲇ * 145.0625);
		ᐃ.bezierCurveTo(176.5 * Ⲇ, Ⲇ * 148.0625, Ⲇ * 205.5, 176.0625 * Ⲇ, Ⲇ * 212.5, 197.0625 * Ⲇ);
		ᐃ.bezierCurveTo(205.5 * Ⲇ, 178.0625 * Ⲇ, Ⲇ * 177.5, Ⲇ * 152.0625, 156.5 * Ⲇ, 142.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⵠ], ᐃⲆ[1], Ⲇ * ΔⲆᐃΔⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 103.5, 169.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 160.5, 166.0625 * Ⲇ, Ⲇ * 228.5, Ⲇ * 312.0625, Ⲇ * 162.5, 323.0625 * Ⲇ);
		ᐃ.bezierCurveTo(128.5 * Ⲇ, 330.0625 * Ⲇ, 45.5 * Ⲇ, 312.0625 * Ⲇ, 34.5 * Ⲇ, 268.0625 * Ⲇ);
		ᐃ.bezierCurveTo(30.5 * Ⲇ, 238.0625 * Ⲇ, Ⲇ * 44.5, Ⲇ * 222.0625, Ⲇ * 52.5, Ⲇ * 211.0625);
		ᐃ.bezierCurveTo(82.5 * Ⲇ, Ⲇ * 174.0625, 104.5 * Ⲇ, 166.0625 * Ⲇ, Ⲇ * 119.5, 172.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠᐃᐃ], ᐃⲆ[1], 19 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(194.5 * Ⲇ, Ⲇ * 313.0625);
		ᐃ.bezierCurveTo(Ⲇ * 222.5, 306.0625 * Ⲇ, Ⲇ * 319.5, 271.0625 * Ⲇ, Ⲇ * 337.5, Ⲇ * 241.0625);
		ᐃ.bezierCurveTo(Ⲇ * 274.5, Ⲇ * 270.0625, Ⲇ * 216.5, Ⲇ * 288.0625, 199.5 * Ⲇ, Ⲇ * 287.0625);
		ᐃ.bezierCurveTo(Ⲇ * 198.5, Ⲇ * 302.0625, 195.5 * Ⲇ, Ⲇ * 311.0625, Ⲇ * 193.5, Ⲇ * 312.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆ]);
		ᐃ.scale(3, 3);
		ᐃ.translate(15, Ⲇ * 10);
		if (1 == Δᐃ) {
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 4, 32 * Ⲇ);
			ᐃ.bezierCurveTo(ⲆΔⲆⵠΔᐃⲆ * Ⲇ, Ⲇ * 25, Ⲇ * ᐃᐃΔΔᐃ, 25 * Ⲇ, 34 * Ⲇ, Ⲇ * ᐃⵠᐃⵠⵠⵠⵠ);
			ᐃ.bezierCurveTo(41.5 * Ⲇ, Ⲇ * 23.5, 41.5 * Ⲇ, 23.5 * Ⲇ, 49 * Ⲇ, Ⲇ * 29);
			ᐃ.bezierCurveTo(59.5 * Ⲇ, ⵠΔⲆΔⵠ * Ⲇ, Ⲇ * 59.5, 20 * Ⲇ, 70 * Ⲇ, 11 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⵠΔΔΔ, ᐃⲆ[3], Ⲇ * 28);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 56, Ⲇ * ᐃΔⵠⲆⵠ);
			ᐃ.bezierCurveTo(Ⲇ * 63.5, 13.5 * Ⲇ, Ⲇ * 63.5, Ⲇ * 13.5, Ⲇ * 71, 21 * Ⲇ);
			ᐃ.bezierCurveTo(74.5 * Ⲇ, 11.5 * Ⲇ, 74.5 * Ⲇ, Ⲇ * 11.5, Ⲇ * 78, Ⲇ * Δⵠᐃᐃ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆ], ᐃⲆ[ᐃⵠᐃⲆ], Ⲇ * 28)
		}
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ᐃΔⲆΔⲆ * Ⲇ, Ⲇ * 32);
		ᐃ.bezierCurveTo(19 * Ⲇ, Ⲇ * 25, 19 * Ⲇ, 25 * Ⲇ, Ⲇ * 34, Ⲇ * ΔᐃΔⵠᐃ);
		ᐃ.bezierCurveTo(Ⲇ * 41.5, 23.5 * Ⲇ, Ⲇ * 41.5, Ⲇ * 23.5, 49 * Ⲇ, 29 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 59.5, 20 * Ⲇ, 59.5 * Ⲇ, ⵠⵠⵠⲆᐃ * Ⲇ, 70 * Ⲇ, ⲆΔΔᐃⵠⵠⵠ * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[1], Ⲇ * ⵠⵠΔΔⵠᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 56, 6 * Ⲇ);
		ᐃ.bezierCurveTo(63.5 * Ⲇ, 13.5 * Ⲇ, Ⲇ * 63.5, Ⲇ * 13.5, 71 * Ⲇ, 21 * Ⲇ);
		ᐃ.bezierCurveTo(74.5 * Ⲇ, 11.5 * Ⲇ, Ⲇ * 74.5, Ⲇ * 11.5, 78 * Ⲇ, 2 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⵠ], ᐃⲆ[ᐃⵠⵠ], Ⲇ * ⵠⵠᐃⵠⲆΔⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ⵠᐃΔΔΔ * Ⲇ, Ⲇ * 32);
		ᐃ.bezierCurveTo(Ⲇ * 19, 25 * Ⲇ, Ⲇ * 19, Ⲇ * 25, 34 * Ⲇ, Ⲇ * ᐃⲆⲆΔⵠΔⲆ);
		ᐃ.bezierCurveTo(41.5 * Ⲇ, 23.5 * Ⲇ, Ⲇ * 41.5, Ⲇ * 23.5, 49 * Ⲇ, 29 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 59.5, Ⲇ * 20, 59.5 * Ⲇ, Ⲇ * ᐃᐃΔΔⲆ, Ⲇ * 70, ⲆⲆΔᐃᐃⲆⵠ * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 56, Ⲇ * ΔΔⲆⵠΔ);
		ᐃ.bezierCurveTo(Ⲇ * 63.5, 13.5 * Ⲇ, 63.5 * Ⲇ, Ⲇ * 13.5, 71 * Ⲇ, 21 * Ⲇ);
		ᐃ.bezierCurveTo(74.5 * Ⲇ, Ⲇ * 11.5, 74.5 * Ⲇ, 11.5 * Ⲇ, 78 * Ⲇ, 2 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⲆ], ᐃⲆ[2], Ⲇ * ⵠΔΔΔⵠ);
		return ⲆⲆ
	}

	function ⵠⵠΔⵠⲆΔⲆΔⵠ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 110 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 110;
		ᐃ.globalAlpha = .2;
		ᐃΔⵠ(ᐃ, 55 * Ⲇ, Ⲇ * 55, 55 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ]);
		return ⲆⲆ
	}

	function ᐃᐃⲆⵠΔⲆᐃᐃΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 147;
		ⲆⲆ.height = Ⲇ * 172;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ΔⲆΔⲆⲆ, 50 * Ⲇ);
		ᐃ.bezierCurveTo(ⵠᐃⲆᐃᐃ * Ⲇ, Ⲇ * ΔⵠⵠⲆΔᐃΔ, 49 * Ⲇ, ΔⲆⵠΔΔ * Ⲇ, Ⲇ * 67, 6 * Ⲇ);
		ᐃ.bezierCurveTo(121 * Ⲇ, Ⲇ * ΔΔⲆᐃ, 128 * Ⲇ, Ⲇ * 32, Ⲇ * 135, 48 * Ⲇ);
		ᐃ.bezierCurveTo(146 * Ⲇ, Ⲇ * 96, Ⲇ * 124, 131 * Ⲇ, 96 * Ⲇ, Ⲇ * 135);
		ᐃ.bezierCurveTo(96 * Ⲇ, Ⲇ * 158, 79 * Ⲇ, Ⲇ * 156, 75 * Ⲇ, Ⲇ * 156);
		ᐃ.bezierCurveTo(50 * Ⲇ, 154 * Ⲇ, Ⲇ * 53, Ⲇ * 150, Ⲇ * 52, 135 * Ⲇ);
		ᐃ.bezierCurveTo(ⲆⲆᐃⲆ * Ⲇ, 127 * Ⲇ, Ⲇ * ΔΔⲆᐃ, 87 * Ⲇ, Ⲇ * 8, Ⲇ * 50);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ, ᐃⲆ, Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ⲆᐃΔⵠⵠⲆᐃ, 57 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⲆⲆᐃⲆ, Ⲇ * 50, Ⲇ * 5, Ⲇ * 22, 24 * Ⲇ, Ⲇ * 22);
		ᐃ.bezierCurveTo(Ⲇ * 41, Ⲇ * 21, Ⲇ * 54, Ⲇ * 32, Ⲇ * 55, Ⲇ * 48);
		ᐃⵠ(ᐃ, ᐃⲆ, ᐃⲆ, ⲆⲆᐃΔᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(93 * Ⲇ, Ⲇ * 47);
		ᐃ.bezierCurveTo(Ⲇ * 94, Ⲇ * 24, Ⲇ * 116, Ⲇ * 21, Ⲇ * 120, 20 * Ⲇ);
		ᐃ.bezierCurveTo(144 * Ⲇ, ⵠᐃⲆⲆⲆ * Ⲇ, Ⲇ * 146, Ⲇ * 52, 133 * Ⲇ, 58 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ, ᐃⲆ, Ⲇ * ⲆⵠⲆᐃ);
		return ⲆⲆ
	}

	function ΔᐃⲆΔᐃⲆⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 316;
		ⲆⲆ.height = 365 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(156.07142639160156 * Ⲇ, Ⲇ * 51.81248474121094);
		ᐃ.rotate(ⵠΔⵠⲆ);
		ᐃᐃᐃ(ᐃ, -21.5 * Ⲇ, Ⲇ * -34, 43 * Ⲇ, Ⲇ * 68, 8 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆ], ᐃⲆ[2], Ⲇ * 15);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 110.57142639160156, 197.09820556640625 * Ⲇ);
		ᐃ.bezierCurveTo(158.07142639160156 * Ⲇ, 179.09820556640625 * Ⲇ, Ⲇ * 158.07142639160156, 179.09820556640625 * Ⲇ, Ⲇ * 205.57142639160156, Ⲇ * 161.09820556640625);
		ᐃ.bezierCurveTo(Ⲇ * 205.57142639160156, Ⲇ * 235.45535278320312, 205.57142639160156 * Ⲇ, 235.45535278320312 * Ⲇ, Ⲇ * 205.57142639160156, 309.8125 * Ⲇ);
		ᐃ.bezierCurveTo(205.57142639160156 * Ⲇ, 323.8125 * Ⲇ, 200.57142639160156 * Ⲇ, Ⲇ * 325.8125, 187.57142639160156 * Ⲇ, 326.8125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 155.57142639160156, Ⲇ * 326.3125, Ⲇ * 155.57142639160156, 326.3125 * Ⲇ, 123.57142639160156 * Ⲇ, Ⲇ * 325.8125);
		ᐃ.bezierCurveTo(111.57142639160156 * Ⲇ, 326.8125 * Ⲇ, 109.57142639160156 * Ⲇ, 321.8125 * Ⲇ, 110.57142639160156 * Ⲇ, 312.8125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆⲆ], ᐃⲆ[4], 15 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 126.57142639160156, 67.38392639160156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 126.57142639160156, Ⲇ * 57.38392639160156, 132.57142639160156 * Ⲇ, 54.38392639160156 * Ⲇ, 140.57142639160156 * Ⲇ, Ⲇ * 54.38392639160156);
		ᐃ.bezierCurveTo(177.57142639160156 * Ⲇ, 55.38392639160156 * Ⲇ, Ⲇ * 158.07142639160156, Ⲇ * 54.38392639160156, 175.57142639160156 * Ⲇ, Ⲇ * 54.38392639160156);
		ᐃ.bezierCurveTo(185.57142639160156 * Ⲇ, Ⲇ * 56.38392639160156, Ⲇ * 185.57142639160156, Ⲇ * 57.38392639160156, 184.57142639160156 * Ⲇ, Ⲇ * 66.38392639160156);
		ᐃ.bezierCurveTo(Ⲇ * 184.57142639160156, 78.38392639160156 * Ⲇ, Ⲇ * 184.57142639160156, 89.38392639160156 * Ⲇ, Ⲇ * 184.57142639160156, 90.38392639160156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 177.57142639160156, 107.38392639160156 * Ⲇ, Ⲇ * 180.57142639160156, Ⲇ * 112.38392639160156, Ⲇ * 189.57142639160156, 116.38392639160156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 212.57142639160156, 127.38392639160156 * Ⲇ, Ⲇ * 212.57142639160156, Ⲇ * 132.38392639160156, 211.57142639160156 * Ⲇ, Ⲇ * 150.38392639160156);
		ᐃ.bezierCurveTo(211.57142639160156 * Ⲇ, Ⲇ * 227.59821128845215, 211.57142639160156 * Ⲇ, 227.59821128845215 * Ⲇ, 211.57142639160156 * Ⲇ, Ⲇ * 304.81249618530273);
		ᐃ.bezierCurveTo(Ⲇ * 212.57142639160156, Ⲇ * 328.81249618530273, Ⲇ * 209.57142639160156, 330.81249618530273 * Ⲇ, Ⲇ * 188.57142639160156, 333.81249618530273 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 155.07142639160156, Ⲇ * 333.31249618530273, 155.07142639160156 * Ⲇ, Ⲇ * 333.31249618530273, Ⲇ * 121.57142639160156, 332.81249618530273 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 104.57142639160156, 327.81249618530273 * Ⲇ, Ⲇ * 105.57142639160156, 328.81249618530273 * Ⲇ, Ⲇ * 104.57142639160156, Ⲇ * 312.81249618530273);
		ᐃ.bezierCurveTo(104.57142639160156 * Ⲇ, 228.16963958740234 * Ⲇ, Ⲇ * 104.57142639160156, 228.16963958740234 * Ⲇ, 104.57142639160156 * Ⲇ, Ⲇ * 143.52678298950195);
		ᐃ.bezierCurveTo(Ⲇ * 106.57142639160156, Ⲇ * 124.52678298950195, 110.57142639160156 * Ⲇ, 123.52678298950195 * Ⲇ, Ⲇ * 123.57142639160156, 116.52678298950195 * Ⲇ);
		ᐃ.bezierCurveTo(136.57142639160156 * Ⲇ, Ⲇ * 110.52678298950195, 130.57142639160156 * Ⲇ, Ⲇ * 106.52678298950195, Ⲇ * 126.57142639160156, 98.52678298950195 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[5], 15 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(125.57142639160156 * Ⲇ, Ⲇ * 156.66963958740234);
		ᐃ.bezierCurveTo(Ⲇ * 125.57142639160156, 182.66963958740234 * Ⲇ, 125.57142639160156 * Ⲇ, Ⲇ * 182.66963958740234, 125.57142639160156 * Ⲇ, Ⲇ * 208.66963958740234);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[6], 15 * Ⲇ);
		return ⲆⲆ
	}

	function ᐃΔᐃᐃᐃᐃⵠ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 173 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 178;
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, Ⲇ * 86.5, Ⲇ * 98, Ⲇ * 80);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔᐃ]);
		ᐃ.globalAlpha = ⵠⵠᐃ;
		ᐃΔⵠ(ᐃ, Ⲇ * 86.5, 89 * Ⲇ, 81 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆⵠᐃ], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, Ⲇ * 86.5, Ⲇ * 86, Ⲇ * 59);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔⵠ], ᐃⲆ[4], Ⲇ * 4);
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, 86.5 * Ⲇ, 95 * Ⲇ, 34 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ]);
		ᐃ.globalAlpha = ⲆⵠΔⲆ;
		ᐃΔⵠ(ᐃ, Ⲇ * 86.5, Ⲇ * 89, 34 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		return ⲆⲆ
	}

	function ΔⵠΔⲆΔᐃⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 272;
		ⲆⲆ.height = 264 * Ⲇ;
		ᐃ.translate(0, Ⲇ * ⵠⲆΔᐃᐃ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ᐃΔⵠΔ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(56.999969482421875 * Ⲇ, Ⲇ * 84.517333984375);
		ᐃ.bezierCurveTo(Ⲇ * 61.999969482421875, Ⲇ * 58.517333984375, Ⲇ * 79.99996948242188, 50.517333984375 * Ⲇ, Ⲇ * 102.99996948242188, 50.517333984375 * Ⲇ);
		ᐃ.bezierCurveTo(119.99996948242188 * Ⲇ, Ⲇ * 26.517333984375, 137.99996948242188 * Ⲇ, Ⲇ * 32.517333984375, 156.99996948242188 * Ⲇ, 44.517333984375 * Ⲇ);
		ᐃ.bezierCurveTo(187.99996948242188 * Ⲇ, Ⲇ * 42.517333984375, Ⲇ * 195.99996948242188, Ⲇ * 50.517333984375, Ⲇ * 202.99996948242188, 77.517333984375 * Ⲇ);
		ᐃ.bezierCurveTo(229.99996948242188 * Ⲇ, Ⲇ * 80.517333984375, 231.99996948242188 * Ⲇ, Ⲇ * 96.517333984375, Ⲇ * 229.99996948242188, 118.517333984375 * Ⲇ);
		ᐃ.bezierCurveTo(241.99996948242188 * Ⲇ, Ⲇ * 147.517333984375, Ⲇ * 236.99996948242188, 148.517333984375 * Ⲇ, 220.99996948242188 * Ⲇ, Ⲇ * 165.517333984375);
		ᐃ.bezierCurveTo(Ⲇ * 222.99996948242188, 192.517333984375 * Ⲇ, Ⲇ * 209.99996948242188, Ⲇ * 212.517333984375, Ⲇ * 177.99996948242188, Ⲇ * 213.517333984375);
		ᐃ.bezierCurveTo(159.99996948242188 * Ⲇ, Ⲇ * 234.517333984375, Ⲇ * 141.99996948242188, 234.517333984375 * Ⲇ, Ⲇ * 116.99996948242188, Ⲇ * 222.517333984375);
		ᐃ.bezierCurveTo(Ⲇ * 72.99996948242188, 226.517333984375 * Ⲇ, 66.99996948242188 * Ⲇ, 207.517333984375 * Ⲇ, 65.99996948242188 * Ⲇ, Ⲇ * 190.517333984375);
		ᐃ.bezierCurveTo(Ⲇ * 35.999969482421875, Ⲇ * 180.517333984375, 30.999969482421875 * Ⲇ, 162.517333984375 * Ⲇ, 39.999969482421875 * Ⲇ, Ⲇ * 135.517333984375);
		ᐃ.bezierCurveTo(Ⲇ * 23.999969482421875, Ⲇ * 110.517333984375, 43.999969482421875 * Ⲇ, 90.517333984375 * Ⲇ, Ⲇ * 55.999969482421875, 85.517333984375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(ΔΔⲆⲆ, -ⵠⲆΔᐃᐃ * Ⲇ);
		ᐃ.globalAlpha = ⲆⵠⲆ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(56.999969482421875 * Ⲇ, 84.517333984375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 61.999969482421875, 58.517333984375 * Ⲇ, Ⲇ * 79.99996948242188, 50.517333984375 * Ⲇ, 102.99996948242188 * Ⲇ, Ⲇ * 50.517333984375);
		ᐃ.bezierCurveTo(119.99996948242188 * Ⲇ, 26.517333984375 * Ⲇ, 137.99996948242188 * Ⲇ, Ⲇ * 32.517333984375, Ⲇ * 156.99996948242188, Ⲇ * 44.517333984375);
		ᐃ.bezierCurveTo(Ⲇ * 187.99996948242188, 42.517333984375 * Ⲇ, Ⲇ * 195.99996948242188, Ⲇ * 50.517333984375, 202.99996948242188 * Ⲇ, 77.517333984375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 229.99996948242188, Ⲇ * 80.517333984375, Ⲇ * 231.99996948242188, 96.517333984375 * Ⲇ, 229.99996948242188 * Ⲇ, 118.517333984375 * Ⲇ);
		ᐃ.bezierCurveTo(241.99996948242188 * Ⲇ, 147.517333984375 * Ⲇ, 236.99996948242188 * Ⲇ, Ⲇ * 148.517333984375, 220.99996948242188 * Ⲇ, 165.517333984375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 222.99996948242188, Ⲇ * 192.517333984375, 209.99996948242188 * Ⲇ, Ⲇ * 212.517333984375, 177.99996948242188 * Ⲇ, 213.517333984375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 159.99996948242188, 234.517333984375 * Ⲇ, Ⲇ * 141.99996948242188, 234.517333984375 * Ⲇ, 116.99996948242188 * Ⲇ, Ⲇ * 222.517333984375);
		ᐃ.bezierCurveTo(72.99996948242188 * Ⲇ, 226.517333984375 * Ⲇ, 66.99996948242188 * Ⲇ, 207.517333984375 * Ⲇ, Ⲇ * 65.99996948242188, Ⲇ * 190.517333984375);
		ᐃ.bezierCurveTo(35.999969482421875 * Ⲇ, Ⲇ * 180.517333984375, Ⲇ * 30.999969482421875, Ⲇ * 162.517333984375, 39.999969482421875 * Ⲇ, Ⲇ * 135.517333984375);
		ᐃ.bezierCurveTo(23.999969482421875 * Ⲇ, Ⲇ * 110.517333984375, Ⲇ * 43.999969482421875, Ⲇ * 90.517333984375, 55.999969482421875 * Ⲇ, 85.517333984375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆ], ᐃⲆ[ᐃΔⲆⵠ], Ⲇ * ⵠⲆΔⲆᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 123.99996948242188, Ⲇ * 116.18402099609375);
		ᐃ.bezierCurveTo(115.99996948242188 * Ⲇ, Ⲇ * 99.18402099609375, Ⲇ * 109.99996948242188, Ⲇ * 74.18402099609375, Ⲇ * 109.99996948242188, Ⲇ * 63.18402099609375);
		ᐃ.bezierCurveTo(115.99996948242188 * Ⲇ, 69.18402099609375 * Ⲇ, Ⲇ * 125.99996948242188, Ⲇ * 87.18402099609375, 137.99996948242188 * Ⲇ, Ⲇ * 112.18402099609375);
		ᐃ.bezierCurveTo(Ⲇ * 142.99996948242188, 84.18402099609375 * Ⲇ, 143.99996948242188 * Ⲇ, 76.18402099609375 * Ⲇ, 153.99996948242188 * Ⲇ, Ⲇ * 62.18402099609375);
		ᐃ.bezierCurveTo(155.99996948242188 * Ⲇ, Ⲇ * 79.18402099609375, Ⲇ * 149.99996948242188, Ⲇ * 110.18402099609375, Ⲇ * 151.99996948242188, Ⲇ * 117.18402099609375);
		ᐃ.bezierCurveTo(Ⲇ * 162.99996948242188, 104.18402099609375 * Ⲇ, Ⲇ * 180.99996948242188, 91.18402099609375 * Ⲇ, Ⲇ * 191.99996948242188, 91.18402099609375 * Ⲇ);
		ᐃ.bezierCurveTo(185.99996948242188 * Ⲇ, 102.18402099609375 * Ⲇ, 180.99996948242188 * Ⲇ, Ⲇ * 106.18402099609375, 160.99996948242188 * Ⲇ, Ⲇ * 124.18402099609375);
		ᐃ.bezierCurveTo(Ⲇ * 190.99996948242188, 121.18402099609375 * Ⲇ, 199.99996948242188 * Ⲇ, Ⲇ * 120.18402099609375, Ⲇ * 207.99996948242188, 123.18402099609375 * Ⲇ);
		ᐃ.bezierCurveTo(199.99996948242188 * Ⲇ, 129.18402099609375 * Ⲇ, 181.99996948242188 * Ⲇ, 132.18402099609375 * Ⲇ, 160.99996948242188 * Ⲇ, Ⲇ * 135.18402099609375);
		ᐃ.bezierCurveTo(Ⲇ * 179.99996948242188, 142.18402099609375 * Ⲇ, Ⲇ * 193.99996948242188, Ⲇ * 151.18402099609375, 196.99996948242188 * Ⲇ, Ⲇ * 156.18402099609375);
		ᐃ.bezierCurveTo(Ⲇ * 185.99996948242188, 156.18402099609375 * Ⲇ, 163.99996948242188 * Ⲇ, Ⲇ * 149.18402099609375, 152.99996948242188 * Ⲇ, Ⲇ * 147.18402099609375);
		ᐃ.bezierCurveTo(157.99996948242188 * Ⲇ, 155.18402099609375 * Ⲇ, 165.99996948242188 * Ⲇ, 176.18402099609375 * Ⲇ, 169.99996948242188 * Ⲇ, 195.18402099609375 * Ⲇ);
		ᐃ.bezierCurveTo(162.99996948242188 * Ⲇ, 190.18402099609375 * Ⲇ, Ⲇ * 147.99996948242188, Ⲇ * 167.18402099609375, Ⲇ * 139.99996948242188, 153.18402099609375 * Ⲇ);
		ᐃ.bezierCurveTo(137.99996948242188 * Ⲇ, 167.18402099609375 * Ⲇ, Ⲇ * 126.99996948242188, 194.18402099609375 * Ⲇ, 119.99996948242188 * Ⲇ, Ⲇ * 204.18402099609375);
		ᐃ.bezierCurveTo(117.99996948242188 * Ⲇ, Ⲇ * 186.18402099609375, Ⲇ * 123.99996948242188, 165.18402099609375 * Ⲇ, Ⲇ * 126.99996948242188, 149.18402099609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 110.99996948242188, 163.18402099609375 * Ⲇ, Ⲇ * 103.99996948242188, 170.18402099609375 * Ⲇ, 82.99996948242188 * Ⲇ, Ⲇ * 177.18402099609375);
		ᐃ.bezierCurveTo(90.99996948242188 * Ⲇ, Ⲇ * 162.18402099609375, Ⲇ * 99.99996948242188, Ⲇ * 153.18402099609375, 117.99996948242188 * Ⲇ, 140.18402099609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 97.99996948242188, Ⲇ * 140.18402099609375, Ⲇ * 83.99996948242188, 139.18402099609375 * Ⲇ, Ⲇ * 65.99996948242188, Ⲇ * 132.18402099609375);
		ᐃ.bezierCurveTo(Ⲇ * 77.99996948242188, 127.18402099609375 * Ⲇ, 95.99996948242188 * Ⲇ, 127.18402099609375 * Ⲇ, 115.99996948242188 * Ⲇ, 127.18402099609375 * Ⲇ);
		ᐃ.bezierCurveTo(91.99996948242188 * Ⲇ, Ⲇ * 113.18402099609375, 84.99996948242188 * Ⲇ, 107.18402099609375 * Ⲇ, 76.99996948242188 * Ⲇ, Ⲇ * 96.18402099609375);
		ᐃ.bezierCurveTo(Ⲇ * 94.99996948242188, Ⲇ * 99.18402099609375, Ⲇ * 109.99996948242188, 109.18402099609375 * Ⲇ, 123.99996948242188 * Ⲇ, Ⲇ * 116.18402099609375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(131.99996948242188 * Ⲇ, 119.18402099609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 141.99996948242188, Ⲇ * 119.18402099609375, Ⲇ * 145.99996948242188, 116.18402099609375 * Ⲇ, 147.99996948242188 * Ⲇ, 109.18402099609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 151.99996948242188, 107.18402099609375 * Ⲇ, Ⲇ * 159.99996948242188, 107.18402099609375 * Ⲇ, 156.99996948242188 * Ⲇ, Ⲇ * 123.18402099609375);
		ᐃ.bezierCurveTo(155.99996948242188 * Ⲇ, Ⲇ * 140.18402099609375, 142.99996948242188 * Ⲇ, 149.18402099609375 * Ⲇ, 132.99996948242188 * Ⲇ, Ⲇ * 147.18402099609375);
		ᐃ.bezierCurveTo(Ⲇ * 119.99996948242188, 144.18402099609375 * Ⲇ, Ⲇ * 113.99996948242188, 122.18402099609375 * Ⲇ, Ⲇ * 131.99996948242188, Ⲇ * 119.18402099609375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], Ⲇ * 6);
		return ⲆⲆ
	}

	function ⲆᐃⵠⲆⲆᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 100;
		ⲆⲆ.height = 648 * Ⲇ;
		ᐃ.translate(Ⲇ * 20, ᐃΔⲆΔᐃ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.save();
		ᐃ.translate(50.5 * Ⲇ, Ⲇ * 349.5);
		ᐃᐃᐃ(ᐃ, Ⲇ * -13.5, -249.5 * Ⲇ, Ⲇ * 27, 499 * Ⲇ, Ⲇ * ᐃᐃΔⵠⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(36 * Ⲇ, 538 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 49.5, Ⲇ * 538, 49.5 * Ⲇ, Ⲇ * 538, 63 * Ⲇ, 538 * Ⲇ);
		ᐃ.bezierCurveTo(63.5 * Ⲇ, 568 * Ⲇ, Ⲇ * 63.5, Ⲇ * 568, Ⲇ * 64, 598 * Ⲇ);
		ᐃ.bezierCurveTo(50 * Ⲇ, Ⲇ * 598, Ⲇ * 50, 598 * Ⲇ, 36 * Ⲇ, Ⲇ * 598);
		ᐃ.bezierCurveTo(36 * Ⲇ, 568.5 * Ⲇ, Ⲇ * 36, 568.5 * Ⲇ, 36 * Ⲇ, 539 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(36 * Ⲇ, 554 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 45, 561 * Ⲇ, 56 * Ⲇ, 558 * Ⲇ, Ⲇ * 63, 554 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(32 * Ⲇ, 569 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 44, Ⲇ * 576, Ⲇ * 58, Ⲇ * 574, Ⲇ * 68, Ⲇ * 569);
		ᐃ.bezierCurveTo(68 * Ⲇ, 584 * Ⲇ, Ⲇ * 68, 584 * Ⲇ, 68 * Ⲇ, Ⲇ * 599);
		ᐃ.bezierCurveTo(Ⲇ * 68, Ⲇ * 608, Ⲇ * 65, Ⲇ * 618, Ⲇ * 49, 617 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 34, 617 * Ⲇ, 32 * Ⲇ, Ⲇ * 610, 32 * Ⲇ, 598 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 41, Ⲇ * 581);
		ᐃ.bezierCurveTo(48 * Ⲇ, 584 * Ⲇ, 55 * Ⲇ, 583 * Ⲇ, 60 * Ⲇ, Ⲇ * 581);
		ᐃ.bezierCurveTo(60 * Ⲇ, Ⲇ * 589.5, Ⲇ * 60, Ⲇ * 589.5, Ⲇ * 60, Ⲇ * 598);
		ᐃ.bezierCurveTo(Ⲇ * 60, 604 * Ⲇ, Ⲇ * 59, 609 * Ⲇ, Ⲇ * 48, 608 * Ⲇ);
		ᐃ.bezierCurveTo(40 * Ⲇ, 607 * Ⲇ, 40 * Ⲇ, Ⲇ * 606, Ⲇ * 41, Ⲇ * 581);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(31 * Ⲇ, Ⲇ * 106);
		ᐃ.bezierCurveTo(Ⲇ * 31, Ⲇ * 124.5, Ⲇ * 31, Ⲇ * 124.5, 31 * Ⲇ, 143 * Ⲇ);
		ᐃ.bezierCurveTo(31 * Ⲇ, Ⲇ * 163, Ⲇ * 38, 169 * Ⲇ, 48 * Ⲇ, 168 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 57, 168 * Ⲇ, 67 * Ⲇ, Ⲇ * 165, Ⲇ * 67, Ⲇ * 148);
		ᐃ.bezierCurveTo(Ⲇ * 67, Ⲇ * 123.5, Ⲇ * 67, 123.5 * Ⲇ, Ⲇ * 67, 99 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 49, Ⲇ * 27);
		ᐃ.bezierCurveTo(64 * Ⲇ, Ⲇ * 62.5, Ⲇ * 64, Ⲇ * 62.5, Ⲇ * 79, Ⲇ * 98);
		ᐃ.bezierCurveTo(Ⲇ * 74, 113 * Ⲇ, 63 * Ⲇ, 121 * Ⲇ, Ⲇ * 50, 122 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 35, Ⲇ * 123, 22 * Ⲇ, Ⲇ * 109, Ⲇ * ΔⵠⵠᐃᐃⵠΔ, 98 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 49, 43 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 61, 70 * Ⲇ, Ⲇ * 61, 70 * Ⲇ, Ⲇ * 73, Ⲇ * 97);
		ᐃ.bezierCurveTo(Ⲇ * 66, Ⲇ * 116, 43 * Ⲇ, 122 * Ⲇ, 26 * Ⲇ, Ⲇ * 99);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ]);
		ᐃ.translate(-20 * Ⲇ, Ⲇ * -ᐃⵠⲆᐃΔ);
		ᐃ.globalAlpha = ΔⲆΔᐃ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 50.5, Ⲇ * 349.5);
		ᐃᐃᐃ(ᐃ, -13.5 * Ⲇ, -249.5 * Ⲇ, Ⲇ * 27, 499 * Ⲇ, Ⲇ * ᐃᐃᐃⵠⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ], ᐃⲆ[2], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 36, Ⲇ * 538);
		ᐃ.bezierCurveTo(Ⲇ * 49.5, Ⲇ * 538, 49.5 * Ⲇ, 538 * Ⲇ, 63 * Ⲇ, 538 * Ⲇ);
		ᐃ.bezierCurveTo(63.5 * Ⲇ, 568 * Ⲇ, Ⲇ * 63.5, 568 * Ⲇ, 64 * Ⲇ, Ⲇ * 598);
		ᐃ.bezierCurveTo(Ⲇ * 50, 598 * Ⲇ, 50 * Ⲇ, 598 * Ⲇ, Ⲇ * 36, 598 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 36, 568.5 * Ⲇ, Ⲇ * 36, Ⲇ * 568.5, Ⲇ * 36, 539 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆⲆ], ᐃⲆ[4], ⲆᐃⲆΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 36, Ⲇ * 554);
		ᐃ.bezierCurveTo(Ⲇ * 45, Ⲇ * 561, 56 * Ⲇ, 558 * Ⲇ, Ⲇ * 63, 554 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⵠⲆⵠⲆ, ᐃⲆ[ⲆⲆᐃΔᐃ], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 32, Ⲇ * 569);
		ᐃ.bezierCurveTo(Ⲇ * 44, Ⲇ * 576, Ⲇ * 58, Ⲇ * 574, Ⲇ * 68, Ⲇ * 569);
		ᐃ.bezierCurveTo(68 * Ⲇ, 584 * Ⲇ, Ⲇ * 68, Ⲇ * 584, 68 * Ⲇ, 599 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 68, Ⲇ * 608, 65 * Ⲇ, Ⲇ * 618, Ⲇ * 49, 617 * Ⲇ);
		ᐃ.bezierCurveTo(34 * Ⲇ, Ⲇ * 617, 32 * Ⲇ, 610 * Ⲇ, 32 * Ⲇ, 598 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[6], ⲆᐃⲆⵠⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 41, 581 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 48, 584 * Ⲇ, Ⲇ * 55, Ⲇ * 583, 60 * Ⲇ, Ⲇ * 581);
		ᐃ.bezierCurveTo(Ⲇ * 60, 589.5 * Ⲇ, 60 * Ⲇ, 589.5 * Ⲇ, Ⲇ * 60, Ⲇ * 598);
		ᐃ.bezierCurveTo(Ⲇ * 60, 604 * Ⲇ, 59 * Ⲇ, Ⲇ * 609, 48 * Ⲇ, 608 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 40, Ⲇ * 607, Ⲇ * 40, Ⲇ * 606, 41 * Ⲇ, 581 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[7]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(31 * Ⲇ, Ⲇ * 106);
		ᐃ.bezierCurveTo(31 * Ⲇ, Ⲇ * 124.5, Ⲇ * 31, 124.5 * Ⲇ, Ⲇ * 31, Ⲇ * 143);
		ᐃ.bezierCurveTo(31 * Ⲇ, 163 * Ⲇ, Ⲇ * 38, Ⲇ * 169, 48 * Ⲇ, Ⲇ * 168);
		ᐃ.bezierCurveTo(Ⲇ * 57, 168 * Ⲇ, 67 * Ⲇ, 165 * Ⲇ, 67 * Ⲇ, 148 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 67, Ⲇ * 123.5, 67 * Ⲇ, 123.5 * Ⲇ, 67 * Ⲇ, Ⲇ * 99);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠⵠᐃ], ᐃⲆ[6], Ⲇ * 8);
		ᐃ.save();
		ᐃ.translate(-46 * Ⲇ, Ⲇ * -50);
		ᐃ.scale(2, ⵠᐃⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 51, Ⲇ * 80);
		ᐃ.bezierCurveTo(51 * Ⲇ, Ⲇ * 89.5, 51 * Ⲇ, 89.5 * Ⲇ, Ⲇ * 51, Ⲇ * 99);
		ᐃ.bezierCurveTo(49 * Ⲇ, 103 * Ⲇ, 46 * Ⲇ, Ⲇ * 105, Ⲇ * 44, Ⲇ * 99);
		ᐃ.bezierCurveTo(Ⲇ * 44, 88.5 * Ⲇ, 44 * Ⲇ, Ⲇ * 88.5, Ⲇ * 44, Ⲇ * 78);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8]);
		ᐃ.restore();
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 49, 27 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 64, Ⲇ * 62.5, Ⲇ * 64, 62.5 * Ⲇ, 79 * Ⲇ, Ⲇ * 98);
		ᐃ.bezierCurveTo(74 * Ⲇ, 113 * Ⲇ, 63 * Ⲇ, 121 * Ⲇ, Ⲇ * 50, 122 * Ⲇ);
		ᐃ.bezierCurveTo(35 * Ⲇ, Ⲇ * 123, 22 * Ⲇ, Ⲇ * 109, ᐃΔⲆΔᐃ * Ⲇ, 98 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃᐃΔ], ᐃⲆ[ⲆⲆΔᐃⲆ], Ⲇ * ⲆⲆΔᐃΔ);
		ᐃ.scale(2, ᐃⵠΔⲆ);
		ᐃ.translate(-23 * Ⲇ, Ⲇ * -ⵠⲆⵠΔⵠᐃᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(57 * Ⲇ, 69 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 50, 76 * Ⲇ, 43 * Ⲇ, 75 * Ⲇ, Ⲇ * 38, Ⲇ * 69);
		ᐃ.bezierCurveTo(Ⲇ * 43, 57 * Ⲇ, 43 * Ⲇ, 57 * Ⲇ, 48 * Ⲇ, Ⲇ * 45);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[10]);
		return ⲆⲆ
	}

	function ⵠⵠⲆᐃⵠⵠⵠⵠΔ(Ⲇ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 335 * Ⲇ;
		var ⲆᐃⵠⵠⲆΔⵠ = Ⲇ * 250;
		var ⲆΔΔ = 120 * Ⲇ;
		var ⵠᐃΔᐃⵠΔΔ = 20 * Ⲇ;
		var ΔΔⵠᐃΔᐃⲆ = Ⲇ * 35;
		var ᐃⲆΔⵠⵠΔΔ = Ⲇ * 65;
		var ⵠᐃⵠ = ᐃⲆᐃⵠ * Ⲇ;
		var ᐃᐃΔⵠᐃ = Ⲇ * ᐃΔⲆΔⲆ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.beginPath();
		ᐃ.translate(Ⲇᐃⵠⵠ, 15 * Ⲇ);
		ᐃᐃᐃ(ᐃ, ᐃⲆΔⵠⵠΔΔ, ⵠᐃⵠⵠ, ⲆᐃⵠⵠⲆΔⵠ, ⵠᐃΔᐃⵠΔΔ, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, null, "#69A148", ᐃᐃΔⵠᐃ);
		ᐃ.translate(0, ΔΔⵠᐃΔᐃⲆ);
		ᐃᐃᐃ(ᐃ, ᐃⲆΔⵠⵠΔΔ, ᐃⲆⵠΔ, ⲆᐃⵠⵠⲆΔⵠ, ⵠᐃΔᐃⵠΔΔ, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, null, "#AF352A", ᐃᐃΔⵠᐃ);
		ᐃ.translate(0, ΔΔⵠᐃΔᐃⲆ);
		ᐃᐃᐃ(ᐃ, ᐃⲆΔⵠⵠΔΔ, ⲆⲆⵠⲆ, ⲆᐃⵠⵠⲆΔⵠ, ⵠᐃΔᐃⵠΔΔ, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, null, "#669BB1", ᐃᐃΔⵠᐃ);
		return ⲆⲆ
	}

	function ⵠⲆⲆⵠⲆⵠᐃ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 120;
		ⲆⲆ.height = Ⲇ * 280;
		ᐃ.translate(Ⲇ * -100, -20 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(228.5 * Ⲇ, Ⲇ * 331.953125);
		ᐃ.bezierCurveTo(Ⲇ * 228.5, 12.953125 * Ⲇ, Ⲇ * 228.5, 171.453125 * Ⲇ, 228.5 * Ⲇ, 10.953125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 196.5, Ⲇ * 76.953125, 206.5 * Ⲇ, 78.953125 * Ⲇ, 191.5 * Ⲇ, 114.953125 * Ⲇ);
		ᐃ.bezierCurveTo(162.5 * Ⲇ, Ⲇ * 170.953125, Ⲇ * 206.5, Ⲇ * 220.953125, Ⲇ * 210.5, Ⲇ * 251.953125);
		ᐃ.bezierCurveTo(218.5 * Ⲇ, 287.953125 * Ⲇ, Ⲇ * 220.5, 291.953125 * Ⲇ, 228.5 * Ⲇ, 331.953125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		return ⲆⲆ
	}

	function ⵠⲆⲆΔⲆⲆⲆⵠⵠ(Ⲇ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 950 * Ⲇ;
		var ⲆᐃⵠⵠⲆΔⵠ = 180 * Ⲇ;
		var ⲆΔΔ = 50 * Ⲇ;
		var ⵠᐃΔᐃⵠΔΔ = Ⲇ * 20;
		var ΔΔⵠᐃΔᐃⲆ = 240 * Ⲇ;
		var ᐃⲆΔⵠⵠΔΔ = Ⲇ * 35;
		var ΔᐃᐃⲆⲆⵠⵠ = 1 * Ⲇ;
		var ⵠᐃⵠ = Ⲇ * 4;
		var ᐃᐃΔⵠᐃ = ⲆⵠⵠⲆ * Ⲇ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(ⲆᐃⲆ, ⵠᐃⵠΔΔ * Ⲇ);
		ᐃᐃᐃ(ᐃ, ᐃⲆΔⵠⵠΔΔ, ΔᐃᐃⲆⲆⵠⵠ, ⲆᐃⵠⵠⲆΔⵠ, ⵠᐃΔᐃⵠΔΔ, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, null, "#69A148", ᐃᐃΔⵠᐃ);
		var ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆⵠᐃΔⲆᐃ];
		ᐃ.drawImage(ⵠΔ, 17, -ᐃΔⲆΔⲆᐃⵠ);
		ᐃ.translate(ΔΔⵠᐃΔᐃⲆ, ᐃΔΔ);
		ᐃᐃᐃ(ᐃ, ᐃⲆΔⵠⵠΔΔ, ΔᐃᐃⲆⲆⵠⵠ, ⲆᐃⵠⵠⲆΔⵠ, ⵠᐃΔᐃⵠΔΔ, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, null, "#AF352A", ᐃᐃΔⵠᐃ);
		var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆⲆⵠᐃΔⲆ];
		ᐃ.drawImage(ⵠΔ, 17, -9);
		ᐃ.translate(ΔΔⵠᐃΔᐃⲆ, ⵠᐃⵠⵠ);
		ᐃᐃᐃ(ᐃ, ᐃⲆΔⵠⵠΔΔ, ΔᐃᐃⲆⲆⵠⵠ, ⲆᐃⵠⵠⲆΔⵠ, ⵠᐃΔᐃⵠΔΔ, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, null, "#669BB1", ᐃᐃΔⵠᐃ);
		var ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃᐃⵠⵠⲆΔ];
		ᐃ.drawImage(ⵠΔ, ⵠᐃⲆⲆⲆ, -ⲆᐃⵠⲆⵠ);
		ᐃ.translate(ΔΔⵠᐃΔᐃⲆ, ⵠⵠΔΔ);
		ᐃᐃᐃ(ᐃ, ᐃⲆΔⵠⵠΔΔ, ΔᐃᐃⲆⲆⵠⵠ, ⲆᐃⵠⵠⲆΔⵠ, ⵠᐃΔᐃⵠΔΔ, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, null, "#074A87", ᐃᐃΔⵠᐃ);
		var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⲆⵠΔᐃⵠ];
		ᐃ.drawImage(ⵠΔ, ΔⲆⵠᐃΔⲆⲆ, -8);
		return ⲆⲆ
	}

	function ΔⲆΔⵠᐃΔᐃᐃⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 65;
		ⲆⲆ.height = Ⲇ * 131;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(3, ΔΔⲆⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(21.25 * Ⲇ, Ⲇ * 88.9375);
		ᐃ.bezierCurveTo(19.25 * Ⲇ, 57.9375 * Ⲇ, Ⲇ * 19.25, 57.9375 * Ⲇ, 17.25 * Ⲇ, Ⲇ * 26.9375);
		ᐃ.bezierCurveTo(Ⲇ * 24.25, 20.9375 * Ⲇ, Ⲇ * 24.25, 20.9375 * Ⲇ, 31.25 * Ⲇ, 14.9375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 32.75, Ⲇ * 54.4375, Ⲇ * 32.75, Ⲇ * 54.4375, Ⲇ * 34.25, Ⲇ * 93.9375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 30.25, 5.9375 * Ⲇ);
		ᐃ.bezierCurveTo(39.25 * Ⲇ, 14.9375 * Ⲇ, Ⲇ * 39.25, Ⲇ * 14.9375, 48.25 * Ⲇ, 23.9375 * Ⲇ);
		ᐃ.bezierCurveTo(44.75 * Ⲇ, 56.4375 * Ⲇ, 44.75 * Ⲇ, 56.4375 * Ⲇ, 41.25 * Ⲇ, Ⲇ * 88.9375);
		ᐃ.bezierCurveTo(Ⲇ * 36.25, Ⲇ * 88.9375, Ⲇ * 36.25, 88.9375 * Ⲇ, Ⲇ * 31.25, 88.9375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 30.75, 47.9375 * Ⲇ, Ⲇ * 30.75, Ⲇ * 47.9375, 30.25 * Ⲇ, Ⲇ * 6.9375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ], ᐃⲆ[ⵠᐃΔ], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(7.25 * Ⲇ, 85.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 31.75, Ⲇ * 85.4375, Ⲇ * 31.75, Ⲇ * 85.4375, 56.25 * Ⲇ, Ⲇ * 85.4375);
		ᐃ.bezierCurveTo(Ⲇ * 51.25, 91.9375 * Ⲇ, 51.25 * Ⲇ, 91.9375 * Ⲇ, Ⲇ * 46.25, 98.4375 * Ⲇ);
		ᐃ.bezierCurveTo(30.25 * Ⲇ, Ⲇ * 98.4375, Ⲇ * 30.25, Ⲇ * 98.4375, Ⲇ * 14.25, 98.4375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], Ⲇ * ⲆΔⵠᐃΔ);
		ᐃ.save();
		ᐃ.translate(31.25 * Ⲇ, Ⲇ * 108.9375);
		ᐃᐃᐃ(ᐃ, -6 * Ⲇ, Ⲇ * -14.5, Ⲇ * 12, Ⲇ * 29, Ⲇ * ⵠᐃᐃⵠⵠ);
		ᐃ.restore();
		ᐃ.globalAlpha = 1;
		ᐃ.translate(-3, 0);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(21.25 * Ⲇ, 88.9375 * Ⲇ);
		ᐃ.bezierCurveTo(19.25 * Ⲇ, 57.9375 * Ⲇ, 19.25 * Ⲇ, 57.9375 * Ⲇ, 17.25 * Ⲇ, Ⲇ * 26.9375);
		ᐃ.bezierCurveTo(Ⲇ * 24.25, 20.9375 * Ⲇ, 24.25 * Ⲇ, Ⲇ * 20.9375, Ⲇ * 31.25, Ⲇ * 14.9375);
		ᐃ.bezierCurveTo(32.75 * Ⲇ, Ⲇ * 54.4375, Ⲇ * 32.75, 54.4375 * Ⲇ, Ⲇ * 34.25, Ⲇ * 93.9375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 30.25, 5.9375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 39.25, 14.9375 * Ⲇ, Ⲇ * 39.25, 14.9375 * Ⲇ, 48.25 * Ⲇ, 23.9375 * Ⲇ);
		ᐃ.bezierCurveTo(44.75 * Ⲇ, Ⲇ * 56.4375, 44.75 * Ⲇ, 56.4375 * Ⲇ, Ⲇ * 41.25, 88.9375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 36.25, 88.9375 * Ⲇ, Ⲇ * 36.25, 88.9375 * Ⲇ, 31.25 * Ⲇ, 88.9375 * Ⲇ);
		ᐃ.bezierCurveTo(30.75 * Ⲇ, 47.9375 * Ⲇ, 30.75 * Ⲇ, Ⲇ * 47.9375, 30.25 * Ⲇ, Ⲇ * 6.9375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[1], ⲆΔⵠᐃΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 7.25, 85.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 31.75, 85.4375 * Ⲇ, Ⲇ * 31.75, 85.4375 * Ⲇ, Ⲇ * 56.25, 85.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 51.25, Ⲇ * 91.9375, 51.25 * Ⲇ, 91.9375 * Ⲇ, 46.25 * Ⲇ, Ⲇ * 98.4375);
		ᐃ.bezierCurveTo(30.25 * Ⲇ, 98.4375 * Ⲇ, 30.25 * Ⲇ, 98.4375 * Ⲇ, Ⲇ * 14.25, 98.4375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ᐃΔᐃⲆⲆ], Ⲇ * 4);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 31.25, 108.9375 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ⵠΔΔⲆΔ, -14.5 * Ⲇ, Ⲇ * ᐃⵠᐃΔⲆ, 29 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⲆⲆⲆᐃᐃ], ΔᐃΔⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 31.25, Ⲇ * 73.4375);
		ᐃ.bezierCurveTo(33.25 * Ⲇ, 77.9375 * Ⲇ, Ⲇ * 33.25, Ⲇ * 77.9375, 35.25 * Ⲇ, 82.4375 * Ⲇ);
		ᐃ.bezierCurveTo(33.25 * Ⲇ, 87.4375 * Ⲇ, 33.25 * Ⲇ, Ⲇ * 87.4375, Ⲇ * 31.25, 92.4375 * Ⲇ);
		ᐃ.bezierCurveTo(29.25 * Ⲇ, Ⲇ * 87.9375, Ⲇ * 29.25, 87.9375 * Ⲇ, 27.25 * Ⲇ, Ⲇ * 83.4375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆ], ᐃⲆ[1], Ⲇ * ⲆᐃᐃΔ);
		return ⲆⲆ
	}

	function Ⲇⵠᐃᐃⵠⵠⵠᐃᐃ(Ⲇ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 321 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 345;
		ᐃ.translate(0, 5 * Ⲇ);
		ᐃ.translate(ⵠⲆⵠ, ΔⵠⵠᐃᐃⵠΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, 160.5 * Ⲇ, Ⲇ * 159.5, 156.39595138242822 * Ⲇ);
		ᐃⵠ(ᐃ, Δ[441], Δ[441], Ⲇ * ᐃᐃⲆⵠ);
		ᐃ.translate(ⵠᐃⵠⵠ, -20 * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 160.5, Ⲇ * 159.5, Ⲇ * 156.39595138242822);
		ᐃⵠ(ᐃ, Δ[193], Δ[234], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(31.999969482421875 * Ⲇ, 163.07290649414062 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 22.999969482421875, Ⲇ * 67.07290649414062, 106 * Ⲇ, 20.072906494140625 * Ⲇ, 162 * Ⲇ, 23.072906494140625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 269.9999694824219, Ⲇ * 31.072906494140625, Ⲇ * 292.9999694824219, Ⲇ * 120.07290649414062, 294.9999694824219 * Ⲇ, 161.07290649414062 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 165.49996948242188, Ⲇ * 162.07290649414062, Ⲇ * 165.49996948242188, 162.07290649414062 * Ⲇ, Ⲇ * 35.999969482421875, 163.07290649414062 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, Δ[51]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 32.999969482421875, Ⲇ * 165.07290649414062);
		ᐃ.bezierCurveTo(16.999969482421875 * Ⲇ, Ⲇ * 221.07290649414062, Ⲇ * 85, Ⲇ * 289.0729064941406, 156 * Ⲇ, Ⲇ * 294.0729064941406);
		ᐃ.bezierCurveTo(263.9999694824219 * Ⲇ, Ⲇ * 293.0729064941406, 295.9999694824219 * Ⲇ, Ⲇ * 199.07290649414062, Ⲇ * 294.9999694824219, 159.07290649414062 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, "#071A1B");
		ᐃΔⵠ(ᐃ, 161 * Ⲇ, 158.07290649414062 * Ⲇ, 133.4053971921676 * Ⲇ);
		ᐃⵠ(ᐃ, ⲆᐃⵠΔⵠ, Δ[234], ⲆᐃⲆⲆᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(31.999969482421875 * Ⲇ, 161.62844848632812 * Ⲇ);
		ᐃ.bezierCurveTo(162.49996948242188 * Ⲇ, 161.62844848632812 * Ⲇ, 162.49996948242188 * Ⲇ, 161.62844848632812 * Ⲇ, 292.9999694824219 * Ⲇ, 161.62844848632812 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⵠⲆⵠⲆ, Δ[234], 12 * Ⲇ);
		ᐃ.translate(ΔᐃΔ, Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 66, 158.29513549804688 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 86, Ⲇ * 158.29513549804688, Ⲇ * 86, Ⲇ * 158.29513549804688, Ⲇ * 106, Ⲇ * 158.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[520], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(57.999969482421875 * Ⲇ, 117.29513549804688 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 85, 128.29513549804688 * Ⲇ, 85 * Ⲇ, Ⲇ * 128.29513549804688, 113 * Ⲇ, Ⲇ * 139.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔⵠⲆᐃᐃ, Δ[520], Ⲇ * ᐃⲆⵠⵠΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 95, 90.29513549804688 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 112, 105.79513549804688 * Ⲇ, Ⲇ * 112, Ⲇ * 105.79513549804688, 129 * Ⲇ, Ⲇ * 121.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[520], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(116 * Ⲇ, Ⲇ * 52.850677490234375);
		ᐃ.bezierCurveTo(130 * Ⲇ, Ⲇ * 83.85067749023438, 130 * Ⲇ, 83.85067749023438 * Ⲇ, 144 * Ⲇ, 114.85067749023438 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⵠΔΔΔ, Δ[520], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(159 * Ⲇ, Ⲇ * 61.295135498046875);
		ᐃ.bezierCurveTo(Ⲇ * 160.49996948242188, 92.29513549804688 * Ⲇ, 160.49996948242188 * Ⲇ, Ⲇ * 92.29513549804688, 160 * Ⲇ, Ⲇ * 123.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃΔⵠᐃⵠ, Δ[520], ⲆⲆᐃΔⵠΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(203 * Ⲇ, 51.295135498046875 * Ⲇ);
		ᐃ.bezierCurveTo(190.49996948242188 * Ⲇ, Ⲇ * 83.29513549804688, Ⲇ * 190.49996948242188, 83.29513549804688 * Ⲇ, Ⲇ * 176, Ⲇ * 115.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[520], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(225 * Ⲇ, 89.29513549804688 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 210.49996948242188, Ⲇ * 104.79513549804688, Ⲇ * 210.49996948242188, Ⲇ * 104.79513549804688, Ⲇ * 194, Ⲇ * 120.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[520], ΔΔΔⲆΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 266.9999694824219, 112.29513549804688 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 233.49996948242188, Ⲇ * 127.29513549804688, 233.49996948242188 * Ⲇ, 127.29513549804688 * Ⲇ, Ⲇ * 199, Ⲇ * 142.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[520], ⲆⲆᐃΔⵠΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(256.9999694824219 * Ⲇ, Ⲇ * 155.29513549804688);
		ᐃ.bezierCurveTo(Ⲇ * 238.49996948242188, 156.29513549804688 * Ⲇ, Ⲇ * 238.49996948242188, 156.29513549804688 * Ⲇ, Ⲇ * 219, Ⲇ * 157.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠᐃΔᐃⲆ, Δ[520], Ⲇ * ᐃⵠⵠⵠⲆΔⲆ);
		ᐃ.translate(Ⲇᐃⵠⵠ, Ⲇ * -8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 66, Ⲇ * 158.29513549804688);
		ᐃ.bezierCurveTo(Ⲇ * 86, 158.29513549804688 * Ⲇ, 86 * Ⲇ, Ⲇ * 158.29513549804688, Ⲇ * 106, 158.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔΔᐃⵠΔ, Δ[316], Ⲇ * ΔΔΔⲆΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 57.999969482421875, Ⲇ * 117.29513549804688);
		ᐃ.bezierCurveTo(85 * Ⲇ, 128.29513549804688 * Ⲇ, 85 * Ⲇ, 128.29513549804688 * Ⲇ, 113 * Ⲇ, 139.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[316], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(95 * Ⲇ, Ⲇ * 90.29513549804688);
		ᐃ.bezierCurveTo(112 * Ⲇ, 105.79513549804688 * Ⲇ, Ⲇ * 112, Ⲇ * 105.79513549804688, 129 * Ⲇ, 121.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[316], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 116, 52.850677490234375 * Ⲇ);
		ᐃ.bezierCurveTo(130 * Ⲇ, 83.85067749023438 * Ⲇ, Ⲇ * 130, Ⲇ * 83.85067749023438, 144 * Ⲇ, 114.85067749023438 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃΔⵠᐃⵠ, Δ[316], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 159, 61.295135498046875 * Ⲇ);
		ᐃ.bezierCurveTo(160.49996948242188 * Ⲇ, Ⲇ * 92.29513549804688, Ⲇ * 160.49996948242188, Ⲇ * 92.29513549804688, Ⲇ * 160, 123.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[316], Ⲇ * ⲆⵠⵠⲆⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 203, 51.295135498046875 * Ⲇ);
		ᐃ.bezierCurveTo(190.49996948242188 * Ⲇ, 83.29513549804688 * Ⲇ, 190.49996948242188 * Ⲇ, Ⲇ * 83.29513549804688, Ⲇ * 176, Ⲇ * 115.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[316], ⵠᐃΔⵠᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(225 * Ⲇ, Ⲇ * 89.29513549804688);
		ᐃ.bezierCurveTo(Ⲇ * 210.49996948242188, Ⲇ * 104.79513549804688, 210.49996948242188 * Ⲇ, 104.79513549804688 * Ⲇ, Ⲇ * 194, 120.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠᐃΔᐃⲆ, Δ[316], ⲆⵠⵠⲆⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(266.9999694824219 * Ⲇ, Ⲇ * 112.29513549804688);
		ᐃ.bezierCurveTo(Ⲇ * 233.49996948242188, Ⲇ * 127.29513549804688, Ⲇ * 233.49996948242188, Ⲇ * 127.29513549804688, 199 * Ⲇ, Ⲇ * 142.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃΔⵠᐃⵠ, Δ[316], Ⲇ * ΔⲆΔΔᐃⲆⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(256.9999694824219 * Ⲇ, Ⲇ * 155.29513549804688);
		ᐃ.bezierCurveTo(238.49996948242188 * Ⲇ, Ⲇ * 156.29513549804688, 238.49996948242188 * Ⲇ, 156.29513549804688 * Ⲇ, Ⲇ * 219, Ⲇ * 157.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[316], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(96 * Ⲇ, 166 * Ⲇ);
		ᐃ.bezierCurveTo(88 * Ⲇ, Ⲇ * 117, 129 * Ⲇ, Ⲇ * 92, Ⲇ * 161, Ⲇ * 91);
		ᐃ.bezierCurveTo(Ⲇ * 201, Ⲇ * 90, 223 * Ⲇ, Ⲇ * 121, Ⲇ * 230, Ⲇ * 161);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, "#704618", "#5D3D1A", 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(94.00003051757812 * Ⲇ, 164.40341186523438 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 162.50003051757812, 164.40341186523438 * Ⲇ, 230.00003051757812 * Ⲇ, 165.40341186523438 * Ⲇ, 231.00003051757812 * Ⲇ, Ⲇ * 164.40341186523438);
		ᐃ.bezierCurveTo(Ⲇ * 214.00003051757812, Ⲇ * 267.4034118652344, Ⲇ * 92.00003051757812, 243.40341186523438 * Ⲇ, Ⲇ * 93.00003051757812, 165.40341186523438 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, "#E1DDD5", "#EAE7E4", Ⲇ * ⲆᐃⲆΔⲆ);
		ᐃΔⵠ(ᐃ, 160.00003051757812 * Ⲇ, Ⲇ * 166.49432373046875, 28.30194339616981 * Ⲇ);
		ᐃⵠ(ᐃ, Δ[193], Δ[234], 10 * Ⲇ);
		return ⲆⲆ
	}

	function ΔⲆΔⲆⲆᐃΔΔⵠ(ⲆΔΔⲆΔ) {
		return ⲆΔⲆᐃⵠⲆΔΔᐃ(ⲆΔΔⲆΔ, 56161, 36735, 39690, 8930, 32439)
	}

	function ΔⲆⵠΔⵠⲆᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 144;
		ⲆⲆ.height = Ⲇ * 280;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆΔᐃΔ;
		ᐃ.translate(Ⲇ * 5, ⵠᐃᐃΔᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 62, Ⲇ * 103.79999542236328);
		ᐃ.bezierCurveTo(62.5 * Ⲇ, 148.79999542236328 * Ⲇ, 62.5 * Ⲇ, Ⲇ * 148.79999542236328, Ⲇ * 63, Ⲇ * 193.79999542236328);
		ᐃ.bezierCurveTo(Ⲇ * 63, Ⲇ * 219.79999542236328, 47 * Ⲇ, Ⲇ * 217.79999542236328, Ⲇ * 51, Ⲇ * 230.79999542236328);
		ᐃ.bezierCurveTo(62 * Ⲇ, Ⲇ * 255.79999542236328, Ⲇ * 74, 260.7999954223633 * Ⲇ, Ⲇ * 72, Ⲇ * 248.79999542236328);
		ᐃ.bezierCurveTo(Ⲇ * 65, 226.79999542236328 * Ⲇ, 71 * Ⲇ, 229.79999542236328 * Ⲇ, Ⲇ * 76, 225.79999542236328 * Ⲇ);
		ᐃ.bezierCurveTo(90 * Ⲇ, Ⲇ * 224.79999542236328, 89 * Ⲇ, Ⲇ * 232.79999542236328, Ⲇ * 90, Ⲇ * 243.79999542236328);
		ᐃ.bezierCurveTo(Ⲇ * 95, Ⲇ * 253.79999542236328, Ⲇ * 99, Ⲇ * 249.79999542236328, Ⲇ * 100, 229.79999542236328 * Ⲇ);
		ᐃ.bezierCurveTo(102 * Ⲇ, 213.79999542236328 * Ⲇ, Ⲇ * 98, 214.79999542236328 * Ⲇ, Ⲇ * 90, Ⲇ * 205.79999542236328);
		ᐃ.bezierCurveTo(82 * Ⲇ, 201.79999542236328 * Ⲇ, Ⲇ * 82, Ⲇ * 185.79999542236328, Ⲇ * 82, Ⲇ * 114.79999542236328);
		ᐃ.bezierCurveTo(Ⲇ * 80, 73 * Ⲇ, 82 * Ⲇ, 68 * Ⲇ, Ⲇ * 93, Ⲇ * 53);
		ᐃ.bezierCurveTo(98 * Ⲇ, Ⲇ * 37, 65 * Ⲇ, ᐃΔᐃΔⲆΔⵠ * Ⲇ, Ⲇ * 74, 33 * Ⲇ);
		ᐃ.bezierCurveTo(82 * Ⲇ, Ⲇ * 56, Ⲇ * 77, 52 * Ⲇ, 69 * Ⲇ, Ⲇ * 54);
		ᐃ.bezierCurveTo(Ⲇ * 55, Ⲇ * 57, Ⲇ * 57, Ⲇ * 53, Ⲇ * 54, 39 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 46, 20 * Ⲇ, 37 * Ⲇ, 61 * Ⲇ, Ⲇ * 50, Ⲇ * 68);
		ᐃ.bezierCurveTo(Ⲇ * 65, 81 * Ⲇ, Ⲇ * 60, Ⲇ * 89, 62 * Ⲇ, Ⲇ * 102);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ]);
		ᐃ.globalAlpha = ⵠⵠᐃ;
		ᐃ.translate(Ⲇ * -5, Ⲇ * -ⵠᐃᐃΔᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(62 * Ⲇ, 103.79999542236328 * Ⲇ);
		ᐃ.bezierCurveTo(62.5 * Ⲇ, 148.79999542236328 * Ⲇ, 62.5 * Ⲇ, 148.79999542236328 * Ⲇ, 63 * Ⲇ, 193.79999542236328 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 63, Ⲇ * 219.79999542236328, 47 * Ⲇ, 217.79999542236328 * Ⲇ, Ⲇ * 51, Ⲇ * 230.79999542236328);
		ᐃ.bezierCurveTo(62 * Ⲇ, Ⲇ * 255.79999542236328, 74 * Ⲇ, 260.7999954223633 * Ⲇ, 72 * Ⲇ, 248.79999542236328 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 65, 226.79999542236328 * Ⲇ, 71 * Ⲇ, 229.79999542236328 * Ⲇ, Ⲇ * 76, Ⲇ * 225.79999542236328);
		ᐃ.bezierCurveTo(90 * Ⲇ, 224.79999542236328 * Ⲇ, Ⲇ * 89, Ⲇ * 232.79999542236328, Ⲇ * 90, 243.79999542236328 * Ⲇ);
		ᐃ.bezierCurveTo(95 * Ⲇ, 253.79999542236328 * Ⲇ, Ⲇ * 99, 249.79999542236328 * Ⲇ, Ⲇ * ΔⲆΔΔΔ, 229.79999542236328 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 102, Ⲇ * 213.79999542236328, Ⲇ * 98, Ⲇ * 214.79999542236328, 90 * Ⲇ, Ⲇ * 205.79999542236328);
		ᐃ.bezierCurveTo(Ⲇ * 82, Ⲇ * 201.79999542236328, Ⲇ * 82, Ⲇ * 185.79999542236328, Ⲇ * 82, 114.79999542236328 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 80, Ⲇ * 73, 82 * Ⲇ, Ⲇ * 68, Ⲇ * 93, 53 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 98, 37 * Ⲇ, Ⲇ * 65, Ⲇ * ᐃᐃⵠⵠⲆᐃⵠ, 74 * Ⲇ, 33 * Ⲇ);
		ᐃ.bezierCurveTo(82 * Ⲇ, 56 * Ⲇ, 77 * Ⲇ, 52 * Ⲇ, Ⲇ * 69, 54 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 55, 57 * Ⲇ, 57 * Ⲇ, Ⲇ * 53, 54 * Ⲇ, 39 * Ⲇ);
		ᐃ.bezierCurveTo(46 * Ⲇ, Ⲇ * 20, Ⲇ * 37, 61 * Ⲇ, Ⲇ * 50, Ⲇ * 68);
		ᐃ.bezierCurveTo(65 * Ⲇ, 81 * Ⲇ, Ⲇ * 60, 89 * Ⲇ, 62 * Ⲇ, Ⲇ * 102);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃ], ᐃⲆ[ᐃⲆᐃⵠ], ⲆⵠⵠⵠⲆ * Ⲇ);
		return ⲆⲆ
	}

	function ⲆᐃⵠⵠⲆΔΔⵠᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 118;
		ⲆⲆ.height = Ⲇ * 129;
		ᐃ.save();
		ᐃ.translate(90 * Ⲇ, Ⲇ * 90);
		ᐃᐃᐃ(ᐃ, -86.5 * Ⲇ, -86 * Ⲇ, Ⲇ * 110, Ⲇ * 110, Ⲇ * ΔᐃⲆⲆⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠΔΔ], ΔᐃΔⵠ);
		ᐃ.save();
		ᐃᐃᐃ(ᐃ, Ⲇ * 30, 115 * Ⲇ, 60 * Ⲇ, 5 * Ⲇ, ᐃᐃᐃⵠⲆⲆᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠΔⲆ], ᐃⲆ[3], ΔᐃΔΔ);
		ᐃ.save();
		ᐃᐃᐃ(ᐃ, Ⲇ * 50, Ⲇ * 117, Ⲇ * 20, Ⲇ * 10, 15 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		return ⲆⲆ
	}

	function ⵠΔᐃΔΔⲆΔ(ⲆⵠⵠⲆΔⲆⲆ, ⲆᐃᐃⲆᐃᐃⵠ, ⲆᐃⵠⲆΔⵠⵠ, ⲆⵠⲆⲆΔ) {
		ⵠⵠⵠⲆⵠⲆᐃ(ᐃΔⲆⲆᐃ, ⲆⵠⵠⲆΔⲆⲆ, ⲆᐃᐃⲆᐃᐃⵠ, ⲆᐃⵠⲆΔⵠⵠ, ⲆⵠⲆⲆΔ);
		const ⲆⲆⵠⵠⲆⲆᐃΔΔ = ΔⲆⵠⲆⲆⲆΔ(ᐃⲆⵠᐃ[ⲆᐃⲆ], ᐃⲆⵠᐃ[1]);
		const ΔⵠΔⲆⵠΔᐃΔΔ = ⵠᐃⵠⵠⲆⲆᐃ(ᐃⲆⵠᐃ[ΔᐃΔⲆ], ᐃⲆⵠᐃ[3], ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[ⲆΔᐃ]);
		const ⲆⲆᐃΔᐃⲆΔⵠᐃ = 12493 ^ ⲆⲆⵠⵠⲆⲆᐃΔΔ;
		return ⲆⲆᐃΔᐃⲆΔⵠᐃ
	}

	function ⲆΔΔⵠᐃΔΔ(Ⲇ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 600 * Ⲇ;
		var ⲆΔΔ = 22 * Ⲇ;
		var ⵠᐃⵠ = Ⲇ * 4;
		var ᐃᐃΔⵠᐃ = ⲆⲆᐃΔᐃ * Ⲇ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃᐃᐃ(ᐃ, ⵠᐃᐃΔᐃ * Ⲇ, ⲆΔΔΔ * Ⲇ, Δⵠᐃ - ⵠⲆⲆᐃⵠ * Ⲇ, ⲆΔΔ - ⲆΔⵠᐃⲆ * Ⲇ, ⵠᐃⵠ);
		ᐃⵠ(ᐃ, null, "#BBE8EF", ᐃᐃΔⵠᐃ);
		return ⲆⲆ
	}

	function ᐃΔⲆΔΔᐃᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 47;
		ⲆⲆ.height = Ⲇ * 60;
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 47 * Ⲇ;
		ⲆⲆ.height = 60 * Ⲇ;
		ᐃΔⵠ(ᐃ, 23.5 * Ⲇ, 20.734375 * Ⲇ, 15.132745950421556 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠⲆⵠΔ], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, 23.5 * Ⲇ, Ⲇ * 20.734375, Ⲇ * 18.601075237738275);
		ᐃⵠ(ᐃ, ΔᐃᐃⵠⲆ, ᐃⲆ[1], 4 * Ⲇ);
		ᐃΔⵠ(ᐃ, 23.5 * Ⲇ, Ⲇ * 20.734375, 11.40175425099138 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[1], Ⲇ * ΔᐃΔⲆΔ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 23, 38.734375 * Ⲇ);
		ᐃ.rotate(ΔΔⲆⲆ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -21.5, -ⵠᐃΔⵠⲆ * Ⲇ, 43 * Ⲇ, 38 * Ⲇ, ⲆᐃⲆⲆᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃⵠ], ᐃⲆ[ⵠⵠⵠΔ], ⲆⵠⵠⲆ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(23.5 * Ⲇ, 43.734375 * Ⲇ);
		ᐃ.rotate(.5235987755982988);
		ᐃⵠΔⵠ(ᐃ, 3, 8.06225774829855 * Ⲇ, ⲆⲆⵠⲆ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃΔⵠ(ᐃ, Ⲇ * 23.5, Ⲇ * 35.734375, 7.0710678118654755 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔᐃⲆ]);
		return ⲆⲆ
	}

	function ⲆᐃⲆⲆⵠᐃΔⲆᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 170 * Ⲇ;
		ⲆⲆ.height = 170 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆΔᐃΔ;
		ᐃ.translate(Ⲇ * -10, Ⲇ * ⵠᐃᐃⵠⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 72.5, 4.109375 * Ⲇ);
		ᐃ.bezierCurveTo(117 * Ⲇ, 9.609375 * Ⲇ, Ⲇ * 117, Ⲇ * 9.609375, Ⲇ * 161.5, 15.109375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 134.5, Ⲇ * 106.109375, Ⲇ * 110.5, Ⲇ * 130.109375, Ⲇ * 63.5, 145.109375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 33.5, Ⲇ * 120.609375, 33.5 * Ⲇ, Ⲇ * 120.609375, 3.5 * Ⲇ, Ⲇ * 96.109375);
		ᐃ.bezierCurveTo(Ⲇ * 82.5, 75.109375 * Ⲇ, Ⲇ * 69.5, 29.109375 * Ⲇ, Ⲇ * 71.5, 6.109375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
		ᐃ.globalAlpha = ᐃⵠⵠ;
		ᐃ.translate(10 * Ⲇ, Ⲇ * -10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(72.5 * Ⲇ, Ⲇ * 4.109375);
		ᐃ.bezierCurveTo(117 * Ⲇ, 9.609375 * Ⲇ, Ⲇ * 117, Ⲇ * 9.609375, Ⲇ * 161.5, Ⲇ * 15.109375);
		ᐃ.bezierCurveTo(134.5 * Ⲇ, Ⲇ * 106.109375, Ⲇ * 110.5, 130.109375 * Ⲇ, 63.5 * Ⲇ, 145.109375 * Ⲇ);
		ᐃ.bezierCurveTo(33.5 * Ⲇ, Ⲇ * 120.609375, 33.5 * Ⲇ, Ⲇ * 120.609375, 3.5 * Ⲇ, Ⲇ * 96.109375);
		ᐃ.bezierCurveTo(82.5 * Ⲇ, Ⲇ * 75.109375, Ⲇ * 69.5, 29.109375 * Ⲇ, 71.5 * Ⲇ, 6.109375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ], ᐃⲆ[ⲆⲆⵠᐃ], Ⲇ * 10);
		return ⲆⲆ
	}

	function ᐃⵠⵠΔᐃᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 105 * Ⲇ;
		ⲆⲆ.height = 144 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ᐃⵠⵠ;
		ᐃ.translate(-5 * Ⲇ, 0 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 52.5, 91.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -4.5 * Ⲇ, Ⲇ * -39, Ⲇ * 9, Ⲇ * 78, Ⲇ * ᐃΔᐃⲆⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔᐃ], ᐃⲆ[0], 3 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(53 * Ⲇ, 36 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -29 * Ⲇ, Ⲇ * -17.5, 58 * Ⲇ, 35 * Ⲇ, ⵠⵠⲆⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔᐃ], ᐃⲆ[ⵠΔⵠⲆ], Ⲇ * 4);
		ᐃ.save();
		ᐃ.translate(53.5 * Ⲇ, 35.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -26.5 * Ⲇ, Ⲇ * -ᐃᐃⵠΔⵠ, Ⲇ * 53, 30 * Ⲇ, Δᐃⵠᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ], ᐃⲆ[ⵠᐃΔ], Ⲇ * ⲆΔⲆᐃΔ);
		ᐃ.translate(5 * Ⲇ, Ⲇ * ΔΔⲆⲆ);
		ᐃ.globalAlpha = ᐃΔⵠΔ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 52.5, 91.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -4.5, -39 * Ⲇ, Ⲇ * 9, 78 * Ⲇ, Ⲇ * ᐃᐃⲆΔΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆⵠᐃ], Ⲇ * 3);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 53, Ⲇ * 36);
		ᐃᐃᐃ(ᐃ, -29 * Ⲇ, -17.5 * Ⲇ, Ⲇ * 58, 35 * Ⲇ, 5 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], ⲆⵠⵠⲆ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(53.5 * Ⲇ, 35.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -26.5 * Ⲇ, Ⲇ * -ΔᐃⲆⲆⲆ, Ⲇ * 53, 30 * Ⲇ, 5 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔΔ], ᐃⲆ[6], ΔᐃΔⲆΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 49, Ⲇ * 60.5);
		ᐃ.bezierCurveTo(Ⲇ * 44, Ⲇ * 56.5, 44 * Ⲇ, 56.5 * Ⲇ, Ⲇ * 39, Ⲇ * 52.5);
		ᐃ.bezierCurveTo(39 * Ⲇ, 46.5 * Ⲇ, 39 * Ⲇ, Ⲇ * 46.5, 39 * Ⲇ, 40.5 * Ⲇ);
		ᐃ.bezierCurveTo(44 * Ⲇ, 44 * Ⲇ, Ⲇ * 44, Ⲇ * 44, Ⲇ * 49, 47.5 * Ⲇ);
		ᐃ.bezierCurveTo(49 * Ⲇ, 54 * Ⲇ, 49 * Ⲇ, Ⲇ * 54, Ⲇ * 49, 60.5 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆⵠ], ᐃⲆ[ᐃΔⲆⵠⵠ], Ⲇ * 3);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(66 * Ⲇ, 40.5 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 66, Ⲇ * 46.5, 66 * Ⲇ, 46.5 * Ⲇ, Ⲇ * 66, 52.5 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 60.5, 56.5 * Ⲇ, 60.5 * Ⲇ, 56.5 * Ⲇ, 55 * Ⲇ, 60.5 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 56, 53 * Ⲇ, 56 * Ⲇ, 53 * Ⲇ, 57 * Ⲇ, 45.5 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 61.5, Ⲇ * 43, Ⲇ * 61.5, 43 * Ⲇ, 66 * Ⲇ, 40.5 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔᐃΔΔ], ᐃⲆ[6], 3 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 52, 33.5 * Ⲇ);
		ᐃ.bezierCurveTo(55.5 * Ⲇ, 41 * Ⲇ, 55.5 * Ⲇ, Ⲇ * 41, 59 * Ⲇ, Ⲇ * 48.5);
		ᐃ.bezierCurveTo(Ⲇ * 56, Ⲇ * 58, Ⲇ * 56, Ⲇ * 58, 53 * Ⲇ, 67.5 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 49, 58 * Ⲇ, Ⲇ * 49, 58 * Ⲇ, Ⲇ * 45, Ⲇ * 48.5);
		ᐃ.bezierCurveTo(Ⲇ * 48.5, 41 * Ⲇ, 48.5 * Ⲇ, 41 * Ⲇ, Ⲇ * 52, Ⲇ * 33.5);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃⵠⲆΔᐃ], ᐃⲆ[8], Ⲇ * 3);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(52 * Ⲇ, Ⲇ * 47.5);
		ᐃ.bezierCurveTo(Ⲇ * 54.5, Ⲇ * 50.5, 54.5 * Ⲇ, Ⲇ * 50.5, 57 * Ⲇ, 53.5 * Ⲇ);
		ᐃ.bezierCurveTo(55 * Ⲇ, Ⲇ * 60, 55 * Ⲇ, 60 * Ⲇ, Ⲇ * 53, 66.5 * Ⲇ);
		ᐃ.bezierCurveTo(50.5 * Ⲇ, 61 * Ⲇ, Ⲇ * 50.5, 61 * Ⲇ, Ⲇ * 48, Ⲇ * 55.5);
		ᐃ.bezierCurveTo(Ⲇ * 50, Ⲇ * 52, Ⲇ * 50, Ⲇ * 52, Ⲇ * 52, Ⲇ * 48.5);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠᐃⲆⵠ], ᐃⲆ[ⲆΔⲆⲆⵠ], Ⲇ * 3);
		return ⲆⲆ
	}

	function ᐃⵠᐃⵠΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 69;
		ⲆⲆ.height = Ⲇ * 120;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 30, Ⲇ * 84);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ⲆⵠⵠⵠⲆ, Ⲇ * -66.5, 8 * Ⲇ, Ⲇ * ⵠⲆⲆⵠᐃΔᐃ, Ⲇ * ⵠᐃᐃⵠⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 30, Ⲇ * 45);
		ᐃᐃᐃ(ᐃ, Ⲇ * -9.5, -6.5 * Ⲇ, Ⲇ * 16, 13 * Ⲇ, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.save();
		ᐃ.translate(30 * Ⲇ, 17 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -7.5, Ⲇ * -5.5, 12 * Ⲇ, ⲆΔΔᐃⵠⵠⵠ * Ⲇ, ᐃⲆⲆⵠⲆ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ]);
		ᐃ.save();
		ᐃ.translate(30 * Ⲇ, 31 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -26 * Ⲇ, Ⲇ * -14.5, Ⲇ * 52, Ⲇ * 29, ⲆΔⲆⲆ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ᐃⲆΔ;
		ᐃ.save();
		ᐃ.translate(36 * Ⲇ, 79.140625 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -6 * Ⲇ, -66.5 * Ⲇ, 8 * Ⲇ, 100 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃΔ], ᐃⲆ[2], Ⲇ * ᐃⵠᐃⲆ);
		ᐃ.save();
		ᐃ.translate(35 * Ⲇ, 40.140625 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -9.5, Ⲇ * -6.5, 16 * Ⲇ, Ⲇ * 13, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆ], ᐃⲆ[4], ΔⲆΔΔ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 35, Ⲇ * 12.140625);
		ᐃᐃᐃ(ᐃ, Ⲇ * -7.5, -5.5 * Ⲇ, 12 * Ⲇ, Ⲇ * 11, Ⲇ * ⵠΔΔΔⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔⵠⲆᐃ], Ⲇ * ᐃᐃΔⵠ);
		ᐃ.save();
		ᐃ.translate(34.5 * Ⲇ, Ⲇ * 26.140625);
		ᐃᐃᐃ(ᐃ, Ⲇ * -26, Ⲇ * -14.5, 52 * Ⲇ, 29 * Ⲇ, Ⲇ * 5);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], Ⲇ * 3);
		return ⲆⲆ
	}

	function ⵠⵠⵠΔⵠᐃⵠ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 110;
		ⲆⲆ.height = 110 * Ⲇ;
		ᐃ.globalAlpha = .2;
		ᐃΔⵠ(ᐃ, 55 * Ⲇ, 55 * Ⲇ, 55 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		return ⲆⲆ
	}

	function ᐃΔⵠⵠⲆⲆᐃ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 137 * Ⲇ;
		ⲆⲆ.height = 129 * Ⲇ;
		ᐃ.globalAlpha = .5;
		ᐃΔⵠ(ᐃ, 69 * Ⲇ, 64 * Ⲇ, 48.16637831516918 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃΔ]);
		ᐃ.globalAlpha = .7;
		ᐃΔⵠ(ᐃ, 69 * Ⲇ, 64 * Ⲇ, 38.23105625617661 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.globalAlpha = .7;
		ᐃΔⵠ(ᐃ, 69 * Ⲇ, 64 * Ⲇ, Ⲇ * 32.01562118716424);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠΔⲆ], ᐃⲆ[ⵠΔⲆΔΔ], ΔⵠⲆⵠⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(72 * Ⲇ, Ⲇ * 41);
		ᐃ.bezierCurveTo(52 * Ⲇ, Ⲇ * 41, 48 * Ⲇ, Ⲇ * 50, Ⲇ * 45, Ⲇ * 58);
		ᐃ.bezierCurveTo(Ⲇ * 43, 67 * Ⲇ, 45 * Ⲇ, Ⲇ * 68, Ⲇ * 46, 72 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 52, Ⲇ * 53, 60 * Ⲇ, Ⲇ * 48, Ⲇ * 72, 42 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(93 * Ⲇ, 62 * Ⲇ);
		ᐃ.bezierCurveTo(95 * Ⲇ, 72 * Ⲇ, Ⲇ * 90, 81 * Ⲇ, Ⲇ * 81, Ⲇ * 87);
		ᐃ.bezierCurveTo(74 * Ⲇ, Ⲇ * 91, 69 * Ⲇ, Ⲇ * 89, 64 * Ⲇ, Ⲇ * 88);
		ᐃ.bezierCurveTo(77 * Ⲇ, Ⲇ * 83, 84 * Ⲇ, Ⲇ * 82, 92 * Ⲇ, 62 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		return ⲆⲆ
	}

	function ᐃⵠΔΔᐃΔΔ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 161;
		ⲆⲆ.height = Ⲇ * 184;
		ᐃ.translate(0, Ⲇ * 10);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(105.5 * Ⲇ, Ⲇ * 34.609375);
		ᐃ.bezierCurveTo(48.5 * Ⲇ, Ⲇ * 7.609375, 11.5 * Ⲇ, Ⲇ * 58.609375, 20.5 * Ⲇ, 97.609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 44.5, 161.609375 * Ⲇ, 70.5 * Ⲇ, 171.609375 * Ⲇ, 88.5 * Ⲇ, Ⲇ * 156.609375);
		ᐃ.bezierCurveTo(120.5 * Ⲇ, 129.609375 * Ⲇ, Ⲇ * 123.5, 105.609375 * Ⲇ, Ⲇ * 128.5, Ⲇ * 83.609375);
		ᐃ.bezierCurveTo(137.5 * Ⲇ, 79.609375 * Ⲇ, 141.5 * Ⲇ, 79.609375 * Ⲇ, 146.5 * Ⲇ, 81.609375 * Ⲇ);
		ᐃ.bezierCurveTo(153.5 * Ⲇ, Ⲇ * 70.609375, Ⲇ * 151.5, 65.609375 * Ⲇ, 148.5 * Ⲇ, 61.609375 * Ⲇ);
		ᐃ.bezierCurveTo(134.5 * Ⲇ, 60.609375 * Ⲇ, 131.5 * Ⲇ, 63.609375 * Ⲇ, Ⲇ * 127.5, 66.609375 * Ⲇ);
		ᐃ.bezierCurveTo(127.5 * Ⲇ, 55.609375 * Ⲇ, 125.5 * Ⲇ, 54.609375 * Ⲇ, Ⲇ * 120.5, 51.609375 * Ⲇ);
		ᐃ.bezierCurveTo(128.5 * Ⲇ, Ⲇ * 42.609375, Ⲇ * 136.5, 38.609375 * Ⲇ, 147.5 * Ⲇ, 39.609375 * Ⲇ);
		ᐃ.bezierCurveTo(152.5 * Ⲇ, 23.609375 * Ⲇ, Ⲇ * 147.5, 21.609375 * Ⲇ, Ⲇ * 140.5, 17.609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 120.5, Ⲇ * 17.609375, 114.5 * Ⲇ, 27.609375 * Ⲇ, 106.5 * Ⲇ, 35.609375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(45.5 * Ⲇ, 144.609375 * Ⲇ);
		ᐃ.bezierCurveTo(35.5 * Ⲇ, Ⲇ * 155.609375, 37 * Ⲇ, Ⲇ * 152.109375, Ⲇ * 28.5, Ⲇ * 159.609375);
		ᐃ.bezierCurveTo(16.5 * Ⲇ, 154.609375 * Ⲇ, Ⲇ * 16.5, Ⲇ * 151.609375, Ⲇ * 17.5, 141.609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 25.5, Ⲇ * 134.109375, Ⲇ * 25.5, Ⲇ * 134.109375, 33.5 * Ⲇ, 126.609375 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔᐃ]);
		ᐃ.translate(0, Ⲇ * -ᐃⲆⵠΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 45.5, 144.609375 * Ⲇ);
		ᐃ.bezierCurveTo(35.5 * Ⲇ, 155.609375 * Ⲇ, 37 * Ⲇ, 152.109375 * Ⲇ, 28.5 * Ⲇ, 159.609375 * Ⲇ);
		ᐃ.bezierCurveTo(16.5 * Ⲇ, 154.609375 * Ⲇ, Ⲇ * 16.5, Ⲇ * 151.609375, Ⲇ * 17.5, Ⲇ * 141.609375);
		ᐃ.bezierCurveTo(Ⲇ * 25.5, Ⲇ * 134.109375, 25.5 * Ⲇ, 134.109375 * Ⲇ, Ⲇ * 33.5, 126.609375 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃΔ], ᐃⲆ[2], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(105.5 * Ⲇ, Ⲇ * 34.609375);
		ᐃ.bezierCurveTo(Ⲇ * 48.5, 7.609375 * Ⲇ, 11.5 * Ⲇ, 58.609375 * Ⲇ, 20.5 * Ⲇ, 97.609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 44.5, Ⲇ * 161.609375, Ⲇ * 70.5, 171.609375 * Ⲇ, Ⲇ * 88.5, Ⲇ * 156.609375);
		ᐃ.bezierCurveTo(120.5 * Ⲇ, Ⲇ * 129.609375, Ⲇ * 123.5, 105.609375 * Ⲇ, Ⲇ * 128.5, 83.609375 * Ⲇ);
		ᐃ.bezierCurveTo(137.5 * Ⲇ, 79.609375 * Ⲇ, 141.5 * Ⲇ, Ⲇ * 79.609375, Ⲇ * 146.5, Ⲇ * 81.609375);
		ᐃ.bezierCurveTo(153.5 * Ⲇ, Ⲇ * 70.609375, 151.5 * Ⲇ, 65.609375 * Ⲇ, Ⲇ * 148.5, Ⲇ * 61.609375);
		ᐃ.bezierCurveTo(Ⲇ * 134.5, Ⲇ * 60.609375, 131.5 * Ⲇ, 63.609375 * Ⲇ, Ⲇ * 127.5, 66.609375 * Ⲇ);
		ᐃ.bezierCurveTo(127.5 * Ⲇ, Ⲇ * 55.609375, 125.5 * Ⲇ, Ⲇ * 54.609375, 120.5 * Ⲇ, 51.609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 128.5, Ⲇ * 42.609375, 136.5 * Ⲇ, Ⲇ * 38.609375, 147.5 * Ⲇ, 39.609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 152.5, Ⲇ * 23.609375, Ⲇ * 147.5, Ⲇ * 21.609375, 140.5 * Ⲇ, Ⲇ * 17.609375);
		ᐃ.bezierCurveTo(Ⲇ * 120.5, Ⲇ * 17.609375, 114.5 * Ⲇ, 27.609375 * Ⲇ, Ⲇ * 106.5, 35.609375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆᐃⵠⲆ], Ⲇ * ⵠΔᐃᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(104.5 * Ⲇ, 35.609375 * Ⲇ);
		ᐃ.bezierCurveTo(71.5 * Ⲇ, Ⲇ * 36.609375, Ⲇ * 57.5, Ⲇ * 52.609375, 58.5 * Ⲇ, Ⲇ * 81.609375);
		ᐃ.bezierCurveTo(59.5 * Ⲇ, Ⲇ * 103.609375, Ⲇ * 66.5, Ⲇ * 107.609375, Ⲇ * 66.5, 116.609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 67.5, Ⲇ * 128.609375, 65.5 * Ⲇ, Ⲇ * 131.609375, 63.5 * Ⲇ, 137.609375 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], ΔΔⵠⵠⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(59.5 * Ⲇ, 72.609375 * Ⲇ);
		ᐃ.bezierCurveTo(38.5 * Ⲇ, Ⲇ * 80.609375, Ⲇ * 43.5, Ⲇ * 81.609375, 37.5 * Ⲇ, Ⲇ * 89.609375);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], ΔᐃΔⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 60.5, 85.609375 * Ⲇ);
		ᐃ.bezierCurveTo(75.5 * Ⲇ, Ⲇ * 91.609375, 76.5 * Ⲇ, Ⲇ * 96.609375, Ⲇ * 81.5, 104.609375 * Ⲇ);
		ᐃⵠ(ᐃ, ⵠⲆᐃᐃⲆ, ᐃⲆ[ⵠᐃⵠⲆ], Ⲇ * ⵠΔΔⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(68.5 * Ⲇ, 122.609375 * Ⲇ);
		ᐃ.bezierCurveTo(79.5 * Ⲇ, Ⲇ * 130.609375, 74.5 * Ⲇ, Ⲇ * 128.609375, 80.5 * Ⲇ, Ⲇ * 134.609375);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆ], ᐃⲆ[2], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 142.5, Ⲇ * 18.609375);
		ᐃ.bezierCurveTo(151.5 * Ⲇ, 28.609375 * Ⲇ, 151.5 * Ⲇ, Ⲇ * 32.609375, 146.5 * Ⲇ, Ⲇ * 40.609375);
		ᐃ.bezierCurveTo(Ⲇ * 137.5, 26.609375 * Ⲇ, 138.5 * Ⲇ, Ⲇ * 24.609375, Ⲇ * 142.5, 19.609375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(146.5 * Ⲇ, Ⲇ * 61.50892639160156);
		ᐃ.bezierCurveTo(Ⲇ * 157.5, Ⲇ * 69.50892639160156, Ⲇ * 150.5, Ⲇ * 79.50892639160156, Ⲇ * 145.5, 81.50892639160156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 140.5, 65.50892639160156 * Ⲇ, Ⲇ * 144.5, Ⲇ * 64.50892639160156, 146.5 * Ⲇ, 62.50892639160156 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		return ⲆⲆ
	}

	function ⵠⵠΔᐃⵠΔⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 450 * Ⲇ;
		ⲆⲆ.height = 260 * Ⲇ;
		var ⵠΔ = ⲆΔⲆᐃᐃⵠⵠ(Ⲇ * ⵠΔΔ, true, ᐃⲆ);
		ᐃ.drawImage(ⵠΔ, 0 * Ⲇ, ⵠⲆⵠ * Ⲇ);
		if (ⲆⵠⲆ == Δᐃ) {
			ᐃ.translate(100 * Ⲇ, Ⲇ * ⵠⲆⵠ);
			ᐃΔⵠ(ᐃ, 113 * Ⲇ, Ⲇ * 120, 66 * Ⲇ);
			ᐃⵠ(ᐃ, ⵠᐃΔᐃⲆ, ᐃⲆ[ⲆⵠⵠⲆ], 13 * Ⲇ);
			var ⵠΔ = ᐃΔⲆⵠⵠⵠⵠ(Ⲇ * .65, ᐃⲆᐃᐃΔ, [Δ[314], Δ[573], Δ[92], Δ[318], Δ[175]]);
			ᐃ.rotate(.7);
			ᐃ.drawImage(ⵠΔ, Ⲇ * 133, Ⲇ * -64);
			ᐃ.rotate(-.7);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 70, 70 * Ⲇ);
			ᐃ.bezierCurveTo(113 * Ⲇ, 120.5 * Ⲇ, Ⲇ * 113, 120.5 * Ⲇ, Ⲇ * 156, 171 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ⲆⲆΔᐃⵠ, ᐃⲆ[4], ΔᐃΔᐃⵠ * Ⲇ)
		} else if (ⵠᐃⵠⲆ == Δᐃ) {
			ᐃ.translate(100 * Ⲇ, Ⲇ * 0);
			ᐃΔⵠ(ᐃ, 113 * Ⲇ, Ⲇ * 120, 66 * Ⲇ);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[4], Ⲇ * ⵠΔᐃⲆⵠᐃᐃ);
			ᐃ.translate(30 * Ⲇ, 40 * Ⲇ);
			ᐃ.save();
			ᐃ.translate(83.5 * Ⲇ, 66.5 * Ⲇ);
			ᐃᐃᐃ(ᐃ, -40.5 * Ⲇ, -29.5 * Ⲇ, 81 * Ⲇ, 59 * Ⲇ, ΔⲆΔⵠⲆ * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, "#dff2f7", Δ[393], Ⲇ * ⵠⲆⵠⲆΔ);
			ᐃΔⵠ(ᐃ, Ⲇ * 22, Ⲇ * 82, ⵠⲆⵠᐃⲆ * Ⲇ);
			ᐃⵠ(ᐃ, "#dff2f7", Δ[393], 7 * Ⲇ);
			ᐃΔⵠ(ᐃ, 145 * Ⲇ, 82 * Ⲇ, 12 * Ⲇ);
			ᐃⵠ(ᐃ, "#dff2f7", Δ[393], Ⲇ * 7);
			var ⵠΔ = ⵠⵠⲆᐃⵠ(.5 * Ⲇ, ᐃⲆᐃⵠΔ, ["#80500b", "#7c4908"]);
			ᐃ.drawImage(ⵠΔ, 10 * Ⲇ, 85 * Ⲇ);
			var ⵠΔ = ⵠⵠⲆᐃⵠ(.5 * Ⲇ, true, ["#80500b", "#7c4908"]);
			ᐃ.drawImage(ⵠΔ, 50 * Ⲇ, 85 * Ⲇ);
			var ⵠΔ = ⵠⵠⲆᐃⵠ(Ⲇ * .5, ᐃⲆᐃᐃΔ, ["#80500b", "#7c4908"]);
			ᐃ.drawImage(ⵠΔ, 90 * Ⲇ, Ⲇ * 85);
			var ⵠΔ = ⵠⲆΔᐃⵠ(1 * Ⲇ, true, [Δ[191], Δ[360]]);
			ᐃ.drawImage(ⵠΔ, 90 * Ⲇ, Ⲇ * 105);
			var ⵠΔ = ⵠⲆΔᐃⵠ(1 * Ⲇ, ᐃⲆᐃᐃΔ, [Δ[191], Δ[360]]);
			ᐃ.drawImage(ⵠΔ, Ⲇ * 90, Ⲇ * 105);
			var ⵠΔ = ⵠⲆΔᐃⵠ(Ⲇ * 1, ⲆΔᐃⵠⵠ, [Δ[191], Δ[360]]);
			ᐃ.drawImage(ⵠΔ, Ⲇ * 30, 125 * Ⲇ);
			var ⵠΔ = ⵠⲆΔᐃⵠ(ⲆⲆⲆᐃ * Ⲇ, ⲆⲆᐃᐃⵠ, [Δ[191], Δ[360]]);
			ᐃ.drawImage(ⵠΔ, Ⲇ * 50, 115 * Ⲇ);
			var ⵠΔ = ⵠⲆΔᐃⵠ(Ⲇ * 1, true, [Δ[191], Δ[360]]);
			ᐃ.drawImage(ⵠΔ, 30 * Ⲇ, Ⲇ * ᐃⲆᐃᐃΔΔⲆ);
			var ⵠΔ = ⵠⲆΔᐃⵠ(Ⲇ * 1, ᐃⲆⲆⲆΔ, [Δ[191], Δ[360]]);
			ᐃ.drawImage(ⵠΔ, Ⲇ * 80, 120 * Ⲇ);
			var ⵠΔ = ⵠⲆΔᐃⵠ(Ⲇ * 1, true, [Δ[191], Δ[360]]);
			ᐃ.drawImage(ⵠΔ, 110 * Ⲇ, 125 * Ⲇ);
			var ⵠΔ = ⵠⲆΔᐃⵠ(Ⲇ * ⲆⵠⲆ, ΔⵠⲆΔⲆ, [Δ[191], Δ[360]]);
			ᐃ.drawImage(ⵠΔ, 120 * Ⲇ, Ⲇ * 105)
		} else if (Δᐃ == 3) {
			ᐃ.translate(Ⲇ * ⵠᐃΔᐃⵠ, Ⲇ * ⵠⲆᐃ);
			ᐃΔⵠ(ᐃ, 113 * Ⲇ, Ⲇ * 120, 66 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃΔⵠᐃⵠ, ᐃⲆ[ᐃᐃΔΔ], Ⲇ * ⵠΔᐃⲆⵠᐃᐃ);
			ᐃ.translate(Ⲇ * 40, 50 * Ⲇ);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 71, Ⲇ * 69);
			ᐃᐃᐃ(ᐃ, Ⲇ * -30, Ⲇ * -42, 60 * Ⲇ, 84 * Ⲇ, Ⲇ * 10);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ⵠⲆᐃᐃⲆ, ᐃⲆ[5], Ⲇ * ΔᐃΔΔ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 42, 28 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 60, 31 * Ⲇ, 60 * Ⲇ, 31 * Ⲇ, Ⲇ * 78, 34 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 82, 34 * Ⲇ, 84 * Ⲇ, 37 * Ⲇ, Ⲇ * 83, Ⲇ * 45);
			ᐃ.bezierCurveTo(Ⲇ * 83, 80 * Ⲇ, 83 * Ⲇ, 80 * Ⲇ, 83 * Ⲇ, 115 * Ⲇ);
			ᐃ.bezierCurveTo(83 * Ⲇ, 120 * Ⲇ, Ⲇ * 80, 122 * Ⲇ, 73 * Ⲇ, 120 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 42, 111 * Ⲇ, 43 * Ⲇ, Ⲇ * 109, 41 * Ⲇ, 102 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 41, Ⲇ * 71, Ⲇ * 41, 71 * Ⲇ, Ⲇ * 41, 40 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[5], Ⲇ * ᐃΔⲆΔⲆ);
			ᐃ.translate(-40 * Ⲇ, Ⲇ * -50);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(70 * Ⲇ, Ⲇ * 70);
			ᐃ.bezierCurveTo(Ⲇ * 113, 120.5 * Ⲇ, 113 * Ⲇ, 120.5 * Ⲇ, Ⲇ * 156, 171 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ⵠⵠⵠⲆⵠ, ᐃⲆ[ⲆⵠⲆⲆⲆ], Ⲇ * 13)
		} else if (ⵠΔΔⵠ == Δᐃ) {
			ᐃ.scale(ⲆΔᐃΔ, 1);
			ᐃ.translate(Ⲇ * 70, 50 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(23 * Ⲇ, Ⲇ * 6);
			ᐃ.bezierCurveTo(25.5 * Ⲇ, 56 * Ⲇ, 25.5 * Ⲇ, 56 * Ⲇ, Ⲇ * 28, 106 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⵠΔΔΔ, ᐃⲆ[ⲆΔⵠⵠᐃ], Ⲇ * ᐃⵠⲆⵠΔ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 59, 10 * Ⲇ);
			ᐃ.bezierCurveTo(61 * Ⲇ, Ⲇ * 51.5, 61 * Ⲇ, Ⲇ * 51.5, 63 * Ⲇ, Ⲇ * 93);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔΔⵠΔ], 14 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(7 * Ⲇ, 55 * Ⲇ);
			ᐃ.bezierCurveTo(33.5 * Ⲇ, Ⲇ * 55, Ⲇ * 33.5, 55 * Ⲇ, 60 * Ⲇ, 55 * Ⲇ);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆⲆⲆᐃᐃ], Ⲇ * ᐃΔᐃΔⲆΔⵠ);
			ᐃ.translate(Ⲇ * 10, Ⲇ * ΔΔⲆⲆ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 123, Ⲇ * ⲆⲆⵠᐃΔ);
			ᐃ.bezierCurveTo(103 * Ⲇ, Ⲇ * 16.5, 103 * Ⲇ, 16.5 * Ⲇ, 83 * Ⲇ, ⵠⵠᐃⵠⲆΔⲆ * Ⲇ);
			ᐃ.bezierCurveTo(83.5 * Ⲇ, 61 * Ⲇ, 83.5 * Ⲇ, 61 * Ⲇ, 84 * Ⲇ, Ⲇ * 105);
			ᐃ.bezierCurveTo(Ⲇ * 106, Ⲇ * 105, Ⲇ * 106, Ⲇ * 105, Ⲇ * 128, Ⲇ * 105);
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[5], ⲆⲆⵠⲆⵠⲆⲆ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(72 * Ⲇ, 63 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 88.5, 62.5 * Ⲇ, 88.5 * Ⲇ, Ⲇ * 62.5, 105 * Ⲇ, 62 * Ⲇ);
			ᐃⵠ(ᐃ, ⵠⲆᐃᐃⲆ, ᐃⲆ[5], ⲆᐃΔⵠⵠⲆᐃ * Ⲇ);
			ᐃ.translate(ⲆⵠΔΔⵠ * Ⲇ, ΔΔⲆⲆⵠ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 141, 8 * Ⲇ);
			ᐃ.bezierCurveTo(143 * Ⲇ, Ⲇ * 50, Ⲇ * 143, Ⲇ * 50, Ⲇ * 145, 92 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 169, Ⲇ * 88.5, Ⲇ * 169, Ⲇ * 88.5, 193 * Ⲇ, Ⲇ * 85);
			ᐃⵠ(ᐃ, ᐃⵠΔΔΔ, ᐃⲆ[5], Ⲇ * ΔΔⲆΔΔ);
			ᐃ.translate(Ⲇ * 10, -ⵠᐃⵠⲆΔ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 205, 124 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 205, 69 * Ⲇ, Ⲇ * 205, 69 * Ⲇ, 205 * Ⲇ, Ⲇ * ⲆⲆᐃⵠΔⵠⵠ);
			ᐃ.bezierCurveTo(Ⲇ * 239, Ⲇ * 15, Ⲇ * 250, Ⲇ * 37, 249 * Ⲇ, 49 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 251, 65 * Ⲇ, 242 * Ⲇ, Ⲇ * 76, Ⲇ * 206, 75 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆᐃⲆⵠ, ᐃⲆ[5], Ⲇ * ᐃΔᐃΔⲆΔⵠ)
		}
		return ⲆⲆ
	}

	function ⲆⵠⵠᐃⲆⵠⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 180;
		ⲆⲆ.height = 120 * Ⲇ;
		ᐃ.translate(-65 * Ⲇ, Ⲇ * -35);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(0, Ⲇ * 10);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 150.5, 63.84375 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -67, -16.5 * Ⲇ, Ⲇ * 134, Ⲇ * 33, ΔΔⵠΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 80.5, 75.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 83, 106.34375 * Ⲇ, Ⲇ * 83, 106.34375 * Ⲇ, Ⲇ * 85.5, Ⲇ * 137.34375);
		ᐃ.bezierCurveTo(Ⲇ * 93, 135.84375 * Ⲇ, 93 * Ⲇ, Ⲇ * 135.84375, 100.5 * Ⲇ, Ⲇ * 134.34375);
		ᐃ.bezierCurveTo(Ⲇ * 99.5, Ⲇ * 100.84375, 99.5 * Ⲇ, 100.84375 * Ⲇ, Ⲇ * 98.5, 67.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(206.5 * Ⲇ, 71.34375 * Ⲇ);
		ᐃ.bezierCurveTo(203.5 * Ⲇ, Ⲇ * 104.34375, Ⲇ * 203.5, 104.34375 * Ⲇ, 200.5 * Ⲇ, 137.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 208.5, 137.34375 * Ⲇ, Ⲇ * 208.5, Ⲇ * 137.34375, Ⲇ * 216.5, Ⲇ * 137.34375);
		ᐃ.bezierCurveTo(Ⲇ * 219, 102.84375 * Ⲇ, Ⲇ * 219, Ⲇ * 102.84375, 221.5 * Ⲇ, 68.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 136.5, Ⲇ * 75.34375);
		ᐃ.bezierCurveTo(139 * Ⲇ, 94.34375 * Ⲇ, 139 * Ⲇ, Ⲇ * 94.34375, Ⲇ * 141.5, 113.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 149.5, Ⲇ * 115.34375, Ⲇ * 149.5, 115.34375 * Ⲇ, Ⲇ * 157.5, 117.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 162, 97.34375 * Ⲇ, 162 * Ⲇ, Ⲇ * 97.34375, Ⲇ * 166.5, Ⲇ * 77.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 152.5, Ⲇ * 80.84375);
		ᐃ.rotate(3.12);
		ᐃᐃᐃ(ᐃ, Ⲇ * -73, -20.5 * Ⲇ, Ⲇ * 146, Ⲇ * 41, Ⲇ * ᐃᐃⲆΔΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠⲆ]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, Ⲇ * -ⲆΔⵠᐃⲆ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 150.5, 63.84375 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -67 * Ⲇ, Ⲇ * -16.5, Ⲇ * 134, Ⲇ * 33, ⲆΔΔΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠΔ], ᐃⲆ[2], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(80.5 * Ⲇ, 75.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 83, Ⲇ * 106.34375, Ⲇ * 83, 106.34375 * Ⲇ, 85.5 * Ⲇ, Ⲇ * 137.34375);
		ᐃ.bezierCurveTo(93 * Ⲇ, Ⲇ * 135.84375, Ⲇ * 93, Ⲇ * 135.84375, Ⲇ * 100.5, Ⲇ * 134.34375);
		ᐃ.bezierCurveTo(Ⲇ * 99.5, Ⲇ * 100.84375, 99.5 * Ⲇ, 100.84375 * Ⲇ, 98.5 * Ⲇ, Ⲇ * 67.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * ⲆΔⲆᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(206.5 * Ⲇ, Ⲇ * 71.34375);
		ᐃ.bezierCurveTo(203.5 * Ⲇ, 104.34375 * Ⲇ, 203.5 * Ⲇ, 104.34375 * Ⲇ, 200.5 * Ⲇ, 137.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 208.5, 137.34375 * Ⲇ, Ⲇ * 208.5, Ⲇ * 137.34375, Ⲇ * 216.5, Ⲇ * 137.34375);
		ᐃ.bezierCurveTo(219 * Ⲇ, Ⲇ * 102.84375, 219 * Ⲇ, 102.84375 * Ⲇ, Ⲇ * 221.5, Ⲇ * 68.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ⲆⵠⲆᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(136.5 * Ⲇ, Ⲇ * 75.34375);
		ᐃ.bezierCurveTo(139 * Ⲇ, Ⲇ * 94.34375, 139 * Ⲇ, 94.34375 * Ⲇ, 141.5 * Ⲇ, Ⲇ * 113.34375);
		ᐃ.bezierCurveTo(Ⲇ * 149.5, Ⲇ * 115.34375, 149.5 * Ⲇ, Ⲇ * 115.34375, Ⲇ * 157.5, Ⲇ * 117.34375);
		ᐃ.bezierCurveTo(Ⲇ * 162, 97.34375 * Ⲇ, Ⲇ * 162, Ⲇ * 97.34375, 166.5 * Ⲇ, Ⲇ * 77.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆ], ᐃⲆ[2], ⵠⲆⲆΔΔ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 152.5, 80.84375 * Ⲇ);
		ᐃ.rotate(3.12);
		ᐃᐃᐃ(ᐃ, -73 * Ⲇ, Ⲇ * -20.5, Ⲇ * 146, 41 * Ⲇ, ⲆⲆⵠᐃⲆ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ΔᐃΔⲆ], Ⲇ * ᐃᐃΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 83.5, 73.34375 * Ⲇ);
		ᐃ.bezierCurveTo(93.5 * Ⲇ, Ⲇ * 70.34375, 105.5 * Ⲇ, Ⲇ * 70.34375, 124.5 * Ⲇ, Ⲇ * 72.34375);
		ᐃ.bezierCurveTo(132.5 * Ⲇ, Ⲇ * 78.34375, 162.5 * Ⲇ, 80.34375 * Ⲇ, 176.5 * Ⲇ, 76.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 194.5, 69.34375 * Ⲇ, Ⲇ * 192.5, 68.34375 * Ⲇ, 199.5 * Ⲇ, 63.34375 * Ⲇ);
		ᐃ.bezierCurveTo(204.5 * Ⲇ, 63.34375 * Ⲇ, Ⲇ * 204.5, Ⲇ * 63.34375, 209.5 * Ⲇ, Ⲇ * 63.34375);
		ᐃ.bezierCurveTo(Ⲇ * 153.5, 82.34375 * Ⲇ, Ⲇ * 157.5, 85.34375 * Ⲇ, Ⲇ * 209.5, 63.34375 * Ⲇ);
		ᐃ.bezierCurveTo(194.5 * Ⲇ, 88.34375 * Ⲇ, 162.5 * Ⲇ, 87.34375 * Ⲇ, Ⲇ * 149.5, Ⲇ * 88.34375);
		ᐃ.bezierCurveTo(Ⲇ * 129.5, Ⲇ * 81.34375, Ⲇ * 103.5, 75.34375 * Ⲇ, Ⲇ * 83.5, 82.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 137.5, 65.34375 * Ⲇ);
		ᐃ.bezierCurveTo(150.5 * Ⲇ, 76.34375 * Ⲇ, 170.5 * Ⲇ, Ⲇ * 71.34375, 174.5 * Ⲇ, Ⲇ * 65.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(221.5 * Ⲇ, 85.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 211.5, Ⲇ * 79.34375, 191.5 * Ⲇ, Ⲇ * 88.34375, 181.5 * Ⲇ, Ⲇ * 96.34375);
		ᐃ.bezierCurveTo(Ⲇ * 201.5, 96.34375 * Ⲇ, 201.5 * Ⲇ, 96.34375 * Ⲇ, 221.5 * Ⲇ, Ⲇ * 96.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 84.5, 89.34375 * Ⲇ);
		ᐃ.bezierCurveTo(102.5 * Ⲇ, 87.34375 * Ⲇ, 112.5 * Ⲇ, 88.34375 * Ⲇ, 119.5 * Ⲇ, 97.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 102, Ⲇ * 98.34375, 102 * Ⲇ, 98.34375 * Ⲇ, Ⲇ * 84.5, Ⲇ * 99.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(208.5 * Ⲇ, 104.34375 * Ⲇ);
		ᐃ.bezierCurveTo(208.5 * Ⲇ, Ⲇ * 110.34375, Ⲇ * 208.5, 110.34375 * Ⲇ, Ⲇ * 208.5, Ⲇ * 116.34375);
		ᐃ.bezierCurveTo(Ⲇ * 211.5, Ⲇ * 110.34375, Ⲇ * 211.5, Ⲇ * 110.34375, 214.5 * Ⲇ, 104.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 87.5, 117.34375 * Ⲇ);
		ᐃ.bezierCurveTo(92 * Ⲇ, 118.84375 * Ⲇ, 92 * Ⲇ, Ⲇ * 118.84375, 96.5 * Ⲇ, 120.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 93, 123.84375 * Ⲇ, 93 * Ⲇ, 123.84375 * Ⲇ, 89.5 * Ⲇ, 127.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(107.5 * Ⲇ, 51.34375 * Ⲇ);
		ᐃ.bezierCurveTo(122.5 * Ⲇ, Ⲇ * 54.34375, 122.5 * Ⲇ, 54.34375 * Ⲇ, 137.5 * Ⲇ, Ⲇ * 57.34375);
		ᐃ.bezierCurveTo(Ⲇ * 118, 57.34375 * Ⲇ, Ⲇ * 118, Ⲇ * 57.34375, Ⲇ * 98.5, 57.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 94.5, Ⲇ * 54.84375, Ⲇ * 94.5, Ⲇ * 54.84375, Ⲇ * 90.5, 52.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(170.5 * Ⲇ, 52.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 179.5, 51.84375 * Ⲇ, 179.5 * Ⲇ, Ⲇ * 51.84375, Ⲇ * 188.5, 51.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 187.5, Ⲇ * 53.84375, 187.5 * Ⲇ, 53.84375 * Ⲇ, Ⲇ * 186.5, 56.34375 * Ⲇ);
		ᐃ.bezierCurveTo(177 * Ⲇ, 56.34375 * Ⲇ, 177 * Ⲇ, Ⲇ * 56.34375, Ⲇ * 167.5, Ⲇ * 56.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 80.5, Ⲇ * 69.34375);
		ᐃ.bezierCurveTo(Ⲇ * 86.5, Ⲇ * 70.34375, 86.5 * Ⲇ, 70.34375 * Ⲇ, 92.5 * Ⲇ, Ⲇ * 71.34375);
		ᐃ.bezierCurveTo(Ⲇ * 86, 73.34375 * Ⲇ, 86 * Ⲇ, Ⲇ * 73.34375, Ⲇ * 79.5, 75.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 222.5, Ⲇ * 75.34375);
		ᐃ.bezierCurveTo(Ⲇ * 214.5, 76.34375 * Ⲇ, Ⲇ * 214.5, 76.34375 * Ⲇ, Ⲇ * 206.5, Ⲇ * 77.34375);
		ᐃ.bezierCurveTo(Ⲇ * 216.5, 79.34375 * Ⲇ, Ⲇ * 216.5, Ⲇ * 79.34375, 226.5 * Ⲇ, Ⲇ * 81.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 116.5, 100.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 128, 97.34375 * Ⲇ, Ⲇ * 128, 97.34375 * Ⲇ, Ⲇ * 139.5, Ⲇ * 94.34375);
		ᐃ.bezierCurveTo(140 * Ⲇ, Ⲇ * 96.84375, Ⲇ * 140, Ⲇ * 96.84375, 140.5 * Ⲇ, Ⲇ * 99.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 112.5, 48.34375 * Ⲇ);
		ᐃ.bezierCurveTo(115.5 * Ⲇ, Ⲇ * 50.84375, 115.5 * Ⲇ, 50.84375 * Ⲇ, 118.5 * Ⲇ, Ⲇ * 53.34375);
		ᐃ.bezierCurveTo(Ⲇ * 131, 50.84375 * Ⲇ, Ⲇ * 131, 50.84375 * Ⲇ, 143.5 * Ⲇ, Ⲇ * 48.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆᐃⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 216.5, 109.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 213, Ⲇ * 114.84375, 213 * Ⲇ, Ⲇ * 114.84375, Ⲇ * 209.5, Ⲇ * 120.34375);
		ᐃ.bezierCurveTo(Ⲇ * 212, Ⲇ * 118.84375, Ⲇ * 212, Ⲇ * 118.84375, 214.5 * Ⲇ, 117.34375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 86.5, Ⲇ * 133.34375);
		ᐃ.bezierCurveTo(89 * Ⲇ, Ⲇ * 127.34375, Ⲇ * 89, 127.34375 * Ⲇ, Ⲇ * 91.5, 121.34375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 92.5, Ⲇ * 127.34375, 92.5 * Ⲇ, Ⲇ * 127.34375, Ⲇ * 93.5, Ⲇ * 133.34375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		return ⲆⲆ
	}

	function ᐃⲆΔⵠⵠⲆᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 400 * Ⲇ;
		ⲆⲆ.height = 400 * Ⲇ;
		ᐃ.globalAlpha = 1;
		ᐃ.translate(Ⲇ * ⵠΔⲆΔⵠ, 20 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 36.5, Ⲇ * 278.0625);
		ᐃ.bezierCurveTo(67.5 * Ⲇ, Ⲇ * 316.0625, Ⲇ * 134.5, Ⲇ * 334.0625, 199.5 * Ⲇ, 319.0625 * Ⲇ);
		ᐃ.bezierCurveTo(254.5 * Ⲇ, 304.0625 * Ⲇ, 346.5 * Ⲇ, Ⲇ * 270.0625, 348.5 * Ⲇ, Ⲇ * 237.0625);
		ᐃ.bezierCurveTo(359.5 * Ⲇ, Ⲇ * 206.0625, 318.5 * Ⲇ, Ⲇ * 129.0625, 262.5 * Ⲇ, Ⲇ * 122.0625);
		ᐃ.bezierCurveTo(213.5 * Ⲇ, 115.0625 * Ⲇ, 166.5 * Ⲇ, Ⲇ * 133.0625, 104.5 * Ⲇ, 166.0625 * Ⲇ);
		ᐃ.bezierCurveTo(54.5 * Ⲇ, 194.0625 * Ⲇ, 23.5 * Ⲇ, 241.0625 * Ⲇ, Ⲇ * 36.5, 277.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(-ⲆⲆᐃᐃᐃ * Ⲇ, Ⲇ * -20);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(36.5 * Ⲇ, 278.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 67.5, 316.0625 * Ⲇ, Ⲇ * 134.5, Ⲇ * 334.0625, Ⲇ * 199.5, Ⲇ * 319.0625);
		ᐃ.bezierCurveTo(254.5 * Ⲇ, Ⲇ * 304.0625, Ⲇ * 346.5, 270.0625 * Ⲇ, Ⲇ * 348.5, Ⲇ * 237.0625);
		ᐃ.bezierCurveTo(Ⲇ * 359.5, 206.0625 * Ⲇ, 318.5 * Ⲇ, Ⲇ * 129.0625, 262.5 * Ⲇ, Ⲇ * 122.0625);
		ᐃ.bezierCurveTo(213.5 * Ⲇ, Ⲇ * 115.0625, 166.5 * Ⲇ, 133.0625 * Ⲇ, 104.5 * Ⲇ, Ⲇ * 166.0625);
		ᐃ.bezierCurveTo(54.5 * Ⲇ, Ⲇ * 194.0625, 23.5 * Ⲇ, 241.0625 * Ⲇ, Ⲇ * 36.5, 277.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⲆ], ᐃⲆ[ΔⲆⲆⵠ], Ⲇ * 19);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 214.5, Ⲇ * 124.0625);
		ᐃ.bezierCurveTo(Ⲇ * 242.5, 125.0625 * Ⲇ, Ⲇ * 272.5, 159.0625 * Ⲇ, Ⲇ * 283.5, Ⲇ * 184.0625);
		ᐃ.bezierCurveTo(277.5 * Ⲇ, 161.0625 * Ⲇ, Ⲇ * 233.5, 128.0625 * Ⲇ, 219.5 * Ⲇ, 122.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], Ⲇ * ΔⲆⲆᐃⵠⵠᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 157.5, 145.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 176.5, 148.0625 * Ⲇ, 205.5 * Ⲇ, 176.0625 * Ⲇ, Ⲇ * 212.5, 197.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 205.5, 178.0625 * Ⲇ, Ⲇ * 177.5, 152.0625 * Ⲇ, 156.5 * Ⲇ, Ⲇ * 142.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠΔᐃᐃⵠ, ᐃⲆ[2], 19 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(103.5 * Ⲇ, 169.0625 * Ⲇ);
		ᐃ.bezierCurveTo(160.5 * Ⲇ, Ⲇ * 166.0625, 228.5 * Ⲇ, 312.0625 * Ⲇ, Ⲇ * 162.5, 323.0625 * Ⲇ);
		ᐃ.bezierCurveTo(128.5 * Ⲇ, Ⲇ * 330.0625, 45.5 * Ⲇ, 312.0625 * Ⲇ, 34.5 * Ⲇ, 268.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 30.5, 238.0625 * Ⲇ, Ⲇ * 44.5, Ⲇ * 222.0625, Ⲇ * 52.5, 211.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 82.5, 174.0625 * Ⲇ, 104.5 * Ⲇ, 166.0625 * Ⲇ, Ⲇ * 119.5, 172.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[2], Ⲇ * ΔⲆᐃΔⲆ);
		ᐃΔⵠ(ᐃ, Ⲇ * 92.5, Ⲇ * 216.0625, 13.892443989449804 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃΔⵠ(ᐃ, Ⲇ * 68.5, Ⲇ * 227.0625, Ⲇ * 8.06225774829855);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃΔⵠ(ᐃ, 85.5 * Ⲇ, Ⲇ * 240.0625, 6.708203932499369 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔⵠ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 147.5, Ⲇ * 294.0625, Ⲇ * 17.46424919657298);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔΔΔ]);
		ᐃΔⵠ(ᐃ, 166.5 * Ⲇ, 273.0625 * Ⲇ, Ⲇ * 6.708203932499369);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔΔ]);
		ᐃΔⵠ(ᐃ, 114.5 * Ⲇ, Ⲇ * 294.0625, Ⲇ * 12.36931687685298);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃΔⵠ(ᐃ, 123.5 * Ⲇ, Ⲇ * 220.0625, 5.830951894845301 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆᐃ]);
		ᐃΔⵠ(ᐃ, 114.5 * Ⲇ, Ⲇ * 259.0625, Ⲇ * 4.123105625617661);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆⲆⲆ]);
		ᐃΔⵠ(ᐃ, 63.5 * Ⲇ, 265.0625 * Ⲇ, Ⲇ * 5.385164807134504);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆᐃ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 148.5, Ⲇ * 235.0625, 4.47213595499958 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔⲆΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 194.5, 313.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 222.5, 306.0625 * Ⲇ, Ⲇ * 319.5, Ⲇ * 271.0625, 337.5 * Ⲇ, 241.0625 * Ⲇ);
		ᐃ.bezierCurveTo(274.5 * Ⲇ, 270.0625 * Ⲇ, Ⲇ * 216.5, 288.0625 * Ⲇ, Ⲇ * 199.5, Ⲇ * 287.0625);
		ᐃ.bezierCurveTo(198.5 * Ⲇ, 302.0625 * Ⲇ, Ⲇ * 195.5, Ⲇ * 311.0625, Ⲇ * 193.5, Ⲇ * 312.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔΔ]);
		return ⲆⲆ
	}

	function ᐃⲆΔⵠᐃΔⵠ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 92;
		ⲆⲆ.height = 108 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(31 * Ⲇ, 10 * Ⲇ);
		ᐃ.bezierCurveTo(37 * Ⲇ, 2 * Ⲇ, Ⲇ * 49, Ⲇ * ⵠᐃΔⲆ, Ⲇ * 61, ⵠᐃⵠΔΔ * Ⲇ);
		ᐃ.bezierCurveTo(81 * Ⲇ, 31 * Ⲇ, 78 * Ⲇ, 25 * Ⲇ, Ⲇ * 79, Ⲇ * 37);
		ᐃ.bezierCurveTo(76 * Ⲇ, 44 * Ⲇ, Ⲇ * 81, Ⲇ * 56, Ⲇ * 85, Ⲇ * 63);
		ᐃ.bezierCurveTo(Ⲇ * 91, Ⲇ * 71, 90 * Ⲇ, Ⲇ * 78, Ⲇ * 83, Ⲇ * 84);
		ᐃ.bezierCurveTo(Ⲇ * 60, Ⲇ * 98, Ⲇ * 67, Ⲇ * 95, 57 * Ⲇ, 102 * Ⲇ);
		ᐃ.bezierCurveTo(47 * Ⲇ, 106 * Ⲇ, 43 * Ⲇ, 106 * Ⲇ, 31 * Ⲇ, 98 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 22, 91 * Ⲇ, 17 * Ⲇ, 89 * Ⲇ, 7 * Ⲇ, 84 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⲆⵠΔⲆ, 77 * Ⲇ, Ⲇ * ⲆΔⵠᐃΔ, 73 * Ⲇ, Ⲇ * ᐃΔᐃⲆᐃ, 60 * Ⲇ);
		ᐃ.bezierCurveTo(11 * Ⲇ, 50 * Ⲇ, 5 * Ⲇ, 32 * Ⲇ, ⵠᐃⲆᐃᐃ * Ⲇ, 27 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 26, Ⲇ * ΔⵠⵠᐃΔⵠⵠ, 26 * Ⲇ, Ⲇ * 24, Ⲇ * 31, ᐃᐃᐃⵠⵠ * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠΔΔ], ᐃᐃᐃΔⵠ);
		return ⲆⲆ
	}

	function ΔⲆΔⲆⵠᐃᐃᐃⲆ(ⲆΔⲆⲆΔᐃᐃ, ⵠᐃⲆⵠⵠΔⲆ, ΔΔⵠΔᐃΔᐃ, ⵠΔΔᐃᐃⲆᐃ, ⵠᐃⲆⵠΔΔᐃ, ⵠⲆⲆⵠⵠⵠᐃ) {
		const ⵠⵠᐃΔΔΔᐃ = ~(ⲆΔⲆⲆΔᐃᐃ & 7896) & (ⲆΔⲆⲆΔᐃᐃ | 7896);
		const ΔⲆᐃΔᐃⲆᐃⲆⵠ = (1103515245 * (43550 + ⵠᐃⲆⵠⵠΔⲆ) + 12345) % 2147483648;
		const ⵠᐃΔⲆⵠⲆⵠΔⵠ = (26528 | ΔΔⵠΔᐃΔᐃ) & ~(ΔΔⵠΔᐃΔᐃ & 26528);
		const ⵠΔΔΔⵠΔᐃᐃⵠ = (1664525 * (ⵠΔΔᐃᐃⲆᐃ + 32544) + 1013904223) % 4294967296;
		const ΔⵠΔⲆⲆⲆⲆᐃⵠ = (47009 | ⵠᐃⲆⵠΔΔᐃ) & ~(47009 & ⵠᐃⲆⵠΔΔᐃ);
		const ⵠⵠⲆⵠⵠⲆⵠᐃⵠ = (1013904223 + 1664525 * (32686 + ⵠⲆⲆⵠⵠⵠᐃ)) % 4294967296;
		const ⲆᐃᐃᐃᐃᐃΔ = ᐃⵠⵠⵠⵠⲆΔ(ⵠⵠᐃΔΔΔᐃ, ΔⲆᐃΔᐃⲆᐃⲆⵠ, ⵠᐃΔⲆⵠⲆⵠΔⵠ, ⵠΔΔΔⵠΔᐃᐃⵠ);
		const ΔⵠΔΔⵠΔΔ = ⵠⵠᐃΔⵠⲆⲆ(ΔⵠΔⲆⲆⲆⲆᐃⵠ, ⵠⵠⲆⵠⵠⲆⵠᐃⵠ, ⵠⵠᐃΔΔΔᐃ);
		const ᐃΔᐃΔΔᐃⲆᐃⲆ = (16 << ((ⲆᐃᐃᐃᐃᐃΔ ^ ΔⵠΔΔⵠΔΔ) >> 24 & 255)) + (ⲆⲆᐃΔ << ((ⲆᐃᐃᐃᐃᐃΔ ^ ΔⵠΔΔⵠΔΔ) >> 8 & ⲆⵠⲆΔᐃΔΔ)) + (8 << ((ⲆᐃᐃᐃᐃᐃΔ ^ ΔⵠΔΔⵠΔΔ) >> 0 & 255)) + (24 << ((ⲆᐃᐃᐃᐃᐃΔ ^ ΔⵠΔΔⵠΔΔ) >> 16 & 255));
		return ᐃΔᐃΔΔᐃⲆᐃⲆ
	}

	function ΔⵠⵠᐃᐃΔⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 400 * Ⲇ;
		ⲆⲆ.height = 170 * Ⲇ;
		ᐃ.translate(ΔᐃΔ, -170 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 159.5, 322.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 240.5, 293.0625 * Ⲇ, Ⲇ * 240.5, Ⲇ * 293.0625, Ⲇ * 321.5, Ⲇ * 264.0625);
		ᐃ.bezierCurveTo(Ⲇ * 276.5, Ⲇ * 230.0625, 276.5 * Ⲇ, Ⲇ * 230.0625, 231.5 * Ⲇ, Ⲇ * 196.0625);
		ᐃ.bezierCurveTo(158.5 * Ⲇ, Ⲇ * 221.5625, 158.5 * Ⲇ, 221.5625 * Ⲇ, Ⲇ * 85.5, 247.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 212.5, 270.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 235, Ⲇ * 261.5625, 235 * Ⲇ, Ⲇ * 261.5625, 257.5 * Ⲇ, 253.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[Δⵠⵠ], Ⲇ * ᐃⲆⵠⵠΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 193.5, Ⲇ * 226.0625);
		ᐃ.bezierCurveTo(204.5 * Ⲇ, Ⲇ * 242.0625, Ⲇ * 242.5, 237.0625 * Ⲇ, Ⲇ * 251.5, 225.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 246.5, Ⲇ * 195.0625, Ⲇ * 205.5, 190.0625 * Ⲇ, 193.5 * Ⲇ, 227.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆΔΔ], ᐃⲆ[ⵠⵠⵠⵠ], ΔᐃΔᐃᐃⵠⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 164.5, 245.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 182.5, Ⲇ * 264.0625, Ⲇ * 252.5, Ⲇ * 258.0625, Ⲇ * 276.5, 244.0625 * Ⲇ);
		ᐃ.bezierCurveTo(265.5 * Ⲇ, 226.0625 * Ⲇ, 244.5 * Ⲇ, 231.0625 * Ⲇ, 229.5 * Ⲇ, Ⲇ * 230.0625);
		ᐃ.bezierCurveTo(Ⲇ * 205.5, 227.0625 * Ⲇ, 175.5 * Ⲇ, Ⲇ * 202.0625, 162.5 * Ⲇ, 244.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔᐃᐃ], ᐃⲆ[ᐃΔΔΔ], ᐃⵠⵠⵠⲆΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(115.5 * Ⲇ, Ⲇ * 260.0625);
		ᐃ.bezierCurveTo(Ⲇ * 134.5, 279.0625 * Ⲇ, 170.5 * Ⲇ, Ⲇ * 275.0625, 191.5 * Ⲇ, Ⲇ * 257.0625);
		ᐃ.bezierCurveTo(Ⲇ * 174.5, 208.0625 * Ⲇ, Ⲇ * 142.5, 197.0625 * Ⲇ, 116.5 * Ⲇ, Ⲇ * 259.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[3], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 152.5, Ⲇ * 278.0625);
		ᐃ.bezierCurveTo(165.5 * Ⲇ, 294.0625 * Ⲇ, Ⲇ * 200.5, 287.0625 * Ⲇ, 216.5 * Ⲇ, 278.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 206.5, Ⲇ * 247.0625, 173.5 * Ⲇ, 233.0625 * Ⲇ, 153.5 * Ⲇ, 276.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃᐃⵠ], ᐃⲆ[3], ΔⲆΔΔᐃⲆⵠ * Ⲇ);
		return ⲆⲆ
	}

	function ⵠΔᐃⲆⵠΔⲆᐃΔ(Ⲇ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 321;
		ⲆⲆ.height = Ⲇ * 345;
		ᐃ.translate(0, 5 * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 161.00003051757812, 165.40341186523438 * Ⲇ, 20.808652046684813 * Ⲇ);
		ᐃⵠ(ᐃ, Δ[461], Δ[552], ᐃᐃΔⵠⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 162.00003051757812, 48.403411865234375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 172.50003051757812, Ⲇ * 67.40341186523438, 172.50003051757812 * Ⲇ, 67.40341186523438 * Ⲇ, 183.00003051757812 * Ⲇ, 86.40341186523438 * Ⲇ);
		ᐃ.bezierCurveTo(160.50003051757812 * Ⲇ, Ⲇ * 86.40341186523438, 160.50003051757812 * Ⲇ, Ⲇ * 86.40341186523438, Ⲇ * 138.00003051757812, 86.40341186523438 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, Δ[461], Δ[552], ᐃⵠᐃᐃᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 161.50003051757812, Ⲇ * 117.90341186523438);
		ᐃᐃᐃ(ᐃ, Ⲇ * -5.5, -37.5 * Ⲇ, Ⲇ * ⵠⵠⵠⵠⵠ, Ⲇ * 75, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, Δ[461], Δ[552], Ⲇ * ⵠᐃⵠⲆΔ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 162.00003051757812, 78.90341186523438 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ⲆᐃⲆⲆᐃ, -5.5 * Ⲇ, 20 * Ⲇ, 11 * Ⲇ, Ⲇ * 1);
		ᐃ.restore();
		ᐃⵠ(ᐃ, Δ[461]);
		ᐃΔⵠ(ᐃ, 161.00003051757812 * Ⲇ, Ⲇ * 163.6761474609375, 17.08800749063506 * Ⲇ);
		ᐃⵠ(ᐃ, Δ[461]);
		return ⲆⲆ
	}

	function ᐃᐃᐃΔⵠⵠⲆⵠᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 81 * Ⲇ;
		ⲆⲆ.height = 350 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .6 : ⵠΔⲆ;
		ᐃ.translate(0, 5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(35 * Ⲇ, Ⲇ * 160);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, Ⲇ * -6, Ⲇ * -100.5, ᐃᐃⵠⲆⲆⲆⲆ * Ⲇ, 240 * Ⲇ, Ⲇ * ᐃᐃⵠⵠΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔ]);
		ᐃ.translate(Δⵠⵠ, -5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.save();
		ᐃ.translate(-ᐃⲆⵠⲆⲆ * Ⲇ, Ⲇ * ⵠⵠᐃΔΔ);
		ᐃ.moveTo(26.0714111328125 * Ⲇ, 50.9 * Ⲇ);
		ᐃ.bezierCurveTo(32.0714111328125 * Ⲇ, 35.892852783203125 * Ⲇ, 39.0714111328125 * Ⲇ, Ⲇ * 18.892852783203125, 45.0714111328125 * Ⲇ, 7.892852783203125 * Ⲇ);
		ᐃ.bezierCurveTo(51.0714111328125 * Ⲇ, Ⲇ * 13.892852783203125, Ⲇ * 56.0714111328125, Ⲇ * 36.892852783203125, Ⲇ * 60.0714111328125, 50.892852783203125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 52.5714111328125, 58.892852783203125 * Ⲇ, 52.5714111328125 * Ⲇ, Ⲇ * 58.892852783203125, 45.0714111328125 * Ⲇ, Ⲇ * 66.89285278320312);
		ᐃ.bezierCurveTo(Ⲇ * 37.0714111328125, 58.892852783203125 * Ⲇ, Ⲇ * 37.0714111328125, 58.892852783203125 * Ⲇ, 29.0714111328125 * Ⲇ, Ⲇ * 50.892852783203125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.restore();
		ᐃ.globalAlpha = ΔⵠⲆ;
		ᐃ.save();
		ᐃ.translate(0, -10 * Ⲇ);
		ᐃ.translate(45.0714111328125 * Ⲇ, Ⲇ * 149.39285278320312);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ⲆⵠᐃΔᐃ, Ⲇ * -94.5, Ⲇ * ΔᐃΔᐃᐃⵠⵠ, Ⲇ * 250, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⵠ], ᐃⲆ[2], ΔⵠⵠⵠΔ * Ⲇ);
		ᐃ.translate(Ⲇᐃⵠⵠ, 0 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 29.0714111328125, Ⲇ * 50.9);
		ᐃ.bezierCurveTo(32.0714111328125 * Ⲇ, Ⲇ * 35.892852783203125, 39.0714111328125 * Ⲇ, 18.892852783203125 * Ⲇ, Ⲇ * 45.0714111328125, 7.892852783203125 * Ⲇ);
		ᐃ.bezierCurveTo(51.0714111328125 * Ⲇ, 13.892852783203125 * Ⲇ, Ⲇ * 56.0714111328125, 36.892852783203125 * Ⲇ, Ⲇ * 60.0714111328125, 50.892852783203125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 52.5714111328125, 58.892852783203125 * Ⲇ, Ⲇ * 52.5714111328125, 58.892852783203125 * Ⲇ, Ⲇ * 45.0714111328125, 66.89285278320312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 37.0714111328125, 58.892852783203125 * Ⲇ, Ⲇ * 37.0714111328125, 58.892852783203125 * Ⲇ, 29.0714111328125 * Ⲇ, Ⲇ * 50.892852783203125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔⵠⲆᐃ], Ⲇ * Ⲇⵠᐃᐃⵠ);
		return ⲆⲆ
	}

	function ΔⲆⲆⲆᐃΔⵠ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 137 * Ⲇ;
		ⲆⲆ.height = 129 * Ⲇ;
		ᐃ.globalAlpha = .4;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 42.000030517578125, Ⲇ * 41.17047119140625);
		ᐃ.bezierCurveTo(Ⲇ * 45.000030517578125, Ⲇ * 38.17047119140625, 49.000030517578125 * Ⲇ, 37.17047119140625 * Ⲇ, 62.000030517578125 * Ⲇ, Ⲇ * 38.17047119140625);
		ᐃ.bezierCurveTo(Ⲇ * 78.00003051757812, 38.17047119140625 * Ⲇ, 78.00003051757812 * Ⲇ, Ⲇ * 38.17047119140625, 94.00003051757812 * Ⲇ, Ⲇ * 38.17047119140625);
		ᐃ.bezierCurveTo(Ⲇ * 100.00003051757812, Ⲇ * 38.17047119140625, 102.00003051757812 * Ⲇ, 38.17047119140625 * Ⲇ, Ⲇ * 101.00003051757812, 47.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(101.00003051757812 * Ⲇ, Ⲇ * 63.67047119140625, 101.00003051757812 * Ⲇ, Ⲇ * 63.67047119140625, Ⲇ * 101.00003051757812, Ⲇ * 80.17047119140625);
		ᐃ.bezierCurveTo(102.00003051757812 * Ⲇ, Ⲇ * 84.17047119140625, 100.00003051757812 * Ⲇ, Ⲇ * 86.17047119140625, Ⲇ * 95.00003051757812, Ⲇ * 88.17047119140625);
		ᐃ.bezierCurveTo(Ⲇ * 84.00003051757812, 94.17047119140625 * Ⲇ, Ⲇ * 89.00003051757812, 94.17047119140625 * Ⲇ, 79.00003051757812 * Ⲇ, 94.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(59.500030517578125 * Ⲇ, Ⲇ * 94.17047119140625, 59.500030517578125 * Ⲇ, 94.17047119140625 * Ⲇ, Ⲇ * 40.000030517578125, Ⲇ * 94.17047119140625);
		ᐃ.bezierCurveTo(Ⲇ * 33.000030517578125, 94.17047119140625 * Ⲇ, Ⲇ * 34.000030517578125, Ⲇ * 94.17047119140625, Ⲇ * 34.000030517578125, 86.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(34.000030517578125 * Ⲇ, 69.67047119140625 * Ⲇ, Ⲇ * 34.000030517578125, Ⲇ * 69.67047119140625, 34.000030517578125 * Ⲇ, 53.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 33.000030517578125, Ⲇ * 47.17047119140625, 34.000030517578125 * Ⲇ, Ⲇ * 47.17047119140625, Ⲇ * 40.000030517578125, Ⲇ * 42.17047119140625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, Ⲇᐃⵠⵠⵠ, ᐃⲆ[Δᐃᐃⵠ], 40 * Ⲇ);
		ᐃ.globalAlpha = .4;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 42.000030517578125, Ⲇ * 41.17047119140625);
		ᐃ.bezierCurveTo(Ⲇ * 45.000030517578125, 38.17047119140625 * Ⲇ, 49.000030517578125 * Ⲇ, Ⲇ * 37.17047119140625, 62.000030517578125 * Ⲇ, Ⲇ * 38.17047119140625);
		ᐃ.bezierCurveTo(78.00003051757812 * Ⲇ, 38.17047119140625 * Ⲇ, Ⲇ * 78.00003051757812, 38.17047119140625 * Ⲇ, Ⲇ * 94.00003051757812, Ⲇ * 38.17047119140625);
		ᐃ.bezierCurveTo(100.00003051757812 * Ⲇ, Ⲇ * 38.17047119140625, 102.00003051757812 * Ⲇ, Ⲇ * 38.17047119140625, Ⲇ * 101.00003051757812, 47.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 101.00003051757812, 63.67047119140625 * Ⲇ, Ⲇ * 101.00003051757812, 63.67047119140625 * Ⲇ, Ⲇ * 101.00003051757812, 80.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(102.00003051757812 * Ⲇ, 84.17047119140625 * Ⲇ, Ⲇ * 100.00003051757812, Ⲇ * 86.17047119140625, Ⲇ * 95.00003051757812, Ⲇ * 88.17047119140625);
		ᐃ.bezierCurveTo(84.00003051757812 * Ⲇ, 94.17047119140625 * Ⲇ, 89.00003051757812 * Ⲇ, Ⲇ * 94.17047119140625, 79.00003051757812 * Ⲇ, 94.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 59.500030517578125, Ⲇ * 94.17047119140625, 59.500030517578125 * Ⲇ, Ⲇ * 94.17047119140625, 40.000030517578125 * Ⲇ, 94.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 33.000030517578125, Ⲇ * 94.17047119140625, 34.000030517578125 * Ⲇ, 94.17047119140625 * Ⲇ, Ⲇ * 34.000030517578125, Ⲇ * 86.17047119140625);
		ᐃ.bezierCurveTo(34.000030517578125 * Ⲇ, Ⲇ * 69.67047119140625, Ⲇ * 34.000030517578125, 69.67047119140625 * Ⲇ, 34.000030517578125 * Ⲇ, 53.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(33.000030517578125 * Ⲇ, Ⲇ * 47.17047119140625, 34.000030517578125 * Ⲇ, 47.17047119140625 * Ⲇ, 40.000030517578125 * Ⲇ, 42.17047119140625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔⵠⲆ], ΔⵠⵠᐃᐃⵠΔ * Ⲇ);
		ᐃ.globalAlpha = .8;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(42.000030517578125 * Ⲇ, Ⲇ * 41.17047119140625);
		ᐃ.bezierCurveTo(Ⲇ * 45.000030517578125, 38.17047119140625 * Ⲇ, 49.000030517578125 * Ⲇ, 37.17047119140625 * Ⲇ, Ⲇ * 62.000030517578125, 38.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 78.00003051757812, Ⲇ * 38.17047119140625, 78.00003051757812 * Ⲇ, 38.17047119140625 * Ⲇ, Ⲇ * 94.00003051757812, Ⲇ * 38.17047119140625);
		ᐃ.bezierCurveTo(Ⲇ * 100.00003051757812, 38.17047119140625 * Ⲇ, Ⲇ * 102.00003051757812, Ⲇ * 38.17047119140625, Ⲇ * 101.00003051757812, Ⲇ * 47.17047119140625);
		ᐃ.bezierCurveTo(101.00003051757812 * Ⲇ, 63.67047119140625 * Ⲇ, 101.00003051757812 * Ⲇ, 63.67047119140625 * Ⲇ, Ⲇ * 101.00003051757812, Ⲇ * 80.17047119140625);
		ᐃ.bezierCurveTo(102.00003051757812 * Ⲇ, 84.17047119140625 * Ⲇ, Ⲇ * 100.00003051757812, Ⲇ * 86.17047119140625, 95.00003051757812 * Ⲇ, Ⲇ * 88.17047119140625);
		ᐃ.bezierCurveTo(Ⲇ * 84.00003051757812, 94.17047119140625 * Ⲇ, Ⲇ * 89.00003051757812, 94.17047119140625 * Ⲇ, Ⲇ * 79.00003051757812, Ⲇ * 94.17047119140625);
		ᐃ.bezierCurveTo(59.500030517578125 * Ⲇ, Ⲇ * 94.17047119140625, Ⲇ * 59.500030517578125, Ⲇ * 94.17047119140625, Ⲇ * 40.000030517578125, Ⲇ * 94.17047119140625);
		ᐃ.bezierCurveTo(33.000030517578125 * Ⲇ, 94.17047119140625 * Ⲇ, 34.000030517578125 * Ⲇ, Ⲇ * 94.17047119140625, Ⲇ * 34.000030517578125, 86.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 34.000030517578125, Ⲇ * 69.67047119140625, Ⲇ * 34.000030517578125, 69.67047119140625 * Ⲇ, Ⲇ * 34.000030517578125, Ⲇ * 53.17047119140625);
		ᐃ.bezierCurveTo(Ⲇ * 33.000030517578125, 47.17047119140625 * Ⲇ, Ⲇ * 34.000030517578125, 47.17047119140625 * Ⲇ, Ⲇ * 40.000030517578125, 42.17047119140625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠⵠⵠΔ], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(51.000030517578125 * Ⲇ, 37.9886474609375 * Ⲇ);
		ᐃ.bezierCurveTo(51.000030517578125 * Ⲇ, 61.9886474609375 * Ⲇ, 51.000030517578125 * Ⲇ, Ⲇ * 61.9886474609375, Ⲇ * 51.000030517578125, 85.9886474609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 75.50003051757812, 85.9886474609375 * Ⲇ, Ⲇ * 75.50003051757812, Ⲇ * 85.9886474609375, 100.00003051757812 * Ⲇ, Ⲇ * 85.9886474609375);
		ᐃ.bezierCurveTo(Ⲇ * 100.00003051757812, Ⲇ * 61.9886474609375, 100.00003051757812 * Ⲇ, 61.9886474609375 * Ⲇ, 100.00003051757812 * Ⲇ, Ⲇ * 37.9886474609375);
		ᐃ.bezierCurveTo(Ⲇ * 76.00003051757812, 37.9886474609375 * Ⲇ, 76.00003051757812 * Ⲇ, 37.9886474609375 * Ⲇ, Ⲇ * 52.000030517578125, Ⲇ * 37.9886474609375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠΔ], ᐃⲆ[2], ⲆΔⲆᐃΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 99.00003051757812, Ⲇ * 38.9886474609375);
		ᐃ.bezierCurveTo(93.50003051757812 * Ⲇ, Ⲇ * 44.9886474609375, Ⲇ * 93.50003051757812, 44.9886474609375 * Ⲇ, 88.00003051757812 * Ⲇ, Ⲇ * 50.9886474609375);
		ᐃ.bezierCurveTo(88.00003051757812 * Ⲇ, Ⲇ * 72.4886474609375, 88.00003051757812 * Ⲇ, Ⲇ * 72.4886474609375, 88.00003051757812 * Ⲇ, 93.9886474609375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 94.00003051757812, 90.4886474609375 * Ⲇ, Ⲇ * 94.00003051757812, 90.4886474609375 * Ⲇ, 100.00003051757812 * Ⲇ, 86.9886474609375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⵠᐃⵠⲆ], Ⲇ * ΔⵠⲆⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 87.00003051757812, 49.625 * Ⲇ);
		ᐃ.bezierCurveTo(61.000030517578125 * Ⲇ, 49.625 * Ⲇ, Ⲇ * 61.000030517578125, Ⲇ * 49.625, 35.000030517578125 * Ⲇ, 49.625 * Ⲇ);
		ᐃ.bezierCurveTo(35.000030517578125 * Ⲇ, Ⲇ * 70.625, 35.000030517578125 * Ⲇ, Ⲇ * 70.625, 35.000030517578125 * Ⲇ, Ⲇ * 91.625);
		ᐃ.bezierCurveTo(Ⲇ * 60.500030517578125, Ⲇ * 91.625, Ⲇ * 60.500030517578125, 91.625 * Ⲇ, Ⲇ * 86.00003051757812, Ⲇ * 91.625);
		ᐃ.bezierCurveTo(Ⲇ * 86.50003051757812, 70.625 * Ⲇ, Ⲇ * 86.50003051757812, 70.625 * Ⲇ, 87.00003051757812 * Ⲇ, Ⲇ * 49.625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[3], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(47.000030517578125 * Ⲇ, 36.625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 73.00003051757812, 37.125 * Ⲇ, 73.00003051757812 * Ⲇ, 37.125 * Ⲇ, Ⲇ * 99.00003051757812, Ⲇ * 37.625);
		ᐃ.bezierCurveTo(Ⲇ * 93.50003051757812, Ⲇ * 44.125, Ⲇ * 93.50003051757812, 44.125 * Ⲇ, Ⲇ * 88.00003051757812, Ⲇ * 50.625);
		ᐃ.bezierCurveTo(60.500030517578125 * Ⲇ, Ⲇ * 50.125, Ⲇ * 60.500030517578125, Ⲇ * 50.125, 33.000030517578125 * Ⲇ, 49.625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆ], ᐃⲆ[3], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(53.000030517578125 * Ⲇ, 52.625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 40.000030517578125, Ⲇ * 54.625, 39.000030517578125 * Ⲇ, Ⲇ * 59.625, Ⲇ * 40.000030517578125, 67.625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 45.000030517578125, 59.625 * Ⲇ, Ⲇ * 48.000030517578125, Ⲇ * 58.625, 54.000030517578125 * Ⲇ, Ⲇ * 53.625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔᐃⲆ]);
		ᐃ.globalAlpha = ᐃⲆΔ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(42.000030517578125 * Ⲇ, 41.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(45.000030517578125 * Ⲇ, 38.17047119140625 * Ⲇ, 49.000030517578125 * Ⲇ, Ⲇ * 37.17047119140625, Ⲇ * 62.000030517578125, Ⲇ * 38.17047119140625);
		ᐃ.bezierCurveTo(Ⲇ * 78.00003051757812, Ⲇ * 38.17047119140625, 78.00003051757812 * Ⲇ, Ⲇ * 38.17047119140625, Ⲇ * 94.00003051757812, Ⲇ * 38.17047119140625);
		ᐃ.bezierCurveTo(100.00003051757812 * Ⲇ, Ⲇ * 38.17047119140625, 102.00003051757812 * Ⲇ, Ⲇ * 38.17047119140625, Ⲇ * 101.00003051757812, 47.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(101.00003051757812 * Ⲇ, 63.67047119140625 * Ⲇ, 101.00003051757812 * Ⲇ, 63.67047119140625 * Ⲇ, 101.00003051757812 * Ⲇ, 80.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 102.00003051757812, Ⲇ * 84.17047119140625, 100.00003051757812 * Ⲇ, Ⲇ * 86.17047119140625, 95.00003051757812 * Ⲇ, Ⲇ * 88.17047119140625);
		ᐃ.bezierCurveTo(Ⲇ * 84.00003051757812, Ⲇ * 94.17047119140625, 89.00003051757812 * Ⲇ, 94.17047119140625 * Ⲇ, 79.00003051757812 * Ⲇ, Ⲇ * 94.17047119140625);
		ᐃ.bezierCurveTo(59.500030517578125 * Ⲇ, 94.17047119140625 * Ⲇ, Ⲇ * 59.500030517578125, Ⲇ * 94.17047119140625, 40.000030517578125 * Ⲇ, 94.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 33.000030517578125, Ⲇ * 94.17047119140625, 34.000030517578125 * Ⲇ, Ⲇ * 94.17047119140625, Ⲇ * 34.000030517578125, Ⲇ * 86.17047119140625);
		ᐃ.bezierCurveTo(Ⲇ * 34.000030517578125, Ⲇ * 69.67047119140625, 34.000030517578125 * Ⲇ, 69.67047119140625 * Ⲇ, Ⲇ * 34.000030517578125, 53.17047119140625 * Ⲇ);
		ᐃ.bezierCurveTo(33.000030517578125 * Ⲇ, 47.17047119140625 * Ⲇ, Ⲇ * 34.000030517578125, Ⲇ * 47.17047119140625, Ⲇ * 40.000030517578125, 42.17047119140625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃΔⵠᐃⵠ, ᐃⲆ[ΔⲆΔΔ], 4 * Ⲇ);
		return ⲆⲆ
	}

	function Ⲇⵠⵠᐃᐃⵠⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 88 * Ⲇ;
		ⲆⲆ.height = 647 * Ⲇ;
		ᐃ.translate(20 * Ⲇ, ΔⲆᐃⲆⲆ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.save();
		ᐃ.translate(45 * Ⲇ, 384.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -ᐃᐃⵠΔⵠ * Ⲇ, -216.5 * Ⲇ, Ⲇ * 30, 433 * Ⲇ, Ⲇ * ⵠⵠⲆᐃᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 27, 572 * Ⲇ);
		ᐃ.bezierCurveTo(44 * Ⲇ, Ⲇ * 580, Ⲇ * 55, 576 * Ⲇ, 62 * Ⲇ, 572 * Ⲇ);
		ᐃ.bezierCurveTo(65 * Ⲇ, Ⲇ * 585.5, 65 * Ⲇ, 585.5 * Ⲇ, 68 * Ⲇ, Ⲇ * 599);
		ᐃ.bezierCurveTo(Ⲇ * 71, Ⲇ * 612, 68 * Ⲇ, 618 * Ⲇ, 34 * Ⲇ, 616 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⲆᐃΔⵠⵠⲆᐃ, 615 * Ⲇ, Ⲇ * ΔΔⲆΔΔⲆᐃ, Ⲇ * 607, Ⲇ * 27, Ⲇ * 573);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 32, 587 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 39, Ⲇ * 590, 48 * Ⲇ, 588 * Ⲇ, 54 * Ⲇ, 587 * Ⲇ);
		ᐃ.bezierCurveTo(57 * Ⲇ, Ⲇ * 604, 59 * Ⲇ, 609 * Ⲇ, Ⲇ * 46, Ⲇ * 609);
		ᐃ.bezierCurveTo(27 * Ⲇ, Ⲇ * 609, 28 * Ⲇ, Ⲇ * 605, Ⲇ * 33, Ⲇ * 588);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(31 * Ⲇ, 113 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 27, Ⲇ * 139, Ⲇ * 27, 139 * Ⲇ, 23 * Ⲇ, 165 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 18, Ⲇ * 187, 39 * Ⲇ, Ⲇ * 195, 57 * Ⲇ, 186 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 68, Ⲇ * 180, Ⲇ * 65, 171 * Ⲇ, 62 * Ⲇ, 153 * Ⲇ);
		ᐃ.bezierCurveTo(58.5 * Ⲇ, Ⲇ * 131, Ⲇ * 58.5, 131 * Ⲇ, Ⲇ * 55, Ⲇ * 109);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 39, Ⲇ * 139);
		ᐃ.bezierCurveTo(Ⲇ * 43, 139 * Ⲇ, Ⲇ * 43, 139 * Ⲇ, Ⲇ * 47, 139 * Ⲇ);
		ᐃ.bezierCurveTo(51 * Ⲇ, 158 * Ⲇ, 56 * Ⲇ, Ⲇ * 176, 44 * Ⲇ, 175 * Ⲇ);
		ᐃ.bezierCurveTo(33 * Ⲇ, 177 * Ⲇ, 34 * Ⲇ, Ⲇ * 167, 39 * Ⲇ, Ⲇ * 140);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(44 * Ⲇ, Ⲇ * 29);
		ᐃ.bezierCurveTo(57 * Ⲇ, Ⲇ * 63, Ⲇ * 57, 63 * Ⲇ, Ⲇ * 70, Ⲇ * 97);
		ᐃ.bezierCurveTo(Ⲇ * 60, 111 * Ⲇ, Ⲇ * 60, 111 * Ⲇ, Ⲇ * 50, 125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 45, Ⲇ * 128, 41 * Ⲇ, 128 * Ⲇ, 35 * Ⲇ, Ⲇ * 124);
		ᐃ.bezierCurveTo(Ⲇ * 26.5, 110 * Ⲇ, Ⲇ * 26.5, Ⲇ * 110, ΔⲆⲆⲆΔᐃⵠ * Ⲇ, 96 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(44 * Ⲇ, 54 * Ⲇ);
		ᐃ.bezierCurveTo(50 * Ⲇ, 72 * Ⲇ, Ⲇ * 50, Ⲇ * 72, Ⲇ * 56, Ⲇ * 90);
		ᐃ.bezierCurveTo(Ⲇ * 58, 94 * Ⲇ, 59 * Ⲇ, 98 * Ⲇ, Ⲇ * 53, Ⲇ * 105);
		ᐃ.bezierCurveTo(Ⲇ * 47, Ⲇ * 113, 43 * Ⲇ, Ⲇ * 113, 36 * Ⲇ, Ⲇ * 103);
		ᐃ.bezierCurveTo(29 * Ⲇ, 96 * Ⲇ, 31 * Ⲇ, 94 * Ⲇ, 35 * Ⲇ, Ⲇ * 83);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ]);
		ᐃ.translate(-ΔⵠⵠᐃᐃⵠΔ * Ⲇ, Ⲇ * -20);
		ᐃ.globalAlpha = 1;
		ᐃ.save();
		ᐃ.translate(45 * Ⲇ, 384.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ⵠⲆⲆⲆⵠⲆΔ, Ⲇ * -216.5, Ⲇ * 30, Ⲇ * 433, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * ᐃⵠΔⲆΔΔⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(27 * Ⲇ, Ⲇ * 572);
		ᐃ.bezierCurveTo(44 * Ⲇ, 580 * Ⲇ, 55 * Ⲇ, 576 * Ⲇ, Ⲇ * 62, Ⲇ * 572);
		ᐃ.bezierCurveTo(Ⲇ * 65, Ⲇ * 585.5, 65 * Ⲇ, Ⲇ * 585.5, Ⲇ * 68, 599 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 71, Ⲇ * 612, 68 * Ⲇ, Ⲇ * 618, Ⲇ * 34, 616 * Ⲇ);
		ᐃ.bezierCurveTo(14 * Ⲇ, 615 * Ⲇ, ΔΔⲆΔΔⲆᐃ * Ⲇ, 607 * Ⲇ, Ⲇ * 27, 573 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], ᐃΔⲆΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(32 * Ⲇ, Ⲇ * 587);
		ᐃ.bezierCurveTo(Ⲇ * 39, Ⲇ * 590, 48 * Ⲇ, Ⲇ * 588, Ⲇ * 54, Ⲇ * 587);
		ᐃ.bezierCurveTo(Ⲇ * 57, 604 * Ⲇ, 59 * Ⲇ, Ⲇ * 609, Ⲇ * 46, Ⲇ * 609);
		ᐃ.bezierCurveTo(Ⲇ * 27, 609 * Ⲇ, Ⲇ * 28, Ⲇ * 605, Ⲇ * 33, Ⲇ * 588);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 31, 113 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 27, 139 * Ⲇ, Ⲇ * 27, Ⲇ * 139, 23 * Ⲇ, Ⲇ * 165);
		ᐃ.bezierCurveTo(18 * Ⲇ, Ⲇ * 187, Ⲇ * 39, 195 * Ⲇ, Ⲇ * 57, 186 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 68, Ⲇ * 180, Ⲇ * 65, 171 * Ⲇ, 62 * Ⲇ, 153 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 58.5, Ⲇ * 131, Ⲇ * 58.5, 131 * Ⲇ, 55 * Ⲇ, 109 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔⵠⲆⵠⲆ], Ⲇ * ᐃᐃΔⵠΔᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(39 * Ⲇ, 139 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 43, 139 * Ⲇ, Ⲇ * 43, Ⲇ * 139, Ⲇ * 47, Ⲇ * 139);
		ᐃ.bezierCurveTo(Ⲇ * 51, Ⲇ * 158, 56 * Ⲇ, 176 * Ⲇ, Ⲇ * 44, Ⲇ * 175);
		ᐃ.bezierCurveTo(Ⲇ * 33, Ⲇ * 177, 34 * Ⲇ, Ⲇ * 167, 39 * Ⲇ, 140 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⲆΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(44 * Ⲇ, Ⲇ * 29);
		ᐃ.bezierCurveTo(57 * Ⲇ, Ⲇ * 63, 57 * Ⲇ, 63 * Ⲇ, Ⲇ * 70, 97 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 60, 111 * Ⲇ, Ⲇ * 60, 111 * Ⲇ, 50 * Ⲇ, Ⲇ * 125);
		ᐃ.bezierCurveTo(Ⲇ * 45, Ⲇ * 128, Ⲇ * 41, Ⲇ * 128, 35 * Ⲇ, 124 * Ⲇ);
		ᐃ.bezierCurveTo(26.5 * Ⲇ, Ⲇ * 110, 26.5 * Ⲇ, 110 * Ⲇ, Ⲇ * ΔΔⵠΔⲆΔᐃ, 96 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[ᐃᐃΔⵠⵠⲆⲆ], Ⲇ * ⲆⲆΔᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 44, Ⲇ * 54);
		ᐃ.bezierCurveTo(50 * Ⲇ, Ⲇ * 72, 50 * Ⲇ, 72 * Ⲇ, Ⲇ * 56, Ⲇ * 90);
		ᐃ.bezierCurveTo(58 * Ⲇ, 94 * Ⲇ, 59 * Ⲇ, 98 * Ⲇ, Ⲇ * 53, 105 * Ⲇ);
		ᐃ.bezierCurveTo(47 * Ⲇ, 113 * Ⲇ, 43 * Ⲇ, 113 * Ⲇ, Ⲇ * 36, 103 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 29, 96 * Ⲇ, 31 * Ⲇ, Ⲇ * 94, Ⲇ * 35, 83 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8]);
		return ⲆⲆ
	}

	function ⵠⲆᐃΔⵠΔⵠ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 120;
		ⲆⲆ.height = 300 * Ⲇ;
		ᐃ.translate(Ⲇ * -200, -40 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(344 * Ⲇ, 18.40625 * Ⲇ);
		ᐃ.bezierCurveTo(345 * Ⲇ, Ⲇ * 361.40625, 344 * Ⲇ, Ⲇ * 191.40625, Ⲇ * 344, Ⲇ * 364.40625);
		ᐃ.bezierCurveTo(261 * Ⲇ, Ⲇ * 275.40625, Ⲇ * 274, Ⲇ * 259.40625, 229 * Ⲇ, Ⲇ * 213.40625);
		ᐃ.bezierCurveTo(199 * Ⲇ, Ⲇ * 187.40625, 222 * Ⲇ, Ⲇ * 133.40625, Ⲇ * 273, 100.40625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 321, 71.40625 * Ⲇ, 327 * Ⲇ, Ⲇ * 34.40625, 344 * Ⲇ, Ⲇ * 18.40625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 335, Ⲇ * 38.072906494140625);
		ᐃ.bezierCurveTo(307 * Ⲇ, 62.072906494140625 * Ⲇ, Ⲇ * 291, Ⲇ * 60.072906494140625, 262 * Ⲇ, 68.07290649414062 * Ⲇ);
		ᐃ.bezierCurveTo(223 * Ⲇ, 80.07290649414062 * Ⲇ, Ⲇ * 225, 111.07290649414062 * Ⲇ, Ⲇ * 264, 139.07290649414062 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		return ⲆⲆ
	}

	function ΔᐃΔⲆⲆΔⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 161;
		ⲆⲆ.height = Ⲇ * 190;
		ᐃ.globalAlpha = .5;
		ᐃ.translate(0, 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 9, Ⲇ * 93);
		ᐃ.bezierCurveTo(Ⲇ * 17, Ⲇ * 95, Ⲇ * ⵠⲆⲆᐃΔᐃⵠ, Ⲇ * 95, 21 * Ⲇ, Ⲇ * 95);
		ᐃ.bezierCurveTo(ΔΔΔᐃΔΔΔ * Ⲇ, Ⲇ * 83, ⲆΔᐃⵠΔⲆⵠ * Ⲇ, 93 * Ⲇ, ΔᐃΔⵠ * Ⲇ, 76 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 11, 75 * Ⲇ, Ⲇ * Ⲇⵠᐃⵠⵠ, 75 * Ⲇ, ⲆΔⵠΔᐃ * Ⲇ, Ⲇ * 75);
		ᐃ.bezierCurveTo(ⵠᐃΔⲆⲆ * Ⲇ, Ⲇ * 67, 13 * Ⲇ, 67 * Ⲇ, 7 * Ⲇ, Ⲇ * 59);
		ᐃ.bezierCurveTo(ⵠⵠⲆⵠⲆ * Ⲇ, 59 * Ⲇ, Ⲇ * 14, 59 * Ⲇ, 21 * Ⲇ, 59 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 46, 35 * Ⲇ, Ⲇ * 35, 45 * Ⲇ, Ⲇ * 49, Ⲇ * 31);
		ᐃ.bezierCurveTo(53 * Ⲇ, 24 * Ⲇ, Ⲇ * 51, Ⲇ * 21, 51 * Ⲇ, Ⲇ * ⵠⲆᐃᐃⵠⵠᐃ);
		ᐃ.bezierCurveTo(Ⲇ * 63, Ⲇ * 23, 63 * Ⲇ, 24 * Ⲇ, Ⲇ * 69, Ⲇ * 29);
		ᐃ.bezierCurveTo(Ⲇ * 76, Ⲇ * ⲆⵠΔⲆⵠ, Ⲇ * 75, Ⲇ * ΔᐃⲆⲆΔⲆᐃ, Ⲇ * 76, 6 * Ⲇ);
		ᐃ.bezierCurveTo(81 * Ⲇ, 12 * Ⲇ, Ⲇ * 84, Ⲇ * ⲆΔᐃΔΔ, Ⲇ * 89, Ⲇ * 27);
		ᐃ.bezierCurveTo(95 * Ⲇ, 25 * Ⲇ, Ⲇ * ⵠᐃΔᐃⵠ, Ⲇ * 16, Ⲇ * 105, Ⲇ * ᐃᐃⲆⲆⵠΔⵠ);
		ᐃ.bezierCurveTo(Ⲇ * 103, 25 * Ⲇ, 111 * Ⲇ, 33 * Ⲇ, 110 * Ⲇ, Ⲇ * 34);
		ᐃ.bezierCurveTo(123 * Ⲇ, Ⲇ * 48, Ⲇ * 123, 48 * Ⲇ, 136 * Ⲇ, 62 * Ⲇ);
		ᐃ.bezierCurveTo(142 * Ⲇ, 60 * Ⲇ, 147 * Ⲇ, Ⲇ * 59, 155 * Ⲇ, Ⲇ * 58);
		ᐃ.bezierCurveTo(147 * Ⲇ, 65 * Ⲇ, 147 * Ⲇ, 65 * Ⲇ, Ⲇ * 139, Ⲇ * 73);
		ᐃ.bezierCurveTo(Ⲇ * 145, Ⲇ * 73, 145 * Ⲇ, Ⲇ * 73, Ⲇ * 151, Ⲇ * 73);
		ᐃ.bezierCurveTo(145 * Ⲇ, Ⲇ * 80, Ⲇ * 145, Ⲇ * 80, Ⲇ * 138, 87 * Ⲇ);
		ᐃ.bezierCurveTo(144 * Ⲇ, Ⲇ * 88, 144 * Ⲇ, 88 * Ⲇ, Ⲇ * 150, 89 * Ⲇ);
		ᐃ.bezierCurveTo(125 * Ⲇ, Ⲇ * 103, Ⲇ * 125, Ⲇ * 125, 113 * Ⲇ, 141 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 92, 178 * Ⲇ, 85 * Ⲇ, Ⲇ * 177, 76 * Ⲇ, 178 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 64, Ⲇ * 179, 51 * Ⲇ, 164 * Ⲇ, Ⲇ * 35, 131 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ᐃⵠᐃⵠⵠⵠⵠ, Ⲇ * 95, 13 * Ⲇ, Ⲇ * 99, 8 * Ⲇ, Ⲇ * 93);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⵠΔⲆ;
		ᐃ.translate(ⵠᐃΔ, -ΔΔᐃΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ᐃᐃⵠᐃΔ, 93 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⵠⵠᐃⵠⲆΔⲆ, Ⲇ * 95, 19 * Ⲇ, 95 * Ⲇ, 21 * Ⲇ, 95 * Ⲇ);
		ᐃ.bezierCurveTo(ⲆᐃⲆᐃⲆ * Ⲇ, 83 * Ⲇ, 17 * Ⲇ, 93 * Ⲇ, Ⲇ * 4, Ⲇ * 76);
		ᐃ.bezierCurveTo(Ⲇ * ⵠⵠᐃΔΔ, Ⲇ * 75, ⲆⵠΔΔᐃ * Ⲇ, 75 * Ⲇ, Ⲇ * ΔⵠⵠᐃΔⵠⵠ, Ⲇ * 75);
		ᐃ.bezierCurveTo(ⵠⵠᐃᐃΔ * Ⲇ, Ⲇ * 67, Ⲇ * ΔᐃᐃⲆⲆⵠⲆ, Ⲇ * 67, Ⲇ * 7, Ⲇ * 59);
		ᐃ.bezierCurveTo(14 * Ⲇ, Ⲇ * 59, Ⲇ * ⲆⲆⵠⲆⵠⲆⲆ, Ⲇ * 59, Ⲇ * 21, Ⲇ * 59);
		ᐃ.bezierCurveTo(Ⲇ * 46, 35 * Ⲇ, Ⲇ * 35, 45 * Ⲇ, Ⲇ * 49, 31 * Ⲇ);
		ᐃ.bezierCurveTo(53 * Ⲇ, 24 * Ⲇ, Ⲇ * 51, Ⲇ * 21, Ⲇ * 51, ⵠⲆᐃᐃⵠⵠᐃ * Ⲇ);
		ᐃ.bezierCurveTo(63 * Ⲇ, Ⲇ * 23, Ⲇ * 63, Ⲇ * 24, Ⲇ * 69, Ⲇ * 29);
		ᐃ.bezierCurveTo(76 * Ⲇ, ᐃΔⵠⲆΔ * Ⲇ, 75 * Ⲇ, Ⲇ * Ⲇⵠᐃⵠⵠ, Ⲇ * 76, ⲆⵠⵠⵠⲆ * Ⲇ);
		ᐃ.bezierCurveTo(81 * Ⲇ, Ⲇ * ᐃΔΔⵠⲆⵠᐃ, 84 * Ⲇ, Ⲇ * 18, 89 * Ⲇ, 27 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 95, 25 * Ⲇ, 100 * Ⲇ, Ⲇ * ΔⲆⲆⵠΔ, Ⲇ * 105, Ⲇ * ⲆⲆⵠⲆⵠⲆⲆ);
		ᐃ.bezierCurveTo(Ⲇ * 103, 25 * Ⲇ, 111 * Ⲇ, 33 * Ⲇ, Ⲇ * 110, Ⲇ * 34);
		ᐃ.bezierCurveTo(Ⲇ * 123, 48 * Ⲇ, 123 * Ⲇ, 48 * Ⲇ, Ⲇ * 136, 62 * Ⲇ);
		ᐃ.bezierCurveTo(142 * Ⲇ, 60 * Ⲇ, Ⲇ * 147, Ⲇ * 59, Ⲇ * 155, 58 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 147, 65 * Ⲇ, 147 * Ⲇ, 65 * Ⲇ, Ⲇ * 139, 73 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 145, Ⲇ * 73, 145 * Ⲇ, 73 * Ⲇ, Ⲇ * 151, 73 * Ⲇ);
		ᐃ.bezierCurveTo(145 * Ⲇ, Ⲇ * 80, 145 * Ⲇ, Ⲇ * 80, 138 * Ⲇ, 87 * Ⲇ);
		ᐃ.bezierCurveTo(144 * Ⲇ, Ⲇ * 88, Ⲇ * 144, Ⲇ * 88, Ⲇ * 150, 89 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 125, 103 * Ⲇ, Ⲇ * 125, Ⲇ * 125, 113 * Ⲇ, 141 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 92, 178 * Ⲇ, Ⲇ * 85, Ⲇ * 177, 76 * Ⲇ, 178 * Ⲇ);
		ᐃ.bezierCurveTo(64 * Ⲇ, Ⲇ * 179, 51 * Ⲇ, Ⲇ * 164, Ⲇ * 35, 131 * Ⲇ);
		ᐃ.bezierCurveTo(18 * Ⲇ, 95 * Ⲇ, Ⲇ * ΔᐃᐃⲆⲆⵠⲆ, Ⲇ * 99, 8 * Ⲇ, Ⲇ * 93);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(28 * Ⲇ, 63 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 23, Ⲇ * 54, Ⲇ * 24, Ⲇ * 47, 26 * Ⲇ, Ⲇ * 37);
		ᐃ.bezierCurveTo(Ⲇ * 28, 29 * Ⲇ, Ⲇ * 31, 31 * Ⲇ, Ⲇ * 41, Ⲇ * 35);
		ᐃ.bezierCurveTo(Ⲇ * 52, Ⲇ * 45, Ⲇ * 55, 51 * Ⲇ, Ⲇ * 57, 53 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 50, Ⲇ * 50, 44 * Ⲇ, Ⲇ * 47, 43 * Ⲇ, Ⲇ * 48);
		ᐃ.bezierCurveTo(43 * Ⲇ, Ⲇ * 52, 43 * Ⲇ, Ⲇ * 52, Ⲇ * 42, 57 * Ⲇ);
		ᐃ.bezierCurveTo(38 * Ⲇ, 54 * Ⲇ, Ⲇ * 38, Ⲇ * 54, 33 * Ⲇ, Ⲇ * 51);
		ᐃ.bezierCurveTo(34 * Ⲇ, Ⲇ * 56, 34 * Ⲇ, Ⲇ * 56, 34 * Ⲇ, 61 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⲆᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(99 * Ⲇ, 55 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 107, Ⲇ * 43, 113 * Ⲇ, 39 * Ⲇ, 121 * Ⲇ, 34 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 130, Ⲇ * 29, 130 * Ⲇ, Ⲇ * 34, 130 * Ⲇ, 42 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 131, 57 * Ⲇ, Ⲇ * 128, 61 * Ⲇ, 129 * Ⲇ, 63 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 124, 62 * Ⲇ, Ⲇ * 124, 62 * Ⲇ, 119 * Ⲇ, 61 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 119, 56 * Ⲇ, 120 * Ⲇ, Ⲇ * 61, Ⲇ * 118, Ⲇ * 52);
		ᐃ.bezierCurveTo(115 * Ⲇ, 55 * Ⲇ, 111 * Ⲇ, 59 * Ⲇ, Ⲇ * 111, Ⲇ * 58);
		ᐃ.bezierCurveTo(110 * Ⲇ, 54 * Ⲇ, 109 * Ⲇ, 57 * Ⲇ, 109 * Ⲇ, Ⲇ * 51);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔΔ]);
		ᐃΔⵠ(ᐃ, 103 * Ⲇ, Ⲇ * 110, Ⲇ * 11);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃΔⵠ(ᐃ, Ⲇ * 55, 111 * Ⲇ, Ⲇ * ᐃᐃΔΔΔΔΔ);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃΔⵠ(ᐃ, 99 * Ⲇ, 107 * Ⲇ, Ⲇ * 5);
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃΔⵠ(ᐃ, 51 * Ⲇ, 108 * Ⲇ, ⵠᐃᐃⵠᐃ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(31 * Ⲇ, 121 * Ⲇ);
		ᐃ.bezierCurveTo(45 * Ⲇ, Ⲇ * 128, 51 * Ⲇ, 133 * Ⲇ, 53 * Ⲇ, 141 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 59, 161 * Ⲇ, Ⲇ * 70, 173 * Ⲇ, 80 * Ⲇ, Ⲇ * 169);
		ᐃ.bezierCurveTo(Ⲇ * 89, 172 * Ⲇ, Ⲇ * 99, Ⲇ * 149, 107 * Ⲇ, 133 * Ⲇ);
		ᐃ.bezierCurveTo(114 * Ⲇ, Ⲇ * 122, Ⲇ * 119, 123 * Ⲇ, 124 * Ⲇ, 119 * Ⲇ);
		ᐃ.bezierCurveTo(109 * Ⲇ, Ⲇ * 148, Ⲇ * 117, Ⲇ * 133, 109 * Ⲇ, Ⲇ * 147);
		ᐃ.bezierCurveTo(Ⲇ * 87, 180 * Ⲇ, 84 * Ⲇ, Ⲇ * 179, Ⲇ * 76, Ⲇ * 178);
		ᐃ.bezierCurveTo(Ⲇ * 49, Ⲇ * 173, Ⲇ * 44, 149 * Ⲇ, 31 * Ⲇ, Ⲇ * 121);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆᐃⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(-2, ⲆⲆⵠⲆ);
		ᐃ.moveTo(71 * Ⲇ, Ⲇ * 162);
		ᐃ.bezierCurveTo(Ⲇ * 80, 155 * Ⲇ, Ⲇ * 85, Ⲇ * 159, 89 * Ⲇ, 164 * Ⲇ);
		ᐃ.bezierCurveTo(90 * Ⲇ, 171 * Ⲇ, 86 * Ⲇ, Ⲇ * 173, 79 * Ⲇ, Ⲇ * 173);
		ᐃ.bezierCurveTo(Ⲇ * 67, 172 * Ⲇ, Ⲇ * 67, 168 * Ⲇ, 71 * Ⲇ, Ⲇ * 162);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.translate(2, ⲆⲆᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(9 * Ⲇ, Ⲇ * 93);
		ᐃ.bezierCurveTo(17 * Ⲇ, Ⲇ * 95, ⵠᐃΔⵠⲆ * Ⲇ, Ⲇ * 95, Ⲇ * 21, Ⲇ * 95);
		ᐃ.bezierCurveTo(ᐃᐃⵠᐃΔ * Ⲇ, 83 * Ⲇ, Ⲇ * 17, Ⲇ * 93, 4 * Ⲇ, 76 * Ⲇ);
		ᐃ.bezierCurveTo(11 * Ⲇ, Ⲇ * 75, Ⲇ * 11, 75 * Ⲇ, Ⲇ * ΔΔⵠΔⲆΔᐃ, Ⲇ * 75);
		ᐃ.bezierCurveTo(Ⲇ * 13, Ⲇ * 67, ΔⵠⲆⵠⵠⲆΔ * Ⲇ, Ⲇ * 67, Ⲇ * ᐃΔⵠⲆΔ, Ⲇ * 59);
		ᐃ.bezierCurveTo(Ⲇ * 14, Ⲇ * 59, Ⲇ * 14, 59 * Ⲇ, 21 * Ⲇ, Ⲇ * 59);
		ᐃ.bezierCurveTo(Ⲇ * 46, 35 * Ⲇ, 35 * Ⲇ, 45 * Ⲇ, Ⲇ * 49, 31 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 53, Ⲇ * 24, 51 * Ⲇ, Ⲇ * 21, Ⲇ * 51, ⲆⲆⲆⲆᐃⲆⲆ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 63, 23 * Ⲇ, Ⲇ * 63, 24 * Ⲇ, Ⲇ * 69, 29 * Ⲇ);
		ᐃ.bezierCurveTo(76 * Ⲇ, Ⲇ * ⲆᐃᐃΔΔ, Ⲇ * 75, Ⲇ * 11, 76 * Ⲇ, Ⲇ * 6);
		ᐃ.bezierCurveTo(Ⲇ * 81, ᐃᐃΔᐃⲆ * Ⲇ, 84 * Ⲇ, Ⲇ * 18, 89 * Ⲇ, 27 * Ⲇ);
		ᐃ.bezierCurveTo(95 * Ⲇ, 25 * Ⲇ, Ⲇ * 100, Ⲇ * 16, Ⲇ * 105, 14 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 103, Ⲇ * 25, Ⲇ * 111, 33 * Ⲇ, 110 * Ⲇ, Ⲇ * 34);
		ᐃ.bezierCurveTo(Ⲇ * 123, 48 * Ⲇ, Ⲇ * 123, Ⲇ * 48, Ⲇ * 136, Ⲇ * 62);
		ᐃ.bezierCurveTo(Ⲇ * 142, 60 * Ⲇ, Ⲇ * 147, 59 * Ⲇ, Ⲇ * 155, Ⲇ * 58);
		ᐃ.bezierCurveTo(Ⲇ * 147, Ⲇ * 65, 147 * Ⲇ, 65 * Ⲇ, 139 * Ⲇ, Ⲇ * 73);
		ᐃ.bezierCurveTo(145 * Ⲇ, Ⲇ * 73, 145 * Ⲇ, 73 * Ⲇ, Ⲇ * 151, Ⲇ * 73);
		ᐃ.bezierCurveTo(Ⲇ * 145, 80 * Ⲇ, Ⲇ * 145, 80 * Ⲇ, Ⲇ * 138, Ⲇ * 87);
		ᐃ.bezierCurveTo(144 * Ⲇ, 88 * Ⲇ, Ⲇ * 144, Ⲇ * 88, Ⲇ * 150, 89 * Ⲇ);
		ᐃ.bezierCurveTo(125 * Ⲇ, 103 * Ⲇ, Ⲇ * 125, 125 * Ⲇ, Ⲇ * 113, 141 * Ⲇ);
		ᐃ.bezierCurveTo(92 * Ⲇ, Ⲇ * 178, Ⲇ * 85, 177 * Ⲇ, 76 * Ⲇ, Ⲇ * 178);
		ᐃ.bezierCurveTo(64 * Ⲇ, Ⲇ * 179, Ⲇ * 51, 164 * Ⲇ, 35 * Ⲇ, Ⲇ * 131);
		ᐃ.bezierCurveTo(Ⲇ * 18, 95 * Ⲇ, ⵠΔⵠᐃⵠ * Ⲇ, Ⲇ * 99, ΔⲆᐃΔΔ * Ⲇ, 93 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔⲆⲆⵠ], Ⲇ * ⲆⵠⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(25 * Ⲇ, Ⲇ * 63);
		ᐃ.bezierCurveTo(Ⲇ * ⲆᐃΔᐃⲆᐃⵠ, Ⲇ * 58, Ⲇ * 17, 51 * Ⲇ, 17 * Ⲇ, Ⲇ * 33);
		ᐃ.bezierCurveTo(Ⲇ * ⵠΔⲆⵠᐃΔⵠ, Ⲇ * ⲆⲆᐃΔⵠΔⲆ, Ⲇ * 21, ᐃⵠⵠⵠⲆΔⲆ * Ⲇ, 32 * Ⲇ, Ⲇ * ᐃΔⵠⵠΔ);
		ᐃ.bezierCurveTo(Ⲇ * 63, 31 * Ⲇ, 66 * Ⲇ, Ⲇ * 45, 66 * Ⲇ, 54 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ], ᐃⲆ[2], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(91 * Ⲇ, Ⲇ * 53);
		ᐃ.bezierCurveTo(91 * Ⲇ, 40 * Ⲇ, 98 * Ⲇ, 33 * Ⲇ, 121 * Ⲇ, Ⲇ * ΔⲆᐃⲆⲆ);
		ᐃ.bezierCurveTo(Ⲇ * 137, ⲆⵠⵠⲆⲆ * Ⲇ, Ⲇ * 137, ΔⵠⵠΔⵠⵠᐃ * Ⲇ, 139 * Ⲇ, 27 * Ⲇ);
		ᐃ.bezierCurveTo(141 * Ⲇ, 49 * Ⲇ, Ⲇ * 140, Ⲇ * 57, 134 * Ⲇ, Ⲇ * 64);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⵠ], ᐃⲆ[Ⲇⵠᐃⵠ], ⲆⵠⵠⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 31, 63 * Ⲇ);
		ᐃ.bezierCurveTo(23 * Ⲇ, Ⲇ * 54, Ⲇ * 24, 47 * Ⲇ, Ⲇ * 26, Ⲇ * 37);
		ᐃ.bezierCurveTo(28 * Ⲇ, Ⲇ * 29, 31 * Ⲇ, Ⲇ * 31, 41 * Ⲇ, Ⲇ * 35);
		ᐃ.bezierCurveTo(Ⲇ * 52, Ⲇ * 45, 55 * Ⲇ, Ⲇ * 51, Ⲇ * 57, Ⲇ * 53);
		ᐃ.bezierCurveTo(50 * Ⲇ, 50 * Ⲇ, Ⲇ * 44, 47 * Ⲇ, 43 * Ⲇ, 48 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 43, 52 * Ⲇ, Ⲇ * 43, 52 * Ⲇ, Ⲇ * 42, 57 * Ⲇ);
		ᐃ.bezierCurveTo(38 * Ⲇ, Ⲇ * 54, Ⲇ * 38, 54 * Ⲇ, Ⲇ * 33, 51 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 34, 56 * Ⲇ, 34 * Ⲇ, Ⲇ * 56, Ⲇ * 34, Ⲇ * 61);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠᐃⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(99 * Ⲇ, 55 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 107, 43 * Ⲇ, Ⲇ * 113, Ⲇ * 39, 121 * Ⲇ, 34 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 130, 29 * Ⲇ, 130 * Ⲇ, Ⲇ * 34, 130 * Ⲇ, Ⲇ * 42);
		ᐃ.bezierCurveTo(131 * Ⲇ, 57 * Ⲇ, Ⲇ * 128, Ⲇ * 61, 129 * Ⲇ, Ⲇ * 63);
		ᐃ.bezierCurveTo(Ⲇ * 124, Ⲇ * 62, 124 * Ⲇ, Ⲇ * 62, Ⲇ * 119, Ⲇ * 61);
		ᐃ.bezierCurveTo(119 * Ⲇ, 56 * Ⲇ, Ⲇ * 120, 61 * Ⲇ, Ⲇ * 118, 52 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 115, Ⲇ * 55, Ⲇ * 111, 59 * Ⲇ, Ⲇ * 111, 58 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 110, Ⲇ * 54, Ⲇ * 109, Ⲇ * 57, 109 * Ⲇ, 51 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		return ⲆⲆ
	}

	function ⵠᐃΔΔⲆⵠΔⲆΔ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 254 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 288;
		ᐃ.translate(ⵠΔΔᐃ, ⵠᐃᐃⵠᐃ);
		ᐃ.globalAlpha = .5;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 218, 84.640625 * Ⲇ);
		ᐃ.bezierCurveTo(150 * Ⲇ, Ⲇ * 13.640625, 186 * Ⲇ, 92.640625 * Ⲇ, 168 * Ⲇ, 103.640625 * Ⲇ);
		ᐃ.bezierCurveTo(151 * Ⲇ, Ⲇ * 107.640625, Ⲇ * 150, 61.640625 * Ⲇ, Ⲇ * 144, Ⲇ * 39.640625);
		ᐃ.bezierCurveTo(135 * Ⲇ, Ⲇ * 1.640625, Ⲇ * 113, Ⲇ * 2.640625, 110 * Ⲇ, 40.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 106, Ⲇ * 97.640625, 98 * Ⲇ, 102.640625 * Ⲇ, 83 * Ⲇ, 100.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 68, 98.640625 * Ⲇ, 67 * Ⲇ, 77.640625 * Ⲇ, 70 * Ⲇ, Ⲇ * 55.640625);
		ᐃ.bezierCurveTo(Ⲇ * 75, Ⲇ * 16.640625, Ⲇ * 47, Ⲇ * 52.640625, 38 * Ⲇ, Ⲇ * 67.640625);
		ᐃ.bezierCurveTo(10 * Ⲇ, 113.640625 * Ⲇ, Ⲇ * 10, Ⲇ * 181.640625, Ⲇ * 23, 213.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 45, Ⲇ * 266.640625, Ⲇ * 97, Ⲇ * 277.640625, 147 * Ⲇ, 269.640625 * Ⲇ);
		ᐃ.bezierCurveTo(217 * Ⲇ, Ⲇ * 259.640625, 236 * Ⲇ, Ⲇ * 221.640625, 239 * Ⲇ, 166.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 239, 113.640625 * Ⲇ, Ⲇ * 223, 90.640625 * Ⲇ, Ⲇ * 219, Ⲇ * 86.640625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠᐃΔⲆ], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, 175 * Ⲇ, 220.640625 * Ⲇ, Ⲇ * 29.546573405388315);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃΔⵠ(ᐃ, 79 * Ⲇ, Ⲇ * 222.640625, Ⲇ * 28.178005607210743);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ]);
		ᐃΔⵠ(ᐃ, 175 * Ⲇ, Ⲇ * 214.640625, 27.892651361962706 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ], ᐃⲆ[0], ⲆΔⲆᐃΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 79, Ⲇ * 215.640625, 26.570660511172846 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠΔΔᐃ], Ⲇ * ᐃΔⲆΔⲆ);
		ᐃ.translate(ⵠⲆⵠ, -ⲆⲆⲆᐃᐃ);
		ᐃ.globalAlpha = ⵠⵠⵠΔ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(218 * Ⲇ, Ⲇ * 84.640625);
		ᐃ.bezierCurveTo(Ⲇ * 150, Ⲇ * 13.640625, Ⲇ * 186, 92.640625 * Ⲇ, Ⲇ * 168, 103.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 151, Ⲇ * 107.640625, 150 * Ⲇ, 61.640625 * Ⲇ, 144 * Ⲇ, Ⲇ * 39.640625);
		ᐃ.bezierCurveTo(135 * Ⲇ, Ⲇ * 1.640625, 113 * Ⲇ, 2.640625 * Ⲇ, 110 * Ⲇ, Ⲇ * 40.640625);
		ᐃ.bezierCurveTo(106 * Ⲇ, Ⲇ * 97.640625, Ⲇ * 98, Ⲇ * 102.640625, 83 * Ⲇ, 100.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 68, Ⲇ * 98.640625, 67 * Ⲇ, Ⲇ * 77.640625, Ⲇ * 70, 55.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 75, Ⲇ * 16.640625, Ⲇ * 47, 52.640625 * Ⲇ, 38 * Ⲇ, Ⲇ * 67.640625);
		ᐃ.bezierCurveTo(Ⲇ * 10, 113.640625 * Ⲇ, Ⲇ * ⲆⵠΔΔⵠ, 181.640625 * Ⲇ, Ⲇ * 23, Ⲇ * 213.640625);
		ᐃ.bezierCurveTo(Ⲇ * 45, 266.640625 * Ⲇ, 97 * Ⲇ, 277.640625 * Ⲇ, Ⲇ * 147, 269.640625 * Ⲇ);
		ᐃ.bezierCurveTo(217 * Ⲇ, Ⲇ * 259.640625, 236 * Ⲇ, Ⲇ * 221.640625, 239 * Ⲇ, 166.640625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 239, 113.640625 * Ⲇ, Ⲇ * 223, 90.640625 * Ⲇ, 219 * Ⲇ, 86.640625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔᐃ], ᐃⲆ[ᐃⵠΔⲆ], 4 * Ⲇ);
		ᐃΔⵠ(ᐃ, 175 * Ⲇ, 222.640625 * Ⲇ, Ⲇ * 26.546573405388315);
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃΔⵠ(ᐃ, Ⲇ * 79, 222.640625 * Ⲇ, Ⲇ * 26.178005607210743);
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃΔⵠ(ᐃ, Ⲇ * 175, Ⲇ * 210.640625, Ⲇ * 26.892651361962706);
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], 8 * Ⲇ);
		ᐃΔⵠ(ᐃ, 79 * Ⲇ, 210.640625 * Ⲇ, Ⲇ * 26.570660511172846);
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ᐃᐃⲆΔΔ], Ⲇ * 8);
		return ⲆⲆ
	}

	function ⲆⲆⵠⵠⲆⲆⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 106 * Ⲇ;
		ⲆⲆ.height = 681 * Ⲇ;
		ᐃ.translate(20 * Ⲇ, ᐃⵠⲆᐃΔ * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.save();
		ᐃ.translate(52.5 * Ⲇ, 395 * Ⲇ);
		ᐃ.rotate(ⲆⲆⵠⲆ);
		ᐃᐃᐃ(ᐃ, -11.5 * Ⲇ, -226 * Ⲇ, 23 * Ⲇ, 452 * Ⲇ, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(35 * Ⲇ, Ⲇ * 588);
		ᐃ.bezierCurveTo(47 * Ⲇ, 596 * Ⲇ, Ⲇ * 61, 594 * Ⲇ, 69 * Ⲇ, 588 * Ⲇ);
		ᐃ.bezierCurveTo(79 * Ⲇ, 615 * Ⲇ, Ⲇ * 78, 632 * Ⲇ, 59 * Ⲇ, Ⲇ * 643);
		ᐃ.bezierCurveTo(Ⲇ * 41, Ⲇ * 650, 27 * Ⲇ, Ⲇ * 632, Ⲇ * 30, Ⲇ * 610);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 52, 135 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 61.5, Ⲇ * 142, 61.5 * Ⲇ, Ⲇ * 142, 71 * Ⲇ, 149 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 69.5, 166 * Ⲇ, Ⲇ * 69.5, Ⲇ * 166, Ⲇ * 68, 183 * Ⲇ);
		ᐃ.bezierCurveTo(60.5 * Ⲇ, 187.5 * Ⲇ, 60.5 * Ⲇ, 187.5 * Ⲇ, Ⲇ * 53, Ⲇ * 192);
		ᐃ.bezierCurveTo(45 * Ⲇ, 187.5 * Ⲇ, 45 * Ⲇ, Ⲇ * 187.5, Ⲇ * 37, Ⲇ * 183);
		ᐃ.bezierCurveTo(35.5 * Ⲇ, 167 * Ⲇ, 35.5 * Ⲇ, Ⲇ * 167, Ⲇ * 34, 151 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(64 * Ⲇ, 150 * Ⲇ);
		ᐃ.bezierCurveTo(63 * Ⲇ, Ⲇ * 164, Ⲇ * 63, 164 * Ⲇ, Ⲇ * 62, 178 * Ⲇ);
		ᐃ.bezierCurveTo(58 * Ⲇ, 181 * Ⲇ, 58 * Ⲇ, Ⲇ * 181, Ⲇ * 54, Ⲇ * 184);
		ᐃ.bezierCurveTo(Ⲇ * 48.5, Ⲇ * 181.5, Ⲇ * 48.5, Ⲇ * 181.5, 43 * Ⲇ, Ⲇ * 179);
		ᐃ.bezierCurveTo(42 * Ⲇ, 164.5 * Ⲇ, Ⲇ * 42, 164.5 * Ⲇ, Ⲇ * 41, 150 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 46, 152.5 * Ⲇ, 46 * Ⲇ, 152.5 * Ⲇ, 51 * Ⲇ, Ⲇ * 155);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(52 * Ⲇ, Ⲇ * 39);
		ᐃ.bezierCurveTo(Ⲇ * 65.5, 82 * Ⲇ, Ⲇ * 65.5, Ⲇ * 82, 79 * Ⲇ, 125 * Ⲇ);
		ᐃ.bezierCurveTo(66 * Ⲇ, 137.5 * Ⲇ, Ⲇ * 66, 137.5 * Ⲇ, 53 * Ⲇ, Ⲇ * 150);
		ᐃ.bezierCurveTo(Ⲇ * 39, 138 * Ⲇ, 39 * Ⲇ, 138 * Ⲇ, 25 * Ⲇ, 126 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(52 * Ⲇ, 64 * Ⲇ);
		ᐃ.bezierCurveTo(60 * Ⲇ, 92.5 * Ⲇ, 60 * Ⲇ, Ⲇ * 92.5, 68 * Ⲇ, 121 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 61, 127.5 * Ⲇ, Ⲇ * 61, 127.5 * Ⲇ, 54 * Ⲇ, 134 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 46.5, Ⲇ * 127.5, Ⲇ * 46.5, Ⲇ * 127.5, Ⲇ * 39, Ⲇ * 121);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ]);
		ᐃ.translate(-20 * Ⲇ, -ᐃⵠΔᐃⵠⲆⵠ * Ⲇ);
		ᐃ.globalAlpha = 1;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 52.5, 395 * Ⲇ);
		ᐃ.rotate(ⵠⲆΔⵠ);
		ᐃᐃᐃ(ᐃ, -11.5 * Ⲇ, -226 * Ⲇ, Ⲇ * 23, 452 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ], ᐃⲆ[2], ⲆᐃⵠⲆⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 35, 588 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 47, Ⲇ * 596, 61 * Ⲇ, 594 * Ⲇ, 69 * Ⲇ, 588 * Ⲇ);
		ᐃ.bezierCurveTo(79 * Ⲇ, Ⲇ * 615, Ⲇ * 78, 632 * Ⲇ, 59 * Ⲇ, 643 * Ⲇ);
		ᐃ.bezierCurveTo(41 * Ⲇ, 650 * Ⲇ, Ⲇ * 27, 632 * Ⲇ, Ⲇ * 30, 610 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔᐃΔⲆΔ], ⲆᐃⵠᐃⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 52, 135 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 61.5, 142 * Ⲇ, Ⲇ * 61.5, 142 * Ⲇ, 71 * Ⲇ, 149 * Ⲇ);
		ᐃ.bezierCurveTo(69.5 * Ⲇ, Ⲇ * 166, Ⲇ * 69.5, Ⲇ * 166, Ⲇ * 68, Ⲇ * 183);
		ᐃ.bezierCurveTo(60.5 * Ⲇ, 187.5 * Ⲇ, 60.5 * Ⲇ, 187.5 * Ⲇ, Ⲇ * 53, 192 * Ⲇ);
		ᐃ.bezierCurveTo(45 * Ⲇ, Ⲇ * 187.5, Ⲇ * 45, Ⲇ * 187.5, Ⲇ * 37, 183 * Ⲇ);
		ᐃ.bezierCurveTo(35.5 * Ⲇ, Ⲇ * 167, Ⲇ * 35.5, 167 * Ⲇ, Ⲇ * 34, 151 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ], ᐃⲆ[ᐃᐃⲆⵠ], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 64, Ⲇ * 150);
		ᐃ.bezierCurveTo(Ⲇ * 63, 164 * Ⲇ, Ⲇ * 63, 164 * Ⲇ, 62 * Ⲇ, 178 * Ⲇ);
		ᐃ.bezierCurveTo(58 * Ⲇ, 181 * Ⲇ, Ⲇ * 58, Ⲇ * 181, 54 * Ⲇ, 184 * Ⲇ);
		ᐃ.bezierCurveTo(48.5 * Ⲇ, Ⲇ * 181.5, Ⲇ * 48.5, 181.5 * Ⲇ, 43 * Ⲇ, Ⲇ * 179);
		ᐃ.bezierCurveTo(42 * Ⲇ, 164.5 * Ⲇ, Ⲇ * 42, 164.5 * Ⲇ, 41 * Ⲇ, 150 * Ⲇ);
		ᐃ.bezierCurveTo(46 * Ⲇ, Ⲇ * 152.5, Ⲇ * 46, 152.5 * Ⲇ, Ⲇ * 51, Ⲇ * 155);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 52, 39 * Ⲇ);
		ᐃ.bezierCurveTo(65.5 * Ⲇ, Ⲇ * 82, Ⲇ * 65.5, Ⲇ * 82, Ⲇ * 79, Ⲇ * 125);
		ᐃ.bezierCurveTo(Ⲇ * 66, 137.5 * Ⲇ, Ⲇ * 66, Ⲇ * 137.5, Ⲇ * 53, Ⲇ * 150);
		ᐃ.bezierCurveTo(Ⲇ * 39, 138 * Ⲇ, Ⲇ * 39, Ⲇ * 138, Ⲇ * 25, 126 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[ᐃⵠⵠΔᐃΔᐃ], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 52, Ⲇ * 64);
		ᐃ.bezierCurveTo(Ⲇ * 60, 92.5 * Ⲇ, Ⲇ * 60, Ⲇ * 92.5, Ⲇ * 68, 121 * Ⲇ);
		ᐃ.bezierCurveTo(61 * Ⲇ, 127.5 * Ⲇ, 61 * Ⲇ, Ⲇ * 127.5, Ⲇ * 54, Ⲇ * 134);
		ᐃ.bezierCurveTo(Ⲇ * 46.5, 127.5 * Ⲇ, Ⲇ * 46.5, 127.5 * Ⲇ, Ⲇ * 39, Ⲇ * 121);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⵠⵠ]);
		return ⲆⲆ
	}

	function ᐃΔᐃⲆᐃᐃΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 165 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 123;
		ᐃ.save();
		ᐃ.translate(81 * Ⲇ, Ⲇ * 65);
		ᐃᐃᐃ(ᐃ, -78 * Ⲇ, -54.5 * Ⲇ, 156 * Ⲇ, 109 * Ⲇ, Ⲇ * 20);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]);
		ᐃ.save();
		ᐃ.translate(81 * Ⲇ, 58 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -78 * Ⲇ, -54.5 * Ⲇ, Ⲇ * 156, Ⲇ * 109, ΔΔᐃⲆΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠΔ], ᐃⲆ[Ⲇⵠᐃⵠ], ᐃᐃⲆⵠ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 81, Ⲇ * 58);
		ᐃᐃᐃ(ᐃ, Ⲇ * -69, Ⲇ * -47, Ⲇ * 138, 93 * Ⲇ, Ⲇ * 15);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], ⲆⵠⲆᐃ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 79, Ⲇ * 54);
		ᐃᐃᐃ(ᐃ, Ⲇ * -34, Ⲇ * -40, Ⲇ * 68, 88 * Ⲇ, Ⲇ * ⲆᐃⵠΔΔᐃⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ΔⲆΔᐃⵠ], ΔⵠⲆⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 44, ⲆⲆⵠΔᐃ * Ⲇ);
		ᐃ.bezierCurveTo(43.5 * Ⲇ, Ⲇ * 55, Ⲇ * 43.5, Ⲇ * 55, Ⲇ * 43, 101 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃΔⲆⵠⵠ], ⲆⵠⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(115 * Ⲇ, 13 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 115, 56 * Ⲇ, 115 * Ⲇ, 56 * Ⲇ, Ⲇ * 115, Ⲇ * 101);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔᐃᐃⵠⲆ, ᐃⲆ[ⵠΔⲆⵠⲆ], ⲆΔⵠᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 35, Ⲇ * ᐃΔᐃⲆΔ);
		ᐃ.bezierCurveTo(35 * Ⲇ, 56 * Ⲇ, Ⲇ * 36, 109 * Ⲇ, 35 * Ⲇ, Ⲇ * 110);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, Ⲇᐃⵠⵠⵠ, ᐃⲆ[7], ᐃᐃⲆⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(123 * Ⲇ, Ⲇ * 6);
		ᐃ.bezierCurveTo(Ⲇ * 123, 56 * Ⲇ, 123 * Ⲇ, Ⲇ * 56, 123 * Ⲇ, 110 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⵠⲆⵠⲆ, ᐃⲆ[7], 4);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 79, Ⲇ * 113);
		ᐃᐃᐃ(ᐃ, -ΔⲆⲆⲆΔᐃⵠ * Ⲇ, Ⲇ * -2, Ⲇ * 36, Ⲇ * ΔⵠⲆᐃ, 20 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ΔᐃᐃⵠⲆ, ᐃⲆ[ⵠⲆΔⲆᐃ], 4);
		ᐃ.save();
		ᐃ.translate(75 * Ⲇ, Ⲇ * 118);
		ᐃᐃᐃ(ᐃ, -6 * Ⲇ, Ⲇ * -2.5, Ⲇ * ᐃⵠⲆᐃΔ, Ⲇ * ΔΔⵠΔ, Ⲇ * ⵠΔⲆΔⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆΔᐃΔ]);
		return ⲆⲆ
	}

	function ΔᐃΔᐃⵠᐃΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 170;
		var ⲆΔΔ = Ⲇ * 172;
		var ΔΔ = Δⵠᐃ / ⲆᐃⵠⲆ;
		var ΔΔⵠ = ⲆΔΔ / 2;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(ΔΔ, ΔΔⵠ + Ⲇ * 7);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 0;
		ᐃΔⵠ(ᐃ, ⵠⵠΔᐃ, 0, 60 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠⵠ]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, -7 * Ⲇ);
		ᐃ.save();
		for (var Δᐃ = 0; Δᐃ < ⵠⵠⲆᐃᐃ; Δᐃ++) {
			ᐃ.rotate(Math.PI / 5);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 65, 0);
			ᐃⵠΔⵠ(ᐃ, 3, Ⲇ * ⲆⵠⵠΔⵠ, ⲆⵠⲆᐃ * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ᐃΔⲆⵠ], ⵠⲆⲆΔΔ * Ⲇ);
			ᐃ.restore()
		}
		ᐃ.restore();
		ᐃΔⵠ(ᐃ, 0, 0, 60 * Ⲇ, Ⲇᐃⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⵠᐃΔΔΔ], ΔᐃΔΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, 0, Ⲇᐃⵠⵠ, 40 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔⲆ]);
		ᐃΔⵠ(ᐃ, ⲆΔⵠΔ, ⵠⵠΔᐃ, Ⲇ * 25);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠᐃⵠ], ᐃⲆ[ⲆⵠΔⲆⵠ], Ⲇ * 8);
		return ⲆⲆ
	}

	function ᐃᐃⵠⲆⲆⲆⵠ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 85 * Ⲇ;
		ⲆⲆ.height = 145 * Ⲇ;
		ᐃ.translate(-20 * Ⲇ, -95 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 50, 105 * Ⲇ);
		ᐃ.bezierCurveTo(52 * Ⲇ, Ⲇ * 119, 64 * Ⲇ, 137 * Ⲇ, 71 * Ⲇ, Ⲇ * 146);
		ᐃ.bezierCurveTo(71 * Ⲇ, 161 * Ⲇ, Ⲇ * 74, 169 * Ⲇ, 79 * Ⲇ, Ⲇ * 179);
		ᐃ.bezierCurveTo(Ⲇ * 68, Ⲇ * 192, 70 * Ⲇ, 204 * Ⲇ, 69 * Ⲇ, Ⲇ * 216);
		ᐃ.bezierCurveTo(50 * Ⲇ, Ⲇ * 189.5, Ⲇ * 50, Ⲇ * 189.5, Ⲇ * 31, Ⲇ * 163);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 44, Ⲇ * 106);
		ᐃ.bezierCurveTo(Ⲇ * 49, 90 * Ⲇ, 58 * Ⲇ, 104 * Ⲇ, 51 * Ⲇ, 121 * Ⲇ);
		ᐃ.bezierCurveTo(45 * Ⲇ, Ⲇ * 143, 41 * Ⲇ, Ⲇ * 151, Ⲇ * 37, 162 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 48, Ⲇ * 180, Ⲇ * 58, 188 * Ⲇ, 76 * Ⲇ, 205 * Ⲇ);
		ᐃ.bezierCurveTo(104 * Ⲇ, Ⲇ * 209, Ⲇ * 105, 229 * Ⲇ, 92 * Ⲇ, 235 * Ⲇ);
		ᐃ.bezierCurveTo(76 * Ⲇ, Ⲇ * 239, Ⲇ * 75, Ⲇ * 232, Ⲇ * 56, Ⲇ * 213);
		ᐃ.bezierCurveTo(Ⲇ * 31, 187 * Ⲇ, Ⲇ * 28, 176 * Ⲇ, 23 * Ⲇ, 162 * Ⲇ);
		ᐃ.bezierCurveTo(38 * Ⲇ, Ⲇ * 131, Ⲇ * 40, 120 * Ⲇ, Ⲇ * 44, Ⲇ * 106);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠᐃ], ᐃⲆ[3], Ⲇ * ⲆΔⵠᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 30, Ⲇ * 159);
		ᐃ.bezierCurveTo(Ⲇ * 46, Ⲇ * 157, Ⲇ * 59, Ⲇ * 152, 68 * Ⲇ, 148 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 63, Ⲇ * 155, Ⲇ * 52, 160 * Ⲇ, 44 * Ⲇ, Ⲇ * 164);
		ᐃ.bezierCurveTo(Ⲇ * 59, Ⲇ * 169, Ⲇ * 66, Ⲇ * 174, 75 * Ⲇ, Ⲇ * 178);
		ᐃ.bezierCurveTo(58 * Ⲇ, 178 * Ⲇ, 49 * Ⲇ, Ⲇ * 175, Ⲇ * 37, Ⲇ * 174);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃᐃⵠ]);
		return ⲆⲆ
	}

	function ⵠΔᐃᐃⲆⲆⵠΔΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = 170 * Ⲇ;
		var ⲆΔΔ = Ⲇ * 172;
		var ΔΔ = Δⵠᐃ / ᐃᐃᐃᐃ;
		var ΔΔⵠ = ⲆΔΔ / ⲆᐃⵠⲆ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.translate(ΔΔ, ΔΔⵠ);
		ᐃ.save();
		for (var Δᐃ = 0; Δᐃ < ⲆΔⲆᐃⵠ; Δᐃ++) {
			ᐃ.rotate(Math.PI / 5);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 65, 0);
			ᐃⵠΔⵠ(ᐃ, 3, ΔⵠᐃⲆΔⲆⵠ * Ⲇ, ᐃᐃⲆⵠ * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.restore()
		}
		ᐃ.restore();
		ᐃΔⵠ(ᐃ, 0, 0, Ⲇ * 40, ⵠΔΔᐃ);
		ᐃⵠ(ᐃ, ⲆᐃⵠⲆⲆ, ᐃⲆ[0], Ⲇ * ᐃⲆⵠⲆⲆ);
		ᐃΔⵠ(ᐃ, 0, Δⵠⵠ, 20 * Ⲇ, ⵠⲆᐃ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		return ⲆⲆ
	}

	function ᐃᐃᐃⵠⲆΔᐃⲆΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 400;
		ⲆⲆ.height = Ⲇ * 400;
		ᐃ.translate(0, Ⲇ * ᐃⵠⲆⵠᐃⵠΔ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠⲆⲆⲆ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 102, Ⲇ * 154);
		ᐃ.bezierCurveTo(Ⲇ * 108, 216.5 * Ⲇ, Ⲇ * 108, 216.5 * Ⲇ, 114 * Ⲇ, Ⲇ * 279);
		ᐃ.bezierCurveTo(124 * Ⲇ, Ⲇ * 300, Ⲇ * 237, Ⲇ * 299, 251 * Ⲇ, Ⲇ * 279);
		ᐃ.bezierCurveTo(257 * Ⲇ, Ⲇ * 217, Ⲇ * 257, Ⲇ * 217, 263 * Ⲇ, 155 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 248, Ⲇ * 194, Ⲇ * 91, Ⲇ * 180, 103 * Ⲇ, 156 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(102 * Ⲇ, Ⲇ * 154);
		ᐃ.bezierCurveTo(Ⲇ * 106, 53 * Ⲇ, ⲆⵠⲆΔᐃΔΔ * Ⲇ, Ⲇ * 53, Ⲇ * 263, Ⲇ * 154);
		ᐃ.bezierCurveTo(Ⲇ * 248, 38 * Ⲇ, Ⲇ * 99, Ⲇ * 69, 103 * Ⲇ, 154 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠᐃⵠⵠ], Ⲇ * ΔᐃⵠⲆᐃΔΔ);
		ᐃ.translate(ᐃⲆⵠΔ, Ⲇ * -ⵠᐃᐃⵠᐃ);
		ᐃ.globalAlpha = ΔⵠⲆ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 103, 154 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 98, Ⲇ * 119, 264 * Ⲇ, Ⲇ * 119, Ⲇ * 264, Ⲇ * 154);
		ᐃ.bezierCurveTo(Ⲇ * 271, 189 * Ⲇ, Ⲇ * 94, 188 * Ⲇ, Ⲇ * 103, 154 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆⲆ], ᐃⲆ[Δⵠᐃᐃ], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 102, Ⲇ * 154);
		ᐃ.bezierCurveTo(Ⲇ * 108, Ⲇ * 216.5, Ⲇ * 108, Ⲇ * 216.5, Ⲇ * 114, Ⲇ * 279);
		ᐃ.bezierCurveTo(124 * Ⲇ, 300 * Ⲇ, Ⲇ * 237, 299 * Ⲇ, 251 * Ⲇ, Ⲇ * 279);
		ᐃ.bezierCurveTo(Ⲇ * 257, 217 * Ⲇ, 257 * Ⲇ, Ⲇ * 217, Ⲇ * 263, Ⲇ * 155);
		ᐃ.bezierCurveTo(248 * Ⲇ, Ⲇ * 194, Ⲇ * 91, Ⲇ * 180, 103 * Ⲇ, 156 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃ], ᐃⲆ[ᐃⲆᐃⵠ], ΔΔΔⲆΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 182, 185 * Ⲇ);
		ᐃ.bezierCurveTo(182.5 * Ⲇ, Ⲇ * 237.5, Ⲇ * 182.5, 237.5 * Ⲇ, Ⲇ * 183, 290 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠⵠⵠⲆⵠ, ᐃⲆ[2], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 222, Ⲇ * 287);
		ᐃ.bezierCurveTo(Ⲇ * 226, Ⲇ * 233.5, 226 * Ⲇ, Ⲇ * 233.5, 230 * Ⲇ, 180 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆᐃⵠⲆ], ΔⲆΔᐃΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(145 * Ⲇ, 290 * Ⲇ);
		ᐃ.bezierCurveTo(140.5 * Ⲇ, 237 * Ⲇ, 140.5 * Ⲇ, Ⲇ * 237, Ⲇ * 136, 184 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 11 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(105 * Ⲇ, 184 * Ⲇ);
		ᐃ.bezierCurveTo(148 * Ⲇ, Ⲇ * 205, 231 * Ⲇ, Ⲇ * 202, 260 * Ⲇ, 182 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 259, Ⲇ * 195.5, Ⲇ * 259, 195.5 * Ⲇ, Ⲇ * 258, 209 * Ⲇ);
		ᐃ.bezierCurveTo(217 * Ⲇ, 218 * Ⲇ, Ⲇ * 163, Ⲇ * 225, 108 * Ⲇ, Ⲇ * 207);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠᐃΔ], ᐃⲆ[2], Ⲇ * 11);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(251 * Ⲇ, Ⲇ * 276);
		ᐃ.bezierCurveTo(Ⲇ * 251.5, Ⲇ * 267.5, 251.5 * Ⲇ, Ⲇ * 267.5, 252 * Ⲇ, 259 * Ⲇ);
		ᐃ.bezierCurveTo(212 * Ⲇ, Ⲇ * 272, Ⲇ * 156, Ⲇ * 275, Ⲇ * 112, 260 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 112.5, 269 * Ⲇ, 112.5 * Ⲇ, Ⲇ * 269, 113 * Ⲇ, 278 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 155, Ⲇ * 306, 253 * Ⲇ, Ⲇ * 286, Ⲇ * 250, Ⲇ * 276);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⲆⵠ], ᐃⲆ[2], Ⲇ * ⵠⵠᐃΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 102, Ⲇ * 154);
		ᐃ.bezierCurveTo(106 * Ⲇ, Ⲇ * 53, Ⲇ * 255, 53 * Ⲇ, Ⲇ * 263, Ⲇ * 154);
		ᐃ.bezierCurveTo(248 * Ⲇ, 38 * Ⲇ, 99 * Ⲇ, Ⲇ * 69, 103 * Ⲇ, Ⲇ * 154);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠΔᐃⵠ], 11 * Ⲇ);
		return ⲆⲆ
	}

	function ⲆᐃΔⵠΔΔᐃΔᐃ(Ⲇ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 200;
		var ⲆΔΔ = 180 * Ⲇ;
		var ⵠᐃⵠ = 8 * Ⲇ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ;
		ᐃ.beginPath();
		ᐃᐃᐃ(ᐃ, ⲆⲆᐃΔ, ⲆⲆᐃΔ, Δⵠᐃ, ⲆΔΔ - ⵠᐃⵠ, ⵠᐃⵠ);
		ᐃ.globalAlpha = .8;
		ᐃⵠ(ᐃ, "#1D6055");
		ᐃ.globalAlpha = ⵠΔⲆ;
		var text = ⲆΔⵠⵠⵠ(Ⲇ, "Leaderboard", 25, "red");
		ᐃ.drawImage(text, (Δⵠᐃ - text.width) / ΔⲆⲆⵠ, Ⲇ * 5);
		return ⲆⲆ
	} // LEADERBOARD

	function ⲆΔᐃᐃⵠΔΔ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 109;
		ⲆⲆ.height = 110 * Ⲇ;
		ᐃΔⵠ(ᐃ, 54.5 * Ⲇ, 55 * Ⲇ, 48.038209575038294 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ], ᐃⲆ[1], 8 * Ⲇ);
		if (0 == Δᐃ) {
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 54.928558349609375, Ⲇ * 43.72320556640625);
			ᐃ.bezierCurveTo(66.92855834960938 * Ⲇ, 31.72320556640625 * Ⲇ, 69.92855834960938 * Ⲇ, 29.72320556640625 * Ⲇ, Ⲇ * 74.92855834960938, 29.72320556640625 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 86.92855834960938, 28.72320556640625 * Ⲇ, 91.92855834960938 * Ⲇ, Ⲇ * 42.72320556640625, Ⲇ * 89.92855834960938, Ⲇ * 52.72320556640625);
			ᐃ.bezierCurveTo(88.92855834960938 * Ⲇ, Ⲇ * 63.72320556640625, 73.92855834960938 * Ⲇ, Ⲇ * 75.72320556640625, 55.928558349609375 * Ⲇ, 87.72320556640625 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 37.928558349609375, Ⲇ * 78.72320556640625, Ⲇ * 26.928558349609375, Ⲇ * 65.72320556640625, Ⲇ * 19.928558349609375, 54.72320556640625 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 13.928558349609375, 42.72320556640625 * Ⲇ, Ⲇ * 21.928558349609375, 28.72320556640625 * Ⲇ, 35.928558349609375 * Ⲇ, Ⲇ * 29.72320556640625);
			ᐃ.bezierCurveTo(45.928558349609375 * Ⲇ, Ⲇ * 31.72320556640625, Ⲇ * 51.928558349609375, 40.72320556640625 * Ⲇ, 53.928558349609375 * Ⲇ, 44.72320556640625 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[2])
		} else if (ⲆⵠⲆ == Δᐃ) {
			ᐃ.save();
			ᐃ.translate(Ⲇ * 55, Ⲇ * 39.48748779296875);
			ᐃᐃᐃ(ᐃ, Ⲇ * -11.5, Ⲇ * -36, 23 * Ⲇ, Ⲇ * 72, 10 * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ⵠᐃⵠΔ], 4 * Ⲇ);
			ᐃΔⵠ(ᐃ, 54.5 * Ⲇ, 78.48748779296875 * Ⲇ, 22.02271554554524 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⵠᐃⵠΔ], 4 * Ⲇ);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 55.5, Ⲇ * 57.287506103515625);
			ᐃᐃᐃ(ᐃ, -9 * Ⲇ, -ΔⲆⲆⵠΔ * Ⲇ, 18 * Ⲇ, Ⲇ * 32, ⲆΔⲆᐃⵠ * Ⲇ);
			ᐃ.restore();
			ᐃⵠ(ᐃ, ᐃⲆ[4]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(66.5 * Ⲇ, Ⲇ * 25.287506103515625);
			ᐃ.bezierCurveTo(Ⲇ * 60.5, 25.287506103515625 * Ⲇ, 63.5 * Ⲇ, Ⲇ * 25.287506103515625, 54.5 * Ⲇ, Ⲇ * 25.287506103515625);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⵠⲆⵠⲆ, ᐃⲆ[ΔΔⵠΔ], Ⲇ * 4);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(66.5 * Ⲇ, Ⲇ * 37.287506103515625);
			ᐃ.bezierCurveTo(Ⲇ * 60.5, Ⲇ * 37.287506103515625, Ⲇ * 60.5, 37.287506103515625 * Ⲇ, Ⲇ * 54.5, 37.287506103515625 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠⵠΔΔⲆ], Ⲇ * ΔᐃΔⲆΔ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(66.5 * Ⲇ, 50.287506103515625 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 61, Ⲇ * 50.287506103515625, 61 * Ⲇ, Ⲇ * 50.287506103515625, Ⲇ * 55.5, Ⲇ * 50.287506103515625);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, undefined, ᐃⲆ[5], ΔⵠⲆᐃ * Ⲇ)
		} else if (Δᐃ == ⵠΔᐃΔᐃ) {
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 45.928558349609375, Ⲇ * 55.29463195800781);
			ᐃ.bezierCurveTo(Ⲇ * 38.928558349609375, Ⲇ * 67.29463195800781, 38.928558349609375 * Ⲇ, Ⲇ * 67.29463195800781, Ⲇ * 31.928558349609375, Ⲇ * 79.29463195800781);
			ᐃ.bezierCurveTo(Ⲇ * 15.928558349609375, Ⲇ * 85.29463195800781, Ⲇ * 17.928558349609375, Ⲇ * 86.29463195800781, Ⲇ * 17.928558349609375, 90.29463195800781 * Ⲇ);
			ᐃ.bezierCurveTo(19.928558349609375 * Ⲇ, 94.29463195800781 * Ⲇ, Ⲇ * 21.928558349609375, Ⲇ * 94.29463195800781, Ⲇ * 27.928558349609375, Ⲇ * 92.29463195800781);
			ᐃ.bezierCurveTo(Ⲇ * 29.928558349609375, Ⲇ * 98.29463195800781, 30.928558349609375 * Ⲇ, 99.29463195800781 * Ⲇ, Ⲇ * 33.928558349609375, 99.29463195800781 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 38.928558349609375, Ⲇ * 97.29463195800781, 38.928558349609375 * Ⲇ, Ⲇ * 93.29463195800781, 37.928558349609375 * Ⲇ, Ⲇ * 86.29463195800781);
			ᐃ.bezierCurveTo(Ⲇ * 45.428558349609375, 73.29463195800781 * Ⲇ, Ⲇ * 51.928558349609375, 64.29463195800781 * Ⲇ, 52.928558349609375 * Ⲇ, 60.29463195800781 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆΔΔ]);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 55.928558349609375, Ⲇ * 8.866058349609375);
			ᐃ.bezierCurveTo(35.928558349609375 * Ⲇ, Ⲇ * 35.866058349609375, 37.928558349609375 * Ⲇ, 48.866058349609375 * Ⲇ, 46.928558349609375 * Ⲇ, 62.866058349609375 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 65.92855834960938, 72.86605834960938 * Ⲇ, Ⲇ * 80.92855834960938, Ⲇ * 55.866058349609375, Ⲇ * 93.92855834960938, Ⲇ * 36.866058349609375);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔΔ], ᐃⲆ[4], Δᐃᐃⵠᐃ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 93.92855834960938, 36.866058349609375 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 82.92855834960938, 37.866058349609375 * Ⲇ, 77.92855834960938 * Ⲇ, Ⲇ * 36.866058349609375, 67.92855834960938 * Ⲇ, Ⲇ * 28.866058349609375);
			ᐃ.bezierCurveTo(Ⲇ * 53.928558349609375, 16.866058349609375 * Ⲇ, 53.928558349609375 * Ⲇ, Ⲇ * 14.866058349609375, 55.928558349609375 * Ⲇ, Ⲇ * 7.866058349609375);
			ᐃ.bezierCurveTo(65.92855834960938 * Ⲇ, Ⲇ * 4.866058349609375, 71.92855834960938 * Ⲇ, Ⲇ * 7.866058349609375, Ⲇ * 83.92855834960938, Ⲇ * 13.866058349609375);
			ᐃ.bezierCurveTo(96.92855834960938 * Ⲇ, Ⲇ * 21.866058349609375, Ⲇ * 95.92855834960938, Ⲇ * 31.866058349609375, Ⲇ * 92.92855834960938, 36.866058349609375 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], Ⲇ * 6);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 68.92855834960938, Ⲇ * 16.866058349609375);
			ᐃ.bezierCurveTo(71.92855834960938 * Ⲇ, Ⲇ * 13.866058349609375, 76.92855834960938 * Ⲇ, 16.866058349609375 * Ⲇ, 79.92855834960938 * Ⲇ, 21.866058349609375 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 82.92855834960938, Ⲇ * 24.866058349609375, 81.92855834960938 * Ⲇ, Ⲇ * 27.866058349609375, 73.92855834960938 * Ⲇ, Ⲇ * 24.866058349609375);
			ᐃ.bezierCurveTo(Ⲇ * 67.92855834960938, Ⲇ * 20.866058349609375, Ⲇ * 66.92855834960938, 19.866058349609375 * Ⲇ, 67.92855834960938 * Ⲇ, Ⲇ * 17.866058349609375);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆⲆⵠ])
		} else Δᐃ == ⵠⵠⵠⵠ && (ᐃ.scale(.9, .9), ᐃ.translate(ΔΔⲆⵠΔ * Ⲇ, ⵠΔⵠⲆ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 54, .421875 * Ⲇ), ᐃ.bezierCurveTo(84 * Ⲇ, Ⲇ * 45.421875, Ⲇ * 89, 51.421875 * Ⲇ, 83 * Ⲇ, Ⲇ * 74.421875), ᐃ.bezierCurveTo(Ⲇ * 74, Ⲇ * 95.421875, 46 * Ⲇ, Ⲇ * 98.421875, Ⲇ * 30, Ⲇ * 78.421875), ᐃ.bezierCurveTo(Ⲇ * 22, 59.421875 * Ⲇ, Ⲇ * 27, 49.421875 * Ⲇ, Ⲇ * 34, 36.421875 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ⲆΔΔⲆ], 6 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(74 * Ⲇ, Ⲇ * 52.421875), ᐃ.bezierCurveTo(77 * Ⲇ, 73.421875 * Ⲇ, Ⲇ * 69, Ⲇ * 81.421875, Ⲇ * 58, 81.421875 * Ⲇ), ᐃ.bezierCurveTo(66 * Ⲇ, Ⲇ * 71.421875, Ⲇ * 70, Ⲇ * 66.421875, Ⲇ * 74, Ⲇ * 52.421875), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[3]));
		return ⲆⲆ
	}

	function ⲆⲆⵠⲆΔⲆΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 46 * Ⲇ;
		ⲆⲆ.height = 140 * Ⲇ;
		ᐃ.scale(Ⲇ * -ᐃⲆΔ, Ⲇ * 1);
		ᐃ.translate(-50 * Ⲇ, Ⲇ * 40);
		ᐃ.translate(-ᐃᐃΔΔⲆ * Ⲇ, 0);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠΔΔ;
		ᐃ.translate(Ⲇ * 10, 0);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 22.599990844726562, 85.94999694824219 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 17.599990844726562, 83.94999694824219 * Ⲇ, Ⲇ * 17.599990844726562, Ⲇ * 83.94999694824219, Ⲇ * 12.599990844726562, Ⲇ * 81.94999694824219);
		ᐃ.bezierCurveTo(Ⲇ * 19.599990844726562, 73.94999694824219 * Ⲇ, Ⲇ * 2.5999908447265625, Ⲇ * 22.949996948242188, Ⲇ * 33.59999084472656, Ⲇ * 7.9499969482421875);
		ᐃ.bezierCurveTo(27.599990844726562 * Ⲇ, Ⲇ * 28.949996948242188, 33.59999084472656 * Ⲇ, 26.949996948242188 * Ⲇ, 35.59999084472656 * Ⲇ, 32.94999694824219 * Ⲇ);
		ᐃ.bezierCurveTo(25.599990844726562 * Ⲇ, Ⲇ * 59.94999694824219, Ⲇ * 26.599990844726562, Ⲇ * 69.94999694824219, Ⲇ * 29.599990844726562, Ⲇ * 82.94999694824219);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(-ΔΔⲆΔ * Ⲇ, 0);
		ᐃ.moveTo(17.599990844726562 * Ⲇ, Ⲇ * 89.75);
		ᐃ.bezierCurveTo(24.599990844726562 * Ⲇ, Ⲇ * 99.75, Ⲇ * 24.599990844726562, 101.75 * Ⲇ, Ⲇ * 20.599990844726562, Ⲇ * 111.75);
		ᐃ.bezierCurveTo(28.599990844726562 * Ⲇ, 110.75 * Ⲇ, Ⲇ * 26.599990844726562, Ⲇ * 112.75, 28.599990844726562 * Ⲇ, 111.75 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 30.599990844726562, 96.75 * Ⲇ, 32.59999084472656 * Ⲇ, 96.75 * Ⲇ, 30.599990844726562 * Ⲇ, Ⲇ * 87.75);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(1 * Ⲇ, ⵠᐃΔ);
		ᐃ.moveTo(Ⲇ * 7.5999908447265625, Ⲇ * 86.34999084472656);
		ᐃ.bezierCurveTo(12.599990844726562 * Ⲇ, 85.34999084472656 * Ⲇ, Ⲇ * 14.599990844726562, 84.34999084472656 * Ⲇ, 13.599990844726562 * Ⲇ, 84.34999084472656 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 21.599990844726562, Ⲇ * 83.34999084472656, Ⲇ * 21.599990844726562, Ⲇ * 83.34999084472656, 29.599990844726562 * Ⲇ, Ⲇ * 82.34999084472656);
		ᐃ.bezierCurveTo(33.59999084472656 * Ⲇ, 85.84999084472656 * Ⲇ, 33.59999084472656 * Ⲇ, Ⲇ * 85.84999084472656, Ⲇ * 37.59999084472656, 89.34999084472656 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 34.09999084472656, Ⲇ * 91.84999084472656, 34.09999084472656 * Ⲇ, Ⲇ * 91.84999084472656, Ⲇ * 30.599990844726562, 94.34999084472656 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 21.099990844726562, 93.34999084472656 * Ⲇ, Ⲇ * 21.099990844726562, Ⲇ * 93.34999084472656, Ⲇ * 11.599990844726562, 92.34999084472656 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 23.599990844726562, Ⲇ * 110.94999694824219);
		ᐃ.rotate(ΔΔⲆⲆ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ᐃⲆᐃⲆⲆ, -4 * Ⲇ, ᐃⲆᐃⲆΔ * Ⲇ, 8 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⵠ]);
		ᐃ.translate(0 * Ⲇ, 0);
		ᐃ.globalAlpha = ΔΔⲆΔ;
		ᐃ.translate(Ⲇ * ᐃᐃⵠⵠΔ, ⵠΔⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 22.599990844726562, Ⲇ * 85.94999694824219);
		ᐃ.bezierCurveTo(Ⲇ * 17.599990844726562, Ⲇ * 83.94999694824219, 17.599990844726562 * Ⲇ, Ⲇ * 83.94999694824219, 12.599990844726562 * Ⲇ, Ⲇ * 81.94999694824219);
		ᐃ.bezierCurveTo(Ⲇ * 19.599990844726562, 73.94999694824219 * Ⲇ, 2.5999908447265625 * Ⲇ, 22.949996948242188 * Ⲇ, 33.59999084472656 * Ⲇ, 7.9499969482421875 * Ⲇ);
		ᐃ.bezierCurveTo(27.599990844726562 * Ⲇ, Ⲇ * 28.949996948242188, 33.59999084472656 * Ⲇ, Ⲇ * 26.949996948242188, 35.59999084472656 * Ⲇ, 32.94999694824219 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 25.599990844726562, 59.94999694824219 * Ⲇ, Ⲇ * 26.599990844726562, Ⲇ * 69.94999694824219, Ⲇ * 29.599990844726562, Ⲇ * 82.94999694824219);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆⵠⲆᐃ], 3 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(-ᐃΔⵠΔ * Ⲇ, ΔΔⲆⲆ);
		ᐃ.moveTo(Ⲇ * 17.599990844726562, Ⲇ * 89.75);
		ᐃ.bezierCurveTo(24.599990844726562 * Ⲇ, 99.75 * Ⲇ, 24.599990844726562 * Ⲇ, 101.75 * Ⲇ, 20.599990844726562 * Ⲇ, 111.75 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 28.599990844726562, Ⲇ * 110.75, 26.599990844726562 * Ⲇ, Ⲇ * 112.75, Ⲇ * 28.599990844726562, 111.75 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 30.599990844726562, 96.75 * Ⲇ, Ⲇ * 32.59999084472656, Ⲇ * 96.75, Ⲇ * 30.599990844726562, Ⲇ * 87.75);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆΔ], ᐃⲆ[ΔᐃΔⲆ], Ⲇⵠᐃᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(Ⲇ * 1, 0);
		ᐃ.moveTo(7.5999908447265625 * Ⲇ, 86.34999084472656 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 12.599990844726562, Ⲇ * 85.34999084472656, 14.599990844726562 * Ⲇ, 84.34999084472656 * Ⲇ, Ⲇ * 13.599990844726562, Ⲇ * 84.34999084472656);
		ᐃ.bezierCurveTo(21.599990844726562 * Ⲇ, Ⲇ * 83.34999084472656, Ⲇ * 21.599990844726562, Ⲇ * 83.34999084472656, Ⲇ * 29.599990844726562, Ⲇ * 82.34999084472656);
		ᐃ.bezierCurveTo(33.59999084472656 * Ⲇ, 85.84999084472656 * Ⲇ, Ⲇ * 33.59999084472656, Ⲇ * 85.84999084472656, Ⲇ * 37.59999084472656, Ⲇ * 89.34999084472656);
		ᐃ.bezierCurveTo(Ⲇ * 34.09999084472656, 91.84999084472656 * Ⲇ, Ⲇ * 34.09999084472656, Ⲇ * 91.84999084472656, Ⲇ * 30.599990844726562, 94.34999084472656 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 21.099990844726562, 93.34999084472656 * Ⲇ, 21.099990844726562 * Ⲇ, Ⲇ * 93.34999084472656, 11.599990844726562 * Ⲇ, Ⲇ * 92.34999084472656);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆ], ᐃⲆ[ⲆᐃⵠⲆ], Ⲇ * 3);
		ᐃ.save();
		ᐃ.translate(23.599990844726562 * Ⲇ, 110.94999694824219 * Ⲇ);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ᐃⲆᐃⲆⲆ, Ⲇ * -4, 14 * Ⲇ, Ⲇ * ⵠΔᐃᐃΔ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆᐃᐃΔ], Ⲇ * 3);
		return ⲆⲆ
	}

	function ⲆΔⲆᐃᐃⵠⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 450;
		ⲆⲆ.height = Ⲇ * 260;
		ᐃ.translate(ᐃⲆⵠΔΔ * Ⲇ, Ⲇ * ᐃⲆᐃⲆᐃ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : Δᐃᐃ;
		ᐃ.translate(ⲆΔⲆΔᐃ * Ⲇ, Ⲇ * ⲆⲆᐃⵠⲆ);
		ᐃᐃᐃ(ᐃ, ⲆᐃⲆ, ⵠⵠΔᐃ, Ⲇ * 400, 220 * Ⲇ, Ⲇ * 30);
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(-ΔⲆᐃⲆⲆ * Ⲇ, -ΔΔᐃⲆΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(9 * Ⲇ, Ⲇ * ⲆΔΔΔ);
		ᐃ.bezierCurveTo(381 * Ⲇ, 2 * Ⲇ, Ⲇ * 197, 4.5 * Ⲇ, 385 * Ⲇ, Ⲇ * 4);
		ᐃ.bezierCurveTo(Ⲇ * 397, ⵠΔΔⵠ * Ⲇ, 401 * Ⲇ, Ⲇ * ΔᐃΔⵠ, 399 * Ⲇ, Ⲇ * 23);
		ᐃ.bezierCurveTo(Ⲇ * 367, 27 * Ⲇ, Ⲇ * 367, 27 * Ⲇ, 335 * Ⲇ, Ⲇ * 31);
		ᐃ.bezierCurveTo(Ⲇ * 366.5, 33.5 * Ⲇ, 366.5 * Ⲇ, 33.5 * Ⲇ, Ⲇ * 398, Ⲇ * 36);
		ᐃ.bezierCurveTo(398 * Ⲇ, Ⲇ * 41.5, 398 * Ⲇ, 41.5 * Ⲇ, Ⲇ * 398, Ⲇ * 47);
		ᐃ.bezierCurveTo(398 * Ⲇ, Ⲇ * 56, Ⲇ * 399, Ⲇ * 56, Ⲇ * 386, Ⲇ * 56);
		ᐃ.bezierCurveTo(200.5 * Ⲇ, 56.5 * Ⲇ, Ⲇ * 200.5, Ⲇ * 56.5, Ⲇ * 15, Ⲇ * 57);
		ᐃ.bezierCurveTo(Ⲇ * Δᐃᐃⵠ, 55 * Ⲇ, 4 * Ⲇ, 52 * Ⲇ, ⲆⲆᐃΔᐃ * Ⲇ, 43 * Ⲇ);
		ᐃ.bezierCurveTo(4 * Ⲇ, 30.5 * Ⲇ, ᐃΔⲆΔⲆ * Ⲇ, Ⲇ * 30.5, 4 * Ⲇ, 18 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ΔⵠΔΔᐃ, Ⲇ * 18.5, Ⲇ * 16, Ⲇ * 18.5, Ⲇ * 28, Ⲇ * ⲆΔᐃΔⲆ);
		ᐃ.bezierCurveTo(Ⲇ * 18.5, Ⲇ * ⵠᐃΔⵠᐃ, 18.5 * Ⲇ, 12 * Ⲇ, 9 * Ⲇ, 5 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆᐃⵠ], ᐃⲆ[ⲆⲆⲆᐃ], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(5 * Ⲇ, 70 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 5, Ⲇ * 58, ⵠⵠΔⲆ * Ⲇ, Ⲇ * 55, Ⲇ * ᐃⵠⲆΔᐃΔⲆ, Ⲇ * 57);
		ᐃ.bezierCurveTo(Ⲇ * 203, Ⲇ * 57, 203 * Ⲇ, 57 * Ⲇ, 389 * Ⲇ, 57 * Ⲇ);
		ᐃ.bezierCurveTo(400 * Ⲇ, 57 * Ⲇ, Ⲇ * 400, 59 * Ⲇ, Ⲇ * 400, 69 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 400.5, 83.5 * Ⲇ, 400.5 * Ⲇ, Ⲇ * 83.5, Ⲇ * 401, 98 * Ⲇ);
		ᐃ.bezierCurveTo(402 * Ⲇ, Ⲇ * 108, Ⲇ * 401, 108 * Ⲇ, 388 * Ⲇ, Ⲇ * 108);
		ᐃ.bezierCurveTo(Ⲇ * 201.5, 108 * Ⲇ, 201.5 * Ⲇ, 108 * Ⲇ, 15 * Ⲇ, 108 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⵠⵠᐃ, Ⲇ * 106, Ⲇ * 5, 106 * Ⲇ, ⵠᐃᐃΔᐃ * Ⲇ, Ⲇ * 87);
		ᐃ.bezierCurveTo(33 * Ⲇ, 84.5 * Ⲇ, 33 * Ⲇ, Ⲇ * 84.5, 61 * Ⲇ, Ⲇ * 82);
		ᐃ.bezierCurveTo(Ⲇ * 33.5, Ⲇ * 76.5, 33.5 * Ⲇ, 76.5 * Ⲇ, 6 * Ⲇ, Ⲇ * 71);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆΔᐃ], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 19, 158 * Ⲇ);
		ᐃ.bezierCurveTo(2 * Ⲇ, 159 * Ⲇ, Ⲇ * ᐃᐃᐃΔⵠ, 156 * Ⲇ, ⵠⵠΔⲆ * Ⲇ, Ⲇ * 118);
		ᐃ.bezierCurveTo(ΔⵠⲆⵠⲆ * Ⲇ, Ⲇ * 110, Ⲇ * ⲆΔΔΔΔ, 107 * Ⲇ, 26 * Ⲇ, Ⲇ * 109);
		ᐃ.bezierCurveTo(206.5 * Ⲇ, 109 * Ⲇ, 206.5 * Ⲇ, Ⲇ * 109, Ⲇ * 387, 109 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 400, 108 * Ⲇ, Ⲇ * 400, 108 * Ⲇ, 398 * Ⲇ, Ⲇ * 127);
		ᐃ.bezierCurveTo(Ⲇ * 384.5, 130 * Ⲇ, Ⲇ * 384.5, Ⲇ * 130, 371 * Ⲇ, 133 * Ⲇ);
		ᐃ.bezierCurveTo(385.5 * Ⲇ, 138 * Ⲇ, 385.5 * Ⲇ, 138 * Ⲇ, Ⲇ * 400, 143 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 402, Ⲇ * 156, 402 * Ⲇ, Ⲇ * 162, Ⲇ * 385, Ⲇ * 160);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⲆ], ᐃⲆ[ⵠΔᐃ], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(4 * Ⲇ, 183 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⵠⵠᐃ, 163 * Ⲇ, Ⲇ * ΔⵠⲆᐃ, 158 * Ⲇ, Ⲇ * 28, 161 * Ⲇ);
		ᐃ.bezierCurveTo(207.5 * Ⲇ, Ⲇ * 161, Ⲇ * 207.5, 161 * Ⲇ, Ⲇ * 387, Ⲇ * 161);
		ᐃ.bezierCurveTo(Ⲇ * 401, 159 * Ⲇ, 400 * Ⲇ, Ⲇ * 164, Ⲇ * 400, 177 * Ⲇ);
		ᐃ.bezierCurveTo(364.5 * Ⲇ, 184 * Ⲇ, 364.5 * Ⲇ, 184 * Ⲇ, 329 * Ⲇ, 191 * Ⲇ);
		ᐃ.bezierCurveTo(364.5 * Ⲇ, Ⲇ * 192.5, 364.5 * Ⲇ, Ⲇ * 192.5, 400 * Ⲇ, Ⲇ * 194);
		ᐃ.bezierCurveTo(Ⲇ * 403, 209 * Ⲇ, Ⲇ * 401, 214 * Ⲇ, 385 * Ⲇ, Ⲇ * 213);
		ᐃ.bezierCurveTo(Ⲇ * 201.5, 213 * Ⲇ, 201.5 * Ⲇ, 213 * Ⲇ, 18 * Ⲇ, Ⲇ * 213);
		ᐃ.bezierCurveTo(ᐃΔΔⵠ * Ⲇ, Ⲇ * 213, 2 * Ⲇ, Ⲇ * 213, Ⲇ * 4, 198 * Ⲇ);
		ᐃ.bezierCurveTo(12.5 * Ⲇ, 193 * Ⲇ, 12.5 * Ⲇ, Ⲇ * 193, Ⲇ * 21, Ⲇ * 188);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆⲆ], ᐃⲆ[1], Ⲇ * 12);
		ᐃΔⵠ(ᐃ, 41 * Ⲇ, 30 * Ⲇ, 14.7648230602334 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆΔ], ᐃⲆ[Δᐃᐃ], 12 * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 369, 30 * Ⲇ, 15.556349186104045 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[1], ΔⲆΔᐃΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, 364 * Ⲇ, 190 * Ⲇ, Ⲇ * 15.620499351813308);
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆⲆⲆᐃ], ᐃⲆⵠΔⵠ * Ⲇ);
		ᐃΔⵠ(ᐃ, 41 * Ⲇ, 186 * Ⲇ, 15.556349186104045 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[1], ᐃⵠᐃⵠⵠ * Ⲇ);
		return ⲆⲆ
	}

	function ΔᐃΔⲆⵠⲆΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 120;
		ⲆⲆ.height = 320 * Ⲇ;
		ᐃ.translate(-60 * Ⲇ, -15 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 188.5, Ⲇ * 3.953125);
		ᐃ.bezierCurveTo(Ⲇ * 188.5, Ⲇ * 171.453125, Ⲇ * 188.5, 171.453125 * Ⲇ, Ⲇ * 188.5, Ⲇ * 338.953125);
		ᐃ.bezierCurveTo(Ⲇ * 162.5, 268.953125 * Ⲇ, Ⲇ * 145.5, 265.953125 * Ⲇ, Ⲇ * 116.5, Ⲇ * 244.953125);
		ᐃ.bezierCurveTo(67.5 * Ⲇ, 204.953125 * Ⲇ, Ⲇ * 87.5, 160.953125 * Ⲇ, 113.5 * Ⲇ, 125.953125 * Ⲇ);
		ᐃ.bezierCurveTo(141.5 * Ⲇ, Ⲇ * 90.953125, Ⲇ * 176.5, 56.953125 * Ⲇ, Ⲇ * 188.5, Ⲇ * 3.953125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		return ⲆⲆ
	}

	function ⲆΔⵠⵠⵠᐃⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 465;
		ⲆⲆ.height = 405 * Ⲇ;
		ᐃ.globalAlpha = 1;
		ᐃ.translate(Δⵠᐃⵠⵠ * Ⲇ, Ⲇ * 0);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 39.000030517578125, 162.03977966308594 * Ⲇ);
		ᐃ.bezierCurveTo(125.00003051757812 * Ⲇ, Ⲇ * 84.03977966308594, Ⲇ * 108.50003051757812, 115.03977966308594 * Ⲇ, 178.00003051757812 * Ⲇ, 68.03977966308594 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 299.0000305175781, 146.53977966308594 * Ⲇ, 299.0000305175781 * Ⲇ, Ⲇ * 146.53977966308594, 420.0000305175781 * Ⲇ, 225.03977966308594 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 400.0000305175781, 288.53977966308594 * Ⲇ, 400.0000305175781 * Ⲇ, Ⲇ * 288.53977966308594, 380.0000305175781 * Ⲇ, Ⲇ * 352.03977966308594);
		ᐃ.bezierCurveTo(216.50003051757812 * Ⲇ, 345.53977966308594 * Ⲇ, Ⲇ * 216.50003051757812, 345.53977966308594 * Ⲇ, 53.000030517578125 * Ⲇ, 339.03977966308594 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠᐃⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(23.000030517578125 * Ⲇ, Ⲇ * 306.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 5.000030517578125, Ⲇ * 275.94886779785156, Ⲇ * 6.000030517578125, 201.94886779785156 * Ⲇ, Ⲇ * 14.000030517578125, Ⲇ * 150.94886779785156);
		ᐃ.bezierCurveTo(40.000030517578125 * Ⲇ, Ⲇ * 34.94886779785156, Ⲇ * 157.00003051757812, Ⲇ * 14.948867797851562, Ⲇ * 199.00003051757812, Ⲇ * 11.948867797851562);
		ᐃ.bezierCurveTo(Ⲇ * 331.0000305175781, Ⲇ * .9488677978515625, 409.0000305175781 * Ⲇ, 61.94886779785156 * Ⲇ, Ⲇ * 428.0000305175781, Ⲇ * 133.94886779785156);
		ᐃ.bezierCurveTo(445.0000305175781 * Ⲇ, 207.94886779785156 * Ⲇ, Ⲇ * 439.0000305175781, 274.94886779785156 * Ⲇ, Ⲇ * 426.0000305175781, Ⲇ * 342.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 355.0000305175781, Ⲇ * 207.94886779785156, 345.0000305175781 * Ⲇ, Ⲇ * 208.94886779785156, Ⲇ * 333.0000305175781, Ⲇ * 202.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 262.0000305175781, 143.94886779785156 * Ⲇ, 236.00003051757812 * Ⲇ, Ⲇ * 148.94886779785156, Ⲇ * 189.00003051757812, 162.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 82.00003051757812, 190.94886779785156 * Ⲇ, 78.00003051757812 * Ⲇ, 235.94886779785156 * Ⲇ, Ⲇ * 62.000030517578125, 279.94886779785156 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ᐃΔⵠΔ], Ⲇ * ⲆᐃⵠⲆᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(17.000030517578125 * Ⲇ, Ⲇ * 149.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 76.00003051757812, Ⲇ * 67.94886779785156, 177.00003051757812 * Ⲇ, Ⲇ * 40.94886779785156, Ⲇ * 232.00003051757812, 45.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(316.0000305175781 * Ⲇ, 46.94886779785156 * Ⲇ, Ⲇ * 359.0000305175781, Ⲇ * 74.94886779785156, Ⲇ * 428.0000305175781, Ⲇ * 145.94886779785156);
		ᐃ.bezierCurveTo(414.0000305175781 * Ⲇ, Ⲇ * 73.94886779785156, Ⲇ * 386.0000305175781, 68.94886779785156 * Ⲇ, 359.0000305175781 * Ⲇ, Ⲇ * 43.94886779785156);
		ᐃ.bezierCurveTo(295.0000305175781 * Ⲇ, Ⲇ * 5.9488677978515625, 239.00003051757812 * Ⲇ, Ⲇ * 10.948867797851562, Ⲇ * 207.00003051757812, 10.948867797851562 * Ⲇ);
		ᐃ.bezierCurveTo(121.00003051757812 * Ⲇ, Ⲇ * 20.948867797851562, Ⲇ * 104.00003051757812, 34.94886779785156 * Ⲇ, Ⲇ * 45.000030517578125, 84.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 14.000030517578125, Ⲇ * 128.94886779785156, 18.000030517578125 * Ⲇ, Ⲇ * 142.94886779785156, 16.000030517578125 * Ⲇ, 151.94886779785156 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(23.000030517578125 * Ⲇ, 306.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 5.000030517578125, Ⲇ * 275.94886779785156, Ⲇ * 6.000030517578125, 201.94886779785156 * Ⲇ, 14.000030517578125 * Ⲇ, Ⲇ * 150.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 40.000030517578125, 34.94886779785156 * Ⲇ, Ⲇ * 157.00003051757812, Ⲇ * 14.948867797851562, 199.00003051757812 * Ⲇ, Ⲇ * 11.948867797851562);
		ᐃ.bezierCurveTo(331.0000305175781 * Ⲇ, .9488677978515625 * Ⲇ, 409.0000305175781 * Ⲇ, 61.94886779785156 * Ⲇ, Ⲇ * 428.0000305175781, 133.94886779785156 * Ⲇ);
		ᐃ.bezierCurveTo(445.0000305175781 * Ⲇ, Ⲇ * 207.94886779785156, 439.0000305175781 * Ⲇ, Ⲇ * 274.94886779785156, 426.0000305175781 * Ⲇ, Ⲇ * 342.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 355.0000305175781, 207.94886779785156 * Ⲇ, Ⲇ * 345.0000305175781, 208.94886779785156 * Ⲇ, Ⲇ * 333.0000305175781, Ⲇ * 202.94886779785156);
		ᐃ.bezierCurveTo(262.0000305175781 * Ⲇ, 143.94886779785156 * Ⲇ, Ⲇ * 236.00003051757812, Ⲇ * 148.94886779785156, Ⲇ * 189.00003051757812, Ⲇ * 162.94886779785156);
		ᐃ.bezierCurveTo(Ⲇ * 82.00003051757812, 190.94886779785156 * Ⲇ, Ⲇ * 78.00003051757812, Ⲇ * 235.94886779785156, 62.000030517578125 * Ⲇ, Ⲇ * 279.94886779785156);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[1], ΔⵠⵠΔⵠⵠᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 60.000030517578125, 288.03977966308594 * Ⲇ);
		ᐃ.bezierCurveTo(183.00003051757812 * Ⲇ, 320.03977966308594 * Ⲇ, 342.0000305175781 * Ⲇ, 306.03977966308594 * Ⲇ, Ⲇ * 399.0000305175781, Ⲇ * 286.03977966308594);
		ᐃ.bezierCurveTo(420.0000305175781 * Ⲇ, 345.03977966308594 * Ⲇ, Ⲇ * 410.0000305175781, Ⲇ * 335.03977966308594, 415.0000305175781 * Ⲇ, Ⲇ * 362.03977966308594);
		ᐃ.bezierCurveTo(351.0000305175781 * Ⲇ, 384.03977966308594 * Ⲇ, 299.0000305175781 * Ⲇ, Ⲇ * 389.03977966308594, Ⲇ * 215.00003051757812, 391.03977966308594 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 128.00003051757812, 388.03977966308594 * Ⲇ, 69.00003051757812 * Ⲇ, Ⲇ * 373.03977966308594, 39.000030517578125 * Ⲇ, Ⲇ * 359.03977966308594);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ᐃⵠⵠ], ΔᐃΔᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 47.000030517578125, Ⲇ * 327.03977966308594);
		ᐃ.bezierCurveTo(Ⲇ * 203.00003051757812, Ⲇ * 377.03977966308594, Ⲇ * 331.0000305175781, Ⲇ * 349.03977966308594, Ⲇ * 410.0000305175781, 330.03977966308594 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ], ᐃⲆ[1], 20 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 9.000030517578125, 339.1306915283203 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 2.000030517578125, 280.1306915283203 * Ⲇ, 30.000030517578125 * Ⲇ, Ⲇ * 219.1306915283203, Ⲇ * 85.00003051757812, Ⲇ * 167.1306915283203);
		ᐃ.bezierCurveTo(Ⲇ * 174.00003051757812, Ⲇ * 82.13069152832031, Ⲇ * 241.00003051757812, 101.13069152832031 * Ⲇ, 284.0000305175781 * Ⲇ, Ⲇ * 115.13069152832031);
		ᐃ.bezierCurveTo(Ⲇ * 333.0000305175781, Ⲇ * 134.1306915283203, Ⲇ * 376.0000305175781, Ⲇ * 177.1306915283203, 410.0000305175781 * Ⲇ, 247.1306915283203 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 439.0000305175781, Ⲇ * 300.1306915283203, Ⲇ * 442.0000305175781, Ⲇ * 346.1306915283203, Ⲇ * 430.0000305175781, Ⲇ * 363.1306915283203);
		ᐃ.bezierCurveTo(418.0000305175781 * Ⲇ, 366.1306915283203 * Ⲇ, Ⲇ * 395.0000305175781, 295.1306915283203 * Ⲇ, Ⲇ * 355.0000305175781, Ⲇ * 223.1306915283203);
		ᐃ.bezierCurveTo(299.0000305175781 * Ⲇ, Ⲇ * 156.1306915283203, 262.0000305175781 * Ⲇ, Ⲇ * 155.1306915283203, 215.00003051757812 * Ⲇ, 159.1306915283203 * Ⲇ);
		ᐃ.bezierCurveTo(133.00003051757812 * Ⲇ, Ⲇ * 171.1306915283203, Ⲇ * 120.00003051757812, 193.1306915283203 * Ⲇ, 96.00003051757812 * Ⲇ, 221.1306915283203 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 49.000030517578125, Ⲇ * 262.1306915283203, 47.000030517578125 * Ⲇ, 306.1306915283203 * Ⲇ, Ⲇ * 38.000030517578125, Ⲇ * 336.1306915283203);
		ᐃ.bezierCurveTo(Ⲇ * 30.000030517578125, 349.1306915283203 * Ⲇ, Ⲇ * 30.000030517578125, Ⲇ * 349.1306915283203, 22.000030517578125 * Ⲇ, 362.1306915283203 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃᐃᐃ], ᐃⲆ[1], ⵠⲆΔᐃᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 228.00003051757812, Ⲇ * 128.03977966308594);
		ᐃ.bezierCurveTo(315.0000305175781 * Ⲇ, Ⲇ * 131.03977966308594, Ⲇ * 349.0000305175781, Ⲇ * 178.03977966308594, 386.0000305175781 * Ⲇ, Ⲇ * 234.03977966308594);
		ᐃ.bezierCurveTo(Ⲇ * 444.0000305175781, 329.03977966308594 * Ⲇ, Ⲇ * 446.0000305175781, Ⲇ * 354.03977966308594, Ⲇ * 427.0000305175781, 373.03977966308594 * Ⲇ);
		ᐃ.bezierCurveTo(389.0000305175781 * Ⲇ, 389.03977966308594 * Ⲇ, Ⲇ * 399.0000305175781, 329.03977966308594 * Ⲇ, 361.0000305175781 * Ⲇ, Ⲇ * 277.03977966308594);
		ᐃ.bezierCurveTo(Ⲇ * 306.0000305175781, Ⲇ * 191.03977966308594, 266.0000305175781 * Ⲇ, Ⲇ * 183.03977966308594, Ⲇ * 220.00003051757812, Ⲇ * 181.03977966308594);
		ᐃ.bezierCurveTo(Ⲇ * 138.00003051757812, Ⲇ * 184.03977966308594, Ⲇ * 123.00003051757812, Ⲇ * 212.03977966308594, Ⲇ * 89.00003051757812, 271.03977966308594 * Ⲇ);
		ᐃ.bezierCurveTo(52.000030517578125 * Ⲇ, 349.03977966308594 * Ⲇ, Ⲇ * 68.00003051757812, Ⲇ * 364.03977966308594, 33.000030517578125 * Ⲇ, Ⲇ * 369.03977966308594);
		ᐃ.bezierCurveTo(Ⲇ * 6.000030517578125, 366.03977966308594 * Ⲇ, Ⲇ * 5.000030517578125, Ⲇ * 341.03977966308594, 26.000030517578125 * Ⲇ, Ⲇ * 288.03977966308594);
		ᐃ.bezierCurveTo(60.000030517578125 * Ⲇ, Ⲇ * 207.03977966308594, Ⲇ * 100.00003051757812, 180.03977966308594 * Ⲇ, Ⲇ * 113.00003051757812, Ⲇ * 170.03977966308594);
		ᐃ.bezierCurveTo(159.00003051757812 * Ⲇ, 132.03977966308594 * Ⲇ, 196.00003051757812 * Ⲇ, Ⲇ * 133.03977966308594, 226.00003051757812 * Ⲇ, 129.03977966308594 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ], ᐃⲆ[ᐃⲆΔ], Ⲇ * ᐃⵠΔᐃⵠⲆⵠ);
		return ⲆⲆ
	}

	function ᐃⲆᐃⲆᐃⵠᐃ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 253 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 192;
		ᐃ.globalAlpha = .5;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 42, 99 * Ⲇ);
		ᐃ.globalAlpha = .5;
		ᐃᐃᐃ(ᐃ, Ⲇ * -7, Ⲇ * -20, Ⲇ * 14, Ⲇ * 39, 20 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⲆΔⲆⵠ;
		ᐃ.save();
		ᐃ.translate(37 * Ⲇ, 94 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -7 * Ⲇ, -ΔⲆᐃⲆⲆ * Ⲇ, 14 * Ⲇ, Ⲇ * 37, Ⲇ * 20);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃⲆ]);
		ᐃ.globalAlpha = .5;
		ᐃ.save();
		ᐃ.translate(136 * Ⲇ, 99 * Ⲇ);
		ᐃ.globalAlpha = .5;
		ᐃᐃᐃ(ᐃ, -84 * Ⲇ, Ⲇ * -67, Ⲇ * 168, 134 * Ⲇ, Ⲇ * 20);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ], ᐃⲆ[ⵠⲆᐃ], Ⲇ * 13);
		ᐃ.globalAlpha = 1;
		ᐃ.save();
		ᐃ.translate(131 * Ⲇ, 94 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -84, -67 * Ⲇ, 168 * Ⲇ, 134 * Ⲇ, Ⲇ * ⵠⲆⵠΔⵠᐃᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔⲆ], ᐃⲆ[ⵠⲆⵠΔ], 13 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(131 * Ⲇ, 94 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -76, Ⲇ * -61, Ⲇ * 152, 122 * Ⲇ, ⲆⲆᐃⵠⲆ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ], ᐃⲆ[ᐃΔⵠΔ], ᐃΔⲆΔⲆᐃⵠ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(168.5 * Ⲇ, 93.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -30.5 * Ⲇ, -58.5 * Ⲇ, 61 * Ⲇ, Ⲇ * 117, 20 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⲆⵠ], ᐃⲆ[4], Δᐃᐃⵠᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(93.5 * Ⲇ, Ⲇ * 95.5);
		ᐃᐃᐃ(ᐃ, -32 * Ⲇ, Ⲇ * -59.5, Ⲇ * 59, 119 * Ⲇ, Ⲇ * ᐃᐃΔΔⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠⵠ], ᐃⲆ[4], Ⲇ * 6);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 130.5, 94 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -36, Ⲇ * -67, Ⲇ * 73, 134 * Ⲇ, 20 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[2], 8 * Ⲇ);
		ᐃ.globalAlpha = .5;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 133, Ⲇ * 97);
		ᐃᐃᐃ(ᐃ, -83 * Ⲇ, -12 * Ⲇ, Ⲇ * 160, 24 * Ⲇ, Ⲇ * 0);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠ]);
		ᐃ.globalAlpha = ΔⲆΔᐃ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 133, 92 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -83, Ⲇ * -ΔΔΔⲆΔ, 160 * Ⲇ, Ⲇ * 24, ⲆΔⵠΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠᐃ]);
		ᐃ.globalAlpha = .5;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 228, Ⲇ * 99.5);
		ᐃ.globalAlpha = .5;
		ᐃᐃᐃ(ᐃ, -5 * Ⲇ, -18.5 * Ⲇ, 10 * Ⲇ, 37 * Ⲇ, 20 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
		ᐃ.globalAlpha = 1;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 223, Ⲇ * 94.5);
		ᐃᐃᐃ(ᐃ, Ⲇ * -5, Ⲇ * -18.5, Ⲇ * 10, 37 * Ⲇ, ⵠΔⲆΔⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃΔᐃ]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 133.5, 175.5 * Ⲇ);
		ᐃ.globalAlpha = .5;
		ᐃᐃᐃ(ᐃ, Ⲇ * -22.5, Ⲇ * -6.5, Ⲇ * 45, ⵠⵠᐃᐃΔ * Ⲇ, ⲆⲆᐃᐃᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ]);
		ᐃ.globalAlpha = 1;
		ᐃ.save();
		ᐃ.translate(128.5 * Ⲇ, Ⲇ * 170.5);
		ᐃᐃᐃ(ᐃ, Ⲇ * -22.5, -6.5 * Ⲇ, Ⲇ * 45, ᐃΔΔΔⵠ * Ⲇ, Ⲇ * 20);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		return ⲆⲆ
	}

	function ⲆΔᐃⵠΔᐃⲆ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 450;
		ⲆⲆ.height = 260 * Ⲇ;
		ᐃ.translate(ⲆΔⵠᐃⲆ * Ⲇ, Ⲇ * 10);
		if (ⲆⲆⲆᐃ == Δᐃ) {
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 9, Ⲇ * 5);
			ᐃ.bezierCurveTo(Ⲇ * 381, 2 * Ⲇ, Ⲇ * 197, Ⲇ * 4.5, 385 * Ⲇ, Ⲇ * ΔᐃΔΔ);
			ᐃ.bezierCurveTo(Ⲇ * 397, 4 * Ⲇ, Ⲇ * 401, 4 * Ⲇ, Ⲇ * 399, Ⲇ * 23);
			ᐃ.bezierCurveTo(367 * Ⲇ, Ⲇ * 27, Ⲇ * 367, Ⲇ * 27, 335 * Ⲇ, Ⲇ * 31);
			ᐃ.bezierCurveTo(Ⲇ * 366.5, Ⲇ * 33.5, Ⲇ * 366.5, 33.5 * Ⲇ, 398 * Ⲇ, 36 * Ⲇ);
			ᐃ.bezierCurveTo(398 * Ⲇ, 41.5 * Ⲇ, Ⲇ * 398, Ⲇ * 41.5, Ⲇ * 398, 47 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 398, Ⲇ * 56, 399 * Ⲇ, 56 * Ⲇ, Ⲇ * 386, 56 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 200.5, 56.5 * Ⲇ, Ⲇ * 200.5, Ⲇ * 56.5, Ⲇ * 15, Ⲇ * 57);
			ᐃ.bezierCurveTo(Ⲇ * ᐃⲆᐃⵠ, 55 * Ⲇ, Ⲇ * ⵠΔΔⵠ, Ⲇ * 52, Ⲇ * ⲆⵠⲆᐃ, 43 * Ⲇ);
			ᐃ.bezierCurveTo(4 * Ⲇ, 30.5 * Ⲇ, 4 * Ⲇ, Ⲇ * 30.5, Ⲇ * 4, Ⲇ * ⲆᐃΔᐃⲆ);
			ᐃ.bezierCurveTo(Ⲇ * 16, Ⲇ * 18.5, Ⲇ * ⲆⲆⵠᐃΔ, 18.5 * Ⲇ, Ⲇ * 28, Ⲇ * ⵠᐃⲆⵠᐃᐃⲆ);
			ᐃ.bezierCurveTo(18.5 * Ⲇ, Ⲇ * ᐃΔΔⵠⲆⵠᐃ, Ⲇ * 18.5, Ⲇ * ᐃᐃⵠⲆⲆⲆⲆ, Ⲇ * Ⲇⵠᐃⵠᐃ, ⲆΔΔΔ * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⵠΔⲆⲆ], Ⲇ * 32);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(ΔΔⵠΔ * Ⲇ, Ⲇ * 70);
			ᐃ.bezierCurveTo(Ⲇ * ⵠΔΔΔ, Ⲇ * 58, Ⲇ * 5, 55 * Ⲇ, ᐃⲆΔΔⲆ * Ⲇ, 57 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 203, 57 * Ⲇ, 203 * Ⲇ, 57 * Ⲇ, Ⲇ * 389, 57 * Ⲇ);
			ᐃ.bezierCurveTo(400 * Ⲇ, 57 * Ⲇ, Ⲇ * 400, Ⲇ * 59, Ⲇ * 400, 69 * Ⲇ);
			ᐃ.bezierCurveTo(400.5 * Ⲇ, Ⲇ * 83.5, 400.5 * Ⲇ, Ⲇ * 83.5, Ⲇ * 401, Ⲇ * 98);
			ᐃ.bezierCurveTo(402 * Ⲇ, 108 * Ⲇ, 401 * Ⲇ, 108 * Ⲇ, Ⲇ * 388, Ⲇ * 108);
			ᐃ.bezierCurveTo(201.5 * Ⲇ, 108 * Ⲇ, Ⲇ * 201.5, 108 * Ⲇ, Ⲇ * ᐃΔΔᐃᐃ, 108 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 1, Ⲇ * 106, 5 * Ⲇ, Ⲇ * 106, Ⲇ * 5, Ⲇ * 87);
			ᐃ.bezierCurveTo(33 * Ⲇ, Ⲇ * 84.5, Ⲇ * 33, Ⲇ * 84.5, Ⲇ * 61, Ⲇ * 82);
			ᐃ.bezierCurveTo(33.5 * Ⲇ, Ⲇ * 76.5, Ⲇ * 33.5, Ⲇ * 76.5, Ⲇ * ⵠΔⲆⵠⲆ, 71 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃΔᐃⲆ], 32 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(ΔⲆⲆΔⵠᐃⵠ * Ⲇ, 158 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 2, 159 * Ⲇ, Ⲇ * 4, Ⲇ * 156, Ⲇ * 5, Ⲇ * 118);
			ᐃ.bezierCurveTo(Ⲇ * ⲆⲆᐃΔᐃ, Ⲇ * 110, ΔΔⲆⵠΔ * Ⲇ, 107 * Ⲇ, 26 * Ⲇ, 109 * Ⲇ);
			ᐃ.bezierCurveTo(206.5 * Ⲇ, Ⲇ * 109, 206.5 * Ⲇ, Ⲇ * 109, 387 * Ⲇ, 109 * Ⲇ);
			ᐃ.bezierCurveTo(400 * Ⲇ, Ⲇ * 108, Ⲇ * 400, Ⲇ * 108, Ⲇ * 398, 127 * Ⲇ);
			ᐃ.bezierCurveTo(384.5 * Ⲇ, 130 * Ⲇ, 384.5 * Ⲇ, Ⲇ * 130, 371 * Ⲇ, Ⲇ * 133);
			ᐃ.bezierCurveTo(Ⲇ * 385.5, Ⲇ * 138, 385.5 * Ⲇ, 138 * Ⲇ, 400 * Ⲇ, 143 * Ⲇ);
			ᐃ.bezierCurveTo(402 * Ⲇ, 156 * Ⲇ, 402 * Ⲇ, Ⲇ * 162, Ⲇ * 385, Ⲇ * 160);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[3], Ⲇ * 32);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * ⲆΔⵠᐃΔ, Ⲇ * 183);
			ᐃ.bezierCurveTo(Ⲇ * ⵠⵠᐃ, Ⲇ * 163, 4 * Ⲇ, 158 * Ⲇ, 28 * Ⲇ, 161 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 207.5, Ⲇ * 161, 207.5 * Ⲇ, Ⲇ * 161, Ⲇ * 387, Ⲇ * 161);
			ᐃ.bezierCurveTo(Ⲇ * 401, Ⲇ * 159, 400 * Ⲇ, 164 * Ⲇ, 400 * Ⲇ, 177 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 364.5, Ⲇ * 184, 364.5 * Ⲇ, Ⲇ * 184, Ⲇ * 329, 191 * Ⲇ);
			ᐃ.bezierCurveTo(364.5 * Ⲇ, Ⲇ * 192.5, 364.5 * Ⲇ, 192.5 * Ⲇ, Ⲇ * 400, 194 * Ⲇ);
			ᐃ.bezierCurveTo(403 * Ⲇ, 209 * Ⲇ, Ⲇ * 401, 214 * Ⲇ, Ⲇ * 385, Ⲇ * 213);
			ᐃ.bezierCurveTo(Ⲇ * 201.5, Ⲇ * 213, 201.5 * Ⲇ, Ⲇ * 213, 18 * Ⲇ, Ⲇ * 213);
			ᐃ.bezierCurveTo(Ⲇ * 3, Ⲇ * 213, Ⲇ * 2, 213 * Ⲇ, Ⲇ * ᐃᐃⲆⵠ, 198 * Ⲇ);
			ᐃ.bezierCurveTo(12.5 * Ⲇ, Ⲇ * 193, 12.5 * Ⲇ, Ⲇ * 193, 21 * Ⲇ, Ⲇ * 188);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[3], Ⲇ * 32);
			ᐃΔⵠ(ᐃ, 41 * Ⲇ, 30 * Ⲇ, Ⲇ * 14.7648230602334);
			ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃΔΔΔ], 32 * Ⲇ);
			ᐃΔⵠ(ᐃ, Ⲇ * 369, 30 * Ⲇ, Ⲇ * 15.556349186104045);
			ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔⵠⲆⲆ], 32 * Ⲇ);
			ᐃΔⵠ(ᐃ, 364 * Ⲇ, Ⲇ * 190, Ⲇ * 15.620499351813308);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔⵠ], ᐃⲆ[ⵠΔⲆΔΔ], 32 * Ⲇ);
			ᐃΔⵠ(ᐃ, Ⲇ * 41, Ⲇ * 186, 15.556349186104045 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[3], 32 * Ⲇ)
		} else Δᐃ == 2 && (ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(9 * Ⲇ, Ⲇ * 5), ᐃ.bezierCurveTo(Ⲇ * 381, 2 * Ⲇ, Ⲇ * 197, 4.5 * Ⲇ, Ⲇ * 385, ⲆⵠⲆⲆⲆ * Ⲇ), ᐃ.bezierCurveTo(397 * Ⲇ, Ⲇ * ᐃΔⲆΔⲆ, 401 * Ⲇ, Ⲇ * ⵠΔΔⵠ, Ⲇ * 399, 23 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 367, 27 * Ⲇ, Ⲇ * 367, Ⲇ * 27, 335 * Ⲇ, Ⲇ * 31), ᐃ.bezierCurveTo(366.5 * Ⲇ, Ⲇ * 33.5, 366.5 * Ⲇ, Ⲇ * 33.5, Ⲇ * 398, 36 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 398, Ⲇ * 41.5, 398 * Ⲇ, 41.5 * Ⲇ, 398 * Ⲇ, Ⲇ * 47), ᐃ.bezierCurveTo(Ⲇ * 398, 56 * Ⲇ, 399 * Ⲇ, 56 * Ⲇ, 386 * Ⲇ, Ⲇ * 56), ᐃ.bezierCurveTo(Ⲇ * 200.5, 56.5 * Ⲇ, Ⲇ * 200.5, 56.5 * Ⲇ, ⵠⵠΔⲆⵠ * Ⲇ, Ⲇ * 57), ᐃ.bezierCurveTo(Ⲇ * ⵠΔᐃΔᐃ, Ⲇ * 55, Ⲇ * ΔᐃΔⲆΔ, Ⲇ * 52, Ⲇ * ΔΔᐃᐃⲆ, Ⲇ * 43), ᐃ.bezierCurveTo(ⲆⵠⲆⲆⲆ * Ⲇ, Ⲇ * 30.5, Ⲇ * ΔᐃΔΔ, Ⲇ * 30.5, Ⲇ * 4, Ⲇ * ⵠⵠΔⲆᐃⲆΔ), ᐃ.bezierCurveTo(ΔΔⵠᐃⲆ * Ⲇ, Ⲇ * 18.5, Ⲇ * ᐃᐃⵠᐃⵠᐃᐃ, 18.5 * Ⲇ, 28 * Ⲇ, Ⲇ * ΔⵠΔΔΔ), ᐃ.bezierCurveTo(Ⲇ * 18.5, Ⲇ * 12, Ⲇ * 18.5, 12 * Ⲇ, Ⲇ * ⲆᐃⲆᐃⲆ, Ⲇ * ⲆΔΔΔ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[3], Ⲇ * 32), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(5 * Ⲇ, 70 * Ⲇ), ᐃ.bezierCurveTo(ΔⲆΔᐃⵠ * Ⲇ, Ⲇ * 58, Ⲇ * 5, 55 * Ⲇ, 17 * Ⲇ, Ⲇ * 57), ᐃ.bezierCurveTo(Ⲇ * 203, Ⲇ * 57, Ⲇ * 203, 57 * Ⲇ, 389 * Ⲇ, Ⲇ * 57), ᐃ.bezierCurveTo(Ⲇ * 400, Ⲇ * 57, Ⲇ * 400, Ⲇ * 59, Ⲇ * 400, Ⲇ * 69), ᐃ.bezierCurveTo(Ⲇ * 400.5, Ⲇ * 83.5, Ⲇ * 400.5, 83.5 * Ⲇ, Ⲇ * 401, 98 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 402, 108 * Ⲇ, 401 * Ⲇ, Ⲇ * 108, 388 * Ⲇ, Ⲇ * 108), ᐃ.bezierCurveTo(201.5 * Ⲇ, 108 * Ⲇ, 201.5 * Ⲇ, 108 * Ⲇ, Ⲇ * ⵠΔⵠᐃⲆⵠⵠ, Ⲇ * 108), ᐃ.bezierCurveTo(Ⲇ * ᐃⲆⲆ, 106 * Ⲇ, Ⲇ * 5, 106 * Ⲇ, 5 * Ⲇ, Ⲇ * 87), ᐃ.bezierCurveTo(33 * Ⲇ, Ⲇ * 84.5, 33 * Ⲇ, Ⲇ * 84.5, Ⲇ * 61, Ⲇ * 82), ᐃ.bezierCurveTo(Ⲇ * 33.5, Ⲇ * 76.5, Ⲇ * 33.5, Ⲇ * 76.5, Ⲇ * 6, Ⲇ * 71), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔⵠ], ᐃⲆ[ΔⵠᐃⲆ], 32 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(19 * Ⲇ, Ⲇ * 158), ᐃ.bezierCurveTo(ⲆⲆᐃⲆ * Ⲇ, Ⲇ * 159, Ⲇ * 4, 156 * Ⲇ, 5 * Ⲇ, Ⲇ * 118), ᐃ.bezierCurveTo(Ⲇ * ⵠΔΔⵠ, 110 * Ⲇ, ΔΔᐃⵠⵠ * Ⲇ, 107 * Ⲇ, 26 * Ⲇ, Ⲇ * 109), ᐃ.bezierCurveTo(206.5 * Ⲇ, Ⲇ * 109, 206.5 * Ⲇ, Ⲇ * 109, Ⲇ * 387, 109 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 400, 108 * Ⲇ, 400 * Ⲇ, 108 * Ⲇ, 398 * Ⲇ, 127 * Ⲇ), ᐃ.bezierCurveTo(384.5 * Ⲇ, Ⲇ * 130, Ⲇ * 384.5, Ⲇ * 130, 371 * Ⲇ, Ⲇ * 133), ᐃ.bezierCurveTo(385.5 * Ⲇ, Ⲇ * 138, 385.5 * Ⲇ, 138 * Ⲇ, Ⲇ * 400, Ⲇ * 143), ᐃ.bezierCurveTo(Ⲇ * 402, 156 * Ⲇ, Ⲇ * 402, 162 * Ⲇ, Ⲇ * 385, Ⲇ * 160), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[3], 32 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(ⲆⵠⵠⲆ * Ⲇ, Ⲇ * 183), ᐃ.bezierCurveTo(Ⲇ * ΔⵠⲆ, Ⲇ * 163, Ⲇ * ⲆΔⲆᐃΔ, Ⲇ * 158, Ⲇ * 28, 161 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 207.5, 161 * Ⲇ, Ⲇ * 207.5, 161 * Ⲇ, 387 * Ⲇ, Ⲇ * 161), ᐃ.bezierCurveTo(401 * Ⲇ, Ⲇ * 159, 400 * Ⲇ, 164 * Ⲇ, 400 * Ⲇ, Ⲇ * 177), ᐃ.bezierCurveTo(364.5 * Ⲇ, 184 * Ⲇ, 364.5 * Ⲇ, 184 * Ⲇ, 329 * Ⲇ, 191 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 364.5, Ⲇ * 192.5, Ⲇ * 364.5, 192.5 * Ⲇ, 400 * Ⲇ, 194 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 403, 209 * Ⲇ, Ⲇ * 401, 214 * Ⲇ, Ⲇ * 385, Ⲇ * 213), ᐃ.bezierCurveTo(201.5 * Ⲇ, Ⲇ * 213, 201.5 * Ⲇ, Ⲇ * 213, ᐃⵠᐃⵠⵠⵠⵠ * Ⲇ, 213 * Ⲇ), ᐃ.bezierCurveTo(3 * Ⲇ, Ⲇ * 213, 2 * Ⲇ, Ⲇ * 213, Ⲇ * ᐃᐃᐃΔⵠ, 198 * Ⲇ), ᐃ.bezierCurveTo(12.5 * Ⲇ, 193 * Ⲇ, Ⲇ * 12.5, 193 * Ⲇ, Ⲇ * 21, Ⲇ * 188), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔⵠᐃⲆ], 32 * Ⲇ), ᐃΔⵠ(ᐃ, Ⲇ * 41, Ⲇ * 30, Ⲇ * 14.7648230602334), ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠᐃⲆ], ᐃⲆ[ΔΔⲆᐃ], Ⲇ * 32), ᐃΔⵠ(ᐃ, 369 * Ⲇ, 30 * Ⲇ, Ⲇ * 15.556349186104045), ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[3], 32 * Ⲇ), ᐃΔⵠ(ᐃ, Ⲇ * 364, Ⲇ * 190, 15.620499351813308 * Ⲇ), ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆΔ], ᐃⲆ[ⵠᐃⲆᐃ], 32 * Ⲇ), ᐃΔⵠ(ᐃ, 41 * Ⲇ, Ⲇ * 186, Ⲇ * 15.556349186104045), ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔΔ], ᐃⲆ[3], 32 * Ⲇ));
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ᐃᐃⵠᐃΔ * Ⲇ, Ⲇ * ⲆΔⵠⵠᐃ);
		ᐃ.bezierCurveTo(381 * Ⲇ, Ⲇ * ᐃⲆᐃⵠ, 197 * Ⲇ, 4.5 * Ⲇ, 385 * Ⲇ, 4 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 397, Ⲇ * ΔᐃΔⲆΔ, 401 * Ⲇ, ⲆΔⵠᐃΔ * Ⲇ, 399 * Ⲇ, 23 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 367, 27 * Ⲇ, 367 * Ⲇ, 27 * Ⲇ, Ⲇ * 335, 31 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 366.5, Ⲇ * 33.5, Ⲇ * 366.5, Ⲇ * 33.5, Ⲇ * 398, Ⲇ * 36);
		ᐃ.bezierCurveTo(Ⲇ * 398, Ⲇ * 41.5, 398 * Ⲇ, Ⲇ * 41.5, Ⲇ * 398, 47 * Ⲇ);
		ᐃ.bezierCurveTo(398 * Ⲇ, 56 * Ⲇ, 399 * Ⲇ, 56 * Ⲇ, Ⲇ * 386, Ⲇ * 56);
		ᐃ.bezierCurveTo(Ⲇ * 200.5, 56.5 * Ⲇ, 200.5 * Ⲇ, 56.5 * Ⲇ, 15 * Ⲇ, 57 * Ⲇ);
		ᐃ.bezierCurveTo(ΔⲆⲆⵠ * Ⲇ, Ⲇ * 55, Ⲇ * 4, 52 * Ⲇ, ΔᐃΔΔ * Ⲇ, Ⲇ * 43);
		ᐃ.bezierCurveTo(4 * Ⲇ, 30.5 * Ⲇ, Ⲇ * ⲆⵠⲆⲆⲆ, 30.5 * Ⲇ, ΔᐃΔⲆΔ * Ⲇ, 18 * Ⲇ);
		ᐃ.bezierCurveTo(ⵠⲆᐃᐃⵠⵠᐃ * Ⲇ, 18.5 * Ⲇ, Ⲇ * 16, Ⲇ * 18.5, 28 * Ⲇ, ΔⲆⵠⵠⵠ * Ⲇ);
		ᐃ.bezierCurveTo(18.5 * Ⲇ, 12 * Ⲇ, Ⲇ * 18.5, Ⲇ * ⵠᐃΔⵠᐃ, Ⲇ * 9, 5 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[0], ᐃᐃᐃΔᐃΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 5, 70 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 5, Ⲇ * 58, Ⲇ * ⲆⲆⲆᐃᐃ, Ⲇ * 55, Ⲇ * ΔⲆⲆⲆⵠ, Ⲇ * 57);
		ᐃ.bezierCurveTo(Ⲇ * 203, Ⲇ * 57, 203 * Ⲇ, Ⲇ * 57, 389 * Ⲇ, Ⲇ * 57);
		ᐃ.bezierCurveTo(400 * Ⲇ, Ⲇ * 57, 400 * Ⲇ, 59 * Ⲇ, 400 * Ⲇ, 69 * Ⲇ);
		ᐃ.bezierCurveTo(400.5 * Ⲇ, 83.5 * Ⲇ, Ⲇ * 400.5, Ⲇ * 83.5, Ⲇ * 401, 98 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 402, 108 * Ⲇ, 401 * Ⲇ, Ⲇ * 108, Ⲇ * 388, Ⲇ * 108);
		ᐃ.bezierCurveTo(Ⲇ * 201.5, 108 * Ⲇ, 201.5 * Ⲇ, Ⲇ * 108, ΔᐃⲆⲆⲆ * Ⲇ, 108 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 1, Ⲇ * 106, ΔⵠⲆᐃⵠ * Ⲇ, 106 * Ⲇ, ⵠⵠⲆⵠ * Ⲇ, 87 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 33, Ⲇ * 84.5, Ⲇ * 33, 84.5 * Ⲇ, Ⲇ * 61, 82 * Ⲇ);
		ᐃ.bezierCurveTo(33.5 * Ⲇ, Ⲇ * 76.5, 33.5 * Ⲇ, Ⲇ * 76.5, Ⲇ * ⵠⵠⵠᐃⵠ, 71 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃΔᐃ], ᐃⲆ[0], ⲆⵠⵠⲆⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ΔⵠΔΔΔ, 158 * Ⲇ);
		ᐃ.bezierCurveTo(2 * Ⲇ, Ⲇ * 159, Ⲇ * ΔᐃΔⲆΔ, 156 * Ⲇ, 5 * Ⲇ, 118 * Ⲇ);
		ᐃ.bezierCurveTo(ⲆⵠⲆᐃ * Ⲇ, Ⲇ * 110, 6 * Ⲇ, Ⲇ * 107, Ⲇ * 26, 109 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 206.5, Ⲇ * 109, Ⲇ * 206.5, 109 * Ⲇ, 387 * Ⲇ, Ⲇ * 109);
		ᐃ.bezierCurveTo(400 * Ⲇ, Ⲇ * 108, 400 * Ⲇ, Ⲇ * 108, 398 * Ⲇ, 127 * Ⲇ);
		ᐃ.bezierCurveTo(384.5 * Ⲇ, Ⲇ * 130, 384.5 * Ⲇ, Ⲇ * 130, Ⲇ * 371, Ⲇ * 133);
		ᐃ.bezierCurveTo(Ⲇ * 385.5, 138 * Ⲇ, Ⲇ * 385.5, 138 * Ⲇ, 400 * Ⲇ, 143 * Ⲇ);
		ᐃ.bezierCurveTo(402 * Ⲇ, Ⲇ * 156, 402 * Ⲇ, 162 * Ⲇ, Ⲇ * 385, Ⲇ * 160);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆⲆⵠⲆ], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 4, Ⲇ * 183);
		ᐃ.bezierCurveTo(Ⲇ * 1, Ⲇ * 163, 4 * Ⲇ, 158 * Ⲇ, 28 * Ⲇ, 161 * Ⲇ);
		ᐃ.bezierCurveTo(207.5 * Ⲇ, 161 * Ⲇ, Ⲇ * 207.5, 161 * Ⲇ, Ⲇ * 387, 161 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 401, Ⲇ * 159, Ⲇ * 400, 164 * Ⲇ, 400 * Ⲇ, 177 * Ⲇ);
		ᐃ.bezierCurveTo(364.5 * Ⲇ, Ⲇ * 184, 364.5 * Ⲇ, Ⲇ * 184, 329 * Ⲇ, 191 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 364.5, Ⲇ * 192.5, 364.5 * Ⲇ, Ⲇ * 192.5, Ⲇ * 400, Ⲇ * 194);
		ᐃ.bezierCurveTo(Ⲇ * 403, 209 * Ⲇ, Ⲇ * 401, Ⲇ * 214, Ⲇ * 385, 213 * Ⲇ);
		ᐃ.bezierCurveTo(201.5 * Ⲇ, Ⲇ * 213, 201.5 * Ⲇ, Ⲇ * 213, ⲆΔⵠΔᐃ * Ⲇ, 213 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 3, 213 * Ⲇ, ᐃᐃᐃᐃ * Ⲇ, Ⲇ * 213, ΔⵠⲆⵠⲆ * Ⲇ, Ⲇ * 198);
		ᐃ.bezierCurveTo(Ⲇ * 12.5, Ⲇ * 193, 12.5 * Ⲇ, Ⲇ * 193, Ⲇ * 21, 188 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔᐃᐃ], ᐃⲆ[Ⲇᐃⵠⵠ], ⲆⵠΔⵠᐃ * Ⲇ);
		ᐃΔⵠ(ᐃ, 41 * Ⲇ, Ⲇ * 30, 14.7648230602334 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆⲆⵠ], ᐃⲆ[0], Ⲇ * ⲆⵠⵠⲆⲆ);
		ᐃΔⵠ(ᐃ, Ⲇ * 369, 30 * Ⲇ, Ⲇ * 15.556349186104045);
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ⵠᐃΔⲆ], 12 * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 364, 190 * Ⲇ, Ⲇ * 15.620499351813308);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃᐃΔ], ᐃⲆ[0], ⲆⲆⲆΔΔΔⵠ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 41, Ⲇ * 186, Ⲇ * 15.556349186104045);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠᐃ], ᐃⲆ[ⲆΔⵠΔ], Ⲇ * 12);
		return ⲆⲆ
	}

	function ΔᐃⲆⵠΔⲆⲆΔᐃ(Ⲇ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		var Δⵠᐃ = Ⲇ * 200;
		var ⲆΔΔ = 270 * Ⲇ;
		var ⵠᐃⵠ = ΔⲆΔⲆⲆ * Ⲇ;
		ⲆⲆ.width = Δⵠᐃ;
		ⲆⲆ.height = ⲆΔΔ + 20;
		ᐃ.beginPath();
		ᐃᐃᐃ(ᐃ, ⵠⵠΔᐃ, 0, Δⵠᐃ, ⲆΔΔ - ⵠᐃⵠ, ⵠᐃⵠ);
		ᐃ.globalAlpha = .5;
		ᐃⵠ(ᐃ, "#1D6055");
		ᐃ.globalAlpha = 1;
		var text = ⲆΔⵠⵠⵠ(Ⲇ, "Leaderboard", 25, "red");
		ᐃ.drawImage(text, (Δⵠᐃ - text.width) / ⲆⲆⵠᐃ, 5 * Ⲇ);
		return ⲆⲆ
	}

	function ᐃⵠⲆᐃΔⲆᐃⵠⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 316 * Ⲇ;
		ⲆⲆ.height = 365 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 156.07142639160156, Ⲇ * 51.81248474121094);
		ᐃ.rotate(ⵠᐃΔ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -21.5, Ⲇ * -34, 43 * Ⲇ, 68 * Ⲇ, Ⲇ * 8);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ], ᐃⲆ[ⵠΔⵠⲆ], 15 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 126.57142639160156, 67.38392639160156 * Ⲇ);
		ᐃ.bezierCurveTo(126.57142639160156 * Ⲇ, Ⲇ * 57.38392639160156, 132.57142639160156 * Ⲇ, 54.38392639160156 * Ⲇ, 140.57142639160156 * Ⲇ, Ⲇ * 54.38392639160156);
		ᐃ.bezierCurveTo(Ⲇ * 177.57142639160156, Ⲇ * 55.38392639160156, 158.07142639160156 * Ⲇ, 54.38392639160156 * Ⲇ, Ⲇ * 175.57142639160156, Ⲇ * 54.38392639160156);
		ᐃ.bezierCurveTo(185.57142639160156 * Ⲇ, 56.38392639160156 * Ⲇ, Ⲇ * 185.57142639160156, Ⲇ * 57.38392639160156, 184.57142639160156 * Ⲇ, Ⲇ * 66.38392639160156);
		ᐃ.bezierCurveTo(184.57142639160156 * Ⲇ, 78.38392639160156 * Ⲇ, 184.57142639160156 * Ⲇ, 89.38392639160156 * Ⲇ, Ⲇ * 184.57142639160156, 90.38392639160156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 177.57142639160156, Ⲇ * 107.38392639160156, Ⲇ * 180.57142639160156, 112.38392639160156 * Ⲇ, Ⲇ * 189.57142639160156, Ⲇ * 116.38392639160156);
		ᐃ.bezierCurveTo(Ⲇ * 212.57142639160156, 127.38392639160156 * Ⲇ, Ⲇ * 212.57142639160156, Ⲇ * 132.38392639160156, Ⲇ * 211.57142639160156, 150.38392639160156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 211.57142639160156, 227.59821128845215 * Ⲇ, Ⲇ * 211.57142639160156, Ⲇ * 227.59821128845215, 211.57142639160156 * Ⲇ, Ⲇ * 304.81249618530273);
		ᐃ.bezierCurveTo(212.57142639160156 * Ⲇ, 328.81249618530273 * Ⲇ, 209.57142639160156 * Ⲇ, 330.81249618530273 * Ⲇ, 188.57142639160156 * Ⲇ, 333.81249618530273 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 155.07142639160156, Ⲇ * 333.31249618530273, Ⲇ * 155.07142639160156, Ⲇ * 333.31249618530273, Ⲇ * 121.57142639160156, 332.81249618530273 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 104.57142639160156, 327.81249618530273 * Ⲇ, Ⲇ * 105.57142639160156, Ⲇ * 328.81249618530273, Ⲇ * 104.57142639160156, 312.81249618530273 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 104.57142639160156, 228.16963958740234 * Ⲇ, 104.57142639160156 * Ⲇ, Ⲇ * 228.16963958740234, Ⲇ * 104.57142639160156, Ⲇ * 143.52678298950195);
		ᐃ.bezierCurveTo(Ⲇ * 106.57142639160156, Ⲇ * 124.52678298950195, Ⲇ * 110.57142639160156, Ⲇ * 123.52678298950195, 123.57142639160156 * Ⲇ, 116.52678298950195 * Ⲇ);
		ᐃ.bezierCurveTo(136.57142639160156 * Ⲇ, Ⲇ * 110.52678298950195, Ⲇ * 130.57142639160156, Ⲇ * 106.52678298950195, Ⲇ * 126.57142639160156, 98.52678298950195 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ᐃΔΔ], Ⲇ * ΔⲆΔⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(125.57142639160156 * Ⲇ, 156.66963958740234 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 125.57142639160156, 182.66963958740234 * Ⲇ, Ⲇ * 125.57142639160156, Ⲇ * 182.66963958740234, Ⲇ * 125.57142639160156, Ⲇ * 208.66963958740234);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠⲆ], ᐃⲆ[ⵠⲆΔⵠ], Ⲇ * 15);
		return ⲆⲆ
	}

	function ᐃⲆⵠⲆᐃᐃΔ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 95;
		ⲆⲆ.height = Ⲇ * 85;
		if (Δᐃ == 0) {
			ᐃ.translate(Ⲇ * 7, Ⲇ * 15);
			ᐃ.scale(.9, .9);
			ᐃ.save();
			ᐃᐃᐃ(ᐃ, 0 * Ⲇ, ΔΔⵠΔ * Ⲇ, Ⲇ * 90, 60 * Ⲇ, 10);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]);
			ᐃ.globalCompositeOperation = Δ[289];
			ᐃΔⵠ(ᐃ, Ⲇ * 25, 40 * Ⲇ, Ⲇ * ᐃⲆᐃⲆᐃ);
			ᐃ.fill();
			ᐃΔⵠ(ᐃ, Ⲇ * 65, 40 * Ⲇ, 10 * Ⲇ);
			ᐃ.fill();
			ᐃ.restore();
			ᐃ.save();
			ᐃᐃᐃ(ᐃ, 0, ⵠᐃΔⲆ, 90 * Ⲇ, 60 * Ⲇ, 10 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.globalCompositeOperation = Δ[289];
			ᐃΔⵠ(ᐃ, 25 * Ⲇ, 40 * Ⲇ, Ⲇ * ΔΔⲆⲆⵠ);
			ᐃ.fill();
			ᐃΔⵠ(ᐃ, Ⲇ * 65, 40 * Ⲇ, ᐃⲆⵠΔΔ * Ⲇ);
			ᐃ.fill();
			ᐃ.restore()
		} else Δᐃ == 1 && (ᐃ.scale(.8, .8), ᐃ.translate(15 * Ⲇ, Ⲇ * 33), ᐃ.save(), ᐃ.scale(.56, .56), ᐃ.translate(-39 * Ⲇ, Ⲇ * -60), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 32.5, 50.642852783203125 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 83, Ⲇ * 69.64285278320312, 83 * Ⲇ, 69.64285278320312 * Ⲇ, 133.5 * Ⲇ, 88.64285278320312 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 93, Ⲇ * 92.64285278320312, 93 * Ⲇ, 92.64285278320312 * Ⲇ, Ⲇ * 52.5, Ⲇ * 96.64285278320312), ᐃ.bezierCurveTo(Ⲇ * 30.5, Ⲇ * 100.64285278320312, Ⲇ * 36.5, 94.64285278320312 * Ⲇ, Ⲇ * 32.5, 84.64285278320312 * Ⲇ), ᐃ.bezierCurveTo(21.5 * Ⲇ, Ⲇ * 45.642852783203125, Ⲇ * 24.5, 48.642852783203125 * Ⲇ, Ⲇ * 31.5, 50.642852783203125 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(116.5 * Ⲇ, Ⲇ * 85.64285278320312), ᐃ.bezierCurveTo(Ⲇ * 160.5, 67.14285278320312 * Ⲇ, Ⲇ * 160.5, 67.14285278320312 * Ⲇ, Ⲇ * 204.5, Ⲇ * 48.642852783203125), ᐃ.bezierCurveTo(220.5 * Ⲇ, 42.642852783203125 * Ⲇ, Ⲇ * 208.5, Ⲇ * 68.64285278320312, 205.5 * Ⲇ, Ⲇ * 85.64285278320312), ᐃ.bezierCurveTo(202.5 * Ⲇ, 98.64285278320312 * Ⲇ, 199.5 * Ⲇ, Ⲇ * 98.64285278320312, 188.5 * Ⲇ, 100.64285278320312 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 166.5, Ⲇ * 68.64285278320312), ᐃ.bezierCurveTo(Ⲇ * 147.5, 72.64285278320312 * Ⲇ, Ⲇ * 145.5, 73.64285278320312 * Ⲇ, Ⲇ * 142.5, Ⲇ * 62.642852783203125), ᐃ.bezierCurveTo(Ⲇ * 121.5, Ⲇ * 12.642852783203125, Ⲇ * 122.5, Ⲇ * 5.642852783203125, 117.5 * Ⲇ, Ⲇ * 15.642852783203125), ᐃ.bezierCurveTo(105.5 * Ⲇ, Ⲇ * 40.642852783203125, 105.5 * Ⲇ, Ⲇ * 40.642852783203125, Ⲇ * 93.5, Ⲇ * 65.64285278320312), ᐃ.bezierCurveTo(Ⲇ * 89.5, 74.64285278320312 * Ⲇ, Ⲇ * 84.5, 72.64285278320312 * Ⲇ, 73.5 * Ⲇ, Ⲇ * 74.64285278320312), ᐃ.bezierCurveTo(98 * Ⲇ, Ⲇ * 87.64285278320312, 98 * Ⲇ, Ⲇ * 87.64285278320312, Ⲇ * 122.5, Ⲇ * 100.64285278320312), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.restore(), ᐃ.save(), ᐃᐃᐃ(ᐃ, ᐃⲆⵠΔ, Ⲇ * ⵠⲆᐃⵠⵠ, 90 * Ⲇ, 50 * Ⲇ, Ⲇ * 10), ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔ]), ᐃᐃᐃ(ᐃ, 0, Ⲇ * 10, 90 * Ⲇ, 50 * Ⲇ, ⵠΔΔΔⵠ * Ⲇ), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalCompositeOperation = Δ[289], ᐃΔⵠ(ᐃ, Ⲇ * 25, 40 * Ⲇ, Ⲇ * 10), ᐃ.fill(), ᐃΔⵠ(ᐃ, 65 * Ⲇ, Ⲇ * 40, Ⲇ * 10), ᐃ.fill(), ᐃ.restore());
		return ⲆⲆ
	}

	function ᐃᐃⲆΔΔⵠⲆⲆⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 253;
		ⲆⲆ.height = Ⲇ * 192;
		ᐃ.save();
		ᐃ.translate(37 * Ⲇ, Ⲇ * 94);
		ᐃᐃᐃ(ᐃ, -ⲆⲆᐃⲆⵠ * Ⲇ, Ⲇ * -ⵠⵠⵠⲆᐃ, 14 * Ⲇ, 37 * Ⲇ, Ⲇ * ⲆᐃⵠⲆᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⵠ]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 131, 94 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -84, Ⲇ * -67, Ⲇ * 168, 134 * Ⲇ, Ⲇ * ⵠⲆⵠΔⵠᐃᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], Ⲇ * 13);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 223, Ⲇ * 94.5);
		ᐃᐃᐃ(ᐃ, Ⲇ * -5, Ⲇ * -18.5, 10 * Ⲇ, Ⲇ * 37, Ⲇ * ⵠⵠⵠⲆᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠⵠ]);
		ᐃ.save();
		ᐃ.translate(128.5 * Ⲇ, 170.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -22.5, Ⲇ * -6.5, 45 * Ⲇ, Ⲇ * ⵠᐃᐃΔΔ, Ⲇ * ᐃᐃΔΔⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ]);
		return ⲆⲆ
	}

	function ⵠᐃⲆⲆᐃΔⵠⵠΔ(ⲆᐃΔⲆ) {
		var ⵠⲆΔ = [];
		for (var Δᐃ = 0; ⲆᐃΔⲆ.length > Δᐃ; Δᐃ++) ⵠⲆΔ.push(ⲆⵠΔⵠᐃᐃᐃΔⲆ(ⲆᐃΔⲆ[Δᐃ], 2 == Δᐃ ? ⵠⵠᐃⵠⵠ : false));
		return ⵠⲆΔ
	}

	function ⲆⵠΔⲆⵠⲆΔ() {
		var Ⲇ = 1;
		var ᐃᐃΔ = ⵠⲆΔⲆⲆ.time;
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ] && (ᐃ.drawImage(Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ᐃᐃΔ][ᐃⲆⲆ], ᐃᐃᐃΔ + 480, Δᐃᐃᐃ + 190), ᐃ.drawImage(Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ᐃᐃΔ][2], ᐃᐃᐃΔ + 180, Δᐃᐃᐃ - 430), ᐃ.drawImage(Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ᐃᐃΔ][1], ᐃᐃᐃΔ - 855, Δᐃᐃᐃ + ⵠⲆΔᐃΔ), ᐃ.drawImage(Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ᐃᐃΔ][0], ᐃᐃᐃΔ - 550, Δᐃᐃᐃ - 300), ᐃ.drawImage(Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃ][ᐃᐃΔ][0], ᐃᐃᐃΔ - 1020, Δᐃᐃᐃ - 520));
		if (Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ]) {
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ᐃᐃΔ][ⵠΔᐃ], ᐃᐃᐃΔ - 80, Δᐃᐃᐃ - 640);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ᐃᐃΔ][1], ᐃᐃᐃΔ + 80, Δᐃᐃᐃ + 490);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ᐃᐃΔ][Ⲇⵠᐃⵠ], ᐃᐃᐃΔ - 180, Δᐃᐃᐃ - 700);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ᐃᐃΔ][ΔΔⲆⲆ], ᐃᐃᐃΔ + 550, Δᐃᐃᐃ + ᐃⵠᐃⲆⵠ);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ᐃᐃΔ][ⲆⲆⲆᐃ], ᐃᐃᐃΔ + 450, Δᐃᐃᐃ + 300);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ᐃᐃΔ][ⵠⵠⵠΔ], ᐃᐃᐃΔ + 780, Δᐃᐃᐃ + 300);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ᐃᐃΔ][ⲆⲆΔΔ], ᐃᐃᐃΔ + 980, Δᐃᐃᐃ + 200);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ᐃᐃΔ][ⲆᐃᐃΔ], ᐃᐃᐃΔ + 680, Δᐃᐃᐃ + 600);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ᐃᐃΔ][2], ᐃᐃᐃΔ - 380, Δᐃᐃᐃ + ⵠᐃⵠⲆⲆ);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ᐃΔᐃⵠⵠ][ᐃᐃΔ][ⵠΔᐃΔᐃ], ᐃᐃᐃΔ + 280, Δᐃᐃᐃ + 250)
		}
		Ⲇⵠ[ⵠ.ⲆⲆⲆᐃⵠ] && (ᐃ.drawImage(Ⲇⵠ[ⵠ.ⲆⲆⲆᐃⵠ][ᐃᐃΔ][0], ᐃᐃᐃΔ - 590, Δᐃᐃᐃ), ᐃ.drawImage(Ⲇⵠ[ⵠ.ⲆⲆⲆᐃⵠ][ᐃᐃΔ][ⵠΔⵠⲆ], ᐃᐃᐃΔ + 120, Δᐃᐃᐃ - 390), ᐃ.drawImage(Ⲇⵠ[ⵠ.ⲆⲆⲆᐃⵠ][ᐃᐃΔ][Δⵠⵠ], ᐃᐃᐃΔ - 270, Δᐃᐃᐃ + 340));
		if (Ⲇⵠ[ⵠ.ΔⲆⵠᐃ]) {
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ᐃᐃΔ][4], ᐃᐃᐃΔ - 700, Δᐃᐃᐃ - 600);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ᐃᐃΔ][ⵠΔᐃⵠ], ᐃᐃᐃΔ - 970, Δᐃᐃᐃ - 250);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ᐃᐃΔ][5], ᐃᐃᐃΔ - 720, Δᐃᐃᐃ - 200);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ᐃᐃΔ][2], ᐃᐃᐃΔ - 1020, Δᐃᐃᐃ + 340);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ᐃᐃΔ][ⵠⲆⵠ], ᐃᐃᐃΔ - 1120, Δᐃᐃᐃ - ⲆΔⵠΔ);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ᐃᐃΔ][1], ᐃᐃᐃΔ - 650, Δᐃᐃᐃ - 330);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ᐃᐃΔ][4], ᐃᐃᐃΔ - 495, Δᐃᐃᐃ - 90);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ᐃᐃΔ][3], ᐃᐃᐃΔ - 520, Δᐃᐃᐃ + 340);
			ᐃ.drawImage(Ⲇⵠ[ⵠ.ΔⲆⵠᐃ][ᐃᐃΔ][2], ᐃᐃᐃΔ + 830, Δᐃᐃᐃ - 520)
		}
		if (Ⲇⵠ[ⵠ.ⵠⲆᐃᐃᐃ]) {}
		if (ⵠⵠⵠ && ⲆⲆⲆ) {
			var ΔΔ = ⵠⵠⵠ.ᐃⵠⲆ.x;
			var ΔΔⵠ = ⵠⵠⵠ.ᐃⵠⲆ.y;
			ⵠⵠⵠ.ᐃⵠⲆ.x = ᐃᐃᐃΔ;
			ⵠⵠⵠ.ᐃⵠⲆ.y = Δᐃᐃᐃ;
			var ⵠΔᐃᐃⲆΔⲆⲆΔ = ⲆⲆⲆ.time;
			ⲆⲆⲆ.time = ⵠⲆΔⲆⲆ.time;
			var ⵠⲆΔⵠⲆ = ⵠⲆΔⲆⲆ.items;
			ⵠⲆΔⵠⲆ[2].x = 400;
			ⵠⲆΔⵠⲆ[ᐃΔⲆⵠ].y = 100;
			ⵠⲆΔⵠⲆ[2].ⲆᐃᐃⲆ(ⵠ.ⵠⵠᐃⲆⵠ);
			var ⵠⲆⵠⵠ = ⵠⲆΔⵠⲆ[ⵠⲆⲆⲆ];
			ⵠⲆⵠⵠ.x = -500;
			ⵠⲆⵠⵠ.y = 100;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[0].x = ⵠⲆⵠⵠ.x - 20.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[0].y = ⵠⲆⵠⵠ.y - 22.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[1].x = ⵠⲆⵠⵠ.x - 35.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[ⵠⲆⲆⲆ].y = ⵠⲆⵠⵠ.y + 7.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[2].x = ⵠⲆⵠⵠ.x + 7.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[2].y = ⵠⲆⵠⵠ.y - 30;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[3].x = ⵠⲆⵠⵠ.x + 22.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[3].y = ⵠⲆⵠⵠ.y;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[4].x = ⵠⲆⵠⵠ.x - 7.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[ⵠΔΔⵠ].y = ⵠⲆⵠⵠ.y + 14.5;
			for (var Δᐃ = 0; ⵠⲆⵠⵠ.info > Δᐃ; Δᐃ++) {
				ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[Δᐃ].ⲆᐃᐃⲆ(ⵠ.ᐃᐃΔᐃⵠ)
			}
			var ⵠⲆⵠⵠ = ⵠⲆΔⵠⲆ[3];
			ⵠⲆⵠⵠ.x = 210;
			ⵠⲆⵠⵠ.y = -290;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[0].x = ⵠⲆⵠⵠ.x - 20.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[0].y = ⵠⲆⵠⵠ.y - 22.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[ⲆΔᐃ].x = ⵠⲆⵠⵠ.x - 35.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[ⲆΔⲆⵠ].y = ⵠⲆⵠⵠ.y + 7.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[2].x = ⵠⲆⵠⵠ.x + 7.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[ⲆⲆᐃⲆ].y = ⵠⲆⵠⵠ.y - 30;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[3].x = ⵠⲆⵠⵠ.x + 22.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[3].y = ⵠⲆⵠⵠ.y;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[4].x = ⵠⲆⵠⵠ.x - 7.5;
			ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[ᐃᐃΔΔ].y = ⵠⲆⵠⵠ.y + 14.5;
			for (var Δᐃ = 0; ⵠⲆⵠⵠ.info > Δᐃ; Δᐃ++) {
				ⵠⲆⵠⵠ.ⵠⲆⵠⵠ[Δᐃ].ⲆᐃᐃⲆ(ⵠ.ᐃᐃΔᐃⵠ)
			}
			ⵠⲆΔⵠⲆ[ᐃΔΔ].x = 450;
			ⵠⲆΔⵠⲆ[Δⵠⵠ].y = -ΔⲆΔΔΔ;
			ⵠⲆΔⵠⲆ[0].ᐃⵠⵠⵠⲆ(ⵠ.ΔⵠⲆⵠΔⵠΔ);
			ⵠⲆΔⵠⲆ[ⵠⲆⵠ].ΔⵠⲆⵠᐃ();
			ⵠⵠⵠ.ᐃⵠⲆ.x = ΔΔ;
			ⵠⵠⵠ.ᐃⵠⲆ.y = ΔΔⵠ;
			ⲆⲆⲆ.time = ⵠΔᐃᐃⲆΔⲆⲆΔ
		}
	}

	function ⵠⲆᐃΔΔ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		if (Δᐃ == ᐃΔΔ) {
			ⲆⲆ.width = 566 * Ⲇ;
			ⲆⲆ.height = 429 * Ⲇ;
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 312.625, Ⲇ * 39.046875);
			ᐃ.bezierCurveTo(Ⲇ * 456.625, 60.046875 * Ⲇ, Ⲇ * 521.625, 134.046875 * Ⲇ, 528.625 * Ⲇ, 199.046875 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 540.625, 298.046875 * Ⲇ, 491.625 * Ⲇ, Ⲇ * 364.046875, 405.625 * Ⲇ, 394.046875 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 270.625, Ⲇ * 429.046875, 182.625 * Ⲇ, 395.046875 * Ⲇ, Ⲇ * 100.625, Ⲇ * 344.046875);
			ᐃ.bezierCurveTo(15.625 * Ⲇ, Ⲇ * 283.046875, 20.625 * Ⲇ, Ⲇ * 195.046875, 33.625 * Ⲇ, 158.046875 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 56.625, 80.046875 * Ⲇ, Ⲇ * 102.625, Ⲇ * 46.046875, Ⲇ * 183.625, Ⲇ * 33.046875);
			ᐃ.bezierCurveTo(Ⲇ * 225.625, 25.046875 * Ⲇ, Ⲇ * 270.625, 30.046875 * Ⲇ, Ⲇ * 312.625, Ⲇ * 39.046875);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[0])
		} else if (Δᐃ == ⲆΔᐃΔ) {
			var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
			var ᐃ = ⲆⲆ.getContext(Δ[160]);
			ⲆⲆ.width = 511 * Ⲇ;
			ⲆⲆ.height = 408 * Ⲇ;
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 141.625, 49.296875 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 225.625, Ⲇ * 10.296875, 320.625 * Ⲇ, 16.296875 * Ⲇ, Ⲇ * 390.625, Ⲇ * 39.296875);
			ᐃ.bezierCurveTo(Ⲇ * 476.625, Ⲇ * 71.296875, 483.625 * Ⲇ, Ⲇ * 142.296875, 486.625 * Ⲇ, Ⲇ * 197.296875);
			ᐃ.bezierCurveTo(491.625 * Ⲇ, 289.296875 * Ⲇ, 462.625 * Ⲇ, Ⲇ * 317.296875, 417.625 * Ⲇ, Ⲇ * 351.296875);
			ᐃ.bezierCurveTo(367.625 * Ⲇ, 385.296875 * Ⲇ, 313.625 * Ⲇ, Ⲇ * 404.296875, Ⲇ * 218.625, Ⲇ * 395.296875);
			ᐃ.bezierCurveTo(108.625 * Ⲇ, Ⲇ * 381.296875, Ⲇ * 81.625, Ⲇ * 350.296875, Ⲇ * 52.625, Ⲇ * 305.296875);
			ᐃ.bezierCurveTo(Ⲇ * 16.625, Ⲇ * 244.296875, Ⲇ * 23.625, 171.296875 * Ⲇ, Ⲇ * 37.625, 145.296875 * Ⲇ);
			ᐃ.bezierCurveTo(65.625 * Ⲇ, Ⲇ * 84.296875, 97.625 * Ⲇ, 74.296875 * Ⲇ, 141.625 * Ⲇ, 49.296875 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ])
		} else if (Δᐃ == 2) {
			var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
			var ᐃ = ⲆⲆ.getContext(Δ[160]);
			ⲆⲆ.width = 504 * Ⲇ;
			ⲆⲆ.height = Ⲇ * 408;
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 153.625, Ⲇ * 46.296875);
			ᐃ.bezierCurveTo(Ⲇ * 271.625, Ⲇ * 17.296875, 345.625 * Ⲇ, 35.296875 * Ⲇ, 410.625 * Ⲇ, 71.296875 * Ⲇ);
			ᐃ.bezierCurveTo(473.625 * Ⲇ, Ⲇ * 109.296875, 478.625 * Ⲇ, Ⲇ * 167.296875, Ⲇ * 473.625, Ⲇ * 205.296875);
			ᐃ.bezierCurveTo(462.625 * Ⲇ, 295.296875 * Ⲇ, 438.625 * Ⲇ, Ⲇ * 316.296875, Ⲇ * 388.625, 345.296875 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 331.625, 374.296875 * Ⲇ, 273.625 * Ⲇ, 392.296875 * Ⲇ, 180.625 * Ⲇ, Ⲇ * 387.296875);
			ᐃ.bezierCurveTo(111.625 * Ⲇ, 380.296875 * Ⲇ, 86.625 * Ⲇ, Ⲇ * 360.296875, Ⲇ * 51.625, Ⲇ * 309.296875);
			ᐃ.bezierCurveTo(23.625 * Ⲇ, Ⲇ * 267.296875, 25.625 * Ⲇ, Ⲇ * 226.296875, 27.625 * Ⲇ, 175.296875 * Ⲇ);
			ᐃ.bezierCurveTo(37.625 * Ⲇ, Ⲇ * 99.296875, Ⲇ * 88.625, Ⲇ * 57.296875, 153.625 * Ⲇ, Ⲇ * 46.296875);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ])
		}
		return ⲆⲆ
	}

	function ⲆⲆⲆⲆⲆᐃⵠⲆⲆ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		if (Δᐃ == 0) {
			ⲆⲆ.width = Ⲇ * 543;
			ⲆⲆ.height = Ⲇ * 393;
			ᐃ.translate(Ⲇ * 40, 60 * Ⲇ);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * ᐃⵠⲆⵠ, 3 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 176, Ⲇ * 10.25);
			ᐃ.bezierCurveTo(Ⲇ * 188, Ⲇ * 16.25, Ⲇ * 187, 25.25 * Ⲇ, 183 * Ⲇ, Ⲇ * 26.25);
			ᐃ.bezierCurveTo(Ⲇ * 177, 26.25 * Ⲇ, Ⲇ * 175, 21.25 * Ⲇ, 173 * Ⲇ, 19.25 * Ⲇ);
			ᐃ.bezierCurveTo(170 * Ⲇ, Ⲇ * 14.25, 170 * Ⲇ, Ⲇ * 10.25, 176 * Ⲇ, Ⲇ * 10.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.globalAlpha = ⵠΔᐃ;
			ᐃ.translate(-3 * Ⲇ, Ⲇ * -3);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(176 * Ⲇ, Ⲇ * 10.25);
			ᐃ.bezierCurveTo(Ⲇ * 188, 16.25 * Ⲇ, Ⲇ * 187, Ⲇ * 25.25, 183 * Ⲇ, Ⲇ * 26.25);
			ᐃ.bezierCurveTo(177 * Ⲇ, 26.25 * Ⲇ, Ⲇ * 175, Ⲇ * 21.25, 173 * Ⲇ, 19.25 * Ⲇ);
			ᐃ.bezierCurveTo(170 * Ⲇ, 14.25 * Ⲇ, 170 * Ⲇ, Ⲇ * 10.25, Ⲇ * 176, Ⲇ * 10.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * 3, Ⲇ * 3);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 274, Ⲇ * 8);
			ᐃ.bezierCurveTo(276 * Ⲇ, 12 * Ⲇ, Ⲇ * 271, Ⲇ * 23, 266 * Ⲇ, 20 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 264, ⲆΔⲆⵠΔᐃⲆ * Ⲇ, 262 * Ⲇ, ΔⲆΔⵠⲆ * Ⲇ, Ⲇ * 267, 9 * Ⲇ);
			ᐃ.bezierCurveTo(271 * Ⲇ, ⵠᐃᐃΔᐃ * Ⲇ, Ⲇ * 274, Ⲇ * ᐃᐃⲆΔΔ, Ⲇ * 274, Ⲇ * 8);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.globalAlpha = 1;
			ᐃ.translate(-ⲆΔΔⲆ * Ⲇ, Ⲇ * -ⵠΔⲆⲆ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 274, Ⲇ * ⵠⲆΔⲆᐃ);
			ᐃ.bezierCurveTo(276 * Ⲇ, Ⲇ * ⲆⲆᐃΔⵠΔⲆ, Ⲇ * 271, 23 * Ⲇ, 266 * Ⲇ, 20 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 264, Ⲇ * ⵠᐃⲆⵠᐃᐃⲆ, Ⲇ * 262, ⵠⵠΔⲆⵠ * Ⲇ, 267 * Ⲇ, ⵠⵠᐃⵠⲆΔᐃ * Ⲇ);
			ᐃ.bezierCurveTo(271 * Ⲇ, Ⲇ * 5, 274 * Ⲇ, Ⲇ * 5, 274 * Ⲇ, Ⲇ * 8);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * 3, Ⲇ * ᐃⵠᐃⲆ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 282, Ⲇ * 23.25);
			ᐃ.bezierCurveTo(Ⲇ * 275, 25.25 * Ⲇ, Ⲇ * 272, 29.25 * Ⲇ, Ⲇ * 274, Ⲇ * 36.25);
			ᐃ.bezierCurveTo(277 * Ⲇ, Ⲇ * 40.25, 280 * Ⲇ, Ⲇ * 37.25, 283 * Ⲇ, Ⲇ * 32.25);
			ᐃ.bezierCurveTo(Ⲇ * 286, Ⲇ * 26.25, Ⲇ * 286, Ⲇ * 25.25, Ⲇ * 282, Ⲇ * 23.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.globalAlpha = ⵠⵠⵠΔ;
			ᐃ.translate(Ⲇ * -3, Ⲇ * -3);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 282, 23.25 * Ⲇ);
			ᐃ.bezierCurveTo(275 * Ⲇ, 25.25 * Ⲇ, Ⲇ * 272, 29.25 * Ⲇ, 274 * Ⲇ, Ⲇ * 36.25);
			ᐃ.bezierCurveTo(277 * Ⲇ, Ⲇ * 40.25, 280 * Ⲇ, 37.25 * Ⲇ, 283 * Ⲇ, 32.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 286, Ⲇ * 26.25, 286 * Ⲇ, Ⲇ * 25.25, Ⲇ * 282, 23.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(ΔⵠᐃⲆ * Ⲇ, Ⲇ * ΔΔⲆᐃ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 343.75, Ⲇ * 18.25);
			ᐃ.bezierCurveTo(Ⲇ * 346.75, 27.25 * Ⲇ, 346.75 * Ⲇ, 32.25 * Ⲇ, Ⲇ * 339.75, 31.25 * Ⲇ);
			ᐃ.bezierCurveTo(336.75 * Ⲇ, 29.25 * Ⲇ, Ⲇ * 335.75, 27.25 * Ⲇ, 336.75 * Ⲇ, Ⲇ * 22.25);
			ᐃ.bezierCurveTo(Ⲇ * 336.75, Ⲇ * 16.25, 338.75 * Ⲇ, Ⲇ * 15.25, Ⲇ * 343.75, Ⲇ * 18.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⵠ]);
			ᐃ.globalAlpha = 1;
			ᐃ.translate(-ᐃⵠᐃⲆ * Ⲇ, Ⲇ * -ᐃᐃΔⵠ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(343.75 * Ⲇ, Ⲇ * 18.25);
			ᐃ.bezierCurveTo(346.75 * Ⲇ, Ⲇ * 27.25, Ⲇ * 346.75, 32.25 * Ⲇ, 339.75 * Ⲇ, 31.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 336.75, 29.25 * Ⲇ, 335.75 * Ⲇ, Ⲇ * 27.25, Ⲇ * 336.75, 22.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 336.75, 16.25 * Ⲇ, 338.75 * Ⲇ, 15.25 * Ⲇ, 343.75 * Ⲇ, 18.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(3 * Ⲇ, Ⲇ * 3);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 364.75, 22.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 368.75, Ⲇ * 27.25, Ⲇ * 362.75, Ⲇ * 36.25, Ⲇ * 356.75, 39.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 346.75, 43.25 * Ⲇ, 346.75 * Ⲇ, Ⲇ * 34.25, 348.75 * Ⲇ, Ⲇ * 31.25);
			ᐃ.bezierCurveTo(352.75 * Ⲇ, 23.25 * Ⲇ, Ⲇ * 360.75, Ⲇ * 20.25, 363.75 * Ⲇ, 22.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.globalAlpha = 1;
			ᐃ.translate(-ⵠΔⲆΔΔ * Ⲇ, -3 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(364.75 * Ⲇ, Ⲇ * 22.25);
			ᐃ.bezierCurveTo(368.75 * Ⲇ, 27.25 * Ⲇ, 362.75 * Ⲇ, 36.25 * Ⲇ, Ⲇ * 356.75, Ⲇ * 39.25);
			ᐃ.bezierCurveTo(346.75 * Ⲇ, 43.25 * Ⲇ, 346.75 * Ⲇ, Ⲇ * 34.25, 348.75 * Ⲇ, 31.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 352.75, Ⲇ * 23.25, Ⲇ * 360.75, Ⲇ * 20.25, Ⲇ * 363.75, 22.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆ]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(ⵠⵠᐃΔ * Ⲇ, ᐃⵠᐃⲆ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(350.75 * Ⲇ, Ⲇ * 52.25);
			ᐃ.bezierCurveTo(352.75 * Ⲇ, Ⲇ * 45.25, Ⲇ * 360.75, Ⲇ * 43.25, Ⲇ * 368.75, 52.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 369.75, Ⲇ * 58.25, 366.75 * Ⲇ, Ⲇ * 59.25, Ⲇ * 357.75, Ⲇ * 57.25);
			ᐃ.bezierCurveTo(Ⲇ * 350.75, 56.25 * Ⲇ, Ⲇ * 352.75, Ⲇ * 55.25, Ⲇ * 350.75, Ⲇ * 52.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.globalAlpha = ⵠⵠᐃ;
			ᐃ.translate(-3 * Ⲇ, -Ⲇⵠᐃᐃ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(350.75 * Ⲇ, 52.25 * Ⲇ);
			ᐃ.bezierCurveTo(352.75 * Ⲇ, Ⲇ * 45.25, 360.75 * Ⲇ, 43.25 * Ⲇ, Ⲇ * 368.75, 52.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 369.75, Ⲇ * 58.25, Ⲇ * 366.75, 59.25 * Ⲇ, Ⲇ * 357.75, 57.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 350.75, 56.25 * Ⲇ, Ⲇ * 352.75, 55.25 * Ⲇ, 350.75 * Ⲇ, 52.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆ]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(3 * Ⲇ, Ⲇ * 3);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(421.75 * Ⲇ, Ⲇ * 81.25);
			ᐃ.bezierCurveTo(Ⲇ * 432.75, 85.25 * Ⲇ, 431.75 * Ⲇ, Ⲇ * 89.25, 426.75 * Ⲇ, 93.25 * Ⲇ);
			ᐃ.bezierCurveTo(418.75 * Ⲇ, 95.25 * Ⲇ, Ⲇ * 414.75, 93.25 * Ⲇ, 412.75 * Ⲇ, Ⲇ * 89.25);
			ᐃ.bezierCurveTo(Ⲇ * 411.75, Ⲇ * 84.25, 413.75 * Ⲇ, Ⲇ * 81.25, 421.75 * Ⲇ, 81.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠ]);
			ᐃ.globalAlpha = ⵠⵠⵠΔ;
			ᐃ.translate(-3 * Ⲇ, -3 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(421.75 * Ⲇ, 81.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 432.75, Ⲇ * 85.25, 431.75 * Ⲇ, Ⲇ * 89.25, Ⲇ * 426.75, 93.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 418.75, Ⲇ * 95.25, 414.75 * Ⲇ, Ⲇ * 93.25, 412.75 * Ⲇ, 89.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 411.75, Ⲇ * 84.25, Ⲇ * 413.75, Ⲇ * 81.25, 421.75 * Ⲇ, Ⲇ * 81.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(ⵠΔⲆⲆ * Ⲇ, 3 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 432.75, Ⲇ * 105.25);
			ᐃ.bezierCurveTo(430.75 * Ⲇ, Ⲇ * 115.25, Ⲇ * 411.75, 130.25 * Ⲇ, Ⲇ * 408.75, Ⲇ * 117.25);
			ᐃ.bezierCurveTo(407.75 * Ⲇ, Ⲇ * 106.25, Ⲇ * 414.75, 103.25 * Ⲇ, 421.75 * Ⲇ, Ⲇ * 101.25);
			ᐃ.bezierCurveTo(Ⲇ * 430.75, 100.25 * Ⲇ, 432.75 * Ⲇ, 101.25 * Ⲇ, Ⲇ * 432.75, Ⲇ * 105.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ]);
			ᐃ.globalAlpha = 1;
			ᐃ.translate(Ⲇ * -3, -ᐃⵠᐃⲆ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(432.75 * Ⲇ, Ⲇ * 105.25);
			ᐃ.bezierCurveTo(Ⲇ * 430.75, Ⲇ * 115.25, 411.75 * Ⲇ, Ⲇ * 130.25, Ⲇ * 408.75, Ⲇ * 117.25);
			ᐃ.bezierCurveTo(Ⲇ * 407.75, Ⲇ * 106.25, Ⲇ * 414.75, 103.25 * Ⲇ, 421.75 * Ⲇ, Ⲇ * 101.25);
			ᐃ.bezierCurveTo(Ⲇ * 430.75, Ⲇ * 100.25, Ⲇ * 432.75, 101.25 * Ⲇ, 432.75 * Ⲇ, 105.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * ᐃⲆᐃⲆ, Ⲇ * 3);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 422.75, Ⲇ * 153.25);
			ᐃ.bezierCurveTo(Ⲇ * 437.75, Ⲇ * 155.25, 442.75 * Ⲇ, 158.25 * Ⲇ, Ⲇ * 436.75, Ⲇ * 165.25);
			ᐃ.bezierCurveTo(Ⲇ * 431.75, 170.25 * Ⲇ, 424.75 * Ⲇ, 167.25 * Ⲇ, 419.75 * Ⲇ, 163.25 * Ⲇ);
			ᐃ.bezierCurveTo(413.75 * Ⲇ, Ⲇ * 157.25, 415.75 * Ⲇ, 153.25 * Ⲇ, Ⲇ * 422.75, Ⲇ * 153.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]);
			ᐃ.globalAlpha = ΔΔⲆΔ;
			ᐃ.translate(Ⲇ * -3, Ⲇ * -ᐃΔΔⵠ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 422.75, 153.25 * Ⲇ);
			ᐃ.bezierCurveTo(437.75 * Ⲇ, Ⲇ * 155.25, 442.75 * Ⲇ, Ⲇ * 158.25, 436.75 * Ⲇ, 165.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 431.75, Ⲇ * 170.25, 424.75 * Ⲇ, Ⲇ * 167.25, Ⲇ * 419.75, Ⲇ * 163.25);
			ᐃ.bezierCurveTo(413.75 * Ⲇ, 157.25 * Ⲇ, Ⲇ * 415.75, 153.25 * Ⲇ, 422.75 * Ⲇ, Ⲇ * 153.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃ]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * 3, 3 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(409.75 * Ⲇ, 158.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 409.75, 168.25 * Ⲇ, 401.75 * Ⲇ, Ⲇ * 172.25, 397.75 * Ⲇ, 167.25 * Ⲇ);
			ᐃ.bezierCurveTo(394.75 * Ⲇ, Ⲇ * 159.25, 407.75 * Ⲇ, 150.25 * Ⲇ, Ⲇ * 408.75, 158.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ]);
			ᐃ.globalAlpha = 1;
			ᐃ.translate(Ⲇ * -ⵠᐃⲆᐃ, -3 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(409.75 * Ⲇ, Ⲇ * 158.25);
			ᐃ.bezierCurveTo(409.75 * Ⲇ, Ⲇ * 168.25, 401.75 * Ⲇ, 172.25 * Ⲇ, 397.75 * Ⲇ, 167.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 394.75, 159.25 * Ⲇ, Ⲇ * 407.75, Ⲇ * 150.25, 408.75 * Ⲇ, Ⲇ * 158.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃ]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(ⵠᐃⵠΔ * Ⲇ, Ⲇ * ⵠΔⲆⲆ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 204, 238.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 204, 248.25 * Ⲇ, 184 * Ⲇ, 255.25 * Ⲇ, 180 * Ⲇ, 247.25 * Ⲇ);
			ᐃ.bezierCurveTo(177 * Ⲇ, 241.25 * Ⲇ, 187 * Ⲇ, 236.25 * Ⲇ, 192 * Ⲇ, 235.25 * Ⲇ);
			ᐃ.bezierCurveTo(201 * Ⲇ, 233.25 * Ⲇ, 204 * Ⲇ, Ⲇ * 233.25, 204 * Ⲇ, 238.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ]);
			ᐃ.globalAlpha = ⲆⵠⲆ;
			ᐃ.translate(-3 * Ⲇ, -Ⲇⵠᐃᐃ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 204, Ⲇ * 238.25);
			ᐃ.bezierCurveTo(Ⲇ * 204, 248.25 * Ⲇ, Ⲇ * 184, 255.25 * Ⲇ, 180 * Ⲇ, Ⲇ * 247.25);
			ᐃ.bezierCurveTo(Ⲇ * 177, 241.25 * Ⲇ, 187 * Ⲇ, 236.25 * Ⲇ, Ⲇ * 192, Ⲇ * 235.25);
			ᐃ.bezierCurveTo(201 * Ⲇ, 233.25 * Ⲇ, Ⲇ * 204, 233.25 * Ⲇ, Ⲇ * 204, Ⲇ * 238.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(3 * Ⲇ, Ⲇ * 3);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 208, Ⲇ * 246.25);
			ᐃ.bezierCurveTo(202 * Ⲇ, 255.25 * Ⲇ, 204 * Ⲇ, 258.25 * Ⲇ, 212 * Ⲇ, Ⲇ * 255.25);
			ᐃ.bezierCurveTo(Ⲇ * 217, 250.25 * Ⲇ, Ⲇ * 217, Ⲇ * 248.25, Ⲇ * 216, Ⲇ * 244.25);
			ᐃ.bezierCurveTo(210 * Ⲇ, 241.25 * Ⲇ, Ⲇ * 209, 245.25 * Ⲇ, 208 * Ⲇ, Ⲇ * 246.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]);
			ᐃ.globalAlpha = 1;
			ᐃ.translate(-ᐃΔΔΔ * Ⲇ, -ⲆΔΔⲆ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(208 * Ⲇ, 246.25 * Ⲇ);
			ᐃ.bezierCurveTo(202 * Ⲇ, 255.25 * Ⲇ, 204 * Ⲇ, 258.25 * Ⲇ, 212 * Ⲇ, 255.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 217, Ⲇ * 250.25, 217 * Ⲇ, 248.25 * Ⲇ, 216 * Ⲇ, 244.25 * Ⲇ);
			ᐃ.bezierCurveTo(210 * Ⲇ, 241.25 * Ⲇ, 209 * Ⲇ, Ⲇ * 245.25, 208 * Ⲇ, Ⲇ * 246.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * ᐃⵠⲆⵠ, 3 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(197 * Ⲇ, Ⲇ * 258.25);
			ᐃ.bezierCurveTo(194 * Ⲇ, 265.25 * Ⲇ, Ⲇ * 186, 270.25 * Ⲇ, 185 * Ⲇ, Ⲇ * 262.25);
			ᐃ.bezierCurveTo(Ⲇ * 187, 255.25 * Ⲇ, 191 * Ⲇ, 252.25 * Ⲇ, 195 * Ⲇ, 253.25 * Ⲇ);
			ᐃ.bezierCurveTo(198 * Ⲇ, 256.25 * Ⲇ, 197 * Ⲇ, Ⲇ * 257.25, 197 * Ⲇ, Ⲇ * 258.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.globalAlpha = 1;
			ᐃ.translate(-3 * Ⲇ, Ⲇ * -ⵠΔⲆⲆ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 197, Ⲇ * 258.25);
			ᐃ.bezierCurveTo(Ⲇ * 194, 265.25 * Ⲇ, 186 * Ⲇ, 270.25 * Ⲇ, 185 * Ⲇ, 262.25 * Ⲇ);
			ᐃ.bezierCurveTo(187 * Ⲇ, 255.25 * Ⲇ, Ⲇ * 191, Ⲇ * 252.25, Ⲇ * 195, Ⲇ * 253.25);
			ᐃ.bezierCurveTo(Ⲇ * 198, Ⲇ * 256.25, Ⲇ * 197, 257.25 * Ⲇ, Ⲇ * 197, 258.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(ᐃΔΔΔ * Ⲇ, Ⲇ * ᐃⵠⲆⵠ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 24, 111.25 * Ⲇ);
			ᐃ.bezierCurveTo(32 * Ⲇ, 115.25 * Ⲇ, Ⲇ * 29, 123.25 * Ⲇ, Ⲇ * 22, Ⲇ * 133.25);
			ᐃ.bezierCurveTo(Ⲇ * 15, 140.25 * Ⲇ, Ⲇ * ⵠⵠᐃΔᐃ, 137.25 * Ⲇ, 9 * Ⲇ, Ⲇ * 125.25);
			ᐃ.bezierCurveTo(ⲆⵠΔⵠᐃ * Ⲇ, 114.25 * Ⲇ, Ⲇ * 20, 110.25 * Ⲇ, 24 * Ⲇ, 111.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[0]);
			ᐃ.globalAlpha = ΔⲆΔᐃ;
			ᐃ.translate(-Ⲇⵠᐃᐃ * Ⲇ, -3 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(24 * Ⲇ, Ⲇ * 111.25);
			ᐃ.bezierCurveTo(Ⲇ * 32, Ⲇ * 115.25, Ⲇ * 29, 123.25 * Ⲇ, 22 * Ⲇ, 133.25 * Ⲇ);
			ᐃ.bezierCurveTo(ⲆⵠⲆΔⵠ * Ⲇ, Ⲇ * 140.25, Ⲇ * ⲆΔΔᐃΔ, 137.25 * Ⲇ, Ⲇ * ΔΔΔᐃΔΔΔ, 125.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * ᐃⵠᐃΔⲆ, Ⲇ * 114.25, ΔⵠⲆⲆⵠⵠⵠ * Ⲇ, Ⲇ * 110.25, 24 * Ⲇ, 111.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * ΔⲆΔΔ, 3 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 33, Ⲇ * 137.25);
			ᐃ.bezierCurveTo(Ⲇ * 41, 142.25 * Ⲇ, 40 * Ⲇ, 145.25 * Ⲇ, 35 * Ⲇ, Ⲇ * 147.25);
			ᐃ.bezierCurveTo(22 * Ⲇ, 147.25 * Ⲇ, Ⲇ * ΔⵠᐃⲆΔⲆⵠ, 144.25 * Ⲇ, Ⲇ * 22, 138.25 * Ⲇ);
			ᐃ.bezierCurveTo(26 * Ⲇ, Ⲇ * 133.25, Ⲇ * 31, Ⲇ * 136.25, Ⲇ * 33, 137.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ]);
			ᐃ.globalAlpha = ⵠⵠᐃ;
			ᐃ.translate(Ⲇ * -3, -ⵠΔⲆⲆ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(33 * Ⲇ, 137.25 * Ⲇ);
			ᐃ.bezierCurveTo(41 * Ⲇ, Ⲇ * 142.25, 40 * Ⲇ, 145.25 * Ⲇ, Ⲇ * 35, 147.25 * Ⲇ);
			ᐃ.bezierCurveTo(22 * Ⲇ, Ⲇ * 147.25, ΔⲆⲆⲆΔᐃⵠ * Ⲇ, Ⲇ * 144.25, 22 * Ⲇ, 138.25 * Ⲇ);
			ᐃ.bezierCurveTo(26 * Ⲇ, 133.25 * Ⲇ, Ⲇ * 31, 136.25 * Ⲇ, Ⲇ * 33, Ⲇ * 137.25);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[1]);
			ᐃ.globalAlpha = .5;
			ᐃ.translate(Ⲇ * ᐃⵠᐃⲆ, 3 * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 36, Ⲇ * 187.25);
			ᐃ.bezierCurveTo(25 * Ⲇ, 198.25 * Ⲇ, 19 * Ⲇ, Ⲇ * 193.25, 23 * Ⲇ, Ⲇ * 187.25);
			ᐃ.bezierCurveTo(Ⲇ * 26, Ⲇ * 178.25, Ⲇ * 32, 173.25 * Ⲇ, Ⲇ * 38, Ⲇ * 175.25);
			ᐃ.bezierCurveTo(Ⲇ * 44, 180.25 * Ⲇ, 39 * Ⲇ, 186.25 * Ⲇ, 36 * Ⲇ, 187.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ]);
			ᐃ.globalAlpha = 1;
			ᐃ.translate(-ᐃΔΔΔ * Ⲇ, -ⲆΔⲆΔ * Ⲇ);
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(36 * Ⲇ, 187.25 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 25, 198.25 * Ⲇ, Ⲇ * 19, 193.25 * Ⲇ, 23 * Ⲇ, 187.25 * Ⲇ);
			ᐃ.bezierCurveTo(26 * Ⲇ, 178.25 * Ⲇ, 32 * Ⲇ, Ⲇ * 173.25, 38 * Ⲇ, 175.25 * Ⲇ);
			ᐃ.bezierCurveTo(44 * Ⲇ, Ⲇ * 180.25, 39 * Ⲇ, 186.25 * Ⲇ, Ⲇ * 36, 187.25 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⲆⲆ])
		} else Δᐃ == ⵠⵠᐃ ? (ⲆⲆ.width = Ⲇ * 543, ⲆⲆ.height = 470 * Ⲇ, ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, Ⲇ * ΔⵠⲆⲆ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 377.1428527832031, 56.87498474121094 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 384.1428527832031, 44.87498474121094 * Ⲇ, Ⲇ * 403.1428527832031, Ⲇ * 39.87498474121094, 403.1428527832031 * Ⲇ, Ⲇ * 51.87498474121094), ᐃ.bezierCurveTo(Ⲇ * 402.1428527832031, Ⲇ * 59.87498474121094, 396.1428527832031 * Ⲇ, Ⲇ * 61.87498474121094, 389.1428527832031 * Ⲇ, 64.87498474121094 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 376.1428527832031, 67.87498474121094 * Ⲇ, 375.1428527832031 * Ⲇ, 62.87498474121094 * Ⲇ, 377.1428527832031 * Ⲇ, 56.87498474121094 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⵠ]), ᐃ.globalAlpha = ΔⲆΔᐃ, ᐃ.translate(Ⲇ * -3, -ΔΔⲆᐃ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(377.1428527832031 * Ⲇ, Ⲇ * 56.87498474121094), ᐃ.bezierCurveTo(Ⲇ * 384.1428527832031, Ⲇ * 44.87498474121094, Ⲇ * 403.1428527832031, Ⲇ * 39.87498474121094, Ⲇ * 403.1428527832031, 51.87498474121094 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 402.1428527832031, Ⲇ * 59.87498474121094, 396.1428527832031 * Ⲇ, 61.87498474121094 * Ⲇ, Ⲇ * 389.1428527832031, Ⲇ * 64.87498474121094), ᐃ.bezierCurveTo(376.1428527832031 * Ⲇ, 67.87498474121094 * Ⲇ, 375.1428527832031 * Ⲇ, 62.87498474121094 * Ⲇ, Ⲇ * 377.1428527832031, Ⲇ * 56.87498474121094), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(3 * Ⲇ, ⵠΔⲆΔΔ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 349.1428527832031, Ⲇ * 44.303558349609375), ᐃ.bezierCurveTo(358.1428527832031 * Ⲇ, Ⲇ * 37.303558349609375, Ⲇ * 370.1428527832031, Ⲇ * 47.303558349609375, 364.1428527832031 * Ⲇ, 51.303558349609375 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 356.1428527832031, Ⲇ * 55.303558349609375, Ⲇ * 345.1428527832031, 48.303558349609375 * Ⲇ, 349.1428527832031 * Ⲇ, 45.303558349609375 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[Δⵠⵠ]), ᐃ.globalAlpha = 1, ᐃ.translate(-ΔΔⲆᐃ * Ⲇ, Ⲇ * -3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(349.1428527832031 * Ⲇ, Ⲇ * 44.303558349609375), ᐃ.bezierCurveTo(Ⲇ * 358.1428527832031, Ⲇ * 37.303558349609375, Ⲇ * 370.1428527832031, Ⲇ * 47.303558349609375, 364.1428527832031 * Ⲇ, 51.303558349609375 * Ⲇ), ᐃ.bezierCurveTo(356.1428527832031 * Ⲇ, Ⲇ * 55.303558349609375, 345.1428527832031 * Ⲇ, 48.303558349609375 * Ⲇ, Ⲇ * 349.1428527832031, 45.303558349609375 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, ΔⵠᐃⲆ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 480.1428527832031, 152.30355834960938 * Ⲇ), ᐃ.bezierCurveTo(477.1428527832031 * Ⲇ, Ⲇ * 145.30355834960938, Ⲇ * 480.1428527832031, 140.30355834960938 * Ⲇ, Ⲇ * 489.1428527832031, Ⲇ * 135.30355834960938), ᐃ.bezierCurveTo(497.1428527832031 * Ⲇ, 133.30355834960938 * Ⲇ, 498.1428527832031 * Ⲇ, Ⲇ * 140.30355834960938, Ⲇ * 491.1428527832031, 147.30355834960938 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 485.1428527832031, 155.30355834960938 * Ⲇ, Ⲇ * 482.1428527832031, Ⲇ * 156.30355834960938, Ⲇ * 480.1428527832031, Ⲇ * 152.30355834960938), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = 1, ᐃ.translate(Ⲇ * -3, Ⲇ * -ⲆΔⲆΔ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 480.1428527832031, Ⲇ * 152.30355834960938), ᐃ.bezierCurveTo(Ⲇ * 477.1428527832031, Ⲇ * 145.30355834960938, 480.1428527832031 * Ⲇ, Ⲇ * 140.30355834960938, Ⲇ * 489.1428527832031, 135.30355834960938 * Ⲇ), ᐃ.bezierCurveTo(497.1428527832031 * Ⲇ, Ⲇ * 133.30355834960938, Ⲇ * 498.1428527832031, 140.30355834960938 * Ⲇ, Ⲇ * 491.1428527832031, Ⲇ * 147.30355834960938), ᐃ.bezierCurveTo(Ⲇ * 485.1428527832031, 155.30355834960938 * Ⲇ, 482.1428527832031 * Ⲇ, Ⲇ * 156.30355834960938, Ⲇ * 480.1428527832031, Ⲇ * 152.30355834960938), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(3 * Ⲇ, 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(211.14285278320312 * Ⲇ, Ⲇ * 27.303558349609375), ᐃ.bezierCurveTo(Ⲇ * 223.14285278320312, 21.303558349609375 * Ⲇ, Ⲇ * 234.14285278320312, 34.303558349609375 * Ⲇ, 232.14285278320312 * Ⲇ, Ⲇ * 42.303558349609375), ᐃ.bezierCurveTo(Ⲇ * 228.14285278320312, Ⲇ * 49.303558349609375, Ⲇ * 223.14285278320312, Ⲇ * 45.303558349609375, Ⲇ * 213.14285278320312, 38.303558349609375 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 205.14285278320312, 31.303558349609375 * Ⲇ, 208.14285278320312 * Ⲇ, Ⲇ * 29.303558349609375, Ⲇ * 211.14285278320312, 27.303558349609375 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[Δⵠⵠ]), ᐃ.globalAlpha = 1, ᐃ.translate(-ᐃⲆᐃⲆ * Ⲇ, -3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 211.14285278320312, 27.303558349609375 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 223.14285278320312, Ⲇ * 21.303558349609375, 234.14285278320312 * Ⲇ, 34.303558349609375 * Ⲇ, Ⲇ * 232.14285278320312, 42.303558349609375 * Ⲇ), ᐃ.bezierCurveTo(228.14285278320312 * Ⲇ, 49.303558349609375 * Ⲇ, 223.14285278320312 * Ⲇ, Ⲇ * 45.303558349609375, Ⲇ * 213.14285278320312, Ⲇ * 38.303558349609375), ᐃ.bezierCurveTo(Ⲇ * 205.14285278320312, 31.303558349609375 * Ⲇ, Ⲇ * 208.14285278320312, Ⲇ * 29.303558349609375, Ⲇ * 211.14285278320312, 27.303558349609375 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, Ⲇ * ⵠⵠᐃΔ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 364.1428527832031, Ⲇ * 73.30355834960938), ᐃ.bezierCurveTo(354.1428527832031 * Ⲇ, Ⲇ * 72.30355834960938, 356.1428527832031 * Ⲇ, 64.30355834960938 * Ⲇ, Ⲇ * 359.1428527832031, 59.303558349609375 * Ⲇ), ᐃ.bezierCurveTo(365.1428527832031 * Ⲇ, Ⲇ * 55.303558349609375, 366.1428527832031 * Ⲇ, Ⲇ * 61.303558349609375, Ⲇ * 366.1428527832031, 69.30355834960938 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 365.1428527832031, 73.30355834960938 * Ⲇ, Ⲇ * 365.1428527832031, 73.30355834960938 * Ⲇ, Ⲇ * 364.1428527832031, Ⲇ * 73.30355834960938), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]), ᐃ.globalAlpha = 1, ᐃ.translate(Ⲇ * -ᐃⲆᐃⲆ, Ⲇ * -3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 364.1428527832031, 73.30355834960938 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 354.1428527832031, 72.30355834960938 * Ⲇ, Ⲇ * 356.1428527832031, 64.30355834960938 * Ⲇ, Ⲇ * 359.1428527832031, 59.303558349609375 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 365.1428527832031, Ⲇ * 55.303558349609375, 366.1428527832031 * Ⲇ, Ⲇ * 61.303558349609375, 366.1428527832031 * Ⲇ, Ⲇ * 69.30355834960938), ᐃ.bezierCurveTo(365.1428527832031 * Ⲇ, 73.30355834960938 * Ⲇ, Ⲇ * 365.1428527832031, Ⲇ * 73.30355834960938, 364.1428527832031 * Ⲇ, Ⲇ * 73.30355834960938), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * ⵠⵠᐃΔ, 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 182.14285278320312, Ⲇ * 57.303558349609375), ᐃ.bezierCurveTo(Ⲇ * 173.14285278320312, 52.303558349609375 * Ⲇ, Ⲇ * 177.14285278320312, Ⲇ * 39.303558349609375, 198.14285278320312 * Ⲇ, Ⲇ * 36.303558349609375), ᐃ.bezierCurveTo(Ⲇ * 209.14285278320312, Ⲇ * 37.303558349609375, Ⲇ * 206.14285278320312, 49.303558349609375 * Ⲇ, Ⲇ * 193.14285278320312, 53.303558349609375 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 187.14285278320312, 56.303558349609375 * Ⲇ, Ⲇ * 185.14285278320312, Ⲇ * 57.303558349609375, 182.14285278320312 * Ⲇ, 57.303558349609375 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]), ᐃ.globalAlpha = 1, ᐃ.translate(Ⲇ * -ΔⵠᐃⲆ, -3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 182.14285278320312, Ⲇ * 57.303558349609375), ᐃ.bezierCurveTo(173.14285278320312 * Ⲇ, Ⲇ * 52.303558349609375, Ⲇ * 177.14285278320312, 39.303558349609375 * Ⲇ, 198.14285278320312 * Ⲇ, Ⲇ * 36.303558349609375), ᐃ.bezierCurveTo(209.14285278320312 * Ⲇ, 37.303558349609375 * Ⲇ, 206.14285278320312 * Ⲇ, 49.303558349609375 * Ⲇ, Ⲇ * 193.14285278320312, Ⲇ * 53.303558349609375), ᐃ.bezierCurveTo(Ⲇ * 187.14285278320312, Ⲇ * 56.303558349609375, 185.14285278320312 * Ⲇ, 57.303558349609375 * Ⲇ, 182.14285278320312 * Ⲇ, 57.303558349609375 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆ]), ᐃ.globalAlpha = .5, ᐃ.translate(3 * Ⲇ, 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(489.1428527832031 * Ⲇ, 267.0178527832031 * Ⲇ), ᐃ.bezierCurveTo(500.1428527832031 * Ⲇ, Ⲇ * 257.0178527832031, Ⲇ * 511.1428527832031, Ⲇ * 269.0178527832031, 514.1428527832031 * Ⲇ, 275.0178527832031 * Ⲇ), ᐃ.bezierCurveTo(519.1428527832031 * Ⲇ, 285.0178527832031 * Ⲇ, Ⲇ * 509.1428527832031, Ⲇ * 288.0178527832031, Ⲇ * 501.1428527832031, Ⲇ * 282.0178527832031), ᐃ.bezierCurveTo(Ⲇ * 488.1428527832031, 277.0178527832031 * Ⲇ, 485.1428527832031 * Ⲇ, Ⲇ * 271.0178527832031, 489.1428527832031 * Ⲇ, 267.0178527832031 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = ΔΔⲆΔ, ᐃ.translate(Ⲇ * -ΔⵠⲆⲆ, -ΔⲆΔΔ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 489.1428527832031, 267.0178527832031 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 500.1428527832031, Ⲇ * 257.0178527832031, Ⲇ * 511.1428527832031, 269.0178527832031 * Ⲇ, Ⲇ * 514.1428527832031, Ⲇ * 275.0178527832031), ᐃ.bezierCurveTo(Ⲇ * 519.1428527832031, 285.0178527832031 * Ⲇ, Ⲇ * 509.1428527832031, Ⲇ * 288.0178527832031, Ⲇ * 501.1428527832031, 282.0178527832031 * Ⲇ), ᐃ.bezierCurveTo(488.1428527832031 * Ⲇ, 277.0178527832031 * Ⲇ, Ⲇ * 485.1428527832031, 271.0178527832031 * Ⲇ, Ⲇ * 489.1428527832031, Ⲇ * 267.0178527832031), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * ⵠΔⲆⲆ, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(480.1428527832031 * Ⲇ, Ⲇ * 122.73213958740234), ᐃ.bezierCurveTo(469.1428527832031 * Ⲇ, Ⲇ * 119.73213958740234, Ⲇ * 473.1428527832031, 108.73213958740234 * Ⲇ, 476.1428527832031 * Ⲇ, 107.73213958740234 * Ⲇ), ᐃ.bezierCurveTo(483.1428527832031 * Ⲇ, Ⲇ * 102.73213958740234, 485.1428527832031 * Ⲇ, Ⲇ * 118.73213958740234, Ⲇ * 480.1428527832031, 122.73213958740234 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = 1, ᐃ.translate(Ⲇ * -3, Ⲇ * -ⲆΔΔⲆ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(480.1428527832031 * Ⲇ, Ⲇ * 122.73213958740234), ᐃ.bezierCurveTo(Ⲇ * 469.1428527832031, Ⲇ * 119.73213958740234, Ⲇ * 473.1428527832031, Ⲇ * 108.73213958740234, Ⲇ * 476.1428527832031, Ⲇ * 107.73213958740234), ᐃ.bezierCurveTo(483.1428527832031 * Ⲇ, Ⲇ * 102.73213958740234, Ⲇ * 485.1428527832031, 118.73213958740234 * Ⲇ, Ⲇ * 480.1428527832031, 122.73213958740234 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(470.1428527832031 * Ⲇ, Ⲇ * 286.3035697937012), ᐃ.bezierCurveTo(Ⲇ * 472.1428527832031, 277.3035697937012 * Ⲇ, Ⲇ * 480.1428527832031, Ⲇ * 277.3035697937012, 489.1428527832031 * Ⲇ, Ⲇ * 286.3035697937012), ᐃ.bezierCurveTo(490.1428527832031 * Ⲇ, Ⲇ * 292.3035697937012, Ⲇ * 482.1428527832031, Ⲇ * 294.3035697937012, Ⲇ * 470.1428527832031, Ⲇ * 286.3035697937012), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ]), ᐃ.globalAlpha = ⵠⵠᐃ, ᐃ.translate(-ⵠᐃⲆᐃ * Ⲇ, Ⲇ * -3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(470.1428527832031 * Ⲇ, 286.3035697937012 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 472.1428527832031, Ⲇ * 277.3035697937012, Ⲇ * 480.1428527832031, Ⲇ * 277.3035697937012, 489.1428527832031 * Ⲇ, 286.3035697937012 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 490.1428527832031, 292.3035697937012 * Ⲇ, 482.1428527832031 * Ⲇ, Ⲇ * 294.3035697937012, Ⲇ * 470.1428527832031, Ⲇ * 286.3035697937012), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, ᐃΔΔΔ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(518.1428527832031 * Ⲇ, 265.0178565979004 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 524.1428527832031, 262.0178565979004 * Ⲇ, Ⲇ * 521.1428527832031, Ⲇ * 247.0178565979004, 514.1428527832031 * Ⲇ, Ⲇ * 250.0178565979004), ᐃ.bezierCurveTo(Ⲇ * 510.1428527832031, 252.0178565979004 * Ⲇ, Ⲇ * 509.1428527832031, 266.0178565979004 * Ⲇ, Ⲇ * 518.1428527832031, 266.0178565979004 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆ]), ᐃ.globalAlpha = ⲆΔⲆⵠ, ᐃ.translate(-ΔΔⲆᐃ * Ⲇ, -ᐃⵠⲆⵠ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(518.1428527832031 * Ⲇ, 265.0178565979004 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 524.1428527832031, Ⲇ * 262.0178565979004, Ⲇ * 521.1428527832031, Ⲇ * 247.0178565979004, Ⲇ * 514.1428527832031, Ⲇ * 250.0178565979004), ᐃ.bezierCurveTo(510.1428527832031 * Ⲇ, 252.0178565979004 * Ⲇ, Ⲇ * 509.1428527832031, 266.0178565979004 * Ⲇ, 518.1428527832031 * Ⲇ, 266.0178565979004 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⲆⲆ]), ᐃ.globalAlpha = .5, ᐃ.translate(ⵠᐃⲆᐃ * Ⲇ, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(179.14285278320312 * Ⲇ, Ⲇ * 399.5892858505249), ᐃ.bezierCurveTo(174.14285278320312 * Ⲇ, Ⲇ * 385.5892858505249, Ⲇ * 186.14285278320312, 379.5892858505249 * Ⲇ, 198.14285278320312 * Ⲇ, 379.5892858505249 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 208.14285278320312, Ⲇ * 379.5892858505249, Ⲇ * 206.14285278320312, 391.5892858505249 * Ⲇ, 194.14285278320312 * Ⲇ, 396.5892858505249 * Ⲇ), ᐃ.bezierCurveTo(184.14285278320312 * Ⲇ, Ⲇ * 401.5892858505249, Ⲇ * 182.14285278320312, Ⲇ * 402.5892858505249, 179.14285278320312 * Ⲇ, Ⲇ * 399.5892858505249), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = ᐃⲆⲆ, ᐃ.translate(-3 * Ⲇ, Ⲇ * -ΔⵠᐃⲆ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(179.14285278320312 * Ⲇ, 399.5892858505249 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 174.14285278320312, 385.5892858505249 * Ⲇ, Ⲇ * 186.14285278320312, Ⲇ * 379.5892858505249, Ⲇ * 198.14285278320312, Ⲇ * 379.5892858505249), ᐃ.bezierCurveTo(208.14285278320312 * Ⲇ, 379.5892858505249 * Ⲇ, Ⲇ * 206.14285278320312, 391.5892858505249 * Ⲇ, 194.14285278320312 * Ⲇ, 396.5892858505249 * Ⲇ), ᐃ.bezierCurveTo(184.14285278320312 * Ⲇ, Ⲇ * 401.5892858505249, 182.14285278320312 * Ⲇ, 402.5892858505249 * Ⲇ, 179.14285278320312 * Ⲇ, Ⲇ * 399.5892858505249), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, Ⲇ * ᐃΔΔⵠ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(163.14285278320312 * Ⲇ, Ⲇ * 407.875), ᐃ.bezierCurveTo(Ⲇ * 152.14285278320312, Ⲇ * 405.875, Ⲇ * 156.14285278320312, Ⲇ * 391.875, 163.14285278320312 * Ⲇ, Ⲇ * 385.875), ᐃ.bezierCurveTo(Ⲇ * 170.14285278320312, 381.875 * Ⲇ, 173.14285278320312 * Ⲇ, 385.875 * Ⲇ, 170.14285278320312 * Ⲇ, Ⲇ * 398.875), ᐃ.bezierCurveTo(Ⲇ * 169.14285278320312, 403.875 * Ⲇ, Ⲇ * 165.14285278320312, 408.875 * Ⲇ, 164.14285278320312 * Ⲇ, Ⲇ * 407.875), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ]), ᐃ.globalAlpha = 1, ᐃ.translate(Ⲇ * -ⵠᐃⲆᐃ, Ⲇ * -ΔⵠᐃⲆ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 163.14285278320312, 407.875 * Ⲇ), ᐃ.bezierCurveTo(152.14285278320312 * Ⲇ, 405.875 * Ⲇ, 156.14285278320312 * Ⲇ, 391.875 * Ⲇ, Ⲇ * 163.14285278320312, Ⲇ * 385.875), ᐃ.bezierCurveTo(Ⲇ * 170.14285278320312, 381.875 * Ⲇ, Ⲇ * 173.14285278320312, 385.875 * Ⲇ, Ⲇ * 170.14285278320312, Ⲇ * 398.875), ᐃ.bezierCurveTo(169.14285278320312 * Ⲇ, Ⲇ * 403.875, Ⲇ * 165.14285278320312, 408.875 * Ⲇ, Ⲇ * 164.14285278320312, 407.875 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(3 * Ⲇ, Ⲇⵠᐃᐃ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(78.14285278320312 * Ⲇ, Ⲇ * 71.73211669921875), ᐃ.bezierCurveTo(Ⲇ * 82.14285278320312, Ⲇ * 62.73211669921875, Ⲇ * 88.14285278320312, Ⲇ * 69.73211669921875, Ⲇ * 91.14285278320312, Ⲇ * 79.73211669921875), ᐃ.bezierCurveTo(90.14285278320312 * Ⲇ, Ⲇ * 86.73211669921875, Ⲇ * 79.14285278320312, 83.73211669921875 * Ⲇ, Ⲇ * 78.14285278320312, 71.73211669921875 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ]), ᐃ.globalAlpha = ⵠⲆⲆⲆ, ᐃ.translate(-ᐃΔΔⵠ * Ⲇ, -3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 78.14285278320312, Ⲇ * 71.73211669921875), ᐃ.bezierCurveTo(82.14285278320312 * Ⲇ, 62.73211669921875 * Ⲇ, 88.14285278320312 * Ⲇ, 69.73211669921875 * Ⲇ, 91.14285278320312 * Ⲇ, 79.73211669921875 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 90.14285278320312, Ⲇ * 86.73211669921875, 79.14285278320312 * Ⲇ, 83.73211669921875 * Ⲇ, 78.14285278320312 * Ⲇ, Ⲇ * 71.73211669921875), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⲆⲆ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, ⵠⵠᐃΔ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(385.1428527832031 * Ⲇ, 405.017858505249 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 392.1428527832031, 397.017858505249 * Ⲇ, 406.1428527832031 * Ⲇ, 401.017858505249 * Ⲇ, 409.1428527832031 * Ⲇ, Ⲇ * 418.017858505249), ᐃ.bezierCurveTo(410.1428527832031 * Ⲇ, 426.017858505249 * Ⲇ, 401.1428527832031 * Ⲇ, Ⲇ * 425.017858505249, 388.1428527832031 * Ⲇ, 418.017858505249 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 381.1428527832031, 411.017858505249 * Ⲇ, 383.1428527832031 * Ⲇ, 407.017858505249 * Ⲇ, Ⲇ * 385.1428527832031, 405.017858505249 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔᐃ]), ᐃ.globalAlpha = ⵠⵠⵠΔ, ᐃ.translate(Ⲇ * -3, Ⲇ * -3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 385.1428527832031, Ⲇ * 405.017858505249), ᐃ.bezierCurveTo(Ⲇ * 392.1428527832031, 397.017858505249 * Ⲇ, Ⲇ * 406.1428527832031, Ⲇ * 401.017858505249, Ⲇ * 409.1428527832031, Ⲇ * 418.017858505249), ᐃ.bezierCurveTo(410.1428527832031 * Ⲇ, 426.017858505249 * Ⲇ, Ⲇ * 401.1428527832031, 425.017858505249 * Ⲇ, 388.1428527832031 * Ⲇ, Ⲇ * 418.017858505249), ᐃ.bezierCurveTo(381.1428527832031 * Ⲇ, 411.017858505249 * Ⲇ, Ⲇ * 383.1428527832031, 407.017858505249 * Ⲇ, Ⲇ * 385.1428527832031, 405.017858505249 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 414.1428527832031, 361.4464282989502 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 418.1428527832031, 352.4464282989502 * Ⲇ, Ⲇ * 426.1428527832031, Ⲇ * 353.4464282989502, 437.1428527832031 * Ⲇ, 362.4464282989502 * Ⲇ), ᐃ.bezierCurveTo(441.1428527832031 * Ⲇ, Ⲇ * 366.4464282989502, 439.1428527832031 * Ⲇ, Ⲇ * 373.4464282989502, 428.1428527832031 * Ⲇ, 372.4464282989502 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 416.1428527832031, Ⲇ * 370.4464282989502, Ⲇ * 412.1428527832031, Ⲇ * 367.4464282989502, Ⲇ * 415.1428527832031, 361.4464282989502 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = ⵠⵠᐃ, ᐃ.translate(Ⲇ * -3, Ⲇ * -ᐃⵠᐃⲆ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 414.1428527832031, Ⲇ * 361.4464282989502), ᐃ.bezierCurveTo(418.1428527832031 * Ⲇ, Ⲇ * 352.4464282989502, 426.1428527832031 * Ⲇ, Ⲇ * 353.4464282989502, 437.1428527832031 * Ⲇ, Ⲇ * 362.4464282989502), ᐃ.bezierCurveTo(441.1428527832031 * Ⲇ, 366.4464282989502 * Ⲇ, Ⲇ * 439.1428527832031, Ⲇ * 373.4464282989502, 428.1428527832031 * Ⲇ, 372.4464282989502 * Ⲇ), ᐃ.bezierCurveTo(416.1428527832031 * Ⲇ, Ⲇ * 370.4464282989502, 412.1428527832031 * Ⲇ, Ⲇ * 367.4464282989502, 415.1428527832031 * Ⲇ, Ⲇ * 361.4464282989502), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(3 * Ⲇ, ⲆΔⲆΔ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(453.1428527832031 * Ⲇ, 356.875 * Ⲇ), ᐃ.bezierCurveTo(458.1428527832031 * Ⲇ, 363.875 * Ⲇ, 447.1428527832031 * Ⲇ, Ⲇ * 373.875, 444.1428527832031 * Ⲇ, 369.875 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 441.1428527832031, 361.875 * Ⲇ, Ⲇ * 448.1428527832031, Ⲇ * 352.875, Ⲇ * 453.1428527832031, Ⲇ * 356.875), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = 1, ᐃ.translate(Ⲇ * -3, -3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 453.1428527832031, 356.875 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 458.1428527832031, Ⲇ * 363.875, 447.1428527832031 * Ⲇ, Ⲇ * 373.875, 444.1428527832031 * Ⲇ, 369.875 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 441.1428527832031, Ⲇ * 361.875, 448.1428527832031 * Ⲇ, 352.875 * Ⲇ, 453.1428527832031 * Ⲇ, Ⲇ * 356.875), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(40.142852783203125 * Ⲇ, Ⲇ * 225.1607151031494), ᐃ.bezierCurveTo(52.142852783203125 * Ⲇ, 224.1607151031494 * Ⲇ, 44.142852783203125 * Ⲇ, Ⲇ * 251.1607151031494, 36.142852783203125 * Ⲇ, Ⲇ * 248.1607151031494), ᐃ.bezierCurveTo(25.142852783203125 * Ⲇ, Ⲇ * 245.1607151031494, Ⲇ * 34.142852783203125, 225.1607151031494 * Ⲇ, 41.142852783203125 * Ⲇ, Ⲇ * 225.1607151031494), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⵠ]), ᐃ.globalAlpha = ⵠΔᐃ, ᐃ.translate(Ⲇ * -ⲆΔⲆΔ, -3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(40.142852783203125 * Ⲇ, Ⲇ * 225.1607151031494), ᐃ.bezierCurveTo(Ⲇ * 52.142852783203125, Ⲇ * 224.1607151031494, 44.142852783203125 * Ⲇ, 251.1607151031494 * Ⲇ, 36.142852783203125 * Ⲇ, Ⲇ * 248.1607151031494), ᐃ.bezierCurveTo(25.142852783203125 * Ⲇ, Ⲇ * 245.1607151031494, Ⲇ * 34.142852783203125, 225.1607151031494 * Ⲇ, 41.142852783203125 * Ⲇ, Ⲇ * 225.1607151031494), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃΔ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, ᐃⵠⲆⵠ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 114.14285278320312, 52.4464111328125 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 123.14285278320312, 57.4464111328125 * Ⲇ, Ⲇ * 111.14285278320312, 71.4464111328125 * Ⲇ, 106.14285278320312 * Ⲇ, Ⲇ * 65.4464111328125), ᐃ.bezierCurveTo(101.14285278320312 * Ⲇ, 58.4464111328125 * Ⲇ, Ⲇ * 111.14285278320312, Ⲇ * 51.4464111328125, Ⲇ * 114.14285278320312, Ⲇ * 52.4464111328125), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ]), ᐃ.globalAlpha = 1, ᐃ.translate(Ⲇ * -ΔⵠⲆⲆ, Ⲇ * -3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 114.14285278320312, 52.4464111328125 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 123.14285278320312, 57.4464111328125 * Ⲇ, 111.14285278320312 * Ⲇ, Ⲇ * 71.4464111328125, 106.14285278320312 * Ⲇ, Ⲇ * 65.4464111328125), ᐃ.bezierCurveTo(101.14285278320312 * Ⲇ, 58.4464111328125 * Ⲇ, Ⲇ * 111.14285278320312, 51.4464111328125 * Ⲇ, Ⲇ * 114.14285278320312, Ⲇ * 52.4464111328125), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃΔ]), ᐃ.globalAlpha = .5, ᐃ.translate(3 * Ⲇ, 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(35.142852783203125 * Ⲇ, Ⲇ * 256.3035707473755), ᐃ.bezierCurveTo(Ⲇ * 41.142852783203125, Ⲇ * 263.3035707473755, Ⲇ * 32.142852783203125, Ⲇ * 270.3035707473755, Ⲇ * 27.142852783203125, 270.3035707473755 * Ⲇ), ᐃ.bezierCurveTo(20.142852783203125 * Ⲇ, Ⲇ * 267.3035707473755, Ⲇ * 29.142852783203125, Ⲇ * 252.3035707473755, 35.142852783203125 * Ⲇ, 255.3035707473755 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔΔ]), ᐃ.globalAlpha = ⲆΔⲆⵠ, ᐃ.translate(-ⵠⵠᐃΔ * Ⲇ, -ⵠΔⲆⲆ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 35.142852783203125, Ⲇ * 256.3035707473755), ᐃ.bezierCurveTo(41.142852783203125 * Ⲇ, 263.3035707473755 * Ⲇ, Ⲇ * 32.142852783203125, 270.3035707473755 * Ⲇ, Ⲇ * 27.142852783203125, 270.3035707473755 * Ⲇ), ᐃ.bezierCurveTo(20.142852783203125 * Ⲇ, Ⲇ * 267.3035707473755, Ⲇ * 29.142852783203125, Ⲇ * 252.3035707473755, 35.142852783203125 * Ⲇ, 255.3035707473755 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[Δᐃᐃ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * ᐃΔΔⵠ, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 48.142852783203125, Ⲇ * 266.4464282989502), ᐃ.bezierCurveTo(Ⲇ * 59.142852783203125, 273.4464282989502 * Ⲇ, Ⲇ * 41.142852783203125, 290.4464282989502 * Ⲇ, Ⲇ * 33.142852783203125, Ⲇ * 285.4464282989502), ᐃ.bezierCurveTo(25.142852783203125 * Ⲇ, 277.4464282989502 * Ⲇ, 44.142852783203125 * Ⲇ, Ⲇ * 261.4464282989502, Ⲇ * 48.142852783203125, Ⲇ * 266.4464282989502), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ]), ᐃ.globalAlpha = Δᐃᐃ, ᐃ.translate(-ᐃΔΔΔ * Ⲇ, Ⲇ * -3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(48.142852783203125 * Ⲇ, Ⲇ * 266.4464282989502), ᐃ.bezierCurveTo(59.142852783203125 * Ⲇ, 273.4464282989502 * Ⲇ, 41.142852783203125 * Ⲇ, Ⲇ * 290.4464282989502, 33.142852783203125 * Ⲇ, 285.4464282989502 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 25.142852783203125, Ⲇ * 277.4464282989502, 44.142852783203125 * Ⲇ, 261.4464282989502 * Ⲇ, Ⲇ * 48.142852783203125, 266.4464282989502 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆΔ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(138.14285278320312 * Ⲇ, 385.5892868041992 * Ⲇ), ᐃ.bezierCurveTo(150.14285278320312 * Ⲇ, 387.5892868041992 * Ⲇ, Ⲇ * 140.14285278320312, Ⲇ * 405.5892868041992, 131.14285278320312 * Ⲇ, 402.5892868041992 * Ⲇ), ᐃ.bezierCurveTo(125.14285278320312 * Ⲇ, 397.5892868041992 * Ⲇ, Ⲇ * 134.14285278320312, 385.5892868041992 * Ⲇ, 138.14285278320312 * Ⲇ, 385.5892868041992 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ]), ᐃ.globalAlpha = ⵠⵠⵠΔ, ᐃ.translate(Ⲇ * -3, Ⲇ * -ⵠᐃⵠΔ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 138.14285278320312, 385.5892868041992 * Ⲇ), ᐃ.bezierCurveTo(150.14285278320312 * Ⲇ, 387.5892868041992 * Ⲇ, Ⲇ * 140.14285278320312, Ⲇ * 405.5892868041992, 131.14285278320312 * Ⲇ, 402.5892868041992 * Ⲇ), ᐃ.bezierCurveTo(125.14285278320312 * Ⲇ, Ⲇ * 397.5892868041992, 134.14285278320312 * Ⲇ, 385.5892868041992 * Ⲇ, 138.14285278320312 * Ⲇ, 385.5892868041992 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ]), ᐃ.globalAlpha = .5, ᐃ.translate(ⵠΔⲆΔΔ * Ⲇ, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(218.14285278320312 * Ⲇ, Ⲇ * 394.16071701049805), ᐃ.bezierCurveTo(224.14285278320312 * Ⲇ, Ⲇ * 398.16071701049805, Ⲇ * 222.14285278320312, 403.16071701049805 * Ⲇ, Ⲇ * 214.14285278320312, Ⲇ * 407.16071701049805), ᐃ.bezierCurveTo(204.14285278320312 * Ⲇ, Ⲇ * 407.16071701049805, Ⲇ * 213.14285278320312, 392.16071701049805 * Ⲇ, 218.14285278320312 * Ⲇ, Ⲇ * 394.16071701049805), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = ᐃΔⵠΔ, ᐃ.translate(Ⲇ * -ᐃⲆᐃⲆ, -ΔⵠⲆⲆ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(218.14285278320312 * Ⲇ, 394.16071701049805 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 224.14285278320312, Ⲇ * 398.16071701049805, 222.14285278320312 * Ⲇ, Ⲇ * 403.16071701049805, Ⲇ * 214.14285278320312, Ⲇ * 407.16071701049805), ᐃ.bezierCurveTo(Ⲇ * 204.14285278320312, Ⲇ * 407.16071701049805, 213.14285278320312 * Ⲇ, 392.16071701049805 * Ⲇ, Ⲇ * 218.14285278320312, 394.16071701049805 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔᐃ]), ᐃ.translate(Ⲇ * 50, 100 * Ⲇ)) : (ⲆⲆ.width = Ⲇ * 543, ⲆⲆ.height = Ⲇ * 470, ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, ΔⲆΔΔ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 97.14285278320312, 113.875 * Ⲇ), ᐃ.bezierCurveTo(104.14285278320312 * Ⲇ, 106.875 * Ⲇ, Ⲇ * 113.14285278320312, Ⲇ * 109.875, Ⲇ * 118.14285278320312, Ⲇ * 118.875), ᐃ.bezierCurveTo(119.14285278320312 * Ⲇ, 121.875 * Ⲇ, Ⲇ * 118.14285278320312, Ⲇ * 129.875, 103.14285278320312 * Ⲇ, 124.875 * Ⲇ), ᐃ.bezierCurveTo(94.14285278320312 * Ⲇ, Ⲇ * 120.875, Ⲇ * 95.14285278320312, 117.875 * Ⲇ, 97.14285278320312 * Ⲇ, 113.875 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = ᐃⲆΔ, ᐃ.translate(Ⲇ * -ᐃΔΔΔ, Ⲇ * -3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(97.14285278320312 * Ⲇ, Ⲇ * 113.875), ᐃ.bezierCurveTo(Ⲇ * 104.14285278320312, 106.875 * Ⲇ, 113.14285278320312 * Ⲇ, Ⲇ * 109.875, Ⲇ * 118.14285278320312, Ⲇ * 118.875), ᐃ.bezierCurveTo(Ⲇ * 119.14285278320312, Ⲇ * 121.875, 118.14285278320312 * Ⲇ, 129.875 * Ⲇ, Ⲇ * 103.14285278320312, Ⲇ * 124.875), ᐃ.bezierCurveTo(Ⲇ * 94.14285278320312, Ⲇ * 120.875, 95.14285278320312 * Ⲇ, 117.875 * Ⲇ, Ⲇ * 97.14285278320312, 113.875 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⵠ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, Ⲇ * ᐃⵠⲆⵠ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 88.14285278320312, 138.87498474121094 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 90.14285278320312, Ⲇ * 128.87498474121094, Ⲇ * 104.14285278320312, Ⲇ * 130.87498474121094, 107.14285278320312 * Ⲇ, Ⲇ * 138.87498474121094), ᐃ.bezierCurveTo(109.14285278320312 * Ⲇ, 147.87498474121094 * Ⲇ, 89.14285278320312 * Ⲇ, Ⲇ * 145.87498474121094, 88.14285278320312 * Ⲇ, 138.87498474121094 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ]), ᐃ.globalAlpha = 1, ᐃ.translate(Ⲇ * -3, Ⲇ * -3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 88.14285278320312, 138.87498474121094 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 90.14285278320312, 128.87498474121094 * Ⲇ, Ⲇ * 104.14285278320312, 130.87498474121094 * Ⲇ, Ⲇ * 107.14285278320312, 138.87498474121094 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 109.14285278320312, 147.87498474121094 * Ⲇ, Ⲇ * 89.14285278320312, 145.87498474121094 * Ⲇ, Ⲇ * 88.14285278320312, Ⲇ * 138.87498474121094), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(ᐃⲆᐃⲆ * Ⲇ, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 194.14285278320312, Ⲇ * 44.87498474121094), ᐃ.bezierCurveTo(Ⲇ * 202.14285278320312, 49.87498474121094 * Ⲇ, Ⲇ * 195.14285278320312, 62.87498474121094 * Ⲇ, 187.14285278320312 * Ⲇ, Ⲇ * 60.87498474121094), ᐃ.bezierCurveTo(180.14285278320312 * Ⲇ, Ⲇ * 57.87498474121094, Ⲇ * 190.14285278320312, Ⲇ * 40.87498474121094, Ⲇ * 194.14285278320312, Ⲇ * 44.87498474121094), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = 1, ᐃ.translate(-Ⲇⵠᐃᐃ * Ⲇ, Ⲇ * -ⵠⵠⵠⵠ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(194.14285278320312 * Ⲇ, 44.87498474121094 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 202.14285278320312, 49.87498474121094 * Ⲇ, Ⲇ * 195.14285278320312, Ⲇ * 62.87498474121094, 187.14285278320312 * Ⲇ, 60.87498474121094 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 180.14285278320312, Ⲇ * 57.87498474121094, 190.14285278320312 * Ⲇ, Ⲇ * 40.87498474121094, Ⲇ * 194.14285278320312, 44.87498474121094 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(3 * Ⲇ, ᐃⲆᐃⲆ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 22.142852783203125, Ⲇ * 218.44642639160156), ᐃ.bezierCurveTo(Ⲇ * 31.142852783203125, 205.44642639160156 * Ⲇ, Ⲇ * 49.142852783203125, Ⲇ * 221.44642639160156, Ⲇ * 49.142852783203125, 230.44642639160156 * Ⲇ), ᐃ.bezierCurveTo(44.142852783203125 * Ⲇ, Ⲇ * 243.44642639160156, 14.142852783203125 * Ⲇ, Ⲇ * 228.44642639160156, 22.142852783203125 * Ⲇ, 218.44642639160156 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = ᐃⲆⲆ, ᐃ.translate(Ⲇ * -ΔΔⲆᐃ, Ⲇ * -Ⲇⵠᐃᐃ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 22.142852783203125, Ⲇ * 218.44642639160156), ᐃ.bezierCurveTo(31.142852783203125 * Ⲇ, 205.44642639160156 * Ⲇ, 49.142852783203125 * Ⲇ, 221.44642639160156 * Ⲇ, 49.142852783203125 * Ⲇ, Ⲇ * 230.44642639160156), ᐃ.bezierCurveTo(44.142852783203125 * Ⲇ, 243.44642639160156 * Ⲇ, Ⲇ * 14.142852783203125, 228.44642639160156 * Ⲇ, 22.142852783203125 * Ⲇ, Ⲇ * 218.44642639160156), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, ᐃⵠᐃⲆ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 41.142852783203125, Ⲇ * 249.875), ᐃ.bezierCurveTo(Ⲇ * 33.142852783203125, 255.875 * Ⲇ, Ⲇ * 30.142852783203125, 265.875 * Ⲇ, Ⲇ * 40.142852783203125, Ⲇ * 266.875), ᐃ.bezierCurveTo(49.142852783203125 * Ⲇ, 261.875 * Ⲇ, 53.142852783203125 * Ⲇ, 244.875 * Ⲇ, Ⲇ * 41.142852783203125, Ⲇ * 249.875), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = 1, ᐃ.translate(Ⲇ * -ΔⵠᐃⲆ, -ΔⵠⲆⲆ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(41.142852783203125 * Ⲇ, Ⲇ * 249.875), ᐃ.bezierCurveTo(Ⲇ * 33.142852783203125, Ⲇ * 255.875, 30.142852783203125 * Ⲇ, 265.875 * Ⲇ, 40.142852783203125 * Ⲇ, Ⲇ * 266.875), ᐃ.bezierCurveTo(49.142852783203125 * Ⲇ, 261.875 * Ⲇ, 53.142852783203125 * Ⲇ, Ⲇ * 244.875, Ⲇ * 41.142852783203125, 249.875 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * ⲆΔⲆΔ, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 105.14285278320312, 369.875 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 92.14285278320312, 361.875 * Ⲇ, Ⲇ * 77.14285278320312, 375.875 * Ⲇ, Ⲇ * 79.14285278320312, Ⲇ * 384.875), ᐃ.bezierCurveTo(84.14285278320312 * Ⲇ, 399.875 * Ⲇ, Ⲇ * 114.14285278320312, Ⲇ * 375.875, 104.14285278320312 * Ⲇ, 369.875 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = ΔΔⲆΔ, ᐃ.translate(-ⵠⵠⵠⵠ * Ⲇ, Ⲇ * -ⲆΔⲆΔ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(105.14285278320312 * Ⲇ, Ⲇ * 369.875), ᐃ.bezierCurveTo(92.14285278320312 * Ⲇ, Ⲇ * 361.875, 77.14285278320312 * Ⲇ, Ⲇ * 375.875, 79.14285278320312 * Ⲇ, Ⲇ * 384.875), ᐃ.bezierCurveTo(Ⲇ * 84.14285278320312, 399.875 * Ⲇ, Ⲇ * 114.14285278320312, 375.875 * Ⲇ, Ⲇ * 104.14285278320312, Ⲇ * 369.875), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆΔ]), ᐃ.globalAlpha = .5, ᐃ.translate(3 * Ⲇ, 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(233.14285278320312 * Ⲇ, 43.4464111328125 * Ⲇ), ᐃ.bezierCurveTo(238.14285278320312 * Ⲇ, Ⲇ * 47.4464111328125, 222.14285278320312 * Ⲇ, 73.4464111328125 * Ⲇ, 214.14285278320312 * Ⲇ, Ⲇ * 58.4464111328125), ᐃ.bezierCurveTo(Ⲇ * 211.14285278320312, Ⲇ * 48.4464111328125, Ⲇ * 230.14285278320312, Ⲇ * 35.4464111328125, Ⲇ * 233.14285278320312, 42.4464111328125 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = 1, ᐃ.translate(-3 * Ⲇ, -ⵠᐃⵠΔ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(233.14285278320312 * Ⲇ, Ⲇ * 43.4464111328125), ᐃ.bezierCurveTo(238.14285278320312 * Ⲇ, 47.4464111328125 * Ⲇ, 222.14285278320312 * Ⲇ, 73.4464111328125 * Ⲇ, 214.14285278320312 * Ⲇ, 58.4464111328125 * Ⲇ), ᐃ.bezierCurveTo(211.14285278320312 * Ⲇ, 48.4464111328125 * Ⲇ, Ⲇ * 230.14285278320312, 35.4464111328125 * Ⲇ, 233.14285278320312 * Ⲇ, Ⲇ * 42.4464111328125), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠΔ]), ᐃ.globalAlpha = .5, ᐃ.translate(ⵠΔⲆΔΔ * Ⲇ, ᐃΔΔΔ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 371.1428527832031, 34.73213195800781 * Ⲇ), ᐃ.bezierCurveTo(378.1428527832031 * Ⲇ, 20.732131958007812 * Ⲇ, 395.1428527832031 * Ⲇ, 32.73213195800781 * Ⲇ, Ⲇ * 396.1428527832031, Ⲇ * 42.73213195800781), ᐃ.bezierCurveTo(Ⲇ * 399.1428527832031, 59.73213195800781 * Ⲇ, 369.1428527832031 * Ⲇ, Ⲇ * 43.73213195800781, 372.1428527832031 * Ⲇ, Ⲇ * 34.73213195800781), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]), ᐃ.globalAlpha = ᐃΔⵠΔ, ᐃ.translate(Ⲇ * -ⵠⵠᐃΔ, -ⵠᐃⵠΔ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(371.1428527832031 * Ⲇ, 34.73213195800781 * Ⲇ), ᐃ.bezierCurveTo(378.1428527832031 * Ⲇ, Ⲇ * 20.732131958007812, 395.1428527832031 * Ⲇ, Ⲇ * 32.73213195800781, Ⲇ * 396.1428527832031, 42.73213195800781 * Ⲇ), ᐃ.bezierCurveTo(399.1428527832031 * Ⲇ, Ⲇ * 59.73213195800781, Ⲇ * 369.1428527832031, Ⲇ * 43.73213195800781, Ⲇ * 372.1428527832031, 34.73213195800781 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(ⲆΔⲆΔ * Ⲇ, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 117.14285278320312, Ⲇ * 392.5892868041992), ᐃ.bezierCurveTo(115.14285278320312 * Ⲇ, Ⲇ * 384.5892868041992, 109.14285278320312 * Ⲇ, 383.5892868041992 * Ⲇ, Ⲇ * 103.14285278320312, Ⲇ * 384.5892868041992), ᐃ.bezierCurveTo(Ⲇ * 95.14285278320312, 389.5892868041992 * Ⲇ, 97.14285278320312 * Ⲇ, 393.5892868041992 * Ⲇ, 107.14285278320312 * Ⲇ, 396.5892868041992 * Ⲇ), ᐃ.bezierCurveTo(114.14285278320312 * Ⲇ, 396.5892868041992 * Ⲇ, 118.14285278320312 * Ⲇ, Ⲇ * 393.5892868041992, 116.14285278320312 * Ⲇ, 391.5892868041992 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = ⵠΔΔ, ᐃ.translate(-ᐃⲆᐃⲆ * Ⲇ, -3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 117.14285278320312, Ⲇ * 392.5892868041992), ᐃ.bezierCurveTo(Ⲇ * 115.14285278320312, 384.5892868041992 * Ⲇ, 109.14285278320312 * Ⲇ, Ⲇ * 383.5892868041992, Ⲇ * 103.14285278320312, 384.5892868041992 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 95.14285278320312, 389.5892868041992 * Ⲇ, Ⲇ * 97.14285278320312, Ⲇ * 393.5892868041992, 107.14285278320312 * Ⲇ, 396.5892868041992 * Ⲇ), ᐃ.bezierCurveTo(114.14285278320312 * Ⲇ, Ⲇ * 396.5892868041992, 118.14285278320312 * Ⲇ, 393.5892868041992 * Ⲇ, Ⲇ * 116.14285278320312, 391.5892868041992 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 122.14285278320312, 403.7321472167969 * Ⲇ), ᐃ.bezierCurveTo(132.14285278320312 * Ⲇ, 399.7321472167969 * Ⲇ, 133.14285278320312 * Ⲇ, 418.7321472167969 * Ⲇ, Ⲇ * 129.14285278320312, 419.7321472167969 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 119.14285278320312, Ⲇ * 420.7321472167969, Ⲇ * 118.14285278320312, Ⲇ * 402.7321472167969, Ⲇ * 123.14285278320312, 403.7321472167969 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = 1, ᐃ.translate(Ⲇ * -3, Ⲇ * -ⵠⵠⵠⵠ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(122.14285278320312 * Ⲇ, 403.7321472167969 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 132.14285278320312, Ⲇ * 399.7321472167969, 133.14285278320312 * Ⲇ, 418.7321472167969 * Ⲇ, 129.14285278320312 * Ⲇ, 419.7321472167969 * Ⲇ), ᐃ.bezierCurveTo(119.14285278320312 * Ⲇ, 420.7321472167969 * Ⲇ, 118.14285278320312 * Ⲇ, 402.7321472167969 * Ⲇ, Ⲇ * 123.14285278320312, Ⲇ * 403.7321472167969), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(317.1428527832031 * Ⲇ, Ⲇ * 417.5892868041992), ᐃ.bezierCurveTo(Ⲇ * 333.1428527832031, Ⲇ * 421.5892868041992, Ⲇ * 299.1428527832031, Ⲇ * 455.5892868041992, Ⲇ * 294.1428527832031, 438.5892868041992 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 289.1428527832031, Ⲇ * 423.5892868041992, Ⲇ * 307.1428527832031, Ⲇ * 414.5892868041992, 317.1428527832031 * Ⲇ, 417.5892868041992 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ]), ᐃ.globalAlpha = ᐃⲆΔ, ᐃ.translate(-ᐃΔΔΔ * Ⲇ, -ᐃⵠⲆⵠ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 317.1428527832031, 417.5892868041992 * Ⲇ), ᐃ.bezierCurveTo(333.1428527832031 * Ⲇ, Ⲇ * 421.5892868041992, 299.1428527832031 * Ⲇ, 455.5892868041992 * Ⲇ, Ⲇ * 294.1428527832031, 438.5892868041992 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 289.1428527832031, 423.5892868041992 * Ⲇ, Ⲇ * 307.1428527832031, 414.5892868041992 * Ⲇ, Ⲇ * 317.1428527832031, 417.5892868041992 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(ΔⵠᐃⲆ * Ⲇ, ᐃΔΔⵠ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 322.1428527832031, 437.30357360839844 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 330.1428527832031, Ⲇ * 431.30357360839844, Ⲇ * 336.1428527832031, Ⲇ * 440.30357360839844, 336.1428527832031 * Ⲇ, Ⲇ * 448.30357360839844), ᐃ.bezierCurveTo(Ⲇ * 334.1428527832031, Ⲇ * 454.30357360839844, 316.1428527832031 * Ⲇ, Ⲇ * 447.30357360839844, Ⲇ * 323.1428527832031, 437.30357360839844 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ]), ᐃ.globalAlpha = ⲆⵠⲆ, ᐃ.translate(-3 * Ⲇ, -ⵠⵠⵠⵠ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(322.1428527832031 * Ⲇ, Ⲇ * 437.30357360839844), ᐃ.bezierCurveTo(Ⲇ * 330.1428527832031, Ⲇ * 431.30357360839844, 336.1428527832031 * Ⲇ, Ⲇ * 440.30357360839844, 336.1428527832031 * Ⲇ, Ⲇ * 448.30357360839844), ᐃ.bezierCurveTo(Ⲇ * 334.1428527832031, Ⲇ * 454.30357360839844, 316.1428527832031 * Ⲇ, Ⲇ * 447.30357360839844, Ⲇ * 323.1428527832031, Ⲇ * 437.30357360839844), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆ]), ᐃ.globalAlpha = .5, ᐃ.translate(3 * Ⲇ, 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 438.1428527832031, 358.5892868041992 * Ⲇ), ᐃ.bezierCurveTo(455.1428527832031 * Ⲇ, Ⲇ * 351.5892868041992, Ⲇ * 467.1428527832031, 371.5892868041992 * Ⲇ, Ⲇ * 455.1428527832031, Ⲇ * 374.5892868041992), ᐃ.bezierCurveTo(Ⲇ * 442.1428527832031, Ⲇ * 377.5892868041992, Ⲇ * 429.1428527832031, Ⲇ * 361.5892868041992, 438.1428527832031 * Ⲇ, Ⲇ * 358.5892868041992), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = ⵠⵠⵠΔ, ᐃ.translate(Ⲇ * -ᐃΔΔΔ, Ⲇ * -ᐃΔΔⵠ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(438.1428527832031 * Ⲇ, Ⲇ * 358.5892868041992), ᐃ.bezierCurveTo(455.1428527832031 * Ⲇ, 351.5892868041992 * Ⲇ, 467.1428527832031 * Ⲇ, Ⲇ * 371.5892868041992, Ⲇ * 455.1428527832031, Ⲇ * 374.5892868041992), ᐃ.bezierCurveTo(442.1428527832031 * Ⲇ, 377.5892868041992 * Ⲇ, Ⲇ * 429.1428527832031, Ⲇ * 361.5892868041992, Ⲇ * 438.1428527832031, Ⲇ * 358.5892868041992), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * ᐃᐃΔⵠ, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 423.1428527832031, 363.16071701049805 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 433.1428527832031, Ⲇ * 362.16071701049805, Ⲇ * 433.1428527832031, 374.16071701049805 * Ⲇ, 421.1428527832031 * Ⲇ, Ⲇ * 382.16071701049805), ᐃ.bezierCurveTo(413.1428527832031 * Ⲇ, 383.16071701049805 * Ⲇ, 413.1428527832031 * Ⲇ, 368.16071701049805 * Ⲇ, 423.1428527832031 * Ⲇ, Ⲇ * 363.16071701049805), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠⲆ]), ᐃ.globalAlpha = ⵠΔⲆ, ᐃ.translate(Ⲇ * -ⵠⵠᐃΔ, Ⲇ * -ᐃⵠᐃⲆ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 423.1428527832031, 363.16071701049805 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 433.1428527832031, Ⲇ * 362.16071701049805, 433.1428527832031 * Ⲇ, Ⲇ * 374.16071701049805, 421.1428527832031 * Ⲇ, Ⲇ * 382.16071701049805), ᐃ.bezierCurveTo(413.1428527832031 * Ⲇ, 383.16071701049805 * Ⲇ, 413.1428527832031 * Ⲇ, Ⲇ * 368.16071701049805, 423.1428527832031 * Ⲇ, 363.16071701049805 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(431.1428527832031 * Ⲇ, Ⲇ * 333.0178565979004), ᐃ.bezierCurveTo(447.1428527832031 * Ⲇ, Ⲇ * 330.0178565979004, Ⲇ * 448.1428527832031, Ⲇ * 340.0178565979004, Ⲇ * 447.1428527832031, Ⲇ * 343.0178565979004), ᐃ.bezierCurveTo(Ⲇ * 445.1428527832031, 351.0178565979004 * Ⲇ, 415.1428527832031 * Ⲇ, 343.0178565979004 * Ⲇ, Ⲇ * 431.1428527832031, 333.0178565979004 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = ᐃⲆΔ, ᐃ.translate(-ΔⵠᐃⲆ * Ⲇ, Ⲇ * -ⵠΔⲆΔΔ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(431.1428527832031 * Ⲇ, 333.0178565979004 * Ⲇ), ᐃ.bezierCurveTo(447.1428527832031 * Ⲇ, 330.0178565979004 * Ⲇ, Ⲇ * 448.1428527832031, 340.0178565979004 * Ⲇ, 447.1428527832031 * Ⲇ, Ⲇ * 343.0178565979004), ᐃ.bezierCurveTo(Ⲇ * 445.1428527832031, 351.0178565979004 * Ⲇ, 415.1428527832031 * Ⲇ, 343.0178565979004 * Ⲇ, 431.1428527832031 * Ⲇ, 333.0178565979004 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(ⵠᐃⲆᐃ * Ⲇ, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 486.1428527832031, Ⲇ * 272.44642639160156), ᐃ.bezierCurveTo(493.1428527832031 * Ⲇ, Ⲇ * 260.44642639160156, 519.1428527832031 * Ⲇ, 277.44642639160156 * Ⲇ, 511.1428527832031 * Ⲇ, 289.44642639160156 * Ⲇ), ᐃ.bezierCurveTo(503.1428527832031 * Ⲇ, 297.44642639160156 * Ⲇ, Ⲇ * 483.1428527832031, 277.44642639160156 * Ⲇ, 486.1428527832031 * Ⲇ, Ⲇ * 273.44642639160156), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = ⲆΔᐃ, ᐃ.translate(Ⲇ * -ᐃΔᐃⲆ, -3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 486.1428527832031, 272.44642639160156 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 493.1428527832031, 260.44642639160156 * Ⲇ, Ⲇ * 519.1428527832031, Ⲇ * 277.44642639160156, 511.1428527832031 * Ⲇ, 289.44642639160156 * Ⲇ), ᐃ.bezierCurveTo(503.1428527832031 * Ⲇ, 297.44642639160156 * Ⲇ, 483.1428527832031 * Ⲇ, 277.44642639160156 * Ⲇ, 486.1428527832031 * Ⲇ, 273.44642639160156 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⵠ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * 3, 3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(503.1428527832031 * Ⲇ, Ⲇ * 245.01785278320312), ᐃ.bezierCurveTo(Ⲇ * 516.1428527832031, Ⲇ * 247.01785278320312, 513.1428527832031 * Ⲇ, 264.0178527832031 * Ⲇ, 509.1428527832031 * Ⲇ, Ⲇ * 265.0178527832031), ᐃ.bezierCurveTo(Ⲇ * 499.1428527832031, 268.0178527832031 * Ⲇ, Ⲇ * 494.1428527832031, 244.01785278320312 * Ⲇ, 504.1428527832031 * Ⲇ, 245.01785278320312 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆⲆ]), ᐃ.globalAlpha = ⵠΔⲆ, ᐃ.translate(-3 * Ⲇ, -ΔⲆΔΔ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(503.1428527832031 * Ⲇ, Ⲇ * 245.01785278320312), ᐃ.bezierCurveTo(Ⲇ * 516.1428527832031, Ⲇ * 247.01785278320312, 513.1428527832031 * Ⲇ, 264.0178527832031 * Ⲇ, 509.1428527832031 * Ⲇ, Ⲇ * 265.0178527832031), ᐃ.bezierCurveTo(Ⲇ * 499.1428527832031, Ⲇ * 268.0178527832031, Ⲇ * 494.1428527832031, Ⲇ * 244.01785278320312, 504.1428527832031 * Ⲇ, 245.01785278320312 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⲆⵠ]), ᐃ.globalAlpha = .5, ᐃ.translate(ΔⵠⲆⲆ * Ⲇ, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 518.1428527832031, Ⲇ * 179.73213958740234), ᐃ.bezierCurveTo(529.1428527832031 * Ⲇ, Ⲇ * 181.73213958740234, Ⲇ * 514.1428527832031, 212.73213958740234 * Ⲇ, Ⲇ * 505.1428527832031, Ⲇ * 200.73213958740234), ᐃ.bezierCurveTo(Ⲇ * 499.1428527832031, 186.73213958740234 * Ⲇ, Ⲇ * 515.1428527832031, 177.73213958740234 * Ⲇ, 518.1428527832031 * Ⲇ, Ⲇ * 179.73213958740234), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ]), ᐃ.globalAlpha = ⵠⵠⵠΔ, ᐃ.translate(Ⲇ * -3, -3 * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(518.1428527832031 * Ⲇ, Ⲇ * 179.73213958740234), ᐃ.bezierCurveTo(Ⲇ * 529.1428527832031, Ⲇ * 181.73213958740234, Ⲇ * 514.1428527832031, Ⲇ * 212.73213958740234, 505.1428527832031 * Ⲇ, Ⲇ * 200.73213958740234), ᐃ.bezierCurveTo(499.1428527832031 * Ⲇ, Ⲇ * 186.73213958740234, Ⲇ * 515.1428527832031, Ⲇ * 177.73213958740234, 518.1428527832031 * Ⲇ, 179.73213958740234 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * ⲆΔⲆΔ, Ⲇ * ᐃᐃΔⵠ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 438.1428527832031, 22.16070556640625 * Ⲇ), ᐃ.bezierCurveTo(446.1428527832031 * Ⲇ, Ⲇ * 27.16070556640625, 422.1428527832031 * Ⲇ, Ⲇ * 54.16070556640625, 414.1428527832031 * Ⲇ, Ⲇ * 40.16070556640625), ᐃ.bezierCurveTo(Ⲇ * 409.1428527832031, Ⲇ * 27.16070556640625, 430.1428527832031 * Ⲇ, Ⲇ * 15.16070556640625, 438.1428527832031 * Ⲇ, 22.16070556640625 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ]), ᐃ.globalAlpha = Δᐃᐃ, ᐃ.translate(Ⲇ * -3, -ᐃΔΔⵠ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(438.1428527832031 * Ⲇ, 22.16070556640625 * Ⲇ), ᐃ.bezierCurveTo(446.1428527832031 * Ⲇ, 27.16070556640625 * Ⲇ, Ⲇ * 422.1428527832031, 54.16070556640625 * Ⲇ, Ⲇ * 414.1428527832031, Ⲇ * 40.16070556640625), ᐃ.bezierCurveTo(409.1428527832031 * Ⲇ, Ⲇ * 27.16070556640625, Ⲇ * 430.1428527832031, Ⲇ * 15.16070556640625, 438.1428527832031 * Ⲇ, Ⲇ * 22.16070556640625), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃ]), ᐃ.globalAlpha = .5, ᐃ.translate(Ⲇ * ⲆΔⲆΔ, Ⲇ * 3), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(406.1428527832031 * Ⲇ, 11.16070556640625 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 418.1428527832031, 14.16070556640625 * Ⲇ, Ⲇ * 411.1428527832031, Ⲇ * 27.16070556640625, Ⲇ * 403.1428527832031, Ⲇ * 30.16070556640625), ᐃ.bezierCurveTo(395.1428527832031 * Ⲇ, 31.16070556640625 * Ⲇ, Ⲇ * 391.1428527832031, 16.16070556640625 * Ⲇ, 406.1428527832031 * Ⲇ, 10.16070556640625 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]), ᐃ.globalAlpha = 1, ᐃ.translate(-3 * Ⲇ, -ⲆΔⲆΔ * Ⲇ), ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(406.1428527832031 * Ⲇ, Ⲇ * 11.16070556640625), ᐃ.bezierCurveTo(Ⲇ * 418.1428527832031, 14.16070556640625 * Ⲇ, Ⲇ * 411.1428527832031, 27.16070556640625 * Ⲇ, Ⲇ * 403.1428527832031, 30.16070556640625 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 395.1428527832031, Ⲇ * 31.16070556640625, 391.1428527832031 * Ⲇ, Ⲇ * 16.16070556640625, Ⲇ * 406.1428527832031, 10.16070556640625 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[1]), ᐃ.translate(100 * Ⲇ, ⵠⲆᐃⵠⲆ * Ⲇ));
		ᐃ.globalAlpha = ⲆΔᐃ;
		ᐃ.translate(Ⲇ * -3, Ⲇ * -3);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(271 * Ⲇ, Ⲇ * 111);
		ᐃ.bezierCurveTo(259 * Ⲇ, 110 * Ⲇ, 258 * Ⲇ, 99 * Ⲇ, Ⲇ * 265, Ⲇ * 95);
		ᐃ.bezierCurveTo(Ⲇ * 276, Ⲇ * 91, Ⲇ * 279, Ⲇ * ⵠⲆᐃⵠⲆ, 275 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(274 * Ⲇ, 109 * Ⲇ, 273 * Ⲇ, 110 * Ⲇ, Ⲇ * 271, Ⲇ * 111);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃΔᐃ], ᐃⲆ[3], ΔΔᐃᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 169, Ⲇ * 121);
		ᐃ.bezierCurveTo(Ⲇ * 159, 129 * Ⲇ, Ⲇ * 149, 126 * Ⲇ, 144 * Ⲇ, 114 * Ⲇ);
		ᐃ.bezierCurveTo(142 * Ⲇ, Ⲇ * 102, Ⲇ * 149, Ⲇ * 98, 163 * Ⲇ, 96 * Ⲇ);
		ᐃ.bezierCurveTo(175 * Ⲇ, 98 * Ⲇ, 176 * Ⲇ, Ⲇ * 115, Ⲇ * 169, Ⲇ * 121);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃⵠ], ᐃⲆ[3], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 213, Ⲇ * 150);
		ᐃ.bezierCurveTo(206 * Ⲇ, Ⲇ * 134, 216 * Ⲇ, Ⲇ * 120, 235 * Ⲇ, Ⲇ * 129);
		ᐃ.bezierCurveTo(247 * Ⲇ, 139 * Ⲇ, Ⲇ * 242, Ⲇ * 146, 237 * Ⲇ, 154 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 226, 162 * Ⲇ, Ⲇ * 218, Ⲇ * 159, Ⲇ * 213, 150 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⲆ], ᐃⲆ[3], Ⲇ * Δᐃᐃⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 236, Ⲇ * 169);
		ᐃ.bezierCurveTo(247 * Ⲇ, 166 * Ⲇ, Ⲇ * 250, Ⲇ * 172, Ⲇ * 247, 181 * Ⲇ);
		ᐃ.bezierCurveTo(242 * Ⲇ, Ⲇ * 186, 241 * Ⲇ, Ⲇ * 181, 242 * Ⲇ, 182 * Ⲇ);
		ᐃ.bezierCurveTo(241 * Ⲇ, Ⲇ * 178, Ⲇ * 240, Ⲇ * 179, 239 * Ⲇ, Ⲇ * 181);
		ᐃ.bezierCurveTo(Ⲇ * 240, Ⲇ * 184, 237 * Ⲇ, 186 * Ⲇ, Ⲇ * 233, 181 * Ⲇ);
		ᐃ.bezierCurveTo(230 * Ⲇ, Ⲇ * 173, 233 * Ⲇ, Ⲇ * 169, Ⲇ * 236, 169 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[3], Ⲇ * ᐃⲆᐃⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(163 * Ⲇ, Ⲇ * 170);
		ᐃ.bezierCurveTo(Ⲇ * 176, Ⲇ * 165, 180 * Ⲇ, Ⲇ * 172, 181 * Ⲇ, 181 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 182, 189 * Ⲇ, 178 * Ⲇ, Ⲇ * 192, 174 * Ⲇ, Ⲇ * 188);
		ᐃ.bezierCurveTo(172 * Ⲇ, Ⲇ * 183, Ⲇ * 170, Ⲇ * 184, 170 * Ⲇ, 188 * Ⲇ);
		ᐃ.bezierCurveTo(176 * Ⲇ, Ⲇ * 194, Ⲇ * 165, 196 * Ⲇ, 162 * Ⲇ, 190 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 152, 181 * Ⲇ, Ⲇ * 157, Ⲇ * 173, 163 * Ⲇ, Ⲇ * 170);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[Ⲇⵠᐃᐃ], Ⲇ * 2);
		ᐃ.scale(.05, .05);
		ᐃ.translate(5e3 * Ⲇ, Ⲇ * 1900);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 273, Ⲇ * 46.546875);
		ᐃ.bezierCurveTo(Ⲇ * 353, Ⲇ * 131.546875, Ⲇ * 303, Ⲇ * 213.546875, 272 * Ⲇ, 236.546875 * Ⲇ);
		ᐃ.bezierCurveTo(203 * Ⲇ, 179.546875 * Ⲇ, Ⲇ * 236, 84.546875 * Ⲇ, 273 * Ⲇ, Ⲇ * 47.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ᐃΔᐃⲆⲆ], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 467, Ⲇ * 257.546875);
		ᐃ.bezierCurveTo(Ⲇ * 369, 194.546875 * Ⲇ, Ⲇ * 325, 236.546875 * Ⲇ, Ⲇ * 291, Ⲇ * 271.546875);
		ᐃ.bezierCurveTo(Ⲇ * 371, 335.546875 * Ⲇ, 427 * Ⲇ, 313.546875 * Ⲇ, Ⲇ * 467, Ⲇ * 258.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], ΔⲆᐃⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(269 * Ⲇ, 275.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 343, Ⲇ * 356.546875, 355 * Ⲇ, 407.546875 * Ⲇ, Ⲇ * 323, 472.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 224, 451.546875 * Ⲇ, 238 * Ⲇ, Ⲇ * 326.546875, Ⲇ * 270, 275.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], Ⲇ * ᐃᐃᐃᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 260, Ⲇ * 267.546875);
		ᐃ.bezierCurveTo(Ⲇ * 134, Ⲇ * 221.546875, Ⲇ * 89, 256.546875 * Ⲇ, 60 * Ⲇ, 295.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 116, 357.546875 * Ⲇ, Ⲇ * 242, 344.546875 * Ⲇ, Ⲇ * 260, 267.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ΔΔⵠΔ], Ⲇ * ⵠΔᐃΔᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 124, Ⲇ * 123.546875);
		ᐃ.bezierCurveTo(ⲆⵠΔᐃᐃᐃⲆ * Ⲇ, 140.546875 * Ⲇ, Ⲇ * 265, Ⲇ * 234.546875, 267 * Ⲇ, Ⲇ * 269.546875);
		ᐃ.bezierCurveTo(Ⲇ * 159, 283.546875 * Ⲇ, Ⲇ * 127, Ⲇ * 192.546875, 124 * Ⲇ, Ⲇ * 124.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠⲆⵠ], ᐃⲆ[7], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(267 * Ⲇ, Ⲇ * 268.546875);
		ᐃ.bezierCurveTo(Ⲇ * 265, 170.546875 * Ⲇ, 364 * Ⲇ, Ⲇ * 127.546875, 407 * Ⲇ, Ⲇ * 132.546875);
		ᐃ.bezierCurveTo(427 * Ⲇ, Ⲇ * 204.546875, 341 * Ⲇ, 277.546875 * Ⲇ, Ⲇ * 268, 271.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[7], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(270 * Ⲇ, Ⲇ * 269.546875);
		ᐃ.bezierCurveTo(Ⲇ * 370, Ⲇ * 251.546875, 410 * Ⲇ, 328.546875 * Ⲇ, Ⲇ * 420, 399.546875 * Ⲇ);
		ᐃ.bezierCurveTo(292 * Ⲇ, Ⲇ * 412.546875, Ⲇ * 275, 313.546875 * Ⲇ, 269 * Ⲇ, Ⲇ * 272.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃⵠΔΔ], ᐃⲆ[ⲆᐃᐃΔΔ], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 273, Ⲇ * 266.546875);
		ᐃ.bezierCurveTo(Ⲇ * 291, Ⲇ * 370.546875, 235 * Ⲇ, 428.546875 * Ⲇ, Ⲇ * 173, 451.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 124, 365.546875 * Ⲇ, Ⲇ * 217, Ⲇ * 274.546875, 272 * Ⲇ, 265.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[ⵠⵠᐃΔᐃ], ΔⲆⲆⵠ * Ⲇ);
		ᐃΔⵠ(ᐃ, 266 * Ⲇ, Ⲇ * 251.546875, 19.1049731745428 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔⲆⲆ], ᐃⲆ[ᐃⲆⲆⵠⲆⵠⵠ], Ⲇ * ⲆⲆᐃⲆ);
		ᐃΔⵠ(ᐃ, 292 * Ⲇ, Ⲇ * 274.546875, Ⲇ * 15.556349186104045);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔΔⲆⵠ], ᐃⲆ[Ⲇᐃᐃⵠⵠ], Ⲇ * ᐃΔⲆⵠ);
		ᐃΔⵠ(ᐃ, 258 * Ⲇ, 291.546875 * Ⲇ, Ⲇ * 17.029386365926403);
		ᐃⵠ(ᐃ, ᐃⲆ[8], ᐃⲆ[9], Ⲇ * Δᐃᐃⵠ);
		ᐃ.scale(1.4, 1.4);
		ᐃ.translate(-700 * Ⲇ, 280 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 273, Ⲇ * 46.546875);
		ᐃ.bezierCurveTo(353 * Ⲇ, Ⲇ * 131.546875, Ⲇ * 303, Ⲇ * 213.546875, Ⲇ * 272, 236.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 203, 179.546875 * Ⲇ, 236 * Ⲇ, Ⲇ * 84.546875, Ⲇ * 273, Ⲇ * 47.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⲆⵠ], ᐃⲆ[ᐃΔᐃⲆⲆ], Ⲇ * ⲆⲆΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(467 * Ⲇ, 257.546875 * Ⲇ);
		ᐃ.bezierCurveTo(369 * Ⲇ, 194.546875 * Ⲇ, 325 * Ⲇ, 236.546875 * Ⲇ, 291 * Ⲇ, 271.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 371, Ⲇ * 335.546875, Ⲇ * 427, Ⲇ * 313.546875, 467 * Ⲇ, 258.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ⲆΔⲆⲆ], ⵠⲆⵠΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(269 * Ⲇ, Ⲇ * 275.546875);
		ᐃ.bezierCurveTo(Ⲇ * 343, 356.546875 * Ⲇ, 355 * Ⲇ, Ⲇ * 407.546875, Ⲇ * 323, 472.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 224, Ⲇ * 451.546875, Ⲇ * 238, Ⲇ * 326.546875, 270 * Ⲇ, 275.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔⲆΔ], ᐃⲆ[ΔΔⵠΔ], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(260 * Ⲇ, Ⲇ * 267.546875);
		ᐃ.bezierCurveTo(134 * Ⲇ, Ⲇ * 221.546875, 89 * Ⲇ, Ⲇ * 256.546875, 60 * Ⲇ, 295.546875 * Ⲇ);
		ᐃ.bezierCurveTo(116 * Ⲇ, Ⲇ * 357.546875, Ⲇ * 242, 344.546875 * Ⲇ, 260 * Ⲇ, 267.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⲆⵠ], ᐃⲆ[5], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 124, Ⲇ * 123.546875);
		ᐃ.bezierCurveTo(255 * Ⲇ, 140.546875 * Ⲇ, Ⲇ * 265, 234.546875 * Ⲇ, 267 * Ⲇ, 269.546875 * Ⲇ);
		ᐃ.bezierCurveTo(159 * Ⲇ, 283.546875 * Ⲇ, 127 * Ⲇ, 192.546875 * Ⲇ, 124 * Ⲇ, Ⲇ * 124.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[7], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(267 * Ⲇ, Ⲇ * 268.546875);
		ᐃ.bezierCurveTo(265 * Ⲇ, Ⲇ * 170.546875, Ⲇ * 364, Ⲇ * 127.546875, Ⲇ * 407, 132.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 427, Ⲇ * 204.546875, 341 * Ⲇ, Ⲇ * 277.546875, 268 * Ⲇ, 271.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔⲆΔ], ᐃⲆ[ᐃΔΔⲆⲆ], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 270, 269.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 370, Ⲇ * 251.546875, 410 * Ⲇ, 328.546875 * Ⲇ, 420 * Ⲇ, 399.546875 * Ⲇ);
		ᐃ.bezierCurveTo(292 * Ⲇ, Ⲇ * 412.546875, 275 * Ⲇ, 313.546875 * Ⲇ, 269 * Ⲇ, 272.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[7], ⵠΔᐃΔᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(273 * Ⲇ, 266.546875 * Ⲇ);
		ᐃ.bezierCurveTo(291 * Ⲇ, Ⲇ * 370.546875, Ⲇ * 235, 428.546875 * Ⲇ, Ⲇ * 173, Ⲇ * 451.546875);
		ᐃ.bezierCurveTo(124 * Ⲇ, 365.546875 * Ⲇ, Ⲇ * 217, Ⲇ * 274.546875, 272 * Ⲇ, Ⲇ * 265.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃⵠΔΔ], ᐃⲆ[ⵠⵠΔⲆᐃΔⵠ], Ⲇ * ᐃⵠΔⲆ);
		ᐃΔⵠ(ᐃ, Ⲇ * 266, 251.546875 * Ⲇ, 19.1049731745428 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆⵠⲆ], ᐃⲆ[ⵠΔᐃⵠΔᐃⵠ], Ⲇ * 2);
		ᐃΔⵠ(ᐃ, Ⲇ * 292, 274.546875 * Ⲇ, 15.556349186104045 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆᐃΔΔ], ᐃⲆ[9], 2 * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 258, Ⲇ * 291.546875, Ⲇ * 17.029386365926403);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔⲆⲆ], ᐃⲆ[ᐃⲆⲆⵠⲆⵠⵠ], Ⲇ * 2);
		ᐃ.translate(Ⲇ * -900, -200 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 273, 46.546875 * Ⲇ);
		ᐃ.bezierCurveTo(353 * Ⲇ, Ⲇ * 131.546875, 303 * Ⲇ, 213.546875 * Ⲇ, Ⲇ * 272, Ⲇ * 236.546875);
		ᐃ.bezierCurveTo(203 * Ⲇ, Ⲇ * 179.546875, 236 * Ⲇ, 84.546875 * Ⲇ, 273 * Ⲇ, Ⲇ * 47.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔᐃᐃⲆ], ᐃⲆ[ⲆΔⲆⲆ], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 467, Ⲇ * 257.546875);
		ᐃ.bezierCurveTo(Ⲇ * 369, Ⲇ * 194.546875, 325 * Ⲇ, Ⲇ * 236.546875, 291 * Ⲇ, 271.546875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 371, Ⲇ * 335.546875, Ⲇ * 427, 313.546875 * Ⲇ, Ⲇ * 467, 258.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔΔΔ], ᐃⲆ[ΔⲆΔᐃⵠ], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 269, Ⲇ * 275.546875);
		ᐃ.bezierCurveTo(Ⲇ * 343, Ⲇ * 356.546875, Ⲇ * 355, Ⲇ * 407.546875, Ⲇ * 323, Ⲇ * 472.546875);
		ᐃ.bezierCurveTo(Ⲇ * 224, 451.546875 * Ⲇ, Ⲇ * 238, 326.546875 * Ⲇ, 270 * Ⲇ, Ⲇ * 275.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], Ⲇ * ⵠⲆⵠΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(260 * Ⲇ, Ⲇ * 267.546875);
		ᐃ.bezierCurveTo(Ⲇ * 134, Ⲇ * 221.546875, 89 * Ⲇ, 256.546875 * Ⲇ, 60 * Ⲇ, Ⲇ * 295.546875);
		ᐃ.bezierCurveTo(Ⲇ * 116, 357.546875 * Ⲇ, 242 * Ⲇ, Ⲇ * 344.546875, Ⲇ * 260, 267.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔᐃᐃⲆ], ᐃⲆ[ⵠᐃᐃⵠᐃ], ⵠΔᐃⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(124 * Ⲇ, Ⲇ * 123.546875);
		ᐃ.bezierCurveTo(ⲆΔΔᐃⲆᐃΔ * Ⲇ, 140.546875 * Ⲇ, Ⲇ * 265, Ⲇ * 234.546875, 267 * Ⲇ, Ⲇ * 269.546875);
		ᐃ.bezierCurveTo(159 * Ⲇ, Ⲇ * 283.546875, Ⲇ * 127, 192.546875 * Ⲇ, 124 * Ⲇ, Ⲇ * 124.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃⵠΔΔ], ᐃⲆ[ⲆᐃᐃΔΔ], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 267, Ⲇ * 268.546875);
		ᐃ.bezierCurveTo(Ⲇ * 265, 170.546875 * Ⲇ, 364 * Ⲇ, Ⲇ * 127.546875, 407 * Ⲇ, 132.546875 * Ⲇ);
		ᐃ.bezierCurveTo(427 * Ⲇ, 204.546875 * Ⲇ, 341 * Ⲇ, 277.546875 * Ⲇ, 268 * Ⲇ, Ⲇ * 271.546875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[7], 2 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 270, Ⲇ * 269.546875);
		ᐃ.bezierCurveTo(370 * Ⲇ, 251.546875 * Ⲇ, 410 * Ⲇ, 328.546875 * Ⲇ, Ⲇ * 420, Ⲇ * 399.546875);
		ᐃ.bezierCurveTo(292 * Ⲇ, 412.546875 * Ⲇ, Ⲇ * 275, Ⲇ * 313.546875, 269 * Ⲇ, 272.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔⲆΔ], ᐃⲆ[7], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 273, Ⲇ * 266.546875);
		ᐃ.bezierCurveTo(Ⲇ * 291, 370.546875 * Ⲇ, 235 * Ⲇ, Ⲇ * 428.546875, 173 * Ⲇ, Ⲇ * 451.546875);
		ᐃ.bezierCurveTo(Ⲇ * 124, 365.546875 * Ⲇ, Ⲇ * 217, Ⲇ * 274.546875, 272 * Ⲇ, 265.546875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[7], Ⲇ * 2);
		ᐃΔⵠ(ᐃ, Ⲇ * 266, 251.546875 * Ⲇ, Ⲇ * 19.1049731745428);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔᐃΔΔ], ᐃⲆ[ⵠΔⲆᐃⲆ], ᐃᐃᐃᐃ * Ⲇ);
		ᐃΔⵠ(ᐃ, 292 * Ⲇ, 274.546875 * Ⲇ, 15.556349186104045 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[8], ᐃⲆ[9], 2 * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 258, 291.546875 * Ⲇ, 17.029386365926403 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[8], ᐃⲆ[ⵠⲆᐃΔᐃ], Ⲇ * ⲆᐃᐃΔ);
		return ⲆⲆ
	}

	function ᐃᐃⲆΔⵠᐃⲆᐃⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 85;
		ⲆⲆ.height = Ⲇ * 145;
		ᐃ.translate(Ⲇ * -ⲆᐃⵠⲆᐃ, Ⲇ * -95);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 50, Ⲇ * 105);
		ᐃ.bezierCurveTo(Ⲇ * 52, Ⲇ * 119, Ⲇ * 64, Ⲇ * 137, 71 * Ⲇ, Ⲇ * 146);
		ᐃ.bezierCurveTo(Ⲇ * 71, Ⲇ * 161, 74 * Ⲇ, Ⲇ * 169, Ⲇ * 79, 179 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 68, Ⲇ * 192, 70 * Ⲇ, 204 * Ⲇ, 69 * Ⲇ, 216 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 50, 189.5 * Ⲇ, Ⲇ * 50, Ⲇ * 189.5, Ⲇ * 31, Ⲇ * 163);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(44 * Ⲇ, Ⲇ * 106);
		ᐃ.bezierCurveTo(Ⲇ * 49, 90 * Ⲇ, 58 * Ⲇ, 104 * Ⲇ, Ⲇ * 51, 121 * Ⲇ);
		ᐃ.bezierCurveTo(45 * Ⲇ, Ⲇ * 143, Ⲇ * 41, 151 * Ⲇ, 37 * Ⲇ, Ⲇ * 162);
		ᐃ.bezierCurveTo(Ⲇ * 48, Ⲇ * 180, 58 * Ⲇ, 188 * Ⲇ, Ⲇ * 76, Ⲇ * 205);
		ᐃ.bezierCurveTo(Ⲇ * 104, 209 * Ⲇ, 105 * Ⲇ, 229 * Ⲇ, 92 * Ⲇ, 235 * Ⲇ);
		ᐃ.bezierCurveTo(76 * Ⲇ, 239 * Ⲇ, 75 * Ⲇ, 232 * Ⲇ, 56 * Ⲇ, 213 * Ⲇ);
		ᐃ.bezierCurveTo(31 * Ⲇ, 187 * Ⲇ, Ⲇ * 28, 176 * Ⲇ, 23 * Ⲇ, 162 * Ⲇ);
		ᐃ.bezierCurveTo(38 * Ⲇ, Ⲇ * 131, 40 * Ⲇ, Ⲇ * 120, Ⲇ * 44, Ⲇ * 106);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ, ᐃⲆ, ⲆΔⲆᐃΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 30, Ⲇ * 159);
		ᐃ.bezierCurveTo(46 * Ⲇ, 157 * Ⲇ, 59 * Ⲇ, 152 * Ⲇ, Ⲇ * 68, 148 * Ⲇ);
		ᐃ.bezierCurveTo(63 * Ⲇ, 155 * Ⲇ, 52 * Ⲇ, 160 * Ⲇ, 44 * Ⲇ, 164 * Ⲇ);
		ᐃ.bezierCurveTo(59 * Ⲇ, 169 * Ⲇ, Ⲇ * 66, 174 * Ⲇ, 75 * Ⲇ, Ⲇ * 178);
		ᐃ.bezierCurveTo(Ⲇ * 58, Ⲇ * 178, 49 * Ⲇ, 175 * Ⲇ, 37 * Ⲇ, 174 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ);
		return ⲆⲆ
	}

	function ᐃΔⲆⵠⲆ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 120;
		ⲆⲆ.height = Ⲇ * ΔⲆΔΔΔ;
		ᐃᐃᐃ(ᐃ, Ⲇ * 10, 10 * Ⲇ, Ⲇ * 95, Ⲇ * 80, Ⲇ * ⵠΔΔΔⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃᐃᐃ(ᐃ, ⵠᐃᐃⵠⵠ * Ⲇ, Ⲇ * ⵠⵠⲆⵠ, 95 * Ⲇ, Ⲇ * 80, Ⲇ * 10);
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃᐃΔΔ], Ⲇ * ⲆΔⲆᐃΔ);
		if (Δᐃ == ⵠΔⵠⲆ) {
			var ⵠΔ = ᐃⲆⵠⲆᐃᐃΔ(.75 * Ⲇ, ᐃⲆ, ⲆᐃⲆ);
			ᐃ.drawImage(ⵠΔ, Ⲇ * 22, ᐃᐃⲆᐃᐃΔⲆ * Ⲇ)
		} else if (ΔⵠⲆ == Δᐃ) {
			var ⵠΔ = ᐃⲆⵠⲆᐃᐃΔ(Ⲇ * .75, ᐃⲆ, 1);
			ᐃ.drawImage(ⵠΔ, Ⲇ * 22, ᐃⲆⲆΔⵠΔⲆ * Ⲇ)
		}
		return ⲆⲆ
	}

	function ⵠΔᐃᐃⵠΔⵠΔⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 60 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 60;
		ᐃ.translate(-25 * Ⲇ, -25 * Ⲇ);
		ᐃ.translate(0, Ⲇ * ⵠⵠΔⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(24 * Ⲇ, 50 * Ⲇ);
		ᐃ.bezierCurveTo(32.5 * Ⲇ, Ⲇ * 54.5, Ⲇ * 32.5, Ⲇ * 54.5, 41 * Ⲇ, 59 * Ⲇ);
		ᐃ.bezierCurveTo(57 * Ⲇ, 47 * Ⲇ, Ⲇ * 57, 47 * Ⲇ, 73 * Ⲇ, 35 * Ⲇ);
		ᐃ.bezierCurveTo(57 * Ⲇ, 53 * Ⲇ, 57 * Ⲇ, 53 * Ⲇ, 41 * Ⲇ, 71 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(ⵠⲆⵠ, -5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(24 * Ⲇ, 50 * Ⲇ);
		ᐃ.bezierCurveTo(32.5 * Ⲇ, 54.5 * Ⲇ, Ⲇ * 32.5, 54.5 * Ⲇ, 41 * Ⲇ, Ⲇ * 59);
		ᐃ.bezierCurveTo(57 * Ⲇ, Ⲇ * 47, 57 * Ⲇ, 47 * Ⲇ, 73 * Ⲇ, 35 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 57, 53 * Ⲇ, Ⲇ * 57, Ⲇ * 53, 41 * Ⲇ, Ⲇ * 71);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		return ⲆⲆ
	}

	function ⲆᐃⲆΔᐃⲆⵠⲆΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 316 * Ⲇ;
		ⲆⲆ.height = 365 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(156.07142639160156 * Ⲇ, Ⲇ * 51.81248474121094);
		ᐃ.rotate(ⵠⲆᐃ);
		ᐃᐃᐃ(ᐃ, -21.5 * Ⲇ, -34 * Ⲇ, 43 * Ⲇ, Ⲇ * 68, Ⲇ * 8);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔ], ᐃⲆ[ⵠᐃⵠⲆ], ⲆΔⲆΔⵠⲆⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 126.57142639160156, 67.38392639160156 * Ⲇ);
		ᐃ.bezierCurveTo(126.57142639160156 * Ⲇ, Ⲇ * 57.38392639160156, Ⲇ * 132.57142639160156, 54.38392639160156 * Ⲇ, Ⲇ * 140.57142639160156, 54.38392639160156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 177.57142639160156, 55.38392639160156 * Ⲇ, Ⲇ * 158.07142639160156, 54.38392639160156 * Ⲇ, Ⲇ * 175.57142639160156, Ⲇ * 54.38392639160156);
		ᐃ.bezierCurveTo(185.57142639160156 * Ⲇ, Ⲇ * 56.38392639160156, 185.57142639160156 * Ⲇ, Ⲇ * 57.38392639160156, Ⲇ * 184.57142639160156, 66.38392639160156 * Ⲇ);
		ᐃ.bezierCurveTo(184.57142639160156 * Ⲇ, Ⲇ * 78.38392639160156, Ⲇ * 184.57142639160156, Ⲇ * 89.38392639160156, 184.57142639160156 * Ⲇ, Ⲇ * 90.38392639160156);
		ᐃ.bezierCurveTo(Ⲇ * 177.57142639160156, Ⲇ * 107.38392639160156, Ⲇ * 180.57142639160156, 112.38392639160156 * Ⲇ, 189.57142639160156 * Ⲇ, Ⲇ * 116.38392639160156);
		ᐃ.bezierCurveTo(212.57142639160156 * Ⲇ, Ⲇ * 127.38392639160156, 212.57142639160156 * Ⲇ, 132.38392639160156 * Ⲇ, Ⲇ * 211.57142639160156, 150.38392639160156 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 211.57142639160156, Ⲇ * 227.59821128845215, Ⲇ * 211.57142639160156, 227.59821128845215 * Ⲇ, 211.57142639160156 * Ⲇ, Ⲇ * 304.81249618530273);
		ᐃ.bezierCurveTo(212.57142639160156 * Ⲇ, 328.81249618530273 * Ⲇ, 209.57142639160156 * Ⲇ, 330.81249618530273 * Ⲇ, Ⲇ * 188.57142639160156, 333.81249618530273 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 155.07142639160156, 333.31249618530273 * Ⲇ, 155.07142639160156 * Ⲇ, Ⲇ * 333.31249618530273, Ⲇ * 121.57142639160156, 332.81249618530273 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 104.57142639160156, 327.81249618530273 * Ⲇ, Ⲇ * 105.57142639160156, Ⲇ * 328.81249618530273, Ⲇ * 104.57142639160156, 312.81249618530273 * Ⲇ);
		ᐃ.bezierCurveTo(104.57142639160156 * Ⲇ, 228.16963958740234 * Ⲇ, 104.57142639160156 * Ⲇ, Ⲇ * 228.16963958740234, 104.57142639160156 * Ⲇ, Ⲇ * 143.52678298950195);
		ᐃ.bezierCurveTo(Ⲇ * 106.57142639160156, 124.52678298950195 * Ⲇ, 110.57142639160156 * Ⲇ, Ⲇ * 123.52678298950195, 123.57142639160156 * Ⲇ, Ⲇ * 116.52678298950195);
		ᐃ.bezierCurveTo(Ⲇ * 136.57142639160156, Ⲇ * 110.52678298950195, Ⲇ * 130.57142639160156, 106.52678298950195 * Ⲇ, 126.57142639160156 * Ⲇ, 98.52678298950195 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⲆΔⵠⵠᐃ], ⵠᐃⵠΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 125.57142639160156, 156.66963958740234 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 125.57142639160156, Ⲇ * 182.66963958740234, 125.57142639160156 * Ⲇ, Ⲇ * 182.66963958740234, Ⲇ * 125.57142639160156, Ⲇ * 208.66963958740234);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔΔᐃⵠΔ, ᐃⲆ[6], Ⲇ * 15);
		return ⲆⲆ
	}

	function ⲆᐃⵠᐃⲆΔⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 185 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 164;
		ᐃ.translate(0, 0);
		var ⵠΔ = ΔᐃⵠᐃᐃΔⵠⲆΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ);
		ᐃ.drawImage(ⵠΔ, -10 * Ⲇ, 0 * Ⲇ);
		var ⵠΔ = ΔⲆᐃⵠΔⲆⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ, ⵠⲆᐃ);
		ᐃ.drawImage(ⵠΔ, Ⲇ * -83, -40 * Ⲇ);
		var ⵠΔ = ΔⲆᐃⵠΔⲆⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ, Math.PI / 1.4);
		ᐃ.drawImage(ⵠΔ, -15 * Ⲇ, -88 * Ⲇ);
		var ⵠΔ = ΔⲆᐃⵠΔⲆⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ, Math.PI / -1.4);
		ᐃ.drawImage(ⵠΔ, Ⲇ * ᐃⵠⲆⵠᐃⵠΔ, Ⲇ * -8);
		return ⲆⲆ
	}

	function ᐃΔᐃᐃΔᐃΔ(ΔᐃΔⲆᐃⲆⵠ, ⵠᐃᐃΔⲆΔⵠ, ⵠⵠⲆΔΔᐃΔ, ΔᐃΔΔΔΔⵠ, ΔⲆⵠⵠⵠⵠᐃ) {
		const ⲆᐃᐃⲆⲆⵠⲆ = ΔᐃΔⲆᐃⲆⵠ ^ 8060;
		const ΔᐃᐃⲆⵠⲆᐃ = (2531011 + (22854 + ⵠᐃᐃΔⲆΔⵠ) * 214013) % 4294967296;
		const ⲆΔΔⲆΔΔⲆᐃᐃ = ~(ⵠⵠⲆΔΔᐃΔ & 41653) & ⵠⵠⲆΔΔᐃΔ | ~(ⵠⵠⲆΔΔᐃΔ & 41653) & 41653;
		const ⲆᐃⲆᐃΔᐃᐃΔⵠ = (ΔᐃΔΔΔΔⵠ | 25661) & ~(25661 & ΔᐃΔΔΔΔⵠ);
		const ᐃΔΔᐃᐃΔᐃⵠΔ = ~(ΔⲆⵠⵠⵠⵠᐃ & 1685) & (1685 | ΔⲆⵠⵠⵠⵠᐃ);
		const ⲆⵠᐃⵠᐃᐃΔᐃⲆ = ⲆⵠᐃⵠⲆⵠΔ(ⲆᐃᐃⲆⲆⵠⲆ, ΔᐃᐃⲆⵠⲆᐃ, ⲆΔΔⲆΔΔⲆᐃᐃ);
		const ᐃⲆᐃᐃⲆⲆⲆⲆⲆ = ᐃⵠⵠⵠⵠⲆΔ(ⲆᐃⲆᐃΔᐃᐃΔⵠ, ᐃΔΔᐃᐃΔᐃⵠΔ, ⲆᐃᐃⲆⲆⵠⲆ, ΔᐃᐃⲆⵠⲆᐃ);
		const ⲆⲆΔΔΔⲆᐃⲆⵠ = (2147483587 + 2147483629 * (30391 + (ⲆⵠᐃⵠᐃᐃΔᐃⲆ ^ ᐃⲆᐃᐃⲆⲆⲆⲆⲆ))) % 2147483647;
		return ⲆⲆΔΔΔⲆᐃⲆⵠ
	}

	function ΔᐃⲆΔⲆⲆᐃ(ⲆⵠΔΔᐃΔⵠ, ⲆⵠⵠⲆᐃⲆⵠ, ᐃΔᐃΔⵠⲆΔ, ᐃᐃΔΔⲆᐃᐃ, ⵠⵠᐃΔᐃΔΔ) {
		ⲆⲆⵠⲆΔⵠᐃ(ᐃΔⲆⲆᐃ, ⲆⵠΔΔᐃΔⵠ, ⲆⵠⵠⲆᐃⲆⵠ, ᐃΔᐃΔⵠⲆΔ, ᐃᐃΔΔⲆᐃᐃ, ⵠⵠᐃΔᐃΔΔ);
		const ⲆΔΔⲆⲆᐃⵠ = ⲆⲆᐃᐃⵠⵠⵠ(ᐃⲆⵠᐃ[ⲆᐃⲆ], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[2], ᐃⲆⵠᐃ[ⵠⵠᐃΔ], ᐃⲆⵠᐃ[4], ᐃⲆⵠᐃ[0]);
		const ᐃⵠⲆⲆⲆⵠᐃ = ⵠⵠⵠΔᐃⵠΔ(ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[2]);
		const ⲆᐃᐃᐃᐃⲆⲆⲆᐃ = (16 << ((ⲆΔΔⲆⲆᐃⵠ ^ ᐃⵠⲆⲆⲆⵠᐃ) >> 8 & 255)) + (8 << ((ⲆΔΔⲆⲆᐃⵠ ^ ᐃⵠⲆⲆⲆⵠᐃ) >> 16 & 255)) + (0 << ((ⲆΔΔⲆⲆᐃⵠ ^ ᐃⵠⲆⲆⲆⵠᐃ) >> 24 & 255)) + (24 << ((ⲆΔΔⲆⲆᐃⵠ ^ ᐃⵠⲆⲆⲆⵠᐃ) >> 0 & 255));
		return ⲆᐃᐃᐃᐃⲆⲆⲆᐃ
	}

	function ⵠΔⵠⵠⲆΔΔⲆΔ() {
		Ⲇⵠ[ⵠ.Δᐃⵠᐃⵠⵠⵠ] = ΔⵠΔᐃ(ⲆⵠΔⲆ, [{
			f: ΔⵠΔⲆΔᐃⵠ,
			x: 0,
			y: ΔΔⲆⲆ,
			a: ⲆΔᐃ,
			r: ᐃΔΔ,
			c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
		}], .2, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔᐃⵠΔⲆᐃᐃ] = Ⲇⵠ[ⵠ.Δᐃⵠᐃⵠⵠⵠ];
		Ⲇⵠ[ⵠ.ⲆΔⵠΔⲆΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⵠΔⲆΔᐃ][0] = ΔⲆ.ΔⵠⵠⵠΔᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠΔⲆΔᐃ][ⲆⲆⲆᐃ] = ΔⲆ.ⵠⵠᐃⵠΔΔᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠΔⲆΔᐃ][2] = ΔⲆ.ⵠΔᐃΔΔⵠⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔᐃⵠ] = Ⲇⵠ[ⵠ.ⲆΔⵠΔⲆΔᐃ];
		Ⲇⵠ[ⵠ.ⵠⵠᐃᐃΔᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠᐃᐃΔᐃⲆ][0] = ΔⲆ.Δⵠᐃᐃⵠⵠⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃᐃΔᐃⲆ][ΔΔⲆΔ] = ΔⲆ.ΔΔᐃᐃᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃᐃΔᐃⲆ][2] = ΔⲆ.ᐃⵠⵠᐃΔⵠⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃΔⵠᐃᐃ] = Ⲇⵠ[ⵠ.ⵠⵠᐃᐃΔᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔⵠⲆ][0] = ΔⲆ.ⵠᐃⵠⲆⵠΔᐃ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔⵠⲆ][ᐃΔⵠΔ] = ΔⲆ.ΔⲆᐃᐃⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔⵠⲆ][ΔᐃΔⲆ] = ΔⲆ.ΔΔΔᐃΔⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆⲆᐃᐃⲆΔⵠ] = Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔⵠⲆ];
		Ⲇⵠ[ⵠ.ΔΔⲆᐃΔΔⵠ] = [];
		Ⲇⵠ[ⵠ.ΔΔⲆᐃΔΔⵠ][ⲆⲆᐃΔ] = ΔⲆ.ᐃΔᐃᐃⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ΔΔⲆᐃΔΔⵠ][1] = ΔⲆ.ⵠⲆᐃⲆⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ΔΔⲆᐃΔΔⵠ][2] = ΔⲆ.ⵠⲆⵠᐃⵠⲆΔ;
		Ⲇⵠ[ⵠ.ΔⲆᐃⲆⵠⲆⲆ] = Ⲇⵠ[ⵠ.ΔΔⲆᐃΔΔⵠ];
		Ⲇⵠ[ⵠ.ΔⲆΔᐃᐃᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⲆΔᐃᐃᐃⵠ][0] = ΔⲆ.ΔΔᐃΔΔᐃⲆ;
		Ⲇⵠ[ⵠ.ΔⲆΔᐃᐃᐃⵠ][1] = ΔⲆ.ΔΔⲆᐃᐃΔΔ;
		Ⲇⵠ[ⵠ.ΔⲆΔᐃᐃᐃⵠ][ΔᐃΔⲆ] = ΔⲆ.ⲆΔⵠᐃⲆⲆⲆ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃΔⵠᐃΔ] = Ⲇⵠ[ⵠ.ΔⲆΔᐃᐃᐃⵠ];
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆᐃⲆ][ⵠᐃΔⲆ] = ΔⲆ.ΔΔᐃⵠᐃΔᐃ;
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆᐃⲆ][ᐃΔⵠΔ] = ΔⲆ.ⲆⲆⵠΔᐃⵠᐃ;
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆᐃⲆ][Δⵠᐃᐃ] = ΔⲆ.ᐃᐃᐃⲆᐃⲆΔ;
		Ⲇⵠ[ⵠ.ⵠⲆⵠᐃⲆⵠⵠ] = Ⲇⵠ[ⵠ.ΔⲆΔΔⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆᐃΔΔⲆᐃⲆ] = Ⲇⵠ[ⵠ.ΔⲆΔΔⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔⲆⲆΔ][0] = ΔⲆ.ᐃᐃⵠΔⲆᐃᐃⲆΔ;
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔⲆⲆΔ][ⲆΔⲆⵠ] = ΔⲆ.ⵠᐃᐃΔᐃⵠᐃⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔⲆⲆΔ][2] = ΔⲆ.ⵠⲆⵠᐃⵠΔᐃⵠⲆ;
		Ⲇⵠ[ⵠ.ΔⵠᐃⵠΔⵠⲆ] = Ⲇⵠ[ⵠ.ⲆⵠⵠΔⲆⲆΔ];
		Ⲇⵠ[ⵠ.ΔΔⲆΔᐃⵠⵠ] = Ⲇⵠ[ⵠ.ⲆⵠⵠΔⲆⲆΔ];
		Ⲇⵠ[ⵠ.ΔΔⲆᐃⵠΔⵠ] = [];
		Ⲇⵠ[ⵠ.ΔΔⲆᐃⵠΔⵠ][0] = ΔⲆ.ΔⲆΔⲆᐃᐃΔ;
		Ⲇⵠ[ⵠ.ΔΔⲆᐃⵠΔⵠ][1] = ΔⲆ.ⵠᐃⲆⲆⵠᐃᐃ;
		Ⲇⵠ[ⵠ.ΔΔⲆᐃⵠΔⵠ][2] = ΔⲆ.ΔᐃⵠⲆᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ΔⵠΔᐃⲆⲆΔ] = Ⲇⵠ[ⵠ.ΔΔⲆᐃⵠΔⵠ];
		Ⲇⵠ[ⵠ.ΔΔΔⲆΔᐃⵠ] = Ⲇⵠ[ⵠ.ΔΔⲆᐃⵠΔⵠ];
		Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆᐃⲆ][ΔᐃΔ] = ΔⲆ.ᐃᐃⲆⵠⵠΔᐃ;
		Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆᐃⲆ][1] = ΔⲆ.ΔⵠⵠⲆᐃΔᐃ;
		Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆᐃⲆ][ⲆᐃⵠⲆ] = ΔⲆ.ΔⲆⲆᐃⲆᐃΔ;
		Ⲇⵠ[ⵠ.ᐃᐃΔΔⵠᐃᐃ] = Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ΔⲆⲆⵠᐃΔⲆ] = Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆⵠΔΔⵠⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔΔⵠⲆᐃ][0] = ΔⲆ.ⵠⵠᐃⲆΔⲆΔ;
		Ⲇⵠ[ⵠ.ⲆⵠΔΔⵠⲆᐃ][ⵠⲆⲆⲆ] = ΔⲆ.ⲆᐃᐃⲆΔᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆⵠΔΔⵠⲆᐃ][ΔⲆⲆⵠ] = ΔⲆ.ⵠⲆⲆᐃΔᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆᐃΔⵠⵠΔⲆ] = Ⲇⵠ[ⵠ.ⲆⵠΔΔⵠⲆᐃ];
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃⵠᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃⵠᐃᐃ][0] = ΔⲆ.ⵠⲆΔΔΔⲆΔ;
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃⵠᐃᐃ][1] = ΔⲆ.ᐃⵠᐃⵠΔΔΔ;
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃⵠᐃᐃ][ΔΔᐃᐃ] = ΔⲆ.ⲆΔⲆⵠⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ᐃΔⲆⲆᐃᐃΔ] = Ⲇⵠ[ⵠ.ΔⲆⵠᐃⵠᐃᐃ];
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠᐃᐃⲆ] = Ⲇⵠ[ⵠ.ΔⲆⵠᐃⵠᐃᐃ];
		Ⲇⵠ[ⵠ.ⵠⵠⲆⲆΔᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⲆⲆΔᐃᐃ][ⵠⵠΔᐃ] = ΔⲆ.ⲆⵠΔᐃⵠⵠΔ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆⲆΔᐃᐃ][1] = ΔⲆ.ΔΔⵠΔΔᐃⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆⲆΔᐃᐃ][ⵠᐃⵠⲆ] = ΔⲆ.ᐃⵠΔᐃⲆⵠⲆ;
		Ⲇⵠ[ⵠ.ΔΔᐃᐃⲆⲆᐃ] = Ⲇⵠ[ⵠ.ⵠⵠⲆⲆΔᐃᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆⵠⲆⵠⵠⵠ] = Ⲇⵠ[ⵠ.ⵠⵠⲆⲆΔᐃᐃ];
		Ⲇⵠ[ⵠ.ΔᐃⵠΔΔᐃΔ] = [];
		Ⲇⵠ[ⵠ.ΔᐃⵠΔΔᐃΔ][Ⲇᐃⵠⵠ] = ΔⲆ.ⲆΔⲆⲆΔΔⲆ;
		Ⲇⵠ[ⵠ.ΔᐃⵠΔΔᐃΔ][ⵠⵠⵠΔ] = ΔⲆ.ΔᐃΔⲆⵠᐃⲆ;
		Ⲇⵠ[ⵠ.ΔᐃⵠΔΔᐃΔ][ⲆᐃⵠⲆ] = ΔⲆ.ᐃΔⲆⲆΔⵠⲆ;
		Ⲇⵠ[ⵠ.ⵠⲆᐃΔᐃⵠⲆ] = Ⲇⵠ[ⵠ.ΔᐃⵠΔΔᐃΔ];
		Ⲇⵠ[ⵠ.ΔⵠⵠᐃΔᐃΔ] = Ⲇⵠ[ⵠ.ΔᐃⵠΔΔᐃΔ];
		Ⲇⵠ[ⵠ.ᐃⵠⲆⲆᐃⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⲆⲆᐃⵠⵠ][Δⵠⵠ] = ΔⲆ.ⵠᐃⲆⵠᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ᐃⵠⲆⲆᐃⵠⵠ][Δᐃᐃ] = ΔⲆ.ⲆᐃᐃᐃᐃⲆᐃ;
		Ⲇⵠ[ⵠ.ᐃⵠⲆⲆᐃⵠⵠ][ⵠᐃⵠⲆ] = ΔⲆ.ᐃⲆⲆⵠΔᐃᐃ;
		Ⲇⵠ[ⵠ.ΔⲆΔΔⵠᐃⵠ] = Ⲇⵠ[ⵠ.ᐃⵠⲆⲆᐃⵠⵠ];
		Ⲇⵠ[ⵠ.ᐃⵠⲆᐃᐃᐃⵠ] = Ⲇⵠ[ⵠ.ᐃⵠⲆⲆᐃⵠⵠ];
		Ⲇⵠ[ⵠ.ΔⵠᐃΔᐃⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⵠᐃΔᐃⲆᐃ][0] = ΔⲆ.ᐃΔΔᐃᐃⵠⵠ;
		Ⲇⵠ[ⵠ.ΔⵠᐃΔᐃⲆᐃ][1] = ΔⲆ.ⵠΔᐃᐃⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ΔⵠᐃΔᐃⲆᐃ][ΔⲆⲆⵠ] = ΔⲆ.ΔⲆⵠᐃⲆΔⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠᐃⵠᐃ] = Ⲇⵠ[ⵠ.ΔⵠᐃΔᐃⲆᐃ];
		Ⲇⵠ[ⵠ.ⵠⵠᐃⵠⵠⲆⵠ] = Ⲇⵠ[ⵠ.ΔⵠᐃΔᐃⲆᐃ];
		Ⲇⵠ[ⵠ.ΔⵠⲆⵠⵠⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⲆⵠⵠⵠᐃ][0] = ΔⲆ.ⲆⵠΔⲆΔᐃΔ;
		Ⲇⵠ[ⵠ.ΔⵠⲆⵠⵠⵠᐃ][ⲆⵠⲆ] = ΔⲆ.ΔΔᐃᐃⲆΔΔ;
		Ⲇⵠ[ⵠ.ΔⵠⲆⵠⵠⵠᐃ][2] = ΔⲆ.ⵠᐃⵠΔΔΔᐃ;
		Ⲇⵠ[ⵠ.ⲆⲆΔᐃΔⲆⲆ] = Ⲇⵠ[ⵠ.ΔⵠⲆⵠⵠⵠᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆⲆⲆⵠⲆⲆ] = Ⲇⵠ[ⵠ.ΔⵠⲆⵠⵠⵠᐃ];
		Ⲇⵠ[ⵠ.ⵠΔⲆΔᐃᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⲆΔᐃᐃΔ][0] = ΔⲆ.ᐃΔᐃⲆⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ⵠΔⲆΔᐃᐃΔ][ᐃⲆΔ] = ΔⲆ.ΔⲆⵠΔⵠⲆⲆ;
		Ⲇⵠ[ⵠ.ⵠΔⲆΔᐃᐃΔ][2] = ΔⲆ.ᐃΔⲆΔⵠⲆⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃⵠᐃⲆⵠ] = Ⲇⵠ[ⵠ.ⵠΔⲆΔᐃᐃΔ];
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔⲆⲆⵠ] = Ⲇⵠ[ⵠ.ⵠΔⲆΔᐃᐃΔ];
		Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆⲆᐃ][0] = ΔⲆ.ⲆⲆⵠⲆⲆᐃⲆ;
		Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆⲆᐃ][ⲆΔⲆⵠ] = ΔⲆ.ᐃΔⲆⵠᐃⲆᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆⲆᐃ][ⲆⲆᐃⲆ] = ΔⲆ.ⲆΔΔⵠⵠΔⵠ;
		Ⲇⵠ[ⵠ.ΔᐃᐃⵠΔᐃⵠ] = Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ΔᐃⵠᐃᐃⲆⲆ] = Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ⵠⲆⲆⵠⵠⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⲆⵠⵠⲆᐃ][ⵠⲆⵠ] = ΔⲆ.ⲆΔᐃᐃⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆⵠⵠⲆᐃ][ⲆⵠΔⲆ] = ΔⲆ.ⵠⲆᐃᐃΔⲆΔ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆⵠⵠⲆᐃ][ⲆⲆΔΔ] = ΔⲆ.ⵠᐃⵠΔⵠΔⵠ;
		Ⲇⵠ[ⵠ.ᐃⵠⵠⲆⲆⲆⲆ] = Ⲇⵠ[ⵠ.ⵠⲆⲆⵠⵠⲆᐃ];
		Ⲇⵠ[ⵠ.ᐃΔΔΔᐃᐃⵠ] = Ⲇⵠ[ⵠ.ⵠⲆⲆⵠⵠⲆᐃ];
		Ⲇⵠ[ⵠ.ΔΔⵠⲆΔⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ΔΔⵠⲆΔⲆⵠ][ⵠⲆᐃ] = ΔⲆ.ⵠⵠⲆⵠᐃΔⲆ;
		Ⲇⵠ[ⵠ.ΔΔⵠⲆΔⲆⵠ][ᐃⲆⲆ] = ΔⲆ.ΔⲆⲆΔⵠⲆⲆ;
		Ⲇⵠ[ⵠ.ΔΔⵠⲆΔⲆⵠ][2] = ΔⲆ.ⲆⵠⲆΔᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆᐃⵠᐃᐃᐃΔ] = Ⲇⵠ[ⵠ.ΔΔⵠⲆΔⲆⵠ];
		Ⲇⵠ[ⵠ.ᐃⲆⵠⲆᐃⲆᐃ] = Ⲇⵠ[ⵠ.ΔΔⵠⲆΔⲆⵠ];
		Ⲇⵠ[ⵠ.ⲆᐃⲆⲆΔᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⲆⲆΔᐃⲆ][ⵠᐃΔⲆ] = ΔⲆ.ⲆΔᐃΔΔⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆᐃⲆⲆΔᐃⲆ][1] = ΔⲆ.ⵠⲆᐃΔᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆᐃⲆⲆΔᐃⲆ][2] = ΔⲆ.ΔΔⵠⲆΔΔⵠ;
		Ⲇⵠ[ⵠ.ΔᐃᐃⵠΔᐃⲆ] = Ⲇⵠ[ⵠ.ⲆᐃⲆⲆΔᐃⲆ];
		Ⲇⵠ[ⵠ.ΔⲆⵠⵠΔᐃᐃ] = Ⲇⵠ[ⵠ.ⲆᐃⲆⲆΔᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆΔᐃΔᐃᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⲆΔᐃΔᐃᐃΔ][0] = ΔⲆ.ΔΔΔⲆⵠΔΔ;
		Ⲇⵠ[ⵠ.ⲆΔᐃΔᐃᐃΔ][1] = ΔⲆ.ΔᐃⵠⲆΔⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆΔᐃΔᐃᐃΔ][ⵠᐃⵠⲆ] = ΔⲆ.ΔⲆⵠᐃⵠΔⵠ;
		Ⲇⵠ[ⵠ.ⵠⲆΔΔⵠᐃᐃ] = Ⲇⵠ[ⵠ.ⲆΔᐃΔᐃᐃΔ];
		Ⲇⵠ[ⵠ.ⲆᐃⵠⲆⲆⵠΔ] = Ⲇⵠ[ⵠ.ⲆΔᐃΔᐃᐃΔ];
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆⲆΔⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆⲆΔⲆ][ᐃΔΔ] = ΔⲆ.ᐃⵠΔⲆⲆᐃⲆ;
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆⲆΔⲆ][ΔⲆΔᐃ] = ΔⲆ.ΔⲆⵠᐃᐃⲆΔ;
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆⲆΔⲆ][ΔⲆⲆⵠ] = ΔⲆ.ᐃⲆⲆⵠⲆⵠΔ;
		Ⲇⵠ[ⵠ.ΔᐃⵠΔᐃᐃⲆ] = Ⲇⵠ[ⵠ.ⵠⵠΔⲆⲆΔⲆ];
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔΔⲆᐃ] = Ⲇⵠ[ⵠ.ⵠⵠΔⲆⲆΔⲆ];
		Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔⵠΔ][ⲆΔⵠΔ] = ΔⲆ.ᐃΔⲆᐃⵠⵠΔ;
		Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔⵠΔ][ΔⵠⲆ] = ΔⲆ.ⲆⵠⲆⲆΔΔⵠ;
		Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔⵠΔ][ⲆⲆᐃⲆ] = ΔⲆ.ΔⵠᐃⵠⲆᐃΔ;
		Ⲇⵠ[ⵠ.ⲆⲆⵠᐃᐃΔᐃ] = Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔⵠΔ];
		Ⲇⵠ[ⵠ.ᐃᐃΔΔⵠᐃⲆ] = Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔⵠΔ];
		Ⲇⵠ[ⵠ.ΔΔⲆⲆⵠΔΔ] = [];
		Ⲇⵠ[ⵠ.ΔΔⲆⲆⵠΔΔ][0] = ΔⲆ.ⲆⵠⲆΔᐃΔᐃ;
		Ⲇⵠ[ⵠ.ΔΔⲆⲆⵠΔΔ][ᐃⵠⵠ] = ΔⲆ.ⵠᐃᐃⲆⵠᐃΔ;
		Ⲇⵠ[ⵠ.ΔΔⲆⲆⵠΔΔ][ⵠΔᐃⵠ] = ΔⲆ.ᐃⵠΔᐃⵠΔᐃ;
		Ⲇⵠ[ⵠ.ΔⵠᐃⵠΔΔⲆ] = Ⲇⵠ[ⵠ.ΔΔⲆⲆⵠΔΔ];
		Ⲇⵠ[ⵠ.ΔⲆⲆⵠⵠⲆᐃ] = Ⲇⵠ[ⵠ.ΔΔⲆⲆⵠΔΔ];
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆⵠⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆⵠⵠΔ][0] = ΔⲆ.ᐃⵠᐃⵠⵠΔⲆ;
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆⵠⵠΔ][1] = ΔⲆ.ΔΔⵠᐃⲆᐃⲆ;
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆⵠⵠΔ][2] = ΔⲆ.Δⵠᐃⵠᐃⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃΔΔᐃᐃΔ] = Ⲇⵠ[ⵠ.ⵠΔⵠⲆⵠⵠΔ];
		Ⲇⵠ[ⵠ.ΔΔⵠⵠᐃⲆΔ] = Ⲇⵠ[ⵠ.ⵠΔⵠⲆⵠⵠΔ];
		Ⲇⵠ[ⵠ.ⲆΔΔᐃᐃᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆΔΔᐃᐃᐃᐃ][0] = ΔⲆ.ⵠⵠⵠᐃⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆΔΔᐃᐃᐃᐃ][1] = ΔⲆ.ⵠⲆⵠⵠⵠΔⵠ;
		Ⲇⵠ[ⵠ.ⲆΔΔᐃᐃᐃᐃ][ⵠΔᐃΔᐃ] = ΔⲆ.ᐃⲆᐃΔⵠΔᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆᐃⵠᐃⲆ] = Ⲇⵠ[ⵠ.ⲆΔΔᐃᐃᐃᐃ];
		Ⲇⵠ[ⵠ.ΔⵠⵠΔΔⵠⵠ] = Ⲇⵠ[ⵠ.ⲆΔΔᐃᐃᐃᐃ];
		Ⲇⵠ[ⵠ.ΔⵠΔΔⲆᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⵠΔΔⲆᐃᐃ][0] = ΔⲆ.ΔΔΔⵠⲆⲆⵠ;
		Ⲇⵠ[ⵠ.ΔⵠΔΔⲆᐃᐃ][1] = ΔⲆ.ⲆΔⲆᐃΔⵠⲆ;
		Ⲇⵠ[ⵠ.ΔⵠΔΔⲆᐃᐃ][2] = ΔⲆ.ᐃᐃᐃⲆΔΔⵠ;
		Ⲇⵠ[ⵠ.ⲆⵠᐃⲆᐃᐃⲆ] = Ⲇⵠ[ⵠ.ΔⵠΔΔⲆᐃᐃ];
		Ⲇⵠ[ⵠ.ᐃⵠΔΔⵠΔᐃ] = Ⲇⵠ[ⵠ.ΔⵠΔΔⲆᐃᐃ];
		Ⲇⵠ[ⵠ.ᐃΔⲆⵠⲆⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃΔⲆⵠⲆⵠⵠ][0] = ΔⲆ.ΔΔⲆᐃⵠᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃΔⲆⵠⲆⵠⵠ][ⲆⵠΔⲆ] = ΔⲆ.ᐃⲆᐃΔⲆᐃᐃ;
		Ⲇⵠ[ⵠ.ᐃΔⲆⵠⲆⵠⵠ][ⲆᐃᐃΔ] = ΔⲆ.ΔᐃΔⲆⵠΔⵠ;
		Ⲇⵠ[ⵠ.ᐃⵠᐃᐃΔⵠⲆ] = Ⲇⵠ[ⵠ.ᐃΔⲆⵠⲆⵠⵠ];
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃⲆⲆ] = Ⲇⵠ[ⵠ.ᐃΔⲆⵠⲆⵠⵠ];
		Ⲇⵠ[ⵠ.ᐃΔᐃΔⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃΔᐃΔⲆⲆᐃ][0] = ΔⲆ.ⵠΔⵠⲆΔᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃΔᐃΔⲆⲆᐃ][1] = ΔⲆ.ⲆᐃᐃΔⵠⵠⵠ;
		Ⲇⵠ[ⵠ.ᐃΔᐃΔⲆⲆᐃ][ΔⲆⲆⵠ] = ΔⲆ.ΔⵠⵠᐃⵠⵠⲆ;
		Ⲇⵠ[ⵠ.ⵠⲆⵠᐃᐃⲆⲆ] = Ⲇⵠ[ⵠ.ᐃΔᐃΔⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆΔⵠᐃ] = Ⲇⵠ[ⵠ.ᐃΔᐃΔⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠⲆᐃ][ⵠⵠΔᐃ] = ΔⲆ.ⵠᐃⵠⲆᐃΔΔⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠⲆᐃ][1] = ΔⲆ.ΔᐃⲆΔⲆΔⲆⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠⲆᐃ][2] = ΔⲆ.ΔⲆⲆΔⲆⲆΔⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆΔΔⵠΔⲆΔ] = Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠⲆᐃ];
		Ⲇⵠ[ⵠ.ΔΔⲆᐃᐃⲆⲆ] = Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠⲆᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⵠⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⵠⵠⵠ][0] = ΔⲆ.ⵠⲆᐃᐃⲆⵠⲆΔⲆ;
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⵠⵠⵠ][ⵠⵠᐃ] = ΔⲆ.ΔⵠⲆⲆᐃΔᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⵠⵠⵠ][Δᐃᐃⵠ] = ΔⲆ.ⲆⵠᐃⲆⵠⲆᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ΔⵠᐃΔⵠⲆΔ] = Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⵠⵠⵠ];
		Ⲇⵠ[ⵠ.ᐃᐃΔᐃⲆⲆⵠ] = Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⵠⵠⵠ];
		Ⲇⵠ[ⵠ.ΔᐃΔⵠΔᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ΔᐃΔⵠΔᐃᐃ][ⵠⵠΔᐃ] = ΔⲆ.ⲆΔⵠᐃᐃⵠᐃⲆⲆ;
		Ⲇⵠ[ⵠ.ΔᐃΔⵠΔᐃᐃ][ⵠΔⲆ] = ΔⲆ.ⵠΔΔΔᐃᐃⲆᐃᐃ;
		Ⲇⵠ[ⵠ.ΔᐃΔⵠΔᐃᐃ][2] = ΔⲆ.ᐃΔⵠⵠⲆΔⵠⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆΔΔΔⲆⲆΔ] = Ⲇⵠ[ⵠ.ΔᐃΔⵠΔᐃᐃ];
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⵠᐃⵠ] = Ⲇⵠ[ⵠ.ΔᐃΔⵠΔᐃᐃ];
		Ⲇⵠ[ⵠ.ᐃⵠⲆᐃⵠⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⲆᐃⵠⲆⲆ][ⵠΔΔᐃ] = ΔⲆ.ⵠᐃⵠⵠΔΔΔⵠᐃ;
		Ⲇⵠ[ⵠ.ᐃⵠⲆᐃⵠⲆⲆ][1] = ΔⲆ.ⲆᐃᐃΔΔⲆΔⲆᐃ;
		Ⲇⵠ[ⵠ.ᐃⵠⲆᐃⵠⲆⲆ][Ⲇⵠᐃⵠ] = ΔⲆ.ᐃᐃᐃΔΔΔⵠΔΔ;
		Ⲇⵠ[ⵠ.ΔⵠΔᐃᐃⲆⵠ] = Ⲇⵠ[ⵠ.ᐃⵠⲆᐃⵠⲆⲆ];
		Ⲇⵠ[ⵠ.ΔᐃⵠⲆΔⲆⲆ] = Ⲇⵠ[ⵠ.ᐃⵠⲆᐃⵠⲆⲆ];
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃᐃᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃᐃᐃⲆ][0] = ΔⲆ.ΔⲆΔΔⲆⵠᐃⵠΔ;
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃᐃᐃⲆ][1] = ΔⲆ.ᐃΔΔⵠΔⵠΔΔΔ;
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃᐃᐃⲆ][ΔᐃΔⲆ] = ΔⲆ.ᐃⲆᐃᐃᐃⲆⲆᐃΔ;
		Ⲇⵠ[ⵠ.ΔⲆⵠΔⲆΔᐃ] = Ⲇⵠ[ⵠ.ΔⵠⲆᐃᐃᐃⲆ];
		Ⲇⵠ[ⵠ.ΔⵠⲆⲆᐃᐃΔ] = Ⲇⵠ[ⵠ.ΔⵠⲆᐃᐃᐃⲆ];
		Ⲇⵠ[ⵠ.ᐃΔΔⲆⵠΔᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃΔΔⲆⵠΔᐃ][0] = ΔⲆ.ⵠⵠΔⲆΔΔΔΔᐃ;
		Ⲇⵠ[ⵠ.ᐃΔΔⲆⵠΔᐃ][1] = ΔⲆ.ⲆⲆⲆⲆΔΔᐃⲆⲆ;
		Ⲇⵠ[ⵠ.ᐃΔΔⲆⵠΔᐃ][Δⵠᐃᐃ] = ΔⲆ.ⵠΔᐃⲆⲆᐃⲆΔᐃ;
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⲆᐃⲆ] = Ⲇⵠ[ⵠ.ᐃΔΔⲆⵠΔᐃ];
		Ⲇⵠ[ⵠ.ᐃᐃⵠⵠⵠᐃⵠ] = Ⲇⵠ[ⵠ.ᐃΔΔⲆⵠΔᐃ];
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔΔᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔΔᐃ][ⵠⲆᐃ] = ΔⲆ.ⲆᐃⲆᐃⵠⲆΔⲆⲆ;
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔΔᐃ][1] = ΔⲆ.ⵠⲆΔᐃⵠΔⲆΔⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔΔᐃ][ⲆᐃᐃΔ] = ΔⲆ.ⵠΔᐃΔⲆΔⵠᐃᐃ;
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆΔⲆᐃ] = Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔΔᐃ];
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠΔΔⵠ] = Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔΔᐃ];
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠⲆΔ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠⲆΔ][ⲆΔⵠΔ] = ΔⲆ.ᐃⲆᐃΔΔΔⲆ;
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠⲆΔ][ⲆΔᐃ] = ΔⲆ.ⵠΔⵠΔⲆⵠΔ;
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠⲆΔ][2] = ΔⲆ.ⵠⲆΔⲆᐃΔΔ;
		Ⲇⵠ[ⵠ.Ⲇᐃᐃⵠⵠⵠᐃ] = Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠⲆΔ];
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠᐃⲆⲆ] = Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠⲆΔ];
		Ⲇⵠ[ⵠ.ⲆᐃⲆᐃᐃⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⲆᐃᐃⵠΔ][ⵠᐃΔ] = ΔⲆ.ⲆᐃⵠΔⵠⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃⲆᐃᐃⵠΔ][1] = ΔⲆ.ⵠᐃΔⵠᐃⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆᐃⲆᐃᐃⵠΔ][2] = ΔⲆ.ⵠΔΔΔⵠⲆⲆ;
		Ⲇⵠ[ⵠ.ΔΔⵠⲆⵠΔⵠ] = Ⲇⵠ[ⵠ.ⲆᐃⲆᐃᐃⵠΔ];
		Ⲇⵠ[ⵠ.ⵠΔⵠᐃΔᐃᐃⲆΔ] = Ⲇⵠ[ⵠ.ⲆᐃⲆᐃᐃⵠΔ];
		Ⲇⵠ[ⵠ.ⲆⲆⵠⵠⲆΔᐃ] = ΔⵠΔᐃ(ᐃⲆⲆ, [{
			f: ⲆⵠⲆΔΔⵠⵠ,
			x: 0,
			y: ⵠⵠΔᐃ,
			a: ⵠⵠⵠΔ,
			r: ⵠΔⵠⲆ,
			c: ["#352b10", Δ[297], Δ[400], "#e0e1e0", "#c4c4c4"]
		}], .22, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔΔⲆⵠⲆⵠⲆ] = Ⲇⵠ[ⵠ.ⲆⲆⵠⵠⲆΔᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆΔᐃᐃⵠᐃ] = ΔⵠΔᐃ(1, [{
			f: ⵠᐃⲆΔᐃⲆⲆ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: ["#352b10", "#349970", "#245c45", "#348361", Δ[297], Δ[400]]
		}], .2, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔΔΔᐃΔⲆΔ] = Ⲇⵠ[ⵠ.ⲆⲆΔᐃᐃⵠᐃ];
		Ⲇⵠ[ⵠ.ⲆⵠⵠⵠᐃΔⲆ] = ΔⵠΔᐃ(1, [{
			f: ᐃⵠᐃⲆΔΔΔ,
			x: -ⵠⲆⲆⲆ,
			y: 0,
			a: ⲆΔᐃ,
			r: ⵠⲆⵠ,
			c: [Δ[314], Δ[329], Δ[207], Δ[4], Δ[224], Δ[14], Δ[169], Δ[217], Δ[329], Δ[207]]
		}, {
			f: ᐃⲆΔᐃⵠⵠⲆ,
			x: -1,
			y: ⵠⵠΔΔ,
			a: ⵠⵠᐃ,
			r: 0,
			c: [Δ[314], Δ[329], Δ[207], Δ[ⲆⲆᐃΔᐃ], Δ[224], Δ[14], Δ[169], Δ[217], Δ[329], Δ[207]]
		}, {
			f: ⵠΔⵠⲆᐃΔⵠ,
			x: -1,
			y: ⵠᐃΔⲆ,
			a: ⵠΔΔ,
			r: 0,
			c: [Δ[314], Δ[329], Δ[207], Δ[ΔⵠⲆᐃ], Δ[224], Δ[14], Δ[169], Δ[217], Δ[329], Δ[207]]
		}], .4, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔⲆᐃ] = Ⲇⵠ[ⵠ.ⲆⵠⵠⵠᐃΔⲆ];
		Ⲇⵠ[ⵠ.ⲆΔΔᐃⵠⵠⲆ] = ΔⵠΔᐃ(1, [{
			f: ᐃⵠⲆⲆⲆⵠⵠ,
			x: ⵠⲆᐃ,
			y: 0,
			a: ᐃⲆΔ,
			r: 0,
			c: [Δ[83], Δ[574]]
		}], 1.2, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠⲆⵠⲆⲆΔᐃ] = ΔⵠΔᐃ(1, [{
			f: ⲆΔⲆᐃᐃⵠⵠ,
			x: 0,
			y: ⵠⲆᐃ,
			a: ⵠⲆⲆⲆ,
			r: ⵠᐃΔ,
			c: [Δ[314], Δ[42], Δ[119], Δ[ⲆΔᐃⵠΔⲆⵠ]]
		}], .14, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔΔᐃⵠⲆⲆⵠ] = Ⲇⵠ[ⵠ.ⵠⲆⵠⲆⲆΔᐃ];
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆΔᐃ] = ΔⵠΔᐃ(1, [{
			f: ⲆⵠᐃᐃⲆ,
			x: 0,
			y: 0,
			a: 1,
			r: ᐃΔΔ,
			c: [Δ[83], Δ[574]]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠⵠⲆⲆᐃᐃⵠ] = Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆΔᐃ];
		Ⲇⵠ[ⵠ.ΔⲆⲆⵠⲆᐃΔ] = ΔⵠΔᐃ(1, [{
			f: ⲆⵠᐃᐃⲆ,
			x: 0,
			y: ⵠⲆΔⵠ,
			a: ᐃⲆⲆ,
			r: ⵠᐃⵠⵠ,
			c: ["#493d36", "#332b28"]
		}], .7, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠⲆΔᐃΔᐃⵠ] = Ⲇⵠ[ⵠ.ΔⲆⲆⵠⲆᐃΔ];
		Ⲇⵠ[ⵠ.ᐃⵠⲆⲆⲆⲆᐃ] = ΔⵠΔᐃ(1, [{
			f: ⲆⵠᐃᐃⲆ,
			x: 0,
			y: ⵠⲆⵠ,
			a: ⵠⲆⲆⲆ,
			r: ⵠᐃⵠⵠ,
			c: [Δ[460], "#b17238"]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔΔΔᐃΔᐃᐃ] = Ⲇⵠ[ⵠ.ᐃⵠⲆⲆⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ⲆⵠΔⵠᐃⵠΔ] = ΔⵠΔᐃ(1, [{
			f: ⲆⵠᐃᐃⲆ,
			x: ΔΔⲆⲆ,
			y: 0,
			a: 1,
			r: 0,
			c: [Δ[297], Δ[400]]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ᐃⵠᐃᐃⵠᐃᐃ] = Ⲇⵠ[ⵠ.ⲆⵠΔⵠᐃⵠΔ];
		Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠΔᐃ] = ΔⵠΔᐃ(1, [{
			f: ⲆⵠᐃᐃⲆ,
			x: ᐃⲆⵠΔ,
			y: ᐃΔΔ,
			a: ΔⲆΔᐃ,
			r: ⵠΔⵠⲆ,
			c: ["#328a56", "#449573"]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆΔᐃᐃ] = Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠΔᐃ];
		Ⲇⵠ[ⵠ.ᐃᐃΔⵠⵠⵠΔ] = ΔⵠΔᐃ(1, [{
			f: ⲆⵠᐃᐃⲆ,
			x: 0,
			y: ⲆⲆⵠⲆ,
			a: 1,
			r: ⵠᐃⵠⵠ,
			c: ["#c98e2f", "#a36b11"]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔⵠⵠΔᐃⲆᐃ] = Ⲇⵠ[ⵠ.ᐃᐃΔⵠⵠⵠΔ];
		Ⲇⵠ[ⵠ.ⲆⵠᐃⵠⲆⲆᐃ] = Ⲇⵠ[ⵠ.ᐃᐃΔⵠⵠⵠΔ];
		Ⲇⵠ[ⵠ.ᐃⲆᐃⲆΔⵠᐃ] = ΔⵠΔᐃ(ⵠⵠᐃ, [{
			f: ⲆⵠᐃᐃⲆ,
			x: ⵠᐃΔ,
			y: 0,
			a: 1,
			r: 0,
			c: ["#13a56d", "#098a58"]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔⵠⵠΔᐃΔᐃ] = Ⲇⵠ[ⵠ.ᐃⲆᐃⲆΔⵠᐃ];
		Ⲇⵠ[ⵠ.ΔⲆᐃᐃⵠΔᐃ] = Ⲇⵠ[ⵠ.ᐃⲆᐃⲆΔⵠᐃ];
		Ⲇⵠ[ⵠ.ᐃⲆᐃⲆΔΔⲆ] = ΔⵠΔᐃ(ⲆⲆⲆᐃ, [{
			f: ⲆⵠᐃᐃⲆ,
			x: 0,
			y: 0,
			a: 1,
			r: Δⵠⵠ,
			c: ["#3a8214", "#4a9c1e"]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ᐃᐃᐃΔᐃⵠᐃ] = Ⲇⵠ[ⵠ.ᐃⲆᐃⲆΔΔⲆ];
		Ⲇⵠ[ⵠ.ΔᐃⵠⵠΔᐃⲆ] = Ⲇⵠ[ⵠ.ᐃⲆᐃⲆΔΔⲆ];
		Ⲇⵠ[ⵠ.ᐃⵠᐃⵠⲆΔᐃ] = ΔⵠΔᐃ(ᐃⲆΔ, [{
			f: ⲆⵠᐃᐃⲆ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: ["#b22419", "#99110e"]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆᐃΔ] = Ⲇⵠ[ⵠ.ᐃⵠᐃⵠⲆΔᐃ];
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆᐃⵠⵠ] = Ⲇⵠ[ⵠ.ᐃⵠᐃⵠⲆΔᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆⲆⲆⲆᐃⲆ] = ΔⵠΔᐃ(ⲆΔⲆⵠ, [{
			f: ⲆⲆᐃᐃⲆᐃⲆ,
			x: -2,
			y: -2,
			a: 1,
			r: -Math.PI / ⲆⲆᐃⲆⵠ,
			c: [Δ[573], Δ[92]]
		}, {
			f: ᐃᐃΔⲆΔⵠΔ,
			x: -Δᐃᐃⵠ,
			y: -2,
			a: 1,
			r: -Math.PI / 7,
			c: [Δ[132], "#ec8d35", "#e96132"]
		}], .3, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠⵠᐃᐃᐃΔᐃ] = Ⲇⵠ[ⵠ.ⲆⲆⲆⲆⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ᐃΔⵠΔⵠⵠⵠ] = ΔⵠΔᐃ(1, [{
			f: ⲆΔⵠⲆⵠⵠΔ,
			x: -ΔᐃΔⲆ,
			y: -1,
			a: ⵠⲆⲆⲆ,
			r: -Math.PI / 7,
			c: [Δ[573], Δ[92], Δ[276], Δ[215], "#0c2c2e"]
		}, {
			f: ᐃᐃΔⲆΔⵠΔ,
			x: -2,
			y: -ⵠⵠᐃ,
			a: 1,
			r: -Math.PI / 7,
			c: [Δ[132], "#ec8d35", "#e96132"]
		}], .3, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔⵠΔⵠΔⵠⵠ] = Ⲇⵠ[ⵠ.ᐃΔⵠΔⵠⵠⵠ];
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆⵠⵠᐃ] = ΔⵠΔᐃ(ΔⵠⲆ, [{
			f: ΔΔΔⲆⵠᐃⲆ,
			x: ΔΔᐃᐃ,
			y: ⵠⲆⵠ,
			a: 1,
			r: Math.PI / ΔⲆΔᐃⵠ,
			c: [Δ[314], "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", Δ[400], "#d6d1d1"]
		}], .1, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆᐃⵠⲆΔⲆΔ] = ΔⵠΔᐃ(1, [{
			f: ⵠΔᐃⲆΔᐃΔ,
			x: 2,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [Δ[314], Δ[153], Δ[175], "#eb2933", "#57b74e", "#42a54d", Δ[ᐃⲆⵠΔⵠ], Δ[282]]
		}], .3, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ΔᐃⵠⵠⲆᐃⲆ] = ΔⵠΔᐃ(1, [{
			f: ⲆⵠⵠΔⲆⲆⵠ,
			x: 2,
			y: ⵠⲆⵠ,
			a: ΔΔⲆΔ,
			r: Math.PI / 5,
			c: [Δ[340], Δ[426], "#493425", Δ[384], "#5e4530", "#563e2b"]
		}], .15, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ΔⲆⵠⵠⲆΔⲆ] = ΔⵠΔᐃ(1, [{
			f: ⵠᐃᐃⲆΔᐃᐃ,
			x: 2,
			y: ⵠⲆᐃ,
			a: ΔⲆΔᐃ,
			r: Math.PI / 5,
			c: [Δ[314], Δ[318], Δ[175], "#b1afaf", "#493d36", "#332b28"]
		}], .15, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠΔⵠⲆ] = ΔⵠΔᐃ(ⲆⵠΔⲆ, [{
			f: ᐃᐃⲆᐃΔⵠᐃ,
			x: ΔⲆⲆⵠ,
			y: ⵠᐃⵠⵠ,
			a: 1,
			r: Math.PI / ⵠⵠⲆⵠ,
			c: [Δ[314], Δ[277], Δ[427], Δ[277], Δ[301], Δ[305]]
		}], .15, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆᐃΔᐃᐃΔⲆ] = ΔⵠΔᐃ(ⵠΔⲆ, [{
			f: ⵠⲆΔⵠⲆⵠΔ,
			x: ⲆⲆⵠᐃ,
			y: ⲆΔⵠΔ,
			a: Δᐃᐃ,
			r: Math.PI / ⵠᐃⵠΔᐃ,
			c: [Δ[314], "#6ad9e8", Δ[116], "#95e9f5", "#022320", "#011e19", Δ[93]]
		}], .15, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ΔᐃᐃᐃⲆΔᐃ] = ΔⵠΔᐃ(1, [{
			f: ⵠΔⲆᐃⲆⵠΔ,
			x: ᐃΔⲆⵠ,
			y: ⵠⲆᐃ,
			a: ⲆⲆⲆᐃ,
			r: Math.PI / ⵠⵠΔΔⲆ,
			c: [Δ[314], Δ[321], Δ[208], "#cc81e7", Δ[170], Δ[534], Δ[93]]
		}], .15, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.Ⲇᐃᐃⵠⵠⵠⵠ] = ΔⵠΔᐃ(1, [{
			f: ᐃⵠΔⵠⲆ,
			x: -Δᐃᐃⵠ,
			y: 5,
			a: 1,
			r: -Math.PI / 5,
			c: [Δ[314], Δ[391], Δ[314], Δ[573], Δ[92], Δ[573], Δ[92]]
		}], .45, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⵠΔΔⲆⲆΔⲆ] = ΔⵠΔᐃ(1, [{
			f: ᐃⵠΔⵠⲆ,
			x: -ΔΔᐃᐃ,
			y: ⲆΔⵠᐃⵠ,
			a: 1,
			r: -Math.PI / ⵠⵠΔⲆ,
			c: [Δ[314], Δ[391], Δ[314], Δ[573], Δ[92], Δ[318], Δ[175]]
		}], .45, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆⲆⲆᐃ] = ΔⵠΔᐃ(ⵠⵠⵠΔ, [{
			f: ᐃⵠΔⵠⲆ,
			x: -2,
			y: ⵠᐃᐃⵠᐃ,
			a: ⵠⵠⵠΔ,
			r: -Math.PI / 5,
			c: [Δ[314], Δ[391], Δ[314], Δ[301], Δ[305], Δ[277], Δ[427]]
		}], .45, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠΔⵠⲆ] = ΔⵠΔᐃ(1, [{
			f: ᐃⵠΔⵠⲆ,
			x: -2,
			y: ᐃᐃⲆΔΔ,
			a: ⵠⲆⲆⲆ,
			r: -Math.PI / 5,
			c: [Δ[314], Δ[391], Δ[314], Δ[170], Δ[534], Δ[77], Δ[116]]
		}], .45, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⵠⵠΔ] = ΔⵠΔᐃ(1, [{
			f: ᐃⵠΔⵠⲆ,
			x: -2,
			y: ΔⵠⲆᐃⵠ,
			a: Δᐃᐃ,
			r: -Math.PI / 5,
			c: [Δ[314], Δ[391], Δ[314], Δ[170], Δ[534], Δ[321], Δ[208]]
		}], .45, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆΔΔᐃⲆᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆΔΔᐃⲆᐃⵠ][0] = ΔⲆ.ΔᐃⵠΔΔΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔΔᐃⲆᐃⵠ][ⲆⵠΔⲆ] = ΔⲆ.ΔⲆΔᐃⲆΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔΔᐃⲆᐃⵠ][2] = ΔⲆ.ⵠⲆⲆΔⲆᐃᐃ;
		Ⲇⵠ[ⵠ.ΔⵠⲆΔΔⲆⵠ] = Ⲇⵠ[ⵠ.ⲆΔΔᐃⲆᐃⵠ];
		Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⵠΔⲆ] = Ⲇⵠ[ⵠ.ⲆΔΔᐃⲆᐃⵠ];
		Ⲇⵠ[ⵠ.ⵠⵠⵠᐃⵠⵠΔ] = ΔⵠΔᐃ(ᐃΔⵠΔ, [{
			f: ⵠⵠⲆᐃᐃᐃᐃ,
			x: -ⵠⵠⲆⵠ,
			y: -5,
			a: ΔⲆΔᐃ,
			r: 0,
			c: [Δ[402], Δ[276], Δ[215]]
		}], .23, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⵠⵠⵠᐃᐃⵠΔ] = ΔⵠΔᐃ(1, [{
			f: ΔⲆⵠᐃⵠ,
			x: -5,
			y: -5,
			a: ⵠⵠᐃ,
			r: 0,
			c: ["#282823", "#877c2d", Δ[277]]
		}], .43, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⲆⵠⲆΔⵠΔⲆ] = ΔⵠΔᐃ(1, [{
			f: ᐃⲆⵠⲆⵠ,
			x: -ⵠᐃᐃⵠᐃ,
			y: -ⵠᐃᐃⵠᐃ,
			a: ⲆΔᐃΔ,
			r: 0,
			c: [Δ[528], Δ[367], Δ[216]]
		}], .33, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⵠΔΔⵠⲆᐃⵠ] = ΔⵠΔᐃ(ⵠΔⲆ, [{
			f: ⲆⲆᐃᐃⲆᐃⲆ,
			x: 0,
			y: -ⲆΔⵠᐃⵠ,
			a: 1,
			r: Math.PI / 2.5,
			c: [Δ[573], Δ[92]]
		}], .3, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⵠⵠΔⵠⲆⲆΔ] = Ⲇⵠ[ⵠ.ΔᐃⵠⵠⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ΔⵠᐃΔⲆᐃⲆ] = Ⲇⵠ[ⵠ.ΔⲆⵠⵠⲆΔⲆ];
		Ⲇⵠ[ⵠ.ΔΔΔΔΔᐃⲆ] = Ⲇⵠ[ⵠ.ᐃⲆΔⵠΔⵠⲆ];
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃΔⲆⵠ] = Ⲇⵠ[ⵠ.ⲆᐃΔᐃᐃΔⲆ];
		Ⲇⵠ[ⵠ.ᐃⲆⲆⲆⵠᐃⲆ] = Ⲇⵠ[ⵠ.ΔᐃᐃᐃⲆΔᐃ];
		Ⲇⵠ[ⵠ.ᐃⲆⲆΔⵠᐃᐃ] = Ⲇⵠ[ⵠ.Ⲇᐃᐃⵠⵠⵠⵠ];
		Ⲇⵠ[ⵠ.ᐃⲆΔⲆᐃⵠⲆ] = Ⲇⵠ[ⵠ.ⵠΔΔⲆⲆΔⲆ];
		Ⲇⵠ[ⵠ.ΔⲆⵠⵠⵠᐃⲆ] = Ⲇⵠ[ⵠ.ⵠΔⵠⲆⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ᐃⵠΔᐃⵠⲆⲆ] = Ⲇⵠ[ⵠ.ⲆᐃᐃⵠΔⵠⲆ];
		Ⲇⵠ[ⵠ.ᐃᐃΔⲆᐃΔΔ] = Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⵠⵠΔ];
		Ⲇⵠ[ⵠ.ⲆⵠⲆΔⵠⵠⲆ] = ΔⵠΔᐃ(1, [{
			f: ΔⲆᐃΔⲆᐃⲆΔΔ,
			x: 0,
			y: 0,
			a: 1,
			r: 0
		}], .4, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠᐃΔΔⲆᐃⲆ] = ΔⵠΔᐃ(1, [{
			f: ΔΔⵠⵠⲆⲆᐃ,
			x: ⵠⲆΔⵠ,
			y: ⵠⵠΔΔ,
			a: ᐃⲆΔ,
			r: ⵠΔⵠⲆ,
			c: [Δ[314], Δ[573], Δ[92], "#756e52", "#663f22", "#9e9577"]
		}], .45, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠᐃⵠⵠⵠⲆⲆ] = Ⲇⵠ[ⵠ.ⵠᐃΔΔⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ΔⵠΔⲆⲆⵠΔ] = ΔⵠΔᐃ(1, [{
			f: ᐃⵠⲆⲆΔᐃΔ,
			x: -2,
			y: -Δⵠᐃᐃ,
			a: ΔⵠⲆ,
			r: ⲆⲆᐃΔ,
			c: [Δ[314], Δ[567], Δ[307], Δ[456], Δ[52], Δ[201]]
		}], .4, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ᐃᐃΔΔⵠⵠⲆ] = Ⲇⵠ[ⵠ.ΔⵠΔⲆⲆⵠΔ];
		Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆⲆΔ] = ΔⵠΔᐃ(ⲆⵠⲆ, [{
			f: ⲆⲆΔᐃⵠΔⵠ,
			x: 0,
			y: ⵠΔΔᐃ,
			a: 1,
			r: ΔᐃΔ,
			c: [Δ[314], Δ[331], Δ[74], Δ[296], Δ[336], Δ[148], Δ[418]]
		}], .4, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆᐃᐃᐃ] = Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆⲆΔ];
		Ⲇⵠ[ⵠ.ΔⲆΔΔⵠΔΔ] = ΔⵠΔᐃ(ᐃⲆΔ, [{
			f: ᐃⵠⲆⲆΔᐃΔ,
			x: 0,
			y: ⵠⵠΔΔ,
			a: ΔΔⲆΔ,
			r: ⲆᐃⲆ,
			c: [Δ[314], Δ[502], Δ[208], Δ[446], Δ[324], Δ[469]]
		}], .4, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔᐃⲆⲆΔⵠⲆ] = Ⲇⵠ[ⵠ.ΔⲆΔΔⵠΔΔ];
		Ⲇⵠ[ⵠ.ⵠᐃΔⵠΔⲆⵠ] = ΔⵠΔᐃ(1, [{
			f: ⵠⵠΔⵠΔᐃⲆ,
			x: 0,
			y: ⵠᐃΔ,
			a: 1,
			r: ⲆΔⵠΔ,
			c: [Δ[314], Δ[293], Δ[265], Δ[339], Δ[291], Δ[500]]
		}], .4, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔᐃᐃΔⲆⵠⲆ] = Ⲇⵠ[ⵠ.ⵠᐃΔⵠΔⲆⵠ];
		Ⲇⵠ[ⵠ.ⵠⵠΔΔⲆⵠⲆ] = ΔⵠΔᐃ(1, [{
			f: ⵠᐃᐃΔⵠΔΔ,
			x: 0,
			y: ᐃⲆⵠΔ,
			a: 1,
			r: ⲆΔⵠΔ,
			c: [Δ[314], Δ[325], Δ[531], Δ[90], Δ[531], Δ[325]]
		}], .45, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃᐃΔⲆ] = Ⲇⵠ[ⵠ.ⵠⵠΔΔⲆⵠⲆ];
		Ⲇⵠ[ⵠ.ΔⲆᐃᐃᐃΔⵠ] = ΔⵠΔᐃ(1, [{
			f: ΔᐃΔᐃⵠᐃΔ,
			x: ⵠⲆⵠ,
			y: 0,
			a: ⵠⵠᐃ,
			r: 0,
			c: [Δ[314], Δ[175], Δ[318], Δ[325], Δ[531], Δ[90], Δ[531], Δ[325]]
		}], .35, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⵠΔⵠ] = Ⲇⵠ[ⵠ.ΔⲆᐃᐃᐃΔⵠ];
		Ⲇⵠ[ⵠ.ⲆΔⵠΔΔⵠᐃ] = ΔⵠΔᐃ(1, [{
			f: ᐃΔΔⵠⵠⵠⵠ,
			x: ⵠⵠΔΔ,
			y: 0,
			a: ⲆΔᐃ,
			r: ⲆΔⵠΔ,
			c: [Δ[314], Δ[175], Δ[318], Δ[293], Δ[265], Δ[339], Δ[291], Δ[500]]
		}], .35, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆΔΔΔΔⲆᐃ] = Ⲇⵠ[ⵠ.ⲆΔⵠΔΔⵠᐃ];
		Ⲇⵠ[ⵠ.ᐃⲆⲆⲆᐃᐃⵠ] = ΔⵠΔᐃ(1, [{
			f: ᐃΔΔⵠⵠⵠⵠ,
			x: Ⲇᐃⵠⵠ,
			y: 0,
			a: 1,
			r: 0,
			c: [Δ[314], "#7d8b90", "#9facaa", Δ[331], Δ[74], Δ[296], Δ[336], Δ[148], Δ[418]]
		}], .35, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔⵠΔΔΔⵠⲆ] = Ⲇⵠ[ⵠ.ᐃⲆⲆⲆᐃᐃⵠ];
		Ⲇⵠ[ⵠ.ⲆΔΔΔⵠᐃΔ] = ΔⵠΔᐃ(1, [{
			f: ΔⵠⵠⲆΔⵠΔ,
			x: ΔᐃΔ,
			y: ⵠΔⵠⲆ,
			a: 1,
			r: 0,
			c: [Δ[314], Δ[175], Δ[318], Δ[567], Δ[307], Δ[456], Δ[52], Δ[201]]
		}], .35, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠⲆΔⲆᐃⲆᐃ] = Ⲇⵠ[ⵠ.ⲆΔΔΔⵠᐃΔ];
		Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃⲆⵠ] = ΔⵠΔᐃ(ΔⲆΔᐃ, [{
			f: ΔⵠⵠⲆΔⵠΔ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: [Δ[314], Δ[175], Δ[318], Δ[502], Δ[208], Δ[446], Δ[324], Δ[469]]
		}], .35, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔⵠᐃ] = Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃⲆⵠ];
		Ⲇⵠ[ⵠ.ΔⵠⵠᐃᐃΔⵠ] = ΔⵠΔᐃ(ⵠⲆⲆⲆ, [{
			f: ⵠΔᐃⲆᐃⲆⵠ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: [Δ[314], Δ[438], Δ[285], "#644928", Δ[285], "#735534"]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ᐃΔⵠⵠᐃⵠᐃ] = Ⲇⵠ[ⵠ.ΔⵠⵠᐃᐃΔⵠ];
		Ⲇⵠ[ⵠ.ⵠᐃⵠⲆΔⲆⲆ] = ΔⵠΔᐃ(ⵠΔΔ, [{
			f: ⲆΔⵠΔⵠ,
			x: 0,
			y: ⵠⵠΔΔ,
			a: 1,
			r: ⲆⲆⵠⲆ,
			c: [Δ[314], Δ[567], Δ[307], Δ[456], Δ[201], Δ[52]]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠΔⲆⵠⵠⲆᐃ] = Ⲇⵠ[ⵠ.ⵠᐃⵠⲆΔⲆⲆ];
		Ⲇⵠ[ⵠ.ᐃΔᐃΔⵠᐃⵠ] = ΔⵠΔᐃ(ΔⵠⲆ, [{
			f: ⲆΔⵠΔⵠ,
			x: 0,
			y: 0,
			a: ᐃⵠⵠ,
			r: ΔᐃΔ,
			c: [Δ[314], Δ[502], Δ[208], Δ[446], Δ[324], Δ[469]]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔᐃΔΔᐃⵠᐃ] = Ⲇⵠ[ⵠ.ᐃΔᐃΔⵠᐃⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆᐃΔΔⵠⵠ] = ΔⵠΔᐃ(ⵠΔⲆ, [{
			f: ⵠᐃᐃⵠⵠᐃⵠ,
			x: ⵠⵠΔᐃ,
			y: ⵠΔⵠⲆ,
			a: 1,
			r: ⵠⲆΔⵠ,
			c: [Δ[314], Δ[293], Δ[265], Δ[339], "#9a8636", Δ[500]]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔᐃᐃ] = Ⲇⵠ[ⵠ.ⲆⲆᐃΔΔⵠⵠ];
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆⲆΔ] = ΔⵠΔᐃ(1, [{
			f: ⵠΔⲆΔᐃΔⲆ,
			x: ⵠΔΔᐃ,
			y: 0,
			a: 1,
			r: ⲆΔⵠΔ,
			c: [Δ[314], Δ[331], Δ[74], Δ[296], Δ[336], Δ[148], Δ[418]]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔᐃᐃⵠⲆⲆⲆ] = Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆⲆΔ];
		Ⲇⵠ[ⵠ.ⵠΔΔΔᐃᐃⲆ] = ΔⵠΔᐃ(ⵠΔΔ, [{
			f: ᐃΔᐃⲆᐃᐃΔ,
			x: ⵠᐃⵠⵠ,
			y: ΔⲆⲆⵠ,
			a: ⵠⵠⵠΔ,
			r: 0,
			c: [Δ[317], "#9e8838", Δ[164], Δ[438], Δ[246], Δ[246], Δ[246], Δ[164], Δ[164], Δ[164]]
		}], .35, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆⲆⲆΔ] = Ⲇⵠ[ⵠ.ⵠΔΔΔᐃᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆΔⲆᐃᐃΔⵠ] = ΔⵠΔᐃ(ⲆΔᐃ, [{
			f: ΔⵠⲆΔⵠⵠᐃ,
			x: ⲆΔⵠΔ,
			y: -ΔΔⲆᐃ,
			a: 1,
			r: Δⵠⵠ,
			c: ["#dd5d57", Δ[153], "#5e5d5e", Δ[153]]
		}], 1.4, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠᐃᐃΔᐃⵠΔ] = ΔⵠΔᐃ(ΔΔⲆΔ, [{
			f: ΔⵠⲆΔⵠⵠᐃ,
			x: ⲆⲆⵠⲆ,
			y: -ΔⲆΔΔ,
			a: 1,
			r: ⲆΔⵠΔ,
			c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
		}], 1.4, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ᐃⵠΔⲆΔᐃᐃ] = Ⲇⵠ[ⵠ.ⵠᐃᐃΔᐃⵠΔ];
		Ⲇⵠ[ⵠ.ⵠⵠΔΔᐃΔᐃ] = ΔⵠΔᐃ(1, [{
			f: ⵠΔⲆΔᐃⲆⵠ,
			x: -ⲆΔⲆΔ,
			y: -3,
			a: ⲆⵠⲆ,
			r: 0,
			c: ["#cec0c4", Δ[153], "#6d6768"]
		}], .9, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔᐃⵠᐃⲆᐃᐃ] = ΔⵠΔᐃ(1, [{
			f: ⵠΔⲆΔᐃⲆⵠ,
			x: -3,
			y: -3,
			a: ⵠΔⲆ,
			r: 0,
			c: ["#d4e9ec", "#37b1d7", "#506c71"]
		}], .9, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃᐃΔ] = Ⲇⵠ[ⵠ.ΔᐃⵠᐃⲆᐃᐃ];
		Ⲇⵠ[ⵠ.ⲆᐃΔⵠΔⵠᐃ] = ΔⵠΔᐃ(ⵠΔⲆ, [{
			f: ᐃⲆΔⵠᐃΔⵠ,
			x: -3,
			y: -ΔⵠⲆⲆ,
			a: ⵠΔᐃ,
			r: 0,
			c: ["#ef96be", Δ[153]]
		}], .5, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃⲆⵠ] = ΔⵠΔᐃ(1, [{
			f: ᐃⲆΔⵠᐃΔⵠ,
			x: -3,
			y: -3,
			a: ᐃΔⵠΔ,
			r: 0,
			c: ["#55423e", Δ[153]]
		}], .5, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⵠΔᐃⲆΔᐃⲆ] = ΔⵠΔᐃ(1, [{
			f: ᐃᐃⲆΔⲆΔⵠ,
			x: ⵠᐃⵠⵠ,
			y: ⵠᐃⵠⵠ,
			a: ⵠⲆⲆⲆ,
			r: ⵠᐃⵠⵠ,
			c: [Δ[153], "#e7e2e2", "#b35c46", "#a34d37"]
		}], .25, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ΔⲆᐃⵠⲆⵠⲆ] = ΔⵠΔᐃ(ⵠΔΔ, [{
			f: ᐃᐃⲆΔⲆΔⵠ,
			x: ⵠⲆᐃ,
			y: ⵠⵠΔᐃ,
			a: 1,
			r: 0,
			c: ["#14151b", Δ[391], "#b35c46", "#a34d37"]
		}], .25, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⵠΔΔⵠⲆⲆⲆ] = ΔⵠΔᐃ(ⵠΔⲆ, [{
			f: ᐃⲆΔⵠᐃΔⵠ,
			x: 0,
			y: ᐃΔΔ,
			a: ᐃⲆⲆ,
			r: ⲆᐃⲆ,
			c: ["#201851", "#b6222a"]
		}], .5, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ᐃΔΔΔⲆΔΔ] = ΔⵠΔᐃ(ⲆΔᐃ, [{
			f: ᐃⲆΔⵠᐃΔⵠ,
			x: -ⵠᐃⲆᐃ,
			y: -3,
			a: ⵠⵠᐃ,
			r: 0,
			c: ["#231f20", "#b6222a"]
		}], .5, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⵠΔΔⵠΔⲆⵠ] = ΔⵠΔᐃ(ᐃΔⵠΔ, [{
			f: ᐃⲆΔⵠᐃΔⵠ,
			x: -3,
			y: -ⵠᐃⵠΔ,
			a: 1,
			r: 0,
			c: [Δ[153], "#b6222a"]
		}], .5, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃΔⵠⵠ] = ΔⵠΔᐃ(Δᐃᐃ, [{
			f: ΔⲆⲆⲆⵠⲆⲆ,
			x: 0,
			y: Δⵠⵠ,
			a: 1,
			r: ⵠⲆⵠ,
			c: [Δ[41], Δ[281], Δ[409], Δ[558]]
		}], .4, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⵠⵠⲆⲆᐃᐃᐃ] = Ⲇⵠ[ⵠ.ΔⵠⲆᐃΔⵠⵠ];
		Ⲇⵠ[ⵠ.ᐃⵠᐃᐃⵠⲆΔ] = ΔⵠΔᐃ(ᐃⵠⵠ, [{
			f: ΔΔⲆΔΔᐃⲆ,
			x: ⵠⵠΔΔ,
			y: 0,
			a: 1,
			r: ⵠⵠΔᐃ,
			c: [Δ[409], Δ[558], Δ[41], Δ[281]]
		}], .4, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⲆⵠⵠ] = Ⲇⵠ[ⵠ.ᐃⵠᐃᐃⵠⲆΔ];
		Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔᐃΔ] = ΔⵠΔᐃ(1, [{
			f: ΔⲆᐃᐃⵠⲆⵠ,
			x: ⵠΔⵠⲆ,
			y: 0,
			a: ⵠⲆⲆⲆ,
			r: ⵠⲆⵠ,
			c: [Δ[539], "#dee7e7", "#b8cccb", Δ[153], "#e3e8e8"]
		}], .4, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆⵠΔΔⵠΔⵠ] = Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔᐃΔ];
		Ⲇⵠ[ⵠ.ΔⲆᐃᐃⲆⲆⲆ] = ΔⵠΔᐃ(ᐃⵠⵠ, [{
			f: ᐃᐃⲆⵠⲆⲆΔ,
			x: ⵠΔⵠⲆ,
			y: 5,
			a: 1,
			r: 0,
			c: [Δ[539], "#c5232c", "#84191d", "#a72027", Δ[349], Δ[262]]
		}], .35, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ᐃⲆΔΔⵠⵠΔ] = Ⲇⵠ[ⵠ.ΔⲆᐃᐃⲆⲆⲆ];
		Ⲇⵠ[ⵠ.ΔⲆᐃⵠⵠⲆΔ] = ΔⵠΔᐃ(1, [{
			f: ΔΔΔᐃⵠᐃᐃ,
			x: 0,
			y: 5,
			a: ⲆⵠⲆ,
			r: 0,
			c: [Δ[539], "#0f964c", "#106e3b", "#138344", Δ[349], Δ[262], "#C5232C", "#A92D2D"]
		}], .35, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆΔΔⲆⲆⵠΔ] = Ⲇⵠ[ⵠ.ΔⲆᐃⵠⵠⲆΔ];
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠᐃΔ] = ΔⵠΔᐃ(1, [{
			f: ΔΔΔⲆⲆⲆⲆᐃⵠ,
			x: -ΔΔᐃᐃ,
			y: -2,
			a: ᐃⵠⵠ,
			r: ᐃⲆⵠΔ,
			c: [Δ[153], "#cec0c4"]
		}], .35, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆᐃⵠⵠⲆᐃⲆ] = Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠᐃΔ];
		Ⲇⵠ[ⵠ.ⵠΔⲆⵠᐃⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⲆⵠᐃⵠᐃ][ΔᐃΔ] = ΔⲆ.ⵠᐃΔᐃⲆⵠⲆ;
		Ⲇⵠ[ⵠ.ⵠΔⲆⵠᐃⵠᐃ][1] = ΔⲆ.ᐃⵠΔⵠΔⵠᐃ;
		Ⲇⵠ[ⵠ.ⵠΔⲆⵠᐃⵠᐃ][2] = ΔⲆ.ⲆⲆⵠⲆᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆⵠᐃⵠΔⲆⲆ] = Ⲇⵠ[ⵠ.ⵠΔⲆⵠᐃⵠᐃ];
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔⲆⵠΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔⲆⵠΔ][0] = ΔⲆ.ⵠⵠΔᐃΔΔᐃ;
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔⲆⵠΔ][1] = ΔⲆ.ΔᐃΔΔⲆⵠⲆ;
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔⲆⵠΔ][2] = ΔⲆ.ⵠⵠᐃΔⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ⵠΔⵠⵠⲆⲆⲆ] = Ⲇⵠ[ⵠ.ᐃⵠⲆΔⲆⵠΔ];
		Ⲇⵠ[ⵠ.ⲆΔⵠᐃΔⲆΔ] = Ⲇⵠ[ⵠ.ᐃⵠⲆΔⲆⵠΔ];
		Ⲇⵠ[ⵠ.ΔΔⲆⵠⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔΔⲆⵠⲆⲆᐃ][0] = ΔⲆ.ᐃⵠⵠᐃⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ΔΔⲆⵠⲆⲆᐃ][1] = ΔⲆ.ΔⵠⵠᐃⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ΔΔⲆⵠⲆⲆᐃ][2] = ΔⲆ.ⲆΔΔΔⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ⵠⲆᐃᐃⵠᐃᐃ] = Ⲇⵠ[ⵠ.ΔΔⲆⵠⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ΔⲆᐃᐃΔⲆᐃ] = Ⲇⵠ[ⵠ.ΔΔⲆⵠⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ΔᐃΔᐃⵠᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ΔᐃΔᐃⵠᐃᐃ][ᐃⲆⵠΔ] = ΔⲆ.ᐃⲆⲆⵠΔⵠⵠ;
		Ⲇⵠ[ⵠ.ΔᐃΔᐃⵠᐃᐃ][1] = ΔⲆ.ᐃⲆⲆⵠΔⵠⵠ;
		Ⲇⵠ[ⵠ.ΔᐃΔᐃⵠᐃᐃ][2] = ΔⲆ.ᐃⲆⲆⵠΔⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆⲆᐃᐃⲆΔΔ] = Ⲇⵠ[ⵠ.ΔᐃΔᐃⵠᐃᐃ];
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔⵠⵠ][0] = ΔⲆ.ⵠᐃⲆᐃΔⲆᐃ;
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔⵠⵠ][ⵠΔᐃ] = ΔⲆ.ΔⲆⲆᐃΔⲆⲆ;
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔⵠⵠ][2] = ΔⲆ.ᐃΔⲆΔᐃⵠⲆ;
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆⵠᐃ] = Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔⵠⵠ];
		Ⲇⵠ[ⵠ.ᐃΔⵠⵠⲆΔᐃ] = Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔⵠⵠ];
		Ⲇⵠ[ⵠ.ΔⲆⲆΔΔΔᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⲆΔΔΔᐃ][ΔᐃΔ] = ΔⲆ.ΔⵠⲆⲆⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ΔⲆⲆΔΔΔᐃ][ⵠⵠⵠΔ] = ΔⲆ.ΔⵠⲆⲆⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ΔⲆⲆΔΔΔᐃ][ΔⲆⲆⵠ] = ΔⲆ.ΔⵠⲆⲆⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆᐃΔⲆⲆ] = Ⲇⵠ[ⵠ.ΔⲆⲆΔΔΔᐃ];
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⲆᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⲆᐃⲆ][0] = ΔⲆ.ⲆⲆΔΔΔⲆⲆⵠΔ;
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⲆᐃⲆ][ⵠⵠⵠΔ] = ΔⲆ.ⵠΔⲆΔᐃⵠⵠⲆⲆ;
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⲆᐃⲆ][2] = ΔⲆ.ΔⲆⲆⵠⲆⲆᐃⲆΔ;
		Ⲇⵠ[ⵠ.ᐃⲆᐃⵠΔⲆᐃ] = Ⲇⵠ[ⵠ.ᐃⲆΔⵠⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠᐃⲆ] = Ⲇⵠ[ⵠ.ᐃⲆΔⵠⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠΔΔ][ΔΔⲆⲆ] = ΔⲆ.ΔᐃⲆⲆΔᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠΔΔ][1] = ΔⲆ.ΔⲆⵠⵠᐃΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠΔΔ][ᐃΔⲆⵠ] = ΔⲆ.ᐃᐃᐃΔⲆⲆⵠ;
		Ⲇⵠ[ⵠ.ⵠΔⵠΔᐃΔⵠ] = Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠΔΔ];
		Ⲇⵠ[ⵠ.ⲆⵠⵠⵠΔΔⲆ] = Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠΔΔ];
		Ⲇⵠ[ⵠ.ᐃⲆᐃⲆⲆⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆᐃⲆⲆⲆⵠ][0] = ΔⲆ.ⵠⵠᐃΔᐃΔⲆ;
		Ⲇⵠ[ⵠ.ᐃⲆᐃⲆⲆⲆⵠ][ⲆⵠΔⲆ] = ΔⲆ.ⵠⵠⵠᐃⵠⵠⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆᐃⲆⲆⲆⵠ][Ⲇⵠᐃⵠ] = ΔⲆ.ⵠⵠᐃⵠⲆⵠΔ;
		Ⲇⵠ[ⵠ.ΔⵠᐃΔᐃⲆΔ] = Ⲇⵠ[ⵠ.ᐃⲆᐃⲆⲆⲆⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆᐃᐃΔⵠΔ] = Ⲇⵠ[ⵠ.ᐃⲆᐃⲆⲆⲆⵠ];
		Ⲇⵠ[ⵠ.ᐃᐃᐃⲆΔⵠΔ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃᐃⲆΔⵠΔ][ⵠᐃΔ] = ΔⲆ.ⵠⵠᐃᐃⲆΔᐃ;
		Ⲇⵠ[ⵠ.ᐃᐃᐃⲆΔⵠΔ][ΔⵠⲆ] = ΔⲆ.ᐃᐃΔᐃᐃᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃᐃᐃⲆΔⵠΔ][2] = ΔⲆ.ᐃⲆᐃΔⲆΔⵠ;
		Ⲇⵠ[ⵠ.ⲆⲆⲆⲆⵠᐃⲆ] = Ⲇⵠ[ⵠ.ᐃᐃᐃⲆΔⵠΔ];
		Ⲇⵠ[ⵠ.ⲆⵠᐃⲆⲆᐃⲆ] = Ⲇⵠ[ⵠ.ᐃᐃᐃⲆΔⵠΔ];
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃΔΔⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃΔΔⲆ][ⵠⵠΔᐃ] = ΔⲆ.ᐃᐃⲆⲆⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃΔΔⲆ][ⵠΔᐃ] = ΔⲆ.ⲆᐃᐃᐃⵠⵠΔ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃΔΔⲆ][Ⲇⵠᐃⵠ] = ΔⲆ.ⵠⵠⵠᐃⲆⵠΔ;
		Ⲇⵠ[ⵠ.ⲆΔΔᐃⵠΔⲆ] = Ⲇⵠ[ⵠ.ⵠᐃⲆᐃΔΔⲆ];
		Ⲇⵠ[ⵠ.ⵠⵠⲆᐃΔΔᐃ] = Ⲇⵠ[ⵠ.ⵠᐃⲆᐃΔΔⲆ];
		Ⲇⵠ[ⵠ.ᐃⲆⲆΔⲆⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⲆΔⲆⲆⲆ][0] = ΔⲆ.ⵠΔᐃⵠⵠΔⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆⲆΔⲆⲆⲆ][ⵠⵠᐃ] = ΔⲆ.ⲆⵠⲆⲆᐃⵠᐃ;
		Ⲇⵠ[ⵠ.ᐃⲆⲆΔⲆⲆⲆ][ⵠⲆⵠΔ] = ΔⲆ.ⵠΔⲆᐃΔⲆⲆ;
		Ⲇⵠ[ⵠ.ⵠᐃΔΔⲆⵠᐃ] = Ⲇⵠ[ⵠ.ᐃⲆⲆΔⲆⲆⲆ];
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔⲆΔ] = Ⲇⵠ[ⵠ.ᐃⲆⲆΔⲆⲆⲆ];
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔΔⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔΔⲆⵠ][ᐃΔΔ] = ΔⲆ.ΔΔⵠΔⲆΔⲆ;
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔΔⲆⵠ][Δᐃᐃ] = ΔⲆ.ⵠⵠⵠᐃⲆⲆΔ;
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔΔⲆⵠ][2] = ΔⲆ.ᐃⵠΔᐃⲆΔⲆ;
		Ⲇⵠ[ⵠ.ΔΔᐃⵠⵠⲆⵠ] = Ⲇⵠ[ⵠ.ᐃⲆᐃΔΔⲆⵠ];
		Ⲇⵠ[ⵠ.ᐃΔⲆΔΔΔᐃ] = Ⲇⵠ[ⵠ.ᐃⲆᐃΔΔⲆⵠ];
		Ⲇⵠ[ⵠ.ᐃⲆⵠΔΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⵠΔΔⵠᐃ][0] = ΔⲆ.ⲆⵠᐃᐃΔⵠΔ;
		Ⲇⵠ[ⵠ.ᐃⲆⵠΔΔⵠᐃ][1] = ΔⲆ.ⲆⵠΔΔᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆⵠΔΔⵠᐃ][2] = ΔⲆ.ᐃᐃⲆⵠΔΔΔ;
		Ⲇⵠ[ⵠ.ⲆⲆⵠⵠΔⵠᐃ] = Ⲇⵠ[ⵠ.ᐃⲆⵠΔΔⵠᐃ];
		Ⲇⵠ[ⵠ.ⲆΔᐃᐃⵠⵠⵠ] = Ⲇⵠ[ⵠ.ᐃⲆⵠΔΔⵠᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⲆΔⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆΔⲆΔⲆⲆ][0] = ΔⲆ.ᐃᐃᐃᐃⲆᐃΔ;
		Ⲇⵠ[ⵠ.ⲆⲆΔⲆΔⲆⲆ][1] = ΔⲆ.ΔᐃⲆΔⵠΔᐃ;
		Ⲇⵠ[ⵠ.ⲆⲆΔⲆΔⲆⲆ][ΔⲆⲆⵠ] = ΔⲆ.ΔᐃⵠⲆΔᐃΔ;
		Ⲇⵠ[ⵠ.ᐃΔⵠΔⵠⵠⲆ] = Ⲇⵠ[ⵠ.ⲆⲆΔⲆΔⲆⲆ];
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃΔᐃΔ] = Ⲇⵠ[ⵠ.ⲆⲆΔⲆΔⲆⲆ];
		Ⲇⵠ[ⵠ.ᐃᐃⲆᐃᐃⵠΔ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃⲆᐃᐃⵠΔ][ᐃΔΔ] = ΔⲆ.ⵠᐃⵠᐃⲆΔΔ;
		Ⲇⵠ[ⵠ.ᐃᐃⲆᐃᐃⵠΔ][ᐃⲆΔ] = ΔⲆ.ᐃᐃⲆᐃᐃΔᐃ;
		Ⲇⵠ[ⵠ.ᐃᐃⲆᐃᐃⵠΔ][2] = ΔⲆ.ΔⲆⲆΔⵠⵠⲆ;
		Ⲇⵠ[ⵠ.ΔᐃⲆΔΔΔΔ] = Ⲇⵠ[ⵠ.ᐃᐃⲆᐃᐃⵠΔ];
		Ⲇⵠ[ⵠ.ΔⵠΔⵠᐃᐃΔ] = Ⲇⵠ[ⵠ.ᐃᐃⲆᐃᐃⵠΔ];
		Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠ][0] = ΔⲆ.ⵠᐃⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠ][ⵠΔⲆ] = ΔⲆ.ⵠᐃⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠ][2] = ΔⲆ.ⵠᐃⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃᐃⵠᐃΔⵠⵠⵠ] = Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠ];
		Ⲇⵠ[ⵠ.ⵠⵠᐃⵠⵠⵠᐃ] = Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠ];
		Ⲇⵠ[ⵠ.ᐃᐃⵠΔⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃⵠΔⲆ][0] = ΔⲆ.ᐃᐃⵠΔⲆ;
		Ⲇⵠ[ⵠ.ᐃᐃⵠΔⲆ][ⵠΔⲆ] = ΔⲆ.ᐃᐃⵠΔⲆ;
		Ⲇⵠ[ⵠ.ᐃᐃⵠΔⲆ][ΔΔᐃᐃ] = ΔⲆ.ᐃᐃⵠΔⲆ;
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆᐃᐃᐃⵠⲆ] = Ⲇⵠ[ⵠ.ᐃᐃⵠΔⲆ];
		Ⲇⵠ[ⵠ.ᐃᐃⲆᐃⲆⵠᐃ] = Ⲇⵠ[ⵠ.ᐃᐃⵠΔⲆ];
		Ⲇⵠ[ⵠ.ⲆΔⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⲆⲆᐃ][ⵠⵠΔᐃ] = ΔⲆ.ⲆΔⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⲆⲆᐃ][ᐃΔⵠΔ] = ΔⲆ.ⲆΔⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⲆⲆᐃ][2] = ΔⲆ.ⲆΔⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ΔⲆᐃΔΔΔΔᐃΔ] = Ⲇⵠ[ⵠ.ⲆΔⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ΔⵠⲆⲆΔⵠⲆ] = Ⲇⵠ[ⵠ.ⲆΔⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ᐃΔΔⲆΔ] = [];
		Ⲇⵠ[ⵠ.ᐃΔΔⲆΔ][ᐃⲆⵠΔ] = ΔⲆ.ᐃΔΔⲆΔ;
		Ⲇⵠ[ⵠ.ᐃΔΔⲆΔ][1] = ΔⲆ.ᐃΔΔⲆΔ;
		Ⲇⵠ[ⵠ.ᐃΔΔⲆΔ][2] = ΔⲆ.ᐃΔΔⲆΔ;
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠᐃΔⵠ] = Ⲇⵠ[ⵠ.ᐃΔΔⲆΔ];
		Ⲇⵠ[ⵠ.ΔᐃⲆⲆΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ΔᐃⲆⲆΔⵠᐃ][ⵠⲆⵠ] = ΔⲆ.ᐃⵠⵠⲆΔΔᐃ;
		Ⲇⵠ[ⵠ.ΔᐃⲆⲆΔⵠᐃ][ᐃⵠⵠ] = ΔⲆ.ΔⵠⲆᐃⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ΔᐃⲆⲆΔⵠᐃ][Ⲇⵠᐃⵠ] = ΔⲆ.ΔΔⵠⵠⵠⵠⲆ;
		Ⲇⵠ[ⵠ.ΔᐃΔⵠⲆΔⵠ] = Ⲇⵠ[ⵠ.ΔᐃⲆⲆΔⵠᐃ];
		Ⲇⵠ[ⵠ.ⲆᐃΔⵠⲆΔᐃ] = Ⲇⵠ[ⵠ.ΔᐃⲆⲆΔⵠᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⲆⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⲆⵠᐃ][0] = ΔⲆ.ᐃⲆᐃⵠᐃΔⲆ;
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⲆⵠᐃ][1] = ΔⲆ.ⲆΔᐃⲆⲆᐃΔ;
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⲆⵠᐃ][2] = ΔⲆ.ⲆᐃᐃΔΔᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆⵠᐃᐃⲆⵠⲆ] = Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⲆⵠᐃ];
		Ⲇⵠ[ⵠ.ΔΔΔΔⲆΔⵠ] = Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⲆⵠᐃ];
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆᐃⵠ][0] = ΔⲆ.ⲆⵠⲆⵠᐃΔΔ;
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆᐃⵠ][1] = ΔⲆ.ⲆⲆⵠᐃᐃᐃⵠ;
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆᐃⵠ][ⵠⲆⵠΔ] = ΔⲆ.ᐃⵠⲆᐃⲆⲆΔ;
		Ⲇⵠ[ⵠ.ΔⲆΔⲆⵠΔⵠ] = Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆᐃⵠ];
		Ⲇⵠ[ⵠ.ΔⵠᐃΔΔΔΔ] = Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆᐃⵠ];
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠⵠᐃ][ⵠᐃⵠⵠ] = ΔⲆ.ⵠⲆΔⲆΔᐃΔ;
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠⵠᐃ][ⵠⲆⲆⲆ] = ΔⲆ.ΔⵠᐃᐃⵠⲆⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠⵠᐃ][ᐃⵠΔⲆ] = ΔⲆ.ⵠᐃⵠⵠΔᐃΔ;
		Ⲇⵠ[ⵠ.ᐃᐃⵠΔⲆⵠᐃ] = Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠⵠᐃ];
		Ⲇⵠ[ⵠ.ᐃᐃᐃⵠᐃⵠⲆ] = Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠⵠᐃ];
		Ⲇⵠ[ⵠ.ᐃⲆΔⲆⵠΔΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆΔⲆⵠΔΔ][ΔΔⲆⲆ] = ΔⲆ.ΔΔΔⵠⲆⵠᐃ;
		Ⲇⵠ[ⵠ.ᐃⲆΔⲆⵠΔΔ][1] = ΔⲆ.Ⲇᐃⵠᐃⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ᐃⲆΔⲆⵠΔΔ][2] = ΔⲆ.ⲆᐃΔⲆᐃⵠⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆⲆᐃⲆᐃⵠ] = Ⲇⵠ[ⵠ.ᐃⲆΔⲆⵠΔΔ];
		Ⲇⵠ[ⵠ.ᐃΔⵠᐃᐃⲆⲆ] = Ⲇⵠ[ⵠ.ᐃⲆΔⲆⵠΔΔ];
		Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠⲆᐃ][ⵠⵠΔᐃ] = ΔⲆ.ⲆΔⲆⲆᐃⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠⲆᐃ][1] = ΔⲆ.ⵠⲆⲆᐃⵠᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠⲆᐃ][2] = ΔⲆ.ⲆᐃᐃᐃⵠⵠⲆ;
		Ⲇⵠ[ⵠ.ᐃᐃⵠⵠᐃⲆⵠ] = Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠⲆᐃ];
		Ⲇⵠ[ⵠ.ΔⲆΔⲆΔⲆⵠ] = Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠⲆᐃ];
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⲆⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⲆⲆⵠ][ⵠⵠΔΔ] = ΔⲆ.ⵠⲆΔⵠᐃᐃⵠⲆⲆ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⲆⲆⵠ][ⲆⲆⲆᐃ] = ΔⲆ.ⵠⵠᐃΔΔⵠᐃΔᐃ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⲆⲆⵠ][ΔⲆⲆⵠ] = ΔⲆ.ⲆⲆΔᐃΔΔΔⵠΔ;
		Ⲇⵠ[ⵠ.ᐃᐃᐃⲆⵠⵠⲆ] = Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⲆⲆⵠ];
		Ⲇⵠ[ⵠ.ΔΔⵠᐃΔᐃΔ] = Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⲆⲆⵠ];
		Ⲇⵠ[ⵠ.ⲆᐃΔⵠᐃΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃΔⵠᐃΔΔ][ⵠΔⵠⲆ] = ΔⲆ.ᐃⲆΔᐃΔᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃΔⵠᐃΔΔ][1] = ΔⲆ.ᐃΔⵠᐃΔᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃΔⵠᐃΔΔ][ΔⲆᐃⲆ] = ΔⲆ.ⵠⵠⲆⲆⲆᐃⲆ;
		Ⲇⵠ[ⵠ.ⵠᐃᐃⲆΔΔⲆ] = Ⲇⵠ[ⵠ.ⲆᐃΔⵠᐃΔΔ];
		Ⲇⵠ[ⵠ.ⵠᐃⵠⲆⵠⲆⲆ] = Ⲇⵠ[ⵠ.ⲆᐃΔⵠᐃΔΔ];
		Ⲇⵠ[ⵠ.ⲆᐃⵠΔᐃΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⵠΔᐃΔⵠ][0] = ΔⲆ.ΔᐃⲆΔΔⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃⵠΔᐃΔⵠ][1] = ΔⲆ.ⵠᐃⲆᐃᐃΔΔ;
		Ⲇⵠ[ⵠ.ⲆᐃⵠΔᐃΔⵠ][2] = ΔⲆ.ⵠΔⲆⲆⵠⵠⲆ;
		Ⲇⵠ[ⵠ.ⲆⵠᐃᐃⲆᐃⵠ] = Ⲇⵠ[ⵠ.ⲆᐃⵠΔᐃΔⵠ];
		Ⲇⵠ[ⵠ.ΔⵠᐃᐃⵠⵠΔ] = Ⲇⵠ[ⵠ.ⲆᐃⵠΔᐃΔⵠ];
		Ⲇⵠ[ⵠ.ⵠᐃᐃⵠΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃᐃⵠΔΔΔ][ⲆᐃⲆ] = ΔⲆ.ⲆⵠᐃⲆΔⲆⲆ;
		Ⲇⵠ[ⵠ.ⵠᐃᐃⵠΔΔΔ][1] = ΔⲆ.ΔⲆⲆⲆⲆΔΔ;
		Ⲇⵠ[ⵠ.ⵠᐃᐃⵠΔΔΔ][2] = ΔⲆ.ᐃᐃⵠΔⵠᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆᐃⵠΔΔⲆᐃ] = Ⲇⵠ[ⵠ.ⵠᐃᐃⵠΔΔΔ];
		Ⲇⵠ[ⵠ.ⵠΔᐃΔⵠⵠⲆ] = Ⲇⵠ[ⵠ.ⵠᐃᐃⵠΔΔΔ];
		Ⲇⵠ[ⵠ.ⲆΔⲆⲆⵠΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⲆⲆⵠΔΔ][ᐃⲆⵠΔ] = ΔⲆ.ΔⲆΔΔΔΔᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⲆⲆⵠΔΔ][ⲆⵠΔⲆ] = ΔⲆ.ⲆⵠΔᐃⵠᐃΔ;
		Ⲇⵠ[ⵠ.ⲆΔⲆⲆⵠΔΔ][ᐃΔⲆⵠ] = ΔⲆ.ⲆⲆΔΔⲆⵠᐃ;
		Ⲇⵠ[ⵠ.ΔⵠΔΔᐃⵠᐃ] = Ⲇⵠ[ⵠ.ⲆΔⲆⲆⵠΔΔ];
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆᐃᐃⲆ] = Ⲇⵠ[ⵠ.ⲆΔⲆⲆⵠΔΔ];
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃΔⲆΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃΔⲆΔ][ΔΔⲆⲆ] = ΔⲆ.ΔᐃᐃΔⵠᐃΔ;
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃΔⲆΔ][1] = ΔⲆ.ⵠⵠᐃΔΔΔⵠ;
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃΔⲆΔ][ⵠΔᐃⵠ] = ΔⲆ.ΔⵠⲆⵠⵠᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆᐃⵠⲆᐃᐃⲆ] = Ⲇⵠ[ⵠ.ᐃⵠⵠᐃΔⲆΔ];
		Ⲇⵠ[ⵠ.ΔΔⵠΔᐃⵠΔ] = Ⲇⵠ[ⵠ.ᐃⵠⵠᐃΔⲆΔ];
		Ⲇⵠ[ⵠ.ⲆΔᐃΔⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆΔᐃΔⵠᐃⲆ][0] = ΔⲆ.ᐃΔᐃᐃⵠΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔᐃΔⵠᐃⲆ][ⲆⲆⲆᐃ] = ΔⲆ.ⵠⲆᐃᐃⲆΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔᐃΔⵠᐃⲆ][2] = ΔⲆ.ᐃᐃΔᐃⵠⵠⲆ;
		Ⲇⵠ[ⵠ.ⵠΔᐃⲆⲆΔΔ] = Ⲇⵠ[ⵠ.ⲆΔᐃΔⵠᐃⲆ];
		Ⲇⵠ[ⵠ.ΔΔΔⲆᐃΔⵠ] = Ⲇⵠ[ⵠ.ⲆΔᐃΔⵠᐃⲆ];
		Ⲇⵠ[ⵠ.ᐃᐃⲆᐃⵠⲆⵠ] = ΔⵠΔᐃ(1, [{
			f: ᐃΔΔΔᐃΔᐃ,
			x: 0,
			y: ⲆΔⵠΔ,
			a: ⲆⲆⲆᐃ,
			r: 0,
			c: [Δ[314], "#515C57", "#3A4942", "#68736F", Δ[373], Δ[351], Δ[110], "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
		}, {
			f: ⵠⵠⵠΔⵠᐃⵠ,
			x: 0,
			y: ⲆᐃⲆ,
			a: 1,
			r: ⵠᐃΔⲆ,
			c: ["#e4c027"]
		}], .14, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔᐃⵠΔ] = Ⲇⵠ[ⵠ.ᐃᐃⲆᐃⵠⲆⵠ];
		Ⲇⵠ[ⵠ.ᐃⵠⲆᐃΔⲆⵠ] = ΔⵠΔᐃ(ᐃⲆΔ, [{
			f: ⲆⲆΔⲆⲆᐃⲆ,
			x: 0,
			y: 0,
			a: ⲆΔᐃ,
			r: ⵠⲆᐃ,
			c: [Δ[314], Δ[318], Δ[175], "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
		}], .18, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠⲆᐃΔⵠΔΔ] = Ⲇⵠ[ⵠ.ᐃⵠⲆᐃΔⲆⵠ];
		Ⲇⵠ[ⵠ.ΔⲆΔⲆΔⲆΔ] = ΔⵠΔᐃ(ΔⲆΔᐃ, [{
			f: ⵠⲆⲆᐃΔⲆⵠ,
			x: ⵠᐃΔⲆ,
			y: 0,
			a: 1,
			r: ⵠΔⵠⲆ,
			c: [Δ[314], Δ[313], Δ[152], "#261912", "#eee6c5", "#d1c599", Δ[313], Δ[152], "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", Δ[153], "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
		}], .32, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆΔΔⵠ] = Ⲇⵠ[ⵠ.ΔⲆΔⲆΔⲆΔ];
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃⵠⵠⲆ] = Ⲇⵠ[ⵠ.ΔⲆΔⲆΔⲆΔ];
		Ⲇⵠ[ⵠ.ⵠⵠⲆⵠᐃᐃⲆ] = ΔⵠΔᐃ(1, [{
			f: ᐃᐃⵠΔⵠᐃⲆ,
			x: ΔΔⲆⲆ,
			y: ⵠΔⵠⲆ,
			a: 1,
			r: ⵠᐃⵠⵠ,
			c: [Δ[314], Δ[551], Δ[298], Δ[210], Δ[551]]
		}], .17, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠⵠΔΔⲆⵠⵠ] = Ⲇⵠ[ⵠ.ⵠⵠⲆⵠᐃᐃⲆ];
		Ⲇⵠ[ⵠ.ⵠⵠᐃΔⲆᐃᐃ] = ΔⵠΔᐃ(ⵠΔᐃ, [{
			f: ⵠⲆⵠᐃⲆᐃᐃ,
			x: ΔⲆᐃⲆ,
			y: 0,
			a: 1,
			r: Math.PI / ⲆΔΔΔ,
			c: [Δ[314], Δ[350], Δ[454], Δ[210], Δ[551], Δ[551], Δ[298], Δ[ⲆᐃⲆⲆᐃ], Δ[69]]
		}], .12, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⵠΔⵠΔΔⲆΔ] = Ⲇⵠ[ⵠ.ⵠⵠᐃΔⲆᐃᐃ];
		Ⲇⵠ[ⵠ.ΔᐃⲆᐃΔⲆΔ] = Ⲇⵠ[ⵠ.ⵠⵠᐃΔⲆᐃᐃ];
		Ⲇⵠ[ⵠ.ⵠⵠᐃΔᐃᐃⲆ] = ΔⵠΔᐃ(1, [{
			f: ΔⵠΔᐃᐃⲆᐃ,
			x: 2,
			y: ⵠⵠΔᐃ,
			a: ⵠΔΔ,
			r: Math.PI / ⵠΔΔΔ,
			c: [Δ[314], Δ[350], Δ[454], "#765d42", Δ[10], Δ[69]]
		}], .12, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⵠⲆⲆΔⲆᐃⲆ] = Ⲇⵠ[ⵠ.ⵠⵠᐃΔᐃᐃⲆ];
		Ⲇⵠ[ⵠ.ΔⵠΔⲆⲆⲆᐃ] = ΔⵠΔᐃ(1, [{
			f: ⲆᐃⵠⲆⲆᐃⲆ,
			x: ⲆᐃᐃΔ,
			y: ⵠⲆᐃ,
			a: ⲆΔᐃ,
			r: Math.PI / 5,
			c: [Δ[314], Δ[573], Δ[92], Δ[10], Δ[69], "#7a7575", "#454749", "#8c8787", Δ[318], Δ[175], "#aaa6a6"]
		}], .12, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ᐃΔᐃᐃⲆΔⵠ] = Ⲇⵠ[ⵠ.ΔⵠΔⲆⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ᐃⲆⲆⲆⲆᐃⲆ] = ΔⵠΔᐃ(1, [{
			f: Ⲇⵠⵠᐃᐃⵠⵠ,
			x: 2,
			y: 0,
			a: ⲆⲆⲆᐃ,
			r: Math.PI / ΔⵠⲆᐃⵠ,
			c: [Δ[314], Δ[301], Δ[305], "#a69e39", "#9c8828", "#bab143", Δ[277], Δ[427], "#d2ca59"]
		}], .12, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆⵠⲆᐃᐃᐃΔ] = Ⲇⵠ[ⵠ.ᐃⲆⲆⲆⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆΔᐃⵠⲆᐃⵠ] = ΔⵠΔᐃ(1, [{
			f: ⲆⲆⵠⵠⲆⲆⵠ,
			x: 2,
			y: ⵠⲆᐃ,
			a: 1,
			r: Math.PI / ᐃᐃⲆΔΔ,
			c: [Δ[314], Δ[170], Δ[534], "#4ba8b4", "#198a82", "#6ccad7", Δ[77], Δ[116], "#7bd9e6"]
		}], .12, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ΔΔⵠⲆΔΔΔ] = Ⲇⵠ[ⵠ.ⲆΔᐃⵠⲆᐃⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆᐃᐃⵠⵠᐃ] = ΔⵠΔᐃ(1, [{
			f: ΔᐃⲆΔⵠⲆⲆ,
			x: ᐃΔⲆⵠ,
			y: 0,
			a: 1,
			r: Math.PI / ᐃΔⵠΔᐃ,
			c: [Δ[314], Δ[170], Δ[534], "#9443b1", "#6f1988", "#a752c6", "#9e35be", Δ[208], Δ[321]]
		}], .12, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ᐃᐃⲆᐃⵠⵠᐃ] = Ⲇⵠ[ⵠ.ⲆⲆᐃᐃⵠⵠᐃ];
		Ⲇⵠ[ⵠ.ⵠᐃⵠⲆᐃΔΔ] = ΔⵠΔᐃ(ⵠΔΔ, [{
			f: ⲆⲆΔⵠⲆⲆΔ,
			x: ΔᐃΔⲆ,
			y: 0,
			a: ⲆⵠⲆ,
			r: Math.PI / 5,
			c: [Δ[314], "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
		}], .38, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ᐃΔΔⵠⵠΔᐃ] = Ⲇⵠ[ⵠ.ⵠᐃⵠⲆᐃΔΔ];
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃⵠⵠΔ] = Ⲇⵠ[ⵠ.ⵠᐃⵠⲆᐃΔΔ];
		Ⲇⵠ[ⵠ.ᐃᐃΔᐃΔⵠⲆ] = ΔⵠΔᐃ(1, [{
			f: ᐃⵠᐃⵠΔ,
			x: 2,
			y: ⲆⲆᐃΔ,
			a: ᐃⲆⲆ,
			r: Math.PI / 5,
			c: [Δ[314], Δ[573], Δ[92], Δ[318], Δ[175]]
		}], .52, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆⵠᐃΔⵠⲆⲆ] = Ⲇⵠ[ⵠ.ᐃᐃΔᐃΔⵠⲆ];
		Ⲇⵠ[ⵠ.ᐃᐃΔᐃΔᐃᐃ] = ΔⵠΔᐃ(1, [{
			f: ΔⲆⵠΔⵠⲆᐃ,
			x: 0,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [Δ[314], Δ[318], Δ[175]]
		}], .3, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ΔΔᐃΔΔΔⵠ] = Ⲇⵠ[ⵠ.ᐃᐃΔᐃΔᐃᐃ];
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆᐃᐃΔ] = ΔⵠΔᐃ(1, [{
			f: ᐃⵠⵠΔᐃᐃⲆ,
			x: ⲆᐃᐃΔ,
			y: 0,
			a: 1,
			r: Math.PI / ⲆΔⵠᐃⵠ,
			c: [Δ[314], "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
		}], .52, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⵠᐃᐃΔⲆᐃⵠ] = Ⲇⵠ[ⵠ.ⵠⲆᐃⲆᐃᐃΔ];
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃΔᐃΔ] = ΔⵠΔᐃ(1, [{
			f: ᐃⵠᐃⵠΔ,
			x: 2,
			y: 0,
			a: ⲆΔⲆⵠ,
			r: Math.PI / 5,
			c: [Δ[314], Δ[301], Δ[305], Δ[277], Δ[427]]
		}], .52, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆⵠⲆΔᐃΔⵠ] = Ⲇⵠ[ⵠ.ⲆⵠΔᐃΔᐃΔ];
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆᐃΔ] = ΔⵠΔᐃ(1, [{
			f: ᐃⵠᐃⵠΔ,
			x: 2,
			y: 0,
			a: 1,
			r: Math.PI / ⲆⲆⲆᐃᐃ,
			c: [Δ[314], Δ[170], Δ[534], Δ[77], Δ[116]]
		}], .52, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃⲆⵠᐃ] = Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆᐃΔ];
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃⵠⵠᐃ] = ΔⵠΔᐃ(ᐃⲆⲆ, [{
			f: ᐃⵠᐃⵠΔ,
			x: ΔⲆⲆⵠ,
			y: ⵠⲆⵠ,
			a: 1,
			r: Math.PI / ⵠΔΔΔ,
			c: [Δ[314], Δ[170], Δ[534], Δ[321], Δ[208]]
		}], .52, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆⲆⵠΔᐃΔΔ] = Ⲇⵠ[ⵠ.ⲆⵠΔᐃⵠⵠᐃ];
		Ⲇⵠ[ⵠ.ᐃΔⵠⲆⲆⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃΔⵠⲆⲆⲆⵠ][0] = ΔⲆ.ᐃΔᐃⵠᐃᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃΔⵠⲆⲆⲆⵠ][ΔΔⲆΔ] = ΔⲆ.ⵠⵠΔΔΔΔᐃ;
		Ⲇⵠ[ⵠ.ᐃΔⵠⲆⲆⲆⵠ][Ⲇⵠᐃⵠ] = ΔⲆ.ⵠⵠΔΔᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ᐃⵠⲆΔΔᐃᐃ] = Ⲇⵠ[ⵠ.ᐃΔⵠⲆⲆⲆⵠ];
		Ⲇⵠ[ⵠ.ⲆΔΔⲆᐃⲆⲆ] = Ⲇⵠ[ⵠ.ᐃΔⵠⲆⲆⲆⵠ];
		Ⲇⵠ[ⵠ.ⲆᐃᐃᐃⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃᐃᐃⲆⲆᐃ][ᐃⲆⵠΔ] = ΔⲆ.ⵠⲆⲆΔΔΔⲆ;
		Ⲇⵠ[ⵠ.ⲆᐃᐃᐃⲆⲆᐃ][1] = ΔⲆ.ⵠΔⵠᐃⵠΔΔ;
		Ⲇⵠ[ⵠ.ⲆᐃᐃᐃⲆⲆᐃ][2] = ΔⲆ.ΔΔΔΔⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆⵠΔᐃ] = Ⲇⵠ[ⵠ.ⲆᐃᐃᐃⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ΔΔᐃΔΔⲆᐃ] = Ⲇⵠ[ⵠ.ⲆᐃᐃᐃⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ⲆᐃΔΔᐃᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃΔΔᐃᐃⵠ][ΔᐃΔ] = ΔⲆ.ΔⵠⲆᐃᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆᐃΔΔᐃᐃⵠ][ⵠⲆⲆⲆ] = ΔⲆ.ⲆΔⵠⲆΔⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃΔΔᐃᐃⵠ][2] = ΔⲆ.ⵠΔⲆⲆᐃⲆᐃ;
		Ⲇⵠ[ⵠ.ᐃⵠΔᐃᐃⲆᐃ] = Ⲇⵠ[ⵠ.ⲆᐃΔΔᐃᐃⵠ];
		Ⲇⵠ[ⵠ.ⵠᐃΔⵠᐃΔᐃ] = Ⲇⵠ[ⵠ.ⲆᐃΔΔᐃᐃⵠ];
		Ⲇⵠ[ⵠ.ᐃΔⲆⲆΔΔᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃΔⲆⲆΔΔᐃ][0] = ΔⲆ.ⵠⲆᐃΔᐃⲆΔ;
		Ⲇⵠ[ⵠ.ᐃΔⲆⲆΔΔᐃ][1] = ΔⲆ.ᐃΔⲆΔⵠᐃΔ;
		Ⲇⵠ[ⵠ.ᐃΔⲆⲆΔΔᐃ][ᐃⲆᐃⵠ] = ΔⲆ.ⵠΔⵠΔᐃⵠΔ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆⵠⲆⲆⲆ] = Ⲇⵠ[ⵠ.ᐃΔⲆⲆΔΔᐃ];
		Ⲇⵠ[ⵠ.ΔⲆⲆΔᐃᐃᐃ] = Ⲇⵠ[ⵠ.ᐃΔⲆⲆΔΔᐃ];
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⲆⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⲆⵠⲆ][ⵠΔⵠⲆ] = ΔⲆ.ΔⵠⵠⵠⵠⵠⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⲆⵠⲆ][ΔΔⲆΔ] = ΔⲆ.ⲆⵠΔᐃⲆΔⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⲆⵠⲆ][2] = ΔⲆ.ⵠⲆⵠΔΔᐃᐃ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆΔΔᐃΔ] = Ⲇⵠ[ⵠ.ⲆΔⲆⵠⲆⵠⲆ];
		Ⲇⵠ[ⵠ.ΔΔⲆᐃᐃⵠΔ] = Ⲇⵠ[ⵠ.ⲆΔⲆⵠⲆⵠⲆ];
		Ⲇⵠ[ⵠ.ⵠᐃⲆⲆⲆⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆⲆⲆⵠⲆ][ⲆⲆᐃΔ] = ΔⲆ.ⵠᐃᐃΔΔΔⵠ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆⲆⲆⵠⲆ][ⵠⵠᐃ] = ΔⲆ.ⲆⲆⵠᐃᐃΔⲆ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆⲆⲆⵠⲆ][2] = ΔⲆ.ⲆᐃΔᐃⵠᐃⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆⵠⵠⵠΔ] = Ⲇⵠ[ⵠ.ⵠᐃⲆⲆⲆⵠⲆ];
		Ⲇⵠ[ⵠ.ⵠΔᐃⵠⲆⲆᐃ] = Ⲇⵠ[ⵠ.ⵠᐃⲆⲆⲆⵠⲆ];
		Ⲇⵠ[ⵠ.ⵠⲆᐃⵠⵠΔΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃⵠⵠΔΔ][0] = ΔⲆ.ⲆⵠΔⵠΔⵠⲆ;
		Ⲇⵠ[ⵠ.ⵠⲆᐃⵠⵠΔΔ][1] = ΔⲆ.ᐃΔⲆⲆΔᐃⲆ;
		Ⲇⵠ[ⵠ.ⵠⲆᐃⵠⵠΔΔ][2] = ΔⲆ.ⲆᐃⵠᐃⲆⵠᐃ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃᐃᐃⵠΔ] = Ⲇⵠ[ⵠ.ⵠⲆᐃⵠⵠΔΔ];
		Ⲇⵠ[ⵠ.ᐃⵠⵠⲆΔᐃᐃ] = Ⲇⵠ[ⵠ.ⵠⲆᐃⵠⵠΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔᐃⵠⵠΔ] = ΔⵠΔᐃ(1, [{
			f: ᐃΔⲆΔΔᐃᐃ,
			x: -ᐃΔⲆⵠ,
			y: -2,
			a: ⲆΔᐃ,
			r: ⵠΔΔᐃ,
			c: [Δ[11], Δ[0], Δ[164], "#3a3a3a"]
		}], .8, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ᐃⲆⲆⲆΔⲆⵠ] = Ⲇⵠ[ⵠ.ⲆⲆΔᐃⵠⵠΔ];
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆⲆΔᐃ] = ΔⵠΔᐃ(ᐃΔⵠΔ, [{
			f: ᐃΔΔⵠΔΔⲆ,
			x: -ⲆⲆΔΔ,
			y: -ΔΔᐃᐃ,
			a: 1,
			r: -Math.PI / ⵠⵠⲆⵠ,
			c: [Δ[ΔᐃΔⵠⲆ], Δ[164], Δ[0]]
		}], .08, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ΔᐃΔⲆΔᐃⵠ] = Ⲇⵠ[ⵠ.ΔⲆⲆⲆⲆΔᐃ];
		Ⲇⵠ[ⵠ.ⵠΔΔⵠⵠᐃⲆ] = ΔⵠΔᐃ(ⲆⵠΔⲆ, [{
			f: ᐃⵠΔΔᐃΔΔ,
			x: -ⲆⲆⵠᐃ,
			y: -2,
			a: ᐃⲆⲆ,
			r: 0,
			c: [Δ[ⲆⵠᐃⲆⵠ], "#178a99", "#0a6372", "#03282e"]
		}], .3, [Δ[32], Δ[32], Δ[32]], .7);
		Ⲇⵠ[ⵠ.ⵠΔᐃⵠΔⲆᐃ] = ΔⵠΔᐃ(ΔΔⲆΔ, [{
			f: ᐃⵠΔΔᐃΔΔ,
			x: -2,
			y: -2,
			a: 1,
			r: 0,
			c: [Δ[206], "#991616", "#750a0a", Δ[206]]
		}], .3, [Δ[32], Δ[32], Δ[32]], .7);
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠⲆᐃⲆ] = ΔⵠΔᐃ(1, [{
			f: ⲆΔᐃⲆΔᐃⲆ,
			x: ᐃΔΔ,
			y: 0,
			a: 1,
			r: ⵠⵠΔΔ,
			c: [Δ[33], Δ[452]]
		}, {
			f: ᐃⲆᐃⲆᐃΔⵠ,
			x: ⵠⵠΔΔ,
			y: 0,
			a: 1,
			r: 0,
			c: [Δ[33], Δ[452], "#1c2528", Δ[477], Δ[5], "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
		}, {
			f: ΔᐃⵠᐃⲆᐃⲆ,
			x: 0,
			y: 0,
			a: 1,
			r: ⵠⲆΔⵠ,
			c: [Δ[477], Δ[5]]
		}, {
			f: ⲆⵠⵠᐃᐃⵠΔ,
			x: ⵠⲆᐃ,
			y: 0,
			a: ⵠⲆⲆⲆ,
			r: 0,
			c: [Δ[477], Δ[5], "#418ba5", "#59b8ce"]
		}], .3, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔᐃⲆᐃΔΔⵠ] = Ⲇⵠ[ⵠ.ⲆΔⵠⵠⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ΔᐃⲆⲆⵠⲆΔ] = ΔⵠΔᐃ(1, [{
			f: ΔⲆᐃⵠΔⲆⲆ,
			x: 45,
			y: 70,
			a: 1,
			r: 0,
			c: [Δ[314], Δ[325], Δ[531], Δ[90]]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠⵠΔⵠᐃⵠΔ] = Ⲇⵠ[ⵠ.ΔᐃⲆⲆⵠⲆΔ];
		Ⲇⵠ[ⵠ.ᐃΔΔⵠⲆⵠⵠ] = ΔⵠΔᐃ(1, [{
			f: ⵠᐃⵠⵠⵠⵠⲆ,
			x: 0,
			y: ⵠᐃΔ,
			a: ⵠⵠᐃ,
			r: 0,
			c: [Δ[314], "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
		}], .52, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ᐃⵠΔᐃⲆⲆⲆ] = Ⲇⵠ[ⵠ.ᐃΔΔⵠⲆⵠⵠ];
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃᐃⵠ] = ΔⵠΔᐃ(1, [{
			f: ⲆΔⵠⵠⵠᐃⵠ,
			x: 0,
			y: ⲆΔⵠΔ,
			a: ΔⲆΔᐃ,
			r: 0,
			c: [Δ[200], Δ[47], Δ[64], "#1b1a25"]
		}], .12, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ΔⵠΔΔΔⲆΔ] = Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃᐃⵠ];
		Ⲇⵠ[ⵠ.ⵠᐃⲆⲆΔᐃᐃ] = ΔⵠΔᐃ(1, [{
			f: ᐃⵠⵠⵠⵠΔᐃ,
			x: ⲆⲆⵠⲆ,
			y: 0,
			a: ⲆⵠⲆ,
			r: ⵠᐃΔ,
			c: [Δ[200], Δ[47], Δ[64]]
		}], .25, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆⲆⵠΔΔⵠᐃ] = Ⲇⵠ[ⵠ.ⵠᐃⲆⲆΔᐃᐃ];
		Ⲇⵠ[ⵠ.ⵠΔΔᐃⵠΔⵠ] = ΔⵠΔᐃ(1, [{
			f: ΔⵠΔⵠⲆⲆⵠ,
			x: ⵠΔΔᐃ,
			y: ΔⵠᐃⲆ,
			a: ΔⵠⲆ,
			r: ᐃⲆⵠΔ,
			c: [Δ[165], "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
		}], .39, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⲆⲆⵠ] = Ⲇⵠ[ⵠ.ⵠΔΔᐃⵠΔⵠ];
		Ⲇⵠ[ⵠ.ⵠⲆⵠⲆⵠⲆⲆ] = ΔⵠΔᐃ(1, [{
			f: ΔⵠΔⵠⲆⲆⵠ,
			x: 0,
			y: ΔⲆΔΔ,
			a: ΔⵠⲆ,
			r: 0,
			c: [Δ[165], "#8c7654", Δ[147], "#a88e6c", Δ[147], "#705845"]
		}], .39, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ΔΔᐃᐃⵠᐃΔ] = Ⲇⵠ[ⵠ.ⵠⲆⵠⲆⵠⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆᐃⵠᐃⲆⲆᐃ] = ΔⵠΔᐃ(ⵠⲆⲆⲆ, [{
			f: ᐃᐃⵠⵠᐃᐃⲆ,
			x: 0,
			y: 10,
			a: ⲆΔⲆⵠ,
			r: 0,
			c: [Δ[314], Δ[570], Δ[144], Δ[565], "#49B669", "#19994C", "#71C187"]
		}], .15, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆᐃᐃᐃⲆⵠᐃ] = Ⲇⵠ[ⵠ.ⲆᐃⵠᐃⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ΔᐃⵠⲆⲆⲆⲆ] = ΔⵠΔᐃ(1, [{
			f: ᐃᐃⵠⵠᐃᐃⲆ,
			x: 0,
			y: 10,
			a: 1,
			r: ⲆⲆⵠⲆ,
			c: [Δ[314], Δ[570], Δ[144], Δ[565], "#C45727", "#994617", "#DB9358"]
		}], .15, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ΔⵠᐃΔⲆⲆΔ] = Ⲇⵠ[ⵠ.ΔᐃⵠⲆⲆⲆⲆ];
		Ⲇⵠ[ⵠ.ΔᐃΔⵠⵠᐃᐃ] = ΔⵠΔᐃ(ⲆⲆⲆᐃ, [{
			f: ᐃᐃⵠⵠᐃᐃⲆ,
			x: ΔΔⲆⲆ,
			y: 10,
			a: 1,
			r: 0,
			c: [Δ[314], Δ[570], Δ[144], Δ[565], "#2792C1", "#196599", "#59C0D8"]
		}], .15, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆᐃΔᐃⵠᐃⲆ] = Ⲇⵠ[ⵠ.ΔᐃΔⵠⵠᐃᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆΔΔᐃᐃᐃ] = ΔⵠΔᐃ(1, [{
			f: ⲆᐃⲆⲆⵠⲆΔ,
			x: -1,
			y: Ⲇᐃⵠⵠ,
			a: 1,
			r: 0,
			c: [Δ[391], "#b03431", "#94312d", "#bd3c33", "#de5445"]
		}], .15, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ΔⵠᐃⵠᐃᐃⲆ] = Ⲇⵠ[ⵠ.ⲆⲆΔΔᐃᐃᐃ];
		Ⲇⵠ[ⵠ.ΔΔΔᐃᐃᐃⵠ] = Ⲇⵠ[ⵠ.ⲆⲆΔΔᐃᐃᐃ];
		Ⲇⵠ[ⵠ.ⲆΔᐃⵠⲆⲆΔ] = ΔⵠΔᐃ(1, [{
			f: ΔⲆᐃΔⲆⲆᐃ,
			x: 0,
			y: ⵠⲆⵠ,
			a: ⲆⵠⲆ,
			r: 0,
			c: [Δ[314], "#cae9eb", "#75bcae", Δ[153], "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
		}], .2, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆΔΔ] = Ⲇⵠ[ⵠ.ⲆΔᐃⵠⲆⲆΔ];
		Ⲇⵠ[ⵠ.ⵠΔⲆⲆᐃΔⲆ] = ΔⵠΔᐃ(1, [{
			f: ⲆⲆⵠⲆΔⲆΔ,
			x: 0,
			y: ⲆⲆⵠⲆ,
			a: 1,
			r: Math.PI / 5,
			c: [Δ[314], "#284c4a", "#193533", "#c7efef", "#7fccca"]
		}], .75, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠΔᐃΔ] = Ⲇⵠ[ⵠ.ⵠΔⲆⲆᐃΔⲆ];
		Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠⵠᐃ] = ΔⵠΔᐃ(ᐃΔⵠΔ, [{
			f: ΔⲆⲆⲆᐃΔⵠ,
			x: ⵠⵠΔΔ,
			y: ⲆⲆⵠⲆ,
			a: ⲆⵠΔⲆ,
			r: 0,
			c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
		}], .55, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⲆⲆⵠⵠᐃΔⵠ] = ΔⵠΔᐃ(1, [{
			f: ᐃΔⵠⵠⲆⲆᐃ,
			x: 0,
			y: ⵠⲆᐃ,
			a: 1,
			r: ᐃΔΔ,
			c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
		}], .55, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⲆⵠᐃⲆⲆᐃⵠ] = ΔⵠΔᐃ(1, [{
			f: ΔⲆⲆⲆᐃΔⵠ,
			x: 0,
			y: ⲆΔⵠΔ,
			a: 1,
			r: ⲆᐃⲆ,
			c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
		}], .55, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃᐃᐃ] = ΔⵠΔᐃ(ᐃⲆⲆ, [{
			f: ᐃΔⵠⵠⲆⲆᐃ,
			x: ⵠⵠΔΔ,
			y: ⵠΔΔᐃ,
			a: ⲆΔᐃΔ,
			r: ⵠᐃΔⲆ,
			c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
		}], .55, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⵠᐃΔⲆᐃⲆᐃ] = ΔⵠΔᐃ(ⵠΔᐃ, [{
			f: ⵠⵠᐃᐃᐃⲆⲆ,
			x: 0,
			y: ⵠⲆΔⵠ,
			a: ⵠΔⲆ,
			r: ⵠⲆΔⵠ,
			c: ["#59ba72", "#94d966", "#5aa628", Δ[314], "#38874d"]
		}], .35, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ΔⲆⲆⵠΔⲆΔ] = ΔⵠΔᐃ(ΔΔⲆΔ, [{
			f: ⵠⵠᐃᐃᐃⲆⲆ,
			x: 0,
			y: 0,
			a: ⵠΔᐃ,
			r: 0,
			c: ["#C45727", "#de7d46", "#DB9358", Δ[314], "#994617"]
		}], .35, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠⵠⵠⵠ] = ΔⵠΔᐃ(1, [{
			f: ⵠⵠᐃᐃᐃⲆⲆ,
			x: 0,
			y: ⵠⲆⵠ,
			a: ΔΔⲆΔ,
			r: ⲆⲆⵠⲆ,
			c: ["#3a9dbd", "#59C0D8", "#48abcb", Δ[314], "#196599"]
		}], .35, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⲆⲆᐃ] = ΔⵠΔᐃ(1, [{
			f: ⲆᐃΔΔᐃ,
			x: 0,
			y: 0,
			a: ⲆΔᐃΔ,
			r: Math.PI / 5,
			c: [Δ[314], "#6d5041", "#4f3d35", Δ[318], Δ[175], "#757575"]
		}], .45, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ᐃⲆⵠΔⲆΔᐃ] = Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆᐃᐃ] = ΔⵠΔᐃ(1, [{
			f: ⲆᐃΔΔᐃ,
			x: ⲆⲆⵠⲆ,
			y: ᐃⲆⵠΔ,
			a: 1,
			r: Math.PI / 5,
			c: [Δ[314], Δ[301], Δ[305], Δ[277], Δ[427], "#b4ac45"]
		}], .45, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠΔⵠ] = Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆᐃᐃ];
		Ⲇⵠ[ⵠ.ΔⲆᐃΔⲆⵠΔ] = ΔⵠΔᐃ(1, [{
			f: ⲆᐃΔΔᐃ,
			x: ⵠⵠΔᐃ,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [Δ[314], Δ[170], Δ[534], Δ[77], Δ[116], "#42aab8"]
		}], .45, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ᐃᐃⲆΔΔⵠⵠ] = Ⲇⵠ[ⵠ.ΔⲆᐃΔⲆⵠΔ];
		Ⲇⵠ[ⵠ.ⵠᐃⲆⵠΔⵠᐃ] = ΔⵠΔᐃ(1, [{
			f: ⲆᐃΔΔᐃ,
			x: Δⵠⵠ,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [Δ[314], Δ[170], Δ[534], Δ[321], Δ[208], "#a853c7"]
		}], .45, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ᐃᐃⵠᐃΔΔⲆ] = Ⲇⵠ[ⵠ.ⵠᐃⲆⵠΔⵠᐃ];
		Ⲇⵠ[ⵠ.ᐃⵠⲆⵠΔᐃⵠ] = ΔⵠΔᐃ(1, [{
			f: ΔⵠᐃⵠᐃⲆᐃ,
			x: 0,
			y: 0,
			a: ⵠΔⲆ,
			r: 0,
			c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
		}], .35, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⵠΔⵠΔΔⵠᐃ] = Ⲇⵠ[ⵠ.ᐃⵠⲆⵠΔᐃⵠ];
		Ⲇⵠ[ⵠ.ᐃⲆΔΔᐃⲆⵠ] = ΔⵠΔᐃ(1, [{
			f: ⲆⵠⵠᐃⲆⵠⲆ,
			x: ⵠᐃΔ,
			y: 0,
			a: ⵠΔΔ,
			r: 0,
			c: [Δ[340], Δ[426], "#493425", Δ[384]]
		}], .35, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆⲆΔⲆⲆⵠⲆ] = Ⲇⵠ[ⵠ.ᐃⲆΔΔᐃⲆⵠ];
		Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃⲆΔ] = ΔⵠΔᐃ(1, [{
			f: ΔΔΔⵠᐃⵠⲆ,
			x: ΔᐃΔ,
			y: -ⲆᐃᐃΔ,
			a: 1,
			r: 0,
			c: [Δ[340], "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", Δ[309], "#747474", "#969696", Δ[447]]
		}], .4, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⵠⵠᐃⵠᐃᐃᐃ] = Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃⲆΔ];
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠⲆΔ] = ΔⵠΔᐃ(ᐃΔⵠΔ, [{
			f: ⵠᐃⵠΔⵠⵠⵠ,
			x: 0,
			y: ⵠⲆⵠ,
			a: 1,
			r: Ⲇᐃⵠⵠ,
			c: ["#dbce71", Δ[427], Δ[277]]
		}], .35, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃΔΔᐃ] = Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠⲆΔ];
		Ⲇⵠ[ⵠ.ᐃΔⵠⵠⵠᐃᐃ] = ΔⵠΔᐃ(ⵠΔΔ, [{
			f: ᐃΔⵠᐃⵠΔᐃ,
			x: 0,
			y: 0,
			a: 1,
			r: ⵠΔⵠⲆ,
			c: ["#717171", "#485252", Δ[309], "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
		}], .45, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ᐃᐃΔΔᐃⲆⲆ] = Ⲇⵠ[ⵠ.ᐃΔⵠⵠⵠᐃᐃ];
		Ⲇⵠ[ⵠ.ⵠΔΔΔⲆⲆΔ] = ΔⵠΔᐃ(1, [{
			f: ᐃᐃⲆᐃⲆᐃΔᐃⲆ,
			x: ΔᐃΔ,
			y: ⵠⲆⵠ,
			a: ⵠΔᐃ,
			r: ᐃⲆⵠΔ,
			c: ["#511f00", "#2f1300", Δ[153], "#d4d4d4", "#5b2400", "#984e21"]
		}], .15, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ᐃⲆᐃⵠᐃⵠΔ] = Ⲇⵠ[ⵠ.ⵠΔΔΔⲆⲆΔ];
		Ⲇⵠ[ⵠ.ⵠⵠᐃᐃΔᐃᐃ] = ΔⵠΔᐃ(1, [{
			f: ⲆᐃⲆⲆⵠᐃΔⲆᐃ,
			x: ⵠⲆⵠ,
			y: 0,
			a: ⲆΔᐃ,
			r: 0,
			c: ["#221e1b", Δ[153], "#f6f0e7"]
		}], .3, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⵠᐃᐃⲆⵠΔⵠ] = Ⲇⵠ[ⵠ.ⵠⵠᐃᐃΔᐃᐃ];
		Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆⲆⲆ] = ΔⵠΔᐃ(1, [{
			f: ᐃⵠΔᐃΔⵠⵠ,
			x: -5,
			y: -5,
			a: 1,
			r: 0,
			c: [Δ[121], Δ[76], Δ[577]]
		}], .31, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ᐃᐃᐃᐃΔⵠⵠ] = ΔⵠΔᐃ(ΔⲆΔᐃ, [{
			f: ᐃⵠⵠᐃⲆⵠΔ,
			x: ⲆᐃⲆ,
			y: 0,
			a: ⵠⵠᐃ,
			r: 0,
			c: ["#D7C393", "#a48c6c"]
		}], .22, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ΔΔΔΔΔΔⵠ] = ΔⵠΔᐃ(ⲆⵠⲆ, [{
			f: ᐃΔΔΔΔᐃᐃⲆΔ,
			x: 0,
			y: Δⵠⵠ,
			a: ᐃΔⵠΔ,
			r: ⵠᐃΔⲆ,
			c: ["#93CBCE", "#E9F6F6"]
		}], .3, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆᐃΔⵠ] = ΔⵠΔᐃ(ⵠΔΔ, [{
			f: ᐃⵠⵠᐃⲆⵠΔ,
			x: 0,
			y: ⵠⵠΔᐃ,
			a: 1,
			r: 0,
			c: ["#866432", "#6b4f25"]
		}], .22, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠⲆΔ] = ΔⵠΔᐃ(1, [{
			f: ⵠⲆⲆⲆⲆⲆᐃⲆⵠ,
			x: ᐃΔΔⵠ,
			y: ⲆᐃⵠⲆ,
			a: ᐃⲆⲆ,
			r: 0,
			c: [Δ[417], Δ[169], Δ[ᐃΔᐃΔⲆΔⵠ], "#2f2211", "#785931", Δ[37]]
		}], .22, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆⲆⲆⵠ] = ΔⵠΔᐃ(1, [{
			f: ᐃᐃᐃⵠⲆΔᐃⲆΔ,
			x: ⵠⵠᐃΔ,
			y: ΔⲆⲆⵠ,
			a: ⵠΔᐃ,
			r: ⵠⵠΔΔ,
			c: [Δ[417], Δ[169], Δ[14], "#2f2211", "#785931", Δ[37]]
		}], .22, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ΔΔⵠᐃΔΔΔ] = Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠⲆΔ];
		Ⲇⵠ[ⵠ.ⵠⵠᐃᐃⵠΔⲆ] = Ⲇⵠ[ⵠ.ⵠⵠᐃⲆⲆⲆⵠ];
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆᐃⲆΔ] = ΔⵠΔᐃ(1, [{
			f: ⵠⵠΔᐃΔⲆⵠ,
			x: ⵠΔⵠⲆ,
			y: 0,
			a: 1,
			r: 0,
			c: [Δ[417], "#717273", "#606162", "#a09f9f", "#878787", Δ[447]]
		}], .1, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠΔΔ] = Ⲇⵠ[ⵠ.ᐃᐃⲆⲆᐃⲆΔ];
		Ⲇⵠ[ⵠ.ᐃᐃⵠⵠΔᐃⲆ] = ΔⵠΔᐃ(1, [{
			f: ΔᐃⲆΔᐃⲆⵠ,
			x: 0,
			y: 0,
			a: 1,
			r: Math.PI / ⲆΔⵠⵠᐃ,
			c: [Δ[103], Δ[63], Δ[81], Δ[68], Δ[422], Δ[373], Δ[396]]
		}], .18, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆΔⵠⵠ] = ΔⵠΔᐃ(1, [{
			f: ⲆᐃⲆΔᐃⲆⵠⲆΔ,
			x: Ⲇᐃⵠⵠ,
			y: ⵠⵠΔᐃ,
			a: 1,
			r: Math.PI / ⵠⵠΔΔⲆ,
			c: [Δ[103], Δ[63], Δ[81], Δ[68], Δ[422], Δ[373], Δ[396]]
		}], .18, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⵠⲆⲆⵠΔΔⲆ] = Ⲇⵠ[ⵠ.ᐃᐃⵠⵠΔᐃⲆ];
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃⲆⵠΔ] = Ⲇⵠ[ⵠ.ⲆΔᐃⲆΔⵠⵠ];
		Ⲇⵠ[ⵠ.ⲆᐃᐃᐃⲆΔᐃ] = ΔⵠΔᐃ(ⵠΔᐃ, [{
			f: ⵠⵠⲆΔⲆΔΔⵠᐃ,
			x: 0,
			y: 0,
			a: 1,
			r: ⵠᐃΔ,
			c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
		}], .3, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠⵠⵠΔᐃᐃΔ] = Ⲇⵠ[ⵠ.ⲆᐃᐃᐃⲆΔᐃ];
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠᐃⲆΔ] = ΔⵠΔᐃ(1, [{
			f: ⲆⲆⲆⵠⵠⵠⵠⵠⲆ,
			x: ΔΔⲆⲆ,
			y: Ⲇᐃⵠⵠ,
			a: 1,
			r: ⵠᐃⵠⵠ,
			c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
		}], .3, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃⲆⵠ] = ΔⵠΔᐃ(1, [{
			f: ᐃΔⲆᐃⲆⲆΔΔᐃ,
			x: ⵠᐃΔⲆ,
			y: ⲆΔⵠΔ,
			a: 1,
			r: 0,
			c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
		}], .6, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆⲆⵠᐃⲆΔⲆ] = ΔⵠΔᐃ(ᐃⵠⵠ, [{
			f: ᐃⲆΔⵠⵠⲆᐃ,
			x: 0,
			y: -2,
			a: 1,
			r: 0,
			c: [Δ[121], "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
		}], .17, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆΔⵠΔΔΔⲆ] = Ⲇⵠ[ⵠ.ⲆⲆⵠᐃⲆΔⲆ];
		Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃΔᐃ] = ΔⵠΔᐃ(ⲆⵠΔⲆ, [{
			f: ⵠⲆⲆᐃᐃⵠΔΔᐃ,
			x: -3,
			y: -5,
			a: 1,
			r: ⵠΔⵠⲆ,
			c: [Δ[121], "#63767c", "#424f51", "#6c8288", "#536468", "#202020", Δ[153], "#806f60", "#514942", "#756557"]
		}], .23, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆⵠΔⵠᐃᐃᐃ] = ΔⵠΔᐃ(ΔⲆΔᐃ, [{
			f: ᐃᐃⵠⵠᐃⵠᐃᐃᐃ,
			x: ⵠⵠΔᐃ,
			y: 0,
			a: 1,
			r: 0,
			c: [Δ[121], "#42261A", "#281818"]
		}], .23, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ᐃⲆᐃᐃᐃⵠᐃ] = Ⲇⵠ[ⵠ.ⲆⵠΔⵠᐃᐃᐃ];
		Ⲇⵠ[ⵠ.ΔᐃᐃⲆᐃᐃⵠ] = ΔⵠΔᐃ(ⵠⲆⲆⲆ, [{
			f: ᐃΔΔΔᐃᐃΔ,
			x: -ΔΔⲆᐃ,
			y: 0,
			a: 1,
			r: 0,
			c: [Δ[417], "#65A8B7", Δ[370], "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", Δ[370]]
		}], .2, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ΔᐃⵠⵠⲆⲆⲆ] = Ⲇⵠ[ⵠ.ΔᐃᐃⲆᐃᐃⵠ];
		Ⲇⵠ[ⵠ.ΔΔⲆⵠΔⲆⲆ] = ΔⵠΔᐃ(ᐃⵠⵠ, [{
			f: ⲆᐃⲆⵠᐃᐃⵠΔⵠ,
			x: 0,
			y: ⵠᐃΔ,
			a: 1,
			r: ᐃⲆⵠΔ,
			c: [Δ[417], "#961B1B", "#702727", "#C43B3B"]
		}], .15, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⵠΔⵠⲆⵠⵠⵠ] = ΔⵠΔᐃ(ⵠⵠⵠΔ, [{
			f: ΔΔⵠΔΔΔⵠ,
			x: ⲆΔⵠΔ,
			y: ⲆⲆⵠⲆ,
			a: ᐃⲆΔ,
			r: 0,
			c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", Δ[417]]
		}], .3, [Δ[87], Δ[432], Δ[82]], .5);
		Ⲇⵠ[ⵠ.ᐃᐃᐃⵠΔⵠᐃ] = Ⲇⵠ[ⵠ.ⵠΔⵠⲆⵠⵠⵠ];
		Ⲇⵠ[ⵠ.ΔⵠΔⲆⵠΔΔ] = ΔⵠΔᐃ(ⲆⵠⲆ, [{
			f: ⲆⵠⵠᐃᐃⲆΔ,
			x: ⵠⵠΔΔ,
			y: Δⵠⵠ,
			a: ⲆⲆⲆᐃ,
			r: 0,
			c: [Δ[417], "#352E1E", Δ[ᐃᐃⲆⲆⵠΔⵠ], Δ[285]]
		}], .3, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆⲆⵠΔΔⲆⲆ] = Ⲇⵠ[ⵠ.ΔⵠΔⲆⵠΔΔ];
		Ⲇⵠ[ⵠ.ⵠᐃⵠΔⲆΔⵠ] = ΔⵠΔᐃ(1, [{
			f: ⲆⵠᐃⲆΔΔᐃᐃᐃ,
			x: -ⲆΔⵠᐃⵠ,
			y: -5,
			a: ⲆΔᐃΔ,
			r: 0,
			c: ["#e2d63b", "#ee71a9", "#42b672"]
		}], 1, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠΔⵠⵠᐃΔΔ] = Ⲇⵠ[ⵠ.ⵠᐃⵠΔⲆΔⵠ];
		Ⲇⵠ[ⵠ.ᐃⵠⵠⲆᐃⵠΔ] = ΔⵠΔᐃ(ᐃⲆⲆ, [{
			f: ᐃⵠᐃᐃΔΔᐃ,
			x: ⲆΔⵠΔ,
			y: ⵠᐃⵠⵠ,
			a: 1,
			r: 0,
			c: [Δ[417], "#332715", Δ[14], Δ[285]]
		}], .5, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠΔᐃⲆΔΔᐃ] = Ⲇⵠ[ⵠ.ᐃⵠⵠⲆᐃⵠΔ];
		Ⲇⵠ[ⵠ.ⲆⲆⲆⲆΔⲆⵠ] = ΔⵠΔᐃ(1, [{
			f: ΔΔᐃᐃⲆᐃⲆ,
			x: 0,
			y: ⲆᐃⲆ,
			a: ⵠΔᐃ,
			r: ΔΔⲆⲆ,
			c: [Δ[417], "#352618", "#402b18", Δ[438], Δ[285], "#52391e"]
		}], .3, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⵠΔᐃⵠⵠⲆᐃ] = Ⲇⵠ[ⵠ.ⲆⲆⲆⲆΔⲆⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔⵠⲆᐃ] = ΔⵠΔᐃ(1, [{
			f: ΔⵠΔⵠⲆⵠΔ,
			x: -1,
			y: ⵠⵠΔΔ,
			a: ⲆⵠΔⲆ,
			r: -Math.PI / 5,
			c: [Δ[417], Δ[169], Δ[14], "#594225", Δ[37]]
		}], .4, [Δ[87], Δ[432], Δ[82]], .7);
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔᐃᐃ] = Ⲇⵠ[ⵠ.ⲆⲆⲆΔⵠⲆᐃ];
		Ⲇⵠ[ⵠ.ᐃᐃⲆΔⵠΔⲆ] = ΔⵠΔᐃ(ΔΔⲆΔ, [{
			f: ΔⵠΔⵠⲆⵠΔ,
			x: -1,
			y: 0,
			a: ⲆΔⲆⵠ,
			r: -Math.PI / ⵠⵠΔⲆ,
			c: [Δ[417], Δ[169], Δ[14], "#594225", "#3F2D18", "#2D2112"]
		}], .4, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⵠΔΔⲆΔⵠⵠ] = Ⲇⵠ[ⵠ.ᐃᐃⲆΔⵠΔⲆ];
		Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃᐃⲆ] = ΔⵠΔᐃ(1, [{
			f: ΔⵠⵠᐃᐃΔⲆ,
			x: ΔΔⲆⲆ,
			y: 0,
			a: 1,
			r: 0,
			c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
		}], .25, [Δ[32], Δ[32], Δ[32]], .5);
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⲆᐃᐃ] = ΔⵠΔᐃ(Δᐃᐃ, [{
			f: ⲆⲆⵠⵠⵠΔⵠ,
			x: ΔᐃΔ,
			y: ⲆⲆⵠⲆ,
			a: 1,
			r: ⵠΔⵠⲆ,
			c: [Δ[417], "#ed5f4f", "#ce4545", Δ[153], "#e2dad7"]
		}], .2, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ΔΔᐃⲆΔᐃᐃ] = Ⲇⵠ[ⵠ.ⲆΔⲆⵠⲆᐃᐃ];
		Ⲇⵠ[ⵠ.ᐃΔⲆⲆⵠΔΔ] = ΔⵠΔᐃ(1, [{
			f: ⵠᐃΔᐃᐃⲆⲆᐃᐃ,
			x: ⵠᐃΔ,
			y: 0,
			a: 1,
			r: Ⲇᐃⵠⵠ,
			c: [Δ[417], "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", Δ[ᐃⵠᐃⵠⵠ], Δ[282]]
		}], .25, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ᐃⲆⵠⵠΔⵠⵠ] = Ⲇⵠ[ⵠ.ᐃΔⲆⲆⵠΔΔ];
		Ⲇⵠ[ⵠ.ⲆΔⵠⲆᐃⲆᐃ] = ΔⵠΔᐃ(ⵠⵠᐃ, [{
			f: ⲆΔⵠⲆΔΔᐃⵠⵠ,
			x: -2,
			y: -8,
			a: 1,
			r: Ⲇᐃⵠⵠ,
			c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
		}], .25, [Δ[84], Δ[236], Δ[162]], .5);
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠⵠΔᐃ] = Ⲇⵠ[ⵠ.ⲆΔⵠⲆᐃⲆᐃ];
		Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠⲆⲆ][ⲆⲆᐃΔ] = ΔⲆ.ⵠᐃⲆⵠΔⲆⵠ;
		Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠⲆⲆ][ᐃⵠⵠ] = ΔⲆ.ᐃᐃᐃΔᐃᐃⵠ;
		Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠⲆⲆ][2] = ΔⲆ.ⵠⲆΔᐃᐃΔⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃⵠᐃΔⲆᐃ] = Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠⲆⲆ];
		Ⲇⵠ[ⵠ.ᐃᐃⵠⵠⲆΔΔ] = Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠⲆⲆ];
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆⵠⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆⵠⵠⵠ][0] = ΔⲆ.ᐃᐃⲆⲆⵠⲆⲆ;
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆⵠⵠⵠ][ΔΔⲆΔ] = ΔⲆ.ΔⲆΔⲆⲆᐃΔ;
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆⵠⵠⵠ][2] = ΔⲆ.ⵠᐃⲆᐃᐃⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆΔᐃΔ] = Ⲇⵠ[ⵠ.ⵠⵠΔⲆⵠⵠⵠ];
		Ⲇⵠ[ⵠ.ⲆΔⲆⲆⲆΔⵠ] = Ⲇⵠ[ⵠ.ⵠⵠΔⲆⵠⵠⵠ];
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆΔᐃⲆ] = Ⲇⵠ[ⵠ.ΔᐃⲆⵠᐃⵠⵠ];
		Ⲇⵠ[ⵠ.ⵠⵠᐃⵠΔᐃᐃ] = Ⲇⵠ[ⵠ.ΔᐃⲆⵠᐃⵠⵠ];
		Ⲇⵠ[ⵠ.ΔᐃⲆⵠᐃⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ΔᐃⲆⵠᐃⵠⵠ][ⵠⲆⵠ] = ΔⲆ.ⲆΔΔᐃᐃΔᐃ;
		Ⲇⵠ[ⵠ.ΔᐃⲆⵠᐃⵠⵠ][1] = ΔⲆ.ⲆⵠⲆⵠᐃⲆᐃ;
		Ⲇⵠ[ⵠ.ΔᐃⲆⵠᐃⵠⵠ][2] = ΔⲆ.ΔⵠΔΔⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆΔᐃⲆ] = Ⲇⵠ[ⵠ.ΔᐃⲆⵠᐃⵠⵠ];
		Ⲇⵠ[ⵠ.ⵠⵠᐃⵠΔᐃᐃ] = Ⲇⵠ[ⵠ.ΔᐃⲆⵠᐃⵠⵠ];
		Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔΔⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔΔⲆ][0] = ΔⲆ.ⲆΔⵠᐃⵠΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔΔⲆ][ⲆⵠⲆ] = ΔⲆ.ᐃⵠⲆⲆΔⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔΔⲆ][2] = ΔⲆ.ⲆⵠⲆᐃΔⲆΔ;
		Ⲇⵠ[ⵠ.ⵠᐃᐃᐃⲆᐃΔ] = Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔΔⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠᐃΔⲆ] = Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔΔⲆ];
		Ⲇⵠ[ⵠ.ΔⲆⲆΔᐃⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⲆΔᐃⲆⲆ][ⵠΔΔᐃ] = ΔⲆ.ΔΔⵠⲆΔΔⲆ;
		Ⲇⵠ[ⵠ.ΔⲆⲆΔᐃⲆⲆ][1] = ΔⲆ.ⲆⵠΔΔⲆⲆⵠ;
		Ⲇⵠ[ⵠ.ΔⲆⲆΔᐃⲆⲆ][ᐃⵠΔⲆ] = ΔⲆ.ⵠΔΔᐃⵠΔΔ;
		Ⲇⵠ[ⵠ.ΔᐃΔⲆᐃᐃᐃ] = Ⲇⵠ[ⵠ.ΔⲆⲆΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⵠᐃΔᐃⵠⵠⲆ] = Ⲇⵠ[ⵠ.ΔⲆⲆΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆᐃᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆᐃᐃⵠ][ⵠᐃΔⲆ] = ΔⲆ.ᐃᐃΔΔΔΔⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆᐃᐃⵠ][1] = ΔⲆ.ⵠΔⵠⲆΔⵠᐃ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆᐃᐃⵠ][2] = ΔⲆ.ⵠⵠᐃⲆⲆⵠᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆᐃⵠΔΔᐃ] = Ⲇⵠ[ⵠ.ⵠⵠᐃⲆᐃᐃⵠ];
		Ⲇⵠ[ⵠ.ⵠⵠΔΔΔΔⲆ] = Ⲇⵠ[ⵠ.ⵠⵠᐃⲆᐃᐃⵠ];
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔⵠⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔⵠⲆᐃ][ⵠΔⵠⲆ] = ΔⲆ.ⵠΔⲆᐃᐃⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔⵠⲆᐃ][ⲆΔᐃ] = ΔⲆ.ᐃᐃᐃᐃᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔⵠⲆᐃ][ⲆᐃᐃΔ] = ΔⲆ.ᐃΔⵠⲆⵠⲆⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠΔⵠᐃᐃⵠ] = Ⲇⵠ[ⵠ.ⲆⵠⵠΔⵠⲆᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆΔΔΔᐃΔ] = Ⲇⵠ[ⵠ.ⲆⵠⵠΔⵠⲆᐃ];
		Ⲇⵠ[ⵠ.ΔⵠⲆⲆⵠⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⲆⲆⵠⲆⵠ][ⵠΔΔᐃ] = ΔⲆ.ⲆᐃⲆΔΔᐃⵠ;
		Ⲇⵠ[ⵠ.ΔⵠⲆⲆⵠⲆⵠ][ⲆΔᐃΔ] = ΔⲆ.ⵠⵠⲆΔΔΔΔ;
		Ⲇⵠ[ⵠ.ΔⵠⲆⲆⵠⲆⵠ][ⵠⲆⵠΔ] = ΔⲆ.ΔⵠⲆⵠΔⵠᐃ;
		Ⲇⵠ[ⵠ.ΔᐃⲆⲆⵠⲆᐃ] = Ⲇⵠ[ⵠ.ΔⵠⲆⲆⵠⲆⵠ];
		Ⲇⵠ[ⵠ.ΔΔⲆⵠⲆΔⲆ] = Ⲇⵠ[ⵠ.ΔⵠⲆⲆⵠⲆⵠ];
		Ⲇⵠ[ⵠ.ⵠᐃΔⲆⲆⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃΔⲆⲆⲆⵠ][0] = ΔⲆ.ⲆⲆΔᐃΔᐃᐃ;
		Ⲇⵠ[ⵠ.ⵠᐃΔⲆⲆⲆⵠ][ⲆⵠΔⲆ] = ΔⲆ.ⲆⲆᐃΔΔᐃΔ;
		Ⲇⵠ[ⵠ.ⵠᐃΔⲆⲆⲆⵠ][ⲆⲆᐃⲆ] = ΔⲆ.ⵠΔⲆⵠΔⲆᐃ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆΔⲆⵠΔ] = Ⲇⵠ[ⵠ.ⵠᐃΔⲆⲆⲆⵠ];
		Ⲇⵠ[ⵠ.ᐃⲆⲆⲆΔΔⵠ] = Ⲇⵠ[ⵠ.ⵠᐃΔⲆⲆⲆⵠ];
		Ⲇⵠ[ⵠ.ⵠⲆΔⲆᐃΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆΔⲆᐃΔᐃ][0] = ΔⲆ.ᐃΔⲆᐃⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆΔⲆᐃΔᐃ][1] = ΔⲆ.ⲆⵠᐃⵠⲆⵠᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆΔⲆᐃΔᐃ][2] = ΔⲆ.ⲆᐃᐃⲆⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔᐃᐃⲆΔ] = Ⲇⵠ[ⵠ.ⵠⲆΔⲆᐃΔᐃ];
		Ⲇⵠ[ⵠ.ⲆᐃⲆΔᐃᐃⲆ] = Ⲇⵠ[ⵠ.ⵠⲆΔⲆᐃΔᐃ];
		Ⲇⵠ[ⵠ.ᐃⲆⵠⵠⵠⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⵠⵠⵠⵠⲆ][0] = ΔⲆ.ᐃⵠⵠⲆⵠΔᐃ;
		Ⲇⵠ[ⵠ.ᐃⲆⵠⵠⵠⵠⲆ][ⵠⵠⵠΔ] = ΔⲆ.ⵠᐃⲆⵠᐃⵠᐃ;
		Ⲇⵠ[ⵠ.ᐃⲆⵠⵠⵠⵠⲆ][2] = ΔⲆ.ᐃᐃΔⲆⲆⵠⲆ;
		Ⲇⵠ[ⵠ.ⵠⵠΔᐃⵠⵠⵠ] = Ⲇⵠ[ⵠ.ᐃⲆⵠⵠⵠⵠⲆ];
		Ⲇⵠ[ⵠ.ᐃⲆⵠΔⲆⲆΔ] = Ⲇⵠ[ⵠ.ᐃⲆⵠⵠⵠⵠⲆ];
		Ⲇⵠ[ⵠ.ΔΔⵠᐃΔᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ΔΔⵠᐃΔᐃⵠ][0] = ΔⲆ.ⵠᐃΔⵠⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ΔΔⵠᐃΔᐃⵠ][1] = ΔⲆ.ⲆᐃⲆⵠΔΔᐃ;
		Ⲇⵠ[ⵠ.ΔΔⵠᐃΔᐃⵠ][2] = ΔⲆ.ΔᐃΔⵠᐃⵠΔ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⵠⲆⲆ] = Ⲇⵠ[ⵠ.ΔΔⵠᐃΔᐃⵠ];
		Ⲇⵠ[ⵠ.ᐃⵠⲆⵠⲆⲆΔ] = Ⲇⵠ[ⵠ.ΔΔⵠᐃΔᐃⵠ];
		Ⲇⵠ[ⵠ.ΔⲆᐃΔΔᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⲆᐃΔΔᐃᐃ][ⵠᐃΔ] = ΔⲆ.ᐃⲆΔᐃΔΔᐃ;
		Ⲇⵠ[ⵠ.ΔⲆᐃΔΔᐃᐃ][ΔΔⲆΔ] = ΔⲆ.ᐃⲆᐃⵠᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ΔⲆᐃΔΔᐃᐃ][ᐃⲆᐃⵠ] = ΔⲆ.ᐃᐃΔⵠⲆᐃΔ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔⲆᐃ] = Ⲇⵠ[ⵠ.ΔⲆᐃΔΔᐃᐃ];
		Ⲇⵠ[ⵠ.ΔΔⲆΔⵠⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔΔⲆΔⵠⲆᐃ][ⵠᐃΔ] = ΔⲆ.ΔᐃᐃᐃⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ΔΔⲆΔⵠⲆᐃ][1] = ΔⲆ.ⵠᐃΔΔⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ΔΔⲆΔⵠⲆᐃ][2] = ΔⲆ.ⵠⲆΔⲆⲆΔⵠ;
		Ⲇⵠ[ⵠ.ⵠΔᐃᐃⲆⲆΔ] = Ⲇⵠ[ⵠ.ΔΔⲆΔⵠⲆᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆⵠⲆⵠΔᐃ] = Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆΔΔᐃ] = Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆᐃᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆΔⲆᐃ] = Ⲇⵠ[ⵠ.ΔⲆᐃΔⲆⵠΔ];
		Ⲇⵠ[ⵠ.ᐃΔᐃᐃⵠΔᐃ] = Ⲇⵠ[ⵠ.ⵠᐃⲆⵠΔⵠᐃ];
		Ⲇⵠ[ⵠ.ᐃᐃⲆⵠⵠΔⵠ] = Ⲇⵠ[ⵠ.ΔⲆⲆⵠⲆᐃΔ];
		Ⲇⵠ[ⵠ.ᐃⵠᐃⲆᐃΔⲆ] = Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆΔᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆⲆⲆⲆⲆΔ] = Ⲇⵠ[ⵠ.ⲆⵠⵠⵠᐃΔⲆ];
		Ⲇⵠ[ⵠ.Δⵠⵠᐃᐃᐃⵠ] = Ⲇⵠ[ⵠ.ⲆΔΔᐃⵠⵠⲆ];
		Ⲇⵠ[ⵠ.ΔΔΔⵠⲆΔΔ] = Ⲇⵠ[ⵠ.ⲆⲆⲆⲆⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ⵠΔⲆⵠΔⵠⲆ] = Ⲇⵠ[ⵠ.ⲆⲆⵠⵠᐃΔⵠ];
		Ⲇⵠ[ⵠ.ⵠⵠⵠᐃⲆΔᐃ] = Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠⵠᐃ];
		Ⲇⵠ[ⵠ.ⵠᐃⵠᐃΔᐃⵠ] = Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃᐃᐃ];
		Ⲇⵠ[ⵠ.ⲆⵠⲆⲆᐃⲆⲆ] = Ⲇⵠ[ⵠ.ⲆⵠᐃⲆⲆᐃⵠ];
		Ⲇⵠ[ⵠ.ⲆᐃⲆⲆⵠΔΔ] = Ⲇⵠ[ⵠ.ᐃΔⵠΔⵠⵠⵠ];
		Ⲇⵠ[ⵠ.ᐃᐃᐃⲆⵠⵠⵠ] = Ⲇⵠ[ⵠ.ⲆᐃⵠⲆΔⲆΔ];
		Ⲇⵠ[ⵠ.ᐃᐃⲆⲆΔΔΔ] = Ⲇⵠ[ⵠ.ΔⲆⲆⲆⵠⵠᐃ];
		Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⲆΔⵠ] = Ⲇⵠ[ⵠ.ΔᐃⵠⵠⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ΔⵠⵠⵠⲆⵠⵠ] = Ⲇⵠ[ⵠ.ΔⲆⵠⵠⲆΔⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠᐃⲆⲆ] = Ⲇⵠ[ⵠ.ΔΔⲆⵠⵠΔᐃ];
		Ⲇⵠ[ⵠ.ΔⵠⲆⵠⲆⵠᐃ] = Ⲇⵠ[ⵠ.ᐃⲆΔⵠΔⵠⲆ];
		Ⲇⵠ[ⵠ.ⵠⲆⲆᐃΔⵠⵠ] = Ⲇⵠ[ⵠ.ⲆᐃΔᐃᐃΔⲆ];
		Ⲇⵠ[ⵠ.ᐃᐃᐃᐃⵠⲆⲆ] = Ⲇⵠ[ⵠ.ΔᐃᐃᐃⲆΔᐃ];
		Ⲇⵠ[ⵠ.ⲆᐃⲆᐃΔΔⲆ] = Ⲇⵠ[ⵠ.Ⲇᐃᐃⵠⵠⵠⵠ];
		Ⲇⵠ[ⵠ.ΔⵠⲆⵠΔⲆᐃ] = Ⲇⵠ[ⵠ.ⵠΔΔⲆⲆΔⲆ];
		Ⲇⵠ[ⵠ.ΔⲆⲆᐃⵠⵠΔ] = Ⲇⵠ[ⵠ.ⵠΔⵠⲆⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ⲆᐃⵠⲆⲆⲆⲆ] = Ⲇⵠ[ⵠ.ⲆᐃᐃⵠΔⵠⲆ];
		Ⲇⵠ[ⵠ.ΔⵠΔⵠⲆᐃⲆ] = Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⵠⵠΔ];
		Ⲇⵠ[ⵠ.ΔΔᐃᐃΔΔᐃ] = Ⲇⵠ[ⵠ.ⵠⵠⵠᐃⵠⵠΔ];
		Ⲇⵠ[ⵠ.ⲆᐃⵠᐃⵠΔΔ] = Ⲇⵠ[ⵠ.ⵠⵠⵠᐃᐃⵠΔ];
		Ⲇⵠ[ⵠ.ᐃᐃΔΔᐃⵠᐃ] = Ⲇⵠ[ⵠ.ⲆⵠⲆΔⵠΔⲆ];
		Ⲇⵠ[ⵠ.ᐃΔΔΔᐃⲆᐃ] = Ⲇⵠ[ⵠ.ⵠΔΔⵠⲆᐃⵠ];
		Ⲇⵠ[ⵠ.ⲆᐃᐃΔᐃΔⲆ] = Ⲇⵠ[ⵠ.ⲆⵠⲆΔⵠⵠⲆ];
		Ⲇⵠ[ⵠ.ⵠΔΔᐃΔΔⲆ] = Ⲇⵠ[ⵠ.ⵠᐃΔΔⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆᐃⲆᐃⲆⲆⵠ] = Ⲇⵠ[ⵠ.ΔⵠΔⲆⲆⵠΔ];
		Ⲇⵠ[ⵠ.ΔΔⵠᐃᐃᐃⵠ] = Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆⲆΔ];
		Ⲇⵠ[ⵠ.ᐃᐃⵠⵠⵠⲆΔ] = Ⲇⵠ[ⵠ.ⵠᐃΔⵠΔⲆⵠ];
		Ⲇⵠ[ⵠ.ΔᐃᐃᐃᐃΔⵠ] = Ⲇⵠ[ⵠ.ΔⲆΔΔⵠΔΔ];
		Ⲇⵠ[ⵠ.ΔⲆᐃⲆΔΔΔ] = Ⲇⵠ[ⵠ.ⵠⵠΔΔⲆⵠⲆ];
		Ⲇⵠ[ⵠ.ΔⵠⲆⵠΔΔⵠ] = Ⲇⵠ[ⵠ.ΔⲆᐃᐃᐃΔⵠ];
		Ⲇⵠ[ⵠ.ⲆᐃᐃΔⵠΔⲆ] = Ⲇⵠ[ⵠ.ⲆΔⲆᐃᐃΔⵠ];
		Ⲇⵠ[ⵠ.ᐃΔᐃᐃⲆⵠΔ] = Ⲇⵠ[ⵠ.ⵠᐃᐃΔᐃⵠΔ];
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⵠᐃⵠ] = Ⲇⵠ[ⵠ.ⵠⵠΔΔᐃΔᐃ];
		Ⲇⵠ[ⵠ.ΔᐃᐃᐃⲆⵠⵠ] = Ⲇⵠ[ⵠ.ΔᐃⵠᐃⲆᐃᐃ];
		Ⲇⵠ[ⵠ.ⵠⵠΔⵠⲆΔΔ] = Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠᐃΔ];
		Ⲇⵠ[ⵠ.ⵠᐃⵠᐃⵠⵠⵠ] = Ⲇⵠ[ⵠ.ⲆⲆΔᐃⵠⵠΔ];
		Ⲇⵠ[ⵠ.ⲆⵠᐃΔⵠⵠᐃ] = Ⲇⵠ[ⵠ.ΔⲆⲆⲆⲆΔᐃ];
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⲆⲆⲆ] = Ⲇⵠ[ⵠ.ⲆΔⵠⵠⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆΔΔⲆΔⵠᐃ] = Ⲇⵠ[ⵠ.ⵠΔΔⵠⵠᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆⵠⵠⲆᐃΔᐃ] = Ⲇⵠ[ⵠ.ⵠΔᐃⵠΔⲆᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆᐃᐃᐃⵠΔ] = Ⲇⵠ[ⵠ.ⵠΔⲆⲆᐃΔⲆ];
		Ⲇⵠ[ⵠ.ΔⲆΔⵠⲆⲆⵠ] = Ⲇⵠ[ⵠ.ΔᐃⲆⲆⵠⲆΔ];
		Ⲇⵠ[ⵠ.ΔⲆⵠΔᐃⲆᐃ] = Ⲇⵠ[ⵠ.ΔⵠⵠᐃᐃΔⵠ];
		Ⲇⵠ[ⵠ.ⲆᐃⵠᐃᐃΔⲆ] = Ⲇⵠ[ⵠ.ⵠΔΔΔᐃᐃⲆ];
		Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠᐃᐃ] = Δᐃⵠ(ⲆᐃⵠⵠⲆΔΔⵠᐃ(.8, true, [Δ[438], Δ[164], Δ[164], Δ[164]]));
		Ⲇⵠ[ⵠ.ⲆΔᐃΔΔΔⲆ] = ΔⵠΔᐃ(.5, [{
			f: ᐃᐃⵠⲆΔᐃⵠᐃᐃ,
			x: 0,
			y: 2,
			a: ΔⵠⲆ,
			r: 0,
			c: [Δ[153]]
		}], .16, [Δ[164], "#d0ad41", "#b89733"], .9);
		Ⲇⵠ[ⵠ.ⵠΔΔᐃⵠΔⲆ] = Ⲇⵠ[ⵠ.ⲆΔΔΔⵠᐃΔ];
		Ⲇⵠ[ⵠ.ᐃⲆⲆⲆᐃⲆⵠ] = Ⲇⵠ[ⵠ.ⲆΔⵠΔΔⵠᐃ];
		Ⲇⵠ[ⵠ.ΔᐃΔⲆⵠΔⲆ] = Ⲇⵠ[ⵠ.ᐃⲆⲆⲆᐃᐃⵠ];
		Ⲇⵠ[ⵠ.ⵠⵠΔⵠⵠⵠΔ] = Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃⲆⵠ];
		Ⲇⵠ[ⵠ.Ⲇᐃⵠᐃᐃᐃⵠ] = Ⲇⵠ[ⵠ.ⵠΔⲆⵠᐃⵠᐃ];
		Ⲇⵠ[ⵠ.ᐃⵠⵠⲆΔⲆΔ] = Ⲇⵠ[ⵠ.ⵠΔᐃⲆΔᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆⵠᐃⲆⲆⲆⲆ] = Ⲇⵠ[ⵠ.ΔⲆᐃⵠⲆⵠⲆ];
		Ⲇⵠ[ⵠ.ᐃᐃΔⵠⵠΔⲆ] = Ⲇⵠ[ⵠ.ⲆᐃΔⵠΔⵠᐃ];
		Ⲇⵠ[ⵠ.ⵠᐃⵠΔⲆⵠⵠ] = Ⲇⵠ[ⵠ.ⵠΔΔⵠⲆⲆⲆ];
		Ⲇⵠ[ⵠ.ⵠⲆᐃΔΔΔᐃ] = Ⲇⵠ[ⵠ.ᐃΔΔΔⲆΔΔ];
		Ⲇⵠ[ⵠ.ⵠⲆΔΔΔⵠⲆ] = Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃⲆⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆⵠⲆΔᐃⲆ] = Ⲇⵠ[ⵠ.ⵠΔΔⵠΔⲆⵠ];
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆᐃⲆ] = Ⲇⵠ[ⵠ.ΔⵠⲆᐃΔⵠⵠ];
		Ⲇⵠ[ⵠ.ⵠⲆΔⵠΔⵠΔ] = Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔᐃΔ];
		Ⲇⵠ[ⵠ.ⵠⲆᐃΔⲆⲆᐃ] = Ⲇⵠ[ⵠ.ⵠᐃⵠⲆΔⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔᐃΔ] = Ⲇⵠ[ⵠ.ⲆⲆᐃΔΔⵠⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆⵠΔᐃⵠΔ] = Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆⲆΔ];
		Ⲇⵠ[ⵠ.ᐃᐃⲆΔⵠⲆⵠ] = Ⲇⵠ[ⵠ.ᐃΔᐃΔⵠᐃⵠ];
		Ⲇⵠ[ⵠ.ⵠΔΔⲆⵠᐃⵠ] = Ⲇⵠ[ⵠ.ᐃⵠᐃᐃⵠⲆΔ];
		Ⲇⵠ[ⵠ.ᐃⵠΔᐃΔⵠᐃ] = Ⲇⵠ[ⵠ.ⵠⵠᐃΔᐃᐃⲆ];
		Ⲇⵠ[ⵠ.ᐃᐃᐃⲆᐃΔⵠ] = Ⲇⵠ[ⵠ.ΔⵠΔⲆⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ⲆⵠⵠⲆⵠⵠⵠ] = Ⲇⵠ[ⵠ.ᐃⲆⲆⲆⲆᐃⲆ];
		Ⲇⵠ[ⵠ.ⵠⲆᐃΔⲆⵠᐃ] = Ⲇⵠ[ⵠ.ⲆΔᐃⵠⲆᐃⵠ];
		Ⲇⵠ[ⵠ.ⵠⲆⲆΔⵠΔⲆ] = Ⲇⵠ[ⵠ.ⲆⲆᐃᐃⵠⵠᐃ];
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃⵠⵠΔ] = Ⲇⵠ[ⵠ.ⵠᐃⵠⲆᐃΔΔ];
		Ⲇⵠ[ⵠ.ΔⲆᐃᐃᐃᐃᐃ] = Ⲇⵠ[ⵠ.ⵠⲆᐃⲆᐃᐃΔ];
		Ⲇⵠ[ⵠ.ⵠᐃⲆⲆⵠⵠΔ] = Ⲇⵠ[ⵠ.ᐃᐃΔᐃΔᐃᐃ];
		Ⲇⵠ[ⵠ.ᐃΔΔᐃⵠⵠⵠ] = Ⲇⵠ[ⵠ.ᐃᐃΔᐃΔⵠⲆ];
		Ⲇⵠ[ⵠ.ⵠΔᐃⲆᐃΔΔ] = Ⲇⵠ[ⵠ.ⲆⵠΔᐃΔᐃΔ];
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆᐃΔⲆ] = Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆᐃΔ];
		Ⲇⵠ[ⵠ.ᐃΔΔⲆΔΔᐃ] = Ⲇⵠ[ⵠ.ⲆⵠΔᐃⵠⵠᐃ];
		Ⲇⵠ[ⵠ.ᐃⵠⵠⵠΔᐃᐃ] = Ⲇⵠ[ⵠ.ᐃⵠⲆᐃΔⲆⵠ];
		Ⲇⵠ[ⵠ.ⵠΔⵠⵠᐃᐃⵠ] = Ⲇⵠ[ⵠ.ᐃᐃⲆᐃⵠⲆⵠ];
		Ⲇⵠ[ⵠ.ⲆΔΔΔᐃⲆⲆ] = Ⲇⵠ[ⵠ.ᐃⵠⲆⵠΔᐃⵠ];
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆΔⵠⵠ] = Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃⲆΔ];
		Ⲇⵠ[ⵠ.ⵠᐃΔΔⲆⲆⲆ] = Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠⲆΔ];
		Ⲇⵠ[ⵠ.ⵠⵠᐃⵠΔⲆᐃ] = Ⲇⵠ[ⵠ.ᐃΔⵠⵠⵠᐃᐃ];
		Ⲇⵠ[ⵠ.ⵠᐃⵠᐃΔᐃᐃ] = Ⲇⵠ[ⵠ.ᐃΔΔⵠⲆⵠⵠ];
		Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔΔⵠ] = Ⲇⵠ[ⵠ.ⲆΔᐃⵠⲆⲆΔ];
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔⲆᐃΔ] = Ⲇⵠ[ⵠ.ⵠΔΔΔⲆⲆΔ];
		Ⲇⵠ[ⵠ.ⲆᐃᐃΔⲆᐃᐃ] = Ⲇⵠ[ⵠ.ⵠⵠᐃᐃΔᐃᐃ];
		Ⲇⵠ[ⵠ.ΔΔⲆᐃⵠⵠⲆ] = Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆⲆⲆ];
		Ⲇⵠ[ⵠ.ⵠΔⵠᐃΔⲆΔ] = Ⲇⵠ[ⵠ.ᐃⵠⵠⲆᐃⵠΔ];
		Ⲇⵠ[ⵠ.ᐃⵠᐃⲆΔⲆΔ] = Ⲇⵠ[ⵠ.ⲆⲆⲆⲆΔⲆⵠ];
		Ⲇⵠ[ⵠ.ⵠⵠΔⲆᐃΔⲆ] = Ⲇⵠ[ⵠ.ΔⵠΔⲆⵠΔΔ];
		Ⲇⵠ[ⵠ.ΔᐃΔⵠⵠⵠᐃ] = Ⲇⵠ[ⵠ.ᐃᐃᐃᐃΔⵠⵠ];
		Ⲇⵠ[ⵠ.ⵠⵠⲆᐃⲆᐃⲆ] = Ⲇⵠ[ⵠ.ⲆⲆⵠᐃⲆΔⲆ];
		Ⲇⵠ[ⵠ.ⲆⵠᐃΔᐃΔⵠ] = Ⲇⵠ[ⵠ.ΔΔΔΔΔΔⵠ];
		Ⲇⵠ[ⵠ.ⲆⵠΔⵠΔⵠΔ] = Ⲇⵠ[ⵠ.ΔⵠⵠⲆᐃΔⵠ];
		Ⲇⵠ[ⵠ.ΔΔΔΔⲆᐃΔ] = Ⲇⵠ[ⵠ.ᐃᐃⵠⵠΔᐃⲆ];
		Ⲇⵠ[ⵠ.ⲆⵠΔΔΔΔΔ] = Ⲇⵠ[ⵠ.ⲆΔᐃⲆΔⵠⵠ];
		Ⲇⵠ[ⵠ.ΔⵠⲆⲆᐃΔⵠ] = Ⲇⵠ[ⵠ.ᐃᐃⲆΔⵠΔⲆ];
		Ⲇⵠ[ⵠ.ΔᐃΔⲆᐃⲆⲆ] = Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃᐃⲆ];
		Ⲇⵠ[ⵠ.ΔⲆⵠΔⵠᐃⵠ] = Ⲇⵠ[ⵠ.ⲆᐃᐃᐃⲆΔᐃ];
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠⲆΔⲆ] = Ⲇⵠ[ⵠ.ᐃⲆΔⵠᐃⲆΔ];
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠΔⵠⵠ] = Ⲇⵠ[ⵠ.ⲆΔᐃⲆᐃⲆⵠ];
		Ⲇⵠ[ⵠ.ΔΔⲆΔⵠᐃᐃ] = Ⲇⵠ[ⵠ.ⵠΔⵠⲆⵠⵠⵠ];
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃⵠⵠⲆ] = Ⲇⵠ[ⵠ.ΔᐃᐃⲆᐃᐃⵠ];
		Ⲇⵠ[ⵠ.ΔⵠⵠⵠⵠΔⲆ] = Ⲇⵠ[ⵠ.ⲆⲆⲆΔⵠⲆᐃ];
		Ⲇⵠ[ⵠ.ΔΔᐃⲆⲆᐃⵠ] = Ⲇⵠ[ⵠ.ᐃΔⲆⲆⵠΔΔ];
		Ⲇⵠ[ⵠ.ΔΔᐃⲆΔᐃᐃ] = Ⲇⵠ[ⵠ.ⲆΔⲆⵠⲆᐃᐃ];
		Ⲇⵠ[ⵠ.ᐃΔⵠⲆⵠΔⲆ] = Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃΔᐃ];
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃⲆⲆⵠ] = Ⲇⵠ[ⵠ.ⲆⵠΔⵠᐃᐃᐃ];
		Ⲇⵠ[ⵠ.ΔⵠⲆⲆⲆΔᐃ] = Ⲇⵠ[ⵠ.ΔΔⲆⵠΔⲆⲆ];
		Ⲇⵠ[ⵠ.ΔΔⲆᐃΔⵠⲆ] = Ⲇⵠ[ⵠ.ⲆΔⵠⲆᐃⲆᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆᐃⵠⵠⲆⲆ] = Ⲇⵠ[ⵠ.ⲆᐃⵠᐃⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ΔⵠⵠΔΔΔᐃ] = Ⲇⵠ[ⵠ.ⵠᐃΔⲆᐃⲆᐃ];
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆⵠΔⲆ] = Ⲇⵠ[ⵠ.ΔᐃⵠⲆⲆⲆⲆ];
		Ⲇⵠ[ⵠ.ᐃΔⵠΔⵠΔⲆ] = Ⲇⵠ[ⵠ.ΔⲆⲆⵠΔⲆΔ];
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃⵠⵠᐃ] = Ⲇⵠ[ⵠ.ΔᐃΔⵠⵠᐃᐃ];
		Ⲇⵠ[ⵠ.ⵠᐃⲆΔΔⲆⵠ] = Ⲇⵠ[ⵠ.ⲆᐃⲆⵠⵠⵠⵠ];
		Ⲇⵠ[ⵠ.ΔᐃᐃⵠⵠⲆΔ] = Ⲇⵠ[ⵠ.ⵠᐃⲆⲆΔᐃᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆⵠᐃⲆΔΔ] = Ⲇⵠ[ⵠ.ⵠⲆⵠⲆⵠⲆⲆ];
		Ⲇⵠ[ⵠ.ⵠⵠⵠΔⲆⵠΔ] = Ⲇⵠ[ⵠ.ⵠΔΔᐃⵠΔⵠ];
		Ⲇⵠ[ⵠ.ΔᐃΔⲆΔⲆᐃ] = Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃᐃⵠ];
		Ⲇⵠ[ⵠ.ΔⵠⵠⵠⲆⵠᐃ] = Ⲇⵠ[ⵠ.ⵠⵠᐃⲆⲆⲆⵠ];
		Ⲇⵠ[ⵠ.ⵠᐃⵠΔᐃⵠⲆ] = Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠⲆΔ];
		Ⲇⵠ[ⵠ.ⵠⵠⲆᐃᐃΔΔ] = Ⲇⵠ[ⵠ.ᐃᐃⲆⲆᐃⲆΔ];
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆᐃΔᐃ] = Ⲇⵠ[ⵠ.ⵠⲆⵠⲆⲆΔᐃ];
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠⵠΔᐃ] = Ⲇⵠ[ⵠ.ᐃⵠⲆⲆⲆⲆᐃ];
		Ⲇⵠ[ⵠ.ΔᐃⲆΔᐃΔⲆ] = Ⲇⵠ[ⵠ.ⲆⵠΔⵠᐃⵠΔ];
		Ⲇⵠ[ⵠ.ᐃⲆⲆⲆΔⲆⲆ] = Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠΔᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔΔⲆᐃ] = Ⲇⵠ[ⵠ.ᐃⲆΔΔᐃⲆⵠ]
	}

	function ΔⲆⲆᐃΔΔΔ(ⵠⵠⲆⲆΔᐃⵠ, ΔⲆⲆΔⵠΔⲆ, ΔᐃⵠⵠᐃΔΔ, ΔᐃⲆⵠᐃᐃᐃ, ΔⲆⵠⵠᐃΔΔ) {
		const ᐃⲆΔⲆⲆⵠᐃ = ~(6707 & ⵠⵠⲆⲆΔᐃⵠ) & 6707 | ~(6707 & ⵠⵠⲆⲆΔᐃⵠ) & ⵠⵠⲆⲆΔᐃⵠ;
		const ⲆΔᐃⵠᐃΔΔ = (1664525 * (11546 + ΔⲆⲆΔⵠΔⲆ) + 1013904223) % 4294967296;
		const ΔΔⵠⲆⵠⲆⵠⵠᐃ = (5131 | ΔᐃⵠⵠᐃΔΔ) & ~(ΔᐃⵠⵠᐃΔΔ & 5131);
		const ⵠΔⵠⲆΔⵠΔΔᐃ = (1013904223 + (977 + ΔᐃⲆⵠᐃᐃᐃ) * 1664525) % 4294967296;
		const ᐃⵠⵠⲆⲆᐃᐃᐃⵠ = (1 + (ΔⲆⵠⵠᐃΔΔ + 38021) * 22695477) % 4294967296;
		const ⲆⲆⲆⵠⲆᐃΔ = ⲆΔⵠᐃΔᐃⲆ(ᐃⲆΔⲆⲆⵠᐃ, ⲆΔᐃⵠᐃΔΔ, ΔΔⵠⲆⵠⲆⵠⵠᐃ, ⵠΔⵠⲆΔⵠΔΔᐃ);
		const ⲆΔⲆⲆⵠⵠⲆΔᐃ = ⵠΔⵠⲆᐃⵠⵠ(ᐃⵠⵠⲆⲆᐃᐃᐃⵠ, ᐃⲆΔⲆⲆⵠᐃ, ⲆΔᐃⵠᐃΔΔ);
		const ⲆΔⲆⵠⵠⲆⲆⲆⵠ = ~(ⲆⲆⲆⵠⲆᐃΔ & 21474) & (21474 | ⲆⲆⲆⵠⲆᐃΔ);
		return ⲆΔⲆⵠⵠⲆⲆⲆⵠ
	}

	function ᐃᐃⲆᐃⲆᐃΔᐃⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 400;
		ⲆⲆ.height = 400 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(204 * Ⲇ, 195.0833282470703 * Ⲇ);
		ᐃ.rotate(10.16);
		ᐃᐃᐃ(ᐃ, -97.5 * Ⲇ, -134.5 * Ⲇ, Ⲇ * 195, Ⲇ * 269, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ], ᐃⲆ[1], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 58.5, Ⲇ * 226.5833282470703);
		ᐃ.bezierCurveTo(120.5 * Ⲇ, 281.5833282470703 * Ⲇ, 120.5 * Ⲇ, Ⲇ * 281.5833282470703, Ⲇ * 182.5, Ⲇ * 336.5833282470703);
		ᐃ.bezierCurveTo(263 * Ⲇ, Ⲇ * 248.5833282470703, 263 * Ⲇ, 248.5833282470703 * Ⲇ, 343.5 * Ⲇ, 160.5833282470703 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 280.5, 104.58332824707031 * Ⲇ, Ⲇ * 280.5, Ⲇ * 104.58332824707031, Ⲇ * 217.5, Ⲇ * 48.58332824707031);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[3], Ⲇ * ᐃᐃΔΔ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 197, Ⲇ * 169.0833282470703);
		ᐃ.rotate(10.16);
		ᐃᐃᐃ(ᐃ, Ⲇ * -93.5, Ⲇ * -126.5, 187 * Ⲇ, Ⲇ * 253, ᐃᐃᐃⵠⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[1], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 226.5, 24.583328247070312 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 58.5, Ⲇ * 207.5833282470703, Ⲇ * 143, Ⲇ * 116.58332824707031, 59.5 * Ⲇ, Ⲇ * 208.5833282470703);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔΔᐃⵠΔ, ᐃⲆ[ΔΔⲆΔ], Ⲇ * ΔⲆᐃΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(46.133331298828125 * Ⲇ, 202.64999389648438 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 46.133331298828125, Ⲇ * 215.64999389648438, 46.133331298828125 * Ⲇ, Ⲇ * 215.64999389648438, 46.133331298828125 * Ⲇ, 228.64999389648438 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[1], ⲆᐃⵠⲆⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(55.133331298828125 * Ⲇ, Ⲇ * 211.64999389648438);
		ᐃ.bezierCurveTo(55.133331298828125 * Ⲇ, Ⲇ * 225.14999389648438, 55.133331298828125 * Ⲇ, 225.14999389648438 * Ⲇ, 55.133331298828125 * Ⲇ, Ⲇ * 238.64999389648438);
		ᐃ.bezierCurveTo(50.133331298828125 * Ⲇ, Ⲇ * 235.64999389648438, 50.133331298828125 * Ⲇ, Ⲇ * 235.64999389648438, 45.133331298828125 * Ⲇ, 232.64999389648438 * Ⲇ);
		ᐃ.bezierCurveTo(45.133331298828125 * Ⲇ, Ⲇ * 216.64999389648438, 45.133331298828125 * Ⲇ, Ⲇ * 216.64999389648438, Ⲇ * 45.133331298828125, Ⲇ * 200.64999389648438);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[1], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(46.133331298828125 * Ⲇ, Ⲇ * 198.39999389648438);
		ᐃ.bezierCurveTo(Ⲇ * 46.133331298828125, 199.89999389648438 * Ⲇ, 46.133331298828125 * Ⲇ, Ⲇ * 199.89999389648438, Ⲇ * 46.133331298828125, 201.39999389648438 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[1], Ⲇ * ᐃᐃΔⵠΔᐃΔ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 249.63333129882812, Ⲇ * 120.89999389648438);
		ᐃ.rotate(7.04);
		ᐃᐃᐃ(ᐃ, -58.5 * Ⲇ, Ⲇ * -32, Ⲇ * 117, 64 * Ⲇ, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		return ⲆⲆ
	}

	function ᐃⵠᐃᐃΔΔᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 102;
		ⲆⲆ.height = 102 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(ᐃⵠᐃⲆ, ᐃⵠⲆⵠ);
		ᐃᐃᐃ(ᐃ, 24 * Ⲇ, 26 * Ⲇ, Ⲇ * 70, 9 * Ⲇ, Ⲇ * 10);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃᐃᐃ(ᐃ, Ⲇ * 26, Ⲇ * 70, 70 * Ⲇ, Ⲇ * 9, 10 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔᐃ]);
		ᐃᐃᐃ(ᐃ, Ⲇ * 5, Ⲇ * 3, 22 * Ⲇ, Ⲇ * 94, 5 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠ]);
		ᐃᐃᐃ(ᐃ, Ⲇ * 40, Ⲇ * ⵠΔⲆⲆ, Ⲇ * 22, Ⲇ * 94, ⵠⵠΔΔⲆ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃᐃᐃ(ᐃ, Ⲇ * 75, 3 * Ⲇ, 22 * Ⲇ, 94 * Ⲇ, Ⲇ * 5);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = ⲆⲆⲆᐃ;
		ᐃ.translate(-3, -ⵠΔⲆⲆ);
		ᐃᐃᐃ(ᐃ, 24 * Ⲇ, Ⲇ * 26, Ⲇ * 70, Ⲇ * ᐃⲆⲆⵠⲆⵠⵠ, 10 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔⲆΔ]);
		ᐃᐃᐃ(ᐃ, 26 * Ⲇ, 70 * Ⲇ, 70 * Ⲇ, ⲆᐃⲆᐃⲆ * Ⲇ, Ⲇ * ⲆΔⵠᐃⲆ);
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃᐃᐃ(ᐃ, Ⲇ * 5, Ⲇ * ΔⵠᐃⲆ, 22 * Ⲇ, 94 * Ⲇ, Ⲇ * ⲆΔⲆⲆ);
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[3], Ⲇ * ⲆⵠⵠⲆ);
		ᐃᐃᐃ(ᐃ, Ⲇ * 40, Ⲇ * ⵠⵠⵠⵠ, Ⲇ * 22, 94 * Ⲇ, 5 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃᐃΔ], ᐃⲆ[3], Ⲇ * 4);
		ᐃᐃᐃ(ᐃ, Ⲇ * 75, ⵠⵠⵠⵠ * Ⲇ, Ⲇ * 22, 94 * Ⲇ, ᐃΔⵠΔᐃ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃⲆ], ᐃⲆ[3], Ⲇ * ⲆΔⵠᐃΔ);
		return ⲆⲆ
	}

	function ⲆⲆⲆⲆⲆΔᐃ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 85 * Ⲇ;
		ⲆⲆ.height = 145 * Ⲇ;
		ᐃ.translate(-165 * Ⲇ, Ⲇ * -95);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 217, Ⲇ * 103);
		ᐃ.bezierCurveTo(Ⲇ * 209, 129 * Ⲇ, Ⲇ * 203, 137 * Ⲇ, 195 * Ⲇ, 146 * Ⲇ);
		ᐃ.bezierCurveTo(195 * Ⲇ, Ⲇ * 159, Ⲇ * 194, 167 * Ⲇ, Ⲇ * 189, 178 * Ⲇ);
		ᐃ.bezierCurveTo(193 * Ⲇ, 186 * Ⲇ, Ⲇ * 196, 195 * Ⲇ, Ⲇ * 198, Ⲇ * 216);
		ᐃ.bezierCurveTo(217.5 * Ⲇ, Ⲇ * 189.5, 217.5 * Ⲇ, 189.5 * Ⲇ, Ⲇ * 237, 163 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 231, 163 * Ⲇ);
		ᐃ.bezierCurveTo(221 * Ⲇ, Ⲇ * 139, Ⲇ * 218, Ⲇ * 128, Ⲇ * 215, Ⲇ * 114);
		ᐃ.bezierCurveTo(Ⲇ * 213, Ⲇ * 102, 220 * Ⲇ, 92 * Ⲇ, Ⲇ * 222, 107 * Ⲇ);
		ᐃ.bezierCurveTo(224 * Ⲇ, 118 * Ⲇ, 233 * Ⲇ, Ⲇ * 138, 244 * Ⲇ, 161 * Ⲇ);
		ᐃ.bezierCurveTo(235 * Ⲇ, 188 * Ⲇ, 224 * Ⲇ, 198 * Ⲇ, 204 * Ⲇ, Ⲇ * 221);
		ᐃ.bezierCurveTo(Ⲇ * 190, Ⲇ * 233, 190 * Ⲇ, Ⲇ * 235, Ⲇ * 180, 235 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 167, 235 * Ⲇ, 164 * Ⲇ, Ⲇ * 216, Ⲇ * 175, Ⲇ * 211);
		ᐃ.bezierCurveTo(Ⲇ * 176, 208 * Ⲇ, Ⲇ * 181, 207 * Ⲇ, Ⲇ * 191, 205 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 213, 186 * Ⲇ, Ⲇ * 218, Ⲇ * 180, Ⲇ * 230, 163 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃᐃΔ], ᐃⲆ[3], Ⲇ * ΔΔᐃᐃⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 234, 154 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 227, 156 * Ⲇ, 222 * Ⲇ, 156 * Ⲇ, 199 * Ⲇ, Ⲇ * 148);
		ᐃ.bezierCurveTo(201 * Ⲇ, 151 * Ⲇ, 216 * Ⲇ, Ⲇ * 159, 224 * Ⲇ, 162 * Ⲇ);
		ᐃ.bezierCurveTo(209 * Ⲇ, Ⲇ * 169.5, 209 * Ⲇ, 169.5 * Ⲇ, Ⲇ * 194, 177 * Ⲇ);
		ᐃ.bezierCurveTo(213.5 * Ⲇ, Ⲇ * 175, Ⲇ * 213.5, Ⲇ * 175, 233 * Ⲇ, Ⲇ * 173);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔΔᐃᐃ]);
		return ⲆⲆ
	}

	function ΔΔΔⵠᐃⵠⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 175;
		ⲆⲆ.height = Ⲇ * 106;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : Δᐃᐃ;
		ᐃ.translate(ΔᐃΔ, ⲆⲆΔᐃΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 28, Ⲇ * 67);
		ᐃ.bezierCurveTo(55 * Ⲇ, 80 * Ⲇ, 126 * Ⲇ, Ⲇ * 74, 144 * Ⲇ, Ⲇ * 68);
		ᐃ.bezierCurveTo(Ⲇ * 144.5, 75 * Ⲇ, Ⲇ * 144.5, Ⲇ * 75, Ⲇ * 145, 82 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 114, Ⲇ * 94, 47 * Ⲇ, 91 * Ⲇ, 28 * Ⲇ, Ⲇ * 82);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(ⵠⲆΔⵠ, -ⵠⲆΔⲆᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 145, Ⲇ * 75);
		ᐃ.bezierCurveTo(143 * Ⲇ, 51 * Ⲇ, Ⲇ * 133, Ⲇ * 29, Ⲇ * 100, Ⲇ * 27);
		ᐃ.bezierCurveTo(Ⲇ * 52, 21 * Ⲇ, Ⲇ * 37, Ⲇ * 37, Ⲇ * 31, Ⲇ * 54);
		ᐃ.bezierCurveTo(Ⲇ * 23, 78 * Ⲇ, 28 * Ⲇ, 77 * Ⲇ, Ⲇ * 36, 79 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 80, Ⲇ * 87, 120 * Ⲇ, 81 * Ⲇ, Ⲇ * 145, Ⲇ * 76);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(38 * Ⲇ, Ⲇ * 46);
		ᐃ.bezierCurveTo(Ⲇ * 52, 37 * Ⲇ, 69 * Ⲇ, 36 * Ⲇ, 85 * Ⲇ, Ⲇ * 36);
		ᐃ.bezierCurveTo(Ⲇ * 118, Ⲇ * 38, Ⲇ * 129, 42 * Ⲇ, Ⲇ * 137, 48 * Ⲇ);
		ᐃ.bezierCurveTo(135 * Ⲇ, 45 * Ⲇ, Ⲇ * 135, Ⲇ * 45, 133 * Ⲇ, 42 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 124, Ⲇ * 32, Ⲇ * 116, 28 * Ⲇ, 88 * Ⲇ, 25 * Ⲇ);
		ᐃ.bezierCurveTo(47 * Ⲇ, 28 * Ⲇ, 40 * Ⲇ, 32 * Ⲇ, 36 * Ⲇ, 44 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 145, Ⲇ * 75);
		ᐃ.bezierCurveTo(143 * Ⲇ, Ⲇ * 51, Ⲇ * 133, Ⲇ * 29, ᐃᐃⲆⵠΔ * Ⲇ, Ⲇ * 27);
		ᐃ.bezierCurveTo(52 * Ⲇ, Ⲇ * 21, 37 * Ⲇ, Ⲇ * 37, 31 * Ⲇ, Ⲇ * 54);
		ᐃ.bezierCurveTo(23 * Ⲇ, 78 * Ⲇ, 28 * Ⲇ, Ⲇ * 77, 36 * Ⲇ, Ⲇ * 79);
		ᐃ.bezierCurveTo(Ⲇ * 80, Ⲇ * 87, Ⲇ * 120, Ⲇ * 81, Ⲇ * 145, Ⲇ * 76);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[2], ⲆⵠⲆᐃ * Ⲇ);
		ᐃ.translate(Δⵠⵠ, -3 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 28, Ⲇ * 67);
		ᐃ.bezierCurveTo(Ⲇ * 55, 80 * Ⲇ, 126 * Ⲇ, Ⲇ * 74, Ⲇ * 144, 68 * Ⲇ);
		ᐃ.bezierCurveTo(144.5 * Ⲇ, 75 * Ⲇ, Ⲇ * 144.5, Ⲇ * 75, Ⲇ * 145, Ⲇ * 82);
		ᐃ.bezierCurveTo(114 * Ⲇ, Ⲇ * 94, Ⲇ * 47, Ⲇ * 91, Ⲇ * 28, Ⲇ * 82);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[10], ᐃⲆ[ΔⲆⲆΔΔ], 4 * Ⲇ);
		ᐃ.translate(ⵠⲆΔⵠ, Ⲇ * 3);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 131, 43 * Ⲇ);
		ᐃ.bezierCurveTo(145 * Ⲇ, 40 * Ⲇ, 148 * Ⲇ, 32 * Ⲇ, 147 * Ⲇ, Ⲇ * ΔᐃᐃΔⵠⵠⵠ);
		ᐃ.bezierCurveTo(166 * Ⲇ, Ⲇ * 39, 155 * Ⲇ, Ⲇ * 62, 140 * Ⲇ, 67 * Ⲇ);
		ᐃ.bezierCurveTo(128 * Ⲇ, 65 * Ⲇ, 128 * Ⲇ, 52 * Ⲇ, 131 * Ⲇ, Ⲇ * 45);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 41, 43 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 30, Ⲇ * 42, Ⲇ * 24, Ⲇ * 33, 25 * Ⲇ, Ⲇ * 17);
		ᐃ.bezierCurveTo(Ⲇ * 7, Ⲇ * 34, ⲆΔᐃⵠΔⲆⵠ * Ⲇ, 63 * Ⲇ, 33 * Ⲇ, Ⲇ * 66);
		ᐃ.bezierCurveTo(45 * Ⲇ, 59 * Ⲇ, 44 * Ⲇ, 53 * Ⲇ, Ⲇ * 42, 44 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 24, ⵠⲆⵠⲆⵠ * Ⲇ);
		ᐃ.bezierCurveTo(24 * Ⲇ, 35 * Ⲇ, Ⲇ * 35, Ⲇ * 42, 42 * Ⲇ, 44 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 43, 51 * Ⲇ, 43 * Ⲇ, Ⲇ * 48, Ⲇ * 43, 56 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 25, Ⲇ * 47, Ⲇ * 17, Ⲇ * 36, Ⲇ * 23, Ⲇ * ⲆᐃⵠⲆᐃ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(148 * Ⲇ, 18 * Ⲇ);
		ᐃ.bezierCurveTo(159 * Ⲇ, Ⲇ * 44, 139 * Ⲇ, Ⲇ * 52, 130 * Ⲇ, Ⲇ * 55);
		ᐃ.bezierCurveTo(129 * Ⲇ, Ⲇ * 48, Ⲇ * 129, 46 * Ⲇ, Ⲇ * 131, Ⲇ * 43);
		ᐃ.bezierCurveTo(Ⲇ * 144, Ⲇ * 37, Ⲇ * 148, Ⲇ * 35, Ⲇ * 147, 18 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃⵠΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(131 * Ⲇ, Ⲇ * 43);
		ᐃ.bezierCurveTo(145 * Ⲇ, 40 * Ⲇ, Ⲇ * 148, 32 * Ⲇ, 147 * Ⲇ, ⵠᐃⲆⲆⲆ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 166, Ⲇ * 39, 155 * Ⲇ, 62 * Ⲇ, 140 * Ⲇ, 67 * Ⲇ);
		ᐃ.bezierCurveTo(128 * Ⲇ, Ⲇ * 65, 128 * Ⲇ, Ⲇ * 52, Ⲇ * 131, Ⲇ * 45);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠⵠⵠⲆⵠ, ᐃⲆ[ⵠⲆⲆΔΔ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(41 * Ⲇ, 43 * Ⲇ);
		ᐃ.bezierCurveTo(30 * Ⲇ, 42 * Ⲇ, Ⲇ * 24, Ⲇ * 33, 25 * Ⲇ, Ⲇ * ΔΔⲆᐃᐃΔⵠ);
		ᐃ.bezierCurveTo(7 * Ⲇ, 34 * Ⲇ, Ⲇ * 17, Ⲇ * 63, Ⲇ * 33, 66 * Ⲇ);
		ᐃ.bezierCurveTo(45 * Ⲇ, Ⲇ * 59, 44 * Ⲇ, Ⲇ * 53, 42 * Ⲇ, 44 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆⲆΔᐃⵠ, ᐃⲆ[4], Ⲇ * ᐃᐃⲆⵠ);
		ᐃ.save();
		ᐃ.translate(87 * Ⲇ, 34.5 * Ⲇ);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, -8 * Ⲇ, Ⲇ * -10.5, Ⲇ * 16, 21 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⵠΔᐃΔᐃ], ᐃⲆ[Δⵠᐃᐃ], 4 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 87, Ⲇ * 57);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, -ⲆᐃⲆΔⲆ * Ⲇ, Ⲇ * -23, Ⲇ * ⲆⵠⲆᐃᐃΔⵠ, 46 * Ⲇ, Ⲇ * ⲆᐃⲆⲆᐃ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⲆΔⲆ], ᐃⲆ[ᐃⵠΔⲆ], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, Ⲇ * 87, Ⲇ * 39, Ⲇ * 4.123105625617661);
		ᐃⵠ(ᐃ, ᐃⲆ[9], ᐃⲆ[ⲆⲆⵠᐃ], Ⲇ * ᐃᐃᐃΔⵠ);
		ᐃΔⵠ(ᐃ, Ⲇ * 87, Ⲇ * 60, Ⲇ * 4.242640687119285);
		ᐃⵠ(ᐃ, ᐃⲆ[9], ᐃⲆ[Ⲇⵠᐃⵠ], Ⲇ * ⲆⲆᐃΔᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(28 * Ⲇ, Ⲇ * 67);
		ᐃ.bezierCurveTo(55 * Ⲇ, 80 * Ⲇ, Ⲇ * 126, 74 * Ⲇ, Ⲇ * 144, 68 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 144.5, 75 * Ⲇ, Ⲇ * 144.5, 75 * Ⲇ, Ⲇ * 145, 82 * Ⲇ);
		ᐃ.bezierCurveTo(114 * Ⲇ, Ⲇ * 94, 47 * Ⲇ, Ⲇ * 91, Ⲇ * 28, Ⲇ * 82);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8], ᐃⲆ[Δᐃᐃⵠ], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(27 * Ⲇ, 69 * Ⲇ);
		ᐃ.bezierCurveTo(ⵠΔᐃⲆⵠ * Ⲇ, 77 * Ⲇ, Ⲇ * ΔᐃⵠΔⵠ, 74 * Ⲇ, Ⲇ * 27, 80 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[9], ᐃⲆ[2], Ⲇ * ΔⵠⲆᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(145 * Ⲇ, 70 * Ⲇ);
		ᐃ.bezierCurveTo(149.5 * Ⲇ, Ⲇ * 72, Ⲇ * 149.5, Ⲇ * 72, 154 * Ⲇ, 74 * Ⲇ);
		ᐃ.bezierCurveTo(150 * Ⲇ, 77 * Ⲇ, 150 * Ⲇ, 77 * Ⲇ, Ⲇ * 146, Ⲇ * 80);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[9], ᐃⲆ[ᐃⵠΔⲆ], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, 50 * Ⲇ, Ⲇ * 80, ᐃᐃⲆΔΔ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆⲆⲆⲆ], ᐃⲆ[2], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, 86.01141357421875 * Ⲇ, Ⲇ * 81.76705932617188, Ⲇ * 5);
		ᐃⵠ(ᐃ, ᐃⲆ[9], ᐃⲆ[ⵠⲆⵠΔ], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, 119.01141357421875 * Ⲇ, 80.13069152832031 * Ⲇ, ⲆΔⵠⵠᐃ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[9], ᐃⲆ[ΔⲆᐃⲆ], Ⲇ * 4);
		return ⲆⲆ
	}

	function ⲆⵠᐃⲆᐃⲆⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 376 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 371;
		ᐃ.globalAlpha = .5;
		ᐃ.translate(Ⲇ * ⵠᐃᐃⵠᐃ, Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(191.633544921875 * Ⲇ, Ⲇ * 123.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 215.633544921875, Ⲇ * 85.98580932617188, 187.633544921875 * Ⲇ, Ⲇ * 71.98580932617188, 202.633544921875 * Ⲇ, 19.985809326171875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 231.633544921875, Ⲇ * 68.98580932617188, 253.633544921875 * Ⲇ, Ⲇ * 71.98580932617188, 256.633544921875 * Ⲇ, 93.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(306.633544921875 * Ⲇ, Ⲇ * 64.98580932617188, Ⲇ * 319.633544921875, 61.985809326171875 * Ⲇ, 350.633544921875 * Ⲇ, 58.985809326171875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 280.633544921875, 86.98580932617188 * Ⲇ, 281.633544921875 * Ⲇ, 106.98580932617188 * Ⲇ, 268.633544921875 * Ⲇ, Ⲇ * 130.98580932617188);
		ᐃ.bezierCurveTo(295.633544921875 * Ⲇ, Ⲇ * 158.98580932617188, Ⲇ * 328.633544921875, 155.98580932617188 * Ⲇ, Ⲇ * 353.633544921875, 90.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(371.633544921875 * Ⲇ, Ⲇ * 158.98580932617188, Ⲇ * 337.633544921875, 210.98580932617188 * Ⲇ, Ⲇ * 286.633544921875, 209.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(323.633544921875 * Ⲇ, 230.98580932617188 * Ⲇ, Ⲇ * 317.633544921875, 274.9858093261719 * Ⲇ, 356.633544921875 * Ⲇ, 305.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 288.633544921875, Ⲇ * 297.9858093261719, 288.633544921875 * Ⲇ, Ⲇ * 265.9858093261719, Ⲇ * 275.633544921875, 266.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 280.633544921875, Ⲇ * 294.9858093261719, Ⲇ * 315.633544921875, Ⲇ * 306.9858093261719, 336.633544921875 * Ⲇ, Ⲇ * 316.9858093261719);
		ᐃ.bezierCurveTo(295.633544921875 * Ⲇ, 318.9858093261719 * Ⲇ, 264.633544921875 * Ⲇ, Ⲇ * 302.9858093261719, Ⲇ * 254.633544921875, Ⲇ * 289.9858093261719);
		ᐃ.bezierCurveTo(252.633544921875 * Ⲇ, Ⲇ * 301.9858093261719, Ⲇ * 224.633544921875, 315.9858093261719 * Ⲇ, 201.633544921875 * Ⲇ, 356.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 195.633544921875, Ⲇ * 313.9858093261719, Ⲇ * 195.633544921875, 308.9858093261719 * Ⲇ, Ⲇ * 196.633544921875, 307.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(197.633544921875 * Ⲇ, Ⲇ * 289.9858093261719, 207.633544921875 * Ⲇ, Ⲇ * 283.9858093261719, 195.633544921875 * Ⲇ, 258.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(182.633544921875 * Ⲇ, Ⲇ * 282.9858093261719, 190.633544921875 * Ⲇ, Ⲇ * 287.9858093261719, 193.633544921875 * Ⲇ, Ⲇ * 297.9858093261719);
		ᐃ.bezierCurveTo(Ⲇ * 195.633544921875, Ⲇ * 306.9858093261719, 191.633544921875 * Ⲇ, Ⲇ * 334.9858093261719, Ⲇ * 187.633544921875, 354.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 165.633544921875, Ⲇ * 320.9858093261719, Ⲇ * 138.633544921875, 307.9858093261719 * Ⲇ, 135.633544921875 * Ⲇ, 288.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(110.633544921875 * Ⲇ, 318.9858093261719 * Ⲇ, 68.633544921875 * Ⲇ, Ⲇ * 323.9858093261719, Ⲇ * 49.633544921875, 320.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(88.633544921875 * Ⲇ, Ⲇ * 308.9858093261719, 108.633544921875 * Ⲇ, Ⲇ * 284.9858093261719, Ⲇ * 118.633544921875, 258.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 86.633544921875, 264.9858093261719 * Ⲇ, 75.633544921875 * Ⲇ, Ⲇ * 310.9858093261719, 19.633544921875 * Ⲇ, Ⲇ * 304.9858093261719);
		ᐃ.bezierCurveTo(54.633544921875 * Ⲇ, Ⲇ * 276.9858093261719, 59.633544921875 * Ⲇ, Ⲇ * 214.98580932617188, Ⲇ * 105.633544921875, 205.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 14.633544921875, Ⲇ * 201.98580932617188, Ⲇ * 24.633544921875, 141.98580932617188 * Ⲇ, 25.633544921875 * Ⲇ, Ⲇ * 82.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 49.633544921875, 168.98580932617188 * Ⲇ, 87.633544921875 * Ⲇ, Ⲇ * 141.98580932617188, Ⲇ * 112.633544921875, 123.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 95.633544921875, 75.98580932617188 * Ⲇ, 70.633544921875 * Ⲇ, 68.98580932617188 * Ⲇ, 35.633544921875 * Ⲇ, Ⲇ * 50.985809326171875);
		ᐃ.bezierCurveTo(Ⲇ * 70.633544921875, Ⲇ * 53.985809326171875, Ⲇ * 102.633544921875, Ⲇ * 65.98580932617188, 125.633544921875 * Ⲇ, Ⲇ * 84.98580932617188);
		ᐃ.bezierCurveTo(133.633544921875 * Ⲇ, 69.98580932617188 * Ⲇ, Ⲇ * 166.633544921875, Ⲇ * 42.985809326171875, 176.633544921875 * Ⲇ, Ⲇ * 21.985809326171875);
		ᐃ.bezierCurveTo(185.633544921875 * Ⲇ, 49.985809326171875 * Ⲇ, Ⲇ * 168.633544921875, 95.98580932617188 * Ⲇ, Ⲇ * 191.633544921875, 121.98580932617188 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(Ⲇ * -ΔᐃΔΔ, -5 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(191.633544921875 * Ⲇ, 123.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(215.633544921875 * Ⲇ, 85.98580932617188 * Ⲇ, 187.633544921875 * Ⲇ, Ⲇ * 71.98580932617188, Ⲇ * 202.633544921875, 19.985809326171875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 231.633544921875, 68.98580932617188 * Ⲇ, 253.633544921875 * Ⲇ, 71.98580932617188 * Ⲇ, 256.633544921875 * Ⲇ, 93.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 306.633544921875, Ⲇ * 64.98580932617188, 319.633544921875 * Ⲇ, 61.985809326171875 * Ⲇ, Ⲇ * 350.633544921875, Ⲇ * 58.985809326171875);
		ᐃ.bezierCurveTo(Ⲇ * 280.633544921875, 86.98580932617188 * Ⲇ, Ⲇ * 281.633544921875, 106.98580932617188 * Ⲇ, Ⲇ * 268.633544921875, 130.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 295.633544921875, Ⲇ * 158.98580932617188, 328.633544921875 * Ⲇ, Ⲇ * 155.98580932617188, Ⲇ * 353.633544921875, Ⲇ * 90.98580932617188);
		ᐃ.bezierCurveTo(371.633544921875 * Ⲇ, 158.98580932617188 * Ⲇ, 337.633544921875 * Ⲇ, Ⲇ * 210.98580932617188, 286.633544921875 * Ⲇ, Ⲇ * 209.98580932617188);
		ᐃ.bezierCurveTo(323.633544921875 * Ⲇ, 230.98580932617188 * Ⲇ, Ⲇ * 317.633544921875, 274.9858093261719 * Ⲇ, 356.633544921875 * Ⲇ, Ⲇ * 305.9858093261719);
		ᐃ.bezierCurveTo(Ⲇ * 288.633544921875, 297.9858093261719 * Ⲇ, 288.633544921875 * Ⲇ, 265.9858093261719 * Ⲇ, Ⲇ * 275.633544921875, 266.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 280.633544921875, 294.9858093261719 * Ⲇ, Ⲇ * 315.633544921875, Ⲇ * 306.9858093261719, Ⲇ * 336.633544921875, 316.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 295.633544921875, Ⲇ * 318.9858093261719, Ⲇ * 264.633544921875, 302.9858093261719 * Ⲇ, Ⲇ * 254.633544921875, Ⲇ * 289.9858093261719);
		ᐃ.bezierCurveTo(252.633544921875 * Ⲇ, 301.9858093261719 * Ⲇ, Ⲇ * 224.633544921875, Ⲇ * 315.9858093261719, 201.633544921875 * Ⲇ, Ⲇ * 356.9858093261719);
		ᐃ.bezierCurveTo(Ⲇ * 195.633544921875, 313.9858093261719 * Ⲇ, 195.633544921875 * Ⲇ, Ⲇ * 308.9858093261719, Ⲇ * 196.633544921875, Ⲇ * 307.9858093261719);
		ᐃ.bezierCurveTo(Ⲇ * 197.633544921875, 289.9858093261719 * Ⲇ, Ⲇ * 207.633544921875, 283.9858093261719 * Ⲇ, 195.633544921875 * Ⲇ, Ⲇ * 258.9858093261719);
		ᐃ.bezierCurveTo(182.633544921875 * Ⲇ, Ⲇ * 282.9858093261719, Ⲇ * 190.633544921875, Ⲇ * 287.9858093261719, Ⲇ * 193.633544921875, 297.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(195.633544921875 * Ⲇ, 306.9858093261719 * Ⲇ, 191.633544921875 * Ⲇ, 334.9858093261719 * Ⲇ, Ⲇ * 187.633544921875, 354.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(165.633544921875 * Ⲇ, Ⲇ * 320.9858093261719, Ⲇ * 138.633544921875, Ⲇ * 307.9858093261719, 135.633544921875 * Ⲇ, Ⲇ * 288.9858093261719);
		ᐃ.bezierCurveTo(Ⲇ * 110.633544921875, 318.9858093261719 * Ⲇ, 68.633544921875 * Ⲇ, 323.9858093261719 * Ⲇ, Ⲇ * 49.633544921875, 320.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 88.633544921875, 308.9858093261719 * Ⲇ, Ⲇ * 108.633544921875, 284.9858093261719 * Ⲇ, Ⲇ * 118.633544921875, Ⲇ * 258.9858093261719);
		ᐃ.bezierCurveTo(86.633544921875 * Ⲇ, 264.9858093261719 * Ⲇ, Ⲇ * 75.633544921875, Ⲇ * 310.9858093261719, Ⲇ * 19.633544921875, 304.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(54.633544921875 * Ⲇ, 276.9858093261719 * Ⲇ, Ⲇ * 59.633544921875, 214.98580932617188 * Ⲇ, 105.633544921875 * Ⲇ, 205.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 14.633544921875, Ⲇ * 201.98580932617188, Ⲇ * 24.633544921875, Ⲇ * 141.98580932617188, Ⲇ * 25.633544921875, Ⲇ * 82.98580932617188);
		ᐃ.bezierCurveTo(49.633544921875 * Ⲇ, 168.98580932617188 * Ⲇ, Ⲇ * 87.633544921875, Ⲇ * 141.98580932617188, Ⲇ * 112.633544921875, Ⲇ * 123.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 95.633544921875, 75.98580932617188 * Ⲇ, Ⲇ * 70.633544921875, Ⲇ * 68.98580932617188, Ⲇ * 35.633544921875, Ⲇ * 50.985809326171875);
		ᐃ.bezierCurveTo(Ⲇ * 70.633544921875, 53.985809326171875 * Ⲇ, 102.633544921875 * Ⲇ, Ⲇ * 65.98580932617188, 125.633544921875 * Ⲇ, Ⲇ * 84.98580932617188);
		ᐃ.bezierCurveTo(133.633544921875 * Ⲇ, Ⲇ * 69.98580932617188, 166.633544921875 * Ⲇ, Ⲇ * 42.985809326171875, 176.633544921875 * Ⲇ, Ⲇ * 21.985809326171875);
		ᐃ.bezierCurveTo(185.633544921875 * Ⲇ, Ⲇ * 49.985809326171875, Ⲇ * 168.633544921875, 95.98580932617188 * Ⲇ, Ⲇ * 191.633544921875, Ⲇ * 121.98580932617188);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆᐃⵠΔⵠ, ᐃⲆ[1], Ⲇ * ᐃⲆⵠΔⵠ);
		ᐃ.translate(-1 * Ⲇ, ᐃⲆⵠΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(270.633544921875 * Ⲇ, 88.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(296.633544921875 * Ⲇ, Ⲇ * 65.98580932617188, Ⲇ * 318.633544921875, 62.985809326171875 * Ⲇ, 348.633544921875 * Ⲇ, 57.985809326171875 * Ⲇ);
		ᐃ.bezierCurveTo(309.633544921875 * Ⲇ, 76.98580932617188 * Ⲇ, 291.633544921875 * Ⲇ, 88.98580932617188 * Ⲇ, 280.633544921875 * Ⲇ, Ⲇ * 99.98580932617188);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔΔ], ᐃⲆ[ⵠⵠΔΔⲆ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 275.633544921875, 281.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 303.633544921875, Ⲇ * 308.9858093261719, 321.633544921875 * Ⲇ, 308.9858093261719 * Ⲇ, 335.633544921875 * Ⲇ, Ⲇ * 315.9858093261719);
		ᐃ.bezierCurveTo(Ⲇ * 305.633544921875, 320.9858093261719 * Ⲇ, 278.633544921875 * Ⲇ, Ⲇ * 307.9858093261719, 264.633544921875 * Ⲇ, Ⲇ * 293.9858093261719);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃⲆⵠ], ᐃⲆ[5], Ⲇ * ⲆⵠⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 124.633544921875, Ⲇ * 291.9858093261719);
		ᐃ.bezierCurveTo(106.633544921875 * Ⲇ, 316.9858093261719 * Ⲇ, 72.633544921875 * Ⲇ, Ⲇ * 325.9858093261719, 53.633544921875 * Ⲇ, 319.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 83.633544921875, Ⲇ * 308.9858093261719, 97.633544921875 * Ⲇ, 298.9858093261719 * Ⲇ, Ⲇ * 112.633544921875, 284.9858093261719 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[5], Ⲇ * ⲆⵠⲆⲆⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 113.633544921875, Ⲇ * 80.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 91.633544921875, 54.985809326171875 * Ⲇ, 72.633544921875 * Ⲇ, Ⲇ * 56.985809326171875, 36.633544921875 * Ⲇ, Ⲇ * 49.985809326171875);
		ᐃ.bezierCurveTo(87.633544921875 * Ⲇ, 72.98580932617188 * Ⲇ, Ⲇ * 95.633544921875, 82.98580932617188 * Ⲇ, Ⲇ * 106.633544921875, 96.98580932617188 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆΔⲆ], ᐃⲆ[5], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(202.633544921875 * Ⲇ, 20.985809326171875 * Ⲇ);
		ᐃ.bezierCurveTo(219.633544921875 * Ⲇ, Ⲇ * 49.985809326171875, 259.633544921875 * Ⲇ, 80.98580932617188 * Ⲇ, 255.633544921875 * Ⲇ, 92.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 268.633544921875, 86.98580932617188 * Ⲇ, 265.633544921875 * Ⲇ, 87.98580932617188 * Ⲇ, 275.633544921875 * Ⲇ, Ⲇ * 82.98580932617188);
		ᐃ.bezierCurveTo(283.633544921875 * Ⲇ, 87.98580932617188 * Ⲇ, Ⲇ * 283.633544921875, 87.98580932617188 * Ⲇ, Ⲇ * 291.633544921875, 92.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 269.633544921875, Ⲇ * 116.98580932617188, Ⲇ * 270.633544921875, 124.98580932617188 * Ⲇ, 267.633544921875 * Ⲇ, Ⲇ * 130.98580932617188);
		ᐃ.bezierCurveTo(307.633544921875 * Ⲇ, Ⲇ * 168.98580932617188, 339.633544921875 * Ⲇ, 132.98580932617188 * Ⲇ, 352.633544921875 * Ⲇ, Ⲇ * 93.98580932617188);
		ᐃ.bezierCurveTo(366.633544921875 * Ⲇ, 145.98580932617188 * Ⲇ, Ⲇ * 345.633544921875, 207.98580932617188 * Ⲇ, Ⲇ * 286.633544921875, Ⲇ * 208.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 315.633544921875, Ⲇ * 223.98580932617188, Ⲇ * 327.633544921875, Ⲇ * 287.9858093261719, 355.633544921875 * Ⲇ, 305.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 293.633544921875, 298.9858093261719 * Ⲇ, Ⲇ * 293.633544921875, Ⲇ * 275.9858093261719, 276.633544921875 * Ⲇ, 266.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(274.633544921875 * Ⲇ, 282.9858093261719 * Ⲇ, 287.633544921875 * Ⲇ, Ⲇ * 288.9858093261719, 295.633544921875 * Ⲇ, Ⲇ * 296.9858093261719);
		ᐃ.bezierCurveTo(287.133544921875 * Ⲇ, 302.4858093261719 * Ⲇ, 287.133544921875 * Ⲇ, 302.4858093261719 * Ⲇ, Ⲇ * 278.633544921875, 307.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(261.633544921875 * Ⲇ, 297.9858093261719 * Ⲇ, 258.633544921875 * Ⲇ, 293.9858093261719 * Ⲇ, 255.633544921875 * Ⲇ, Ⲇ * 290.9858093261719);
		ᐃ.bezierCurveTo(249.633544921875 * Ⲇ, Ⲇ * 301.9858093261719, 225.633544921875 * Ⲇ, 320.9858093261719 * Ⲇ, Ⲇ * 202.633544921875, 354.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(195.633544921875 * Ⲇ, Ⲇ * 318.9858093261719, Ⲇ * 196.633544921875, 306.9858093261719 * Ⲇ, Ⲇ * 198.633544921875, 300.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 209.633544921875, 268.9858093261719 * Ⲇ, Ⲇ * 199.633544921875, 266.9858093261719 * Ⲇ, 195.633544921875 * Ⲇ, 256.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(183.633544921875 * Ⲇ, 274.9858093261719 * Ⲇ, Ⲇ * 182.633544921875, 281.9858093261719 * Ⲇ, 192.633544921875 * Ⲇ, Ⲇ * 305.9858093261719);
		ᐃ.bezierCurveTo(194.633544921875 * Ⲇ, 317.9858093261719 * Ⲇ, Ⲇ * 191.633544921875, 336.9858093261719 * Ⲇ, Ⲇ * 186.633544921875, 351.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(166.633544921875 * Ⲇ, 318.9858093261719 * Ⲇ, 141.633544921875 * Ⲇ, Ⲇ * 303.9858093261719, Ⲇ * 136.633544921875, 286.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 122.633544921875, 303.9858093261719 * Ⲇ, 115.633544921875 * Ⲇ, 305.9858093261719 * Ⲇ, 109.633544921875 * Ⲇ, Ⲇ * 306.9858093261719);
		ᐃ.bezierCurveTo(101.133544921875 * Ⲇ, 301.9858093261719 * Ⲇ, 94.633544921875 * Ⲇ, Ⲇ * 297.9858093261719, Ⲇ * 92.633544921875, Ⲇ * 296.9858093261719);
		ᐃ.bezierCurveTo(116.633544921875 * Ⲇ, Ⲇ * 277.9858093261719, 116.633544921875 * Ⲇ, 266.9858093261719 * Ⲇ, 119.633544921875 * Ⲇ, 257.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(107.633544921875 * Ⲇ, Ⲇ * 257.9858093261719, Ⲇ * 65.633544921875, 308.9858093261719 * Ⲇ, 24.633544921875 * Ⲇ, 303.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(51.633544921875 * Ⲇ, Ⲇ * 275.9858093261719, Ⲇ * 64.633544921875, Ⲇ * 220.98580932617188, 108.633544921875 * Ⲇ, 205.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 14.633544921875, Ⲇ * 198.98580932617188, 26.633544921875 * Ⲇ, 142.98580932617188 * Ⲇ, 25.633544921875 * Ⲇ, 86.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 41.633544921875, Ⲇ * 155.98580932617188, 81.633544921875 * Ⲇ, Ⲇ * 148.98580932617188, 113.633544921875 * Ⲇ, Ⲇ * 124.98580932617188);
		ᐃ.bezierCurveTo(102.633544921875 * Ⲇ, 93.98580932617188 * Ⲇ, 95.633544921875 * Ⲇ, Ⲇ * 88.98580932617188, 89.633544921875 * Ⲇ, Ⲇ * 81.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 97.633544921875, Ⲇ * 76.48580932617188, Ⲇ * 97.633544921875, Ⲇ * 76.48580932617188, 105.633544921875 * Ⲇ, 70.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 120.633544921875, Ⲇ * 78.98580932617188, 121.633544921875 * Ⲇ, Ⲇ * 81.98580932617188, 124.633544921875 * Ⲇ, Ⲇ * 86.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 132.633544921875, 71.98580932617188 * Ⲇ, 160.633544921875 * Ⲇ, 56.985809326171875 * Ⲇ, Ⲇ * 175.633544921875, Ⲇ * 23.985809326171875);
		ᐃ.bezierCurveTo(182.633544921875 * Ⲇ, 53.985809326171875 * Ⲇ, 170.633544921875 * Ⲇ, Ⲇ * 102.98580932617188, 191.633544921875 * Ⲇ, 125.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(214.633544921875 * Ⲇ, Ⲇ * 89.98580932617188, 192.633544921875 * Ⲇ, 58.985809326171875 * Ⲇ, Ⲇ * 202.633544921875, 20.985809326171875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ᐃΔΔⵠ], Ⲇ * 5);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 203.633544921875, 21.985809326171875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 223.633544921875, 63.985809326171875 * Ⲇ, Ⲇ * 227.633544921875, Ⲇ * 72.98580932617188, 235.633544921875 * Ⲇ, 98.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(241.633544921875 * Ⲇ, Ⲇ * 123.98580932617188, 225.633544921875 * Ⲇ, Ⲇ * 138.98580932617188, 196.633544921875 * Ⲇ, Ⲇ * 122.98580932617188);
		ᐃ.bezierCurveTo(213.633544921875 * Ⲇ, Ⲇ * 93.98580932617188, Ⲇ * 199.633544921875, 49.985809326171875 * Ⲇ, 203.633544921875 * Ⲇ, Ⲇ * 26.985809326171875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(175.633544921875 * Ⲇ, Ⲇ * 25.985809326171875);
		ᐃ.bezierCurveTo(176.633544921875 * Ⲇ, 51.985809326171875 * Ⲇ, 171.633544921875 * Ⲇ, Ⲇ * 88.98580932617188, 186.633544921875 * Ⲇ, 121.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 156.633544921875, Ⲇ * 144.98580932617188, Ⲇ * 139.633544921875, 120.98580932617188 * Ⲇ, Ⲇ * 147.633544921875, 97.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(152.633544921875 * Ⲇ, 77.98580932617188 * Ⲇ, 162.633544921875 * Ⲇ, Ⲇ * 60.985809326171875, Ⲇ * 176.633544921875, 25.985809326171875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔᐃⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(26.633544921875 * Ⲇ, Ⲇ * 96.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 38.633544921875, 151.98580932617188 * Ⲇ, 61.633544921875 * Ⲇ, 161.98580932617188 * Ⲇ, Ⲇ * 88.633544921875, Ⲇ * 168.98580932617188);
		ᐃ.bezierCurveTo(117.633544921875 * Ⲇ, 177.98580932617188 * Ⲇ, 113.633544921875 * Ⲇ, Ⲇ * 185.98580932617188, Ⲇ * 106.633544921875, Ⲇ * 204.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 32.633544921875, Ⲇ * 204.98580932617188, Ⲇ * 25.633544921875, Ⲇ * 149.98580932617188, Ⲇ * 25.633544921875, Ⲇ * 97.98580932617188);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(351.633544921875 * Ⲇ, Ⲇ * 99.98580932617188);
		ᐃ.bezierCurveTo(365.633544921875 * Ⲇ, 161.98580932617188 * Ⲇ, 333.633544921875 * Ⲇ, Ⲇ * 203.98580932617188, Ⲇ * 287.633544921875, Ⲇ * 207.98580932617188);
		ᐃ.bezierCurveTo(255.633544921875 * Ⲇ, 208.98580932617188 * Ⲇ, 266.633544921875 * Ⲇ, 174.98580932617188 * Ⲇ, 285.633544921875 * Ⲇ, Ⲇ * 176.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 313.633544921875, 178.98580932617188 * Ⲇ, 348.633544921875 * Ⲇ, 135.98580932617188 * Ⲇ, Ⲇ * 353.633544921875, Ⲇ * 99.98580932617188);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(350.633544921875 * Ⲇ, Ⲇ * 302.9858093261719);
		ᐃ.bezierCurveTo(Ⲇ * 310.633544921875, 280.9858093261719 * Ⲇ, 314.633544921875 * Ⲇ, 244.98580932617188 * Ⲇ, Ⲇ * 292.633544921875, Ⲇ * 230.98580932617188);
		ᐃ.bezierCurveTo(272.633544921875 * Ⲇ, Ⲇ * 215.98580932617188, 263.633544921875 * Ⲇ, Ⲇ * 222.98580932617188, Ⲇ * 256.633544921875, 236.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 251.633544921875, 249.98580932617188 * Ⲇ, 264.633544921875 * Ⲇ, Ⲇ * 255.98580932617188, Ⲇ * 279.633544921875, 268.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(306.633544921875 * Ⲇ, Ⲇ * 295.9858093261719, Ⲇ * 325.633544921875, 299.9858093261719 * Ⲇ, Ⲇ * 349.633544921875, Ⲇ * 302.9858093261719);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(95.633544921875 * Ⲇ, Ⲇ * 224.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 64.633544921875, 245.98580932617188 * Ⲇ, 62.633544921875 * Ⲇ, Ⲇ * 280.9858093261719, Ⲇ * 32.633544921875, 303.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(59.633544921875 * Ⲇ, 301.9858093261719 * Ⲇ, 102.633544921875 * Ⲇ, 260.9858093261719 * Ⲇ, 116.633544921875 * Ⲇ, Ⲇ * 255.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 139.633544921875, 229.98580932617188 * Ⲇ, 108.633544921875 * Ⲇ, Ⲇ * 209.98580932617188, 97.633544921875 * Ⲇ, Ⲇ * 224.98580932617188);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 195.633544921875, 253.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 209.633544921875, Ⲇ * 282.9858093261719, 205.633544921875 * Ⲇ, 278.9858093261719 * Ⲇ, Ⲇ * 199.633544921875, Ⲇ * 307.9858093261719);
		ᐃ.bezierCurveTo(198.633544921875 * Ⲇ, 332.9858093261719 * Ⲇ, 201.633544921875 * Ⲇ, 340.9858093261719 * Ⲇ, 202.633544921875 * Ⲇ, 348.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 215.633544921875, 313.9858093261719 * Ⲇ, 226.633544921875 * Ⲇ, 291.9858093261719 * Ⲇ, Ⲇ * 235.633544921875, 270.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(243.633544921875 * Ⲇ, Ⲇ * 247.98580932617188, 219.633544921875 * Ⲇ, Ⲇ * 235.98580932617188, 196.633544921875 * Ⲇ, Ⲇ * 252.98580932617188);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 195.633544921875, 251.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 176.633544921875, 275.9858093261719 * Ⲇ, Ⲇ * 182.633544921875, Ⲇ * 285.9858093261719, Ⲇ * 191.633544921875, Ⲇ * 308.9858093261719);
		ᐃ.bezierCurveTo(Ⲇ * 194.633544921875, Ⲇ * 318.9858093261719, Ⲇ * 190.633544921875, Ⲇ * 334.9858093261719, Ⲇ * 186.633544921875, 348.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 175.633544921875, Ⲇ * 307.9858093261719, 157.633544921875 * Ⲇ, Ⲇ * 291.9858093261719, Ⲇ * 155.633544921875, Ⲇ * 272.9858093261719);
		ᐃ.bezierCurveTo(150.633544921875 * Ⲇ, 243.98580932617188 * Ⲇ, Ⲇ * 170.633544921875, Ⲇ * 236.98580932617188, 195.633544921875 * Ⲇ, Ⲇ * 251.98580932617188);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 316, Ⲇ * 186.8020782470703);
		ᐃ.bezierCurveTo(Ⲇ * 315, Ⲇ * 173.8020782470703, Ⲇ * 298, 177.8020782470703 * Ⲇ, Ⲇ * 293, 183.8020782470703 * Ⲇ);
		ᐃ.bezierCurveTo(285 * Ⲇ, Ⲇ * 195.8020782470703, 314 * Ⲇ, 197.8020782470703 * Ⲇ, Ⲇ * 315, 187.8020782470703 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠⲆⵠ], ᐃⲆ[7], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 340, 157.8020782470703 * Ⲇ);
		ᐃ.bezierCurveTo(327 * Ⲇ, Ⲇ * 153.8020782470703, 321 * Ⲇ, 168.8020782470703 * Ⲇ, Ⲇ * 330, 174.8020782470703 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 341, Ⲇ * 178.8020782470703, 347 * Ⲇ, Ⲇ * 161.8020782470703, 341 * Ⲇ, 157.8020782470703 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[7], Ⲇ * ⲆⲆᐃΔᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(349 * Ⲇ, 136.8020782470703 * Ⲇ);
		ᐃ.bezierCurveTo(343 * Ⲇ, 135.8020782470703 * Ⲇ, 342 * Ⲇ, Ⲇ * 139.8020782470703, 341 * Ⲇ, Ⲇ * 147.8020782470703);
		ᐃ.bezierCurveTo(343 * Ⲇ, 155.8020782470703 * Ⲇ, 353 * Ⲇ, Ⲇ * 143.8020782470703, Ⲇ * 349, Ⲇ * 137.8020782470703);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆⵠⲆ], ᐃⲆ[ⵠⲆⵠⲆΔ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 278.75, Ⲇ * 246.4375);
		ᐃ.bezierCurveTo(Ⲇ * 288.75, Ⲇ * 242.4375, Ⲇ * 301.75, 248.4375 * Ⲇ, Ⲇ * 298.75, 262.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 293.75, 271.4375 * Ⲇ, Ⲇ * 287.75, 271.4375 * Ⲇ, 278.75 * Ⲇ, Ⲇ * 262.4375);
		ᐃ.bezierCurveTo(271.75 * Ⲇ, Ⲇ * 255.4375, Ⲇ * 274.75, Ⲇ * 250.4375, Ⲇ * 277.75, Ⲇ * 247.4375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠᐃⵠ], ᐃⲆ[ΔᐃⲆΔᐃ], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 310.75, Ⲇ * 277.4375);
		ᐃ.bezierCurveTo(Ⲇ * 319.75, Ⲇ * 280.4375, 322.75 * Ⲇ, 283.4375 * Ⲇ, 321.75 * Ⲇ, Ⲇ * 289.4375);
		ᐃ.bezierCurveTo(Ⲇ * 319.75, 295.4375 * Ⲇ, Ⲇ * 313.75, Ⲇ * 291.4375, 308.75 * Ⲇ, 288.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 301.75, 281.4375 * Ⲇ, Ⲇ * 306.75, Ⲇ * 277.4375, 309.75 * Ⲇ, 277.4375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[ⵠᐃᐃⲆⵠ], Ⲇ * ΔᐃΔⲆΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(217.75 * Ⲇ, 257.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 227.75, Ⲇ * 269.4375, Ⲇ * 220.75, 281.4375 * Ⲇ, 212.75 * Ⲇ, Ⲇ * 280.4375);
		ᐃ.bezierCurveTo(206.75 * Ⲇ, 279.4375 * Ⲇ, 206.75 * Ⲇ, Ⲇ * 269.4375, 204.75 * Ⲇ, 260.4375 * Ⲇ);
		ᐃ.bezierCurveTo(204.75 * Ⲇ, 254.4375 * Ⲇ, 211.75 * Ⲇ, 253.4375 * Ⲇ, Ⲇ * 216.75, Ⲇ * 256.4375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆⵠⲆ], ᐃⲆ[ⵠⵠΔⲆᐃΔⵠ], Ⲇ * ⵠⲆⲆΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 211.75, 289.4375 * Ⲇ);
		ᐃ.bezierCurveTo(219.75 * Ⲇ, 292.4375 * Ⲇ, 213.75 * Ⲇ, Ⲇ * 306.4375, Ⲇ * 206.75, 307.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 199.75, 303.4375 * Ⲇ, Ⲇ * 209.75, Ⲇ * 287.4375, Ⲇ * 210.75, Ⲇ * 289.4375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⲆΔᐃⲆⵠ], ᐃⲆ[ⲆᐃᐃΔΔ], Ⲇ * ⵠᐃΔΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 171.75, Ⲇ * 256.4375);
		ᐃ.bezierCurveTo(162.75 * Ⲇ, Ⲇ * 273.4375, Ⲇ * 166.75, 278.4375 * Ⲇ, Ⲇ * 175.75, 280.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 183.75, 278.4375 * Ⲇ, Ⲇ * 185.75, Ⲇ * 257.4375, 182.75 * Ⲇ, 255.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 176.75, Ⲇ * 251.4375, Ⲇ * 172.75, Ⲇ * 253.4375, 172.75 * Ⲇ, 256.4375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃⵠ], ᐃⲆ[ⵠΔⵠΔᐃ], Ⲇ * ⲆⵠⲆⲆⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 175.75, 289.9375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 183.75, 287.9375 * Ⲇ, Ⲇ * 186.75, 301.9375 * Ⲇ, 182.75 * Ⲇ, Ⲇ * 305.9375);
		ᐃ.bezierCurveTo(Ⲇ * 176.75, Ⲇ * 307.9375, Ⲇ * 171.75, 292.9375 * Ⲇ, 174.75 * Ⲇ, 290.9375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃⵠ], ᐃⲆ[7], ΔᐃΔⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(205.75 * Ⲇ, Ⲇ * 314.4375);
		ᐃ.bezierCurveTo(209.75 * Ⲇ, 316.4375 * Ⲇ, 210.75 * Ⲇ, 320.4375 * Ⲇ, 206.75 * Ⲇ, 323.4375 * Ⲇ);
		ᐃ.bezierCurveTo(201.75 * Ⲇ, Ⲇ * 324.4375, Ⲇ * 201.75, Ⲇ * 314.4375, 204.75 * Ⲇ, Ⲇ * 314.4375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠᐃⵠⵠ], ᐃⲆ[ⵠⵠΔⲆᐃΔⵠ], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 186.75, 313.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 181.75, 315.4375 * Ⲇ, 180.75 * Ⲇ, Ⲇ * 321.4375, 185.75 * Ⲇ, 326.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 190.75, 327.4375 * Ⲇ, Ⲇ * 190.75, Ⲇ * 313.4375, Ⲇ * 187.75, 314.4375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δⵠᐃⵠⵠ], ᐃⲆ[7], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(103.75 * Ⲇ, Ⲇ * 244.4375);
		ᐃ.bezierCurveTo(96.75 * Ⲇ, Ⲇ * 239.4375, Ⲇ * 83.75, 240.4375 * Ⲇ, Ⲇ * 81.75, 255.4375 * Ⲇ);
		ᐃ.bezierCurveTo(80.75 * Ⲇ, Ⲇ * 264.4375, Ⲇ * 89.75, Ⲇ * 269.4375, Ⲇ * 99.75, Ⲇ * 260.4375);
		ᐃ.bezierCurveTo(106.75 * Ⲇ, 254.4375 * Ⲇ, 106.75 * Ⲇ, Ⲇ * 250.4375, 104.75 * Ⲇ, 245.4375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[7], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 86.75, 182.4375 * Ⲇ);
		ᐃ.bezierCurveTo(82.75 * Ⲇ, 170.4375 * Ⲇ, Ⲇ * 66.75, 169.4375 * Ⲇ, Ⲇ * 61.75, 181.4375 * Ⲇ);
		ᐃ.bezierCurveTo(58.75 * Ⲇ, 187.4375 * Ⲇ, 68.75 * Ⲇ, 194.4375 * Ⲇ, Ⲇ * 75.75, 192.4375 * Ⲇ);
		ᐃ.bezierCurveTo(83.75 * Ⲇ, Ⲇ * 192.4375, 86.75 * Ⲇ, Ⲇ * 187.4375, 86.75 * Ⲇ, Ⲇ * 183.4375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⵠⵠⲆ], ᐃⲆ[ⵠΔⵠΔᐃ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(44.75 * Ⲇ, 152.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 55.75, Ⲇ * 159.4375, Ⲇ * 54.75, Ⲇ * 170.4375, Ⲇ * 46.75, 171.4375 * Ⲇ);
		ᐃ.bezierCurveTo(39.75 * Ⲇ, Ⲇ * 170.4375, 34.75 * Ⲇ, 151.4375 * Ⲇ, Ⲇ * 43.75, 152.4375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[ΔΔⲆⲆⲆ], ΔᐃΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(31.75 * Ⲇ, Ⲇ * 130.4375);
		ᐃ.bezierCurveTo(35.75 * Ⲇ, Ⲇ * 132.4375, 35.75 * Ⲇ, 131.4375 * Ⲇ, 37.75 * Ⲇ, Ⲇ * 137.4375);
		ᐃ.bezierCurveTo(36.75 * Ⲇ, Ⲇ * 144.4375, 36.75 * Ⲇ, 145.4375 * Ⲇ, 33.75 * Ⲇ, Ⲇ * 144.4375);
		ᐃ.bezierCurveTo(Ⲇ * 26.75, 137.4375 * Ⲇ, Ⲇ * 29.75, 131.4375 * Ⲇ, Ⲇ * 31.75, 130.4375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔⵠΔ], ᐃⲆ[7], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(69.75 * Ⲇ, Ⲇ * 274.4375);
		ᐃ.bezierCurveTo(62.75 * Ⲇ, 272.4375 * Ⲇ, 59.75 * Ⲇ, 277.4375 * Ⲇ, 57.75 * Ⲇ, 284.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 56.75, 290.4375 * Ⲇ, Ⲇ * 63.75, 289.4375 * Ⲇ, 71.75 * Ⲇ, Ⲇ * 282.4375);
		ᐃ.bezierCurveTo(Ⲇ * 75.75, 277.4375 * Ⲇ, Ⲇ * 72.75, Ⲇ * 275.4375, 69.75 * Ⲇ, 274.4375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[7], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(165.75 * Ⲇ, Ⲇ * 95.4375);
		ᐃ.bezierCurveTo(177.75 * Ⲇ, 97.4375 * Ⲇ, 182.75 * Ⲇ, 115.4375 * Ⲇ, Ⲇ * 173.75, Ⲇ * 121.4375);
		ᐃ.bezierCurveTo(164.75 * Ⲇ, Ⲇ * 126.4375, 149.75 * Ⲇ, Ⲇ * 102.4375, 164.75 * Ⲇ, 96.4375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[7], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(216.75 * Ⲇ, 94.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 227.75, 99.4375 * Ⲇ, 223.75 * Ⲇ, 122.4375 * Ⲇ, 210.75 * Ⲇ, 119.4375 * Ⲇ);
		ᐃ.bezierCurveTo(203.75 * Ⲇ, 115.4375 * Ⲇ, Ⲇ * 207.75, 93.4375 * Ⲇ, Ⲇ * 216.75, 94.4375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[ⵠᐃᐃⲆⵠ], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(211.75 * Ⲇ, 68.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 218.75, Ⲇ * 69.4375, Ⲇ * 220.75, 77.4375 * Ⲇ, Ⲇ * 216.75, Ⲇ * 83.4375);
		ᐃ.bezierCurveTo(Ⲇ * 208.75, Ⲇ * 89.4375, 205.75 * Ⲇ, Ⲇ * 68.4375, Ⲇ * 210.75, 68.4375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⲆⵠⵠ], ᐃⲆ[ⵠᐃᐃⲆⵠ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 169.75, Ⲇ * 71.4375);
		ᐃ.bezierCurveTo(Ⲇ * 162.75, Ⲇ * 72.4375, 159.75 * Ⲇ, Ⲇ * 83.4375, Ⲇ * 167.75, 88.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 174.75, 90.4375 * Ⲇ, Ⲇ * 174.75, Ⲇ * 72.4375, Ⲇ * 170.75, Ⲇ * 71.4375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃⵠΔΔ], ᐃⲆ[7], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(193.75 * Ⲇ, 160.4375 * Ⲇ);
		ᐃ.bezierCurveTo(215.75 * Ⲇ, Ⲇ * 168.4375, 224.75 * Ⲇ, 180.4375 * Ⲇ, Ⲇ * 229.75, 193.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 223.75, Ⲇ * 211.4375, Ⲇ * 205.75, 225.4375 * Ⲇ, Ⲇ * 193.75, Ⲇ * 229.4375);
		ᐃ.bezierCurveTo(Ⲇ * 167.75, 217.4375 * Ⲇ, Ⲇ * 161.75, Ⲇ * 205.4375, 156.75 * Ⲇ, 192.4375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 164.75, 175.4375 * Ⲇ, 176.75 * Ⲇ, Ⲇ * 166.4375, Ⲇ * 192.75, Ⲇ * 160.4375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[8], ᐃⲆ[9], Ⲇ * 3);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 189.1999969482422, 182.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(190.1999969482422 * Ⲇ, 184.11249923706055 * Ⲇ, Ⲇ * 190.1999969482422, 184.11249923706055 * Ⲇ, Ⲇ * 191.1999969482422, Ⲇ * 185.61249923706055);
		ᐃ.bezierCurveTo(192.1999969482422 * Ⲇ, Ⲇ * 180.61249923706055, Ⲇ * 192.1999969482422, 180.61249923706055 * Ⲇ, Ⲇ * 193.1999969482422, 175.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 195.6999969482422, Ⲇ * 177.11249923706055, Ⲇ * 195.6999969482422, 177.11249923706055 * Ⲇ, 198.1999969482422 * Ⲇ, Ⲇ * 178.61249923706055);
		ᐃ.bezierCurveTo(Ⲇ * 198.1999969482422, Ⲇ * 181.11249923706055, 198.1999969482422 * Ⲇ, 181.11249923706055 * Ⲇ, Ⲇ * 198.1999969482422, 183.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 201.6999969482422, Ⲇ * 181.11249923706055, Ⲇ * 201.6999969482422, Ⲇ * 181.11249923706055, 205.1999969482422 * Ⲇ, 178.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 206.6999969482422, Ⲇ * 180.61249923706055, Ⲇ * 206.6999969482422, 180.61249923706055 * Ⲇ, 208.1999969482422 * Ⲇ, 182.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(206.1999969482422 * Ⲇ, 185.61249923706055 * Ⲇ, Ⲇ * 206.1999969482422, 185.61249923706055 * Ⲇ, 204.1999969482422 * Ⲇ, Ⲇ * 188.61249923706055);
		ᐃ.bezierCurveTo(208.6999969482422 * Ⲇ, 188.61249923706055 * Ⲇ, Ⲇ * 208.6999969482422, 188.61249923706055 * Ⲇ, 213.1999969482422 * Ⲇ, 188.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 213.1999969482422, Ⲇ * 191.11249923706055, Ⲇ * 213.1999969482422, Ⲇ * 191.11249923706055, 213.1999969482422 * Ⲇ, 193.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(209.6999969482422 * Ⲇ, 194.61249923706055 * Ⲇ, 209.6999969482422 * Ⲇ, Ⲇ * 194.61249923706055, 206.1999969482422 * Ⲇ, 195.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 210.1999969482422, Ⲇ * 198.61249923706055, 210.1999969482422 * Ⲇ, 198.61249923706055 * Ⲇ, 214.1999969482422 * Ⲇ, Ⲇ * 201.61249923706055);
		ᐃ.bezierCurveTo(Ⲇ * 212.1999969482422, Ⲇ * 203.61249923706055, 212.1999969482422 * Ⲇ, 203.61249923706055 * Ⲇ, Ⲇ * 210.1999969482422, 205.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 207.1999969482422, Ⲇ * 204.11249923706055, 207.1999969482422 * Ⲇ, Ⲇ * 204.11249923706055, Ⲇ * 204.1999969482422, 202.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 205.6999969482422, 207.61249923706055 * Ⲇ, 205.6999969482422 * Ⲇ, 207.61249923706055 * Ⲇ, Ⲇ * 207.1999969482422, 212.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 204.6999969482422, Ⲇ * 213.61249923706055, Ⲇ * 204.6999969482422, Ⲇ * 213.61249923706055, 202.1999969482422 * Ⲇ, 214.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(200.1999969482422 * Ⲇ, Ⲇ * 210.61249923706055, Ⲇ * 200.1999969482422, 210.61249923706055 * Ⲇ, Ⲇ * 198.1999969482422, Ⲇ * 206.61249923706055);
		ᐃ.bezierCurveTo(196.6999969482422 * Ⲇ, 211.61249923706055 * Ⲇ, 196.6999969482422 * Ⲇ, Ⲇ * 211.61249923706055, Ⲇ * 195.1999969482422, 216.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 192.6999969482422, Ⲇ * 216.11249923706055, Ⲇ * 192.6999969482422, 216.11249923706055 * Ⲇ, Ⲇ * 190.1999969482422, Ⲇ * 215.61249923706055);
		ᐃ.bezierCurveTo(190.1999969482422 * Ⲇ, Ⲇ * 211.61249923706055, Ⲇ * 190.1999969482422, Ⲇ * 211.61249923706055, 190.1999969482422 * Ⲇ, 207.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(186.1999969482422 * Ⲇ, 210.61249923706055 * Ⲇ, 186.1999969482422 * Ⲇ, 210.61249923706055 * Ⲇ, 182.1999969482422 * Ⲇ, 213.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(181.1999969482422 * Ⲇ, Ⲇ * 211.11249923706055, 181.1999969482422 * Ⲇ, 211.11249923706055 * Ⲇ, 180.1999969482422 * Ⲇ, 208.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 183.1999969482422, 205.61249923706055 * Ⲇ, Ⲇ * 183.1999969482422, 205.61249923706055 * Ⲇ, 186.1999969482422 * Ⲇ, 202.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(180.6999969482422 * Ⲇ, Ⲇ * 203.11249923706055, 180.6999969482422 * Ⲇ, 203.11249923706055 * Ⲇ, 175.1999969482422 * Ⲇ, Ⲇ * 203.61249923706055);
		ᐃ.bezierCurveTo(174.6999969482422 * Ⲇ, Ⲇ * 200.11249923706055, Ⲇ * 174.6999969482422, Ⲇ * 200.11249923706055, Ⲇ * 174.1999969482422, Ⲇ * 196.61249923706055);
		ᐃ.bezierCurveTo(Ⲇ * 177.1999969482422, Ⲇ * 195.61249923706055, Ⲇ * 177.1999969482422, 195.61249923706055 * Ⲇ, Ⲇ * 180.1999969482422, Ⲇ * 194.61249923706055);
		ᐃ.bezierCurveTo(Ⲇ * 177.1999969482422, 191.61249923706055 * Ⲇ, Ⲇ * 177.1999969482422, 191.61249923706055 * Ⲇ, 174.1999969482422 * Ⲇ, 188.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 175.6999969482422, Ⲇ * 187.11249923706055, Ⲇ * 175.6999969482422, Ⲇ * 187.11249923706055, Ⲇ * 177.1999969482422, 185.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 180.6999969482422, Ⲇ * 187.11249923706055, 180.6999969482422 * Ⲇ, Ⲇ * 187.11249923706055, Ⲇ * 184.1999969482422, Ⲇ * 188.61249923706055);
		ᐃ.bezierCurveTo(Ⲇ * 182.6999969482422, Ⲇ * 183.61249923706055, Ⲇ * 182.6999969482422, 183.61249923706055 * Ⲇ, Ⲇ * 181.1999969482422, 178.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(183.1999969482422 * Ⲇ, Ⲇ * 177.11249923706055, Ⲇ * 183.1999969482422, 177.11249923706055 * Ⲇ, 185.1999969482422 * Ⲇ, Ⲇ * 175.61249923706055);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠᐃᐃᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 185.1999969482422, 173.8125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 187.1999969482422, Ⲇ * 179.3125, Ⲇ * 187.1999969482422, 179.3125 * Ⲇ, Ⲇ * 189.1999969482422, 184.8125 * Ⲇ);
		ᐃ.bezierCurveTo(184.1999969482422 * Ⲇ, Ⲇ * 181.8125, Ⲇ * 184.1999969482422, 181.8125 * Ⲇ, Ⲇ * 179.1999969482422, Ⲇ * 178.8125);
		ᐃ.bezierCurveTo(Ⲇ * 181.1999969482422, Ⲇ * 175.8125, 182.1999969482422 * Ⲇ, Ⲇ * 174.8125, Ⲇ * 185.1999969482422, Ⲇ * 173.8125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[11]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 192.1999969482422, Ⲇ * 173.61249542236328);
		ᐃ.bezierCurveTo(194.1999969482422 * Ⲇ, Ⲇ * 172.61249542236328, Ⲇ * 196.1999969482422, Ⲇ * 171.61249542236328, Ⲇ * 199.1999969482422, Ⲇ * 173.61249542236328);
		ᐃ.bezierCurveTo(197.6999969482422 * Ⲇ, 179.61249542236328 * Ⲇ, 197.6999969482422 * Ⲇ, 179.61249542236328 * Ⲇ, Ⲇ * 196.1999969482422, 185.61249542236328 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 194.1999969482422, Ⲇ * 179.61249542236328, 194.1999969482422 * Ⲇ, 179.61249542236328 * Ⲇ, 192.1999969482422 * Ⲇ, Ⲇ * 173.61249542236328);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃⲆΔⲆⵠⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 205.1999969482422, Ⲇ * 176.2125015258789);
		ᐃ.bezierCurveTo(Ⲇ * 210.1999969482422, Ⲇ * 178.2125015258789, 211.1999969482422 * Ⲇ, 179.2125015258789 * Ⲇ, Ⲇ * 211.1999969482422, 181.2125015258789 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 206.6999969482422, 184.7125015258789 * Ⲇ, 206.6999969482422 * Ⲇ, Ⲇ * 184.7125015258789, Ⲇ * 202.1999969482422, 188.2125015258789 * Ⲇ);
		ᐃ.bezierCurveTo(203.6999969482422 * Ⲇ, 182.2125015258789 * Ⲇ, Ⲇ * 203.6999969482422, 182.2125015258789 * Ⲇ, Ⲇ * 205.1999969482422, Ⲇ * 176.2125015258789);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃⵠⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(214.1999969482422 * Ⲇ, Ⲇ * 187.21249985694885);
		ᐃ.bezierCurveTo(216.1999969482422 * Ⲇ, Ⲇ * 191.21249985694885, Ⲇ * 216.1999969482422, Ⲇ * 192.21249985694885, 215.1999969482422 * Ⲇ, 195.21249985694885 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 206.1999969482422, 194.21249985694885 * Ⲇ, 205.1999969482422 * Ⲇ, 194.21249985694885 * Ⲇ, 205.1999969482422 * Ⲇ, Ⲇ * 194.21249985694885);
		ᐃ.bezierCurveTo(209.6999969482422 * Ⲇ, Ⲇ * 190.71249985694885, Ⲇ * 209.6999969482422, 190.71249985694885 * Ⲇ, 214.1999969482422 * Ⲇ, Ⲇ * 187.21249985694885);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃΔⵠᐃⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 204.1999969482422, Ⲇ * 201.8125);
		ᐃ.bezierCurveTo(209.1999969482422 * Ⲇ, 201.3125 * Ⲇ, Ⲇ * 209.1999969482422, 201.3125 * Ⲇ, 214.1999969482422 * Ⲇ, Ⲇ * 200.8125);
		ᐃ.bezierCurveTo(215.1999969482422 * Ⲇ, Ⲇ * 204.8125, 214.1999969482422 * Ⲇ, 205.8125 * Ⲇ, Ⲇ * 213.1999969482422, 208.8125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 208.6999969482422, 205.3125 * Ⲇ, Ⲇ * 208.6999969482422, 205.3125 * Ⲇ, 204.1999969482422 * Ⲇ, Ⲇ * 201.8125);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[11]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 199.1999969482422, Ⲇ * 205.61249923706055);
		ᐃ.bezierCurveTo(Ⲇ * 207.1999969482422, Ⲇ * 212.61249923706055, 203.6999969482422 * Ⲇ, Ⲇ * 209.11249923706055, 208.1999969482422 * Ⲇ, 212.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 206.1999969482422, Ⲇ * 215.61249923706055, Ⲇ * 204.1999969482422, 217.61249923706055 * Ⲇ, Ⲇ * 203.1999969482422, 216.61249923706055 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 201.1999969482422, Ⲇ * 211.11249923706055, 201.1999969482422 * Ⲇ, Ⲇ * 211.11249923706055, 199.1999969482422 * Ⲇ, 205.61249923706055 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠⵠΔⵠᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(191.1999969482422 * Ⲇ, 207.01250076293945 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 194.1999969482422, Ⲇ * 213.01250076293945, 194.1999969482422 * Ⲇ, 216.01250076293945 * Ⲇ, 196.1999969482422 * Ⲇ, Ⲇ * 218.01250076293945);
		ᐃ.bezierCurveTo(Ⲇ * 193.1999969482422, 220.01250076293945 * Ⲇ, Ⲇ * 190.1999969482422, 220.01250076293945 * Ⲇ, 188.1999969482422 * Ⲇ, Ⲇ * 218.01250076293945);
		ᐃ.bezierCurveTo(189.6999969482422 * Ⲇ, Ⲇ * 213.01250076293945, Ⲇ * 189.6999969482422, 213.01250076293945 * Ⲇ, 191.1999969482422 * Ⲇ, Ⲇ * 208.01250076293945);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[11]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(186.1999969482422 * Ⲇ, Ⲇ * 203.21249961853027);
		ᐃ.bezierCurveTo(184.1999969482422 * Ⲇ, Ⲇ * 209.21249961853027, Ⲇ * 184.1999969482422, 209.21249961853027 * Ⲇ, 182.1999969482422 * Ⲇ, Ⲇ * 215.21249961853027);
		ᐃ.bezierCurveTo(Ⲇ * 177.1999969482422, 212.21249961853027 * Ⲇ, Ⲇ * 176.1999969482422, Ⲇ * 211.21249961853027, 177.1999969482422 * Ⲇ, 210.21249961853027 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 181.6999969482422, 206.71249961853027 * Ⲇ, 181.6999969482422 * Ⲇ, Ⲇ * 206.71249961853027, Ⲇ * 186.1999969482422, Ⲇ * 203.21249961853027);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔΔΔΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(183.1999969482422 * Ⲇ, Ⲇ * 196.8125);
		ᐃ.bezierCurveTo(Ⲇ * 177.1999969482422, Ⲇ * 196.3125, Ⲇ * 177.1999969482422, Ⲇ * 196.3125, 171.1999969482422 * Ⲇ, 195.8125 * Ⲇ);
		ᐃ.bezierCurveTo(171.1999969482422 * Ⲇ, Ⲇ * 199.8125, Ⲇ * 171.1999969482422, Ⲇ * 202.8125, 174.1999969482422 * Ⲇ, Ⲇ * 204.8125);
		ᐃ.bezierCurveTo(178.6999969482422 * Ⲇ, 200.8125 * Ⲇ, 178.6999969482422 * Ⲇ, 200.8125 * Ⲇ, 183.1999969482422 * Ⲇ, 196.8125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔΔΔΔΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 185.1999969482422, Ⲇ * 190.21249771118164);
		ᐃ.bezierCurveTo(179.6999969482422 * Ⲇ, 186.71249771118164 * Ⲇ, Ⲇ * 179.6999969482422, Ⲇ * 186.71249771118164, Ⲇ * 174.1999969482422, 183.21249771118164 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 172.1999969482422, 186.21249771118164 * Ⲇ, 172.1999969482422 * Ⲇ, Ⲇ * 187.21249771118164, Ⲇ * 172.1999969482422, Ⲇ * 190.21249771118164);
		ᐃ.bezierCurveTo(178.1999969482422 * Ⲇ, 190.21249771118164 * Ⲇ, 178.1999969482422 * Ⲇ, Ⲇ * 190.21249771118164, Ⲇ * 184.1999969482422, 190.21249771118164 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔΔΔΔΔ]);
		ᐃΔⵠ(ᐃ, 126.19999694824219 * Ⲇ, Ⲇ * 169.8125, 8.94427190999916 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠᐃⵠⵠ]);
		ᐃΔⵠ(ᐃ, 123.19999694824219 * Ⲇ, Ⲇ * 164.8125, 2.8284271247461903 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[13]);
		ᐃΔⵠ(ᐃ, 253.1999969482422 * Ⲇ, Ⲇ * 169.8125, Ⲇ * 8.94427190999916);
		ᐃⵠ(ᐃ, ᐃⲆ[12]);
		ᐃΔⵠ(ᐃ, Ⲇ * 255.1999969482422, Ⲇ * 164.8125, Ⲇ * 2.23606797749979);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⵠΔᐃ]);
		return ⲆⲆ
	}

	function ⵠᐃΔΔΔⵠⵠⵠΔ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		if (ᐃΔΔ == Δᐃ) {
			ⲆⲆ.width = 543 * Ⲇ;
			ⲆⲆ.height = Ⲇ * 393;
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 164.23297119140625, 72.80398559570312 * Ⲇ);
			ᐃ.bezierCurveTo(289.23297119140625 * Ⲇ, Ⲇ * 41.803985595703125, Ⲇ * 413.23297119140625, Ⲇ * 86.80398559570312, Ⲇ * 441.23297119140625, Ⲇ * 105.80398559570312);
			ᐃ.bezierCurveTo(513.2329711914062 * Ⲇ, Ⲇ * 149.80398559570312, Ⲇ * 475.23297119140625, Ⲇ * 224.80398559570312, Ⲇ * 451.23297119140625, Ⲇ * 258.8039855957031);
			ᐃ.bezierCurveTo(Ⲇ * 410.23297119140625, Ⲇ * 315.8039855957031, Ⲇ * 380.23297119140625, Ⲇ * 314.8039855957031, Ⲇ * 289.23297119140625, 320.8039855957031 * Ⲇ);
			ᐃ.bezierCurveTo(160.23297119140625 * Ⲇ, 329.8039855957031 * Ⲇ, 102.23297119140625 * Ⲇ, Ⲇ * 312.8039855957031, Ⲇ * 72.23297119140625, Ⲇ * 258.8039855957031);
			ᐃ.bezierCurveTo(32.23297119140625 * Ⲇ, 156.80398559570312 * Ⲇ, Ⲇ * 93.23297119140625, Ⲇ * 92.80398559570312, 164.23297119140625 * Ⲇ, Ⲇ * 72.80398559570312);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ])
		} else 1 == Δᐃ ? (ⲆⲆ.width = Ⲇ * 543, ⲆⲆ.height = 470 * Ⲇ, ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(238.23297119140625 * Ⲇ, 34.622161865234375 * Ⲇ), ᐃ.bezierCurveTo(423.23297119140625 * Ⲇ, Ⲇ * 21.622161865234375, 474.23297119140625 * Ⲇ, 96.62216186523438 * Ⲇ, Ⲇ * 499.23297119140625, 167.62216186523438 * Ⲇ), ᐃ.bezierCurveTo(536.2329711914062 * Ⲇ, Ⲇ * 288.6221618652344, Ⲇ * 487.23297119140625, 367.6221618652344 * Ⲇ, Ⲇ * 403.23297119140625, Ⲇ * 412.6221618652344), ᐃ.bezierCurveTo(Ⲇ * 287.23297119140625, Ⲇ * 466.6221618652344, 127.23297119140625 * Ⲇ, 424.6221618652344 * Ⲇ, 50.23297119140625 * Ⲇ, 318.6221618652344 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * -.76702880859375, 239.62216186523438 * Ⲇ, 30.23297119140625 * Ⲇ, 110.62216186523438 * Ⲇ, 73.23297119140625 * Ⲇ, Ⲇ * 77.62216186523438), ᐃ.bezierCurveTo(128.23297119140625 * Ⲇ, Ⲇ * 29.622161865234375, Ⲇ * 202.23297119140625, 40.622161865234375 * Ⲇ, 238.23297119140625 * Ⲇ, 34.622161865234375 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0])) : (ⲆⲆ.width = Ⲇ * 543, ⲆⲆ.height = 470 * Ⲇ, ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(Ⲇ * 268.23297119140625, 23.349441528320312 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 424.23297119140625, Ⲇ * -.6505584716796875, Ⲇ * 524.2329711914062, Ⲇ * 44.34944152832031, 519.2329711914062 * Ⲇ, 186.3494415283203 * Ⲇ), ᐃ.bezierCurveTo(515.2329711914062 * Ⲇ, Ⲇ * 341.3494415283203, Ⲇ * 431.23297119140625, Ⲇ * 409.3494415283203, 357.23297119140625 * Ⲇ, 442.3494415283203 * Ⲇ), ᐃ.bezierCurveTo(278.23297119140625 * Ⲇ, 469.3494415283203 * Ⲇ, 144.23297119140625 * Ⲇ, 460.3494415283203 * Ⲇ, Ⲇ * 51.23297119140625, 348.3494415283203 * Ⲇ), ᐃ.bezierCurveTo(Ⲇ * 3.23297119140625, 274.3494415283203 * Ⲇ, 45.23297119140625 * Ⲇ, 87.34944152832031 * Ⲇ, 268.23297119140625 * Ⲇ, 23.349441528320312 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]));
		return ⲆⲆ
	}

	function ᐃΔΔⵠⵠⵠⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 170 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 170;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(Ⲇᐃⵠⵠ, ⵠᐃⲆᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(85 * Ⲇ, Ⲇ * 95);
		ᐃ.rotate(1.4);
		ᐃⵠΔⵠ(ᐃ, 7, 60 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(Ⲇ * 85, 82 * Ⲇ);
		for (var Δᐃ = ⲆΔⵠΔ; Δᐃ < 10; Δᐃ++) {
			ᐃ.rotate(Math.PI / 5);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 65, ⵠⵠΔΔ);
			ᐃⵠΔⵠ(ᐃ, ⲆΔⲆΔ, 21 * Ⲇ, 4 * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ΔⲆᐃⲆ], Ⲇ * 4);
			ᐃ.restore()
		}
		ᐃ.save();
		ᐃ.translate(Ⲇ * 0, 0 * Ⲇ);
		ᐃ.rotate(ⵠΔⲆ);
		ᐃⵠΔⵠ(ᐃ, 8, Ⲇ * 60, 10 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], 4 * Ⲇ);
		ᐃ.rotate(.56);
		ᐃⵠΔⵠ(ᐃ, ⲆᐃⵠⲆⵠ, Ⲇ * 40, Ⲇ * 10);
		ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[ΔⵠⵠⵠΔ], Ⲇ * ΔⵠⲆᐃ);
		ᐃ.rotate(.28);
		ᐃⵠΔⵠ(ᐃ, ΔⲆᐃΔΔ, 28 * Ⲇ, Ⲇ * ΔΔⲆⵠⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[7]);
		ᐃ.restore();
		return ⲆⲆ
	}

	function ᐃⵠᐃⵠⵠᐃᐃⵠⵠ() {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 460;
		ⲆⲆ.height = 220;
		ᐃ.fillStyle = "#3a2a0d";
		ᐃ.fillRect(0, 0, ⲆⲆ.width, ⲆⲆ.height);
		ᐃ.lineWidth = ᐃᐃΔΔ;
		ᐃ.beginPath();
		ᐃ.strokeStyle = "#513810";
		for (var ΔΔⵠ = 20; 220 > ΔΔⵠ; ΔΔⵠ += 20) {
			ᐃ.moveTo(0, ΔΔⵠ);
			ᐃ.lineTo(460, ΔΔⵠ);
			ᐃ.closePath();
			ᐃ.stroke()
		}
		return ⲆⲆ
	}

	function ⲆΔⲆⵠⵠⲆⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 120;
		ⲆⲆ.height = Ⲇ * 300;
		ᐃ.translate(-80 * Ⲇ, -ⵠⲆⵠΔⵠᐃᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(200.5 * Ⲇ, Ⲇ * 14.953125);
		ᐃ.bezierCurveTo(203 * Ⲇ, 171.953125 * Ⲇ, 203 * Ⲇ, Ⲇ * 171.953125, Ⲇ * 205.5, 328.953125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 188.5, Ⲇ * 257.953125, Ⲇ * 164.5, Ⲇ * 216.953125, 166.5 * Ⲇ, 176.953125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 168.5, 133.953125 * Ⲇ, Ⲇ * 198.5, Ⲇ * 98.953125, Ⲇ * 200.5, 14.953125 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		return ⲆⲆ
	}

	function ΔⲆⲆᐃᐃᐃᐃⲆᐃ(Ⲇ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 321 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 345;
		ᐃ.translate(0, Ⲇ * ⵠᐃᐃΔᐃ);
		ᐃ.translate(0, 20 * Ⲇ);
		ᐃΔⵠ(ᐃ, 160.5 * Ⲇ, Ⲇ * 159.5, 156.39595138242822 * Ⲇ);
		ᐃⵠ(ᐃ, Δ[441], Δ[441], 4 * Ⲇ);
		ᐃ.translate(0, -20 * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 160.5, Ⲇ * 159.5, 156.39595138242822 * Ⲇ);
		ᐃⵠ(ᐃ, Δ[193], Δ[234], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 31.999969482421875, Ⲇ * 163.07290649414062);
		ᐃ.bezierCurveTo(Ⲇ * 22.999969482421875, 67.07290649414062 * Ⲇ, Ⲇ * 106, 20.072906494140625 * Ⲇ, 162 * Ⲇ, 23.072906494140625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 269.9999694824219, Ⲇ * 31.072906494140625, 292.9999694824219 * Ⲇ, Ⲇ * 120.07290649414062, Ⲇ * 294.9999694824219, Ⲇ * 161.07290649414062);
		ᐃ.bezierCurveTo(Ⲇ * 165.49996948242188, 162.07290649414062 * Ⲇ, Ⲇ * 165.49996948242188, Ⲇ * 162.07290649414062, Ⲇ * 35.999969482421875, Ⲇ * 163.07290649414062);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, "#12432D");
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 32.999969482421875, Ⲇ * 165.07290649414062);
		ᐃ.bezierCurveTo(Ⲇ * 16.999969482421875, Ⲇ * 221.07290649414062, Ⲇ * 85, Ⲇ * 289.0729064941406, Ⲇ * 156, 294.0729064941406 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 263.9999694824219, 293.0729064941406 * Ⲇ, 295.9999694824219 * Ⲇ, Ⲇ * 199.07290649414062, 294.9999694824219 * Ⲇ, Ⲇ * 159.07290649414062);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, Δ[51]);
		ᐃΔⵠ(ᐃ, 161 * Ⲇ, 158.07290649414062 * Ⲇ, 133.4053971921676 * Ⲇ);
		ᐃⵠ(ᐃ, ΔⵠΔⲆⲆ, Δ[234], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 31.999969482421875, Ⲇ * 161.62844848632812);
		ᐃ.bezierCurveTo(Ⲇ * 162.49996948242188, Ⲇ * 161.62844848632812, 162.49996948242188 * Ⲇ, 161.62844848632812 * Ⲇ, 292.9999694824219 * Ⲇ, 161.62844848632812 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆᐃⵠⲆⲆ, Δ[234], Ⲇ * ⲆⲆᐃΔⵠΔⲆ);
		ᐃ.translate(0, Ⲇ * ⲆⲆΔᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 66, Ⲇ * 158.29513549804688);
		ᐃ.bezierCurveTo(Ⲇ * 86, 158.29513549804688 * Ⲇ, 86 * Ⲇ, 158.29513549804688 * Ⲇ, 106 * Ⲇ, 158.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠᐃΔᐃⲆ, Δ[444], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(57.999969482421875 * Ⲇ, 117.29513549804688 * Ⲇ);
		ᐃ.bezierCurveTo(85 * Ⲇ, 128.29513549804688 * Ⲇ, 85 * Ⲇ, 128.29513549804688 * Ⲇ, Ⲇ * 113, 139.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⵠᐃΔᐃⲆ, Δ[444], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 95, Ⲇ * 90.29513549804688);
		ᐃ.bezierCurveTo(Ⲇ * 112, 105.79513549804688 * Ⲇ, Ⲇ * 112, Ⲇ * 105.79513549804688, Ⲇ * 129, Ⲇ * 121.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔΔᐃⵠΔ, Δ[444], Ⲇ * ᐃⲆⵠΔⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 116, Ⲇ * 52.850677490234375);
		ᐃ.bezierCurveTo(130 * Ⲇ, 83.85067749023438 * Ⲇ, 130 * Ⲇ, Ⲇ * 83.85067749023438, Ⲇ * 144, 114.85067749023438 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[444], ᐃⵠᐃⵠⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(159 * Ⲇ, Ⲇ * 61.295135498046875);
		ᐃ.bezierCurveTo(Ⲇ * 160.49996948242188, Ⲇ * 92.29513549804688, 160.49996948242188 * Ⲇ, Ⲇ * 92.29513549804688, Ⲇ * 160, 123.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[444], ⵠᐃΔⵠᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(203 * Ⲇ, Ⲇ * 51.295135498046875);
		ᐃ.bezierCurveTo(190.49996948242188 * Ⲇ, Ⲇ * 83.29513549804688, Ⲇ * 190.49996948242188, Ⲇ * 83.29513549804688, Ⲇ * 176, 115.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆᐃⵠΔⵠ, Δ[444], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 225, Ⲇ * 89.29513549804688);
		ᐃ.bezierCurveTo(210.49996948242188 * Ⲇ, 104.79513549804688 * Ⲇ, 210.49996948242188 * Ⲇ, 104.79513549804688 * Ⲇ, 194 * Ⲇ, 120.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[444], ΔⲆΔΔᐃⲆⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 266.9999694824219, Ⲇ * 112.29513549804688);
		ᐃ.bezierCurveTo(233.49996948242188 * Ⲇ, 127.29513549804688 * Ⲇ, Ⲇ * 233.49996948242188, 127.29513549804688 * Ⲇ, 199 * Ⲇ, 142.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[444], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(256.9999694824219 * Ⲇ, 155.29513549804688 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 238.49996948242188, 156.29513549804688 * Ⲇ, Ⲇ * 238.49996948242188, Ⲇ * 156.29513549804688, Ⲇ * 219, Ⲇ * 157.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[444], Ⲇ * 12);
		ᐃ.translate(0, -8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 66, 158.29513549804688 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 86, 158.29513549804688 * Ⲇ, 86 * Ⲇ, Ⲇ * 158.29513549804688, 106 * Ⲇ, Ⲇ * 158.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[503], ᐃᐃΔᐃⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 57.999969482421875, 117.29513549804688 * Ⲇ);
		ᐃ.bezierCurveTo(85 * Ⲇ, 128.29513549804688 * Ⲇ, 85 * Ⲇ, 128.29513549804688 * Ⲇ, Ⲇ * 113, 139.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[503], ᐃⵠⵠⵠⲆΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 95, Ⲇ * 90.29513549804688);
		ᐃ.bezierCurveTo(Ⲇ * 112, Ⲇ * 105.79513549804688, 112 * Ⲇ, Ⲇ * 105.79513549804688, 129 * Ⲇ, 121.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆᐃⵠΔⵠ, Δ[503], Ⲇ * ᐃⲆⵠⵠΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 116, Ⲇ * 52.850677490234375);
		ᐃ.bezierCurveTo(130 * Ⲇ, Ⲇ * 83.85067749023438, 130 * Ⲇ, 83.85067749023438 * Ⲇ, Ⲇ * 144, 114.85067749023438 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[503], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(159 * Ⲇ, 61.295135498046875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 160.49996948242188, 92.29513549804688 * Ⲇ, Ⲇ * 160.49996948242188, 92.29513549804688 * Ⲇ, Ⲇ * 160, Ⲇ * 123.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆΔⲆⵠⲆ, Δ[503], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 203, 51.295135498046875 * Ⲇ);
		ᐃ.bezierCurveTo(190.49996948242188 * Ⲇ, 83.29513549804688 * Ⲇ, Ⲇ * 190.49996948242188, 83.29513549804688 * Ⲇ, Ⲇ * 176, 115.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[503], Ⲇ * ΔⲆΔΔᐃⲆⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 225, 89.29513549804688 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 210.49996948242188, Ⲇ * 104.79513549804688, Ⲇ * 210.49996948242188, 104.79513549804688 * Ⲇ, Ⲇ * 194, Ⲇ * 120.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, Δ[503], ᐃⵠⵠⵠⲆΔⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(266.9999694824219 * Ⲇ, Ⲇ * 112.29513549804688);
		ᐃ.bezierCurveTo(233.49996948242188 * Ⲇ, 127.29513549804688 * Ⲇ, 233.49996948242188 * Ⲇ, 127.29513549804688 * Ⲇ, Ⲇ * 199, Ⲇ * 142.29513549804688);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔⵠⲆᐃᐃ, Δ[503], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(256.9999694824219 * Ⲇ, 155.29513549804688 * Ⲇ);
		ᐃ.bezierCurveTo(238.49996948242188 * Ⲇ, 156.29513549804688 * Ⲇ, 238.49996948242188 * Ⲇ, 156.29513549804688 * Ⲇ, 219 * Ⲇ, 157.29513549804688 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃΔⵠᐃⵠ, Δ[503], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 94.00003051757812, 164.40341186523438 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 162.50003051757812, 164.40341186523438 * Ⲇ, Ⲇ * 230.00003051757812, 165.40341186523438 * Ⲇ, Ⲇ * 231.00003051757812, 164.40341186523438 * Ⲇ);
		ᐃ.bezierCurveTo(214.00003051757812 * Ⲇ, 267.4034118652344 * Ⲇ, Ⲇ * 92.00003051757812, Ⲇ * 243.40341186523438, 93.00003051757812 * Ⲇ, 165.40341186523438 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, "#704618", "#5D3D1A", ⲆΔⵠΔⲆⵠᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(96 * Ⲇ, 166 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 88, 117 * Ⲇ, 129 * Ⲇ, Ⲇ * 92, Ⲇ * 161, 91 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 201, Ⲇ * 90, Ⲇ * 223, 121 * Ⲇ, 230 * Ⲇ, Ⲇ * 161);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, "#ECBE35", Δ[503], Ⲇ * 8);
		ᐃΔⵠ(ᐃ, 160.00003051757812 * Ⲇ, Ⲇ * 166.49432373046875, 28.30194339616981 * Ⲇ);
		ᐃⵠ(ᐃ, Δ[193], Δ[234], 10 * Ⲇ);
		return ⲆⲆ
	}

	function ᐃᐃⲆΔΔΔⲆ(ⵠⲆΔⲆᐃᐃΔ, ⵠⵠⵠᐃΔᐃᐃ, ᐃⵠⵠⲆΔᐃⲆ) {
		const ⲆΔⵠⵠΔᐃΔ = ~(ⵠⲆΔⲆᐃᐃΔ & 13816) & ⵠⲆΔⲆᐃᐃΔ | ~(ⵠⲆΔⲆᐃᐃΔ & 13816) & 13816;
		const ᐃᐃⲆⵠⵠⵠⵠ = ⵠⵠⵠᐃΔᐃᐃ ^ 24655;
		const ⲆᐃⵠᐃⵠⵠⲆ = (0 << (ᐃⵠⵠⲆΔᐃⲆ >> ⲆΔⵠΔⲆⵠᐃ & ⲆⵠⲆⵠᐃᐃⲆ)) + (24 << (ᐃⵠⵠⲆΔᐃⲆ >> 24 & 255)) + (8 << (ᐃⵠⵠⲆΔᐃⲆ >> 16 & 255)) + (ΔⵠⵠⲆΔᐃΔ << (ᐃⵠⵠⲆΔᐃⲆ >> 0 & 255));
		const ⵠⲆⲆⵠᐃⲆΔΔΔ = ⲆΔⵠⵠⵠᐃᐃ(ⲆΔⵠⵠΔᐃΔ, ᐃᐃⲆⵠⵠⵠⵠ, ⲆᐃⵠᐃⵠⵠⲆ, ⲆΔⵠⵠΔᐃΔ);
		const ΔⲆⵠΔΔⲆΔᐃΔ = ⵠΔⲆⲆᐃΔⵠ(ᐃᐃⲆⵠⵠⵠⵠ, ⲆᐃⵠᐃⵠⵠⲆ, ⲆΔⵠⵠΔᐃΔ, ᐃᐃⲆⵠⵠⵠⵠ);
		const ΔᐃⲆⵠⲆΔⲆⲆΔ = ((53605 + (ⵠⲆⲆⵠᐃⲆΔΔΔ ^ ΔⲆⵠΔΔⲆΔᐃΔ)) * 2147483629 + 2147483587) % 2147483647;
		return ΔᐃⲆⵠⲆΔⲆⲆΔ
	}

	function ΔⵠⵠⲆΔⵠΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 170 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 170;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⵠⲆⲆⲆ;
		ᐃ.translate(ⵠⲆⵠ, 5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(85 * Ⲇ, 88 * Ⲇ);
		ᐃ.rotate(1.4);
		ᐃⵠΔⵠ(ᐃ, ⵠⵠⵠⲆΔ, Ⲇ * 60, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆΔⵠ]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(Ⲇ * 85, 80 * Ⲇ);
		for (var Δᐃ = ⵠᐃΔⲆ; Δᐃ < ⵠⲆⲆᐃⵠ; Δᐃ++) {
			ᐃ.rotate(Math.PI / 5);
			ᐃ.save();
			ᐃ.translate(Ⲇ * 65, ⵠᐃⵠⵠ);
			ᐃⵠΔⵠ(ᐃ, ΔⵠᐃⲆ, Ⲇ * 21, ⲆⵠⲆⲆⲆ * Ⲇ);
			ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ], ᐃⲆ[2], ᐃᐃⲆⵠ * Ⲇ);
			ᐃ.restore()
		}
		ᐃ.save();
		ᐃ.translate(0 * Ⲇ, Ⲇ * 0);
		ᐃ.rotate(1.4);
		ᐃⵠΔⵠ(ᐃ, 7, Ⲇ * 60, Ⲇ * ⲆΔⵠᐃⲆ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃᐃΔⵠ], ᐃⲆ[4], ⵠΔΔⵠ * Ⲇ);
		ᐃ.rotate(.64);
		ᐃⵠΔⵠ(ᐃ, 7, 40 * Ⲇ, ⵠᐃⵠⲆΔ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⲆⵠ], ᐃⲆ[ᐃⲆⵠⲆⲆ], Ⲇ * 4);
		ᐃ.rotate(.12);
		ᐃⵠΔⵠ(ᐃ, 7, 23 * Ⲇ, Ⲇ * 5);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠΔⲆⵠ]);
		return ⲆⲆ
	}

	function ⲆᐃΔΔⵠⲆᐃ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * ⵠⲆΔᐃΔ;
		ⲆⲆ.height = 100 * Ⲇ;
		ᐃ.globalAlpha = .5;
		ᐃ.fillStyle = ᐃⲆ[0];
		ᐃ.fillRect(Δⵠⵠ, ⵠⵠΔΔ, ⲆⲆ.width, ⲆⲆ.height);
		return ⲆⲆ
	}

	function ΔⵠᐃⵠᐃⲆᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 187 * Ⲇ;
		ⲆⲆ.height = 119 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(0, ᐃᐃΔⵠ);
		ᐃ.moveTo(53 * Ⲇ, 45 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⲆΔΔⲆ, 60 * Ⲇ, ⵠⵠⵠⵠⵠ * Ⲇ, 72 * Ⲇ, 19 * Ⲇ, Ⲇ * 81);
		ᐃ.bezierCurveTo(Ⲇ * 28, 82 * Ⲇ, 24 * Ⲇ, Ⲇ * 81, 29 * Ⲇ, 82 * Ⲇ);
		ᐃ.bezierCurveTo(26 * Ⲇ, 87 * Ⲇ, 28 * Ⲇ, Ⲇ * 84, 28 * Ⲇ, 87 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 63, 101 * Ⲇ, 92 * Ⲇ, 100 * Ⲇ, 138 * Ⲇ, Ⲇ * 93);
		ᐃ.bezierCurveTo(Ⲇ * 172, Ⲇ * 87, 180 * Ⲇ, Ⲇ * 72, Ⲇ * 168, 62 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 154, Ⲇ * 51, Ⲇ * 150, 50 * Ⲇ, 148 * Ⲇ, 49 * Ⲇ);
		ᐃ.bezierCurveTo(132 * Ⲇ, Ⲇ * 42, 90 * Ⲇ, Ⲇ * 40, Ⲇ * 55, Ⲇ * 45);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(0, -ᐃΔΔΔ);
		ᐃ.moveTo(53 * Ⲇ, Ⲇ * 45);
		ᐃ.bezierCurveTo(Ⲇ * ᐃΔᐃⲆ, Ⲇ * 60, ΔΔⵠⵠΔ * Ⲇ, Ⲇ * 72, Ⲇ * 19, Ⲇ * 81);
		ᐃ.bezierCurveTo(28 * Ⲇ, 82 * Ⲇ, Ⲇ * 24, 81 * Ⲇ, Ⲇ * 29, Ⲇ * 82);
		ᐃ.bezierCurveTo(26 * Ⲇ, Ⲇ * 87, Ⲇ * 28, Ⲇ * 84, Ⲇ * 28, Ⲇ * 87);
		ᐃ.bezierCurveTo(63 * Ⲇ, 101 * Ⲇ, Ⲇ * 92, Ⲇ * ΔⲆΔΔΔ, Ⲇ * 138, Ⲇ * 93);
		ᐃ.bezierCurveTo(172 * Ⲇ, Ⲇ * 87, 180 * Ⲇ, Ⲇ * 72, 168 * Ⲇ, 62 * Ⲇ);
		ᐃ.bezierCurveTo(154 * Ⲇ, Ⲇ * 51, 150 * Ⲇ, Ⲇ * 50, Ⲇ * 148, 49 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 132, 42 * Ⲇ, Ⲇ * 90, Ⲇ * 40, Ⲇ * 55, Ⲇ * 45);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ], ᐃⲆ[1], ΔΔᐃᐃⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(151 * Ⲇ, Ⲇ * 60);
		ᐃ.bezierCurveTo(Ⲇ * 140, 36 * Ⲇ, 137 * Ⲇ, Ⲇ * 32, Ⲇ * 124, 29 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 98, Ⲇ * 22, 80 * Ⲇ, 24 * Ⲇ, Ⲇ * 62, 28 * Ⲇ);
		ᐃ.bezierCurveTo(42 * Ⲇ, 35 * Ⲇ, Ⲇ * 38, Ⲇ * 46, 34 * Ⲇ, Ⲇ * 58);
		ᐃ.bezierCurveTo(53 * Ⲇ, 74 * Ⲇ, 76 * Ⲇ, Ⲇ * 76, 91 * Ⲇ, Ⲇ * 78);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ], ᐃⲆ[1], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 37, 53 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 30, 56 * Ⲇ, 29 * Ⲇ, 67 * Ⲇ, Ⲇ * 30, Ⲇ * 68);
		ᐃ.bezierCurveTo(Ⲇ * 94, 108 * Ⲇ, Ⲇ * 150, Ⲇ * 76, 155 * Ⲇ, Ⲇ * 70);
		ᐃ.bezierCurveTo(154 * Ⲇ, 60 * Ⲇ, 151 * Ⲇ, Ⲇ * 54, Ⲇ * 149, 53 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 101, Ⲇ * 74, 66 * Ⲇ, 66 * Ⲇ, Ⲇ * 37, 53 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[Ⲇⵠᐃᐃ], ⲆⵠⵠⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ⲆᐃᐃΔᐃ * Ⲇ, 36 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 92, Ⲇ * 25, 86 * Ⲇ, Ⲇ * 28, 82 * Ⲇ, 34 * Ⲇ);
		ᐃ.bezierCurveTo(88 * Ⲇ, 40 * Ⲇ, Ⲇ * 93, 40 * Ⲇ, Ⲇ * 98, Ⲇ * 36);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], ⵠⲆⲆΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 80, 43 * Ⲇ);
		ᐃ.bezierCurveTo(69 * Ⲇ, Ⲇ * 46, 67 * Ⲇ, 52 * Ⲇ, Ⲇ * 69, 58 * Ⲇ);
		ᐃⵠ(ᐃ, ⲆⲆⲆⲆⲆ, ᐃⲆ[1], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, Ⲇ * 58, 50 * Ⲇ, 5 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃΔⵠ(ᐃ, Ⲇ * 43, Ⲇ * 65, ⵠᐃᐃⵠᐃ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃΔⵠ(ᐃ, 58 * Ⲇ, Ⲇ * 73, 5 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆⵠⲆ]);
		ᐃΔⵠ(ᐃ, 58 * Ⲇ, 50 * Ⲇ, Ⲇ * 2);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃΔⵠ(ᐃ, 43 * Ⲇ, 65 * Ⲇ, Ⲇ * 2);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃΔⵠ(ᐃ, 58 * Ⲇ, Ⲇ * 73, Δⵠᐃᐃ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		return ⲆⲆ
	}

	function ⲆᐃΔᐃᐃΔᐃ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 573 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 350;
		if (1 == Δᐃ) {
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 336, Ⲇ * 72);
			ᐃ.bezierCurveTo(366 * Ⲇ, Ⲇ * 15, 426 * Ⲇ, 36 * Ⲇ, 497 * Ⲇ, Ⲇ * 83);
			ᐃ.bezierCurveTo(522 * Ⲇ, Ⲇ * 85, 522 * Ⲇ, 85 * Ⲇ, 547 * Ⲇ, Ⲇ * 87);
			ᐃ.bezierCurveTo(Ⲇ * 476.5, Ⲇ * 205, Ⲇ * 476.5, 205 * Ⲇ, Ⲇ * 406, 323 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 297.5, Ⲇ * 319, Ⲇ * 297.5, 319 * Ⲇ, 189 * Ⲇ, 315 * Ⲇ);
			ᐃ.bezierCurveTo(105.5 * Ⲇ, 279 * Ⲇ, 105.5 * Ⲇ, 279 * Ⲇ, 22 * Ⲇ, 243 * Ⲇ);
			ᐃ.bezierCurveTo(92 * Ⲇ, Ⲇ * 140, 92 * Ⲇ, 140 * Ⲇ, 162 * Ⲇ, 37 * Ⲇ);
			ᐃ.bezierCurveTo(173 * Ⲇ, 39 * Ⲇ, 173 * Ⲇ, Ⲇ * 39, 184 * Ⲇ, Ⲇ * 41);
			ᐃ.bezierCurveTo(Ⲇ * 185, 38.5 * Ⲇ, 185 * Ⲇ, Ⲇ * 38.5, Ⲇ * 186, Ⲇ * 36);
			ᐃ.bezierCurveTo(Ⲇ * 323, 13 * Ⲇ, 322 * Ⲇ, 25 * Ⲇ, 337 * Ⲇ, 74 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔᐃ], ᐃⲆ[4], Ⲇ * 35)
		}
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(168 * Ⲇ, 42 * Ⲇ);
		ᐃ.bezierCurveTo(255 * Ⲇ, Ⲇ * 60, Ⲇ * 255, 60 * Ⲇ, 342 * Ⲇ, Ⲇ * 78);
		ᐃ.bezierCurveTo(Ⲇ * 443, Ⲇ * 81.5, 443 * Ⲇ, 81.5 * Ⲇ, 544 * Ⲇ, 85 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 475, Ⲇ * 204.5, Ⲇ * 475, Ⲇ * 204.5, 406 * Ⲇ, Ⲇ * 324);
		ᐃ.bezierCurveTo(Ⲇ * 297.5, Ⲇ * 320, Ⲇ * 297.5, 320 * Ⲇ, 189 * Ⲇ, Ⲇ * 316);
		ᐃ.bezierCurveTo(Ⲇ * 105.5, 279 * Ⲇ, Ⲇ * 105.5, 279 * Ⲇ, Ⲇ * 22, Ⲇ * 242);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ], ᐃⲆ[ⵠΔΔ], Ⲇ * ᐃᐃΔᐃⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 188, Ⲇ * 41);
		ᐃ.bezierCurveTo(308 * Ⲇ, 15 * Ⲇ, 325 * Ⲇ, ΔⲆⲆⲆΔᐃⵠ * Ⲇ, Ⲇ * 337, 66 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 191, Ⲇ * 305, Ⲇ * 196, 286 * Ⲇ, Ⲇ * 184, 307 * Ⲇ);
		ᐃ.bezierCurveTo(175 * Ⲇ, Ⲇ * 250, Ⲇ * 90, 254 * Ⲇ, 52 * Ⲇ, 241 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[3], Ⲇ * ⲆⵠⵠⲆⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 336, 71 * Ⲇ);
		ᐃ.bezierCurveTo(375 * Ⲇ, Ⲇ * 8, 429 * Ⲇ, 50 * Ⲇ, 518 * Ⲇ, 92 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 455, 199.5 * Ⲇ, 455 * Ⲇ, Ⲇ * 199.5, 392 * Ⲇ, 307 * Ⲇ);
		ᐃ.bezierCurveTo(227 * Ⲇ, Ⲇ * 301, 261 * Ⲇ, 255 * Ⲇ, Ⲇ * 188, 308 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⵠᐃ], ᐃⲆ[3], Ⲇ * ᐃⵠⵠⵠⲆΔⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(357 * Ⲇ, Ⲇ * 76);
		ᐃ.bezierCurveTo(390 * Ⲇ, Ⲇ * 67, 414 * Ⲇ, 86 * Ⲇ, 435 * Ⲇ, 104 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 417, 135 * Ⲇ, Ⲇ * 417, 135 * Ⲇ, Ⲇ * 399, 166 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 352, 140 * Ⲇ, Ⲇ * 345, Ⲇ * 139, Ⲇ * 319, Ⲇ * 142);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ], ᐃⲆ[ⲆΔΔⲆ], Ⲇ * 12);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 309, 168 * Ⲇ);
		ᐃ.bezierCurveTo(345 * Ⲇ, Ⲇ * 163, 372 * Ⲇ, Ⲇ * 180, Ⲇ * 412, 203 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠΔⲆ], ᐃⲆ[Ⲇⵠᐃᐃ], Ⲇ * ⵠⲆⵠᐃⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 263, 54 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 305, Ⲇ * 44, Ⲇ * 307, Ⲇ * 51, 311 * Ⲇ, 64 * Ⲇ);
		ᐃ.bezierCurveTo(270.5 * Ⲇ, Ⲇ * 129.5, 270.5 * Ⲇ, 129.5 * Ⲇ, 230 * Ⲇ, Ⲇ * 195);
		ᐃ.bezierCurveTo(Ⲇ * 221, Ⲇ * 175, 203 * Ⲇ, Ⲇ * 171, Ⲇ * 186, Ⲇ * 172);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ], ᐃⲆ[ᐃΔᐃⲆ], Ⲇ * ⲆⲆⲆΔΔΔⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 292, Ⲇ * 198);
		ᐃ.bezierCurveTo(Ⲇ * 328, 191 * Ⲇ, 364 * Ⲇ, Ⲇ * 211, 401 * Ⲇ, Ⲇ * 237);
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ᐃΔΔΔ], ⵠⲆⵠᐃⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(245 * Ⲇ, 68 * Ⲇ);
		ᐃ.bezierCurveTo(210 * Ⲇ, 72 * Ⲇ, 210 * Ⲇ, Ⲇ * 72, Ⲇ * 189, Ⲇ * 69);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⲆ], ᐃⲆ[3], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 222, 96 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 196, 97 * Ⲇ, Ⲇ * 193, 97 * Ⲇ, 177 * Ⲇ, Ⲇ * 92);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⵠΔ], ᐃⲆ[3], Ⲇ * ᐃⵠᐃⵠⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 207, Ⲇ * 124);
		ᐃ.bezierCurveTo(Ⲇ * 179, 123 * Ⲇ, 177 * Ⲇ, Ⲇ * 124, 161 * Ⲇ, Ⲇ * 119);
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ᐃΔΔⵠ], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 115, Ⲇ * 183);
		ᐃ.bezierCurveTo(Ⲇ * 184, 185 * Ⲇ, 203 * Ⲇ, Ⲇ * 198, 219 * Ⲇ, 221 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃⵠ], ᐃⲆ[ⵠᐃⵠΔ], ᐃᐃΔᐃⲆ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(98 * Ⲇ, 213 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 161, Ⲇ * 214, 193 * Ⲇ, Ⲇ * 227, Ⲇ * 201, Ⲇ * 249);
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ᐃᐃΔⵠ], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(399 * Ⲇ, Ⲇ * 257);
		ᐃ.bezierCurveTo(287 * Ⲇ, Ⲇ * 215, 280 * Ⲇ, Ⲇ * 215, 263 * Ⲇ, 222 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 253, Ⲇ * 238, Ⲇ * 247, Ⲇ * 245, Ⲇ * 243, Ⲇ * 254);
		ᐃ.bezierCurveTo(267 * Ⲇ, Ⲇ * 236, 292 * Ⲇ, 263 * Ⲇ, Ⲇ * 377, 284 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃᐃΔⵠ], 12 * Ⲇ);
		return ⲆⲆ
	}

	function ΔⲆᐃⵠΔⲆⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ, ⲆⵠΔ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 501;
		ⲆⲆ.height = 564 * Ⲇ;
		ᐃ.scale(.5, .5);
		ᐃ.translate(Ⲇ * 240, 255 * Ⲇ);
		ᐃ.rotate(ⲆⵠΔ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : .2;
		ᐃΔⵠ(ᐃ, 174 * Ⲇ, 87.984375 * Ⲇ, Ⲇ * 20.8806130178211);
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⲆᐃⲆ], ⲆᐃⵠᐃⲆ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 174, 87.984375 * Ⲇ, 12.165525060596439 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], ΔΔᐃΔΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 174, Ⲇ * 87.484375, 6 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 30, Ⲇ * 87.984375, 20.8806130178211 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠⵠΔΔ], Ⲇ * ΔᐃΔⲆΔ);
		ᐃΔⵠ(ᐃ, 30 * Ⲇ, 87.984375 * Ⲇ, Ⲇ * 12.165525060596439);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ], ᐃⲆ[0], ΔᐃΔⲆΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, 30 * Ⲇ, 87.484375 * Ⲇ, Ⲇ * 6);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃΔⵠ(ᐃ, 100 * Ⲇ, Ⲇ * 30, Ⲇ * 20.8806130178211);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⵠ], ᐃⲆ[0], ᐃⵠⲆⲆ * Ⲇ);
		ᐃΔⵠ(ᐃ, 100 * Ⲇ, 30 * Ⲇ, 12.165525060596439 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔ], ᐃⲆ[0], 4 * Ⲇ);
		ᐃΔⵠ(ᐃ, 100 * Ⲇ, Ⲇ * 30, Ⲇ * 6);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃΔⵠ(ᐃ, Ⲇ * 100, Ⲇ * 130, Ⲇ * 20.8806130178211);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ], ᐃⲆ[0], ⲆΔⵠᐃΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, ᐃⲆᐃᐃΔΔⲆ * Ⲇ, Ⲇ * 130, Ⲇ * 12.165525060596439);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ], ᐃⲆ[0], Ⲇ * ⲆⵠⲆᐃ);
		ᐃΔⵠ(ᐃ, Ⲇ * ᐃⵠᐃΔᐃ, Ⲇ * 130, 6 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 102, 81.984375 * Ⲇ);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, Ⲇ * -74, Ⲇ * -57, 148 * Ⲇ, 114 * Ⲇ, Ⲇ * 23);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], Ⲇ * ⲆⵠⵠⲆ);
		ᐃ.save();
		ᐃ.translate(101 * Ⲇ, Ⲇ * 64.984375);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, Ⲇ * -33, -ᐃᐃⵠⵠΔ * Ⲇ, 66 * Ⲇ, Ⲇ * ᐃⵠΔᐃⵠⲆⵠ, 15 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ], ᐃⲆ[ⲆⲆᐃΔ], ᐃⵠⲆⲆ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(102 * Ⲇ, 63.484375 * Ⲇ);
		ᐃ.rotate(ΔᐃΔ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -9, Ⲇ * -27.5, Ⲇ * ⲆⲆⲆᐃⲆⲆⲆ, 55 * Ⲇ, ᐃᐃⵠΔⵠ * Ⲇ);
		ᐃ.restore();
		ᐃ.translate(ⲆΔⲆⲆ, -ⵠⵠⲆⵠ);
		ᐃ.globalAlpha = 1;
		ᐃΔⵠ(ᐃ, 174 * Ⲇ, Ⲇ * 87.984375, 20.8806130178211 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠⵠΔ], ᐃⲆ[3], 8 * Ⲇ);
		ᐃΔⵠ(ᐃ, 174 * Ⲇ, 87.984375 * Ⲇ, Ⲇ * 12.165525060596439);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[3], 8 * Ⲇ);
		ᐃΔⵠ(ᐃ, 174 * Ⲇ, 87.484375 * Ⲇ, 6 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃⵠ]);
		ᐃΔⵠ(ᐃ, 30 * Ⲇ, Ⲇ * 87.984375, 20.8806130178211 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ᐃⵠᐃⲆ], Ⲇ * 8);
		ᐃΔⵠ(ᐃ, Ⲇ * 30, 87.984375 * Ⲇ, 12.165525060596439 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[3], Ⲇ * ⲆⲆΔᐃΔ);
		ᐃΔⵠ(ᐃ, 30 * Ⲇ, Ⲇ * 87.484375, 6 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃⵠ]);
		ᐃΔⵠ(ᐃ, 102 * Ⲇ, Ⲇ * 30, 20.8806130178211 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[3], Ⲇ * ΔⲆᐃΔΔ);
		ᐃΔⵠ(ᐃ, Ⲇ * 102, Ⲇ * 30, Ⲇ * 12.165525060596439);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[Ⲇⵠᐃᐃ], 8 * Ⲇ);
		ᐃΔⵠ(ᐃ, 102 * Ⲇ, 30 * Ⲇ, Ⲇ * Ⲇⵠᐃᐃⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃΔⵠ(ᐃ, Ⲇ * 102, 130 * Ⲇ, 20.8806130178211 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ᐃⲆᐃⲆ], Ⲇ * ΔⲆᐃΔΔ);
		ᐃΔⵠ(ᐃ, 102 * Ⲇ, Ⲇ * 130, 12.165525060596439 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆⲆⲆ], ᐃⲆ[3], ⲆⲆΔᐃΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 102, Ⲇ * 130, Ⲇ * ΔⵠⵠⵠΔ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔΔ]);
		ᐃ.save();
		ᐃ.translate(102 * Ⲇ, Ⲇ * 81.984375);
		ᐃᐃᐃ(ᐃ, -74 * Ⲇ, Ⲇ * -57, 148 * Ⲇ, 114 * Ⲇ, Ⲇ * 23);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ᐃΔΔΔ], Ⲇ * ΔⲆᐃΔΔ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 101, 64.984375 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -33 * Ⲇ, -10 * Ⲇ, Ⲇ * 66, Ⲇ * 20, Ⲇ * ⵠⲆᐃⵠⵠ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⲆ], ᐃⲆ[ᐃⵠⵠ], ᐃΔⲆΔΔ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 102, Ⲇ * 63.484375);
		ᐃᐃᐃ(ᐃ, Ⲇ * -9, Ⲇ * -27.5, Ⲇ * ⲆⲆⲆᐃⲆⲆⲆ, Ⲇ * 55, Ⲇ * 15);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆⲆⵠ], ᐃⲆ[1], ᐃᐃΔⵠΔᐃΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 135, 107.36605834960938 * Ⲇ, 21.095023109728988 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔᐃ], ᐃⲆ[ᐃΔᐃⲆ], Ⲇ * 8);
		ᐃΔⵠ(ᐃ, Ⲇ * 135, 107.36605834960938 * Ⲇ, Ⲇ * ΔⵠⵠΔᐃ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ᐃΔᐃⲆ], 8 * Ⲇ);
		ᐃΔⵠ(ᐃ, 135 * Ⲇ, Ⲇ * 107.36605834960938, Ⲇ * 6.082762530298219);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃΔⵠ(ᐃ, 70 * Ⲇ, Ⲇ * 107.36605834960938, 21.095023109728988 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[3], ⲆΔΔⲆⵠ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 70, 107.36605834960938 * Ⲇ, ⵠΔᐃⲆⵠᐃᐃ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃ], ᐃⲆ[ᐃⵠⲆⵠ], 8 * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 70, 107.36605834960938 * Ⲇ, 6.082762530298219 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		return ⲆⲆ
	}

	function ⲆⵠⵠᐃᐃⵠΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 89 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 89;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 44.5, Ⲇ * 44.5);
		ᐃⵠΔⵠ(ᐃ, ᐃΔⲆⵠⵠ, Ⲇ * 40, ⵠᐃⵠⲆΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], 5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(44.5 * Ⲇ, 44.5 * Ⲇ);
		ᐃⵠΔⵠ(ᐃ, 6, Ⲇ * 25.11521001172521, ⵠⲆΔΔⵠ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ᐃⵠⲆⵠ], Ⲇ * 5);
		return ⲆⲆ
	}

	function ᐃⵠⵠⲆᐃⵠⲆ() {
		var ⲆΔⵠᐃᐃΔᐃⲆⲆ = (new Date).getTime();
		ΔᐃΔΔΔⲆᐃΔⵠ();

		function ᐃᐃⵠᐃ(ᐃᐃΔⲆΔ) {
			var ΔⲆⵠΔ = ⲆΔⵠΔ;
			for (var ᐃΔⵠⵠ = Δⵠⵠ, Δᐃ = ⵠⲆᐃ; ᐃᐃΔⲆΔ.length > Δᐃ; Δᐃ++) {
				var ⵠⵠⵠⲆ = ᐃᐃΔⲆΔ.charAt(Δᐃ);
				if (ⵠⵠⵠⲆ === "_" || Δᐃ === ⲆΔⵠᐃⵠ) continue;
				"1" === ⵠⵠⵠⲆ && (ΔⲆⵠΔ += Math.pow(Ⲇⵠᐃⵠ, ᐃΔⵠⵠ));
				ᐃΔⵠⵠ++
			}
			return ΔⲆⵠΔ
		}
		Ⲇⵠ[ⵠ.ΔⵠΔᐃⵠΔⲆ] = [ΔⲆ.ⵠⲆΔᐃᐃᐃᐃ, ΔⲆ.ΔⵠΔⵠⵠᐃⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[13])] = [ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ᐃⵠⲆⲆⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[554])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[ΔᐃⲆⲆⲆΔΔ])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[353])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[13])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[472])] = [ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[372])] = [ΔⲆ.ᐃⵠⵠᐃⵠⵠⵠ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ⲆΔᐃⵠⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[161])] = [ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ᐃⵠⲆⲆⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[333])] = [ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⲆⲆⵠᐃΔⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[229])] = [ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ⲆⲆΔᐃᐃΔⵠ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⲆⲆⵠᐃΔⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[348])] = [ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[549])] = [ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ᐃⵠⵠᐃⵠⵠⵠ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[424])] = [ΔⲆ.ᐃⵠⲆⲆⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[154])] = [ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[122])] = [ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ΔᐃᐃᐃΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[38])] = [ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[299])] = [ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ, ΔⲆ.ΔΔΔⵠᐃΔΔ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[561])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[205])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[120])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[509])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[535])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[176])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[283])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[131])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[465])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[258])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[457])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[381])] = [ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ΔᐃᐃᐃΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[275])] = [ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[105])] = [ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ᐃⵠⵠᐃⵠⵠⵠ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ΔΔΔⵠᐃΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[420])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[275])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[220])] = [ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ, ΔⲆ.ΔΔΔⵠᐃΔΔ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[101])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[220])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[190])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[220])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[566])] = [ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ᐃⵠⵠᐃⵠⵠⵠ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ, ΔⲆ.ΔΔΔⵠᐃΔΔ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[415])] = [ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠᐃᐃΔΔᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ⵠΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[436])] = [ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ⵠΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[354])] = [ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ⵠΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[496])] = [ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠᐃᐃΔΔᐃ, ΔⲆ.ⵠⲆⲆⲆΔⲆⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[536])] = [ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ, ΔⲆ.ⵠⲆⲆⲆΔⲆⵠ, ΔⲆ.ΔΔΔⵠᐃΔΔ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[168])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[536])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[125])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[536])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[423])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[536])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[337])] = [ΔⲆ.ⵠΔᐃⲆⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔΔΔⵠᐃΔΔ, ΔⲆ.ⵠⲆⲆⲆΔⲆⵠ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.ᐃⲆⵠΔΔⲆᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[227])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[337])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[408])] = [ΔⲆ.ⲆⵠᐃᐃΔΔᐃ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ⵠⲆⲆⲆΔⲆⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[411])] = [ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ᐃⵠⵠᐃⵠⵠⵠ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ, ΔⲆ.ΔΔΔⵠᐃΔΔ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[199])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[337])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[ⲆᐃⵠΔΔᐃⲆ])] = [ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[554])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[ⵠᐃᐃΔΔ])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[353])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[ⵠΔⵠᐃⵠ])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[472])] = [ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[372])] = [ΔⲆ.ⵠΔⵠΔⵠⲆΔ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ΔⵠⲆΔᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[161])] = [ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ΔΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[333])] = [ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ΔᐃΔᐃΔΔᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[229])] = [ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ⵠⵠⵠᐃⵠⲆⵠ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ΔᐃΔᐃΔΔᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[348])] = [ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[549])] = [ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ⵠΔⵠΔⵠⲆΔ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[424])] = [ΔⲆ.ΔΔᐃⲆⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[154])] = [ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[122])] = [ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔΔΔΔⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[38])] = [ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[299])] = [ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[561])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[205])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[120])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[509])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[535])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[176])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[283])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[131])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[465])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[258])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[457])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[299])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[381])] = [ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔΔΔΔⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[275])] = [ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[105])] = [ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ⵠΔⵠΔⵠⲆΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[420])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[275])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[220])] = [ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[101])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[220])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[190])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[220])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[566])] = [ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ⵠΔⵠΔⵠⲆΔ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[415])] = [ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠΔΔᐃΔⵠ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ⲆᐃΔΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[436])] = [ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ⲆᐃΔΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[354])] = [ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ⲆᐃΔΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[496])] = [ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠΔΔᐃΔⵠ, ΔⲆ.ᐃⲆⵠΔⲆΔⵠ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[536])] = [ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ, ΔⲆ.ᐃⲆⵠΔⲆΔⵠ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[168])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[536])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[125])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[536])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[423])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[536])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[337])] = [ΔⲆ.ⲆᐃΔΔΔ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ, ΔⲆ.ᐃⲆⵠΔⲆΔⵠ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ᐃᐃΔᐃΔΔⲆ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[227])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[337])];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[408])] = [ΔⲆ.ⵠⵠΔΔᐃΔⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ᐃⲆⵠΔⲆΔⵠ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[411])] = [ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ⵠΔⵠΔⵠⲆΔ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[199])] = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[337])];
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[13])] = ΔⲆ.ᐃⲆⵠΔᐃⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[554])] = ΔⲆ.ᐃⲆⲆΔᐃⵠΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[353])] = ΔⲆ.ᐃᐃⵠΔⵠᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[472])] = ΔⲆ.ᐃΔⵠⵠΔⵠΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[372])] = ΔⲆ.ΔᐃᐃⲆΔⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[161])] = ΔⲆ.ᐃⵠⲆΔᐃⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[333])] = ΔⲆ.ⵠⲆⲆⵠⵠΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[229])] = ΔⲆ.ΔⲆⵠΔⵠΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[348])] = ΔⲆ.ᐃΔⵠΔΔⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[457])] = ΔⲆ.ⵠᐃⵠᐃⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[120])] = ΔⲆ.ⲆΔⵠⲆΔΔΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[258])] = ΔⲆ.ᐃᐃⵠⵠΔⲆΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[549])] = ΔⲆ.ΔΔⲆᐃⲆᐃΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[424])] = ΔⲆ.ⲆᐃΔⲆΔⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[154])] = ΔⲆ.ᐃᐃΔⲆⵠΔΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[122])] = ΔⲆ.ⵠᐃᐃⲆΔᐃΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[561])] = ΔⲆ.ΔⵠΔⲆⲆⲆΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[205])] = ΔⲆ.ⵠⵠⵠⲆⲆⵠⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[38])] = ΔⲆ.ⲆᐃΔⵠⲆⲆΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[509])] = ΔⲆ.ⵠᐃⲆᐃⵠᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[299])] = ΔⲆ.ⵠΔΔⲆⲆᐃΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[535])] = ΔⲆ.ⵠⵠⵠⲆᐃⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[176])] = ΔⲆ.ᐃⵠᐃⵠⲆⵠΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[283])] = ΔⲆ.ᐃⲆΔΔⵠⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[131])] = ΔⲆ.ᐃΔᐃΔΔᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[465])] = ΔⲆ.ᐃΔᐃⵠⵠΔⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[381])] = ΔⲆ.ᐃᐃᐃᐃΔᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[275])] = ΔⲆ.ᐃᐃΔᐃⵠⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[105])] = ΔⲆ.ⲆⵠΔᐃᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[420])] = ΔⲆ.ᐃΔᐃⲆⵠΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[220])] = ΔⲆ.ΔΔⲆᐃⲆⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[101])] = ΔⲆ.ⲆⲆᐃⵠᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[190])] = ΔⲆ.ⵠᐃΔⲆⵠⲆΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[566])] = ΔⲆ.ᐃⵠᐃᐃⵠΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[415])] = ΔⲆ.ᐃΔᐃᐃᐃΔⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[436])] = ΔⲆ.ⵠᐃⵠⲆⲆⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[354])] = ΔⲆ.ⲆᐃⵠΔⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[496])] = ΔⲆ.ⵠᐃΔᐃⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[423])] = ΔⲆ.ΔᐃΔⲆⲆⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[125])] = ΔⲆ.ⵠⵠⲆᐃⵠΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[536])] = ΔⲆ.ⲆⵠΔⵠⲆⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[168])] = ΔⲆ.ΔᐃΔⵠⵠᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[227])] = ΔⲆ.ᐃᐃⲆΔᐃⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[337])] = ΔⲆ.ᐃⵠΔΔΔⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[227])] = ΔⲆ.ᐃᐃⲆΔᐃⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[408])] = ΔⲆ.ⵠᐃΔⲆⵠΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[411])] = ΔⲆ.ⲆⵠⵠⵠⵠΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ΔΔΔ][ᐃᐃⵠᐃ(Δ[199])] = ΔⲆ.ᐃⵠᐃⵠΔⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[13])] = ΔⲆ.ᐃⲆⵠΔᐃⵠΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[554])] = ΔⲆ.ᐃᐃⵠⵠᐃᐃΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[353])] = ΔⲆ.ᐃΔⵠⲆᐃΔΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[472])] = ΔⲆ.ⲆΔⵠΔⵠΔΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[372])] = ΔⲆ.ΔⲆⲆⲆΔⲆΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[161])] = ΔⲆ.ΔᐃⲆΔΔᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[333])] = ΔⲆ.ⲆΔⵠⲆⵠΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[229])] = ΔⲆ.ΔΔⲆⵠⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[348])] = ΔⲆ.ⲆⲆᐃᐃΔᐃΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[457])] = ΔⲆ.ΔΔⲆⲆⵠⵠΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[120])] = ΔⲆ.ΔⲆⲆⲆΔⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[258])] = ΔⲆ.ᐃᐃⲆΔⵠΔΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[549])] = ΔⲆ.ⲆΔⵠⲆⲆᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[424])] = ΔⲆ.ΔᐃⲆⵠⲆΔᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[154])] = ΔⲆ.ⵠⵠⵠⲆⲆΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[122])] = ΔⲆ.ᐃⵠⵠⲆΔᐃΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[561])] = ΔⲆ.ⵠΔⲆⲆᐃⵠΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[205])] = ΔⲆ.ᐃᐃⵠᐃⵠⲆΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[38])] = ΔⲆ.ⲆⲆᐃⵠⵠᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[509])] = ΔⲆ.ⲆⵠᐃⲆⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[299])] = ΔⲆ.ⵠᐃⲆⵠⲆΔΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[535])] = ΔⲆ.ᐃΔⵠⲆⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[176])] = ΔⲆ.ⵠΔᐃΔᐃΔᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[283])] = ΔⲆ.ⵠⲆⲆⵠᐃᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[131])] = ΔⲆ.ᐃⲆᐃⵠΔᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[465])] = ΔⲆ.ⵠⵠΔⵠᐃΔΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[381])] = ΔⲆ.ⲆⲆⲆΔⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[275])] = ΔⲆ.ⵠⵠΔᐃᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[105])] = ΔⲆ.ⵠⲆΔⲆᐃⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[420])] = ΔⲆ.ΔⲆⲆᐃⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[220])] = ΔⲆ.ΔΔⵠΔⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[101])] = ΔⲆ.ⲆᐃᐃⵠⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[190])] = ΔⲆ.ⵠⲆⵠⲆΔⵠΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[566])] = ΔⲆ.ⵠⲆⵠⵠΔᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[415])] = ΔⲆ.ΔᐃⵠΔⲆⵠΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[436])] = ΔⲆ.ⵠᐃΔᐃΔᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[354])] = ΔⲆ.Ⲇⵠᐃⵠᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[496])] = ΔⲆ.ᐃΔⲆⵠⲆΔΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[423])] = ΔⲆ.ᐃⲆᐃⲆᐃⵠⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[125])] = ΔⲆ.ⲆᐃΔᐃΔⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[536])] = ΔⲆ.ⵠⵠⲆᐃΔⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[168])] = ΔⲆ.ⲆΔⵠᐃⲆⵠΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[227])] = ΔⲆ.ⵠⵠΔⵠΔᐃΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[337])] = ΔⲆ.ᐃⵠⵠᐃᐃᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[227])] = ΔⲆ.ⵠⵠΔⵠΔᐃΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[408])] = ΔⲆ.ΔᐃⲆΔΔΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[411])] = ΔⲆ.ⲆⲆⵠᐃᐃⲆΔ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ][ᐃᐃⵠᐃ(Δ[199])] = ΔⲆ.ᐃΔᐃⲆᐃᐃⵠ;
		Ⲇⵠ[ⵠ.ΔⵠᐃᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⵠᐃᐃⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ΔΔⲆⵠᐃⲆⲆ;
		Ⲇⵠ[ⵠ.ΔⵠᐃᐃⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆᐃⵠΔⲆΔⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆΔⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆΔⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⵠΔᐃⵠΔΔ;
		Ⲇⵠ[ⵠ.ᐃⲆΔⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⲆⲆΔΔΔ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⲆⲆᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠᐃⲆⵠᐃΔᐃ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⲆⲆᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔΔᐃᐃᐃΔ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⵠⵠⵠⵠⲆΔ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⲆᐃⲆⲆⲆΔ;
		Ⲇⵠ[ⵠ.ᐃᐃΔⲆⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃΔⲆⲆⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ΔᐃⲆᐃᐃᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃᐃΔⲆⲆⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⲆΔΔΔΔΔ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆᐃⲆⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⲆᐃⲆⵠᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠΔΔΔΔΔΔ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆᐃⲆⵠᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⲆⲆΔΔⵠⵠ;
		Ⲇⵠ[ⵠ.ᐃᐃⵠᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃⵠᐃᐃ][ⵠ.ΔΔΔ] = ΔⲆ.Ⲇⵠᐃⵠⵠᐃᐃ;
		Ⲇⵠ[ⵠ.ᐃᐃⵠᐃᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⲆⵠΔⵠⲆΔ;
		Ⲇⵠ[ⵠ.ⵠⲆᐃⵠΔⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃⵠΔⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠΔⵠⲆᐃⵠⲆ;
		Ⲇⵠ[ⵠ.ⵠⲆᐃⵠΔⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆᐃⲆᐃⵠᐃⲆ;
		Ⲇⵠ[ⵠ.ⵠⲆⵠᐃⵠᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⵠᐃⵠᐃⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ΔΔΔΔᐃⵠᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆⵠᐃⵠᐃⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⲆⵠⵠᐃⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃⵠⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃⵠⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⵠᐃΔᐃⵠⲆ;
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃⵠⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆΔᐃΔⲆⵠᐃ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⲆᐃⲆ][ⵠ.ΔΔΔ] = [ΔⲆ.ΔᐃⲆᐃⵠⲆᐃ];
		Ⲇⵠ[ⵠ.ⵠⵠⲆᐃⲆ][ⵠ.ⵠᐃⲆ] = [ΔⲆ.ᐃⵠⲆⲆᐃᐃᐃ];
		Ⲇⵠ[ⵠ.ⲆᐃⵠᐃΔ] = [], Ⲇⵠ[ⵠ.ⲆᐃⵠᐃΔ][ⵠ.ΔΔΔ] = ΔⲆ.ΔΔⲆᐃⲆᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆᐃⵠᐃΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⲆⲆⲆΔⲆΔ;
		Ⲇⵠ[ⵠ.ⵠⲆⵠΔᐃ] = [], Ⲇⵠ[ⵠ.ⵠⲆⵠΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⵠⵠⵠⲆΔᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆⵠΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆⵠⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ΔᐃΔⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ΔᐃΔⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⵠᐃⵠⵠⲆⵠ;
		Ⲇⵠ[ⵠ.ΔᐃΔⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⵠⲆⲆⵠⵠΔ;
		Ⲇⵠ[ⵠ.ⲆⲆᐃⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆᐃⵠⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⲆᐃⵠⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆⲆᐃⵠⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⵠΔΔⵠⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⵠⲆⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆᐃⵠⲆᐃⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⵠⲆⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆΔΔᐃᐃᐃⲆ;
		Ⲇⵠ[ⵠ.ᐃⲆⵠΔⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⵠΔⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ΔΔⵠⵠΔⲆⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆⵠΔⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⲆᐃΔΔⲆⵠ;
		Ⲇⵠ[ⵠ.ⵠΔΔⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠΔΔⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⲆΔᐃⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ⵠΔΔⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⵠᐃⵠⲆⲆΔ;
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆΔ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃΔⵠⵠΔⲆΔ;
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔⵠⵠⵠⲆΔ;
		Ⲇⵠ[ⵠ.ΔΔΔⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔΔΔⲆᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⵠⲆⵠΔΔΔ;
		Ⲇⵠ[ⵠ.ΔΔΔⲆᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⵠⲆΔᐃᐃ;
		Ⲇⵠ[ⵠ.ΔⵠⲆⵠⲆⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⲆⵠⲆⲆⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⵠⲆⵠᐃᐃΔ;
		Ⲇⵠ[ⵠ.ΔⵠⲆⵠⲆⲆⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⲆᐃΔΔΔ;
		Ⲇⵠ[ⵠ.ⵠⲆⵠᐃⵠⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⵠᐃⵠⵠΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠΔᐃᐃⲆⲆⲆ;
		Ⲇⵠ[ⵠ.ⵠⲆⵠᐃⵠⵠΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⲆᐃᐃⵠᐃ;
		Ⲇⵠ[ⵠ.ⵠΔⵠⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⵠⵠΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⲆΔᐃᐃᐃⲆ;
		Ⲇⵠ[ⵠ.ⵠΔⵠⵠΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔᐃᐃⲆΔᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆᐃⲆΔⲆᐃⵠ] = ΔⲆ.ⲆᐃⲆΔⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆⲆᐃⲆⵠⲆ] = ΔⲆ.ᐃⲆⲆᐃⲆⵠⲆ;
		Ⲇⵠ[ⵠ.ΔⲆΔⲆΔ] = [];
		Ⲇⵠ[ⵠ.ΔⲆΔⲆΔ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ΔⲆΔⲆΔ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⲆΔⲆΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ᐃΔΔⵠⲆΔᐃ);
		Ⲇⵠ[ⵠ.ΔⲆΔⲆΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ⵠᐃΔⵠᐃᐃΔ);
		Ⲇⵠ[ⵠ.ΔⲆΔⲆΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ⲆⲆⲆᐃᐃΔᐃ);
		Ⲇⵠ[ⵠ.ΔⲆΔⲆΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ᐃᐃⵠⵠⵠΔⲆ);
		Ⲇⵠ[ⵠ.ΔⲆΔⲆΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⲆⲆⵠⵠⲆΔⵠ);
		Ⲇⵠ[ⵠ.ΔⲆΔⲆΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⲆⲆⵠᐃⲆⵠⵠ);
		Ⲇⵠ[ⵠ.ⲆΔΔΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆΔΔΔᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆΔΔΔᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆΔΔΔᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ΔⵠⲆΔᐃΔΔ);
		Ⲇⵠ[ⵠ.ⲆΔΔΔᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ⲆⵠᐃⵠⲆⵠⲆ);
		Ⲇⵠ[ⵠ.ⲆΔΔΔᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ΔᐃⵠΔⵠᐃΔ);
		Ⲇⵠ[ⵠ.ⲆΔΔΔᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⲆⲆΔⵠΔⵠⵠ);
		Ⲇⵠ[ⵠ.ⲆΔΔΔᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ᐃⲆΔᐃⵠⵠΔ);
		Ⲇⵠ[ⵠ.ⲆΔΔΔᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⵠᐃⵠⲆᐃᐃΔ);
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆΔ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆΔ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ΔⵠΔⵠᐃⵠᐃ);
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ᐃⲆΔᐃⵠᐃⵠ);
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ΔⵠⵠΔΔᐃΔ);
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ⲆΔΔΔΔⲆⲆ);
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ⵠⲆⲆΔⲆⵠⵠ);
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⵠᐃᐃΔⵠΔᐃ);
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔΔⲆⲆⲆⵠΔ);
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ᐃⵠΔⵠⲆⲆΔ);
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔⲆΔⲆΔⲆⲆ);
		Ⲇⵠ[ⵠ.ⵠⲆᐃⲆΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔⲆⲆΔⵠΔᐃ);
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⲆΔⲆΔⵠⲆ;
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⲆᐃΔᐃΔⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃⵠΔᐃⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⵠΔᐃⲆⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆΔⵠⵠΔⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆᐃⵠΔᐃⲆⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔΔᐃᐃΔᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⲆⲆⵠⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⲆⲆⵠⵠᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⵠᐃᐃΔⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆΔⲆⲆⵠⵠᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⵠᐃⵠⵠⵠⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠᐃⵠⵠᐃ] = ΔⲆ.ⲆΔⵠᐃⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ΔⲆᐃⵠⲆᐃⲆ] = ΔⲆ.ΔⲆᐃⵠⲆᐃⲆ;
		Ⲇⵠ[ⵠ.ΔⲆΔⵠⲆΔΔ] = ΔⲆ.ΔⲆΔⵠⲆΔΔ;
		Ⲇⵠ[ⵠ.ⵠᐃⵠΔⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⵠΔⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠᐃᐃᐃⲆᐃᐃ;
		Ⲇⵠ[ⵠ.ⵠᐃⵠΔⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆΔΔΔᐃ;
		Ⲇⵠ[ⵠ.ⵠΔⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⲆⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃΔᐃᐃᐃⵠⲆ;
		Ⲇⵠ[ⵠ.ⵠΔⲆⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆⲆΔⵠⵠ;
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⲆⵠⵠⲆΔᐃ;
		Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔᐃⵠᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⵠⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⵠⲆⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃΔᐃᐃᐃⵠⲆ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⵠⲆⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆⲆΔⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃΔΔⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃΔΔⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⲆᐃΔᐃΔⲆ;
		Ⲇⵠ[ⵠ.ⲆᐃΔΔⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⵠⲆⵠⲆΔ;
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⵠΔΔⲆᐃⲆ;
		Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆΔⲆⵠᐃⲆᐃ;
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⵠΔᐃᐃΔᐃ;
		Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⵠΔⵠⵠᐃΔ;
		Ⲇⵠ[ⵠ.ΔⵠᐃⵠΔ] = [];
		Ⲇⵠ[ⵠ.ΔⵠᐃⵠΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⵠⲆⲆⵠᐃᐃ;
		Ⲇⵠ[ⵠ.ΔⵠᐃⵠΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⲆⵠⲆⲆΔΔ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⲆⲆⵠⵠⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆΔΔⲆᐃᐃΔ;
		Ⲇⵠ[ⵠ.ᐃᐃᐃᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃᐃᐃⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠΔⲆⲆⲆΔⲆ;
		Ⲇⵠ[ⵠ.ᐃᐃᐃᐃⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔᐃΔⲆⵠⲆⲆ;
		Ⲇⵠ[ⵠ.ΔΔⲆⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ΔΔⲆⵠᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⵠΔⲆⲆΔΔ;
		Ⲇⵠ[ⵠ.ΔΔⲆⵠᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔⲆᐃΔΔⲆ;
		Ⲇⵠ[ⵠ.ⲆᐃⵠⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⵠⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⲆΔΔⵠⵠΔ;
		Ⲇⵠ[ⵠ.ⲆᐃⵠⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔⲆⵠⲆⵠⲆ;
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠΔΔΔᐃⲆΔ;
		Ⲇⵠ[ⵠ.ⲆⲆΔⵠᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆΔⲆΔΔⲆⲆ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⲆⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃᐃⲆΔⲆᐃΔ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⲆᐃᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆᐃᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⲆᐃᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆᐃΔᐃΔΔⵠ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆᐃᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆᐃΔⲆⲆΔⲆ;
		Ⲇⵠ[ⵠ.ⲆΔΔⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠΔΔⵠⲆΔⲆⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆΔΔⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔᐃΔⵠⵠⲆᐃΔⵠ;
		Ⲇⵠ[ⵠ.ΔⵠᐃⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⵠᐃⵠⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃΔⲆΔⵠⵠⲆ;
		Ⲇⵠ[ⵠ.ΔⵠᐃⵠⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⵠⵠⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⲆⲆⵠᐃⵠⲆ;
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃᐃⲆⲆΔᐃ;
		Ⲇⵠ[ⵠ.ⲆⲆΔⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆΔⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⲆⵠⵠⵠᐃᐃⲆΔ;
		Ⲇⵠ[ⵠ.ⲆⲆΔⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆᐃⵠᐃⲆΔΔᐃΔ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⲆⲆⵠΔⵠᐃᐃΔ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆΔΔⵠⵠⵠⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ΔΔΔⵠⲆⵠΔⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆⲆⲆΔⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆᐃⲆΔⲆⲆᐃΔΔ;
		Ⲇⵠ[ⵠ.ΔⵠᐃᐃΔ] = [];
		Ⲇⵠ[ⵠ.ΔⵠᐃᐃΔ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⵠΔⲆᐃⲆᐃⲆΔ;
		Ⲇⵠ[ⵠ.ΔⵠᐃᐃΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⵠΔΔⵠᐃⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃΔΔⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃΔΔⲆⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠᐃᐃⵠⵠᐃΔΔⲆ;
		Ⲇⵠ[ⵠ.ᐃΔΔⲆⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃΔᐃⵠΔΔⵠΔ;
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⲆᐃᐃⲆⲆᐃⲆΔ;
		Ⲇⵠ[ⵠ.ΔⵠᐃⲆᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⲆⵠᐃᐃⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ⵠⵠΔΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠΔΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⵠⵠⲆᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ⵠⵠΔΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔⲆⲆΔΔⵠ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⵠΔᐃⵠⲆΔ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⵠⵠΔⵠᐃᐃ;
		Ⲇⵠ[ⵠ.ΔᐃᐃΔᐃ] = [];
		Ⲇⵠ[ⵠ.ΔᐃᐃΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⲆⲆᐃⲆⵠΔ;
		Ⲇⵠ[ⵠ.ΔᐃᐃΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⵠᐃⲆⵠⲆΔ;
		Ⲇⵠ[ⵠ.ⵠΔΔΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠΔΔΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⵠᐃⵠΔⲆᐃ;
		Ⲇⵠ[ⵠ.ⵠΔΔΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆΔⵠⲆⲆ;
		Ⲇⵠ[ⵠ.ΔΔⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ΔΔⲆⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⵠⵠⲆⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ΔΔⲆⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃᐃΔᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠⵠⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⵠⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⵠΔⲆᐃᐃⲆ;
		Ⲇⵠ[ⵠ.ⵠⵠⵠⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⵠᐃᐃᐃⲆ;
		Ⲇⵠ[ⵠ.ᐃΔⲆᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃΔⲆᐃⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⲆⵠⵠᐃᐃΔ;
		Ⲇⵠ[ⵠ.ᐃΔⲆᐃⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃΔᐃᐃⵠᐃ;
		Ⲇⵠ[ⵠ.ⵠᐃⵠᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⵠᐃΔ][ⵠ.ΔΔΔ] = ΔⲆ.ΔΔΔⲆⲆᐃᐃ;
		Ⲇⵠ[ⵠ.ⵠᐃⵠᐃΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⲆⵠⵠⵠΔ;
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠⵠ][ⵠ.ΔΔΔ] = ΔⲆ.Δⵠⵠⵠᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆⵠⵠⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆΔⲆⲆⵠᐃΔ;
		Ⲇⵠ[ⵠ.ΔΔⵠⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ΔΔⵠⵠⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆΔΔⵠΔᐃᐃ;
		Ⲇⵠ[ⵠ.ΔΔⵠⵠⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔⵠΔᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ᐃⵠΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠΔⵠᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⲆⵠΔⵠΔΔ;
		Ⲇⵠ[ⵠ.ᐃⵠΔⵠᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆΔΔⲆᐃ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⲆᐃΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠΔⲆⲆⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆᐃΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆΔⵠⲆᐃⵠⲆ;
		Ⲇⵠ[ⵠ.ΔⲆΔⵠΔ] = [];
		Ⲇⵠ[ⵠ.ΔⲆΔⵠΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⲆⵠᐃΔⲆΔ;
		Ⲇⵠ[ⵠ.ΔⲆΔⵠΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔΔⵠⵠⲆⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆΔᐃⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⲆΔᐃⵠΔ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⵠⵠᐃΔⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆΔᐃⵠΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔᐃⵠᐃⲆⲆⵠ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⵠΔⲆΔⵠΔ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⵠⲆⵠⲆⲆΔ;
		Ⲇⵠ[ⵠ.ΔⲆᐃⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⲆᐃⲆⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⵠΔᐃΔΔΔ;
		Ⲇⵠ[ⵠ.ΔⲆᐃⲆⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⲆⵠⲆⵠⲆΔ;
		Ⲇⵠ[ⵠ.ⲆΔΔᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆΔΔᐃⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆΔᐃⲆⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆΔΔᐃⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔΔⵠᐃⵠΔⵠ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆΔΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆΔΔⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠᐃⲆΔΔⵠⲆ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆΔΔⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⵠᐃⵠⵠΔᐃ;
		Ⲇⵠ[ⵠ.ΔΔΔᐃⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔΔΔᐃⲆⲆᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ΔΔΔᐃⲆⲆᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔΔΔᐃⲆⲆᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ⲆΔᐃΔᐃⲆⲆΔⵠ);
		Ⲇⵠ[ⵠ.ΔΔΔᐃⲆⲆᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ᐃⵠⵠⵠⲆᐃΔΔᐃ);
		Ⲇⵠ[ⵠ.ΔΔΔᐃⲆⲆᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ᐃⵠⵠⵠⲆᐃΔΔᐃ);
		Ⲇⵠ[ⵠ.ΔΔΔᐃⲆⲆᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⵠΔΔΔΔⲆⵠΔΔ);
		Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠ] = [];
		Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠ][ⵠ.ΔΔΔ].push(ΔⲆ.ΔⵠⲆΔⲆᐃⵠ);
		Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠ][ⵠ.ΔΔΔ].push(ΔⲆ.ΔΔⲆᐃᐃᐃⲆ);
		Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠ][ⵠ.ΔΔΔ].push(ΔⲆ.ⵠⲆⵠᐃᐃΔΔ);
		Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔⲆⲆᐃⵠΔⲆ);
		Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⵠⵠⲆⵠᐃΔΔ);
		Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔⵠⲆᐃⵠⲆⲆ);
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃΔ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⲆᐃᐃⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆⵠΔᐃΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⲆⲆΔΔⵠΔ;
		Ⲇⵠ[ⵠ.ⲆᐃΔᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃΔᐃΔ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⲆᐃⵠⵠΔⲆ;
		Ⲇⵠ[ⵠ.ⲆᐃΔᐃΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔⵠⵠᐃⲆᐃ;
		Ⲇⵠ[ⵠ.ΔᐃΔⵠΔ] = [];
		Ⲇⵠ[ⵠ.ΔᐃΔⵠΔ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ΔᐃΔⵠΔ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔᐃΔⵠΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ΔΔⲆΔⲆΔΔ);
		Ⲇⵠ[ⵠ.ΔᐃΔⵠΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ⵠⵠⵠⲆᐃⵠⲆ);
		Ⲇⵠ[ⵠ.ΔᐃΔⵠΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ⲆⲆΔᐃⲆΔⲆ);
		Ⲇⵠ[ⵠ.ΔᐃΔⵠΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ᐃⲆⵠⵠⵠⲆⲆ);
		Ⲇⵠ[ⵠ.ΔᐃΔⵠΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⲆⵠᐃΔⵠᐃΔ);
		Ⲇⵠ[ⵠ.ΔᐃΔⵠΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⲆᐃᐃΔⲆᐃⲆ);
		Ⲇⵠ[ⵠ.Ⲇⵠⵠᐃ] = [];
		Ⲇⵠ[ⵠ.Ⲇⵠⵠᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.Ⲇⵠⵠᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.Ⲇⵠⵠᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ᐃᐃΔⵠⵠⲆΔ);
		Ⲇⵠ[ⵠ.Ⲇⵠⵠᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ⵠⲆⲆⲆⵠⵠⲆ);
		Ⲇⵠ[ⵠ.Ⲇⵠⵠᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ᐃΔΔᐃΔⵠΔ);
		Ⲇⵠ[ⵠ.Ⲇⵠⵠᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔⲆΔⲆΔⵠⲆ);
		Ⲇⵠ[ⵠ.Ⲇⵠⵠᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⵠⵠⲆⵠⵠΔᐃ);
		Ⲇⵠ[ⵠ.Ⲇⵠⵠᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⵠᐃⵠΔᐃⲆᐃ);
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ΔΔΔ].push(ΔⲆ.ᐃΔⲆⵠᐃⲆΔ);
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ΔΔΔ].push(ΔⲆ.ΔⵠⲆΔΔⲆⲆ);
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ΔΔΔ].push(ΔⲆ.ⵠΔᐃΔⲆᐃⲆ);
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ΔΔΔ].push(ΔⲆ.ΔᐃᐃΔⵠⵠᐃ);
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ΔΔΔ].push(ΔⲆ.ⵠⵠΔᐃΔⲆᐃ);
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ΔΔΔ].push(ΔⲆ.ΔⲆⲆᐃΔᐃⲆ);
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔΔΔΔⲆᐃⲆ);
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔⲆⵠΔᐃᐃΔ);
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⲆⵠᐃⲆᐃΔⵠ);
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔⵠⵠᐃΔΔΔ);
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⵠⲆⵠⲆΔⵠᐃ);
		Ⲇⵠ[ⵠ.ΔⲆΔΔⲆ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔΔᐃᐃⵠΔⲆ);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ⲆΔΔΔΔΔⵠ);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ⲆⵠΔᐃⲆᐃⲆ);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ᐃⵠΔᐃⵠᐃⲆ);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ᐃᐃⲆⵠⵠΔΔ);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ⲆⲆⵠⵠΔⲆᐃ);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ΔΔΔ].push(ΔⲆ.ᐃᐃᐃⲆⲆᐃᐃ);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔΔΔᐃⵠΔΔ);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔⵠΔⲆᐃⵠᐃ);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⵠᐃⵠΔⵠⲆⲆ);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔΔⲆΔᐃⲆⵠ);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ᐃΔΔⵠΔⵠⵠ);
		Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔⲆᐃⲆⵠΔⲆ);
		Ⲇⵠ[ⵠ.ⲆⲆⵠⵠⲆΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⵠⵠⲆΔΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆᐃⲆΔⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆⲆⵠⵠⲆΔΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⵠΔⵠⵠⲆⵠ;
		Ⲇⵠ[ⵠ.ᐃⵠᐃⲆΔΔᐃ] = ΔⲆ.ⲆⲆΔⵠⲆⲆⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠⵠⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⵠⵠΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⲆⲆⵠᐃᐃᐃᐃⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠⵠⵠΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⲆᐃΔᐃⵠⲆⲆ;
		Ⲇⵠ[ⵠ.ᐃΔⵠΔΔ] = [];
		Ⲇⵠ[ⵠ.ᐃΔⵠΔΔ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃΔᐃᐃᐃΔⲆ;
		Ⲇⵠ[ⵠ.ᐃΔⵠΔΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔΔⵠⲆΔⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃᐃΔⲆⵠⵠΔ;
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⲆᐃⲆᐃᐃΔ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⲆΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⵠⲆᐃᐃⲆΔ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆᐃΔⵠⲆⵠᐃ;
		Ⲇⵠ[ⵠ.Δⵠⵠᐃⵠ] = [];
		Ⲇⵠ[ⵠ.Δⵠⵠᐃⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃᐃΔⵠᐃⲆⲆ;
		Ⲇⵠ[ⵠ.Δⵠⵠᐃⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⲆᐃΔᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ᐃᐃⲆⵠⲆᐃᐃ] = ΔⲆ.ᐃᐃⲆⵠⲆᐃᐃ;
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃΔⵠΔ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃΔⵠΔ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⲆⵠᐃᐃⵠΔ;
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃΔⵠΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⵠΔⵠΔᐃᐃ;
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆⵠⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⲆⲆᐃⲆⲆⲆ;
		Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆⵠⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⲆⲆⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠΔΔᐃ] = ΔⲆ.ⲆΔⲆⵠΔΔᐃ;
		Ⲇⵠ[ⵠ.ᐃⵠΔⲆᐃⵠⵠ] = ΔⲆ.ᐃⵠΔⲆᐃⵠⵠ;
		Ⲇⵠ[ⵠ.ΔᐃΔⲆᐃⵠΔ] = ΔⲆ.ΔᐃΔⲆᐃⵠΔ;
		Ⲇⵠ[ⵠ.ⲆᐃⲆΔⲆⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃⲆΔⲆⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⲆⲆΔⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆᐃⲆΔⲆⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆΔⲆⵠⲆΔⲆ;
		Ⲇⵠ[ⵠ.ⵠᐃᐃⵠⵠΔⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃᐃⵠⵠΔⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ΔᐃᐃⵠΔᐃᐃ;
		Ⲇⵠ[ⵠ.ⵠᐃᐃⵠⵠΔⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⲆⲆΔⵠΔⲆ;
		Ⲇⵠ[ⵠ.ΔⲆΔⵠⲆⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⲆΔⵠⲆⵠⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⲆᐃⵠᐃⲆᐃ;
		Ⲇⵠ[ⵠ.ΔⲆΔⵠⲆⵠⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⲆⲆⲆⵠΔ;
		Ⲇⵠ[ⵠ.ⲆΔᐃⵠᐃⲆΔ] = ΔⲆ.ⲆΔᐃⵠᐃⲆΔ;
		Ⲇⵠ[ⵠ.ⲆⵠᐃᐃᐃᐃΔ] = ΔⲆ.ⲆⵠᐃᐃᐃᐃΔ;
		Ⲇⵠ[ⵠ.ᐃⲆⲆΔⵠⵠⵠ] = ΔⲆ.ᐃⲆⲆΔⵠⵠⵠ;
		Ⲇⵠ[ⵠ.ᐃᐃΔⵠᐃΔⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃΔⵠᐃΔⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⵠⵠΔᐃᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃᐃΔⵠᐃΔⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⲆⵠⵠΔⵠ;
		Ⲇⵠ[ⵠ.ⵠⲆΔᐃᐃⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆΔᐃᐃⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⲆΔⵠΔⲆᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆΔᐃᐃⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⵠΔᐃΔᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃᐃⵠⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃⵠⵠᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⵠᐃᐃⵠᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃᐃⵠⵠᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃᐃΔᐃⲆΔⲆ;
		Ⲇⵠ[ⵠ.ⵠΔᐃⲆᐃΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠΔᐃⲆᐃΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⵠⲆⲆΔⲆΔ;
		Ⲇⵠ[ⵠ.ⵠΔᐃⲆᐃΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔΔᐃᐃᐃⲆ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃᐃⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃᐃⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⲆΔΔⵠΔⵠ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃᐃⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⵠΔᐃⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆΔΔᐃⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⲆΔΔᐃⲆⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠᐃᐃΔᐃᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆΔΔᐃⲆⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⵠⲆᐃⲆΔ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠᐃⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠᐃⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⵠΔⵠⵠᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠᐃⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⵠᐃΔΔᐃⵠ;
		Ⲇⵠ[ⵠ.ⵠᐃΔᐃΔⲆΔ] = ΔⲆ.ⵠᐃΔᐃΔⲆΔ;
		Ⲇⵠ[ⵠ.ⵠΔᐃⵠⵠⵠⵠ] = ΔⲆ.ⵠΔᐃⵠⵠⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔⲆⵠ] = ΔⲆ.ⲆⵠⲆⵠΔⲆⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆⲆᐃΔᐃ] = ΔⲆ.ⵠⵠⲆⲆᐃΔᐃ;
		Ⲇⵠ[ⵠ.ΔΔΔᐃᐃΔᐃ] = ΔⲆ.ΔΔΔᐃᐃΔᐃ;
		Ⲇⵠ[ⵠ.ⲆᐃⵠⵠⵠⵠⲆ] = ΔⲆ.ⲆᐃⵠⵠⵠⵠⲆ;
		Ⲇⵠ[ⵠ.ᐃⲆⲆᐃⵠΔⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⲆᐃⵠΔⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⵠⵠⵠΔᐃⲆ;
		Ⲇⵠ[ⵠ.ᐃⲆⲆᐃⵠΔⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⵠΔⵠⲆⲆⲆ;
		Ⲇⵠ[ⵠ.ᐃΔⲆΔⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃΔⲆΔⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⵠⵠⲆⵠᐃⲆ;
		Ⲇⵠ[ⵠ.ᐃΔⲆΔⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⲆⲆⲆΔΔⲆ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃΔ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆᐃⵠΔⲆᐃᐃ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆᐃΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆᐃΔⲆᐃⲆΔ;
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆΔΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆΔΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⵠᐃⵠⲆⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆⲆᐃⲆΔΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔΔⲆΔΔΔ;
		Ⲇⵠ[ⵠ.ᐃΔⲆⵠⵠⲆᐃ] = ΔⲆ.ᐃΔⲆⵠⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ⲆΔᐃⵠⵠΔⲆ] = ΔⲆ.ⲆΔᐃⵠⵠΔⲆ;
		Ⲇⵠ[ⵠ.ⵠᐃⵠⵠΔΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⵠⵠΔΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆΔⲆΔⵠᐃΔ;
		Ⲇⵠ[ⵠ.ⵠᐃⵠⵠΔΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔΔΔⲆΔⵠⵠ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆΔⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠᐃⲆΔⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆᐃᐃΔᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ⵠᐃⲆΔⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⲆⲆⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆⲆⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆΔⲆⲆⵠᐃⵠ;
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆⲆⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⵠⲆᐃⲆΔ;
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃⲆⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ΔΔᐃΔⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃⵠⵠᐃⲆⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⲆⲆᐃⲆᐃ;
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃⵠΔⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃⵠΔⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⲆᐃⵠⵠⲆⲆ;
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃⵠΔⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆᐃᐃⲆᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ΔⲆΔΔᐃⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⲆΔΔᐃⵠⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃᐃⲆᐃⲆⵠΔ;
		Ⲇⵠ[ⵠ.ΔⲆΔΔᐃⵠⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔΔⵠⵠᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃᐃⵠⲆΔΔⲆ] = [];
		Ⲇⵠ[ⵠ.ᐃᐃⵠⲆΔΔⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃᐃΔⲆᐃᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃᐃⵠⲆΔΔⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃᐃᐃᐃΔⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⲆᐃᐃⲆⲆΔ;
		Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⲆⲆΔΔΔΔ;
		Ⲇⵠ[ⵠ.ⲆΔᐃΔΔⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⲆΔᐃΔΔⵠΔ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⲆⲆⲆΔⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆΔᐃΔΔⵠΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⵠⲆⵠⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⲆᐃᐃ] = ΔⲆ.ⲆᐃᐃⲆⲆᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆⲆⲆᐃᐃΔⲆ] = ΔⲆ.ⲆⲆⲆᐃᐃΔⲆ;
		Ⲇⵠ[ⵠ.ᐃΔⵠⲆⲆᐃⵠ] = ΔⲆ.ᐃΔⵠⲆⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⲆΔⲆⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⲆΔⲆⲆⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⵠⵠΔᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⲆΔⲆⲆⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⲆⵠⲆΔᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⵠⲆⲆᐃΔᐃ;
		Ⲇⵠ[ⵠ.ⲆΔᐃⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⲆⲆⵠᐃΔⵠ;
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠΔⵠᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆΔⲆⵠΔΔⲆ;
		Ⲇⵠ[ⵠ.ⲆⲆⲆⵠΔⵠᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔΔⵠⵠⵠⵠΔ;
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆᐃᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆᐃᐃⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆΔΔΔⲆⵠᐃ;
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆᐃᐃⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⲆⵠⵠⲆⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆⲆΔΔⵠⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆΔΔⵠⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⲆⲆᐃⵠⲆⵠ;
		Ⲇⵠ[ⵠ.ⲆⲆΔΔⵠⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆⲆΔⵠᐃ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆΔⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆΔⵠⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⲆΔⲆΔΔⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆΔⵠⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⲆᐃⲆⵠΔΔ;
		Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⵠΔᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⵠΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⲆᐃᐃᐃΔⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⵠΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃᐃΔᐃᐃᐃΔ;
		Ⲇⵠ[ⵠ.ΔΔΔⵠΔⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ΔΔΔⵠΔⵠⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⵠⲆⵠⲆᐃⲆ;
		Ⲇⵠ[ⵠ.ΔΔΔⵠΔⵠⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃᐃᐃⲆᐃᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃⵠⲆⲆⵠΔᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⵠⲆⲆⵠΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⲆⵠⵠⵠⵠⲆ;
		Ⲇⵠ[ⵠ.ᐃⵠⲆⲆⵠΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆᐃⵠΔⲆ;
		Ⲇⵠ[ⵠ.ᐃⵠⵠΔⵠᐃⵠ] = ΔⲆ.ᐃⵠⵠΔⵠᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆᐃⲆⲆⲆᐃ] = ΔⲆ.ᐃⲆᐃⲆⲆⲆᐃ;
		Ⲇⵠ[ⵠ.ⵠⲆΔⲆⲆΔⲆ] = ΔⲆ.ⵠⲆΔⲆⲆΔⲆ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆΔⵠΔⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⲆΔⵠΔⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⲆⲆⵠΔΔΔ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆΔⵠΔⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.Ⲇⵠᐃᐃⵠⵠⵠ;
		Ⲇⵠ[ⵠ.ΔⲆⵠΔᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃᐃΔᐃᐃⲆᐃ;
		Ⲇⵠ[ⵠ.ΔⲆⵠΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⵠⵠΔΔΔⵠ;
		Ⲇⵠ[ⵠ.ΔᐃΔΔⲆⲆΔ] = ΔⲆ.ΔᐃΔΔⲆⲆΔ;
		Ⲇⵠ[ⵠ.ⲆⵠᐃΔⵠⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠᐃΔⵠⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠⲆΔⵠΔᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆⵠᐃΔⵠⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆᐃⵠᐃⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔⲆⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⵠΔⵠᐃΔⲆ;
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔⲆⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔΔᐃᐃΔⵠ;
		Ⲇⵠ[ⵠ.ΔΔΔⵠΔⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ΔΔΔⵠΔⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠᐃᐃⲆⵠᐃᐃ;
		Ⲇⵠ[ⵠ.ΔΔΔⵠΔⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔΔΔΔᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆΔᐃᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠⲆΔᐃᐃⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃΔᐃⵠⲆᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆⵠⲆΔᐃᐃⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⵠⵠⵠⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ΔⵠΔΔΔⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⵠΔΔΔⲆᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠᐃⲆᐃⵠΔⵠ;
		Ⲇⵠ[ⵠ.ΔⵠΔΔΔⲆᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆⲆᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆᐃᐃⲆᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆᐃᐃⲆᐃⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⵠΔⲆΔⵠⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆᐃᐃⲆᐃⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆΔⵠᐃⵠᐃΔ;
		Ⲇⵠ[ⵠ.ⵠΔⲆΔΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠΔⲆΔΔⵠᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⲆⵠᐃⲆΔⲆ;
		Ⲇⵠ[ⵠ.ⵠΔⲆΔΔⵠᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⵠΔⲆⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ΔⲆΔᐃⵠⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⲆΔᐃⵠⲆᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⲆⲆⲆⲆⵠᐃ;
		Ⲇⵠ[ⵠ.ΔⲆΔᐃⵠⲆᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⵠΔΔⲆΔᐃ;
		Ⲇⵠ[ⵠ.ⲆⲆⵠⲆⲆⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⵠⲆⲆⲆⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ΔΔⲆΔΔΔᐃ;
		Ⲇⵠ[ⵠ.ⲆⲆⵠⲆⲆⲆⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⲆⲆⲆⲆⵠ;
		Ⲇⵠ[ⵠ.ᐃⵠⵠⵠⲆⲆⲆ] = ΔⲆ.ᐃⵠⵠⵠⲆⲆⲆ;
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔⵠᐃⵠ] = ΔⲆ.ᐃⲆᐃΔⵠᐃⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠⵠᐃⲆᐃⲆ] = ΔⲆ.ⵠⵠⵠᐃⲆᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠᐃⲆⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆΔⵠᐃⲆⵠᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆᐃᐃⲆᐃⵠⵠ;
		Ⲇⵠ[ⵠ.ⲆΔⵠᐃⲆⵠᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⲆⵠⲆⵠⲆⵠ;
		Ⲇⵠ[ⵠ.ⵠⵠΔᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠΔᐃⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠΔⲆΔΔⲆΔ;
		Ⲇⵠ[ⵠ.ⵠⵠΔᐃⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⲆⵠΔⵠΔᐃ;
		Ⲇⵠ[ⵠ.ᐃΔⵠΔΔⲆΔ] = ΔⲆ.ᐃΔⵠΔΔⲆΔ;
		Ⲇⵠ[ⵠ.ᐃⲆⲆᐃⲆⲆΔ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆⲆᐃⲆⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ΔΔᐃⵠΔΔⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆⲆᐃⲆⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⲆⲆⵠⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ΔⵠΔⲆⲆᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⵠΔⲆⲆᐃⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠΔⲆᐃⲆⵠⲆ;
		Ⲇⵠ[ⵠ.ΔⵠΔⲆⲆᐃⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⵠⲆᐃΔⲆⵠ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆΔⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆΔⲆᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⵠᐃΔᐃΔⵠ;
		Ⲇⵠ[ⵠ.ⵠⲆⲆⲆΔⲆᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔᐃΔⵠⲆⵠΔ;
		Ⲇⵠ[ⵠ.Ⲇⵠⵠᐃᐃⵠᐃ] = [];
		Ⲇⵠ[ⵠ.Ⲇⵠⵠᐃᐃⵠᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃΔᐃΔⲆⵠⲆ;
		Ⲇⵠ[ⵠ.Ⲇⵠⵠᐃᐃⵠᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔΔⲆΔᐃⵠⲆ;
		Ⲇⵠ[ⵠ.ΔΔᐃΔⲆⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ΔΔᐃΔⲆⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⵠΔΔⵠΔⵠ;
		Ⲇⵠ[ⵠ.ΔΔᐃΔⲆⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔⲆΔΔΔⵠ;
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃΔⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃΔⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃᐃⵠΔΔⵠⵠ;
		Ⲇⵠ[ⵠ.ΔⵠⲆᐃΔⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔᐃⲆⵠᐃᐃ;
		Ⲇⵠ[ⵠ.ΔⵠᐃᐃⲆΔⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⵠᐃᐃⲆΔⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⲆᐃⲆᐃΔΔ;
		Ⲇⵠ[ⵠ.ΔⵠᐃᐃⲆΔⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃⵠΔⵠΔΔᐃ;
		Ⲇⵠ[ⵠ.ⲆᐃΔᐃΔⲆⵠ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃΔᐃΔⲆⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆᐃᐃᐃⲆⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆᐃΔᐃΔⲆⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔΔⲆᐃⵠⲆᐃ;
		Ⲇⵠ[ⵠ.ΔΔᐃⵠⲆΔⵠ] = [];
		Ⲇⵠ[ⵠ.ΔΔᐃⵠⲆΔⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⵠΔᐃᐃᐃⲆ;
		Ⲇⵠ[ⵠ.ΔΔᐃⵠⲆΔⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔΔΔᐃⲆⲆ;
		Ⲇⵠ[ⵠ.ⲆΔⵠᐃΔⵠⵠ] = ΔⲆ.ⲆΔⵠᐃΔⵠⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆⲆΔΔᐃᐃ] = ΔⲆ.ᐃⲆⲆΔΔᐃᐃ;
		Ⲇⵠ[ⵠ.ᐃᐃΔΔⵠᐃΔ] = ΔⲆ.ᐃᐃΔΔⵠᐃΔ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃᐃⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠᐃᐃⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠᐃⲆⵠᐃⲆΔ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃᐃⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆⲆⵠⲆⵠ;
		Ⲇⵠ[ⵠ.ΔΔⲆΔⲆⵠΔ] = [];
		Ⲇⵠ[ⵠ.ΔΔⲆΔⲆⵠΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆΔΔᐃᐃΔⲆ;
		Ⲇⵠ[ⵠ.ΔΔⲆΔⲆⵠΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃᐃΔⵠᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆⲆΔΔᐃᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆΔΔᐃᐃⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⲆΔⵠΔᐃᐃ;
		Ⲇⵠ[ⵠ.ⲆⲆΔΔᐃᐃⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⵠⵠΔΔΔΔ;
		Ⲇⵠ[ⵠ.ΔᐃⵠⵠΔⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ΔᐃⵠⵠΔⵠᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ΔᐃⵠⵠΔⵠᐃ;
		Ⲇⵠ[ⵠ.ΔᐃⵠⵠΔⵠᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔᐃⵠⵠΔⵠᐃ;
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆⵠΔⵠ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆⵠΔⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⲆⲆⲆⵠΔⵠ;
		Ⲇⵠ[ⵠ.ΔⲆⲆⲆⵠΔⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⲆⲆⲆⵠΔⵠ;
		Ⲇⵠ[ⵠ.ⲆⲆⵠⵠⵠⵠΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⲆⵠⵠⵠⵠΔ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⲆⵠⵠⵠⵠΔ;
		Ⲇⵠ[ⵠ.ⲆⲆⵠⵠⵠⵠΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⲆⵠⵠⵠⵠΔ;
		Ⲇⵠ[ⵠ.ⲆⵠⵠⵠᐃⲆⵠ] = ΔⲆ.ⲆⵠⵠⵠᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔᐃ] = [];
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⵠΔΔᐃᐃᐃⲆ;
		Ⲇⵠ[ⵠ.ᐃⲆᐃΔᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠᐃΔΔⵠᐃⲆ;
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆΔ] = [];
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆΔ][ⵠ.ΔΔΔ] = ΔⲆ.ΔⲆᐃΔᐃᐃⵠ;
		Ⲇⵠ[ⵠ.ⲆᐃΔⲆΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ᐃΔⵠΔΔⵠΔ;
		Ⲇⵠ[ⵠ.ⵠⵠⲆⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠⲆⵠⵠ][ⵠ.ΔΔΔ] = [ΔⲆ.ᐃᐃⵠΔΔᐃⵠ, ΔⲆ.ⲆΔᐃⲆⵠⲆᐃ, ΔⲆ.ΔⵠⵠⲆᐃᐃᐃ, ΔⲆ.ΔⲆⲆᐃⲆⵠΔ, ΔⲆ.ᐃⵠⵠⲆⲆᐃⵠ, ΔⲆ.ⵠⲆⵠⵠᐃᐃΔ, ΔⲆ.Δⵠⵠⵠᐃᐃᐃ, ΔⲆ.ΔⲆⵠΔⵠΔΔ, ΔⲆ.ⲆⲆⵠᐃΔⲆΔ];
		Ⲇⵠ[ⵠ.ⵠⵠⲆⵠⵠ][ⵠ.ⵠᐃⲆ] = [ΔⲆ.ⲆᐃΔᐃⲆΔⲆ, ΔⲆ.ᐃᐃΔΔᐃΔⲆ, ΔⲆ.ᐃΔⲆⲆΔΔⵠ, ΔⲆ.ΔⵠᐃⲆⵠⲆΔ, ΔⲆ.ⵠᐃᐃΔᐃⲆⵠ, ΔⲆ.ⵠᐃΔᐃᐃⵠᐃ, ΔⲆ.ⲆΔⲆⲆⵠᐃΔ, ΔⲆ.ΔⲆⵠΔⵠΔΔ, ΔⲆ.ΔΔⵠⵠⲆⲆⲆ];
		Ⲇⵠ[ⵠ.Δᐃᐃᐃⵠ] = [];
		Ⲇⵠ[ⵠ.Δᐃᐃᐃⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⲆⲆⵠⵠⵠΔ;
		Ⲇⵠ[ⵠ.Δᐃᐃᐃⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔᐃΔⲆⲆⵠΔ;
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃⵠΔⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃⵠΔⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⲆⵠⵠⵠΔΔ;
		Ⲇⵠ[ⵠ.ΔⲆⵠᐃⵠΔⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⲆΔᐃⵠⵠᐃ;
		Ⲇⵠ[ⵠ.ΔΔΔⵠᐃⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔΔΔⵠᐃⲆᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ⲆⵠᐃΔⵠΔⵠ;
		Ⲇⵠ[ⵠ.ΔΔΔⵠᐃⲆᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⲆⵠⵠΔⵠΔ;
		Ⲇⵠ[ⵠ.ᐃΔᐃΔΔ] = [];
		Ⲇⵠ[ⵠ.ᐃΔᐃΔΔ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⵠΔⲆⵠⵠⵠ;
		Ⲇⵠ[ⵠ.ᐃΔᐃΔΔ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠⲆᐃᐃᐃⲆⵠ;
		Ⲇⵠ[ⵠ.ΔᐃⲆⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ΔᐃⲆⲆᐃ][ⵠ.ΔΔΔ] = ΔⲆ.ΔᐃᐃⲆᐃⵠΔ;
		Ⲇⵠ[ⵠ.ΔᐃⲆⲆᐃ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⲆⲆΔⲆΔⲆᐃ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆⲆ] = [];
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆⲆ][ⵠ.ΔΔΔ] = ΔⲆ.ᐃⲆΔⲆᐃⲆⲆ;
		Ⲇⵠ[ⵠ.ⵠⵠᐃⲆⲆ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ΔⵠⲆⲆᐃᐃᐃ;
		Ⲇⵠ[ⵠ.ⵠΔᐃⵠⵠ] = [];
		Ⲇⵠ[ⵠ.ⵠΔᐃⵠⵠ][ⵠ.ΔΔΔ] = ΔⲆ.ΔᐃΔⵠΔΔΔ;
		Ⲇⵠ[ⵠ.ⵠΔᐃⵠⵠ][ⵠ.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆⲆⵠᐃⲆ;
		Ⲇⵠ[ⵠ.ΔⲆⵠⵠᐃ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠⵠᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠⵠᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⲆⵠⵠᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ⲆᐃⲆᐃⲆᐃᐃΔⲆ);
		Ⲇⵠ[ⵠ.ΔⲆⵠⵠᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ⵠΔⵠⵠᐃⵠⲆⲆⵠ);
		Ⲇⵠ[ⵠ.ΔⲆⵠⵠᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ⵠⵠⲆΔᐃⲆⵠⵠΔ);
		Ⲇⵠ[ⵠ.ΔⲆⵠⵠᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔⵠΔⵠⲆᐃⵠᐃⲆ);
		Ⲇⵠ[ⵠ.ΔⲆⵠⵠᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⲆⵠΔΔΔΔᐃᐃᐃ);
		Ⲇⵠ[ⵠ.ΔⲆⵠⵠᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔⵠᐃⲆᐃⵠⵠᐃⲆ);
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ᐃⲆⲆⲆΔⵠⵠᐃⵠ);
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ⵠᐃᐃⲆⲆᐃⵠᐃⵠ);
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ΔΔΔ].push(ΔⲆ.ⵠΔⲆⵠⲆⵠΔⲆΔ);
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⵠⵠⲆⵠⵠⲆⵠⵠⵠ);
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ᐃⵠᐃⵠⵠᐃⵠᐃᐃ);
		Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ⲆᐃᐃⲆⲆⵠᐃᐃᐃ);
		Ⲇⵠ[ⵠ.ΔⵠⵠⵠⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⵠⵠⲆ][ⵠ.ΔΔΔ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⵠⵠⲆ][ⵠ.ⵠᐃⲆ] = [];
		Ⲇⵠ[ⵠ.ΔⵠⵠⵠⲆ][ⵠ.ΔΔΔ].push(ΔⲆ.ᐃⲆΔⲆⵠⲆᐃⲆᐃ);
		Ⲇⵠ[ⵠ.ΔⵠⵠⵠⲆ][ⵠ.ΔΔΔ].push(ΔⲆ.ⵠⵠⵠΔⲆΔⲆⲆΔ);
		Ⲇⵠ[ⵠ.ΔⵠⵠⵠⲆ][ⵠ.ΔΔΔ].push(ΔⲆ.ᐃᐃⲆⲆⲆΔΔᐃᐃ);
		Ⲇⵠ[ⵠ.ΔⵠⵠⵠⲆ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔΔᐃⵠΔΔᐃΔᐃ);
		Ⲇⵠ[ⵠ.ΔⵠⵠⵠⲆ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ΔᐃᐃᐃⲆⵠᐃΔⵠ);
		Ⲇⵠ[ⵠ.ΔⵠⵠⵠⲆ][ⵠ.ⵠᐃⲆ].push(ΔⲆ.ᐃⵠⵠΔΔᐃⵠΔⵠ);
		Δⵠⵠⵠ["g"] = [];
		Δⵠⵠⵠ["g"][0] = [ΔⲆ.ⵠΔΔΔᐃΔⲆ, ΔⲆ.ⲆⲆΔᐃⲆⵠᐃ];
		Δⵠⵠⵠ["g"][ⲆⲆⲆᐃ] = Δⵠⵠⵠ["g"][ΔΔⲆⲆ];
		Δⵠⵠⵠ["g"][ΔⲆⲆⵠ] = [ΔⲆ.ⲆⲆᐃΔⲆⲆⵠ, ΔⲆ.ΔⵠⲆᐃⲆⵠΔ];
		Δⵠⵠⵠ["m"] = [];
		Δⵠⵠⵠ["m"][ⵠᐃΔ] = [ΔⲆ.ⲆⲆᐃⲆᐃΔᐃ, ΔⲆ.ᐃⵠᐃΔᐃⲆΔ];
		Δⵠⵠⵠ["m"][1] = Δⵠⵠⵠ["m"][0];
		Δⵠⵠⵠ["m"][Ⲇⵠᐃⵠ] = [ΔⲆ.ΔⲆᐃᐃΔᐃΔ, ΔⲆ.ᐃⵠΔⵠᐃⲆΔ];
		Δⵠⵠⵠ[Δ[526]] = [];
		Δⵠⵠⵠ[Δ[526]][ⵠⵠΔᐃ] = [ΔⲆ.ᐃΔⵠΔⵠⲆΔ, ΔⲆ.ᐃΔᐃⵠⲆᐃⲆ];
		Δⵠⵠⵠ[Δ[526]][ⲆⵠⲆ] = Δⵠⵠⵠ[Δ[526]][0];
		Δⵠⵠⵠ[Δ[526]][ⵠΔᐃⵠ] = Δⵠⵠⵠ[Δ[526]][0];
		Δⵠⵠⵠ[Δ[526]][3] = Δⵠⵠⵠ[Δ[526]][Δⵠⵠ];
		Δⵠⵠⵠ[Δ[526]][4] = Δⵠⵠⵠ[Δ[526]][0];
		Δⵠⵠⵠ[Δ[526]][5] = Δⵠⵠⵠ[Δ[526]][ⲆⲆⵠⲆ];
		Δⵠⵠⵠ["s"] = [];
		Δⵠⵠⵠ["s"][ᐃⲆⵠΔ] = [ΔⲆ.ᐃⵠᐃΔⵠⲆΔ, ΔⲆ.ⲆⲆΔᐃΔΔΔ];
		Δⵠⵠⵠ["s"][ⲆΔᐃΔ] = Δⵠⵠⵠ["s"][0];
		Δⵠⵠⵠ["s"][ⲆⲆᐃⲆ] = [ΔⲆ.ⲆᐃᐃΔᐃⵠΔ, ΔⲆ.ⵠⵠⲆⵠΔⵠⵠ];
		Δⵠⵠⵠ["p"] = [];
		Δⵠⵠⵠ["p"][ⵠⵠΔΔ] = [ΔⲆ.ᐃⲆⲆⵠᐃΔⵠ, ΔⲆ.ᐃⲆⲆⵠᐃΔⵠ];
		Δⵠⵠⵠ["a"] = [];
		Δⵠⵠⵠ["a"][ΔᐃΔ] = [ΔⲆ.ⵠΔΔⵠⲆⲆΔ, ΔⲆ.ΔⵠⵠⵠΔⵠⵠ];
		Δⵠⵠⵠ["a"][ΔⵠⲆ] = Δⵠⵠⵠ["a"][0];
		Δⵠⵠⵠ["a"][2] = Δⵠⵠⵠ["a"][0];
		Δⵠⵠⵠ["d"] = [];
		Δⵠⵠⵠ["d"][0] = [ΔⲆ.ᐃⵠⵠᐃΔᐃⵠ, ΔⲆ.ΔⲆⵠΔᐃⵠᐃ];
		Δⵠⵠⵠ["d"][1] = Δⵠⵠⵠ["d"][0];
		Δⵠⵠⵠ["d"][Δⵠᐃᐃ] = Δⵠⵠⵠ["d"][ⵠⵠΔΔ];
		Δⵠⵠⵠ[Δ[156]] = [];
		Δⵠⵠⵠ[Δ[156]][0] = [ΔⲆ.ΔΔᐃⵠᐃⲆⲆ, ΔⲆ.ⵠᐃⵠⵠΔⲆΔ];
		Δⵠⵠⵠ[Δ[156]][ⲆΔᐃ] = Δⵠⵠⵠ[Δ[156]][0];
		Δⵠⵠⵠ[Δ[156]][2] = Δⵠⵠⵠ[Δ[156]][ⵠⲆΔⵠ];
		Δⵠⵠⵠ["f"] = [];
		Δⵠⵠⵠ["f"][0] = [ΔⲆ.ⲆΔᐃᐃⲆⲆᐃ, ΔⲆ.ⵠⵠⲆΔᐃⵠᐃ];
		Δⵠⵠⵠ["f"][ΔⲆΔᐃ] = Δⵠⵠⵠ["f"][Δⵠⵠ];
		Δⵠⵠⵠ["f"][ⵠᐃⵠⲆ] = Δⵠⵠⵠ["f"][Ⲇᐃⵠⵠ];
		Δⵠⵠⵠ[Δ[361]] = [];
		Δⵠⵠⵠ[Δ[361]][0] = [ΔⲆ.ᐃⲆⲆΔⵠⲆᐃ, ΔⲆ.ⲆΔⲆᐃⲆᐃⲆ];
		Δⵠⵠⵠ[Δ[361]][ᐃⵠⵠ] = Δⵠⵠⵠ[Δ[361]][ᐃΔΔ];
		Δⵠⵠⵠ[Δ[361]][2] = Δⵠⵠⵠ[Δ[361]][ⵠⲆᐃ];
		Δⵠⵠⵠ["c"] = [];
		Δⵠⵠⵠ["c"][0] = [ΔⲆ.ΔᐃⲆⵠΔᐃⲆ, ΔⲆ.ΔⵠΔΔΔⲆⵠ];
		Δⵠⵠⵠ["c"][ᐃΔⵠΔ] = Δⵠⵠⵠ["c"][ⵠⵠΔᐃ];
		Δⵠⵠⵠ["c"][2] = Δⵠⵠⵠ["c"][0];
		Δⵠⵠⵠ[Δ[544]] = [];
		Δⵠⵠⵠ[Δ[544]][ⵠᐃⵠⵠ] = [ΔⲆ.ΔⲆΔⵠⲆⲆΔ, ΔⲆ.Δᐃᐃᐃⵠᐃᐃ];
		Δⵠⵠⵠ["PIRANHA"] = [ΔⲆ.ⵠΔⲆⲆⲆⵠⵠ, ΔⲆ.ᐃⵠⲆᐃᐃⲆᐃ];
		Δⵠⵠⵠ["KRAKEN"] = [ΔⲆ.ᐃⵠᐃᐃΔᐃⲆ, ΔⲆ.ⲆⵠⲆⲆΔΔΔ];
		Δⵠⵠⵠ["FOX"] = [ΔⲆ.ΔⵠΔΔⵠᐃⲆ, ΔⲆ.ᐃΔⵠⲆⲆᐃΔ];
		Δⵠⵠⵠ["WOLF"] = [ΔⲆ.ⲆᐃⵠⵠⵠⲆⵠ, ΔⲆ.ᐃⲆᐃΔᐃⵠⵠ];
		Δⵠⵠⵠ["SPIDER"] = [ΔⲆ.ᐃΔᐃᐃΔᐃⲆ, ΔⲆ.ⵠⲆΔᐃᐃⵠᐃ];
		Δⵠⵠⵠ["BEAR"] = [ΔⲆ.ⵠᐃⲆⲆⲆΔⲆ, ΔⲆ.ᐃⵠᐃΔⲆᐃᐃ];
		Δⵠⵠⵠ["CAVE"] = [ΔⲆ.ⵠᐃᐃⲆΔⲆⵠ, ΔⲆ.ⵠΔⲆᐃⵠΔⵠ];
		Δⵠⵠⵠ["MAP"] = [ΔⲆ.ⵠⲆⲆΔΔᐃⵠ, ΔⲆ.ⲆΔⲆΔΔᐃΔ];
		Δⵠⵠⵠ[Δ[383]] = [ΔⲆ.ⲆⲆᐃⵠΔⵠᐃ, ΔⲆ.ⲆᐃⵠΔⲆΔⲆ];
		Δⵠⵠⵠ[Δ[344]] = [ΔⲆ.ⲆᐃΔⲆⲆᐃⵠ, ΔⲆ.ⲆⲆᐃᐃᐃⵠⲆ];
		Δⵠⵠⵠ[Δ[437]] = [ΔⲆ.ᐃⲆᐃⵠΔΔΔ, ΔⲆ.ΔΔΔⲆᐃΔⲆ];
		Δⵠⵠⵠ[Δ[241]] = [ΔⲆ.ᐃⲆᐃⵠⲆᐃⵠ, ΔⲆ.ⲆΔΔⵠⵠᐃΔ];
		for (var ⲆΔᐃᐃΔΔⲆΔⲆ in Δⵠⵠⵠ) {
			var ⲆᐃⲆᐃⵠⵠⵠ = Δⵠⵠⵠ[ⲆΔᐃᐃΔΔⲆΔⲆ];
			for (var Δᐃ = 0; Δᐃ < ⲆᐃⲆᐃⵠⵠⵠ.length; Δᐃ++) {
				var ᐃΔΔⵠⲆⲆΔ = ⲆᐃⲆᐃⵠⵠⵠ[Δᐃ];
				if (ᐃΔΔⵠⲆⲆΔ.ΔⲆΔᐃΔⲆΔ !== ΔᐃᐃⵠⲆ) ᐃΔΔⵠⲆⲆΔ.ΔⲆΔᐃΔⲆΔ();
				else if (ᐃΔΔⵠⲆⲆΔ.length > ⵠᐃΔⲆ) {
					for (var ᐃΔⵠⵠ = ⵠⲆⵠ; ᐃΔⵠⵠ < ᐃΔΔⵠⲆⲆΔ.length; ᐃΔⵠⵠ++) {
						if (ᐃΔΔⵠⲆⲆΔ[ᐃΔⵠⵠ].ΔⲆΔᐃΔⲆΔ !== ᐃⲆᐃΔⵠ) ᐃΔΔⵠⲆⲆΔ[ᐃΔⵠⵠ].ΔⲆΔᐃΔⲆΔ()
					}
				}
			}
		}
		console.log(undefined, undefined)
	}

	function ᐃΔΔⲆⵠΔΔΔⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 376 * Ⲇ;
		ⲆⲆ.height = 371 * Ⲇ;
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(191.633544921875 * Ⲇ, 123.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 215.633544921875, Ⲇ * 85.98580932617188, Ⲇ * 187.633544921875, Ⲇ * 71.98580932617188, 202.633544921875 * Ⲇ, Ⲇ * 19.985809326171875);
		ᐃ.bezierCurveTo(231.633544921875 * Ⲇ, Ⲇ * 68.98580932617188, 253.633544921875 * Ⲇ, Ⲇ * 71.98580932617188, Ⲇ * 256.633544921875, Ⲇ * 93.98580932617188);
		ᐃ.bezierCurveTo(306.633544921875 * Ⲇ, Ⲇ * 64.98580932617188, Ⲇ * 319.633544921875, 61.985809326171875 * Ⲇ, 350.633544921875 * Ⲇ, 58.985809326171875 * Ⲇ);
		ᐃ.bezierCurveTo(280.633544921875 * Ⲇ, 86.98580932617188 * Ⲇ, 281.633544921875 * Ⲇ, Ⲇ * 106.98580932617188, 268.633544921875 * Ⲇ, 130.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(295.633544921875 * Ⲇ, Ⲇ * 158.98580932617188, 328.633544921875 * Ⲇ, 155.98580932617188 * Ⲇ, 353.633544921875 * Ⲇ, Ⲇ * 90.98580932617188);
		ᐃ.bezierCurveTo(371.633544921875 * Ⲇ, Ⲇ * 158.98580932617188, Ⲇ * 337.633544921875, Ⲇ * 210.98580932617188, 286.633544921875 * Ⲇ, Ⲇ * 209.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 323.633544921875, Ⲇ * 230.98580932617188, 317.633544921875 * Ⲇ, Ⲇ * 274.9858093261719, Ⲇ * 356.633544921875, Ⲇ * 305.9858093261719);
		ᐃ.bezierCurveTo(288.633544921875 * Ⲇ, Ⲇ * 297.9858093261719, 288.633544921875 * Ⲇ, 265.9858093261719 * Ⲇ, Ⲇ * 275.633544921875, Ⲇ * 266.9858093261719);
		ᐃ.bezierCurveTo(280.633544921875 * Ⲇ, Ⲇ * 294.9858093261719, Ⲇ * 315.633544921875, Ⲇ * 306.9858093261719, 336.633544921875 * Ⲇ, Ⲇ * 316.9858093261719);
		ᐃ.bezierCurveTo(295.633544921875 * Ⲇ, Ⲇ * 318.9858093261719, 264.633544921875 * Ⲇ, Ⲇ * 302.9858093261719, 254.633544921875 * Ⲇ, Ⲇ * 289.9858093261719);
		ᐃ.bezierCurveTo(Ⲇ * 252.633544921875, Ⲇ * 301.9858093261719, Ⲇ * 224.633544921875, Ⲇ * 315.9858093261719, Ⲇ * 201.633544921875, 356.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(195.633544921875 * Ⲇ, Ⲇ * 313.9858093261719, 195.633544921875 * Ⲇ, 308.9858093261719 * Ⲇ, 196.633544921875 * Ⲇ, Ⲇ * 307.9858093261719);
		ᐃ.bezierCurveTo(Ⲇ * 197.633544921875, 289.9858093261719 * Ⲇ, Ⲇ * 207.633544921875, 283.9858093261719 * Ⲇ, 195.633544921875 * Ⲇ, 258.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 182.633544921875, Ⲇ * 282.9858093261719, Ⲇ * 190.633544921875, Ⲇ * 287.9858093261719, 193.633544921875 * Ⲇ, 297.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(195.633544921875 * Ⲇ, Ⲇ * 306.9858093261719, 191.633544921875 * Ⲇ, 334.9858093261719 * Ⲇ, Ⲇ * 187.633544921875, 354.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(165.633544921875 * Ⲇ, Ⲇ * 320.9858093261719, 138.633544921875 * Ⲇ, Ⲇ * 307.9858093261719, Ⲇ * 135.633544921875, 288.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(110.633544921875 * Ⲇ, Ⲇ * 318.9858093261719, Ⲇ * 68.633544921875, Ⲇ * 323.9858093261719, 49.633544921875 * Ⲇ, Ⲇ * 320.9858093261719);
		ᐃ.bezierCurveTo(Ⲇ * 88.633544921875, Ⲇ * 308.9858093261719, 108.633544921875 * Ⲇ, Ⲇ * 284.9858093261719, 118.633544921875 * Ⲇ, 258.9858093261719 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 86.633544921875, 264.9858093261719 * Ⲇ, Ⲇ * 75.633544921875, 310.9858093261719 * Ⲇ, Ⲇ * 19.633544921875, Ⲇ * 304.9858093261719);
		ᐃ.bezierCurveTo(54.633544921875 * Ⲇ, Ⲇ * 276.9858093261719, Ⲇ * 59.633544921875, 214.98580932617188 * Ⲇ, 105.633544921875 * Ⲇ, 205.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 14.633544921875, 201.98580932617188 * Ⲇ, Ⲇ * 24.633544921875, 141.98580932617188 * Ⲇ, Ⲇ * 25.633544921875, 82.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(49.633544921875 * Ⲇ, Ⲇ * 168.98580932617188, 87.633544921875 * Ⲇ, 141.98580932617188 * Ⲇ, 112.633544921875 * Ⲇ, 123.98580932617188 * Ⲇ);
		ᐃ.bezierCurveTo(95.633544921875 * Ⲇ, 75.98580932617188 * Ⲇ, Ⲇ * 70.633544921875, Ⲇ * 68.98580932617188, 35.633544921875 * Ⲇ, 50.985809326171875 * Ⲇ);
		ᐃ.bezierCurveTo(70.633544921875 * Ⲇ, Ⲇ * 53.985809326171875, 102.633544921875 * Ⲇ, Ⲇ * 65.98580932617188, Ⲇ * 125.633544921875, Ⲇ * 84.98580932617188);
		ᐃ.bezierCurveTo(Ⲇ * 133.633544921875, Ⲇ * 69.98580932617188, Ⲇ * 166.633544921875, 42.985809326171875 * Ⲇ, Ⲇ * 176.633544921875, Ⲇ * 21.985809326171875);
		ᐃ.bezierCurveTo(185.633544921875 * Ⲇ, Ⲇ * 49.985809326171875, 168.633544921875 * Ⲇ, 95.98580932617188 * Ⲇ, 191.633544921875 * Ⲇ, 121.98580932617188 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], Ⲇ * 12);
		return ⲆⲆ
	}

	function ΔⲆᐃΔⲆⲆᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 345 * Ⲇ;
		ⲆⲆ.height = 250 * Ⲇ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(105 * Ⲇ, Ⲇ * 58);
		ᐃ.bezierCurveTo(100.5 * Ⲇ, 43 * Ⲇ, 100.5 * Ⲇ, Ⲇ * 43, Ⲇ * 96, 28 * Ⲇ);
		ᐃ.bezierCurveTo(119.5 * Ⲇ, 33.5 * Ⲇ, Ⲇ * 119.5, 33.5 * Ⲇ, Ⲇ * 143, Ⲇ * 39);
		ᐃ.bezierCurveTo(Ⲇ * 170, 37 * Ⲇ, 177 * Ⲇ, 37 * Ⲇ, 188 * Ⲇ, Ⲇ * 40);
		ᐃ.bezierCurveTo(213 * Ⲇ, 33.5 * Ⲇ, 213 * Ⲇ, 33.5 * Ⲇ, 238 * Ⲇ, 27 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 231, 52 * Ⲇ, 234 * Ⲇ, Ⲇ * 42.5, 230 * Ⲇ, Ⲇ * 58);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ⲆᐃⵠⲆⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(108 * Ⲇ, Ⲇ * 51);
		ᐃ.bezierCurveTo(Ⲇ * 91, Ⲇ * 55, 85 * Ⲇ, 44 * Ⲇ, 86 * Ⲇ, Ⲇ * 29);
		ᐃ.bezierCurveTo(62 * Ⲇ, Ⲇ * 50, Ⲇ * 78, 69 * Ⲇ, Ⲇ * 92, 75 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⲆᐃ], ᐃⲆ[ᐃᐃΔΔ], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 249, 27 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 273, Ⲇ * 49, Ⲇ * 262, Ⲇ * 68, 246 * Ⲇ, 77 * Ⲇ);
		ᐃ.bezierCurveTo(231 * Ⲇ, Ⲇ * 59, Ⲇ * 236, 66.5 * Ⲇ, Ⲇ * 226, 56 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 243, 53 * Ⲇ, 252 * Ⲇ, Ⲇ * 43, Ⲇ * 249, 28 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ], ᐃⲆ[ΔⵠⲆⵠⲆ], Ⲇ * ⲆᐃⵠᐃⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 87, 78 * Ⲇ);
		ᐃ.bezierCurveTo(87 * Ⲇ, Ⲇ * 59, Ⲇ * 98, 46 * Ⲇ, Ⲇ * 127, Ⲇ * 48);
		ᐃ.bezierCurveTo(176 * Ⲇ, Ⲇ * 48.5, Ⲇ * 176, Ⲇ * 48.5, 225 * Ⲇ, Ⲇ * 49);
		ᐃ.bezierCurveTo(Ⲇ * 243, 49 * Ⲇ, Ⲇ * 253, Ⲇ * 59, Ⲇ * 253, Ⲇ * 76);
		ᐃ.bezierCurveTo(Ⲇ * 211, 85.5 * Ⲇ, Ⲇ * 211, Ⲇ * 85.5, Ⲇ * 169, 95 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5], ᐃⲆ[6], ΔΔⵠⵠⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 56, 105 * Ⲇ);
		ᐃ.bezierCurveTo(56 * Ⲇ, 92 * Ⲇ, Ⲇ * 59, 86 * Ⲇ, 65 * Ⲇ, Ⲇ * 73);
		ᐃ.bezierCurveTo(Ⲇ * 62.5, Ⲇ * 61.5, Ⲇ * 62.5, 61.5 * Ⲇ, 60 * Ⲇ, 50 * Ⲇ);
		ᐃ.bezierCurveTo(99.5 * Ⲇ, Ⲇ * 64.5, 99.5 * Ⲇ, Ⲇ * 64.5, Ⲇ * 139, Ⲇ * 79);
		ᐃ.bezierCurveTo(164 * Ⲇ, 77 * Ⲇ, 177 * Ⲇ, Ⲇ * 76, Ⲇ * 203, 78 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 242, Ⲇ * 63.5, Ⲇ * 242, Ⲇ * 63.5, Ⲇ * 281, Ⲇ * 49);
		ᐃ.bezierCurveTo(Ⲇ * 279, 60.5 * Ⲇ, 279 * Ⲇ, Ⲇ * 60.5, Ⲇ * 277, 72 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 286, Ⲇ * 88, 286 * Ⲇ, 96 * Ⲇ, Ⲇ * 287, 104 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 228.5, Ⲇ * 127, 228.5 * Ⲇ, Ⲇ * 127, Ⲇ * 170, 150 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆⲆᐃ], ᐃⲆ[2], Ⲇ * ΔΔⵠⵠⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(48 * Ⲇ, 130 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 61, 155 * Ⲇ, 63 * Ⲇ, Ⲇ * 165, 56 * Ⲇ, 171 * Ⲇ);
		ᐃ.bezierCurveTo(48 * Ⲇ, 177 * Ⲇ, Ⲇ * 40, 171 * Ⲇ, Ⲇ * 38, 178 * Ⲇ);
		ᐃ.bezierCurveTo(33 * Ⲇ, Ⲇ * 180, Ⲇ * 37, 188 * Ⲇ, 47 * Ⲇ, Ⲇ * 208);
		ᐃ.bezierCurveTo(Ⲇ * 52, 221 * Ⲇ, 55 * Ⲇ, Ⲇ * 222, 75 * Ⲇ, Ⲇ * 229);
		ᐃ.bezierCurveTo(Ⲇ * 91, 213 * Ⲇ, Ⲇ * 98, 212 * Ⲇ, 112 * Ⲇ, Ⲇ * 219);
		ᐃ.bezierCurveTo(Ⲇ * 167, 225 * Ⲇ, 187 * Ⲇ, 224 * Ⲇ, Ⲇ * 222, Ⲇ * 220);
		ᐃ.bezierCurveTo(244 * Ⲇ, Ⲇ * 214, Ⲇ * 247, Ⲇ * 213, Ⲇ * 263, 229 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 295, Ⲇ * 220, Ⲇ * 291, Ⲇ * 215, 301 * Ⲇ, Ⲇ * 194);
		ᐃ.bezierCurveTo(Ⲇ * 308, Ⲇ * 178, Ⲇ * 309, Ⲇ * 176, 302 * Ⲇ, 173 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 290, Ⲇ * 177, 289 * Ⲇ, Ⲇ * 177, Ⲇ * 283, Ⲇ * 169);
		ᐃ.bezierCurveTo(279 * Ⲇ, 163 * Ⲇ, Ⲇ * 279, Ⲇ * 161, Ⲇ * 290, Ⲇ * 130);
		ᐃ.bezierCurveTo(Ⲇ * 270, Ⲇ * 127, 270 * Ⲇ, 127 * Ⲇ, Ⲇ * 250, Ⲇ * 124);
		ᐃ.bezierCurveTo(Ⲇ * 209, Ⲇ * 137.5, 209 * Ⲇ, Ⲇ * 137.5, 168 * Ⲇ, Ⲇ * 151);
		ᐃ.bezierCurveTo(Ⲇ * 121, 135 * Ⲇ, Ⲇ * 121, Ⲇ * 135, 74 * Ⲇ, 119 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ⲆᐃᐃΔ], Ⲇ * ᐃⵠΔⲆΔΔⵠ);
		ᐃ.globalCompositeOperation = Δ[289];
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(133 * Ⲇ, Ⲇ * 158);
		ᐃ.bezierCurveTo(152 * Ⲇ, 193 * Ⲇ, 158 * Ⲇ, 205 * Ⲇ, 140 * Ⲇ, 203 * Ⲇ);
		ᐃ.bezierCurveTo(99 * Ⲇ, 195 * Ⲇ, Ⲇ * 96, 189 * Ⲇ, 86 * Ⲇ, Ⲇ * 173);
		ᐃ.bezierCurveTo(80 * Ⲇ, 159 * Ⲇ, Ⲇ * 88, 145 * Ⲇ, Ⲇ * 104, 141 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[7], ᐃⲆ[ⵠΔᐃᐃΔ], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 215, 146 * Ⲇ);
		ᐃ.bezierCurveTo(204 * Ⲇ, Ⲇ * 167, Ⲇ * 204, 167 * Ⲇ, 193 * Ⲇ, Ⲇ * 188);
		ᐃ.bezierCurveTo(Ⲇ * 187, 201 * Ⲇ, Ⲇ * 191, Ⲇ * 209, Ⲇ * 213, Ⲇ * 201);
		ᐃ.bezierCurveTo(Ⲇ * 247, Ⲇ * 192, Ⲇ * 253, Ⲇ * 181, 257 * Ⲇ, 169 * Ⲇ);
		ᐃ.bezierCurveTo(260 * Ⲇ, Ⲇ * 157, 254 * Ⲇ, Ⲇ * 149, 243 * Ⲇ, Ⲇ * 141);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔⲆⲆ], ᐃⲆ[ⲆΔΔⲆⵠ], Ⲇ * ⲆᐃⲆⵠⲆ);
		ᐃ.globalCompositeOperation = Δ[394];
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(133 * Ⲇ, 158 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 152, Ⲇ * 193, Ⲇ * 158, 205 * Ⲇ, 140 * Ⲇ, Ⲇ * 203);
		ᐃ.bezierCurveTo(Ⲇ * 99, 195 * Ⲇ, Ⲇ * 96, 189 * Ⲇ, Ⲇ * 86, 173 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 80, 159 * Ⲇ, 88 * Ⲇ, 145 * Ⲇ, 104 * Ⲇ, Ⲇ * 141);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[8], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(215 * Ⲇ, Ⲇ * 146);
		ᐃ.bezierCurveTo(204 * Ⲇ, Ⲇ * 167, Ⲇ * 204, 167 * Ⲇ, 193 * Ⲇ, 188 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 187, Ⲇ * 201, 191 * Ⲇ, 209 * Ⲇ, 213 * Ⲇ, Ⲇ * 201);
		ᐃ.bezierCurveTo(247 * Ⲇ, Ⲇ * 192, Ⲇ * 253, Ⲇ * 181, Ⲇ * 257, 169 * Ⲇ);
		ᐃ.bezierCurveTo(260 * Ⲇ, Ⲇ * 157, Ⲇ * 254, 149 * Ⲇ, Ⲇ * 243, 141 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆⲆΔᐃⵠ, ᐃⲆ[ⲆⲆΔᐃΔ], ᐃΔⲆΔⲆᐃᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 39, Ⲇ * 66);
		ᐃ.bezierCurveTo(57 * Ⲇ, 107 * Ⲇ, Ⲇ * 63, Ⲇ * 96, Ⲇ * 120, 106 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 154, 112 * Ⲇ, Ⲇ * 163, 116 * Ⲇ, 174 * Ⲇ, 135 * Ⲇ);
		ᐃ.bezierCurveTo(180 * Ⲇ, Ⲇ * 109, Ⲇ * 191, 113 * Ⲇ, 237 * Ⲇ, Ⲇ * 103);
		ᐃ.bezierCurveTo(276 * Ⲇ, Ⲇ * 100, Ⲇ * 289, Ⲇ * 94, 301 * Ⲇ, Ⲇ * 67);
		ᐃ.bezierCurveTo(Ⲇ * 317, 112 * Ⲇ, 301 * Ⲇ, 141 * Ⲇ, 274 * Ⲇ, 139 * Ⲇ);
		ᐃ.bezierCurveTo(204 * Ⲇ, 166 * Ⲇ, 197 * Ⲇ, Ⲇ * 169, Ⲇ * 173, 183 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 170, Ⲇ * 183, Ⲇ * 170, 183 * Ⲇ, Ⲇ * 167, 183 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 132, Ⲇ * 160, 112 * Ⲇ, Ⲇ * 156, 73 * Ⲇ, Ⲇ * 141);
		ᐃ.bezierCurveTo(43 * Ⲇ, 146 * Ⲇ, Ⲇ * 27, Ⲇ * 120, Ⲇ * 39, Ⲇ * 66);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[7], ᐃⲆ[8], ⵠΔᐃᐃΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 115, Ⲇ * 185);
		ᐃ.bezierCurveTo(115 * Ⲇ, 200 * Ⲇ, 118 * Ⲇ, Ⲇ * 206, Ⲇ * 124, Ⲇ * 212);
		ᐃ.bezierCurveTo(133 * Ⲇ, Ⲇ * 223, Ⲇ * 132, Ⲇ * 231, Ⲇ * 121, Ⲇ * 230);
		ᐃ.bezierCurveTo(Ⲇ * 108, Ⲇ * 226, Ⲇ * 108, Ⲇ * 215, Ⲇ * 107, Ⲇ * 209);
		ᐃ.bezierCurveTo(Ⲇ * 106, Ⲇ * 201, Ⲇ * 110, 196 * Ⲇ, Ⲇ * 114, 185 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠΔ], ᐃⲆ[ⵠⲆⲆΔΔ], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 226, 186 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 234, 201 * Ⲇ, Ⲇ * 238, Ⲇ * 209, 228 * Ⲇ, Ⲇ * 225);
		ᐃ.bezierCurveTo(Ⲇ * 223, 233 * Ⲇ, 213 * Ⲇ, Ⲇ * 233, 211 * Ⲇ, 226 * Ⲇ);
		ᐃ.bezierCurveTo(206 * Ⲇ, 219 * Ⲇ, 217 * Ⲇ, 216 * Ⲇ, Ⲇ * 221, Ⲇ * 207);
		ᐃ.bezierCurveTo(225 * Ⲇ, Ⲇ * 196, 225 * Ⲇ, 191 * Ⲇ, Ⲇ * 226, 186 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ᐃᐃᐃΔⵠ], Ⲇ * ⲆΔⵠΔⲆⵠᐃ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(172 * Ⲇ, 110 * Ⲇ);
		ᐃ.bezierCurveTo(189 * Ⲇ, 153 * Ⲇ, 192 * Ⲇ, Ⲇ * 160, Ⲇ * 188, 175 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 183, 190 * Ⲇ, Ⲇ * 176, Ⲇ * 197, 165 * Ⲇ, Ⲇ * 191);
		ᐃ.bezierCurveTo(Ⲇ * 153, Ⲇ * 181, 152 * Ⲇ, Ⲇ * 166, Ⲇ * 157, 151 * Ⲇ);
		ᐃ.bezierCurveTo(164.5 * Ⲇ, 131 * Ⲇ, 164.5 * Ⲇ, Ⲇ * 131, 172 * Ⲇ, 111 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[4], 8 * Ⲇ);
		return ⲆⲆ
	}

	function ⲆⲆΔⵠⲆⲆΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 43;
		ⲆⲆ.height = Ⲇ * 209;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(ⵠΔⵠⲆ, 10 * Ⲇ);
		ᐃ.translate(5 * Ⲇ, Ⲇ * 5);
		ᐃ.save();
		ᐃ.translate(21 * Ⲇ, 102.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, -4 * Ⲇ, -76.5 * Ⲇ, ⲆᐃⲆⵠⲆ * Ⲇ, 163 * Ⲇ, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(ⵠΔⵠⲆ, ᐃⵠᐃᐃᐃ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ⲆⵠⵠΔⵠ, 10 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 25, Ⲇ * 25.5, 25 * Ⲇ, 25.5 * Ⲇ, Ⲇ * 30, 41 * Ⲇ);
		ᐃ.bezierCurveTo(25.5 * Ⲇ, Ⲇ * 38.5, Ⲇ * 25.5, Ⲇ * 38.5, 21 * Ⲇ, Ⲇ * 36);
		ᐃ.bezierCurveTo(Ⲇ * ΔᐃⵠΔⵠ, Ⲇ * 38.5, 16 * Ⲇ, Ⲇ * 38.5, Ⲇ * 11, Ⲇ * 41);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(21 * Ⲇ, 1 * Ⲇ);
		ᐃ.bezierCurveTo(28 * Ⲇ, Ⲇ * ΔⲆⲆⲆΔᐃⵠ, Ⲇ * 28, ⲆΔᐃΔΔ * Ⲇ, 35 * Ⲇ, 35 * Ⲇ);
		ᐃ.bezierCurveTo(28.5 * Ⲇ, Ⲇ * 32, Ⲇ * 28.5, Ⲇ * 32, Ⲇ * 22, 29 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 14.5, 32.5 * Ⲇ, Ⲇ * 14.5, Ⲇ * 32.5, ᐃΔⵠⲆΔ * Ⲇ, 36 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇᐃⵠⵠ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(14 * Ⲇ, Ⲇ * 146);
		ᐃ.bezierCurveTo(Ⲇ * 21, Ⲇ * 146, Ⲇ * 21, 146 * Ⲇ, 28 * Ⲇ, 146 * Ⲇ);
		ᐃ.bezierCurveTo(27.5 * Ⲇ, Ⲇ * 147.5, Ⲇ * 27.5, 147.5 * Ⲇ, 27 * Ⲇ, Ⲇ * 149);
		ᐃ.bezierCurveTo(Ⲇ * 27, 160 * Ⲇ, Ⲇ * 27, Ⲇ * 160, Ⲇ * 27, Ⲇ * 171);
		ᐃ.bezierCurveTo(Ⲇ * 27.5, Ⲇ * 171.5, 27.5 * Ⲇ, Ⲇ * 171.5, Ⲇ * 28, 172 * Ⲇ);
		ᐃ.bezierCurveTo(21 * Ⲇ, 172 * Ⲇ, Ⲇ * 21, 172 * Ⲇ, 14 * Ⲇ, Ⲇ * 172);
		ᐃ.bezierCurveTo(14 * Ⲇ, Ⲇ * 171.5, Ⲇ * 14, 171.5 * Ⲇ, 14 * Ⲇ, Ⲇ * 171);
		ᐃ.bezierCurveTo(Ⲇ * 14.5, 171.5 * Ⲇ, 14.5 * Ⲇ, 171.5 * Ⲇ, 15 * Ⲇ, 172 * Ⲇ);
		ᐃ.bezierCurveTo(15 * Ⲇ, Ⲇ * 160.5, Ⲇ * 15, 160.5 * Ⲇ, Ⲇ * 15, Ⲇ * 149);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(21 * Ⲇ, ᐃΔⲆⵠⵠ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 26.5, Ⲇ * 18.5, 26.5 * Ⲇ, 18.5 * Ⲇ, 32 * Ⲇ, 31 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 27, 29 * Ⲇ, 27 * Ⲇ, 29 * Ⲇ, Ⲇ * 22, Ⲇ * 27);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(0, -ΔⲆᐃⲆⲆ * Ⲇ);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(0, 10 * Ⲇ);
		ᐃ.translate(Ⲇ * -ⵠΔΔΔ, -ⲆⲆⲆᐃᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(21 * Ⲇ, Ⲇ * 102.5);
		ᐃᐃᐃ(ᐃ, -4 * Ⲇ, Ⲇ * -76.5, ⲆΔΔⲆⵠ * Ⲇ, 163 * Ⲇ, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], ⲆΔⲆᐃΔ * Ⲇ);
		ᐃ.translate(ᐃⲆⵠΔ, Ⲇ * ⵠⲆΔΔⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ᐃᐃⵠⵠⲆⲆⲆ * Ⲇ, Ⲇ * ᐃⲆⵠΔΔ);
		ᐃ.bezierCurveTo(25 * Ⲇ, 25.5 * Ⲇ, Ⲇ * 25, Ⲇ * 25.5, 30 * Ⲇ, 41 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 25.5, 38.5 * Ⲇ, Ⲇ * 25.5, Ⲇ * 38.5, Ⲇ * 21, Ⲇ * 36);
		ᐃ.bezierCurveTo(Ⲇ * ᐃΔⲆⲆⲆ, Ⲇ * 38.5, Ⲇ * 16, Ⲇ * 38.5, 11 * Ⲇ, 41 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠᐃⲆ], ᐃⲆ[ᐃᐃⲆⵠ], ΔᐃΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(21 * Ⲇ, Ⲇ * 1);
		ᐃ.bezierCurveTo(Ⲇ * 28, Ⲇ * 18, 28 * Ⲇ, Ⲇ * ⲆᐃΔΔⵠ, Ⲇ * 35, Ⲇ * 35);
		ᐃ.bezierCurveTo(28.5 * Ⲇ, Ⲇ * 32, 28.5 * Ⲇ, 32 * Ⲇ, Ⲇ * 22, Ⲇ * 29);
		ᐃ.bezierCurveTo(14.5 * Ⲇ, Ⲇ * 32.5, Ⲇ * 14.5, 32.5 * Ⲇ, ᐃΔᐃⲆᐃ * Ⲇ, Ⲇ * 36);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃᐃΔᐃ], ᐃⲆ[6], 4 * Ⲇ);
		ᐃ.translate(ΔΔⲆⲆ, Ⲇ * ⵠⵠΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ΔⲆᐃⲆⵠᐃⵠ, 146 * Ⲇ);
		ᐃ.bezierCurveTo(21 * Ⲇ, Ⲇ * 146, 21 * Ⲇ, Ⲇ * 146, 28 * Ⲇ, Ⲇ * 146);
		ᐃ.bezierCurveTo(27.5 * Ⲇ, 147.5 * Ⲇ, 27.5 * Ⲇ, Ⲇ * 147.5, 27 * Ⲇ, Ⲇ * 149);
		ᐃ.bezierCurveTo(Ⲇ * 27, 160 * Ⲇ, Ⲇ * 27, Ⲇ * 160, 27 * Ⲇ, 171 * Ⲇ);
		ᐃ.bezierCurveTo(27.5 * Ⲇ, Ⲇ * 171.5, Ⲇ * 27.5, 171.5 * Ⲇ, 28 * Ⲇ, Ⲇ * 172);
		ᐃ.bezierCurveTo(Ⲇ * 21, Ⲇ * 172, 21 * Ⲇ, 172 * Ⲇ, Ⲇ * 14, 172 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ᐃⵠⲆⵠΔ, 171.5 * Ⲇ, Ⲇ * ΔᐃⵠⲆᐃⵠᐃ, 171.5 * Ⲇ, ᐃⲆᐃⲆΔ * Ⲇ, 171 * Ⲇ);
		ᐃ.bezierCurveTo(14.5 * Ⲇ, Ⲇ * 171.5, 14.5 * Ⲇ, Ⲇ * 171.5, 15 * Ⲇ, Ⲇ * 172);
		ᐃ.bezierCurveTo(15 * Ⲇ, Ⲇ * 160.5, 15 * Ⲇ, 160.5 * Ⲇ, ΔⲆΔⵠⲆ * Ⲇ, 149 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⵠⲆ], ᐃⲆ[ⵠΔᐃⵠ], Ⲇ * ΔⵠⲆⵠⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(21 * Ⲇ, Ⲇ * ⲆⵠᐃΔᐃ);
		ᐃ.bezierCurveTo(Ⲇ * 26.5, Ⲇ * 18.5, Ⲇ * 26.5, Ⲇ * 18.5, Ⲇ * 32, 31 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 27, Ⲇ * 29, 27 * Ⲇ, 29 * Ⲇ, 22 * Ⲇ, 27 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠᐃⵠ]);
		return ⲆⲆ
	}

	function ΔⵠⵠΔΔⵠⵠⲆᐃ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 496;
		ⲆⲆ.height = Ⲇ * 520;
		ᐃ.globalAlpha = ⵠⵠⵠΔ;
		ᐃ.translate(0, Ⲇ * -ⲆᐃⲆⲆᐃ);
		ᐃΔⵠ(ᐃ, 247.01138305664062 * Ⲇ, 250.13068389892578 * Ⲇ, Ⲇ * 232.81967270830015);
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], Ⲇ * ⵠⵠΔⵠⵠΔᐃ);
		ᐃ.globalCompositeOperation = Δ[289];
		ᐃΔⵠ(ᐃ, 247.01138305664062 * Ⲇ, 249.3125 * Ⲇ, 161.4465855941215 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], 14 * Ⲇ);
		ᐃ.globalCompositeOperation = Δ[394];
		return ⲆⲆ
	}

	function ⲆⵠᐃⵠΔⵠⲆ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 147;
		ⲆⲆ.height = 172 * Ⲇ;
		ᐃ.globalAlpha = .5;
		ᐃ.translate(0, ⲆΔΔⲆⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ᐃⵠΔⲆΔΔⵠ * Ⲇ, 50 * Ⲇ);
		ᐃ.bezierCurveTo(15 * Ⲇ, 16 * Ⲇ, 49 * Ⲇ, 6 * Ⲇ, 67 * Ⲇ, Ⲇ * ᐃⲆⵠⲆⲆ);
		ᐃ.bezierCurveTo(Ⲇ * 121, ⵠⵠᐃΔ * Ⲇ, Ⲇ * 128, 32 * Ⲇ, Ⲇ * 135, Ⲇ * 48);
		ᐃ.bezierCurveTo(Ⲇ * 146, Ⲇ * 96, 124 * Ⲇ, Ⲇ * 131, Ⲇ * 96, 135 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 96, Ⲇ * 158, 79 * Ⲇ, Ⲇ * 156, 75 * Ⲇ, 156 * Ⲇ);
		ᐃ.bezierCurveTo(50 * Ⲇ, Ⲇ * 154, Ⲇ * 53, Ⲇ * 150, 52 * Ⲇ, 135 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * ⲆⲆᐃⲆ, Ⲇ * 127, Ⲇ * ᐃᐃΔⵠ, 87 * Ⲇ, Ⲇ * ΔⲆΔⲆⲆ, 50 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(Δⵠⵠ, Ⲇ * -ⲆᐃⵠᐃⲆ);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(8 * Ⲇ, Ⲇ * 50);
		ᐃ.bezierCurveTo(ⵠΔΔΔⲆᐃΔ * Ⲇ, 16 * Ⲇ, 49 * Ⲇ, Ⲇ * ΔⵠⵠⵠΔ, 67 * Ⲇ, ⲆⵠᐃΔᐃ * Ⲇ);
		ᐃ.bezierCurveTo(121 * Ⲇ, Ⲇ * ΔⵠᐃⲆ, Ⲇ * 128, 32 * Ⲇ, 135 * Ⲇ, 48 * Ⲇ);
		ᐃ.bezierCurveTo(146 * Ⲇ, Ⲇ * 96, Ⲇ * 124, 131 * Ⲇ, Ⲇ * 96, 135 * Ⲇ);
		ᐃ.bezierCurveTo(96 * Ⲇ, 158 * Ⲇ, Ⲇ * 79, Ⲇ * 156, Ⲇ * 75, Ⲇ * 156);
		ᐃ.bezierCurveTo(50 * Ⲇ, Ⲇ * 154, 53 * Ⲇ, Ⲇ * 150, Ⲇ * 52, Ⲇ * 135);
		ᐃ.bezierCurveTo(Ⲇⵠᐃⵠ * Ⲇ, Ⲇ * 127, ΔⵠᐃⲆ * Ⲇ, Ⲇ * 87, 8 * Ⲇ, 50 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆ], ᐃⲆ[ⲆⲆΔΔ], ΔᐃΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(ΔᐃⵠⲆᐃⵠᐃ * Ⲇ, 57 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * Ⲇⵠᐃⵠ, Ⲇ * 50, 5 * Ⲇ, Ⲇ * 22, Ⲇ * 24, Ⲇ * 22);
		ᐃ.bezierCurveTo(41 * Ⲇ, 21 * Ⲇ, 54 * Ⲇ, 32 * Ⲇ, 55 * Ⲇ, Ⲇ * 48);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔᐃ], ᐃⲆ[ⲆᐃᐃΔ], ΔᐃΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(93 * Ⲇ, 47 * Ⲇ);
		ᐃ.bezierCurveTo(94 * Ⲇ, 24 * Ⲇ, 116 * Ⲇ, 21 * Ⲇ, Ⲇ * 120, 20 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 144, ᐃⵠⲆΔᐃΔⲆ * Ⲇ, 146 * Ⲇ, 52 * Ⲇ, 133 * Ⲇ, Ⲇ * 58);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆΔᐃ], ᐃⲆ[2], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, Ⲇ * 51, Ⲇ * 91, Ⲇ * ⵠΔⲆᐃⲆ);
		ᐃⵠ(ᐃ, ᐃⲆ[3]);
		ᐃΔⵠ(ᐃ, 95 * Ⲇ, Ⲇ * 91, ⲆⲆᐃⵠΔⲆᐃ * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆⲆ]);
		ᐃΔⵠ(ᐃ, Ⲇ * 91, 89 * Ⲇ, 4 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃΔⵠ(ᐃ, Ⲇ * 47, Ⲇ * 89, Ⲇ * ⵠᐃΔΔΔ);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(54 * Ⲇ, 133 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 56, Ⲇ * 108, Ⲇ * 64, 99 * Ⲇ, Ⲇ * 73, Ⲇ * 98);
		ᐃ.bezierCurveTo(Ⲇ * 86, 97 * Ⲇ, 91 * Ⲇ, 119 * Ⲇ, Ⲇ * 93, Ⲇ * 133);
		ᐃ.bezierCurveTo(94 * Ⲇ, 155 * Ⲇ, Ⲇ * 90, Ⲇ * 150, 74 * Ⲇ, Ⲇ * 155);
		ᐃ.bezierCurveTo(Ⲇ * 50, 152 * Ⲇ, 55 * Ⲇ, 145 * Ⲇ, Ⲇ * 54, Ⲇ * 134);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(65.25 * Ⲇ, 135 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 75.25, 128 * Ⲇ, Ⲇ * 83.25, 133 * Ⲇ, Ⲇ * 83.25, Ⲇ * 138);
		ᐃ.bezierCurveTo(Ⲇ * 88.25, Ⲇ * 148, Ⲇ * 61.25, 149 * Ⲇ, Ⲇ * 64.25, Ⲇ * 137);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(74 * Ⲇ, Ⲇ * 145);
		ᐃ.bezierCurveTo(74 * Ⲇ, Ⲇ * 148, Ⲇ * 74, Ⲇ * 148, Ⲇ * 74, Ⲇ * 151);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ⵠΔΔⲆΔ], Ⲇ * 2);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(19 * Ⲇ, Ⲇ * 58);
		ᐃ.bezierCurveTo(10 * Ⲇ, Ⲇ * 38, ᐃᐃⲆᐃᐃΔⲆ * Ⲇ, Ⲇ * 33, 28 * Ⲇ, Ⲇ * 34);
		ᐃ.bezierCurveTo(41 * Ⲇ, Ⲇ * 39, 45 * Ⲇ, 45 * Ⲇ, Ⲇ * 50, Ⲇ * 51);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 100, 51 * Ⲇ);
		ᐃ.bezierCurveTo(106 * Ⲇ, Ⲇ * 36, 119 * Ⲇ, 31 * Ⲇ, Ⲇ * 128, Ⲇ * 36);
		ᐃ.bezierCurveTo(Ⲇ * 137, 49 * Ⲇ, 128 * Ⲇ, Ⲇ * 58, 128 * Ⲇ, 60 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃᐃⵠᐃ]);
		return ⲆⲆ
	}

	function ΔⵠΔⵠⲆⵠΔ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 168;
		ⲆⲆ.height = 100 * Ⲇ;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆⵠⲆ;
		ᐃ.translate(Ⲇ * 10, 5 * Ⲇ);
		ᐃ.save();
		ᐃ.translate(24.5 * Ⲇ, 44.30000305175781 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -19.5, Ⲇ * -8.5, Ⲇ * 39, ⲆᐃⵠⲆΔΔⵠ * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 115, Ⲇ * 37.80000305175781);
		ᐃ.bezierCurveTo(Ⲇ * 142, Ⲇ * 37.80000305175781, Ⲇ * 140, Ⲇ * 37.80000305175781, 141 * Ⲇ, 37.80000305175781 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 147, 28.800003051757812 * Ⲇ, Ⲇ * 149, Ⲇ * 26.800003051757812, 153 * Ⲇ, Ⲇ * 32.80000305175781);
		ᐃ.bezierCurveTo(Ⲇ * 160, 42.80000305175781 * Ⲇ, 157 * Ⲇ, 50.80000305175781 * Ⲇ, Ⲇ * 153, Ⲇ * 58.80000305175781);
		ᐃ.bezierCurveTo(Ⲇ * 148, 62.80000305175781 * Ⲇ, 147 * Ⲇ, 59.80000305175781 * Ⲇ, Ⲇ * 143, Ⲇ * 52.80000305175781);
		ᐃ.bezierCurveTo(Ⲇ * 129, Ⲇ * 52.80000305175781, Ⲇ * 129, Ⲇ * 52.80000305175781, Ⲇ * 115, Ⲇ * 52.80000305175781);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃΔⵠ(ᐃ, 78 * Ⲇ, Ⲇ * 44.80000305175781, 39.44616584663204 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.globalAlpha = 1;
		ᐃ.translate(-ᐃⵠᐃᐃᐃ * Ⲇ, Ⲇ * -ᐃᐃⲆΔΔ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 24.5, Ⲇ * 44.30000305175781);
		ᐃᐃᐃ(ᐃ, -19.5 * Ⲇ, -8.5 * Ⲇ, 39 * Ⲇ, 17 * Ⲇ, ⵠᐃⵠⲆΔ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ⲆᐃⵠⲆⲆ, ᐃⲆ[3], Ⲇ * ΔΔᐃⵠⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(115 * Ⲇ, Ⲇ * 37.80000305175781);
		ᐃ.bezierCurveTo(Ⲇ * 142, Ⲇ * 37.80000305175781, Ⲇ * 140, Ⲇ * 37.80000305175781, 141 * Ⲇ, Ⲇ * 37.80000305175781);
		ᐃ.bezierCurveTo(Ⲇ * 147, 28.800003051757812 * Ⲇ, Ⲇ * 149, 26.800003051757812 * Ⲇ, Ⲇ * 153, 32.80000305175781 * Ⲇ);
		ᐃ.bezierCurveTo(160 * Ⲇ, Ⲇ * 42.80000305175781, 157 * Ⲇ, Ⲇ * 50.80000305175781, Ⲇ * 153, 58.80000305175781 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 148, Ⲇ * 62.80000305175781, 147 * Ⲇ, 59.80000305175781 * Ⲇ, 143 * Ⲇ, Ⲇ * 52.80000305175781);
		ᐃ.bezierCurveTo(129 * Ⲇ, Ⲇ * 52.80000305175781, 129 * Ⲇ, Ⲇ * 52.80000305175781, Ⲇ * 115, 52.80000305175781 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆᐃΔⵠ, ᐃⲆ[ΔⵠⲆⲆ], Ⲇ * ΔⲆⵠΔΔ);
		ᐃΔⵠ(ᐃ, 78 * Ⲇ, Ⲇ * 44.80000305175781, 42.44616584663204 * Ⲇ);
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃΔΔⵠ], Δᐃᐃⵠᐃ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 24.5, Ⲇ * 44.30000305175781);
		ᐃᐃᐃ(ᐃ, Ⲇ * -19.5, Ⲇ * -8.5, Ⲇ * 39, ΔᐃⲆⵠΔᐃᐃ * Ⲇ, Ⲇ * ᐃⲆⵠΔΔ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 115, Ⲇ * 37.80000305175781);
		ᐃ.bezierCurveTo(Ⲇ * 142, 37.80000305175781 * Ⲇ, Ⲇ * 140, 37.80000305175781 * Ⲇ, Ⲇ * 141, Ⲇ * 37.80000305175781);
		ᐃ.bezierCurveTo(Ⲇ * 147, 28.800003051757812 * Ⲇ, Ⲇ * 149, 26.800003051757812 * Ⲇ, Ⲇ * 153, Ⲇ * 32.80000305175781);
		ᐃ.bezierCurveTo(Ⲇ * 160, Ⲇ * 42.80000305175781, Ⲇ * 157, 50.80000305175781 * Ⲇ, Ⲇ * 153, 58.80000305175781 * Ⲇ);
		ᐃ.bezierCurveTo(148 * Ⲇ, 62.80000305175781 * Ⲇ, 147 * Ⲇ, Ⲇ * 59.80000305175781, Ⲇ * 143, 52.80000305175781 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 129, 52.80000305175781 * Ⲇ, Ⲇ * 129, Ⲇ * 52.80000305175781, 115 * Ⲇ, Ⲇ * 52.80000305175781);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1]);
		ᐃΔⵠ(ᐃ, 78 * Ⲇ, 44.80000305175781 * Ⲇ, 39.44616584663204 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[1], Ⲇ * 4);
		ᐃΔⵠ(ᐃ, 78 * Ⲇ, 44.80000305175781 * Ⲇ, 29.68164415931166 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ΔΔⲆΔ], Ⲇ * ᐃΔⲆΔⲆ);
		ᐃΔⵠ(ᐃ, Ⲇ * 78, 44 * Ⲇ, Ⲇ * 20);
		ᐃⵠ(ᐃ, ᐃⲆ[4]);
		return ⲆⲆ
	}

	function ᐃᐃᐃⲆΔ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 20 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 35;
		ᐃᐃᐃ(ᐃ, ⲆⲆᐃΔ, ⵠⲆᐃ, 20, 35, ⲆᐃᐃΔΔ);
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		return ⲆⲆ
	}

	function ⵠⲆⲆⲆⲆⲆᐃⲆⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 400 * Ⲇ;
		ⲆⲆ.height = 400 * Ⲇ;
		ᐃ.translate(0, 15 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : ⲆⲆⲆᐃ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 102, Ⲇ * 154);
		ᐃ.bezierCurveTo(108 * Ⲇ, Ⲇ * 216.5, 108 * Ⲇ, 216.5 * Ⲇ, Ⲇ * 114, Ⲇ * 279);
		ᐃ.bezierCurveTo(124 * Ⲇ, 300 * Ⲇ, Ⲇ * 237, 299 * Ⲇ, Ⲇ * 251, Ⲇ * 279);
		ᐃ.bezierCurveTo(Ⲇ * 257, 217 * Ⲇ, 257 * Ⲇ, Ⲇ * 217, Ⲇ * 263, 155 * Ⲇ);
		ᐃ.bezierCurveTo(248 * Ⲇ, Ⲇ * 194, Ⲇ * 91, 180 * Ⲇ, Ⲇ * 103, Ⲇ * 156);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 102, Ⲇ * 154);
		ᐃ.bezierCurveTo(Ⲇ * 106, Ⲇ * 53, ⵠⵠᐃᐃᐃⵠᐃ * Ⲇ, 53 * Ⲇ, Ⲇ * 263, 154 * Ⲇ);
		ᐃ.bezierCurveTo(248 * Ⲇ, Ⲇ * 38, Ⲇ * 99, 69 * Ⲇ, 103 * Ⲇ, Ⲇ * 154);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔⵠΔⲆⲆ, ᐃⲆ[0], ΔᐃⵠⵠΔⲆΔ * Ⲇ);
		ᐃ.translate(ᐃΔΔ, -5 * Ⲇ);
		ᐃ.globalAlpha = 1;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(103 * Ⲇ, 154 * Ⲇ);
		ᐃ.bezierCurveTo(98 * Ⲇ, Ⲇ * 119, Ⲇ * 264, 119 * Ⲇ, Ⲇ * 264, Ⲇ * 154);
		ᐃ.bezierCurveTo(Ⲇ * 271, 189 * Ⲇ, 94 * Ⲇ, Ⲇ * 188, Ⲇ * 103, Ⲇ * 154);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[2], Ⲇ * ⲆⲆⲆΔΔΔⵠ);
		ᐃ.translate(ⵠⵠΔᐃ, 25 * Ⲇ);
		ᐃ.globalAlpha = ⵠⲆⲆⲆ;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(103 * Ⲇ, 154 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 98, 119 * Ⲇ, Ⲇ * 264, 119 * Ⲇ, 264 * Ⲇ, Ⲇ * 154);
		ᐃ.bezierCurveTo(Ⲇ * 271, 189 * Ⲇ, 94 * Ⲇ, Ⲇ * 188, 103 * Ⲇ, 154 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Δᐃⵠᐃ]);
		ᐃ.translate(ⵠΔΔᐃ, -25 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(102 * Ⲇ, Ⲇ * 154);
		ᐃ.bezierCurveTo(108 * Ⲇ, 216.5 * Ⲇ, 108 * Ⲇ, Ⲇ * 216.5, 114 * Ⲇ, 279 * Ⲇ);
		ᐃ.bezierCurveTo(124 * Ⲇ, Ⲇ * 300, 237 * Ⲇ, 299 * Ⲇ, 251 * Ⲇ, 279 * Ⲇ);
		ᐃ.bezierCurveTo(257 * Ⲇ, 217 * Ⲇ, 257 * Ⲇ, 217 * Ⲇ, 263 * Ⲇ, Ⲇ * 155);
		ᐃ.bezierCurveTo(Ⲇ * 248, Ⲇ * 194, Ⲇ * 91, 180 * Ⲇ, 103 * Ⲇ, 156 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[ΔᐃΔⲆ], ᐃᐃᐃΔᐃΔΔ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 182, Ⲇ * 185);
		ᐃ.bezierCurveTo(182.5 * Ⲇ, Ⲇ * 237.5, Ⲇ * 182.5, 237.5 * Ⲇ, Ⲇ * 183, 290 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ⲆⲆΔᐃⵠ, ᐃⲆ[ΔᐃΔⲆ], Ⲇ * ᐃᐃΔᐃⲆ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(222 * Ⲇ, 287 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 226, Ⲇ * 233.5, 226 * Ⲇ, 233.5 * Ⲇ, Ⲇ * 230, Ⲇ * 180);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, undefined, ᐃⲆ[ᐃⵠΔⲆ], 12 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(145 * Ⲇ, 290 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 140.5, 237 * Ⲇ, Ⲇ * 140.5, Ⲇ * 237, 136 * Ⲇ, Ⲇ * 184);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[2], 11 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 105, Ⲇ * 184);
		ᐃ.bezierCurveTo(148 * Ⲇ, Ⲇ * 205, 231 * Ⲇ, 202 * Ⲇ, Ⲇ * 260, 182 * Ⲇ);
		ᐃ.bezierCurveTo(259 * Ⲇ, Ⲇ * 195.5, 259 * Ⲇ, Ⲇ * 195.5, 258 * Ⲇ, 209 * Ⲇ);
		ᐃ.bezierCurveTo(217 * Ⲇ, 218 * Ⲇ, 163 * Ⲇ, 225 * Ⲇ, 108 * Ⲇ, 207 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⵠⲆⵠⲆ], ᐃⲆ[ᐃΔⲆⵠ], Ⲇ * 11);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 251, 276 * Ⲇ);
		ᐃ.bezierCurveTo(251.5 * Ⲇ, 267.5 * Ⲇ, 251.5 * Ⲇ, Ⲇ * 267.5, Ⲇ * 252, Ⲇ * 259);
		ᐃ.bezierCurveTo(Ⲇ * 212, Ⲇ * 272, Ⲇ * 156, Ⲇ * 275, Ⲇ * 112, 260 * Ⲇ);
		ᐃ.bezierCurveTo(112.5 * Ⲇ, 269 * Ⲇ, Ⲇ * 112.5, Ⲇ * 269, 113 * Ⲇ, 278 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 155, Ⲇ * 306, Ⲇ * 253, 286 * Ⲇ, Ⲇ * 250, 276 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[2], ᐃⲆᐃΔⲆⲆⵠ * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 102, 154 * Ⲇ);
		ᐃ.bezierCurveTo(106 * Ⲇ, 53 * Ⲇ, ⵠᐃᐃᐃⲆᐃⲆ * Ⲇ, Ⲇ * 53, 263 * Ⲇ, Ⲇ * 154);
		ᐃ.bezierCurveTo(248 * Ⲇ, 38 * Ⲇ, 99 * Ⲇ, 69 * Ⲇ, 103 * Ⲇ, Ⲇ * 154);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ΔΔᐃⵠΔ, ᐃⲆ[2], Ⲇ * ⵠⵠⵠⵠⵠ);
		return ⲆⲆ
	}

	function ⵠΔⵠΔΔΔᐃⲆΔ() {
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[563]).style.backgroundColor = ⵠ.ⵠᐃΔⲆΔ[ⵠⲆΔⲆⲆ.time];
		ⵠⲆΔⲆⲆ.items.push(new ⵠⵠⵠᐃⵠⲆΔ(ⲆΔⲆ.ⲆⵠⲆⲆᐃ, 0, 0, 0, 0, Math.random() * Math.PI * Ⲇⵠᐃⵠ, 2, 1));
		ⵠⲆΔⲆⲆ.items.push(new ⵠⵠⵠᐃⵠⲆΔ(ⲆΔⲆ.ᐃᐃΔᐃⵠ, ⵠᐃΔ, 0, 0, 0, ⵠⲆⵠ, ᐃⲆⵠΔ, 5));
		ⵠⲆΔⲆⲆ.items.push(new ⵠⵠⵠᐃⵠⲆΔ(ⲆΔⲆ.ⵠⵠᐃⲆⵠ, ⲆⲆⵠⲆ, 0, 0, 0, Math.PI / 4, 0, ᐃΔΔ));
		ⵠⲆΔⲆⲆ.items.push(new ⵠⵠⵠᐃⵠⲆΔ(ⲆΔⲆ.ᐃᐃΔᐃⵠ, 0, 0, ⲆⲆᐃΔ, 0, 0, 0, 5))
	}

	function ⵠᐃⵠΔⵠⵠⵠ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 142;
		ⲆⲆ.height = 118 * Ⲇ;
		ᐃ.save();
		ᐃ.translate(70.16665649414062 * Ⲇ, Ⲇ * 38.20831298828125);
		ᐃᐃᐃ(ᐃ, Ⲇ * -58.5, -27.5 * Ⲇ, Ⲇ * 117, Ⲇ * 55, ᐃΔⲆΔᐃ * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⲆⲆⲆᐃ], Ⲇ * 4);
		ᐃ.save();
		ᐃ.translate(70 * Ⲇ, Ⲇ * 42.70831298828125);
		ᐃᐃᐃ(ᐃ, Ⲇ * -61, -20 * Ⲇ, 122 * Ⲇ, Ⲇ * 40, 20 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ΔⲆᐃⲆ], ᐃⲆ[1], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(123 * Ⲇ, 70.375 * Ⲇ);
		ᐃ.bezierCurveTo(115 * Ⲇ, Ⲇ * 99.375, 119 * Ⲇ, Ⲇ * 85.375, Ⲇ * 115, 100.375 * Ⲇ);
		ᐃ.bezierCurveTo(112 * Ⲇ, 116.375 * Ⲇ, Ⲇ * 117, Ⲇ * 109.375, 131 * Ⲇ, Ⲇ * 100.375);
		ᐃ.bezierCurveTo(Ⲇ * 131, Ⲇ * 83.375, Ⲇ * 131, 83.375 * Ⲇ, 131 * Ⲇ, 66.375 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃⵠ], ᐃⲆ[1], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(11 * Ⲇ, Ⲇ * 68.375);
		ᐃ.bezierCurveTo(Ⲇ * 11.166656494140625, 84.375 * Ⲇ, 9 * Ⲇ, Ⲇ * 99.375, Ⲇ * 10, Ⲇ * 100.375);
		ᐃ.bezierCurveTo(Ⲇ * 35, Ⲇ * 113.375, Ⲇ * 27, 110.375 * Ⲇ, Ⲇ * 25, Ⲇ * 95.375);
		ᐃ.bezierCurveTo(16 * Ⲇ, 68.375 * Ⲇ, Ⲇ * ᐃⵠⲆΔᐃΔⲆ, Ⲇ * 69.375, Ⲇ * ΔᐃᐃΔⵠⵠⵠ, Ⲇ * 68.375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ΔⲆΔᐃ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(46 * Ⲇ, 32.375 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 43, 8.375 * Ⲇ, 45 * Ⲇ, 7.375 * Ⲇ, 56 * Ⲇ, Ⲇ * 6.375);
		ᐃ.bezierCurveTo(105 * Ⲇ, Ⲇ * 4.375, 102 * Ⲇ, 6.375 * Ⲇ, Ⲇ * 97, Ⲇ * 32.375);
		ᐃ.bezierCurveTo(Ⲇ * 138, Ⲇ * 43.375, Ⲇ * 133, Ⲇ * 45.375, 133 * Ⲇ, 58.375 * Ⲇ);
		ᐃ.bezierCurveTo(133 * Ⲇ, Ⲇ * 85.375, 125 * Ⲇ, Ⲇ * 74.375, Ⲇ * 111, Ⲇ * 70.375);
		ᐃ.bezierCurveTo(Ⲇ * 70, Ⲇ * 69.875, 29 * Ⲇ, 69.375 * Ⲇ, 29 * Ⲇ, 69.375 * Ⲇ);
		ᐃ.bezierCurveTo(7 * Ⲇ, Ⲇ * 84.375, Ⲇ * ⵠᐃᐃⲆⵠ, 70.375 * Ⲇ, Ⲇ * 7, 59.375 * Ⲇ);
		ᐃ.bezierCurveTo(6 * Ⲇ, 28.375 * Ⲇ, 32 * Ⲇ, 39.375 * Ⲇ, Ⲇ * 44, Ⲇ * 32.375);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[ᐃⵠⵠ], ΔᐃΔⲆΔ * Ⲇ);
		ᐃΔⵠ(ᐃ, Ⲇ * 71, Ⲇ * 44.375, 16.55294535724685 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆᐃⵠⲆ], ᐃⲆ[1], 4 * Ⲇ);
		ᐃΔⵠ(ᐃ, 71 * Ⲇ, 43.70831298828125 * Ⲇ, 8.94427190999916 * Ⲇ);
		ᐃⵠ(ᐃ, ᐃⲆ[2], ᐃⲆ[1], 4 * Ⲇ);
		return ⲆⲆ
	}

	function ᐃᐃΔΔⵠΔΔⵠⵠ(Ⲇ, ᐃⲆ, Δᐃ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		if (Δᐃ == ⲆⲆᐃΔ) {
			ⲆⲆ.width = Ⲇ * 543;
			ⲆⲆ.height = Ⲇ * 393;
			ᐃ.beginPath();
			ᐃ.lineCap = Δ[237];
			ᐃ.lineJoin = Δ[237];
			ᐃ.moveTo(Ⲇ * 109.5, 154.046875 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 143.5, 96.046875 * Ⲇ, Ⲇ * 208.5, 92.046875 * Ⲇ, Ⲇ * 288.5, Ⲇ * 97.046875);
			ᐃ.bezierCurveTo(Ⲇ * 357.5, Ⲇ * 104.046875, Ⲇ * 414.5, 132.046875 * Ⲇ, Ⲇ * 422.5, 166.046875 * Ⲇ);
			ᐃ.bezierCurveTo(431.5 * Ⲇ, Ⲇ * 192.046875, Ⲇ * 400.5, Ⲇ * 261.046875, Ⲇ * 332.5, Ⲇ * 271.046875);
			ᐃ.bezierCurveTo(272.5 * Ⲇ, Ⲇ * 279.046875, Ⲇ * 159.5, 285.046875 * Ⲇ, Ⲇ * 126.5, 260.046875 * Ⲇ);
			ᐃ.bezierCurveTo(Ⲇ * 99.5, Ⲇ * 238.046875, Ⲇ * 95.5, 183.046875 * Ⲇ, Ⲇ * 109.5, 154.046875 * Ⲇ);
			ᐃ.closePath();
			ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⵠⲆ])
		} else 1 == Δᐃ ? (ⲆⲆ.width = 543 * Ⲇ, ⲆⲆ.height = 470 * Ⲇ, ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(216.23297119140625 * Ⲇ, Ⲇ * 100.34944152832031), ᐃ.bezierCurveTo(Ⲇ * 349.23297119140625, Ⲇ * 110.34944152832031, Ⲇ * 422.23297119140625, Ⲇ * 142.3494415283203, Ⲇ * 434.23297119140625, Ⲇ * 194.3494415283203), ᐃ.bezierCurveTo(Ⲇ * 451.23297119140625, Ⲇ * 268.3494415283203, Ⲇ * 397.23297119140625, Ⲇ * 367.3494415283203, Ⲇ * 313.23297119140625, Ⲇ * 351.3494415283203), ᐃ.bezierCurveTo(Ⲇ * 148.23297119140625, Ⲇ * 330.3494415283203, 106.23297119140625 * Ⲇ, 319.3494415283203 * Ⲇ, 87.23297119140625 * Ⲇ, 248.3494415283203 * Ⲇ), ᐃ.bezierCurveTo(63.23297119140625 * Ⲇ, Ⲇ * 164.3494415283203, 102.23297119140625 * Ⲇ, 90.34944152832031 * Ⲇ, Ⲇ * 216.23297119140625, 100.34944152832031 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ])) : (ⲆⲆ.width = Ⲇ * 543, ⲆⲆ.height = Ⲇ * 470, ᐃ.beginPath(), ᐃ.lineCap = Δ[237], ᐃ.lineJoin = Δ[237], ᐃ.moveTo(155.23297119140625 * Ⲇ, Ⲇ * 126.71307373046875), ᐃ.bezierCurveTo(232.23297119140625 * Ⲇ, 76.71307373046875 * Ⲇ, Ⲇ * 340.23297119140625, 67.71307373046875 * Ⲇ, 411.23297119140625 * Ⲇ, Ⲇ * 106.71307373046875), ᐃ.bezierCurveTo(Ⲇ * 458.23297119140625, Ⲇ * 131.71307373046875, 465.23297119140625 * Ⲇ, 280.71307373046875 * Ⲇ, 353.23297119140625 * Ⲇ, Ⲇ * 363.71307373046875), ᐃ.bezierCurveTo(Ⲇ * 299.23297119140625, 404.71307373046875 * Ⲇ, 143.23297119140625 * Ⲇ, 415.71307373046875 * Ⲇ, Ⲇ * 88.23297119140625, Ⲇ * 327.71307373046875), ᐃ.bezierCurveTo(48.23297119140625 * Ⲇ, Ⲇ * 256.71307373046875, 93.23297119140625 * Ⲇ, Ⲇ * 171.71307373046875, Ⲇ * 155.23297119140625, 126.71307373046875 * Ⲇ), ᐃ.closePath(), ᐃⵠ(ᐃ, ᐃⲆ[0]));
		return ⲆⲆ
	}

	function ⲆᐃΔΔᐃ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 80 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 160;
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.translate(5 * Ⲇ, Ⲇ * ⵠⵠⲆⵠ);
		ᐃ.save();
		ᐃᐃᐃ(ᐃ, 33 * Ⲇ, 53 * Ⲇ, ⲆⵠΔΔⵠ * Ⲇ, 98 * Ⲇ, Ⲇ * 10);
		ᐃⵠ(ᐃ, ᐃⲆ[ΔᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(Ⲇ * -150, -100 * Ⲇ);
		ᐃ.moveTo(Ⲇ * 167.5, 171.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 188, Ⲇ * 171.0625, Ⲇ * 188, 171.0625 * Ⲇ, Ⲇ * 208.5, Ⲇ * 171.0625);
		ᐃ.bezierCurveTo(Ⲇ * 208.5, 156.0625 * Ⲇ, 208.5 * Ⲇ, 156.0625 * Ⲇ, Ⲇ * 208.5, Ⲇ * 141.0625);
		ᐃ.bezierCurveTo(203.5 * Ⲇ, 113.0625 * Ⲇ, 179.5 * Ⲇ, Ⲇ * 96.0625, Ⲇ * 167.5, 141.0625 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.restore();
		ᐃ.globalAlpha = 1;
		ᐃ.translate(-ⵠⵠⲆⵠ * Ⲇ, -ⲆⲆⲆᐃᐃ * Ⲇ);
		ᐃ.save();
		ᐃᐃᐃ(ᐃ, 33 * Ⲇ, Ⲇ * 53, Ⲇ * 10, 98 * Ⲇ, Ⲇ * ⲆⵠΔΔⵠ);
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔⵠΔ], ᐃⲆ[ᐃⵠΔⲆ], Ⲇ * ᐃᐃΔΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(-150 * Ⲇ, -ᐃⲆᐃᐃΔΔⲆ * Ⲇ);
		ᐃ.moveTo(167.5 * Ⲇ, Ⲇ * 171.0625);
		ᐃ.bezierCurveTo(188 * Ⲇ, Ⲇ * 171.0625, 188 * Ⲇ, Ⲇ * 171.0625, 208.5 * Ⲇ, Ⲇ * 171.0625);
		ᐃ.bezierCurveTo(208.5 * Ⲇ, 156.0625 * Ⲇ, Ⲇ * 208.5, Ⲇ * 156.0625, Ⲇ * 208.5, Ⲇ * 141.0625);
		ᐃ.bezierCurveTo(Ⲇ * 203.5, Ⲇ * 113.0625, Ⲇ * 179.5, 96.0625 * Ⲇ, Ⲇ * 167.5, Ⲇ * 141.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⵠⲆⵠ], ᐃⲆ[4], Ⲇ * ΔᐃΔⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(0 * Ⲇ, ⲆⲆⲆᐃ * Ⲇ);
		ᐃ.moveTo(Ⲇ * 180.5, Ⲇ * 169.0625);
		ᐃ.bezierCurveTo(Ⲇ * 180.5, Ⲇ * 157.5625, 180.5 * Ⲇ, Ⲇ * 157.5625, Ⲇ * 180.5, 146.0625 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 181.5, Ⲇ * 134.0625, Ⲇ * 193.5, 129.0625 * Ⲇ, 196.5 * Ⲇ, Ⲇ * 146.0625);
		ᐃ.bezierCurveTo(Ⲇ * 196.5, 157.5625 * Ⲇ, 196.5 * Ⲇ, 157.5625 * Ⲇ, Ⲇ * 196.5, Ⲇ * 169.0625);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃ.restore();
		return ⲆⲆ
	}

	function ⵠᐃⵠⵠⵠⵠⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = Ⲇ * 145;
		ⲆⲆ.height = Ⲇ * 120;
		ᐃ.beginPath();
		ᐃ.scale(.6, .6);
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(ΔⲆⲆⲆΔᐃⵠ * Ⲇ, -ⲆⲆΔᐃΔ * Ⲇ);
		ᐃ.moveTo(Ⲇ * 101, Ⲇ * 72);
		ᐃ.bezierCurveTo(Ⲇ * 144, Ⲇ * 69, Ⲇ * 149, Ⲇ * 58, 162 * Ⲇ, Ⲇ * 49);
		ᐃ.bezierCurveTo(174 * Ⲇ, Ⲇ * 31, Ⲇ * 173, Ⲇ * 38, 172 * Ⲇ, Ⲇ * 45);
		ᐃ.bezierCurveTo(Ⲇ * 168, 73 * Ⲇ, Ⲇ * 158, Ⲇ * 75, 152 * Ⲇ, 78 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 106, 89 * Ⲇ, Ⲇ * 107, Ⲇ * 91, Ⲇ * 107, Ⲇ * 94);
		ᐃ.bezierCurveTo(Ⲇ * 107, Ⲇ * ⵠᐃⵠⲆⵠ, Ⲇ * 107, Ⲇ * 107, 107 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(Ⲇ * 99, 112 * Ⲇ, Ⲇ * 98, Ⲇ * 110, 93 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(Ⲇ * 94, 107 * Ⲇ, 93 * Ⲇ, Ⲇ * 107, 93 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(93 * Ⲇ, 100 * Ⲇ, 93 * Ⲇ, ΔⲆΔΔΔ * Ⲇ, Ⲇ * 92, Ⲇ * 94);
		ᐃ.bezierCurveTo(Ⲇ * 92, 89 * Ⲇ, 90 * Ⲇ, 90 * Ⲇ, Ⲇ * 73, 86 * Ⲇ);
		ᐃ.bezierCurveTo(45 * Ⲇ, 81 * Ⲇ, 40 * Ⲇ, 77 * Ⲇ, 35 * Ⲇ, Ⲇ * 68);
		ᐃ.bezierCurveTo(Ⲇ * 23, Ⲇ * 36, Ⲇ * 28, 34 * Ⲇ, Ⲇ * 36, 46 * Ⲇ);
		ᐃ.bezierCurveTo(45 * Ⲇ, Ⲇ * 58, Ⲇ * 83, Ⲇ * 72, Ⲇ * 98, Ⲇ * 72);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔΔΔ], ᐃⲆ[ⵠΔΔΔ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.scale(1.1, 1.1);
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.translate(Ⲇ * -9, Ⲇ * ΔᐃΔΔ);
		ᐃ.moveTo(Ⲇ * 101, 72 * Ⲇ);
		ᐃ.bezierCurveTo(144 * Ⲇ, 69 * Ⲇ, Ⲇ * 149, 58 * Ⲇ, Ⲇ * 162, 49 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 174, Ⲇ * 31, 173 * Ⲇ, Ⲇ * 38, 172 * Ⲇ, Ⲇ * 45);
		ᐃ.bezierCurveTo(Ⲇ * 168, 73 * Ⲇ, Ⲇ * 158, Ⲇ * 75, Ⲇ * 152, 78 * Ⲇ);
		ᐃ.bezierCurveTo(106 * Ⲇ, 89 * Ⲇ, 107 * Ⲇ, 91 * Ⲇ, 107 * Ⲇ, 94 * Ⲇ);
		ᐃ.bezierCurveTo(107 * Ⲇ, Ⲇ * ⵠᐃⵠⲆⵠ, Ⲇ * 107, Ⲇ * 107, Ⲇ * 107, Ⲇ * 107);
		ᐃ.bezierCurveTo(99 * Ⲇ, Ⲇ * 112, Ⲇ * 98, 110 * Ⲇ, 93 * Ⲇ, 107 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 94, Ⲇ * 107, Ⲇ * 93, Ⲇ * 107, Ⲇ * 93, Ⲇ * 107);
		ᐃ.bezierCurveTo(93 * Ⲇ, ⵠᐃΔⲆᐃ * Ⲇ, Ⲇ * 93, Ⲇ * ᐃⲆᐃᐃΔΔⲆ, Ⲇ * 92, Ⲇ * 94);
		ᐃ.bezierCurveTo(Ⲇ * 92, 89 * Ⲇ, 90 * Ⲇ, 90 * Ⲇ, Ⲇ * 73, 86 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 45, Ⲇ * 81, 40 * Ⲇ, Ⲇ * 77, 35 * Ⲇ, Ⲇ * 68);
		ᐃ.bezierCurveTo(Ⲇ * 23, Ⲇ * 36, 28 * Ⲇ, Ⲇ * 34, Ⲇ * 36, 46 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 45, Ⲇ * 58, Ⲇ * 83, Ⲇ * 72, 98 * Ⲇ, Ⲇ * 72);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔΔΔ], ᐃⲆ[ⵠᐃⵠΔᐃ], ᐃᐃΔΔ * Ⲇ);
		ᐃ.scale(1.1, 1.1);
		ᐃ.translate(Ⲇ * -9, Ⲇ * 4);
		ᐃ.save();
		ᐃ.translate(ⵠⲆᐃⵠⲆ * Ⲇ, 73.06874084472656 * Ⲇ);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, Ⲇ * -61, -38.5 * Ⲇ, Ⲇ * 122, 40 * Ⲇ, Ⲇ * 20);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⲆ], ᐃⲆ[ⲆⲆΔΔ], ᐃΔⲆΔⲆ * Ⲇ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * ⵠᐃⵠⲆⵠ, 71.36874389648438 * Ⲇ);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, -60.5 * Ⲇ, Ⲇ * -18, Ⲇ * 121, 30 * Ⲇ, Ⲇ * ⲆⲆᐃⵠⲆ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[2], Ⲇ * ⲆΔⵠᐃΔ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(144 * Ⲇ, Ⲇ * 80);
		ᐃ.bezierCurveTo(Ⲇ * 152, 100 * Ⲇ, Ⲇ * 152, 101 * Ⲇ, 153 * Ⲇ, 102 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 159, Ⲇ * 100, 159 * Ⲇ, ⵠⲆΔᐃΔ * Ⲇ, Ⲇ * 160, ⲆᐃᐃΔᐃ * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 161, 84 * Ⲇ, 161 * Ⲇ, 84 * Ⲇ, Ⲇ * 162, Ⲇ * 68);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[2]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(57 * Ⲇ, Ⲇ * 75);
		ᐃ.bezierCurveTo(Ⲇ * 48, 101 * Ⲇ, 53 * Ⲇ, Ⲇ * 89, 48 * Ⲇ, 102 * Ⲇ);
		ᐃ.bezierCurveTo(44 * Ⲇ, Ⲇ * ⵠᐃⵠⲆⲆ, Ⲇ * 44, Ⲇ * ᐃⵠᐃΔᐃ, 39 * Ⲇ, 97 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 39, 83 * Ⲇ, 39 * Ⲇ, Ⲇ * 83, Ⲇ * 39, 69 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃⵠⲆ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 101, Ⲇ * 72);
		ᐃ.bezierCurveTo(Ⲇ * 144, Ⲇ * 69, Ⲇ * 149, Ⲇ * 58, Ⲇ * 162, Ⲇ * 49);
		ᐃ.bezierCurveTo(174 * Ⲇ, Ⲇ * 31, 173 * Ⲇ, 38 * Ⲇ, 172 * Ⲇ, Ⲇ * 45);
		ᐃ.bezierCurveTo(Ⲇ * 168, 73 * Ⲇ, 158 * Ⲇ, 75 * Ⲇ, 152 * Ⲇ, Ⲇ * 78);
		ᐃ.bezierCurveTo(Ⲇ * 106, Ⲇ * 89, Ⲇ * 107, Ⲇ * 91, 107 * Ⲇ, Ⲇ * 94);
		ᐃ.bezierCurveTo(107 * Ⲇ, Ⲇ * ᐃⵠᐃΔᐃ, Ⲇ * 107, Ⲇ * 107, Ⲇ * 107, Ⲇ * 107);
		ᐃ.bezierCurveTo(Ⲇ * 99, Ⲇ * 112, 98 * Ⲇ, 110 * Ⲇ, 93 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(Ⲇ * 94, Ⲇ * 107, Ⲇ * 93, Ⲇ * 107, 93 * Ⲇ, Ⲇ * 107);
		ᐃ.bezierCurveTo(93 * Ⲇ, Ⲇ * 100, Ⲇ * 93, 100 * Ⲇ, Ⲇ * 92, 94 * Ⲇ);
		ᐃ.bezierCurveTo(92 * Ⲇ, Ⲇ * 89, Ⲇ * 90, 90 * Ⲇ, Ⲇ * 73, Ⲇ * 86);
		ᐃ.bezierCurveTo(Ⲇ * 45, 81 * Ⲇ, Ⲇ * 40, 77 * Ⲇ, Ⲇ * 35, 68 * Ⲇ);
		ᐃ.bezierCurveTo(23 * Ⲇ, 36 * Ⲇ, 28 * Ⲇ, Ⲇ * 34, Ⲇ * 36, 46 * Ⲇ);
		ᐃ.bezierCurveTo(45 * Ⲇ, 58 * Ⲇ, 83 * Ⲇ, 72 * Ⲇ, 98 * Ⲇ, 72 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[4], ᐃⲆ[ΔⲆΔᐃⵠ], ⲆⵠⲆⲆⲆ * Ⲇ);
		ᐃ.translate(ⲆⲆᐃΔ, 0);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(115.5 * Ⲇ, 116.07290649414062 * Ⲇ);
		ᐃ.bezierCurveTo(159.5 * Ⲇ, 99.07290649414062 * Ⲇ, 159.5 * Ⲇ, Ⲇ * 98.07290649414062, 159.5 * Ⲇ, 98.07290649414062 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 155.5, Ⲇ * 116.07290649414062, 159.5 * Ⲇ, 116.07290649414062 * Ⲇ, 159.5 * Ⲇ, Ⲇ * 118.07290649414062);
		ᐃ.bezierCurveTo(147.5 * Ⲇ, 130.07290649414062 * Ⲇ, 136.5 * Ⲇ, 132.07290649414062 * Ⲇ, Ⲇ * 115.5, 138.07290649414062 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆᐃⲆ], ᐃⲆ[2], Ⲇ * 4);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 39.5, Ⲇ * 96.07290649414062);
		ᐃ.bezierCurveTo(85.5 * Ⲇ, Ⲇ * 114.07290649414062, Ⲇ * 62.5, Ⲇ * 105.57290649414062, Ⲇ * 85.5, 115.07290649414062 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 85.5, 125.57290649414062 * Ⲇ, Ⲇ * 85.5, Ⲇ * 125.57290649414062, Ⲇ * 85.5, Ⲇ * 136.07290649414062);
		ᐃ.bezierCurveTo(51.5 * Ⲇ, 129.07290649414062 * Ⲇ, 51.5 * Ⲇ, 125.07290649414062 * Ⲇ, 41.5 * Ⲇ, Ⲇ * 118.07290649414062);
		ᐃ.bezierCurveTo(44.5 * Ⲇ, Ⲇ * 106.07290649414062, Ⲇ * 42.5, 103.07290649414062 * Ⲇ, Ⲇ * 40.5, 96.07290649414062 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[3], ᐃⲆ[ⲆᐃᐃΔ], 4 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(86 * Ⲇ, 80 * Ⲇ);
		ᐃ.bezierCurveTo(97 * Ⲇ, Ⲇ * 88, Ⲇ * 106, 84 * Ⲇ, 112 * Ⲇ, Ⲇ * 80);
		ᐃ.bezierCurveTo(Ⲇ * 112, 62 * Ⲇ, 106 * Ⲇ, Ⲇ * 59, 99 * Ⲇ, Ⲇ * 54);
		ᐃ.bezierCurveTo(86 * Ⲇ, Ⲇ * 62, 86 * Ⲇ, 73 * Ⲇ, 86 * Ⲇ, Ⲇ * 80);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠΔⲆⲆ], ᐃⲆ[2], Ⲇ * ΔⵠⲆⵠⲆ);
		ᐃ.scale(.5, .5);
		ᐃ.translate(100 * Ⲇ, Ⲇ * 71);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 86, 80 * Ⲇ);
		ᐃ.bezierCurveTo(97 * Ⲇ, 88 * Ⲇ, Ⲇ * 106, Ⲇ * 84, Ⲇ * 112, Ⲇ * 80);
		ᐃ.bezierCurveTo(Ⲇ * 112, Ⲇ * 62, Ⲇ * 106, 59 * Ⲇ, 99 * Ⲇ, Ⲇ * 54);
		ᐃ.bezierCurveTo(Ⲇ * 86, Ⲇ * 62, Ⲇ * 86, Ⲇ * 73, 86 * Ⲇ, 80 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[6], ᐃⲆ[2], 4 * Ⲇ);
		return ⲆⲆ
	}

	function ΔᐃⲆΔⵠⲆⲆ(Ⲇ, ᐃᐃⵠΔ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 108 * Ⲇ;
		ⲆⲆ.height = 669 * Ⲇ;
		ᐃ.translate(Ⲇ * 20, 20 * Ⲇ);
		ᐃ.globalAlpha = ᐃᐃⵠΔ ? .5 : 1;
		ᐃ.save();
		ᐃ.translate(54 * Ⲇ, 389.5 * Ⲇ);
		ᐃᐃᐃ(ᐃ, Ⲇ * -ⵠⲆⲆⲆⵠⲆΔ, -228.5 * Ⲇ, Ⲇ * 30, 457 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 35, 579 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 47, Ⲇ * 587, Ⲇ * 61, 584 * Ⲇ, 71 * Ⲇ, Ⲇ * 579);
		ᐃ.bezierCurveTo(75 * Ⲇ, Ⲇ * 597.5, Ⲇ * 75, 597.5 * Ⲇ, 79 * Ⲇ, 616 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 66.5, Ⲇ * 628, 66.5 * Ⲇ, 628 * Ⲇ, Ⲇ * 54, Ⲇ * 640);
		ᐃ.bezierCurveTo(41 * Ⲇ, 628.5 * Ⲇ, Ⲇ * 41, Ⲇ * 628.5, 28 * Ⲇ, 617 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆᐃΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(30 * Ⲇ, Ⲇ * 141);
		ᐃ.bezierCurveTo(40 * Ⲇ, 136 * Ⲇ, 40 * Ⲇ, 136 * Ⲇ, 50 * Ⲇ, 131 * Ⲇ);
		ᐃ.bezierCurveTo(63 * Ⲇ, 136 * Ⲇ, Ⲇ * 63, Ⲇ * 136, 76 * Ⲇ, Ⲇ * 141);
		ᐃ.bezierCurveTo(72.5 * Ⲇ, Ⲇ * 161.5, 72.5 * Ⲇ, Ⲇ * 161.5, 69 * Ⲇ, Ⲇ * 182);
		ᐃ.bezierCurveTo(Ⲇ * 61.5, Ⲇ * 186.5, Ⲇ * 61.5, Ⲇ * 186.5, Ⲇ * 54, 191 * Ⲇ);
		ᐃ.bezierCurveTo(45 * Ⲇ, Ⲇ * 186.5, 45 * Ⲇ, Ⲇ * 186.5, 36 * Ⲇ, Ⲇ * 182);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(42 * Ⲇ, Ⲇ * 152);
		ᐃ.bezierCurveTo(Ⲇ * 53, Ⲇ * 152, 53 * Ⲇ, Ⲇ * 152, 64 * Ⲇ, 152 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 62, 171 * Ⲇ, Ⲇ * 62, 176 * Ⲇ, 55 * Ⲇ, Ⲇ * 177);
		ᐃ.bezierCurveTo(Ⲇ * 42, 176 * Ⲇ, Ⲇ * 45, Ⲇ * 174, 42 * Ⲇ, Ⲇ * 152);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 52, Ⲇ * 28);
		ᐃ.bezierCurveTo(Ⲇ * 67.5, 55 * Ⲇ, Ⲇ * 67.5, 55 * Ⲇ, Ⲇ * 83, Ⲇ * 82);
		ᐃ.bezierCurveTo(80 * Ⲇ, Ⲇ * 106.5, 80 * Ⲇ, Ⲇ * 106.5, 77 * Ⲇ, 131 * Ⲇ);
		ᐃ.bezierCurveTo(58 * Ⲇ, 147 * Ⲇ, 44 * Ⲇ, Ⲇ * 141, Ⲇ * 29, 131 * Ⲇ);
		ᐃ.bezierCurveTo(26.5 * Ⲇ, Ⲇ * 106.5, Ⲇ * 26.5, Ⲇ * 106.5, 24 * Ⲇ, 82 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠΔᐃ]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(53 * Ⲇ, 53 * Ⲇ);
		ᐃ.bezierCurveTo(61 * Ⲇ, 70 * Ⲇ, Ⲇ * 61, Ⲇ * 70, 69 * Ⲇ, 87 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 67, Ⲇ * 106, 67 * Ⲇ, Ⲇ * 106, Ⲇ * 65, Ⲇ * 125);
		ᐃ.bezierCurveTo(Ⲇ * 54, Ⲇ * 130, 51 * Ⲇ, 130 * Ⲇ, Ⲇ * 41, 125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 39, Ⲇ * 105, 39 * Ⲇ, Ⲇ * 105, 37 * Ⲇ, Ⲇ * 85);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0]);
		ᐃ.translate(Ⲇ * -20, -20 * Ⲇ);
		ᐃ.globalAlpha = 1;
		ᐃ.save();
		ᐃ.translate(Ⲇ * 54, Ⲇ * 389.5);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, Ⲇ * -15, Ⲇ * -228.5, Ⲇ * 30, Ⲇ * 457, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[1], ᐃⲆ[Δᐃᐃⵠ], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 35, Ⲇ * 579);
		ᐃ.bezierCurveTo(47 * Ⲇ, Ⲇ * 587, 61 * Ⲇ, Ⲇ * 584, 71 * Ⲇ, Ⲇ * 579);
		ᐃ.bezierCurveTo(75 * Ⲇ, 597.5 * Ⲇ, 75 * Ⲇ, 597.5 * Ⲇ, Ⲇ * 79, Ⲇ * 616);
		ᐃ.bezierCurveTo(Ⲇ * 66.5, Ⲇ * 628, Ⲇ * 66.5, Ⲇ * 628, Ⲇ * 54, Ⲇ * 640);
		ᐃ.bezierCurveTo(Ⲇ * 41, Ⲇ * 628.5, Ⲇ * 41, 628.5 * Ⲇ, 28 * Ⲇ, 617 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⵠᐃΔ], ᐃⲆ[ᐃᐃΔΔ], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 30, Ⲇ * 141);
		ᐃ.bezierCurveTo(Ⲇ * 40, Ⲇ * 136, Ⲇ * 40, 136 * Ⲇ, Ⲇ * 50, 131 * Ⲇ);
		ᐃ.bezierCurveTo(63 * Ⲇ, Ⲇ * 136, 63 * Ⲇ, 136 * Ⲇ, 76 * Ⲇ, Ⲇ * 141);
		ᐃ.bezierCurveTo(72.5 * Ⲇ, 161.5 * Ⲇ, 72.5 * Ⲇ, 161.5 * Ⲇ, 69 * Ⲇ, Ⲇ * 182);
		ᐃ.bezierCurveTo(Ⲇ * 61.5, Ⲇ * 186.5, Ⲇ * 61.5, Ⲇ * 186.5, Ⲇ * 54, 191 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 45, 186.5 * Ⲇ, Ⲇ * 45, Ⲇ * 186.5, 36 * Ⲇ, Ⲇ * 182);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[Ⲇⵠᐃᐃ], ᐃⲆ[4], Ⲇ * 8);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 42, 152 * Ⲇ);
		ᐃ.bezierCurveTo(53 * Ⲇ, 152 * Ⲇ, Ⲇ * 53, 152 * Ⲇ, Ⲇ * 64, Ⲇ * 152);
		ᐃ.bezierCurveTo(62 * Ⲇ, 171 * Ⲇ, 62 * Ⲇ, Ⲇ * 176, Ⲇ * 55, 177 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 42, Ⲇ * 176, Ⲇ * 45, Ⲇ * 174, Ⲇ * 42, Ⲇ * 152);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[5]);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 52, 28 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 67.5, 55 * Ⲇ, 67.5 * Ⲇ, Ⲇ * 55, 83 * Ⲇ, 82 * Ⲇ);
		ᐃ.bezierCurveTo(80 * Ⲇ, 106.5 * Ⲇ, 80 * Ⲇ, Ⲇ * 106.5, 77 * Ⲇ, Ⲇ * 131);
		ᐃ.bezierCurveTo(Ⲇ * 58, 147 * Ⲇ, 44 * Ⲇ, 141 * Ⲇ, Ⲇ * 29, 131 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 26.5, Ⲇ * 106.5, 26.5 * Ⲇ, Ⲇ * 106.5, 24 * Ⲇ, Ⲇ * 82);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔᐃⲆΔ], ᐃⲆ[7], 8 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 53, Ⲇ * 53);
		ᐃ.bezierCurveTo(61 * Ⲇ, Ⲇ * 70, 61 * Ⲇ, Ⲇ * 70, 69 * Ⲇ, 87 * Ⲇ);
		ᐃ.bezierCurveTo(67 * Ⲇ, 106 * Ⲇ, Ⲇ * 67, 106 * Ⲇ, 65 * Ⲇ, 125 * Ⲇ);
		ᐃ.bezierCurveTo(54 * Ⲇ, 130 * Ⲇ, Ⲇ * 51, Ⲇ * 130, Ⲇ * 41, 125 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 39, Ⲇ * 105, Ⲇ * 39, Ⲇ * 105, Ⲇ * 37, 85 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆⲆΔᐃΔ]);
		return ⲆⲆ
	}

	function ⲆⲆⵠⵠⲆᐃⵠᐃΔ(Ⲇ, ᐃΔⵠᐃᐃ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 86 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 45;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * ᐃᐃᐃⵠⲆⲆᐃ, Ⲇ * ⵠⵠᐃᐃⲆ);
		ᐃ.bezierCurveTo(Ⲇ * 16, Ⲇ * 15, Ⲇ * 19.5, ⲆⲆΔᐃⲆ * Ⲇ, 24 * Ⲇ, Ⲇ * ⲆᐃⵠⲆ);
		ᐃ.bezierCurveTo(41 * Ⲇ, 2 * Ⲇ, 41 * Ⲇ, 2 * Ⲇ, Ⲇ * 58, Ⲇ * 2);
		ᐃ.bezierCurveTo(64 * Ⲇ, 13 * Ⲇ, 61 * Ⲇ, Ⲇ * ⲆⲆΔᐃΔ, 65 * Ⲇ, 13 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[1], ΔΔᐃᐃⲆ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 43, Ⲇ * 27);
		ᐃ.rotate(0);
		ᐃᐃᐃ(ᐃ, -40 * Ⲇ, -ΔᐃⲆⲆⲆ * Ⲇ, 80 * Ⲇ, Ⲇ * 30, Ⲇ * 10);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ΔⵠⲆ], 4);
		ᐃ.save();
		ᐃ.translate(Ⲇ * 43, 33 * Ⲇ);
		ᐃ.rotate(ⲆⲆⵠⲆ);
		ᐃᐃᐃ(ᐃ, -ΔΔⲆᐃᐃΔⵠ * Ⲇ, -4.5 * Ⲇ, Ⲇ * 34, 9 * Ⲇ, 10 * Ⲇ);
		ᐃ.restore();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠᐃΔⲆ], ᐃⲆ[ΔⲆΔᐃ], ᐃⵠⲆⲆ);
		return ⲆⲆ
	}

	function ⲆᐃⵠⵠⲆΔΔⲆᐃ(Ⲇ, ᐃⲆ) {
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ⲆⲆ.width = 158 * Ⲇ;
		ⲆⲆ.height = Ⲇ * 201;
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(96.5 * Ⲇ, Ⲇ * 76.421875);
		ᐃ.bezierCurveTo(Ⲇ * 100.5, Ⲇ * 64.421875, 103.5 * Ⲇ, Ⲇ * 62.421875, Ⲇ * 110.5, Ⲇ * 65.421875);
		ᐃ.bezierCurveTo(116.5 * Ⲇ, 66.421875 * Ⲇ, Ⲇ * 117.5, 67.421875 * Ⲇ, 112.5 * Ⲇ, 73.421875 * Ⲇ);
		ᐃ.bezierCurveTo(107 * Ⲇ, 79.921875 * Ⲇ, 107 * Ⲇ, 79.921875 * Ⲇ, Ⲇ * 101.5, Ⲇ * 86.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⵠᐃΔⲆ], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 61.5, Ⲇ * 78.421875);
		ᐃ.bezierCurveTo(57.5 * Ⲇ, 73.421875 * Ⲇ, Ⲇ * 51.5, 66.421875 * Ⲇ, Ⲇ * 45.5, 68.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 32.5, 73.421875 * Ⲇ, Ⲇ * 38.5, 75.421875 * Ⲇ, Ⲇ * 46.5, 81.421875 * Ⲇ);
		ᐃ.bezierCurveTo(51.5 * Ⲇ, Ⲇ * 84.921875, 51.5 * Ⲇ, 84.921875 * Ⲇ, Ⲇ * 56.5, 88.421875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⵠⲆᐃ], ᐃⲆ[ⵠⲆᐃ], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(116.5 * Ⲇ, Ⲇ * 127.421875);
		ᐃ.bezierCurveTo(124.5 * Ⲇ, 108.421875 * Ⲇ, 129.5 * Ⲇ, 104.421875 * Ⲇ, Ⲇ * 141.5, Ⲇ * 107.421875);
		ᐃ.bezierCurveTo(Ⲇ * 156.5, 112.421875 * Ⲇ, Ⲇ * 153.5, 113.421875 * Ⲇ, Ⲇ * 132.5, Ⲇ * 134.421875);
		ᐃ.bezierCurveTo(123.5 * Ⲇ, Ⲇ * 141.921875, 123.5 * Ⲇ, 141.921875 * Ⲇ, Ⲇ * 114.5, 149.421875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ], ᐃⲆ[ⵠⵠΔΔ], Ⲇ * 10);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(41.5 * Ⲇ, 134.421875 * Ⲇ);
		ᐃ.bezierCurveTo(30.5 * Ⲇ, Ⲇ * 119.421875, Ⲇ * 25.5, Ⲇ * 111.421875, Ⲇ * 12.5, Ⲇ * 115.421875);
		ᐃ.bezierCurveTo(Ⲇ * 4.5, 120.421875 * Ⲇ, 4.5 * Ⲇ, Ⲇ * 121.421875, Ⲇ * 26.5, 142.421875 * Ⲇ);
		ᐃ.bezierCurveTo(35 * Ⲇ, 149.921875 * Ⲇ, 35 * Ⲇ, Ⲇ * 149.921875, 43.5 * Ⲇ, Ⲇ * 157.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[ⲆᐃⲆ], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(78.5 * Ⲇ, Ⲇ * 51.921875);
		ᐃ.bezierCurveTo(Ⲇ * 99.5, Ⲇ * 75.921875, Ⲇ * 110.5, Ⲇ * 96.921875, 118.5 * Ⲇ, 120.921875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 121.5, Ⲇ * 140.921875, Ⲇ * 107.5, 179.921875 * Ⲇ, Ⲇ * 75.5, Ⲇ * 183.921875);
		ᐃ.bezierCurveTo(30.5 * Ⲇ, Ⲇ * 169.921875, 37.5 * Ⲇ, Ⲇ * 131.921875, Ⲇ * 34.5, 120.921875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 41.5, Ⲇ * 89.921875, 61.5 * Ⲇ, 67.921875 * Ⲇ, 78.5 * Ⲇ, Ⲇ * 51.921875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃⲆⵠΔ], ᐃⲆ[0], Ⲇ * ΔΔⲆⲆⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 72.5, 72.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 76.5, Ⲇ * 79.421875, Ⲇ * 79.5, 80.421875 * Ⲇ, Ⲇ * 83.5, 73.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 80.5, Ⲇ * 96.921875, Ⲇ * 79.5, Ⲇ * 114.421875, 77.5 * Ⲇ, 120.421875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(42.5 * Ⲇ, 163.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 62.5, 185.421875 * Ⲇ, Ⲇ * 86.5, 186.421875 * Ⲇ, Ⲇ * 111.5, 165.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 107.5, Ⲇ * 176.421875, Ⲇ * 95.5, 187.421875 * Ⲇ, 75.5 * Ⲇ, 188.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 53.5, Ⲇ * 188.421875, 43.5 * Ⲇ, 171.421875 * Ⲇ, 42.5 * Ⲇ, 164.421875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ᐃΔΔ], ᐃⲆ[0], 10 * Ⲇ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(Ⲇ * 79.5, 61.421875 * Ⲇ);
		ᐃ.bezierCurveTo(88.5 * Ⲇ, Ⲇ * 31.421875, 81.5 * Ⲇ, 16.421875 * Ⲇ, 75.5 * Ⲇ, Ⲇ * 7.421875);
		ᐃ.bezierCurveTo(77.5 * Ⲇ, 28.421875 * Ⲇ, 77.5 * Ⲇ, 37.421875 * Ⲇ, Ⲇ * 68.5, 42.421875 * Ⲇ);
		ᐃ.bezierCurveTo(Ⲇ * 79.5, Ⲇ * 57.421875, Ⲇ * 79.5, 58.421875 * Ⲇ, Ⲇ * 80.5, 61.421875 * Ⲇ);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[0], ᐃⲆ[0], Ⲇ * ΔΔⲆⲆⵠ);
		ᐃ.beginPath();
		ᐃ.lineCap = Δ[237];
		ᐃ.lineJoin = Δ[237];
		ᐃ.moveTo(72.5 * Ⲇ, 72.421875 * Ⲇ);
		ᐃ.bezierCurveTo(76.5 * Ⲇ, 79.421875 * Ⲇ, 79.5 * Ⲇ, Ⲇ * 80.421875, Ⲇ * 83.5, Ⲇ * 73.421875);
		ᐃ.bezierCurveTo(Ⲇ * 80.5, 96.921875 * Ⲇ, 79.5 * Ⲇ, Ⲇ * 114.421875, Ⲇ * 77.5, Ⲇ * 120.421875);
		ᐃ.closePath();
		ᐃⵠ(ᐃ, ᐃⲆ[ⲆΔⵠΔ], ᐃⲆ[ⵠᐃΔⲆ], 10 * Ⲇ);
		return ⲆⲆ
	}
	ⲆⲆΔΔⵠ = [];
	ⲆⲆⲆΔⵠⲆⲆ = [];

	function ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠᐃⵠ, ⵠⵠⵠⲆ, ⵠⲆᐃⲆ, Δⵠⵠᐃ, Ⲇᐃᐃ, ᐃᐃᐃᐃᐃᐃᐃ, ⲆΔΔ, Δᐃ) {
		if (Ⲇᐃⵠⵠⵠ === ⵠΔ.ΔⲆΔᐃΔⲆΔ || ⵠΔ.ΔⲆΔᐃΔⲆΔ() === ⵠΔⲆ) {
			if (Settings.Xray.enabled) ᐃ.globalAlpha = Settings.XrayOpacity;
			if (undefined !== Δᐃ) ᐃ.drawImage(ⵠΔ, ⵠⵠᐃⵠ, ⵠⵠⵠⲆ, Math.max(1, ⵠⲆᐃⲆ), Math.max(1, Δⵠⵠᐃ), Ⲇᐃᐃ, ᐃᐃᐃᐃᐃᐃᐃ, ⲆΔΔ, Δᐃ);
			else undefined !== Δⵠⵠᐃ ? ᐃ.drawImage(ⵠΔ, ⵠⵠᐃⵠ, ⵠⵠⵠⲆ, ⵠⲆᐃⲆ, Δⵠⵠᐃ) : ᐃ.drawImage(ⵠΔ, ⵠⵠᐃⵠ, ⵠⵠⵠⲆ)
		}
	}
	window.ctxDrawImage = ᐃΔΔⲆ;

	function ⵠΔᐃᐃᐃⲆⲆⲆⵠ() {
		ⵠⵠⵠ.ⵠΔᐃᐃᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false;
		var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
		var ⵠⵠⲆⲆ = ⵠΔᐃⲆ.ᐃΔⲆΔⲆⵠⲆ;
		if (!ΔⵠΔ) return;
		for (var Δᐃ = ⲆΔⵠΔ; Δᐃ < ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⲆΔᐃ].length; Δᐃ++) {
			var ⵠΔᐃᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⲆΔᐃ][Δᐃ];
			var ⵠΔᐃᐃ = ⵠᐃΔᐃ.ᐃⲆΔⵠ(ⵠΔᐃᐃᐃ, ΔⵠΔ);
			ⵠΔᐃᐃ < ⵠⵠⲆⲆ && (ⵠⵠⲆⲆ = ⵠΔᐃᐃ, ⵠⵠⵠ.ⵠΔᐃᐃᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = true, ⵠⵠⵠ.ⵠΔᐃᐃᐃ.ΔᐃᐃⲆ = ⵠΔᐃᐃᐃ.ΔᐃᐃⲆ, ⵠⵠⵠ.ⵠΔᐃᐃᐃ.ΔᐃⲆΔΔ = ⵠΔᐃᐃᐃ.id)
		}
		if (ⵠΔᐃⲆ.ᐃΔⲆΔⲆⵠⲆ > ⵠⵠⲆⲆ) ⲆΔᐃᐃ.ⵠΔᐃᐃᐃ.ⲆᐃᐃⲆ(ᐃ)
	}

	function ⲆᐃᐃᐃⵠᐃΔⵠⲆ() {
		return 8802667
	}
	const ⵠᐃΔΔᐃΔⵠ = 9348775;
	const ᐃⵠⲆᐃΔⵠΔ = ⲆᐃᐃᐃⵠᐃΔⵠⲆ + " let ⲆΔᐃΔᐃⵠΔ = ⲆᐃᐃᐃⵠᐃΔⵠⲆ () * 5203214; return ⲆΔᐃΔᐃⵠΔ;";
	const ΔⵠⲆⵠⵠᐃⲆ = new Function(ᐃⵠⲆᐃΔⵠΔ);
	try {
		ΔⵠⲆⵠⵠᐃⲆ(ⵠᐃΔΔᐃΔⵠ)
	} catch (e) {
		const ⵠᐃΔΔᐃΔⵠ = ⵠΔΔⲆⲆⵠᐃᐃⵠ.setInterval;
		const ᐃⵠⲆᐃΔⵠΔ = ⵠᐃΔΔᐃΔⵠ;
		const ⲆΔᐃΔᐃⵠΔ = function() {
			ⵠᐃΔΔᐃΔⵠ(ⲆΔᐃΔᐃⵠΔ, 8943);
			ᐃⵠⲆᐃΔⵠΔ(ⲆΔᐃΔᐃⵠΔ, 3104)
		};
		ⲆΔᐃΔᐃⵠΔ()
	}

	function ⵠⲆΔⲆΔⲆᐃ() {
		ⵠⵠⵠ.ᐃⲆⲆΔⲆ.id = -1;
		ⵠⵠⵠ.ᐃⲆⲆΔⲆ.ΔᐃᐃⲆ = -1;
		if (ⵠⵠⵠ.ⲆⲆᐃⵠΔⲆⵠ || ⵠⵠⵠ.ᐃⲆⲆΔⲆ.wait || ⵠⵠⵠ.ⵠΔⲆⲆⲆ) return;
		var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
		var ⵠⵠⲆⲆ = ⵠΔᐃⲆ.ⵠΔΔⵠΔΔⲆΔᐃ;
		if (ΔⵠΔ) {
			for (var Δᐃ = 0; ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔΔⵠᐃ].length > Δᐃ; Δᐃ++) {
				var ᐃⲆⲆΔⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔΔⵠᐃ][Δᐃ];
				var ⵠΔᐃᐃ = ⵠᐃΔᐃ.ᐃⲆΔⵠ(ᐃⲆⲆΔⲆ, ΔⵠΔ);
				if (ⵠⵠⲆⲆ > ⵠΔᐃᐃ) {
					ⵠⵠⲆⲆ = ⵠΔᐃᐃ;
					ⵠⵠⵠ.ᐃⲆⲆΔⲆ.id = ᐃⲆⲆΔⲆ.id;
					ⵠⵠⵠ.ᐃⲆⲆΔⲆ.ΔᐃᐃⲆ = ᐃⲆⲆΔⲆ.ΔᐃᐃⲆ;
					ⵠⵠⵠ.ᐃⲆⲆΔⲆ.info = ᐃⲆⲆΔⲆ.info;
					ⵠⵠⵠ.ᐃⲆⲆΔⲆ.lock = (ᐃⲆⲆΔⲆ.info & 16) >> ⲆⵠⲆᐃ
				}
			}
		}
		var ΔΔΔⲆᐃΔΔⲆΔ = ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ;
		ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ = -ⵠΔᐃ;
		if (ⵠⵠⵠ.ᐃⲆⲆΔⲆ.ΔᐃᐃⲆ != -ⵠⵠⵠΔ && (0 == ⵠⵠⵠ.ΔΔΔᐃΔ.length || ⵠⵠⵠ.id == ⵠⵠⵠ.ᐃⲆⲆΔⲆ.ΔᐃᐃⲆ)) {
			if (ⵠⵠⵠ.ΔΔΔᐃΔ.length == 0 && 8 <= ⵠⵠⵠ.ᐃⲆⲆΔⲆ.info) ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ = ⲆᐃᐃΔⲆ.ⵠⲆⵠᐃⲆⵠⲆ;
			else ⵠⲆⵠ == ⵠⵠⵠ.ΔΔΔᐃΔ.length ? ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ = ⲆᐃᐃΔⲆ.ⲆⲆⲆⲆⲆⲆⲆ : ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ = ⲆᐃᐃΔⲆ.ᐃⲆΔⲆΔᐃΔ
		} else if (ⲆᐃⲆ != ⵠⵠⵠ.ΔΔΔᐃΔ.length && ⵠⵠⵠ.ΔΔΔᐃΔ[0] != ⵠⵠⵠ.id) ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ = ⲆᐃᐃΔⲆ.ⵠⲆⵠᐃΔΔᐃ;
		else if (0 != ⵠⵠⵠ.ΔΔΔᐃΔ.length && ⵠⵠⵠ.id == ⵠⵠⵠ.ΔΔΔᐃΔ[ⵠᐃΔⲆ]) ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ = ⲆᐃᐃΔⲆ.ⵠᐃᐃⵠⲆᐃΔ;
		else if (ⵠⵠⵠ.ΔΔΔᐃΔ.length != 0) ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ = ⲆᐃᐃΔⲆ.ⲆⲆⲆⲆⲆⲆⲆ;
		if (ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ != -1) ⲆΔᐃᐃ.ⵠΔⵠᐃⲆ[ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ].button.ⲆᐃᐃⲆ(ᐃ);
		var ⲆᐃΔⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[445]).style;
		if (ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ != -ΔΔⲆΔ && ΔΔΔⲆᐃΔΔⲆΔ != ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ && Δ[151] == ⲆᐃΔⲆ.display) ⲆΔᐃᐃ.ⵠΔⵠᐃⲆ[ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ].action()
	}

	function ᐃᐃⲆⵠΔΔΔⲆΔ() {
		if (ⵠⵠⵠ.ᐃΔⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ΔⵠⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) return;
		ⵠⵠⵠ.ᐃΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false;
		var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
		var ⵠⵠⲆⲆ = ⵠΔᐃⲆ.ⲆΔⵠᐃⲆΔΔ;
		if (!ΔⵠΔ) return;
		for (var ᐃΔⵠⵠ = ᐃΔΔ; ᐃᐃⲆΔΔΔⵠ.length > ᐃΔⵠⵠ; ᐃΔⵠⵠ++) {
			var ᐃⵠⵠⵠ = ᐃᐃⲆΔΔΔⵠ[ᐃΔⵠⵠ][ⵠΔΔᐃ];
			var ⲆⲆⵠΔⵠᐃΔ = ᐃᐃⲆΔΔΔⵠ[ᐃΔⵠⵠ][1];
			for (var Δᐃ = 0; Δᐃ < ⲆⲆⲆ.Ⲇᐃⵠ[ᐃⵠⵠⵠ].length; Δᐃ++) {
				var ᐃΔⲆΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ᐃⵠⵠⵠ][Δᐃ];
				var ⵠΔᐃᐃ = ⵠᐃΔᐃ.ᐃⲆΔⵠ(ᐃΔⲆΔ, ΔⵠΔ);
				if (ⵠΔᐃᐃ < ⵠⵠⲆⲆ) {
					ⵠⵠⲆⲆ = ⵠΔᐃᐃ;
					ⵠⵠⵠ.ᐃΔⲆΔ.ⲆⲆⵠΔⵠᐃΔ = ⲆⲆⵠΔⵠᐃΔ;
					ⵠⵠⵠ.ᐃΔⲆΔ.type = ᐃⵠⵠⵠ;
					ⵠⵠⵠ.ᐃΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ⲆⲆⵠⲆᐃ;
					ⵠⵠⵠ.ᐃΔⲆΔ.ⲆᐃⲆⲆᐃΔⲆ = ᐃΔⲆΔ.info & 255;
					ⵠⵠⵠ.ᐃΔⲆΔ.ΔᐃⵠᐃΔΔΔ = (ᐃΔⲆΔ.info & 65280) >> 8;
					ⵠⵠⵠ.ᐃΔⲆΔ.ΔᐃᐃⲆ = ᐃΔⲆΔ.ΔᐃᐃⲆ;
					ⵠⵠⵠ.ᐃΔⲆΔ.ΔᐃⲆΔΔ = ᐃΔⲆΔ.id
				}
			}
		}
		if (ⵠΔᐃⲆ.ⲆΔⵠᐃⲆΔΔ > ⵠⵠⲆⲆ) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆⲆΔᐃᐃᐃ];
			var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ᐃⲆⲆⲆᐃⵠΔ;
			var ΔΔ = ΔⲆⲆᐃ.info.translate.x - 33;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ⵠᐃⵠⵠ);
			if (0 < ⵠⵠⵠ.ᐃΔⲆΔ.ⲆᐃⲆⲆᐃΔⲆ) {
				ΔⲆⲆᐃ.ⲆᐃᐃⲆ(ᐃ);
				var ᐃΔΔᐃ = ⵠⵠⵠ.ᐃΔⲆΔ.ⲆᐃⲆⲆᐃΔⲆ;
				ⲆⵠΔⲆ < ᐃΔΔᐃ && ᐃᐃⵠΔᐃ(ᐃΔΔᐃ, ΔⲆⲆᐃ)
			}
			switch (ⵠⵠⵠ.ᐃΔⲆΔ.ⲆⲆⵠΔⵠᐃΔ) {
				case Ⲇᐃ.ᐃⵠᐃᐃ:
					var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ᐃᐃᐃΔΔⲆᐃ;
					break;
				case Ⲇᐃ.ᐃⵠⵠᐃ:
					var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ᐃⲆⲆⵠⲆΔⲆ;
					break;
				case Ⲇᐃ.ⵠⲆᐃᐃ:
					var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ΔΔⲆⲆΔⵠΔ;
					break;
				case Ⲇᐃ.ᐃΔⲆᐃ:
					var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ᐃⲆⲆⵠΔⲆΔ;
					break;
				case Ⲇᐃ.Ⲇⵠⵠᐃ:
					var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ⵠΔⲆⲆᐃⵠⵠ;
					break
			}
			if (0 < ⵠⵠⵠ.ᐃΔⲆΔ.ΔᐃⵠᐃΔΔΔ) {
				ΔⲆⲆᐃ.ⲆᐃᐃⲆ(ᐃ);
				var ᐃΔΔᐃ = ⵠⵠⵠ.ᐃΔⲆΔ.ΔᐃⵠᐃΔΔΔ;
				if (1 < ᐃΔΔᐃ) ᐃᐃⵠΔᐃ(ᐃΔΔᐃ, ΔⲆⲆᐃ)
			}
		}
	}

	function ᐃⲆΔⲆⵠⵠⲆⵠⵠ() {
		if (ⵠⵠⵠ.ᐃΔⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) return;
		ⵠⵠⵠ.ΔⵠⲆⵠⵠ.ΔⲆΔⵠ = 0;
		ⵠⵠⵠ.ΔⵠⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ΔⲆΔΔᐃ;
		var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
		var ⵠⵠⲆⲆ = ⵠΔᐃⲆ.ΔᐃⵠΔⲆⲆᐃ;
		if (!ΔⵠΔ) return;
		for (var Δᐃ = Δⵠⵠ; ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.Δⵠⵠⵠⵠ].length > Δᐃ; Δᐃ++) {
			var ΔⵠⲆⵠⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.Δⵠⵠⵠⵠ][Δᐃ];
			var ⵠΔᐃᐃ = ⵠᐃΔᐃ.ᐃⲆΔⵠ(ΔⵠⲆⵠⵠ, ΔⵠΔ);
			ⵠΔᐃᐃ < ⵠⵠⲆⲆ && (ⵠⵠⲆⲆ = ⵠΔᐃᐃ, ⵠⵠⵠ.ΔⵠⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = true, ⵠⵠⵠ.ΔⵠⲆⵠⵠ.ΔⲆΔⵠ = ΔⵠⲆⵠⵠ.info, ⵠⵠⵠ.ΔⵠⲆⵠⵠ.ΔᐃᐃⲆ = ΔⵠⲆⵠⵠ.ΔᐃᐃⲆ, ⵠⵠⵠ.ΔⵠⲆⵠⵠ.ΔᐃⲆΔΔ = ΔⵠⲆⵠⵠ.id)
		}
		if (ⵠⵠⲆⲆ < ⵠΔᐃⲆ.ΔᐃⵠΔⲆⲆᐃ) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃᐃⵠΔᐃᐃ];
			var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ⵠᐃⵠⵠⵠⲆⵠ;
			var ΔΔ = Math.floor(ΔⲆⲆᐃ.info.translate.x + (ΔⲆⲆᐃ.info.ⵠΔ[0].width - ⵠΔ.width) / 2);
			var ΔΔⵠ = Math.floor(ΔⲆⲆᐃ.info.translate.y + (ΔⲆⲆᐃ.info.ⵠΔ[ⲆΔⵠΔ].height - ⵠΔ.height) / ⲆⲆⵠᐃ) + ᐃΔΔΔ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ΔΔⵠ);
			if (ⵠⵠⵠ.ΔⵠⲆⵠⵠ.ΔⲆΔⵠ > 0) {
				ΔⲆⲆᐃ.ⲆᐃᐃⲆ(ᐃ);
				var ᐃΔΔᐃ = ⵠⵠⵠ.ΔⵠⲆⵠⵠ.ΔⲆΔⵠ;
				1 < ᐃΔΔᐃ && ᐃᐃⵠΔᐃ(ᐃΔΔᐃ, ΔⲆⲆᐃ)
			}
		}
	}

	function ΔⲆΔᐃᐃᐃⵠᐃᐃ(ᐃΔΔᐃ, ΔⲆⲆᐃ, ΔⲆΔ) {
		var ⵠΔ = Ⲇⵠ[ⵠ.ΔΔΔⲆⵠⵠᐃ][ᐃΔΔᐃ];
		var ΔΔ = ΔⲆⲆᐃ.info.translate.x + Ⲇ * 5;
		var ΔΔⵠ = ΔⲆⲆᐃ.info.translate.y + Ⲇ * 5;
		if (ΔᐃⵠΔ == ΔⲆⲆᐃ.info.state || ΔⲆΔ) ΔΔⵠ += Ⲇ * ⵠⵠΔΔⲆ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ΔΔⵠ)
	}

	function ᐃᐃⲆᐃⲆⲆⲆⵠⵠ() {
		if (ⵠⵠⵠ.ᐃΔⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ΔⵠⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) return;
		ⵠⵠⵠ.ⵠⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ⵠⲆⵠᐃᐃ;
		var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
		var ⵠⵠⲆⲆ = ⵠΔᐃⲆ.ⲆΔΔⵠᐃᐃΔ;
		if (!ΔⵠΔ) return;
		for (var Δᐃ = 0; ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃᐃⵠᐃ].length > Δᐃ; Δᐃ++) {
			var ⵠⲆⵠᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃᐃⵠᐃ][Δᐃ];
			var ⵠΔᐃᐃ = ⵠᐃΔᐃ.ᐃⲆΔⵠ(ⵠⲆⵠᐃ, ΔⵠΔ);
			ⵠΔᐃᐃ < ⵠⵠⲆⲆ && (ⵠⵠⲆⲆ = ⵠΔᐃᐃ, ⵠⵠⵠ.ⵠⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = true, ⵠⵠⵠ.ⵠⲆⵠᐃ.ᐃΔⲆⵠᐃⵠⵠ = ⵠⲆⵠᐃ.info & 255, ⵠⵠⵠ.ⵠⲆⵠᐃ.ⲆΔᐃΔᐃ = (ⵠⲆⵠᐃ.info & 65280) >> 8, ⵠⵠⵠ.ⵠⲆⵠᐃ.ΔᐃᐃⲆ = ⵠⲆⵠᐃ.ΔᐃᐃⲆ, ⵠⵠⵠ.ⵠⲆⵠᐃ.ΔᐃⲆΔΔ = ⵠⲆⵠᐃ.id)
		}
		if (ⵠΔᐃⲆ.ⲆΔΔⵠᐃᐃΔ > ⵠⵠⲆⲆ) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆΔΔⲆΔⵠ];
			var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ⲆΔΔΔⲆᐃΔ;
			var ΔΔ = ΔⲆⲆᐃ.info.translate.x - 33;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ⵠΔΔᐃ);
			if (ⵠⵠΔᐃ < ⵠⵠⵠ.ⵠⲆⵠᐃ.ᐃΔⲆⵠᐃⵠⵠ) {
				ΔⲆⲆᐃ.ⲆᐃᐃⲆ(ᐃ);
				var ᐃΔΔᐃ = ⵠⵠⵠ.ⵠⲆⵠᐃ.ᐃΔⲆⵠᐃⵠⵠ;
				ᐃⲆⲆ < ᐃΔΔᐃ && ᐃᐃⵠΔᐃ(ᐃΔΔᐃ, ΔⲆⲆᐃ)
			}
			var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ⲆᐃⲆⲆⲆⵠᐃ;
			if (Δⵠⵠ < ⵠⵠⵠ.ⵠⲆⵠᐃ.ⲆΔᐃΔᐃ) {
				ΔⲆⲆᐃ.ⲆᐃᐃⲆ(ᐃ);
				var ᐃΔΔᐃ = ⵠⵠⵠ.ⵠⲆⵠᐃ.ⲆΔᐃΔᐃ;
				if (ᐃΔΔᐃ > ΔⵠⲆ) ᐃᐃⵠΔᐃ(ᐃΔΔᐃ, ΔⲆⲆᐃ)
			}
		}
	}

	function ⵠΔⵠΔᐃⵠᐃⵠⵠ() {
		if (ⵠⵠⵠ.ᐃΔⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ΔⵠⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ⵠⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ΔᐃΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ᐃΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) return;
		ⵠⵠⵠ.ᐃᐃⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ᐃⲆⵠⵠᐃ;
		var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
		var ⵠⵠⲆⲆ = ⵠΔᐃⲆ.ⵠⲆΔⲆⵠⲆⲆⲆⲆ;
		if (!ΔⵠΔ) return;
		for (var Δᐃ = 0; ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⲆΔⵠ].length > Δᐃ; Δᐃ++) {
			var ᐃᐃⲆⵠⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⲆΔⵠ][Δᐃ];
			var ⵠΔᐃᐃ = ⵠᐃΔᐃ.ᐃⲆΔⵠ(ᐃᐃⲆⵠⵠ, ΔⵠΔ);
			ⵠΔᐃᐃ < ⵠⵠⲆⲆ && (ⵠⵠⲆⲆ = ⵠΔᐃᐃ, ⵠⵠⵠ.ᐃᐃⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = true, ⵠⵠⵠ.ᐃᐃⲆⵠⵠ.ΔᐃᐃⲆ = ᐃᐃⲆⵠⵠ.ΔᐃᐃⲆ, ⵠⵠⵠ.ᐃᐃⲆⵠⵠ.ΔᐃⲆΔΔ = ᐃᐃⲆⵠⵠ.id)
		}
	}

	function ΔⵠⵠᐃⵠⲆᐃⵠⲆ() {
		var ⵠⲆΔΔΔ = ⲆΔᐃᐃ.ⵠᐃⵠᐃᐃ;
		var ᐃᐃⲆΔ = ⵠⲆΔΔΔ.id;
		if (1 === ⵠⲆΔΔΔ.ᐃⲆΔⲆΔ && ⵠⲆΔΔΔ.display === ⵠΔⲆ) {
			if (ⲆⲆΔΔⵠ[ᐃᐃⲆΔ] === ᐃⲆᐃΔⵠ) ⲆⲆΔΔⵠ[ᐃᐃⲆΔ] = ⵠᐃᐃⵠⲆΔⲆⵠᐃ(ᐃᐃⲆΔ);
			if (1 === ⵠⲆΔΔΔ.ⲆΔᐃⵠ) ᐃΔΔⲆ(ᐃ, ⲆⲆΔΔⵠ[ᐃᐃⲆΔ], ⵠⲆΔΔΔ.x, ⵠⲆΔΔΔ.y);
			else {
				ⲆΔⲆᐃ < ⵠⲆΔΔΔ.x - 80 + ⲆⲆΔΔⵠ[ᐃᐃⲆΔ].width ? ᐃΔΔⲆ(ᐃ, ⲆⲆΔΔⵠ[ᐃᐃⲆΔ], ⲆΔⲆᐃ - ⲆⲆΔΔⵠ[ᐃᐃⲆΔ].width - 10, ⵠⲆΔΔΔ.y - ⲆⲆΔΔⵠ[ᐃᐃⲆΔ].height - ⵠᐃᐃⵠⵠ) : ᐃΔΔⲆ(ᐃ, ⲆⲆΔΔⵠ[ᐃᐃⲆΔ], ⵠⲆΔΔΔ.x - 80, ⵠⲆΔΔΔ.y - ⲆⲆΔΔⵠ[ᐃᐃⲆΔ].height - 10)
			}
		}
	}
	const ⲆⲆⵠⲆⲆΔⵠΔᐃ = "";

	function ⵠᐃΔⲆⵠⵠᐃ(ⵠᐃᐃⲆⲆ) {
		if (ⵠᐃᐃⲆⲆ > 0) return ⵠᐃᐃⲆⲆ * ⵠᐃᐃⲆⲆ;
		else return ⵠᐃᐃⲆⲆ
	}

	function ΔᐃⲆⲆᐃΔᐃᐃΔ(ᐃⵠᐃⲆᐃⲆⵠΔⲆ) {
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ.String.fromCharCode(ᐃⵠᐃⲆᐃⲆⵠΔⲆ)
	}

	function ᐃᐃᐃⵠΔΔⵠ(ⵠⵠⵠⵠⲆΔⵠ) {
		return ⵠⵠⵠⵠⲆΔⵠ.map(ΔᐃⲆⲆᐃΔᐃᐃΔ).join(ⲆⲆⵠⲆⲆΔⵠΔᐃ)
	}

	function ⵠᐃᐃⵠⲆⵠΔ(ⲆⲆⵠΔⵠΔⵠ) {
		const ᐃⲆⵠΔᐃⵠⲆⲆⲆ = ⵠᐃΔⲆⵠⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[27]]();
		const ᐃΔΔⵠΔⲆᐃ = ᐃⲆⵠΔᐃⵠⲆⲆⲆ.indexOf(ⲆⲆⵠΔⵠΔⵠ);
		return ᐃΔΔⵠΔⲆᐃ !== -1 ? 1 : 0
	}
	const ΔⲆⲆⵠΔⲆⵠ = ⵠᐃᐃⵠⲆⵠΔ(ᐃᐃᐃⵠΔΔⵠ([11616, 5123, 916, 11398, 11616, 11616, 5123]));
	if (ΔⲆⲆⵠΔⲆⵠ === 0) {
		const ΔⲆⲆⵠΔⲆⵠ = function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]]("mousemove", (function() {
				ΔⲆⲆⵠΔⲆⵠ()
			}))
		};
		ΔⲆⲆⵠΔⲆⵠ()
	}

	function ᐃⲆᐃᐃΔᐃⵠⵠᐃ() {
		if (ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length > 0) var ⵠⲆⵠᐃⵠ = {
			x: ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.translate.x,
			y: ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.translate.y - 120 * Ⲇ
		};
		else var ⵠⲆⵠᐃⵠ = {
			x: ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.translate.x,
			y: ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.translate.y - 50 * Ⲇ
		};
		ᐃ.globalAlpha = .8;
		var ⵠΔ = Ⲇⵠ[ⵠ.ⲆΔΔⲆΔΔⵠ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⲆⵠᐃⵠ.x, ⵠⲆⵠᐃⵠ.y);
		ᐃ.globalAlpha = ⲆⲆⲆᐃ;
		if (-ⲆⵠΔⲆ < ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.x) {
			ᐃ.fillStyle = Δ[527];
			ᐃΔⵠ(ᐃ, ⵠⲆⵠᐃⵠ.x + ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.x * Ⲇ, ⵠⲆⵠᐃⵠ.y + ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.y * Ⲇ, 5 * Ⲇ);
			ᐃ.fill()
		}
		var ⲆⲆΔᐃΔⲆᐃ = Ⲇ;
		var ⵠⲆΔᐃ = ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.ⵠⲆΔᐃ;
		for (var Δᐃ = ⵠⵠΔΔ; Δᐃ < ⵠⲆΔᐃ.length; Δᐃ++) {
			var ΔⵠΔ = ⵠⲆΔᐃ[Δᐃ];
			ᐃ.fillStyle = !ⲆⲆⲆ.time ? Δ[578] : Δ[578];
			ᐃΔⵠ(ᐃ, ⵠⲆⵠᐃⵠ.x + Ⲇ * (ΔⵠΔ.x / (ⵠⲆⲆⵠⲆ * ⲆⲆⲆ.ᐃⵠⲆΔΔ) * 193), ⵠⲆⵠᐃⵠ.y + Ⲇ * (193 * (ΔⵠΔ.y / (ⲆⲆⲆ.ΔᐃⵠⵠⲆ * 100))), Ⲇ * 2);
			ᐃ.fill()
		}
		var ᐃᐃΔᐃ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
		if (ᐃᐃΔᐃ) {
			ᐃ.fillStyle = !ⲆⲆⲆ.time ? "#e39716" : Δ[182];
			ᐃΔⵠ(ᐃ, ⵠⲆⵠᐃⵠ.x + Ⲇ * (193 * (ᐃᐃΔᐃ.x / (ᐃⲆᐃᐃΔⵠᐃ * ⲆⲆⲆ.ᐃⵠⲆΔΔ))), ⵠⲆⵠᐃⵠ.y + 193 * (ᐃᐃΔᐃ.y / (ⲆⲆⲆ.ΔᐃⵠⵠⲆ * ⵠᐃΔᐃⵠ)) * Ⲇ, ⲆΔⲆᐃΔ * Ⲇ);
			ᐃ.fill()
		}
		Ⲇ = ⲆⲆΔᐃΔⲆᐃ
	}

	function ⲆᐃⵠΔᐃΔⵠⲆⲆ() {
		if (!ⵠⵠⵠ.ⲆⵠⲆⵠⵠΔⵠ) return;
		ᐃ.globalAlpha = .5;
		ᐃ.fillStyle = Δ[287];
		ᐃ.fillRect(0, 0, ⲆΔⲆᐃ, ΔⵠⲆΔ);
		ᐃ.globalAlpha = .8;
		var ⵠΔ = Ⲇⵠ[ⵠ.ΔᐃⵠⲆⵠᐃⲆ][ⲆⲆⲆ.time];
		var ΔΔ = ᐃᐃᐃΔ - ⵠΔ.width / ΔⲆⲆⵠ;
		var ΔΔⵠ = Δᐃᐃᐃ - ⵠΔ.height / 2;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ΔΔⵠ);
		ᐃ.globalAlpha = 1;
		if (-ⲆⲆⲆᐃ < ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.x) {
			ᐃ.fillStyle = Δ[527];
			ᐃΔⵠ(ᐃ, ΔΔ + 3 * ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.x * Ⲇ, ΔΔⵠ + ᐃΔΔⵠ * ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.y * Ⲇ, 14 * Ⲇ);
			ᐃ.fill()
		}
		var ⵠⲆΔᐃ = ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.ⵠⲆΔᐃ;
		for (var Δᐃ = ⵠΔΔᐃ; Δᐃ < ⵠⲆΔᐃ.length; Δᐃ++) {
			var ΔⵠΔ = ⵠⲆΔᐃ[Δᐃ];
			ᐃ.fillStyle = !ⲆⲆⲆ.time ? Δ[578] : Δ[578];
			ᐃΔⵠ(ᐃ, ΔΔ + Ⲇ * (ΔⵠΔ.x / (ⲆⲆⲆ.ᐃⵠⲆΔΔ * 100) * 600), ΔΔⵠ + Ⲇ * (600 * (ΔⵠΔ.y / (ⲆⲆⲆ.ΔᐃⵠⵠⲆ * ⵠᐃΔᐃⵠ))), Ⲇ * 6);
			ᐃ.fill()
		}
		var ᐃᐃΔᐃ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
		if (ᐃᐃΔᐃ) {
			ᐃ.fillStyle = !ⲆⲆⲆ.time ? "#e39716" : Δ[182];
			ᐃΔⵠ(ᐃ, ΔΔ + 600 * (ᐃᐃΔᐃ.x / (ⲆⲆⲆ.ᐃⵠⲆΔΔ * 100)) * Ⲇ, ΔΔⵠ + Ⲇ * (600 * (ᐃᐃΔᐃ.y / (ⲆⲆⲆ.ΔᐃⵠⵠⲆ * 100))), Ⲇ * ᐃⵠᐃⵠⵠ);
			ᐃ.fill()
		}
	}

	function ᐃᐃⵠΔᐃ(ᐃΔΔᐃ, ΔⲆⲆᐃ) {
		if (!Ⲇⵠ[ⵠ.ⵠⲆ][ᐃΔΔᐃ]) Ⲇⵠ[ⵠ.ⵠⲆ][ᐃΔΔᐃ] = ⲆΔⵠⵠⵠ(Ⲇ, "x" + ᐃΔΔᐃ, 17, Δ[560]);
		var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⲆ][ᐃΔΔᐃ];
		var ΔΔ = ΔⲆⲆᐃ.info.translate.x + ΔⲆⲆᐃ.info.ⵠΔ[ⵠⲆⵠ].width - ⵠΔ.width - ⵠⵠⲆⵠⲆ * Ⲇ;
		var ΔΔⵠ = ΔⲆⲆᐃ.info.translate.y + ΔⲆⲆᐃ.info.ⵠΔ[0].height - ⵠΔ.height - Ⲇ * ΔⲆᐃΔⲆ;
		ΔᐃⵠΔ == ΔⲆⲆᐃ.info.state && (ΔΔⵠ += Ⲇ * ΔⲆΔᐃⵠ);
		ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ΔΔⵠ)
	}

	function ᐃⲆᐃΔⵠⵠΔⲆΔ() {
		if (ⵠⵠⵠ.reconnect.enabled) {
			ᐃ.globalAlpha = .9;
			ᐃ.fillStyle = Δ[287];
			ᐃᐃᐃ(ᐃ, ᐃᐃᐃΔ - 150, Δᐃᐃᐃ - 90, 300, 180, 15);
			ᐃ.fill();
			ᐃ.globalAlpha = ΔⲆΔᐃ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⵠⵠᐃ];
			ᐃ.save();
			ⵠⵠⵠ.reconnect.rotate = (ⵠⵠⵠ.reconnect.rotate + ΔᐃΔⲆ * ΔᐃⲆⲆ) % (Math.PI * 2);
			ᐃ.translate(ⲆΔⲆᐃ / 2, ΔⵠⲆΔ / ⲆⲆᐃⲆ - 25);
			ᐃ.rotate(ⵠⵠⵠ.reconnect.rotate);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ΔᐃΔⲆ, -ⵠΔ.height / ᐃⲆᐃⵠ);
			ᐃ.restore();
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠᐃⵠⲆᐃⵠᐃ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, (ⲆΔⲆᐃ - ⵠΔ.width) / ⲆᐃⵠⲆ, (ΔⵠⲆΔ - ⵠΔ.height) / 2 + 25)
		}
	}

	function ⲆᐃΔᐃⵠⲆⵠⵠⲆ() {
		if (ⵠⵠⵠ.ᐃΔⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ΔⵠⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ⵠⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ΔᐃΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ᐃΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) return;
		ⵠⵠⵠ.sign[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false;
		var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
		var ⵠⵠⲆⲆ = ⵠΔᐃⲆ.ⵠⲆᐃᐃᐃⲆᐃ;
		if (!ΔⵠΔ) return;
		for (var Δᐃ = 0; Δᐃ < ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔΔⵠⵠ].length; Δᐃ++) {
			var ⲆⲆⵠΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔΔⵠⵠ][Δᐃ];
			var ⵠΔᐃᐃ = ⵠᐃΔᐃ.ᐃⲆΔⵠ(ⲆⲆⵠΔ, ΔⵠΔ);
			if (ⵠⵠⲆⲆ > ⵠΔᐃᐃ && ⲆⲆⵠΔ.info === 0 && ⲆⲆⵠΔ.ΔᐃᐃⲆ === ⵠⵠⵠ.id) {
				ⵠⵠⵠ.sign[ᐃⲆᐃᐃᐃᐃⵠ[180]] = true;
				ⵠⵠⲆⲆ = ⵠΔᐃᐃ;
				ⵠⵠⵠ.sign.ΔᐃⲆΔΔ = ⲆⲆⵠΔ.id
			}
		}
		if (ⵠⵠⲆⲆ < ⵠΔᐃⲆ.ⵠⲆᐃᐃᐃⲆᐃ) {
			var ΔⲆⲆᐃ = ⲆΔᐃᐃ.sign.button;
			ΔⲆⲆᐃ.ⲆᐃᐃⲆ(ᐃ)
		}
	}

	function ⵠΔⵠⵠᐃᐃⲆⲆᐃ() {
		ⵠⵠⵠ.ᐃΔⵠⲆ.id = -ⵠΔᐃ;
		ⵠⵠⵠ.ᐃΔⵠⲆ.lock = false;
		ⵠⵠⵠ.ᐃΔⵠⲆ.locked = false;
		ⵠⵠⵠ.ᐃΔⵠⲆ.ᐃᐃⵠΔⲆⲆᐃ = false;
		ⵠⵠⵠ.ᐃΔⵠⲆ.ΔᐃᐃᐃⵠⲆⵠ = ΔⲆᐃⵠΔ;
		ⵠⵠⵠ.ᐃΔⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false;
		var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
		var ⵠⵠⲆⲆ = ⵠΔᐃⲆ.ᐃΔᐃⲆΔⵠⲆ;
		if (!ΔⵠΔ) return;
		for (var Δᐃ = ΔΔⲆⲆ; Δᐃ < ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠΔⵠΔ].length; Δᐃ++) {
			var ᐃΔⵠⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠΔⵠΔ][Δᐃ];
			var ⵠΔᐃᐃ = ⵠᐃΔᐃ.ᐃⲆΔⵠ(ᐃΔⵠⲆ, ΔⵠΔ);
			if (ⵠΔᐃᐃ < ⵠⵠⲆⲆ) {
				ⵠⵠⲆⲆ = ⵠΔᐃᐃ;
				ⵠⵠⵠ.ᐃΔⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ᐃⲆΔⵠΔ;
				ⵠⵠⵠ.ᐃΔⵠⲆ.id = ᐃΔⵠⲆ.action < ᐃⲆᐃⵠ ? -1 : Math.floor((ᐃΔⵠⲆ.action - 1) / 2);
				ⵠⵠⵠ.ᐃΔⵠⲆ.ΔⲆΔⵠ = ᐃΔⵠⲆ.info;
				ⵠⵠⵠ.ᐃΔⵠⲆ.ΔᐃᐃⲆ = ᐃΔⵠⲆ.ΔᐃᐃⲆ;
				ⵠⵠⵠ.ᐃΔⵠⲆ.ΔᐃⲆΔΔ = ᐃΔⵠⲆ.id;
				ⵠⵠⵠ.ᐃΔⵠⲆ.locked = ᐃΔⵠⲆ.lock;
				ⵠⵠⵠ.ᐃΔⵠⲆ.lock = ᐃΔⵠⲆ.lock && ᐃΔⵠⲆ.ΔᐃᐃⲆ != ⵠⵠⵠ.id && !ⵠⵠⵠ.ⵠⵠᐃⲆᐃᐃᐃ(ᐃΔⵠⲆ.ΔᐃᐃⲆ) ? ᐃᐃᐃΔΔ : ⲆⵠΔᐃⵠ;
				ⵠⵠⵠ.ᐃΔⵠⲆ.ΔᐃᐃᐃⵠⲆⵠ = ᐃΔⵠⲆ.ΔᐃᐃⲆ === ⵠⵠⵠ.id && !ⵠⵠⵠ.ᐃΔⵠⲆ.locked && ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ᐃⲆΔⵠⲆ) != -ⵠΔΔ ? true : false;
				ⵠⵠⵠ.ᐃΔⵠⲆ.locked && -ᐃⲆⲆ != ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ⵠⵠⵠΔⲆ) && (ⵠⵠⵠ.ᐃΔⵠⲆ.ᐃᐃⵠΔⲆⲆᐃ = ⲆᐃⵠⵠⲆ)
			}
		}
		if (ⵠⵠⲆⲆ < ⵠΔᐃⲆ.ᐃΔᐃⲆΔⵠⲆ) {
			var ⵠΔ = Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠᐃᐃ];
			var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ⵠⵠΔ[ⲆᐃⲆ];
			var ΔΔ = Math.floor(ΔⲆⲆᐃ.info.translate.x + (ΔⲆⲆᐃ.info.ⵠΔ[0].width - ⵠΔ.width) / 2);
			var ΔΔⵠ = Math.floor(ΔⲆⲆᐃ.info.translate.y + (ΔⲆⲆᐃ.info.ⵠΔ[0].height - ⵠΔ.height) / 2) + ᐃΔΔΔ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ΔΔⵠ);
			if (!ⵠⵠⵠ.ᐃΔⵠⲆ.lock || ⵠⵠⵠ.ᐃΔⵠⲆ.ΔᐃᐃⲆ === ⵠⵠⵠ.id) {
				if (Δⵠⵠ <= ⵠⵠⵠ.ᐃΔⵠⲆ.id) {
					var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ⵠⵠΔ[ⵠⵠⵠ.ᐃΔⵠⲆ.id];
					ΔⲆⲆᐃ.ⲆᐃᐃⲆ(ᐃ);
					var ᐃΔΔᐃ = ⵠⵠⵠ.ᐃΔⵠⲆ.ΔⲆΔⵠ;
					ᐃΔΔᐃ > ⵠΔᐃ && ᐃᐃⵠΔᐃ(ᐃΔΔᐃ, ΔⲆⲆᐃ)
				}
			}
			if (!ⵠⵠⵠ.ᐃΔⵠⲆ.lock) {
				if (ⵠⵠⵠ.ᐃΔⵠⲆ.ΔᐃᐃᐃⵠⲆⵠ) ⲆΔᐃᐃ.ΔⵠⵠⲆΔΔⲆ.ⲆᐃᐃⲆ(ᐃ)
			} else ⲆΔᐃᐃ.ΔⲆᐃΔΔⲆᐃ.ⲆᐃᐃⲆ(ᐃ);
			if (ⵠⵠⵠ.ᐃΔⵠⲆ.ᐃᐃⵠΔⲆⲆᐃ) ⲆΔᐃᐃ.ⵠΔᐃᐃᐃᐃΔ.ⲆᐃᐃⲆ(ᐃ)
		}
	}

	function ᐃⲆⲆΔⲆⲆΔⵠΔ() {
		if (ⵠⵠⵠ.ᐃΔⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ΔⵠⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ⵠⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ᐃΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) return;
		ⵠⵠⵠ.ΔᐃΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false;
		var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
		var ⵠⵠⲆⲆ = ⵠΔᐃⲆ.ΔⵠⲆⵠⲆⵠⲆ;
		if (!ΔⵠΔ) return;
		for (var Δᐃ = 0; ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆᐃⲆᐃ].length > Δᐃ; Δᐃ++) {
			var ΔᐃΔᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆᐃⲆᐃ][Δᐃ];
			var ⵠΔᐃᐃ = ⵠᐃΔᐃ.ᐃⲆΔⵠ(ΔᐃΔᐃ, ΔⵠΔ);
			ⵠΔᐃᐃ < ⵠⵠⲆⲆ && (ⵠⵠⲆⲆ = ⵠΔᐃᐃ, ⵠⵠⵠ.ΔᐃΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = true, ⵠⵠⵠ.ΔᐃΔᐃ.ⲆᐃⲆⲆᐃΔⲆ = ΔᐃΔᐃ.info & 31, ⵠⵠⵠ.ΔᐃΔᐃ.ⲆΔᐃΔᐃ = (ΔᐃΔᐃ.info & 992) >> ΔⵠⲆᐃⵠ, ⵠⵠⵠ.ΔᐃΔᐃ.ᐃⲆⵠⲆΔⲆᐃ = (ΔᐃΔᐃ.info & 31744) >> ᐃⵠᐃᐃᐃ, ⵠⵠⵠ.ΔᐃΔᐃ.ΔᐃᐃⲆ = ΔᐃΔᐃ.ΔᐃᐃⲆ, ⵠⵠⵠ.ΔᐃΔᐃ.ΔᐃⲆΔΔ = ΔᐃΔᐃ.id)
		}
		if (ⵠⵠⲆⲆ < ⵠΔᐃⲆ.ΔⵠⲆⵠⲆⵠⲆ) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃⵠⵠ];
			var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ΔᐃⵠⲆΔⲆⵠ;
			var ΔΔ = ΔⲆⲆᐃ.info.translate.x - 32;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ⲆΔⵠΔ);
			if (0 < ⵠⵠⵠ.ΔᐃΔᐃ.ⲆᐃⲆⲆᐃΔⲆ) {
				ΔⲆⲆᐃ.ⲆᐃᐃⲆ(ᐃ);
				var ᐃΔΔᐃ = ⵠⵠⵠ.ΔᐃΔᐃ.ⲆᐃⲆⲆᐃΔⲆ;
				if (ᐃΔΔᐃ > 1) ᐃᐃⵠΔᐃ(ᐃΔΔᐃ, ΔⲆⲆᐃ)
			}
			var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ΔΔᐃⵠΔᐃᐃ;
			if (ⵠⵠⵠ.ΔᐃΔᐃ.ᐃⲆⵠⲆΔⲆᐃ > 0) {
				ΔⲆⲆᐃ.ⲆᐃᐃⲆ(ᐃ);
				var ᐃΔΔᐃ = ⵠⵠⵠ.ΔᐃΔᐃ.ᐃⲆⵠⲆΔⲆᐃ;
				if (1 < ᐃΔΔᐃ) ᐃᐃⵠΔᐃ(ᐃΔΔᐃ, ΔⲆⲆᐃ)
			}
			var ΔⲆⲆᐃ = ⲆΔᐃᐃ.ΔⵠᐃⲆᐃᐃΔ;
			if (ⵠⵠⵠ.ΔᐃΔᐃ.ⲆΔᐃΔᐃ > 0) {
				ΔⲆⲆᐃ.ⲆᐃᐃⲆ(ᐃ);
				var ᐃΔΔᐃ = ⵠⵠⵠ.ΔᐃΔᐃ.ⲆΔᐃΔᐃ;
				ΔⲆΔᐃ < ᐃΔΔᐃ && ᐃᐃⵠΔᐃ(ᐃΔΔᐃ, ΔⲆⲆᐃ)
			}
		}
	}
	var ᐃᐃΔΔᐃᐃᐃ = [];

	function ⵠⵠⵠᐃΔΔΔⲆᐃ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⵠ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⲆᐃᐃΔ, -ⲆΔΔ / ⵠΔᐃⵠ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ΔⲆΔⵠᐃᐃᐃΔᐃ() {
		var ⵠⵠⵠⲆ = ⲆⲆⲆ.ΔᐃᐃⲆⵠ;
		var ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔⲆᐃⲆᐃᐃ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠⵠⲆ.translate.x, ⵠⵠⵠⲆ.translate.y);
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠⲆ.translate.x + ⵠΔ.width / 2, ⵠⵠⵠⲆ.translate.y + ⵠΔ.height / ⲆⲆΔΔ);
		ⲆⲆⲆ.ΔᐃᐃⲆⵠ.now = ((new Date).getTime() - ⵠⵠⵠⲆ.ΔⲆᐃᐃⵠ + ⵠⵠⵠⲆ.ᐃΔΔΔⲆ) % ⵠΔᐃⲆ.ΔΔΔ;
		var ⵠᐃᐃ = ⲆⲆⲆ.ΔᐃᐃⲆⵠ.now * (ΔⲆᐃⲆ * Math.PI) / ⵠΔᐃⲆ.ΔΔΔ - Math.PI / 2;
		ᐃ.rotate(ⵠᐃᐃ);
		ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ⵠ.ΔⵠΔΔᐃᐃΔ], -ⵠΔ.width / ᐃᐃᐃᐃ, -ⵠΔ.height / ⲆⲆΔΔ);
		ᐃ.restore()
	}

	function ΔΔⵠᐃᐃᐃΔ(ᐃⵠᐃⲆⲆ) {
		var ᐃⵠᐃⲆⲆ = ᐃⵠᐃⲆⲆ / Δᐃⵠⵠⵠ;
		if (ᐃⵠᐃⲆⲆ > .8) return;
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && false == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ && (this.ᐃⲆⵠ.ᐃᐃⵠ = false);
			var ⲆᐃΔ = 600 * ((1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * ΔᐃⲆⲆ) * Ⲇ;
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = ⵠⲆᐃ;
			var ΔΔⵠ = ΔΔⲆⲆ
		}
		ᐃ.globalAlpha = .5;
		ΔΔᐃⵠΔⵠΔ(ᐃ, ΔΔ, ΔΔⵠ, ⲆᐃΔΔⵠ * Ⲇ, ᐃⵠᐃⲆⲆ);
		ᐃⵠ(ᐃ, null, Δ[391], 18 * Ⲇ);
		ᐃ.globalAlpha = 1;
		ΔΔᐃⵠΔⵠΔ(ᐃ, ΔΔ, ΔΔⵠ, Ⲇ * 18, ᐃⵠᐃⲆⲆ);
		ᐃⵠ(ᐃ, null, ⵠ.ΔⵠᐃᐃᐃΔΔ[ⲆⲆⲆ.time], Ⲇ * 6);
		ᐃ.restore()
	}

	function ΔΔⵠⵠⲆⵠᐃᐃⲆ() {
		var ᐃⲆⲆΔⲆ = ⵠⵠⵠ.ᐃⲆⲆΔⲆ;
		if (ᐃⲆⲆΔⲆ.wait) {
			var ᐃⲆᐃⵠⵠ = ᐃⲆⲆΔⲆ.timeout.ᐃᐃⵠ();
			ᐃ.save();
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⲆⵠΔⲆᐃⲆ];
			var ⲆⵠⲆᐃᐃ = Ⲇⵠ[ⵠ.ⵠΔⵠᐃΔⵠⵠ].height + 25 * Ⲇ;
			ᐃ.translate(ⵠΔ.width, ⲆΔᐃᐃ.ᐃⵠⲆᐃ.translate.y - 188 * Ⲇ - ⲆⵠⲆᐃᐃ);
			var ΔΔ = -ⵠΔ.width / ΔⲆⲆⵠ - 2;
			var ΔΔⵠ = -ⵠΔ.height / 2 - 4;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ + ᐃⵠΔⲆ, ΔΔⵠ);
			ᐃ.beginPath();
			ᐃ.lineWidth = ⵠⵠΔΔⲆ * Ⲇ;
			ᐃ.strokeStyle = ⵠ.ⵠᐃⵠⲆⲆᐃᐃ[ⲆⲆⲆ.time];
			ᐃ.lineCap = Δ[237];
			ᐃ.arc(ⲆⲆᐃΔ, ΔΔⵠ + ⵠΔ.height / 2, 25 * Ⲇ, ⵠⵠΔᐃ, 2 * Math.PI * ᐃⲆⲆΔⲆ.timeout.ⲆᐃΔ);
			ᐃ.stroke();
			ᐃ.restore();
			if (ᐃⲆᐃⵠⵠ) {
				ᐃⲆⲆΔⲆ.wait = false;
				ᐃⲆⲆΔⲆ.timeout.ⲆᐃΔ = 0;
				ᐃⲆⲆΔⲆ.timeout.ᐃΔⲆ = false
			}
		}
	}

	function ᐃⲆΔΔᐃΔΔⵠΔ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == false) this.ᐃⲆⵠ.ᐃᐃⵠ = ΔⲆΔΔᐃ;
			var ⲆᐃΔ = ΔᐃⲆⲆ * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600 * Ⲇ;
			var ΔΔ = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ;
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = 0
		}
		ⵠΔ = Ⲇⵠ[ⵠ.ᐃⵠΔⵠΔ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2 + ΔΔ, -ⲆΔΔ / ⲆⲆᐃⲆ + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ);
		if (this.lock) {
			ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆΔⵠⲆ][ⲆⲆⲆ.time];
			Δⵠᐃ = -ⵠΔ.width;
			ⲆΔΔ = -ⵠΔ.height;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2 + ΔΔ - 1 * Ⲇ, -ⲆΔΔ / ⲆᐃᐃΔ + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ)
		}
		ᐃ.restore()
	}

	function ΔⲆΔΔⲆΔᐃΔᐃ() {
		ᐃ.save();
		var ⲆⲆΔᐃΔⲆᐃ = Ⲇ;
		.25 > ⵠⵠⵠ.ᐃⵠⲆᐃ.ᐃⵠᐃⲆⲆ.x && (ᐃ.globalAlpha = ⵠⵠⵠ.ᐃⵠⲆᐃ.ᐃᐃⵠΔᐃⵠᐃ.ⲆᐃΔ);
		var ΔΔⵠ = ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length > 0 ? -70 : 0;
		(ⵠⵠⵠ.ᐃΔⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] || ⵠⵠⵠ.ΔⵠⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && -ⲆⵠⲆ != ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ᐃⲆΔⲆ) || ⵠⵠⵠ.ⵠⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ⲆᐃΔᐃᐃ) != -ΔⲆΔᐃ || ⵠⵠⵠ.ᐃΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && -1 != ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ᐃⲆΔⲆ) || ⵠⵠⵠ.ᐃᐃⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && -1 != ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ΔΔⵠΔΔ) || ⵠⵠⵠ.ΔᐃΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ᐃⲆΔⲆ) != -1 || -1 != ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ⵠΔⲆⲆⵠ))) && (ΔΔⵠ -= 50 * Ⲇ);
		ᐃ.translate((ⲆΔⲆᐃ - 950 * Ⲇ) / ⲆⲆⵠᐃ, ΔΔⵠ);
		ᐃ.fillStyle = "#69A148";
		ᐃ.fillRect(this.translate.x + 37 * Ⲇ, this.translate.y + Ⲇ * 17, 178 * ⵠⵠⵠ.ᐃⵠⲆᐃ.ᐃⵠᐃⲆⲆ.x * Ⲇ, ΔᐃΔⵠᐃ * Ⲇ);
		ᐃ.globalAlpha = ᐃΔⵠΔ;
		ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆΔᐃᐃᐃᐃ.x < .35 && (ᐃ.fillStyle = "#8F050A", ᐃ.globalAlpha = ⵠⵠⵠ.ᐃⵠⲆᐃ.ΔⲆᐃΔᐃΔΔ.ⲆᐃΔ, ᐃ.fillRect(this.translate.x + 277 * Ⲇ, this.translate.y + Ⲇ * 17, Ⲇ * 178, 18 * Ⲇ), ᐃ.globalAlpha = ⵠΔᐃ);
		ᐃ.fillStyle = "#AF352A";
		ᐃ.fillRect(this.translate.x + 277 * Ⲇ, this.translate.y + ΔⲆⲆⲆⵠ * Ⲇ, 178 * ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆΔᐃᐃᐃᐃ.x * Ⲇ, 18 * Ⲇ);
		if (.35 > ⵠⵠⵠ.ᐃⵠⲆᐃ.ⵠⲆΔⲆⵠ.x) {
			ᐃ.fillStyle = "#366B91";
			ᐃ.globalAlpha = ⵠⵠⵠ.ᐃⵠⲆᐃ.ⵠΔᐃᐃᐃⵠΔ.ⲆᐃΔ;
			ᐃ.fillRect(this.translate.x + 517 * Ⲇ, this.translate.y + Ⲇ * 17, 178 * Ⲇ, 18 * Ⲇ);
			ᐃ.globalAlpha = 1
		}
		ᐃ.fillStyle = "#669BB1";
		ᐃ.fillRect(this.translate.x + Ⲇ * 517, this.translate.y + ᐃⲆΔΔⲆ * Ⲇ, Ⲇ * (ⵠⵠⵠ.ᐃⵠⲆᐃ.ⵠⲆΔⲆⵠ.x * 178), Ⲇ * 18);
		if (ⵠⵠⵠ.ᐃⵠⲆᐃ.ⵠⲆΔⲆⵠ.x > .99) {
			if (.35 > ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆΔⲆΔ.x) {
				ᐃ.fillStyle = "#6C4036";
				ᐃ.globalAlpha = ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆΔΔⲆΔᐃᐃ.ⲆᐃΔ;
				ᐃ.fillRect(this.translate.x + Ⲇ * 517, this.translate.y + 17 * Ⲇ, 178 * Ⲇ, Ⲇ * ΔⵠⵠᐃΔⵠⵠ);
				ᐃ.globalAlpha = ⲆⵠΔⲆ
			}
			ᐃ.fillStyle = "#ff0000";
			ᐃ.fillRect(this.translate.x + Ⲇ * 517, this.translate.y + 17 * Ⲇ, (Δᐃᐃ - ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆΔⲆΔ.x) * 178 * Ⲇ, 18 * Ⲇ)
		}
		if (.35 > ⵠⵠⵠ.ᐃⵠⲆᐃ.ΔΔΔΔⵠⲆⵠ.x) {
			ᐃ.fillStyle = "#0000ff";
			ᐃ.globalAlpha = ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆⲆᐃⵠᐃᐃ.ⲆᐃΔ;
			ᐃ.fillRect(this.translate.x + Ⲇ * 757, this.translate.y + Ⲇ * ΔᐃⲆⵠΔᐃᐃ, Ⲇ * 178, 18 * Ⲇ);
			ᐃ.globalAlpha = ᐃⲆⲆ
		}
		const ctx = ᐃ;
		const scale = Ⲇ;
		if (Settings.ShowHP.enabled) {
			ctx.save();
			ctx.lineWidth = 7;
			ctx.font = "34px Baloo Paaji";
			ctx.fillStyle = "#00ff00";
			ctx.strokeStyle = "black";
			ctx.strokeText(Math.round(ⵠⵠⵠ.ᐃⵠⲆᐃ.ᐃⵠᐃⲆⲆ.x * 200) + "hp", this.translate.x + 87 * scale, this.translate.y * scale);
			ctx.fillText(Math.round(ⵠⵠⵠ.ᐃⵠⲆᐃ.ᐃⵠᐃⲆⲆ.x * 200) + "hp", this.translate.x + 87 * scale, this.translate.y * scale);
			ctx.fillStyle = "#ff0000";
			ctx.strokeText(Math.round(getUserHungryGaugesProperty(getUserGaugesProperty()) * 100) + "%", this.translate.x + 335 * scale, this.translate.y * scale);
			ctx.fillText(Math.round(getUserHungryGaugesProperty(getUserGaugesProperty()) * 100) + "%", this.translate.x + 335 * scale, this.translate.y * scale);
			ctx.fillStyle = "#7dd0f2";
			ctx.strokeText(Math.round(getUserWarmGaugesProperty() * 100) + "%", this.translate.x + 566 * scale, this.translate.y * scale);
			ctx.fillText(Math.round(getUserWarmGaugesProperty() * 100) + "%", this.translate.x + 566 * scale, this.translate.y * scale);
			ctx.fillStyle = "#074a86";
			ctx.strokeText(Math.round(getUserThirstGaugesProperty(getUserGaugesProperty()) * 100) + "%", this.translate.x + 809 * scale, this.translate.y * scale);
			ctx.fillText(Math.round(getUserThirstGaugesProperty(getUserGaugesProperty()) * 100) + "%", this.translate.x + 809 * scale, this.translate.y * scale);
			ctx.restore()
		}
		if (Settings.Timers.enabled) {
			ctx.save();
			ctx.lineWidth = 7;
			ctx.font = "34px Baloo Paaji";
			ctx.strokeStyle = "black";
			ctx.fillStyle = "#00ff00";
			ctx.strokeText(~~(11 - (Date.now() - Timers.HealTimer) / 1e3) + "s", this.translate.x + 216 * scale, this.translate.y + 35 * scale);
			ctx.fillText(~~(11 - (Date.now() - Timers.HealTimer) / 1e3) + "s", this.translate.x + 216 * scale, this.translate.y + 35 * scale);
			ctx.fillStyle = "#ff0000";
			ctx.strokeText(~~(6 - (Date.now() - Timers.GaugeTimer) / 1e3) + "s", this.translate.x + 460 * scale, this.translate.y + 35 * scale);
			ctx.fillText(~~(6 - (Date.now() - Timers.GaugeTimer) / 1e3) + "s", this.translate.x + 460 * scale, this.translate.y + 35 * scale);
			ctx.restore()
		}
		ᐃ.fillStyle = "#0000ff";
		ᐃ.fillRect(this.translate.x + Ⲇ * 757, this.translate.y + ⵠᐃⲆⲆⲆ * Ⲇ, Ⲇ * (ⵠⵠⵠ.ᐃⵠⲆᐃ.ΔΔΔΔⵠⲆⵠ.x * 178), 18 * Ⲇ);
		Ⲇ = ⲆⲆΔᐃΔⲆᐃ;
		ᐃΔΔⲆ(ᐃ, this.ⵠΔ, this.translate.x, this.translate.y);
		this.y = this.translate.y + ΔΔⵠ;
		ᐃ.restore();
		if (ⵠⵠⵠ.ᐃⵠⲆᐃ.ⵠᐃⲆᐃΔΔⵠ.x < .99) {
			var ΔΔ = Math.floor(ᐃᐃᐃΔ - Ⲇⵠ[ⵠ.ⵠⲆᐃⵠᐃⵠⲆ].width / ΔᐃΔⲆ);
			ΔΔⵠ += this.translate.y - Ⲇⵠ[ⵠ.ⵠⲆᐃⵠᐃⵠⲆ].height - Ⲇ * 5 - 30;
			ᐃ.fillStyle = "#BBE8EF";
			ᐃ.fillRect(ΔΔ + 5, ΔΔⵠ + Ⲇ * 5, ⵠⵠⵠ.ᐃⵠⲆᐃ.ⵠᐃⲆᐃΔΔⵠ.x * (588 * Ⲇ), ᐃⲆⵠΔΔ * Ⲇ);
			if (.35 > ⵠⵠⵠ.ᐃⵠⲆᐃ.ⵠᐃⲆᐃΔΔⵠ.x) {
				ᐃ.fillStyle = "#9BA8AF";
				ᐃ.globalAlpha = ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⵠΔᐃΔᐃⵠ.ⲆᐃΔ;
				ᐃ.fillRect(ΔΔ + ⲆΔⲆⲆ, ΔΔⵠ + 5, Ⲇ * 588, Ⲇ * 10);
				ᐃ.globalAlpha = ΔΔⲆΔ
			}
			ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ⵠ.ⵠⲆᐃⵠᐃⵠⲆ], ΔΔ, ΔΔⵠ);
			this.y = ΔΔⵠ
		}
	}

	function ⵠⲆᐃⲆᐃᐃᐃΔⵠ() {
		var ᐃᐃⲆΔ = ⵠⵠⵠ.ᐃᐃⲆΔ;
		var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
		for (var Δᐃ = 0; ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length > Δᐃ; Δᐃ++) {
			var ΔⲆⲆᐃ = ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ[Δᐃ];
			var ΔⲆΔ = ⲆⲆⲆΔᐃ;
			var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
			if (ΔⵠΔ && (ΔⲆⲆᐃ.id == ΔⵠΔ.right || ΔⵠΔ.ΔⲆⲆⲆᐃ == ΔⲆⲆᐃ.id && ΔⵠΔ.ΔⲆⲆⲆᐃ > 0)) {
				ΔⲆΔ = ⲆⲆⵠⵠⲆ;
				ᐃΔΔⲆ(ᐃ, ΔⲆⲆᐃ.info.ⵠΔ[Δᐃᐃⵠ], ΔⲆⲆᐃ.info.translate.x, ΔⲆⲆᐃ.info.translate.y, ΔⲆⲆᐃ.info.width, ΔⲆⲆᐃ.info.height)
			} else ΔⲆⲆᐃ.ⲆᐃᐃⲆ(ᐃ);
			var ᐃΔΔᐃ = ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[ΔⲆⲆᐃ.id];
			ⵠⲆⲆⲆ < ᐃΔΔᐃ && ᐃᐃⵠΔᐃ(ᐃΔΔᐃ, ΔⲆⲆᐃ);
			0 < ᐃΔΔᐃ && ΔⲆΔᐃᐃᐃⵠᐃᐃ(Δᐃ, ΔⲆⲆᐃ, ΔⲆΔ);
			var ᐃΔⵠⲆ = ⵠⵠⵠ.ᐃΔⵠⲆ;
			if (ᐃΔⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && (ᐃΔⵠⲆ.id < ⵠᐃⵠⵠ || ΔⲆⲆᐃ.id == ᐃΔⵠⲆ.id) && (!ᐃΔⵠⲆ.lock || ᐃΔⵠⲆ.ΔᐃᐃⲆ == ⵠⵠⵠ.id)) ⲆΔᐃᐃ.ⵠⵠΔᐃΔ[ΔⲆⲆᐃ.id].ⲆᐃᐃⲆ(ᐃ);
			var ΔⵠⲆⵠⵠ = ⵠⵠⵠ.ΔⵠⲆⵠⵠ;
			ΔⵠⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ΔⲆⲆᐃ.id == Ⲇᐃ.ᐃⲆΔⲆ && ⲆΔᐃᐃ.ⵠⵠΔᐃΔ[ΔⲆⲆᐃ.id].ⲆᐃᐃⲆ(ᐃ);
			var ᐃᐃⲆⵠⵠ = ⵠⵠⵠ.ᐃᐃⲆⵠⵠ;
			if (ᐃᐃⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ΔⲆⲆᐃ.id == Ⲇᐃ.ΔΔⵠΔΔ) ⲆΔᐃᐃ.ⵠⵠΔᐃΔ[ΔⲆⲆᐃ.id].ⲆᐃᐃⲆ(ᐃ);
			var ⵠⲆⵠᐃ = ⵠⵠⵠ.ⵠⲆⵠᐃ;
			if (ⵠⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && Ⲇᐃ.ⲆᐃΔᐃᐃ == ΔⲆⲆᐃ.id) ⲆΔᐃᐃ.ⵠⵠΔᐃΔ[ΔⲆⲆᐃ.id].ⲆᐃᐃⲆ(ᐃ);
			var ᐃΔⲆΔ = ⵠⵠⵠ.ᐃΔⲆΔ;
			ᐃΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ΔⲆⲆᐃ.id == Ⲇᐃ.ᐃⲆΔⲆ && ⲆΔᐃᐃ.ⵠⵠΔᐃΔ[ΔⲆⲆᐃ.id].ⲆᐃᐃⲆ(ᐃ);
			var ΔᐃΔᐃ = ⵠⵠⵠ.ΔᐃΔᐃ;
			if (ΔᐃΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && (ΔⲆⲆᐃ.id == Ⲇᐃ.ᐃⲆΔⲆ || ΔⲆⲆᐃ.id == Ⲇᐃ.ⵠΔⲆⲆⵠ)) ⲆΔᐃᐃ.ⵠⵠΔᐃΔ[ΔⲆⲆᐃ.id].ⲆᐃᐃⲆ(ᐃ)
		}
		if (ΔⲆⲆᐃ && Δᐃ < ᐃᐃⲆΔ.max) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔᐃⲆᐃΔᐃΔ][2];
			ΔΔ = ΔⲆⲆᐃ.info.translate.x;
			ΔΔⵠ = ΔⲆⲆᐃ.info.translate.y;
			for (ᐃΔⵠⵠ = ⵠΔᐃ; Δᐃ < ᐃᐃⲆΔ.max; Δᐃ++, ᐃΔⵠⵠ++) ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ + ᐃΔⵠⵠ * (ⵠΔ.width + 5), ΔΔⵠ)
		}
	}

	function ⵠⲆⲆⲆⲆ(ᐃⵠᐃⲆⲆ) {
		var ᐃⵠᐃⲆⲆ = ᐃⵠᐃⲆⲆ / 100;
		if (ᐃⵠᐃⲆⲆ > .95) return;
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == false) this.ᐃⲆⵠ.ᐃᐃⵠ = false;
			var ⲆᐃΔ = Ⲇ * (600 * (ΔᐃⲆⲆ * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ)));
			var ΔΔ = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ;
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = 0
		}
		ᐃ.globalAlpha = .5;
		ΔΔᐃⵠΔⵠΔ(ᐃ, ΔΔ, ΔΔⵠ, 28 * Ⲇ, ᐃⵠᐃⲆⲆ);
		ᐃⵠ(ᐃ, null, Δ[391], Ⲇ * 18);
		ᐃ.globalAlpha = 1;
		ΔΔᐃⵠΔⵠΔ(ᐃ, ΔΔ, ΔΔⵠ, Ⲇ * 28, ᐃⵠᐃⲆⲆ);
		ᐃⵠ(ᐃ, null, ⵠ.ⵠᐃᐃⵠⲆΔΔ[ⲆⲆⲆ.time], ᐃΔΔⵠΔ * Ⲇ);
		ᐃ.restore()
	}

	function ᐃⵠⲆᐃⵠⵠⲆΔΔ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠᐃᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / Ⲇⵠᐃⵠ, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ⵠⲆⲆΔⲆⲆⵠ(ⵠᐃ) {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == ᐃⲆⵠⵠᐃ) this.ᐃⲆⵠ.ᐃᐃⵠ = false;
			var ⲆᐃΔ = Ⲇ * (600 * (ΔᐃⲆⲆ * (ⵠⵠᐃ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ)));
			var ΔΔ = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ;
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = 0
		}
		ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ᐃⲆᐃⵠ + ΔΔ, -ⲆΔΔ / ᐃⲆᐃⵠ + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ⲆᐃⲆⲆⵠⵠᐃΔⵠ() {
		var ⲆΔᐃⵠ = ⵠⵠⵠ.ⲆΔᐃⵠ;
		if (!ⲆΔᐃⵠ.ⲆΔᐃᐃᐃ && ⲆΔᐃⵠ.ᐃΔᐃⵠ > ⵠⵠΔΔ) {
			var ᐃᐃΔᐃ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
			if (!ᐃᐃΔᐃ) return;
			ᐃ.save();
			if (ΔⵠΔⲆ[ⲆΔᐃⵠ.ᐃΔᐃⵠ].ⲆΔⵠⲆ === 0 && Δⵠⵠ === ⲆΔᐃⵠ.mode) {
				ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃᐃΔᐃ.x, ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃᐃΔᐃ.y);
				ᐃ.rotate(ᐃᐃΔᐃ.angle);
				ᐃ.translate(120, 0)
			} else {
				var ΔΔ = Math.floor(ᐃᐃΔᐃ.x + Math.sin(ᐃᐃΔᐃ.angle) * 120);
				var ΔΔⵠ = Math.floor(ᐃᐃΔᐃ.y + 120 * Math.cos(ᐃᐃΔᐃ.angle));
				ΔΔ = ⵠⵠⵠ.ᐃⵠⲆ.x + (ΔΔ - ΔΔ % 100 + 50);
				ΔΔⵠ = ⵠⵠⵠ.ᐃⵠⲆ.y + (ΔΔⵠ - ΔΔⵠ % 100 + 50);
				ᐃ.translate(ΔΔ, ΔΔⵠ)
			}
			var ⵠΔ = Ⲇⵠ[ⲆΔᐃⵠ.ᐃΔᐃⵠ][ⲆⲆⲆ.time];
			ᐃ.globalAlpha = .5;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / ΔⲆᐃⲆ);
			ᐃ.globalAlpha = 1;
			ᐃ.restore();
			if (ΔⵠΔⲆ[ⲆΔᐃⵠ.ᐃΔᐃⵠ].ⲆΔⵠⲆ === 0) {
				if (!ⲆΔᐃⵠ.label[ⲆΔᐃⵠ.mode]) {
					ⲆΔⵠΔ === ⲆΔᐃⵠ.mode ? ⲆΔᐃⵠ.label[ⵠᐃΔ] = ⲆΔⵠⵠⵠ(Ⲇ, ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⲆⲆⵠᐃᐃ], ᐃⵠⲆᐃΔ, "#e2c340") : ⲆΔᐃⵠ.label[1] = ⲆΔⵠⵠⵠ(Ⲇ, ΔⲆⲆ[ΔΔΔΔ.ⲆΔⲆⲆΔⵠᐃ], ⲆΔⲆΔᐃ, "#e2c340")
				}
				var ⵠΔ = ⲆΔᐃⵠ.label[ⲆΔᐃⵠ.mode];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ + -ⵠΔ.width / ⵠΔᐃⵠ, ⲆΔᐃᐃ.ᐃⵠⲆᐃ.y - 26)
			}
		}
		if (ⲆΔᐃⵠ.ⲆΔᐃᐃᐃ) {
			var ᐃⲆᐃⵠⵠ = ⲆΔᐃⵠ.timeout.ᐃᐃⵠ();
			for (var Δᐃ = ⵠᐃΔ; Δᐃ < ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length; Δᐃ++) {
				var ΔⲆⲆᐃ = ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ[Δᐃ];
				if (ΔⲆⲆᐃ.id == ⲆΔᐃⵠ.id) {
					var ⲆΔΔ = 42 * Ⲇ;
					var ᐃᐃⲆᐃⵠ = 17 * Ⲇ;
					ᐃᐃᐃ(ᐃ, ΔⲆⲆᐃ.info.translate.x, ΔⲆⲆᐃ.info.translate.y + ⲆΔΔ * (ⵠⲆⲆⲆ - ⲆΔᐃⵠ.timeout.ⲆᐃΔ), ΔⲆⲆᐃ.info.width, ⲆΔΔ * ⲆΔᐃⵠ.timeout.ⲆᐃΔ + ᐃᐃⲆᐃⵠ, Ⲇ * ⵠⵠⲆᐃᐃ);
					ᐃ.fillStyle = "#55B973";
					ᐃ.fill();
					ᐃ.globalAlpha = .8;
					ΔⲆⲆᐃ.ⲆᐃᐃⲆ(ᐃ)
				} else {
					ᐃ.globalAlpha = .5;
					ΔⲆⲆᐃ.ⲆᐃᐃⲆ(ᐃ)
				}
				ᐃ.globalAlpha = ⲆⵠΔⲆ
			}
			if (ᐃⲆᐃⵠⵠ) {
				ⲆΔᐃⵠ.ⲆΔᐃᐃᐃ = false;
				ⲆΔᐃⵠ.timeout.ⲆᐃΔ = 0;
				ⲆΔᐃⵠ.timeout.ᐃΔⲆ = ΔⲆΔΔᐃ
			}
			return ⵠΔΔᐃⲆ
		} else {
			for (var Δᐃ = ⵠᐃΔⲆ; Δᐃ < ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length; Δᐃ++) ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ[Δᐃ].ⲆᐃᐃⲆ(ᐃ)
		}
		return false
	}

	function ⵠⵠⵠᐃΔⵠᐃⵠΔ(ⵠᐃ) {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && false == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ) this.ᐃⲆⵠ.ᐃᐃⵠ = ⲆⲆⲆΔᐃ;
			var ⲆᐃΔ = Ⲇ * ((1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * ΔᐃⲆⲆ * 600);
			var ΔΔ = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ;
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = ᐃⲆⵠΔ;
			var ΔΔⵠ = ⵠᐃΔ
		}
		if (ⵠᐃ === ⵠ.ⲆⵠΔⲆⵠⵠⲆ && !ⲆⲆⲆ.transition) {
			var ΔᐃΔΔⵠ = 0;
			var ⵠⲆΔᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ];
			for (var Δᐃ = ⵠⲆΔⵠ; Δᐃ < ⵠⲆΔᐃ.length; Δᐃ++) {
				var ᐃⲆΔⵠ = ⵠᐃΔᐃ.ᐃⲆΔⵠ(ⵠⲆΔᐃ[Δᐃ], this);
				if (ᐃⲆΔⵠ < 140 && 35 < ᐃⲆΔⵠ) {
					ΔᐃΔΔⵠ = ⵠᐃⵠⵠ;
					break
				} else ᐃⲆΔⵠ <= 35 && (ΔᐃΔΔⵠ = 1)
			}
			ΔᐃΔΔⵠ === 0 ? this.opacity = Math.max(.5, this.opacity - ΔᐃⲆⲆ / 1.5) : this.opacity = Math.min(1, this.opacity + ΔᐃⲆⲆ / 1.5);
			ᐃ.globalAlpha = this.opacity
		}
		ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2 + ΔΔ, -ⲆΔΔ / ᐃᐃᐃᐃ + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.globalAlpha = ⲆⵠΔⲆ;
		ᐃ.restore()
	}

	function ⲆⲆⵠΔⵠᐃΔⲆⵠ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆⵠⲆΔ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ΔΔᐃΔΔΔᐃᐃⲆ(ⵠᐃ) {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == false && (this.ᐃⲆⵠ.ᐃᐃⵠ = false);
			var ⲆᐃΔ = 600 * ((ΔⲆΔᐃ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * ΔᐃⲆⲆ) * Ⲇ;
			var ΔΔ = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ;
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = 0
		}
		var ΔΔᐃΔᐃ = Ⲇⵠ[ⵠ.ⵠᐃᐃⲆⵠΔⲆ].length;
		ⵠΔ = Ⲇⵠ[ⵠ.ⵠᐃᐃⲆⵠΔⲆ][(this.ᐃΔⵠⵠ + this.Δᐃ % ⵠΔᐃⵠ) % ΔΔᐃΔᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height;
		var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
		if (Settings.Roofs.enabled) {
			this.opacity = Settings.RoofsOpacity
		} else if (ΔⵠΔ && 150 > ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ])) this.opacity = Math.max(this.opacity - ΔᐃⲆⲆ, .3);
		else this.opacity = Math.min(this.opacity + ΔᐃⲆⲆ, ⵠⵠⵠΔ);
		var ΔⲆΔⵠᐃⲆᐃⲆᐃ = ᐃ.globalAlpha;
		ᐃ.globalAlpha *= this.opacity;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2 + ΔΔ, -ⲆΔΔ / 2 + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.globalAlpha = ΔⲆΔⵠᐃⲆᐃⲆᐃ;
		ᐃ.restore()
	}

	function ⵠⲆⵠⲆⲆⵠᐃⲆⲆ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔᐃΔ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ⲆᐃᐃΔⵠⵠⲆᐃΔ(ⵠᐃ) {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == ⲆⵠⲆΔᐃ && (this.ᐃⲆⵠ.ᐃᐃⵠ = ⲆⵠⲆⵠΔ);
			var ⲆᐃΔ = Ⲇ * (600 * (ΔᐃⲆⲆ * (ΔⵠⲆ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ)));
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = ⵠⲆⵠ;
			var ΔΔⵠ = ᐃΔΔ
		}
		if (this.ᐃᐃΔⲆⵠ.ᐃᐃⵠ()) this.color += .2 + Math.random() * .3;
		ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⲆ][Math.floor(this.id + this.color) % 5][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
		ⲆΔΔ = this.ᐃᐃΔⲆⵠ.ⲆᐃΔ * -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2 + ΔΔ, -ⲆΔΔ / ᐃⵠΔⲆ + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ⲆΔΔⲆΔⵠⲆⵠΔ() {
		var ⲆΔᐃⵠ = ⵠⵠⵠ.ⲆΔᐃⵠ;
		if (ⲆΔᐃⵠ.ⲆΔᐃᐃᐃ) {
			var ᐃᐃΔᐃ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
			ᐃ.save();
			ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃᐃΔᐃ.x, ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃᐃΔᐃ.y);
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆΔⵠⲆⲆᐃ];
			var ΔΔ = -ⵠΔ.width / 2;
			var ΔΔⵠ = -ⵠΔ.height / 2 - Ⲇ * 125;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ΔΔⵠ);
			ᐃ.beginPath();
			ᐃ.lineWidth = ⲆΔⵠᐃⵠ * Ⲇ;
			ᐃ.strokeStyle = ⵠ.ⵠᐃᐃⵠⲆΔΔ[ⲆⲆⲆ.time];
			ᐃ.lineCap = Δ[237];
			ᐃ.arc(ᐃΔΔ, ΔΔⵠ + ⵠΔ.height / 2, 25 * Ⲇ, 0, ⲆᐃⵠⲆ * Math.PI * ⲆΔᐃⵠ.timeout.ⲆᐃΔ);
			ᐃ.stroke();
			ᐃ.restore()
		}
	}

	function ⵠⵠᐃⵠΔⵠᐃΔⲆ() {
		var ᐃⵠⲆⵠᐃ = ⵠⵠⵠ.ᐃⵠⲆⵠᐃ;
		var ⲆⲆᐃⵠⵠⲆⵠ = ⲆΔᐃᐃ.ⲆⲆⲆⵠ;
		if (ᐃⵠⲆⵠᐃ.ᐃᐃⵠ) {
			ᐃⵠⲆⵠᐃ.ᐃᐃⵠ = false;
			var ᐃⲆⲆᐃⲆ = ᐃⵠⲆⵠᐃ.ᐃⲆⲆᐃⲆ;
			var Δⵠᐃ = ⲆⲆᐃⵠⵠⲆⵠ.ⲆⲆ.width;
			var ⲆΔΔ = ⲆⲆᐃⵠⵠⲆⵠ.ⲆⲆ.height;
			var ΔⵠΔⵠⵠⵠⲆ = ⲆⲆᐃⵠⵠⲆⵠ.ᐃ;
			var ⵠⲆΔᐃ = ⲆⲆⲆ.ⵠⲆΔᐃ;
			var ⵠⵠⲆⲆᐃΔΔ = false;
			ΔⵠΔⵠⵠⵠⲆ.clearRect(0, 0, Δⵠᐃ, ⲆΔΔ);
			ΔⵠΔⵠⵠⵠⲆ.drawImage(ⲆⲆᐃⵠⵠⲆⵠ.ⵠΔ, 0, 0);
			for (var Δᐃ = 0; ᐃⲆⲆᐃⲆ.length > Δᐃ; Δᐃ++) {
				var ΔⵠΔ = ⵠⲆΔᐃ[ᐃⲆⲆᐃⲆ[Δᐃ]];
				if (ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ⲆᐃᐃⲆⵠᐃⵠ && Δ[67] === ΔⵠΔ.ⲆⵠΔⵠΔ) continue;
				if (ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ === ⲆⲆⲆ.mode && ⵠΔᐃⲆ.ᐃᐃⲆᐃᐃᐃΔ === ΔⵠΔ.ⵠⲆΔΔ) continue;
				if (ᐃⲆⲆᐃⲆ[Δᐃ] == ⵠⵠⵠ.id) {
					ⵠⵠⲆⲆᐃΔΔ = true;
					ⵠΔᐃⲆ.ΔᐃΔⲆᐃ === ⲆⲆⲆ.mode && ⵠΔᐃⲆ.ΔΔΔⵠᐃΔⵠ === ΔⵠΔ.ⵠⲆΔΔ ? ᐃⲆ = "#FF0000" : ᐃⲆ = Δ[560]
				} else {
					ⵠΔᐃⲆ.ΔᐃΔⲆᐃ === ⲆⲆⲆ.mode && ΔⵠΔ.ⵠⲆΔΔ === ⵠΔᐃⲆ.ΔΔΔⵠᐃΔⵠ ? ᐃⲆ = "#990000" : ᐃⲆ = "#A1BDCD"
				}
				ΔⵠΔⵠⵠⵠⲆ.drawImage(ⲆΔⵠⵠⵠ(Ⲇ, "" + (Δᐃ + 1), 15 * Ⲇ, ᐃⲆ), ΔⲆᐃⲆⲆ * Ⲇ, (40 + 22 * Δᐃ) * Ⲇ);
				if (!ΔⵠΔ.ΔⵠΔⵠⵠΔⲆ) ΔⵠΔ.ΔⵠΔⵠⵠΔⲆ = ⲆΔⵠⵠⵠ(Ⲇ, ΔⵠΔ.ⲆⵠΔⵠΔ, 15 * Ⲇ, ᐃⲆ, ⲆⲆⲆⲆⲆ, undefined, undefined, undefined, Ⲇ * 110);
				ΔⵠΔⵠⵠⵠⲆ.drawImage(ΔⵠΔ.ΔⵠΔⵠⵠΔⲆ, Ⲇ * 39, Ⲇ * (40 + 22 * Δᐃ));
				ΔⵠΔⵠⵠⵠⲆ.drawImage(ⲆΔⵠⵠⵠ(Ⲇ, ⵠᐃΔᐃ.ᐃⲆΔⵠᐃᐃⵠ(ΔⵠΔ.ᐃⲆᐃⵠⲆ), ᐃᐃⵠΔⵠ * Ⲇ, ᐃⲆ), 156 * Ⲇ, Ⲇ * (40 + Δᐃ * 22))
			}
			if (!ⵠⵠⲆⲆᐃΔΔ) {
				(ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ᐃᐃΔⲆⲆ || ⵠΔᐃⲆ.ΔᐃΔⲆᐃ === ⲆⲆⲆ.mode || ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ⵠΔΔⲆⵠ || ⵠΔᐃⲆ.ⵠΔⲆⵠᐃΔΔ === ⲆⲆⲆ.mode || ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ⲆᐃⲆᐃᐃ || ⵠΔᐃⲆ.ⲆᐃᐃⲆⵠᐃⵠ === ⲆⲆⲆ.mode && !ⵠⵠⵠ.ⲆⲆᐃⵠΔⲆⵠ || ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ === ⲆⲆⲆ.mode && !ⵠⵠⵠ.ⵠΔⲆⲆⲆ) && (ΔⵠΔⵠⵠⵠⲆ.drawImage(Ⲇⵠ[ⵠ.ⲆᐃⵠⲆΔᐃⵠ], Ⲇ * 15, (46 + Δᐃ * 22) * Ⲇ), ΔⵠΔⵠⵠⵠⲆ.drawImage(ⲆΔⵠⵠⵠ(Ⲇ, ⵠᐃΔᐃ.ᐃⲆΔⵠᐃᐃⵠ(ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠⵠⵠ.id].ᐃⲆᐃⵠⲆ), ⵠⵠᐃᐃⲆ * Ⲇ, Δ[560]), ⵠⲆⲆⵠⲆ * Ⲇ, (46 + 22 * Δᐃ) * Ⲇ))
			}
		}
		ᐃΔΔⲆ(ᐃ, ⲆⲆᐃⵠⵠⲆⵠ.ⲆⲆ, ⲆⲆᐃⵠⵠⲆⵠ.translate.x, ⲆⲆᐃⵠⵠⲆⵠ.translate.y)
	}

	function ᐃⵠⲆΔⲆᐃⵠⵠᐃ() {
		var ᐃⲆΔΔΔ = ⵠⵠⵠ.ᐃⲆΔΔΔ;
		if (ᐃⲆΔΔΔ.wait) {
			var ᐃⲆᐃⵠⵠ = ᐃⲆΔΔΔ.timeout.ᐃᐃⵠ();
			ᐃ.save();
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔⵠᐃⲆⲆⲆΔ];
			ᐃ.translate(ⵠΔ.width - 12 * Ⲇ, ⲆΔᐃᐃ.ᐃⵠⲆᐃ.translate.y - Ⲇ * 190);
			var ΔΔ = -ⵠΔ.width / 2 + 9;
			var ΔΔⵠ = -ⵠΔ.height / 2 - ᐃᐃΔΔ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ΔΔⵠ);
			ᐃ.beginPath();
			ᐃ.lineWidth = Ⲇ * ⲆΔⲆⲆ;
			ᐃ.strokeStyle = ⵠ.ⲆΔⲆⵠⵠᐃⵠ[ⲆⲆⲆ.time];
			ᐃ.lineCap = Δ[237];
			ᐃ.arc(9, ΔΔⵠ + ⵠΔ.height / 2, 25 * Ⲇ, ᐃⲆⵠΔ, ᐃⲆΔΔΔ.timeout.ⲆᐃΔ * (ᐃⵠΔⲆ * Math.PI));
			ᐃ.stroke();
			ᐃ.restore();
			if (ᐃⲆᐃⵠⵠ) {
				ᐃⲆΔΔΔ.wait = ΔΔΔⵠⵠ;
				ᐃⲆΔΔΔ.timeout.ⲆᐃΔ = ⵠⲆΔⵠ;
				ᐃⲆΔΔΔ.timeout.ᐃΔⲆ = ΔⲆᐃⵠΔ
			}
		}
	}

	function ΔⵠΔᐃΔΔᐃΔⲆ() {
		var ΔΔⵠ = -ⲆᐃⲆⵠⲆ;
		if (ⵠⵠⵠ.ᐃⲆΔΔᐃ.enabled) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆΔᐃΔᐃΔᐃ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.x, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.y + ΔΔⵠ);
			ΔΔⵠ += 70
		}
		if (1 === ⵠⵠⵠ.ⲆΔᐃⲆⵠᐃᐃ) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⵠᐃΔΔᐃᐃ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.x, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.y + ΔΔⵠ);
			ΔΔⵠ += 70
		} else if (ⵠⵠⵠ.ᐃⵠⲆᐃ.ⵠⲆΔⲆⵠ.x < .25 || ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆΔᐃᐃᐃᐃ.x < .25 || .25 > ⵠⵠⵠ.ᐃⵠⲆᐃ.ΔΔΔΔⵠⲆⵠ.x || ⵠⵠⵠ.ᐃⵠⲆᐃ.ⵠᐃⲆᐃΔΔⵠ.x < .25 || .25 > ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆΔⲆΔ.x) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃⲆΔΔΔⲆ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.x, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.y + ΔΔⵠ);
			ΔΔⵠ += 70
		}
		if (ⵠⵠⵠ.ⵠⲆⲆᐃΔ > ⵠⵠΔᐃ) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⲆⵠᐃΔⵠΔ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.x, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.y + ΔΔⵠ);
			var ⵠⲆⲆᐃΔ = ᐃᐃΔΔᐃᐃᐃ[ⵠⵠⵠ.ⵠⲆⲆᐃΔ];
			ⵠⲆⲆᐃΔ === undefined && (ⵠⲆⲆᐃΔ = ⲆΔⵠⵠⵠ(Ⲇ, ⵠⵠⵠ.ⵠⲆⲆᐃΔ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6), ᐃᐃΔΔᐃᐃᐃ[ⵠⵠⵠ.ⵠⲆⲆᐃΔ] = ⵠⲆⲆᐃΔ);
			if (ⵠⵠⵠ.ⵠⲆⲆᐃΔ < 9) ᐃΔΔⲆ(ᐃ, ⵠⲆⲆᐃΔ, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.x - 39, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.y + ΔΔⵠ + ΔⲆᐃⲆⲆ);
			else ᐃΔΔⲆ(ᐃ, ⵠⲆⲆᐃΔ, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.x - 46, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.y + ΔΔⵠ + ΔΔᐃⲆΔ)
		}
		if (Settings.WeatherInfo.enabled) {
			if (ⵠⵠⵠ.ⵠⲆᐃⵠΔ.ΔⵠⲆⲆⵠ) {
				ᐃ.save();
				ᐃ.drawImage(BlizzardImage, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.x, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.y + ΔΔⵠ);
				ΔΔⵠ += 70
			}
			if (ⵠⵠⵠ.ⵠΔⵠⲆΔ.ΔⵠⲆⲆⵠ) {
				ᐃ.save();
				ᐃ.drawImage(SandstormImage, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.x, ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.y + ΔΔⵠ);
				ΔΔⵠ += 70
			}
		}
	}

	function ⲆⵠⵠΔⲆᐃⵠΔᐃ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠ.ᐃⵠΔΔⵠⲆᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / ⵠΔᐃⵠ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ⵠⵠⵠⵠΔΔⲆⲆⵠ() {
		var ⵠⲆΔᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ];
		if (ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ᐃᐃΔⲆⲆ || ⵠΔᐃⲆ.ⲆᐃⲆᐃᐃ === ⲆⲆⲆ.mode || ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ || ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ⵠΔΔⲆⵠ || ⵠΔᐃⲆ.ⵠΔⲆⵠᐃΔΔ === ⲆⲆⲆ.mode || ⵠΔᐃⲆ.ⲆΔΔⲆᐃ === ⲆⲆⲆ.mode || ⵠΔᐃⲆ.ΔᐃΔⲆᐃ === ⲆⲆⲆ.mode) {
			for (var Δᐃ = ᐃⲆⵠΔ; ⵠⲆΔᐃ.length > Δᐃ; Δᐃ++) {
				ⵠⲆΔᐃ[Δᐃ].ⲆⵠⲆΔΔΔⲆ()
			}
		} else if (ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ⲆᐃᐃⲆⵠᐃⵠ) {
			for (var Δᐃ = 0; Δᐃ < ⵠⲆΔᐃ.length; Δᐃ++) {
				if (ⵠⵠⵠ.ⲆⲆᐃⵠΔⲆⵠ || ⵠⵠⵠ.ΔΔᐃᐃΔ.enabled) ⵠⲆΔᐃ[Δᐃ].ⲆⵠⲆΔΔΔⲆ();
				else Δ[67] !== ⵠⲆΔᐃ[Δᐃ].ΔⵠⵠΔ.ⲆⵠΔⵠΔ && ⵠⲆΔᐃ[Δᐃ].ⲆⵠⲆΔΔΔⲆ()
			}
		}
	}

	function ΔΔΔᐃⲆⵠᐃⵠΔ(ⵠᐃ) {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && false == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ && (this.ᐃⲆⵠ.ᐃᐃⵠ = ΔΔΔⵠⵠ);
			var ⲆᐃΔ = Ⲇ * (600 * (ΔᐃⲆⲆ * (ⵠⲆⲆⲆ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ)));
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = ᐃΔΔ;
			var ΔΔⵠ = 0
		}
		var ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ΔΔᐃᐃ + ΔΔ, -ⲆΔΔ / ⵠⲆⵠΔ + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ⲆΔⵠΔⲆⲆⲆᐃⵠ() {
		var ᐃΔᐃᐃΔ = ⵠⵠⵠ.ᐃΔᐃᐃΔ;
		if (ᐃΔᐃᐃΔ.wait) {
			var ᐃⲆᐃⵠⵠ = ᐃΔᐃᐃΔ.timeout.ᐃᐃⵠ();
			ᐃ.save();
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔⵠᐃΔⵠⵠ];
			ᐃ.translate(ⵠΔ.width - ᐃΔⲆⵠ * Ⲇ, ⲆΔᐃᐃ.ᐃⵠⲆᐃ.translate.y - Ⲇ * 60);
			var ΔΔ = -ⵠΔ.width / ⲆⲆΔΔ - Δᐃᐃⵠ;
			var ΔΔⵠ = -ⵠΔ.height / ⲆⲆΔΔ - ⲆⵠⲆⲆⲆ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ΔΔⵠ);
			ᐃ.beginPath();
			ᐃ.lineWidth = 5 * Ⲇ;
			ᐃ.strokeStyle = ⵠ.ⵠᐃⵠⲆⲆᐃᐃ[ⲆⲆⲆ.time];
			ᐃ.lineCap = Δ[237];
			ᐃ.arc(0, ΔΔⵠ + ⵠΔ.height / 2, Ⲇ * 25, 0, 2 * Math.PI * ᐃΔᐃᐃΔ.timeout.ⲆᐃΔ);
			ᐃ.stroke();
			ᐃ.restore();
			ᐃⲆᐃⵠⵠ && (ᐃΔᐃᐃΔ.wait = false, ᐃΔᐃᐃΔ.timeout.ⲆᐃΔ = 0, ᐃΔᐃᐃΔ.timeout.ᐃΔⲆ = ᐃⲆⵠⵠᐃ)
		}
	}

	function ⵠᐃⲆΔⲆᐃⲆⵠⲆ() {
		var ᐃⵠⵠⵠᐃ = ⵠⵠⵠ.ᐃⵠⵠⵠᐃ;
		if (ᐃⵠⵠⵠᐃ.wait) {
			var ᐃⲆᐃⵠⵠ = ᐃⵠⵠⵠᐃ.timeout.ᐃᐃⵠ();
			ᐃ.save();
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔᐃΔΔᐃⵠⵠ];
			ᐃ.translate(ⵠΔ.width - Δᐃᐃⵠ * Ⲇ, ⲆΔᐃᐃ.ᐃⵠⲆᐃ.translate.y - Ⲇ * 125);
			var ΔΔ = -ⵠΔ.width / ⲆⲆΔΔ + ⵠⵠⲆᐃᐃ;
			var ΔΔⵠ = -ⵠΔ.height / ⵠⲆⵠΔ - ⵠΔΔⵠ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ΔΔⵠ);
			ᐃ.beginPath();
			ᐃ.lineWidth = Ⲇ * 5;
			ᐃ.strokeStyle = ⵠ.ⲆΔⲆⵠⵠᐃⵠ[ⲆⲆⲆ.time];
			ᐃ.lineCap = Δ[237];
			ᐃ.arc(ᐃⲆⲆⵠⲆⵠⵠ, ΔΔⵠ + ⵠΔ.height / 2, 25 * Ⲇ, 0, ᐃⵠⵠⵠᐃ.timeout.ⲆᐃΔ * (ΔⲆⲆⵠ * Math.PI));
			ᐃ.stroke();
			ᐃ.restore();
			if (ᐃⲆᐃⵠⵠ) {
				ᐃⵠⵠⵠᐃ.wait = false;
				ᐃⵠⵠⵠᐃ.timeout.ⲆᐃΔ = 0;
				ᐃⵠⵠⵠᐃ.timeout.ᐃΔⲆ = ⵠᐃᐃⵠΔ
			}
		}
	}
	var ΔⵠΔⲆᐃⵠⵠ = ΔᐃΔ;

	function ᐃⲆⵠΔⵠᐃΔ(ᐃⵠⵠΔ, ΔΔ, ΔΔⵠ) {
		if (ᐃⵠⵠΔ >= ⵠⲆᐃ) {
			ⵠΔ = Ⲇⵠ[ᐃⵠⵠΔ][ⲆⲆⲆ.time];
			switch (ᐃⵠⵠΔ) {
				case ⵠ.ᐃⲆΔⵠᐃ:
				case ⵠ.Ⲇⵠᐃᐃᐃ:
				case ⵠ.ⵠᐃⲆⲆᐃ:
				case ⵠ.ⲆΔⲆⵠΔ:
				case ⵠ.ⲆᐃΔⵠⲆ:
				case ⵠ.ΔⵠᐃᐃⲆ:
					ⲆᐃⲆⵠ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / ⲆᐃᐃΔ - (45 + ΔΔ) * Ⲇ, -ⵠΔ.height / 2 + Ⲇ * (ΔΔⵠ + 22));
					break;
				case ⵠ.ΔΔⲆⵠᐃ:
				case ⵠ.ⲆᐃⵠⲆΔ:
				case ⵠ.ⲆⲆΔⵠᐃ:
				case ⵠ.ⵠⵠⲆⲆⲆ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 4 - Ⲇ * (52 + ΔΔ), -ⵠΔ.height / 4 + Ⲇ * (ΔΔⵠ + 20));
					break;
				case ⵠ.ⵠⲆⲆᐃᐃ:
				case ⵠ.ⲆΔΔⲆⲆ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / ΔΔᐃᐃⲆ - Ⲇ * (57 + ΔΔ), -ⵠΔ.height / ⵠᐃΔΔΔ + Ⲇ * (ΔΔⵠ + ᐃᐃΔΔⲆ));
					break;
				case ⵠ.ΔᐃΔΔΔ:
				case ⵠ.ⵠⲆᐃⲆⵠ:
				case ⵠ.ⲆⲆⲆΔΔ:
				case ⵠ.ᐃΔᐃᐃⲆ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 4 - (47 + ΔΔ) * Ⲇ, -ⵠΔ.height / ᐃᐃΔΔ + (ΔΔⵠ + 45) * Ⲇ);
					break;
				case ⵠ.ⵠΔⵠⵠᐃ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 4 - (52 + ΔΔ) * Ⲇ, -ⵠΔ.height / 4 + Ⲇ * (ΔΔⵠ + 45));
					break;
				case ⵠ.ᐃⲆΔⵠⵠ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / ⲆΔⲆᐃΔ - Ⲇ * (47 + ΔΔ), -ⵠΔ.height / 4 + (ΔΔⵠ + 44) * Ⲇ);
					break;
				case ⵠ.ᐃᐃⲆⲆⲆ:
					ⲆᐃⲆⵠ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 2 - Ⲇ * (47 + ΔΔ), -ⵠΔ.height / 2 + (ΔΔⵠ + 44) * Ⲇ);
					break;
				case ⵠ.ᐃⵠΔᐃᐃ:
					ⲆᐃⲆⵠ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / ᐃⵠΔⲆ - (40 + ΔΔ) * Ⲇ, -ⵠΔ.height / Δⵠᐃᐃ + Ⲇ * (ΔΔⵠ + 65));
					break;
				case ⵠ.ΔᐃⵠᐃⲆ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 4 - Ⲇ * (37 + ΔΔ), -ⵠΔ.height / ⵠᐃΔΔΔ + (ΔΔⵠ + 85) * Ⲇ);
					break;
				case ⵠ.ᐃⲆⵠᐃΔ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 4 - Ⲇ * (37 + ΔΔ), -ⵠΔ.height / ⲆⵠⲆᐃ + (ΔΔⵠ + 85) * Ⲇ);
					break;
				case ⵠ.ⲆᐃΔᐃΔ:
				case ⵠ.ⲆⵠΔᐃΔ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 4 - Ⲇ * (26 + ΔΔ), -ⵠΔ.height / ΔᐃΔⲆΔ + Ⲇ * (ΔΔⵠ + 77));
					break;
				case ⵠ.ΔⵠᐃⵠΔ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 4 - Ⲇ * (37 + ΔΔ), -ⵠΔ.height / ΔᐃΔⵠ + Ⲇ * (ΔΔⵠ + 85));
					break;
				case ⵠ.ⲆⵠⲆⲆⵠ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 4 - Ⲇ * (47 + ΔΔ), -ⵠΔ.height / 4 + Ⲇ * (ΔΔⵠ + 44));
					break;
				case ⵠ.ⲆⵠⲆⵠᐃ:
				case ⵠ.ⵠΔΔΔᐃ:
				case ⵠ.ⵠⵠⵠⲆⲆ:
				case ⵠ.ⵠᐃⵠᐃΔ:
				case ⵠ.ΔΔⵠⵠⲆ:
				case ⵠ.ⵠⵠⲆᐃΔ:
				case ⵠ.ⲆΔᐃⵠΔ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / ⲆΔⵠᐃΔ - Ⲇ * (37 + ΔΔ), -ⵠΔ.height / ⲆⵠⲆᐃ + (ΔΔⵠ + 30) * Ⲇ);
					break;
				case ⵠ.ⵠⵠⵠⵠΔ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 4 - (47 + ΔΔ) * Ⲇ, -ⵠΔ.height / 4 + Ⲇ * (ΔΔⵠ + 35));
					break;
				case ⵠ.ⲆᐃΔⲆΔ:
				case ⵠ.Δᐃᐃᐃⵠ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 4 - (47 + ΔΔ) * Ⲇ, -ⵠΔ.height / 4 + Ⲇ * (ΔΔⵠ + 40));
					break;
				case ⵠ.ᐃⲆᐃΔᐃ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 4 - Ⲇ * (47 + ΔΔ), -ⵠΔ.height / ᐃᐃᐃΔⵠ + Ⲇ * (ΔΔⵠ + 34));
					break;
				case ⵠ.ⵠᐃⵠⵠΔ:
				case ⵠ.ⵠΔⲆⲆᐃ:
				case ⵠ.ᐃⵠᐃⵠⲆ:
				case ⵠ.ⵠⲆⲆⲆΔ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / ⵠⲆⲆΔΔ - Ⲇ * (37 + ΔΔ), -ⵠΔ.height / ⲆΔⵠᐃΔ + Ⲇ * (ΔΔⵠ + 90));
					break;
				case ⵠ.ᐃⵠᐃᐃⲆ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / ᐃΔⲆΔⲆ - (40 + ΔΔ) * Ⲇ, -ⵠΔ.height / 4 + Ⲇ * (ΔΔⵠ + 85));
					break;
				case ⵠ.ⵠᐃⵠⲆᐃ:
					ⲆᐃⲆⵠ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / ⵠᐃⵠⲆ - (39 + ΔΔ) * Ⲇ, -ⵠΔ.height / 2 + (ΔΔⵠ + 90) * Ⲇ);
					break;
				case ⵠ.ΔΔΔⲆⲆ:
				case ⵠ.ⲆᐃᐃⵠⲆ:
				case ⵠ.ⵠᐃΔΔᐃ:
				case ⵠ.ⵠΔⲆⵠⵠ:
				case ⵠ.ⵠΔⵠⵠΔ:
				case ⵠ.ⲆⵠⲆΔΔ:
					ⲆᐃⲆⵠ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 2 - Ⲇ * (46 + ΔΔ), -ⵠΔ.height / ⵠΔᐃⵠ + (ΔΔⵠ + 35) * Ⲇ);
					break;
				case ⵠ.ⲆⵠⲆᐃΔ:
					ⲆᐃⲆⵠ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 2 - Ⲇ * (47 + ΔΔ), -ⵠΔ.height / 2 + Ⲇ * (ΔΔⵠ + 54));
					break;
				case ⵠ.ⵠⲆΔⵠᐃ:
				case ⵠ.ⵠⲆⵠⵠᐃ:
				case ⵠ.ⵠᐃΔⵠⵠ:
				case ⵠ.ⵠⲆΔᐃⲆ:
					ⲆᐃⲆⵠ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / ΔⲆⲆⵠ - Ⲇ * (46 + ΔΔ), -ⵠΔ.height / 2 + Ⲇ * (ΔΔⵠ + 35));
					break;
				case ⵠ.ᐃⵠᐃᐃⵠ:
					ⲆᐃⲆⵠ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / ΔΔᐃᐃ - Ⲇ * (47 + ΔΔ), -ⵠΔ.height / ⵠᐃⵠⲆ + Ⲇ * (ΔΔⵠ + 20));
					break
			}
		}
	}

	function ᐃᐃᐃⲆⲆⵠΔⲆΔ(ⵠᐃ, ⲆⲆⲆⵠⵠᐃⲆⲆⵠ) {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (ⵠ.ΔᐃᐃⵠΔ === ⵠᐃ) {
			ⵠᐃ = ⵠ.ⵠⵠⲆⵠᐃ;
			this.info = 36
		}
		ⵠΔ = Ⲇⵠ[ⵠᐃ][this.info][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width / ⵠΔᐃΔᐃ;
		ⲆΔΔ = -ⵠΔ.height / ⲆᐃⵠⲆ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / Δᐃᐃⵠ, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			this.ᐃⲆⵠ.ᐃᐃⵠ() && false == this.ᐃⲆⵠ.ᐃΔⲆ && (this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ);
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ᐃᐃⲆᐃⵠᐃΔ = ᐃⲆΔΔᐃⵠⲆ(this.info, ⵠΔ, ᐃΔⵠⵠᐃⵠΔΔᐃ);
			ᐃΔΔⲆ(ᐃ, ᐃᐃⲆᐃⵠᐃΔ, -Δⵠᐃ / ⲆⲆΔΔ, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = ΔⵠⲆ
		}
		ᐃ.restore()
	}

	function ΔᐃΔΔᐃᐃⵠΔᐃ(ⵠᐃ, ᐃᐃⲆᐃⵠᐃΔ) {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ;
		ⲆΔΔ = -ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⵠⲆⲆΔΔ, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			this.ᐃⲆⵠ.ᐃᐃⵠ() && false == this.ᐃⲆⵠ.ᐃΔⲆ && (this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ);
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ᐃᐃⲆᐃⵠᐃΔ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / Δᐃᐃⵠ, ⲆΔΔ / Ⲇⵠᐃⵠ);
			ᐃ.globalAlpha = 1
		}
		ᐃ.restore()
	}

	function ⲆᐃⲆᐃᐃⲆⵠΔΔ() {
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			var ⲆᐃΔ = (ⵠΔΔ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * ΔᐃⲆⲆ * 600 * Ⲇ;
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = 0
		}
		if (this.info & 255 && 65280 != (this.info & 65280)) this.rotate = (this.rotate + ΔᐃⲆⲆ * .5) % (2 * Math.PI);
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x + ΔΔ, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y + ΔΔⵠ);
		ᐃ.save();
		ᐃ.rotate(this.rotate);
		ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆⵠΔΔᐃΔ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ΔΔᐃᐃ, -ⵠΔ.height / 2);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.rotate(this.ⵠΔᐃⲆΔᐃΔΔᐃ);
		ⵠΔ = Ⲇⵠ[ⵠ.ΔΔⵠⵠΔⲆΔ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
		ᐃ.restore();
		ᐃ.restore()
	}

	function ⲆΔⵠᐃΔⲆΔΔᐃ() {
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == false) this.ᐃⲆⵠ.ᐃᐃⵠ = false;
			var ⲆᐃΔ = Ⲇ * (ΔᐃⲆⲆ * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = ⵠᐃⵠⵠ;
			var ΔΔⵠ = 0
		}
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x + ΔΔ, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y + ΔΔⵠ);
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠ.ᐃᐃᐃⵠᐃ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ⲆⲆⵠᐃ, -ⵠΔ.height / ⵠᐃⵠⲆ);
		ᐃ.restore()
	}

	function ⲆΔΔⲆⵠᐃΔᐃⵠ() {
		if (10 > this.info) return;
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == ᐃⵠⵠⲆⵠ) this.ᐃⲆⵠ.ᐃᐃⵠ = ⲆⵠⵠΔᐃ;
			var ⲆᐃΔ = ΔᐃⲆⲆ * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600 * Ⲇ;
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = ⵠΔⵠⲆ;
			var ΔΔⵠ = ⵠⵠΔΔ
		}
		this.ⵠᐃᐃΔ.ᐃᐃⵠ();
		var ⵠΔ = Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆΔⵠ][ⲆⲆⲆ.time];
		var Δⵠᐃ = this.ⵠᐃᐃΔ.ⲆᐃΔ * -ⵠΔ.width;
		var ⲆΔΔ = this.ⵠᐃᐃΔ.ⲆᐃΔ * -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2 + ΔΔ, -ⲆΔΔ / ΔΔᐃᐃ + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ⲆΔᐃᐃⲆⵠⵠΔΔ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r) > 300) this.scale = Math.min(this.scale + ΔᐃⲆⲆ / ᐃⲆᐃⵠ, 1.8);
		else this.scale = Math.max(this.scale - ΔᐃⲆⲆ, ΔΔⲆΔ);
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		this.rotate.ᐃᐃⵠ();
		ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃΔⲆᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width);
		ⲆΔΔ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height);
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 4, -ⲆΔΔ / ΔᐃΔⵠ, Δⵠᐃ / Ⲇⵠᐃⵠ, ⲆΔΔ / ᐃΔⲆⵠ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			if (this.ᐃⲆⵠ.ᐃᐃⵠ() && ΔΔΔⵠⵠ == this.ᐃⲆⵠ.ᐃΔⲆ) this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ;
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆΔⵠᐃⵠⵠᐃ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ΔΔᐃᐃⲆ, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / ᐃⲆᐃⵠ);
			ᐃ.globalAlpha = 1
		}
		ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃⵠΔᐃⲆⵠ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width * this.scale;
		ⲆΔΔ = this.scale * (-ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * -60, Ⲇ * 20);
		ᐃ.rotate(this.rotate.ⲆᐃΔ);
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ * Ⲇ / 4, -ⲆΔΔ * Ⲇ / 4, Δⵠᐃ / Ⲇⵠᐃⵠ, ⲆΔΔ / 2);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆᐃⵠⲆᐃⲆ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * -Δⵠᐃ / 4, -ⲆΔΔ * Ⲇ / 4, Δⵠᐃ / ᐃΔⲆⵠ, ⲆΔΔ / ⵠΔᐃⵠ);
			ᐃ.globalAlpha = ᐃⲆΔ
		}
		ᐃ.restore();
		ⵠΔ = Ⲇⵠ[ⵠ.ⲆΔⲆⲆⵠⵠᐃ][ⲆⲆⲆ.time];
		ᐃ.save();
		ᐃ.translate(Ⲇ * 60, Ⲇ * 20);
		ᐃ.rotate(-this.rotate.ⲆᐃΔ);
		ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * -Δⵠᐃ / ᐃⵠⲆⲆ, Ⲇ * -ⲆΔΔ / 4, Δⵠᐃ / ⵠΔᐃΔᐃ, ⲆΔΔ / ΔⲆⲆⵠ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆΔⵠⲆΔΔ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * -Δⵠᐃ / ⲆΔⵠᐃΔ, Ⲇ * -ⲆΔΔ / 4, Δⵠᐃ / ΔⲆᐃⲆ, ⲆΔΔ / 2);
			ᐃ.globalAlpha = ⲆΔᐃΔ
		}
		ᐃ.restore();
		ᐃ.restore()
	}

	function ⵠᐃΔᐃⲆΔᐃⲆᐃ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == false) this.ᐃⲆⵠ.ᐃᐃⵠ = false;
			var ⲆᐃΔ = 600 * ((ⵠΔⲆ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * ΔᐃⲆⲆ) * Ⲇ;
			var ΔΔ = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ;
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = 0
		}
		var ΔⲆΔⵠ = this.info & 15;
		if (this.info === ⵠΔΔΔⵠ || 0 === ΔⲆΔⵠ) {
			ᐃ.rotate(this.angle);
			this.ⵠᐃᐃΔ.ᐃᐃⵠ();
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ⵠᐃⲆΔⵠᐃⲆ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆᐃⲆΔΔⲆ][ⲆⲆⲆ.time];
			var Δⵠᐃ = -ⵠΔ.width * this.ⵠᐃᐃΔ.ⲆᐃΔ;
			var ⲆΔΔ = -ⵠΔ.height * this.ⵠᐃᐃΔ.ⲆᐃΔ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⲆⲆᐃⲆ + ΔΔ, -ⲆΔΔ / ⲆⲆⵠᐃ + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ)
		} else {
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ᐃΔΔᐃⲆⲆⲆ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ΔⵠᐃⲆΔ][ⲆⲆⲆ.time];
			ᐃ.translate(0, ⵠΔ.height / 2);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ - ⵠΔ.width / ΔΔᐃᐃ, -ⵠΔ.height + ΔΔⵠ)
		}
		ᐃ.restore()
	}

	function ⵠⲆⵠΔⵠⲆⲆⵠⵠ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && false == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ && (this.ᐃⲆⵠ.ᐃᐃⵠ = ⲆⵠⲆⵠΔ);
			var ⲆᐃΔ = 600 * ((1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * ΔᐃⲆⲆ) * Ⲇ;
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = ⲆⲆᐃΔ;
			var ΔΔⵠ = 0
		}
		var ΔⲆΔⵠ = this.info & 15;
		if (ⵠⵠⲆᐃᐃ === this.info || 0 === ΔⲆΔⵠ) {
			ᐃ.rotate(this.angle);
			this.ⵠᐃᐃΔ.ᐃᐃⵠ();
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆⲆΔΔⵠⲆ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ΔΔⲆΔΔⵠΔ][ⲆⲆⲆ.time];
			var Δⵠᐃ = -ⵠΔ.width * this.ⵠᐃᐃΔ.ⲆᐃΔ;
			var ⲆΔΔ = -ⵠΔ.height * this.ⵠᐃᐃΔ.ⲆᐃΔ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2 + ΔΔ, -ⲆΔΔ / 2 + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ)
		} else {
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ᐃᐃΔⲆⲆⲆΔ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆΔⲆⲆ][ⲆⲆⲆ.time];
			ᐃ.translate(ⵠΔΔᐃ, ⵠΔ.height / ⲆᐃⵠⲆ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ - ⵠΔ.width / ⵠᐃⵠⲆ, -ⵠΔ.height + ΔΔⵠ)
		}
		ᐃ.restore()
	}

	function ⵠᐃⲆΔΔⵠΔⵠⵠ(ⵠᐃ, ΔΔ, ΔΔⵠ) {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + ΔΔ, ⵠⵠⵠ.ᐃⵠⲆ.y + ΔΔⵠ);
		ᐃ.rotate(this.angle);
		ᐃ.translate(this.x - ΔΔ, this.y - ΔΔⵠ);
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width;
		ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / ΔⲆⲆⵠ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ⵠⲆᐃⲆⵠⲆⵠⵠᐃ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == false && (this.ᐃⲆⵠ.ᐃᐃⵠ = ΔⲆᐃⵠΔ);
			var ⲆᐃΔ = 600 * (ΔᐃⲆⲆ * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ)) * Ⲇ;
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = ⵠⵠΔΔ
		}
		var ΔⲆΔⵠ = this.info & 15;
		if (this.info === ⲆᐃⲆⲆᐃ || ⵠΔⵠⲆ === ΔⲆΔⵠ) {
			ᐃ.rotate(this.angle);
			this.ⵠᐃᐃΔ.ᐃᐃⵠ();
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠΔⲆᐃᐃᐃ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ⵠᐃⵠᐃΔΔⵠ][ⲆⲆⲆ.time];
			var Δⵠᐃ = -ⵠΔ.width * this.ⵠᐃᐃΔ.ⲆᐃΔ;
			var ⲆΔΔ = -ⵠΔ.height * this.ⵠᐃᐃΔ.ⲆᐃΔ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⲆⲆᐃⲆ + ΔΔ, -ⲆΔΔ / 2 + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ)
		} else {
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⵠΔᐃⵠⲆⲆ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⲆⵠᐃⵠᐃⵠ][ⲆⲆⲆ.time];
			ᐃ.translate(0, ⵠΔ.height / ΔᐃΔⲆ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ - ⵠΔ.width / 2, -ⵠΔ.height + ΔΔⵠ)
		}
		ᐃ.restore()
	}

	function ᐃⵠⵠⵠᐃΔᐃ(ⵠᐃ, ᐃᐃⲆᐃⵠᐃΔ) {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / ΔⲆⲆⵠ, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == ᐃⲆⵠⵠᐃ && (this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ);
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ᐃᐃⲆᐃⵠᐃΔ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / ᐃⵠΔⲆ, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = 1
		}
		ᐃ.restore()
	}

	function ᐃΔᐃⲆΔΔΔ(ⵠᐃ) {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ;
		ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ⲆⲆΔᐃΔⵠⵠᐃⵠ() {
		var ᐃⵠⵠⲆᐃ = Math.PI / 2;
		var ⵠⵠᐃⵠΔⵠᐃ = Math.PI / 4;
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		this.ΔΔⲆᐃⲆΔΔ.ᐃᐃⵠ();
		this.ⵠΔᐃⵠⲆᐃⵠ.ᐃᐃⵠ();
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		this.info === ⵠᐃⵠⵠ ? ⵠΔ = Ⲇⵠ[ⵠ.ᐃᐃⵠⵠᐃ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ᐃᐃΔⵠᐃΔⵠ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ;
		ⲆΔΔ = -ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / ᐃⲆᐃⵠ, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == ⵠᐃᐃⵠΔ) this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ;
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠᐃΔᐃΔⲆΔ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / ᐃⵠΔⲆ, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = 1
		}
		if (this.action & ⵠᐃᐃⵠ.ΔⵠᐃⲆⵠ) {
			if (this.ⲆⲆᐃΔⵠ.ᐃᐃⵠ() && ΔⲆΔΔᐃ == this.ⲆⲆᐃΔⵠ.ᐃΔⲆ) this.action -= ⵠᐃᐃⵠ.ΔⵠᐃⲆⵠ;
			ᐃ.globalAlpha = .6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⲆⲆᐃΔᐃ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = 1
		}
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle + ⵠⵠᐃⵠΔⵠᐃ);
		ᐃ.translate(100, ⵠⵠΔᐃ);
		ᐃ.rotate(ᐃⵠⵠⲆᐃ);
		if (0 === this.info) ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔᐃⲆᐃΔᐃ][ⲆⲆⲆ.time];
		else ⵠΔ = Ⲇⵠ[ⵠ.ⲆΔΔᐃⲆⲆΔ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.ΔΔⲆᐃⲆΔΔ.ⲆᐃΔ * -ⵠΔ.width;
		ⲆΔΔ = this.ΔΔⲆᐃⲆΔΔ.ⲆᐃΔ * -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / Δᐃᐃⵠ, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔᐃⵠⵠⵠⵠ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = Δᐃᐃ
		}
		if (this.action & ⵠᐃᐃⵠ.ΔⵠᐃⲆⵠ) {
			ᐃ.globalAlpha = .6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔΔΔᐃᐃΔᐃ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = ᐃΔⵠΔ
		}
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle + ᐃⵠⵠⲆᐃ + ⵠⵠᐃⵠΔⵠᐃ);
		ᐃ.translate(ᐃΔⵠⵠⵠ, ⵠΔⵠⲆ);
		ᐃ.rotate(ᐃⵠⵠⲆᐃ);
		this.info === 0 ? ⵠΔ = Ⲇⵠ[ⵠ.ⵠᐃⲆᐃᐃⲆΔ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ⲆⵠⲆⵠᐃⲆⲆ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.ⵠΔᐃⵠⲆᐃⵠ.ⲆᐃΔ;
		ⲆΔΔ = -ⵠΔ.height * this.ⵠΔᐃⵠⲆᐃⵠ.ⲆᐃΔ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⵠΔᐃⵠ, -ⲆΔΔ / ΔⲆᐃⲆ, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔⲆⵠ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / Ⲇⵠᐃⵠ, -ⲆΔΔ / ΔᐃΔⲆ, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = ⲆΔⲆⵠ
		}
		if (this.action & ⵠᐃᐃⵠ.ΔⵠᐃⲆⵠ) {
			ᐃ.globalAlpha = .6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃⵠⵠⵠⵠⲆ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⲆᐃⵠⲆ, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = ⵠⵠᐃ
		}
		ᐃ.restore()
	}

	function ⲆΔⲆᐃⵠᐃⵠⲆΔ() {
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		ⲆΔⵠΔ === this.info ? ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠᐃᐃⵠ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆΔΔᐃᐃⲆ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ;
		ⲆΔΔ = -ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⲆⲆΔΔ, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == ΔⲆΔΔᐃ) this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ;
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⵠⵠⵠᐃⲆⵠ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / ΔⲆᐃⲆ, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = ⵠΔⲆ
		}
		ᐃ.restore()
	}

	function ΔᐃⲆᐃⲆΔⵠΔΔ() {
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && false == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ && (this.ᐃⲆⵠ.ᐃᐃⵠ = false);
			var ⲆᐃΔ = Ⲇ * ((1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * ΔᐃⲆⲆ * 600);
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = ⵠΔⵠⲆ
		}
		ᐃ.save();
		if (this.info & 255 && 65280 != (this.info & 65280)) {
			ΔΔ += Math.random() * ⵠΔᐃΔᐃ - ᐃΔⵠΔ;
			ΔΔⵠ += ⵠΔᐃⵠ * Math.random() - ⲆΔᐃΔ
		}
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x + ΔΔ, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y + ΔΔⵠ);
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆΔᐃΔ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ⲆⲆᐃⲆ, -ⵠΔ.height / ᐃⵠΔⲆ);
		if (this.info & 255 && (this.info & 65280) != 65280) this.rotate = (this.rotate + ⲆΔΔⲆ * ΔᐃⲆⲆ) % (2 * Math.PI);
		ᐃ.rotate(this.rotate);
		ⵠΔ = Ⲇⵠ[ⵠ.ⵠⲆⲆⲆᐃᐃⲆ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ΔⲆᐃⲆ, -ⵠΔ.height / ΔⲆᐃⲆ);
		ᐃ.restore()
	}

	function ΔⲆⲆⲆⲆⵠΔᐃᐃ() {
		if (10 === this.info) return;
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == ⲆⵠⲆⵠΔ && (this.ᐃⲆⵠ.ᐃᐃⵠ = false);
			var ⲆᐃΔ = Ⲇ * (600 * (ΔᐃⲆⲆ * (ⵠΔΔ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ)));
			var ΔΔ = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ;
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = ᐃΔΔ
		}
		if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠⵠⲆ][ⲆⲆⲆ.time];
		else var ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆᐃⵠⲆⲆΔ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ⲆᐃⵠⲆ + ΔΔ, -ⵠΔ.width / 2 + ΔΔⵠ);
		ᐃ.restore();
		var ΔⲆΔⵠ = this.info & 15;
		for (var Δᐃ = 0; ΔⲆΔⵠ > Δᐃ; Δᐃ++) this.ⵠⲆⵠⵠ[Δᐃ].ⲆᐃᐃⲆ(ⵠ.ᐃᐃΔᐃⵠ)
	}

	function ᐃⲆⵠΔΔΔⵠⲆⲆ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r) > 300) this.scale = Math.min(this.scale + ΔᐃⲆⲆ / Δⵠᐃᐃ, 1.8);
		else this.scale = Math.max(this.scale - ΔᐃⲆⲆ, ᐃⲆⲆ);
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		this.rotate.ᐃᐃⵠ();
		this.info === 0 ? ⵠΔ = Ⲇⵠ[ⵠ.ⵠᐃⲆΔⲆ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ⵠᐃⵠⵠΔΔᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
		ⲆΔΔ = -ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⲆⲆᐃΔᐃ, -ⲆΔΔ / 4, Δⵠᐃ / ⵠᐃⵠⲆ, ⲆΔΔ / ⲆⲆᐃⲆ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == false) this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ;
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⲆᐃᐃ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / ᐃⵠΔⲆ);
			ᐃ.globalAlpha = 1
		}
		ᐃⲆⵠΔ === this.info ? ⵠΔ = Ⲇⵠ[ⵠ.ᐃⵠⵠᐃⲆⲆΔ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆΔΔᐃⵠⲆ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width * this.scale;
		ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height * this.scale;
		ᐃ.save();
		ᐃ.translate(Ⲇ * -40, Ⲇ * 10);
		ᐃ.rotate(this.rotate.ⲆᐃΔ);
		ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * -Δⵠᐃ / ᐃΔⲆΔⲆ, -ⲆΔΔ * Ⲇ / 4, Δⵠᐃ / ᐃⵠΔⲆ, ⲆΔΔ / ᐃⲆᐃⵠ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆⲆᐃᐃΔⲆ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * -Δⵠᐃ / 4, -ⲆΔΔ * Ⲇ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
			ᐃ.globalAlpha = 1
		}
		ᐃ.restore();
		this.info === 0 ? ⵠΔ = Ⲇⵠ[ⵠ.ΔⵠⲆᐃⵠΔⵠ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ᐃᐃⵠⲆΔΔⲆ][ⲆⲆⲆ.time];
		ᐃ.save();
		ᐃ.translate(40 * Ⲇ, ⵠᐃᐃⵠⵠ * Ⲇ);
		ᐃ.rotate(-this.rotate.ⲆᐃΔ);
		ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * -Δⵠᐃ / 4, Ⲇ * -ⲆΔΔ / 4, Δⵠᐃ / ΔᐃΔⲆ, ⲆΔΔ / ᐃΔⲆⵠ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃΔⵠⲆⲆᐃⵠ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * -Δⵠᐃ / 4, Ⲇ * -ⲆΔΔ / ⲆⲆᐃΔᐃ, Δⵠᐃ / 2, ⲆΔΔ / 2);
			ᐃ.globalAlpha = 1
		}
		ᐃ.restore();
		ᐃ.restore()
	}

	function ⲆΔⵠⵠⵠⵠΔⵠⲆ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		300 < ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r) ? this.scale = Math.min(this.scale + ΔᐃⲆⲆ / 2, 1.8) : this.scale = Math.max(this.scale - ΔᐃⲆⲆ, ⲆⵠΔⲆ);
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		this.rotate.ᐃᐃⵠ();
		this.info === Ⲇᐃⵠⵠ ? ⵠΔ = Ⲇⵠ[ⵠ.ⲆΔᐃⲆΔ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ⲆΔⲆΔⲆⲆⵠ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
		ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height * this.scale;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⲆⲆᐃΔᐃ, -ⲆΔΔ / ᐃᐃᐃΔⵠ, Δⵠᐃ / 2, ⲆΔΔ / 2);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			if (this.ᐃⲆⵠ.ᐃᐃⵠ() && false == this.ᐃⲆⵠ.ᐃΔⲆ) this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ;
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃⵠⵠΔⵠᐃⵠ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ΔᐃΔⵠ, -ⲆΔΔ / ⵠⲆⲆΔΔ, Δⵠᐃ / 2, ⲆΔΔ / ⵠΔᐃⵠ);
			ᐃ.globalAlpha = ⵠΔΔ
		}
		ⵠᐃⵠⵠ === this.info ? ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃΔⲆᐃᐃⲆ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠᐃⲆΔⵠⲆ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width * this.scale;
		ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height * this.scale;
		ᐃ.save();
		ᐃ.translate(-40 * Ⲇ, 10 * Ⲇ);
		ᐃ.rotate(this.rotate.ⲆᐃΔ);
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ * Ⲇ / 4, -ⲆΔΔ * Ⲇ / ΔᐃΔⵠ, Δⵠᐃ / ᐃⲆᐃⵠ, ⲆΔΔ / 2);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆᐃⲆⲆⲆᐃ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ * Ⲇ / ΔᐃΔΔ, -ⲆΔΔ * Ⲇ / ᐃᐃⲆⵠ, Δⵠᐃ / 2, ⲆΔΔ / Ⲇⵠᐃⵠ);
			ᐃ.globalAlpha = ΔⲆΔᐃ
		}
		ᐃ.restore();
		if (ⵠⵠΔΔ === this.info) ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆΔΔⵠⲆⲆ][ⲆⲆⲆ.time];
		else ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⵠΔᐃ][ⲆⲆⲆ.time];
		ᐃ.save();
		ᐃ.translate(Ⲇ * 40, Ⲇ * 10);
		ᐃ.rotate(-this.rotate.ⲆᐃΔ);
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ * Ⲇ / 4, Ⲇ * -ⲆΔΔ / 4, Δⵠᐃ / ᐃⵠΔⲆ, ⲆΔΔ / 2);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⲆΔⲆⲆΔⲆ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * -Δⵠᐃ / ⲆⲆᐃΔᐃ, -ⲆΔΔ * Ⲇ / ⲆⲆᐃΔᐃ, Δⵠᐃ / 2, ⲆΔΔ / ᐃᐃᐃᐃ);
			ᐃ.globalAlpha = ΔⵠⲆ
		}
		ᐃ.restore();
		ᐃ.restore()
	}

	function ᐃᐃᐃΔⲆⵠⲆⲆⲆ() {
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == false) this.ᐃⲆⵠ.ᐃᐃⵠ = ⵠⲆⵠᐃᐃ;
			var ⲆᐃΔ = 600 * ((Δᐃᐃ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * ΔᐃⲆⲆ) * Ⲇ;
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = ⵠΔⵠⲆ
		}
		ᐃ.save();
		if (this.info & 255 && (this.info & 65280) != 65280) {
			ΔΔ += Math.random() * ΔᐃΔⲆ - 1;
			ΔΔⵠ += Math.random() * ⵠΔᐃⵠ - 1
		}
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x + ΔΔ, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y + ΔΔⵠ);
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠ.ⲆⵠΔⵠⵠ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ᐃⵠΔⲆ, -ⵠΔ.height / ⵠⲆⵠΔ);
		this.info & 255 && 65280 != (this.info & 65280) && (this.rotate = (this.rotate + 3 * ΔᐃⲆⲆ) % (2 * Math.PI));
		ᐃ.rotate(this.rotate);
		ⵠΔ = Ⲇⵠ[ⵠ.ⲆⵠⲆⵠⵠΔᐃ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ΔⲆⲆⵠ, -ⵠΔ.height / Δᐃᐃⵠ);
		ᐃ.restore()
	}

	function ⵠᐃᐃΔΔⲆΔᐃⲆ() {
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && ⲆΔᐃⵠᐃ == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ) this.ᐃⲆⵠ.ᐃᐃⵠ = ᐃⵠⵠⲆⵠ;
			var ⲆᐃΔ = 600 * (ΔᐃⲆⲆ * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ)) * Ⲇ;
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = 0
		}
		ᐃ.save();
		if (this.info & 255 && 65280 != (this.info & 65280)) {
			ΔΔ += 2 * Math.random() - ⵠⵠⵠΔ;
			ΔΔⵠ += ΔⲆⲆⵠ * Math.random() - ⲆΔᐃΔ
		}
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x + ΔΔ, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y + ΔΔⵠ);
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠ.ᐃⵠⵠΔⵠ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / ⲆⲆⵠᐃ);
		this.info & 255 && 65280 != (this.info & 65280) && (this.rotate = (this.rotate + ΔᐃⲆⲆ * 3) % (Math.PI * 2));
		ᐃ.rotate(this.rotate);
		ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⲆΔⵠⵠⲆ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ᐃⲆᐃⵠ, -ⵠΔ.height / 2);
		ᐃ.restore()
	}

	function ᐃᐃᐃⲆΔᐃᐃⲆΔ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		this.ᐃᐃΔⲆⵠ.ᐃᐃⵠ();
		ⵠΔ = Ⲇⵠ[ⵠ.ⵠⲆⵠⵠΔⲆΔ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.ᐃᐃΔⲆⵠ.ⲆᐃΔ * -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⵠⲆⵠΔ, -ⲆΔΔ / ⵠᐃⵠⲆ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ᐃⲆΔⲆΔⵠΔΔᐃ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == ⲆΔΔⵠⵠ && (this.ᐃⲆⵠ.ᐃᐃⵠ = false);
			var ⲆᐃΔ = Ⲇ * (ΔᐃⲆⲆ * (ⲆΔᐃ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = ⲆⲆⵠⲆ
		}
		if (this.action == 2) ⵠΔ = Ⲇⵠ[ⵠ.ᐃΔⵠᐃⲆΔΔ][ⲆⲆⲆ.time];
		else ⵠΔ = Ⲇⵠ[ⵠ.ᐃⵠΔⵠⲆⵠᐃ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / 2 + ΔΔ, -ⵠΔ.height / ⵠΔᐃΔᐃ + ΔΔⵠ);
		ᐃ.restore()
	}

	function ⵠⲆΔΔΔΔⲆⲆΔ() {
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == ⲆⵠΔᐃⵠ && (this.ᐃⲆⵠ.ᐃᐃⵠ = ⲆⵠⵠΔᐃ);
			var ⲆᐃΔ = 600 * (ΔᐃⲆⲆ * (ⲆΔᐃΔ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ)) * Ⲇ;
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = 0
		}
		this.ᐃΔⲆᐃΔΔΔ = (this.ᐃΔⲆᐃΔΔΔ + 3 * ΔᐃⲆⲆ) % (2 * Math.PI);
		this.ⵠⵠⵠⲆⵠⵠΔ = (this.ⵠⵠⵠⲆⵠⵠΔ - ΔᐃⲆⲆ * 3) % (Ⲇⵠᐃⵠ * Math.PI);
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x + ΔΔ, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y + ΔΔⵠ);
		ᐃ.save();
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠ.ΔΔⵠⲆⵠ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ΔᐃΔⲆ, -ⵠΔ.height / ᐃⵠΔⲆ);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.rotate(this.ᐃΔⲆᐃΔΔΔ);
		ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆⵠᐃᐃΔⵠ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / ΔⲆⲆⵠ);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.rotate(this.ⵠⵠⵠⲆⵠⵠΔ);
		ⵠΔ = Ⲇⵠ[ⵠ.ⲆⵠⲆᐃⵠΔⵠ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ⲆⲆΔΔ, -ⵠΔ.height / 2);
		ᐃ.restore();
		ᐃ.restore()
	}

	function ΔⵠⲆⵠᐃᐃⲆⲆⲆ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		this.ⵠᐃᐃΔ.ᐃᐃⵠ();
		ᐃ.globalAlpha = .3;
		var ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃⲆΔⵠΔⵠ][ⲆⲆⲆ.time];
		var Δⵠᐃ = -ⵠΔ.width * this.ⵠᐃᐃΔ.ⲆᐃΔ;
		var ⲆΔΔ = -ⵠΔ.height * this.ⵠᐃᐃΔ.ⲆᐃΔ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ΔᐃΔⲆ, -ⲆΔΔ / Δⵠᐃᐃ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.globalAlpha = ΔΔⲆΔ;
		ᐃ.restore()
	}

	function ⵠᐃⵠⵠⵠᐃⲆΔⲆ(ⵠᐃ) {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		this.ⵠᐃᐃΔ.ᐃᐃⵠ();
		ᐃ.globalAlpha = .3;
		var ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃⲆΔⵠΔⵠ][ⲆⲆⲆ.time];
		var Δⵠᐃ = this.ⵠᐃᐃΔ.ⲆᐃΔ * -ⵠΔ.width;
		var ⲆΔΔ = this.ⵠᐃᐃΔ.ⲆᐃΔ * -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / Δⵠᐃᐃ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.globalAlpha = ⵠⲆⲆⲆ;
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == false && (this.ᐃⲆⵠ.ᐃᐃⵠ = ΔᐃⲆⵠⵠ);
			var ⲆᐃΔ = Ⲇ * ((ⵠⲆⲆⲆ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * ΔᐃⲆⲆ * 600);
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = ᐃΔΔ
		}
		ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ΔΔᐃᐃ + ΔΔ, -ⵠΔ.height / 2 + ΔΔⵠ);
		ᐃ.restore()
	}

	function ΔⵠⲆᐃⲆᐃⲆᐃᐃ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		300 < ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r) ? this.scale = Math.min(this.scale + ΔᐃⲆⲆ / 2, 1.8) : this.scale = Math.max(this.scale - ΔᐃⲆⲆ, ⵠⵠⵠΔ);
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		this.rotate.ᐃᐃⵠ();
		ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⲆΔⲆ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.scale * (-ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ);
		ⲆΔΔ = this.scale * (-ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ);
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ΔⲆⲆⵠ, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == false) this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ;
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔⵠⵠᐃⵠᐃⲆ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = ⵠⵠᐃ
		}
		ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆⵠⲆᐃᐃⵠ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
		ⲆΔΔ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height);
		ᐃ.save();
		ᐃ.translate(Ⲇ * -30, 70 * Ⲇ);
		ᐃ.rotate(this.rotate.ⲆᐃΔ);
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -10 * Ⲇ, Ⲇ * -40, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃⲆΔᐃᐃⵠ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * -10, -40 * Ⲇ, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = ΔⵠⲆ
		}
		ᐃ.restore();
		ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃⲆᐃΔⲆⵠ][ⲆⲆⲆ.time];
		ᐃ.save();
		ᐃ.translate(Ⲇ * 30, Ⲇ * 70);
		ᐃ.rotate(-this.rotate.ⲆᐃΔ);
		ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * 10 - Δⵠᐃ, -40 * Ⲇ, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆⲆᐃΔⵠᐃ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, 10 * Ⲇ - Δⵠᐃ, -40 * Ⲇ, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = ⲆΔᐃ
		}
		ᐃ.restore();
		ᐃ.restore()
	}

	function ⵠⵠⲆᐃΔᐃⲆⵠᐃ() {
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == false && (this.ᐃⲆⵠ.ᐃᐃⵠ = false);
			var ⲆᐃΔ = Ⲇ * (600 * ((ⲆΔᐃΔ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * ΔᐃⲆⲆ));
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = ⲆᐃⲆ;
			var ΔΔⵠ = ᐃⲆⵠΔ
		}
		ᐃ.save();
		this.info & 255 && (this.info & 65280) != 65280 && (ΔΔ += Math.random() * 2 - ⵠΔΔ, ΔΔⵠ += Math.random() * ⵠΔᐃⵠ - 1);
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x + ΔΔ, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y + ΔΔⵠ);
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆᐃΔᐃ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ΔⲆᐃⲆ, -ⵠΔ.height / 2);
		if (this.info & 255 && (this.info & 65280) != 65280) this.rotate = (this.rotate + ⵠⵠⵠⵠ * ΔᐃⲆⲆ) % (Math.PI * 2);
		ᐃ.rotate(this.rotate);
		ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆΔᐃⲆⵠⵠ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ΔᐃΔⲆ, -ⵠΔ.height / 2);
		ᐃ.restore()
	}

	function ⵠⲆᐃⵠⲆᐃᐃΔⲆ(ᐃⵠⵠΔ, ΔΔ, ΔΔⵠ) {
		if (0 <= ᐃⵠⵠΔ) {
			ⵠΔ = Ⲇⵠ[ᐃⵠⵠΔ][ⲆⲆⲆ.time];
			switch (ᐃⵠⵠΔ) {
				case ⵠ.ⲆⲆΔⲆⲆ:
				case ⵠ.ⵠⲆⲆⲆᐃ:
				case ⵠ.ⲆⲆⲆΔⵠ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 4 - (0 + ΔΔ) * Ⲇ, -ⵠΔ.height / ⲆⲆᐃΔᐃ + (ΔΔⵠ + 35) * Ⲇ);
					break;
				case ⵠ.ΔⵠᐃᐃΔ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / ᐃΔⲆΔⲆ - Ⲇ * (ⵠⲆⲆⲆ + ΔΔ), -ⵠΔ.height / ⲆⲆᐃΔᐃ + Ⲇ * (ΔΔⵠ + 45));
					break;
				case ⵠ.ᐃΔΔⲆⵠ:
				case ⵠ.ΔⵠᐃⲆᐃ:
					ΔⵠⵠⲆᐃ(ᐃⵠⵠΔ, ⵠΔ, -ⵠΔ.width / 4 - Ⲇ * (1 + ΔΔ), -ⵠΔ.height / ⵠΔΔⵠ + Ⲇ * (ΔΔⵠ + 40));
					break
			}
		}
	}

	function ⵠⵠⵠᐃⵠⲆⲆⵠⵠ() {
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		0 === this.info ? ⵠΔ = Ⲇⵠ[ⵠ.ᐃΔⲆΔⵠ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆⲆᐃⵠΔⲆ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width;
		ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ᐃᐃᐃᐃ, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == ⲆⵠⲆΔᐃ && (this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ);
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃΔⲆⵠⵠⲆᐃ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ΔⲆᐃⲆ, -ⲆΔΔ / ⵠⲆⵠΔ, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = 1
		}
		ᐃ.restore()
	}

	function ΔᐃΔᐃⲆⵠᐃⲆᐃ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && ΔⲆΔΔᐃ == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ) this.ᐃⲆⵠ.ᐃᐃⵠ = ⵠΔΔᐃᐃ;
			var ⲆᐃΔ = ΔᐃⲆⲆ * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600 * Ⲇ;
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = 0
		}
		var ΔⲆΔⵠ = this.info & 15;
		if (10 === this.info || 0 === ΔⲆΔⵠ) {
			ᐃ.rotate(this.angle);
			this.ⵠᐃᐃΔ.ᐃᐃⵠ();
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔⵠⵠⵠⵠᐃ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆⲆΔ][ⲆⲆⲆ.time];
			var Δⵠᐃ = this.ⵠᐃᐃΔ.ⲆᐃΔ * -ⵠΔ.width;
			var ⲆΔΔ = this.ⵠᐃᐃΔ.ⲆᐃΔ * -ⵠΔ.height;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2 + ΔΔ, -ⲆΔΔ / 2 + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ)
		} else {
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ⲆΔΔᐃΔⲆⲆ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆⵠᐃᐃ][ⲆⲆⲆ.time];
			ᐃ.translate(ⲆΔⵠΔ, ⵠΔ.height / ⲆⲆᐃⲆ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ - ⵠΔ.width / 2, -ⵠΔ.height + ΔΔⵠ)
		}
		ᐃ.restore()
	}

	function ᐃⲆΔⲆᐃᐃⵠⵠⵠ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && ⲆⵠⵠΔᐃ == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ) this.ᐃⲆⵠ.ᐃᐃⵠ = false;
			var ⲆᐃΔ = Ⲇ * (ΔᐃⲆⲆ * (ⲆⵠΔⲆ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = ⵠΔΔᐃ;
			var ΔΔⵠ = ᐃⲆⵠΔ
		}
		0 === this.info ? ⵠΔ = Ⲇⵠ[ⵠ.ᐃΔΔⵠⵠ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆⵠⲆⵠ][ⲆⲆⲆ.time][this.info - Δᐃᐃ];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ᐃΔⲆⵠ + ΔΔ, -ⵠΔ.height / ⲆⲆⵠᐃ + ΔΔⵠ);
		ᐃ.restore()
	}

	function ᐃΔΔⲆΔⵠⲆᐃΔ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		this.ᐃⲆᐃΔⲆ.ᐃᐃⵠ();
		ⵠΔ = Ⲇⵠ[ⵠ.ⲆⵠⲆⲆᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.ᐃⲆᐃΔⲆ.ⲆᐃΔ * -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height * this.ᐃⲆᐃΔⲆ.ⲆᐃΔ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⲆⲆΔΔ, -ⲆΔΔ / ᐃᐃᐃᐃ, Δⵠᐃ, ⲆΔΔ);
		this.ᐃᐃΔⲆⵠ.ᐃᐃⵠ();
		ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃΔⲆ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
		ⲆΔΔ = this.ᐃᐃΔⲆⵠ.ⲆᐃΔ * -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⵠⲆⵠΔ, -ⲆΔΔ / ⵠᐃⵠⲆ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ΔⵠᐃΔΔⵠᐃⲆⲆ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		this.ᐃᐃΔⲆⵠ.ᐃᐃⵠ();
		ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃᐃⵠⲆᐃΔ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
		ⲆΔΔ = -ⵠΔ.height * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / ⵠΔᐃⵠ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ᐃΔⲆΔⵠⲆᐃΔᐃ() {
		if (this.info === ⲆΔⲆⲆⵠ) return;
		var ΔⲆΔⵠ = this.info & 15;
		for (var Δᐃ = 0; ΔⲆΔⵠ > Δᐃ; Δᐃ++) this.ⵠⲆⵠⵠ[Δᐃ].ⲆᐃᐃⲆ(ⵠ.ⵠᐃⲆΔᐃ, this.x, this.y);
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && ⲆⲆⲆΔᐃ == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ && (this.ᐃⲆⵠ.ᐃᐃⵠ = false);
			var ⲆᐃΔ = Ⲇ * (ΔᐃⲆⲆ * (ⵠⵠⵠΔ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = 0
		}
		if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⲆᐃⲆⵠᐃ][ⲆⲆⲆ.time];
		else var ⵠΔ = Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⲆⲆᐃ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / 2 + ΔΔ, -ⵠΔ.width / ⲆⲆᐃⲆ + ΔΔⵠ);
		ᐃ.restore()
	}

	function ⲆᐃΔΔᐃΔᐃΔΔ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		this.ᐃΔⵠΔⲆⲆΔ = Math.min(ᐃⲆⲆ, this.ᐃΔⵠΔⲆⲆΔ + ΔᐃⲆⲆ * ⵠΔᐃΔᐃ);
		ᐃ.globalAlpha = this.ᐃΔⵠΔⲆⲆΔ * Math.min(ⲆΔᐃΔ, Math.max(ⲆΔⵠΔ, ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r) / 80));
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⲆⵠⵠ][ⲆⲆⲆ.time][this.ⵠⲆΔⵠⵠ];
		if (this.ⵠⲆΔⵠⵠ < ᐃⵠΔⲆ) {
			Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width;
			ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height
		} else {
			ⵠⲆᐃ === this.ⲆⵠⲆⵠⲆᐃⲆ ? (Δⵠᐃ = -ⵠΔ.width, ⲆΔΔ = -ⵠΔ.height) : (Δⵠᐃ = 1.35 * -ⵠΔ.width, ⲆΔΔ = -ⵠΔ.height * 1.35)
		}
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
		ᐃ.globalAlpha = ⵠΔΔ;
		ᐃ.restore()
	}

	function ᐃⲆⲆⵠⵠⵠᐃᐃⲆ(ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠᐃ, ΔⲆᐃ, ΔΔΔⲆ, ⵠⵠⲆⲆ, ⲆΔⵠⵠΔ) {
		if (ⵠⵠⲆⲆ === undefined) ⵠⵠⲆⲆ = ⵠΔⵠⲆ;
		for (var Δᐃ = ⲆᐃΔⵠ; Δᐃ <= ᐃⲆΔΔ; Δᐃ++) {
			for (var ᐃΔⵠⵠ = ⵠⲆᐃⵠ; ⲆⲆΔᐃ >= ᐃΔⵠⵠ; ᐃΔⵠⵠ++) {
				var ΔⲆⵠΔ = ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ];
				if (ⲆⲆⲆⲆⲆ === ΔⲆⵠΔ || ᐃⲆᐃⲆⵠ === ΔⲆⵠΔ[ΔⲆᐃ]) continue;
				var ᐃⲆⵠⲆ = ΔⲆⵠΔ[ΔⲆᐃ];
				var ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time][ᐃⲆⵠⲆ.ᐃᐃⲆⵠⲆⵠⵠ];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃⲆⵠⲆ.x - ⵠΔ.width / (ⲆⵠⵠⲆ * ⲆⲆΔⵠΔ), ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃⲆⵠⲆ.y - ⵠΔ.height / (4 * ⲆⲆΔⵠΔ), ⵠΔ.width / (2 * ⲆⲆΔⵠΔ), ⵠΔ.height / (2 * ⲆⲆΔⵠΔ));
				if (ⵠⵠΔⵠ.ΔⲆᐃᐃΔ) {
					var ⵠΔᐃᐃ = 2147483648;
					var ᐃᐃᐃⵠ = 1103515245;
					var ⵠⵠⵠⲆ = 12345;
					var ᐃⵠⵠΔⲆ = (ᐃᐃᐃⵠ * (Δᐃ * 1e3 + ᐃΔⵠⵠ) + ⵠⵠⵠⲆ) % ⵠΔᐃᐃ / ⵠΔᐃᐃ;
					if (ᐃⵠⵠΔⲆ < .2) {
						ᐃⵠⵠΔⲆ = Math.floor(Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⲆⲆⲆ.time][ᐃⲆⵠⲆ.ᐃᐃⲆⵠⲆⵠⵠ].length * (ᐃⵠⵠΔⲆ * 5));
						var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆΔⵠ][ⲆⲆⲆ.time][ᐃⲆⵠⲆ.ᐃᐃⲆⵠⲆⵠⵠ][ᐃⵠⵠΔⲆ];
						ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃⲆⵠⲆ.x - ⵠΔ.width / (ⲆⲆΔⵠΔ * ⵠⲆⲆΔΔ), ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃⲆⵠⲆ.y - ⵠΔ.height / (ᐃⵠⲆⲆ * ⲆⲆΔⵠΔ), ⵠΔ.width / (ⵠΔᐃΔᐃ * ⲆⲆΔⵠΔ), ⵠΔ.height / (2 * ⲆⲆΔⵠΔ))
					} else if (ᐃⲆⵠⲆ.ⲆⵠⲆⵠᐃΔᐃ !== 0) {
						var ⵠΔ = Ⲇⵠ[ⵠ.ΔⵠΔᐃⵠΔⲆ][ⲆⲆⲆ.time];
						var ⲆⲆⵠⵠΔⲆⲆ = (ΔⵠΔⲆᐃⵠⵠ + Δᐃ % 2 * 30) % 60;
						ᐃ.globalAlpha = ⲆⲆⵠⵠΔⲆⲆ < 30 ? ⲆⲆⵠⵠΔⲆⲆ / 30 : 1 - (ⲆⲆⵠⵠΔⲆⲆ - 30) / 30;
						ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃⲆⵠⲆ.x - ⵠΔ.width / (ΔᐃΔⵠ * ⲆⲆΔⵠΔ), ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃⲆⵠⲆ.y - ⵠΔ.height / (4 * ⲆⲆΔⵠΔ) - 30 + ⲆⲆⵠⵠΔⲆⲆ, ⵠΔ.width / (ⲆⲆΔⵠΔ * 2), ⵠΔ.height / (ⲆⲆΔⵠΔ * 2));
						ᐃ.globalAlpha = ⵠΔᐃ
					}
				}
			}
		}
	}

	function ΔⵠⵠⵠΔᐃᐃΔⲆ() {
		var ⵠΔ = undefined;
		var ᐃⲆⵠⲆᐃᐃᐃ = undefined;
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		this.rotate.ᐃᐃⵠ();
		if (.1 <= this.ΔΔᐃⲆᐃ && 1.1 >= this.ΔΔᐃⲆᐃ) {
			var ΔⵠⲆⵠ = Math.max(ⲆⲆᐃΔ, Math.min(1, this.ΔΔᐃⲆᐃ - .1));
			if (.2 > ΔⵠⲆⵠ) ΔⵠⲆⵠ *= 5;
			else .8 < ΔⵠⲆⵠ ? ΔⵠⲆⵠ = (ΔΔⲆΔ - ΔⵠⲆⵠ) * ᐃΔᐃⲆⲆ : ΔⵠⲆⵠ = 1;
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆⵠᐃΔⵠΔ][ⲆⲆⲆ.time];
			Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width;
			ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height;
			ᐃ.globalAlpha = ΔⵠⲆⵠ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 4, -ⲆΔΔ / ⵠⲆⲆΔΔ, Δⵠᐃ / ΔΔᐃᐃ, ⲆΔΔ / 2);
			var ᐃⲆⵠⲆᐃᐃᐃ = Ⲇⵠ[ⵠ.ᐃⵠΔⲆᐃⵠⵠ]
		}
		if (.9 <= this.ΔΔᐃⲆᐃ) {
			var ΔⵠⲆⵠ = Math.max(ᐃⲆⵠΔ, Math.min(ᐃΔⵠΔ, this.ΔΔᐃⲆᐃ - .9));
			ΔⵠⲆⵠ < .2 ? ΔⵠⲆⵠ *= 5 : ΔⵠⲆⵠ = ⲆΔᐃ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆⵠⵠ][ⲆⲆⲆ.time];
			Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width;
			ⲆΔΔ = -ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
			ᐃ.globalAlpha = ΔⵠⲆⵠ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⵠᐃΔΔΔ, -ⲆΔΔ / 4, Δⵠᐃ / Δⵠᐃᐃ, ⲆΔΔ / ΔⲆᐃⲆ);
			var ᐃⲆⵠⲆᐃᐃᐃ = Ⲇⵠ[ⵠ.ΔᐃΔⲆᐃⵠΔ]
		}
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ && undefined !== ᐃⲆⵠⲆᐃᐃᐃ) {
			if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == ⲆΔⲆⲆΔ) this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ;
			ᐃ.globalAlpha = (.6 - this.ᐃⲆⵠ.ⲆᐃΔ) * ΔⵠⲆⵠ;
			Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ᐃⲆⵠⲆᐃᐃᐃ.width;
			ⲆΔΔ = -ᐃⲆⵠⲆᐃᐃᐃ.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
			ᐃΔΔⲆ(ᐃ, ᐃⲆⵠⲆᐃᐃᐃ, -Δⵠᐃ / ΔᐃΔⲆΔ, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / ⲆⲆⵠᐃ)
		}
		ᐃ.globalAlpha = 1;
		ᐃ.restore()
	}

	function ⲆⲆᐃⲆⲆᐃΔⵠΔ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		var ᐃⲆΔⵠ = ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r);
		if (ᐃⲆΔⵠ > 350) this.scale = Math.min(this.scale + ΔᐃⲆⲆ / 2, 1.8);
		else this.scale = Math.max(this.scale - ΔᐃⲆⲆ, ᐃⲆΔ);
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		this.rotate.ᐃᐃⵠ();
		ᐃⲆΔⵠ < 350 ? this.ΔⵠⲆⵠ = Math.max(0, this.ΔⵠⲆⵠ - ΔᐃⲆⲆ * 2.2) : this.ΔⵠⲆⵠ = Math.min(1, this.ΔⵠⲆⵠ + 2.2 * ΔᐃⲆⲆ);
		ⵠΔ = Ⲇⵠ[ⵠ.ΔⵠΔⲆⲆᐃⵠ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
		ⲆΔΔ = -ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
		ᐃ.globalAlpha = ⵠⵠᐃ - this.ΔⵠⲆⵠ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / ΔᐃΔⲆ, ⲆΔΔ / 2);
		ⵠΔ = Ⲇⵠ[ⵠ.ⲆΔⵠᐃⲆⵠᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width);
		ⲆΔΔ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height);
		ᐃ.globalAlpha = this.ΔⵠⲆⵠ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ᐃⵠⲆⲆ, -ⲆΔΔ / ⵠΔΔⵠ, Δⵠᐃ / 2, ⲆΔΔ / 2);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == ⵠⲆⵠᐃᐃ && (this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ);
			ᐃ.globalAlpha = (.6 - this.ᐃⲆⵠ.ⲆᐃΔ) * (ⵠΔΔ - this.ΔⵠⲆⵠ);
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃΔⵠΔΔⲆΔ];
			Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width * this.scale;
			ⲆΔΔ = this.scale * (-ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ᐃᐃⲆⵠ, -ⲆΔΔ / 4, Δⵠᐃ / ⵠⲆⵠΔ, ⲆΔΔ / 2);
			ᐃ.globalAlpha = this.ΔⵠⲆⵠ * (.6 - this.ᐃⲆⵠ.ⲆᐃΔ);
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆΔⵠᐃΔⵠⵠ];
			Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width * this.scale;
			ⲆΔΔ = -ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / ⲆⲆᐃⲆ, ⲆΔΔ / 2);
			ᐃ.globalAlpha = ⲆΔᐃΔ
		}
		ⵠΔ = Ⲇⵠ[ⵠ.ΔⵠⲆᐃΔⲆⲆ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.scale * (-ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ);
		ⲆΔΔ = this.scale * (-ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ);
		ᐃ.save();
		ᐃ.translate(-40 * Ⲇ, 80 * Ⲇ);
		ᐃ.rotate(this.rotate.ⲆᐃΔ);
		ᐃ.globalAlpha = this.ΔⵠⲆⵠ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ * Ⲇ / 4, -ⲆΔΔ * Ⲇ / ⵠΔΔⵠ, Δⵠᐃ / 2, ⲆΔΔ / ⲆᐃᐃΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = (.6 - this.ᐃⲆⵠ.ⲆᐃΔ) * this.ΔⵠⲆⵠ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆⲆΔΔᐃᐃ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * -Δⵠᐃ / ᐃΔⲆΔⲆ, Ⲇ * -ⲆΔΔ / ⵠᐃΔΔΔ, Δⵠᐃ / 2, ⲆΔΔ / ⲆⲆᐃⲆ);
			ᐃ.globalAlpha = ΔΔⲆΔ
		}
		ᐃ.restore();
		ⵠΔ = Ⲇⵠ[ⵠ.ΔⵠᐃᐃⲆΔⲆ][ⲆⲆⲆ.time];
		ᐃ.save();
		ᐃ.translate(40 * Ⲇ, Ⲇ * 80);
		ᐃ.rotate(-this.rotate.ⲆᐃΔ);
		ᐃ.globalAlpha = this.ΔⵠⲆⵠ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * -Δⵠᐃ / ⲆΔⵠᐃΔ, Ⲇ * -ⲆΔΔ / ⵠΔΔⵠ, Δⵠᐃ / 2, ⲆΔΔ / Ⲇⵠᐃⵠ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = this.ΔⵠⲆⵠ * (.6 - this.ᐃⲆⵠ.ⲆᐃΔ);
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃᐃΔΔⵠᐃΔ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * -Δⵠᐃ / 4, -ⲆΔΔ * Ⲇ / 4, Δⵠᐃ / ΔᐃΔⲆ, ⲆΔΔ / ᐃⲆᐃⵠ);
			ᐃ.globalAlpha = ΔΔⲆΔ
		}
		ᐃ.globalAlpha = ⵠΔΔ;
		ᐃ.restore();
		ᐃ.restore()
	}

	function ⲆⵠᐃΔᐃⲆΔᐃⵠ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && false == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ) this.ᐃⲆⵠ.ᐃᐃⵠ = false;
			var ⲆᐃΔ = Ⲇ * (600 * (ΔᐃⲆⲆ * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ)));
			var ΔΔ = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ;
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = 0
		}
		var ΔⲆΔⵠ = this.info & 15;
		if (this.info === ⲆᐃⲆⲆᐃ || ΔⲆΔⵠ === ⵠⲆᐃ) {
			ᐃ.rotate(this.angle);
			this.ⵠᐃᐃΔ.ᐃᐃⵠ();
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⵠΔᐃ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ΔΔΔᐃⵠΔⵠ][ⲆⲆⲆ.time];
			var Δⵠᐃ = this.ⵠᐃᐃΔ.ⲆᐃΔ * -ⵠΔ.width;
			var ⲆΔΔ = this.ⵠᐃᐃΔ.ⲆᐃΔ * -ⵠΔ.height;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2 + ΔΔ, -ⲆΔΔ / Δⵠᐃᐃ + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ)
		} else {
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⲆᐃⵠΔⲆΔ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ᐃᐃⵠᐃᐃ][ⲆⲆⲆ.time];
			ᐃ.translate(ⵠᐃΔ, ⵠΔ.height / ⵠΔᐃⵠ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ - ⵠΔ.width / Δᐃᐃⵠ, -ⵠΔ.height + ΔΔⵠ)
		}
		ᐃ.restore()
	}

	function ΔᐃΔΔⵠΔⵠᐃᐃ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		this.ᐃᐃΔⲆⵠ.ᐃᐃⵠ();
		ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃΔⲆ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
		ⲆΔΔ = -ⵠΔ.height * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / ΔᐃΔⲆ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ⲆⲆⵠⵠⵠᐃΔᐃⵠ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		var ᐃⲆΔⵠ = ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r);
		if (ᐃⲆΔⵠ > 350) this.scale = Math.min(this.scale + ΔᐃⲆⲆ / ΔΔᐃᐃ, 1.8);
		else this.scale = Math.max(this.scale - ΔᐃⲆⲆ, ⲆΔⲆⵠ);
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		this.rotate.ᐃᐃⵠ();
		if (350 > ᐃⲆΔⵠ) this.ΔⵠⲆⵠ = Math.max(0, this.ΔⵠⲆⵠ - 2.2 * ΔᐃⲆⲆ);
		else this.ΔⵠⲆⵠ = Math.min(1, this.ΔⵠⲆⵠ + 2.2 * ΔᐃⲆⲆ);
		ⲆᐃⲆ === (this.info & 1) ? ⵠΔ = Ⲇⵠ[ⵠ.ⲆⵠᐃΔⵠⲆΔ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆᐃΔⲆⲆΔ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width);
		ⲆΔΔ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height);
		ᐃ.globalAlpha = ⲆΔᐃ - this.ΔⵠⲆⵠ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / ⵠᐃⵠⲆ, ⲆΔΔ / 2);
		if (ⲆΔⵠΔ === (this.info & 1)) ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆⵠΔᐃ][ⲆⲆⲆ.time];
		else ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⲆΔⵠΔⵠ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
		ⲆΔΔ = -ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
		ᐃ.globalAlpha = this.ΔⵠⲆⵠ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ΔⵠⲆᐃ, -ⲆΔΔ / ΔᐃΔⲆΔ, Δⵠᐃ / 2, ⲆΔΔ / 2);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == ⲆⵠⵠΔᐃ) this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ;
			ᐃ.globalAlpha = (1 - this.ΔⵠⲆⵠ) * (.6 - this.ᐃⲆⵠ.ⲆᐃΔ);
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔᐃΔΔⲆⲆΔ];
			Δⵠᐃ = -ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
			ⲆΔΔ = -ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / ⲆⲆⵠᐃ, ⲆΔΔ / 2);
			ᐃ.globalAlpha = this.ΔⵠⲆⵠ * (.6 - this.ᐃⲆⵠ.ⲆᐃΔ);
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃⵠⵠⵠⲆⲆⲆ];
			Δⵠᐃ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width);
			ⲆΔΔ = this.scale * (-ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ΔᐃΔΔ, -ⲆΔΔ / ΔᐃΔⵠ, Δⵠᐃ / ΔⲆᐃⲆ, ⲆΔΔ / 2);
			ᐃ.globalAlpha = ⵠⵠᐃ
		}
		0 === (this.info & ⲆⵠⲆ) ? ⵠΔ = Ⲇⵠ[ⵠ.ⲆⵠⲆΔᐃᐃⲆ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆᐃᐃⲆᐃⵠ][ⲆⲆⲆ.time];
		Δⵠᐃ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width);
		ⲆΔΔ = this.scale * (-ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ);
		ᐃ.save();
		ᐃ.translate(Ⲇ * -20, Ⲇ * ⵠΔΔᐃ);
		ᐃ.rotate(this.rotate.ⲆᐃΔ);
		ᐃ.globalAlpha = this.ΔⵠⲆⵠ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, Ⲇ * -Δⵠᐃ / 4, -ⲆΔΔ * Ⲇ / ⵠᐃΔΔΔ, Δⵠᐃ / ⵠΔᐃⵠ, ⲆΔΔ / ΔᐃΔⲆ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = this.ΔⵠⲆⵠ * (.6 - this.ᐃⲆⵠ.ⲆᐃΔ);
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆᐃΔⵠᐃⵠ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ * Ⲇ / 4, -ⲆΔΔ * Ⲇ / ᐃᐃⲆⵠ, Δⵠᐃ / 2, ⲆΔΔ / 2);
			ᐃ.globalAlpha = ⵠⲆⲆⲆ
		}
		ᐃ.restore();
		ⵠᐃΔⲆ === (this.info & 1) ? ⵠΔ = Ⲇⵠ[ⵠ.ΔⵠΔΔΔⲆᐃ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔⲆΔΔⵠᐃ][ⲆⲆⲆ.time];
		ᐃ.save();
		ᐃ.translate(ᐃⵠΔᐃⵠⲆⵠ * Ⲇ, ⵠⵠΔΔ * Ⲇ);
		ᐃ.rotate(-this.rotate.ⲆᐃΔ);
		ᐃ.globalAlpha = this.ΔⵠⲆⵠ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ * Ⲇ / 4, -ⲆΔΔ * Ⲇ / 4, Δⵠᐃ / Δⵠᐃᐃ, ⲆΔΔ / ⵠΔᐃⵠ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = this.ΔⵠⲆⵠ * (.6 - this.ᐃⲆⵠ.ⲆᐃΔ);
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⵠᐃⲆᐃⲆ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ * Ⲇ / ΔᐃΔⵠ, -ⲆΔΔ * Ⲇ / 4, Δⵠᐃ / 2, ⲆΔΔ / ᐃⵠΔⲆ);
			ᐃ.globalAlpha = ⲆΔᐃΔ
		}
		ᐃ.globalAlpha = ⵠⵠⵠΔ;
		ᐃ.restore();
		ᐃ.restore()
	}

	function ΔᐃⲆⵠᐃΔⲆΔⵠ() {
		if (1 === (this.info & ⲆⵠΔⲆ)) this.ΔΔᐃⲆᐃ = Math.min(this.ΔΔᐃⲆᐃ + ΔᐃⲆⲆ, 2.2);
		else {
			this.ΔΔᐃⲆᐃ = Math.max(this.ΔΔᐃⲆᐃ - ΔᐃⲆⲆ, 0);
			this.ⲆᐃΔⵠᐃⵠᐃ += ΔᐃⲆⲆ;
			if (.1 < this.ⲆᐃΔⵠᐃⵠᐃ) {
				this.ⲆᐃΔⵠᐃⵠᐃ = 0;
				var ⵠᐃᐃΔ = {
					x: this.x + Math.random() * 60 - 30,
					y: this.y + Math.random() * 60 - 30,
					a: 0,
					r: Math.random() * 30 + 30
				};
				this.ⵠᐃᐃΔ.push(ⵠᐃᐃΔ)
			}
		}
		for (var Δᐃ = ⵠⲆⵠ; this.ⵠᐃᐃΔ.length > Δᐃ; Δᐃ++) {
			var ⵠᐃᐃΔ = this.ⵠᐃᐃΔ[Δᐃ];
			ᐃ.save();
			ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠᐃᐃΔ.x, ⵠⵠⵠ.ᐃⵠⲆ.y + ⵠᐃᐃΔ.y);
			ⵠᐃᐃΔ.a = Math.min(ᐃⲆΔ, ⵠᐃᐃΔ.a + ΔᐃⲆⲆ / 2);
			var ΔⵠⲆⵠ = ⵠᐃᐃΔ.a;
			if (ΔⵠⲆⵠ < .2) ΔⵠⲆⵠ *= 5;
			else if (ΔⵠⲆⵠ > .8) ΔⵠⲆⵠ = (ΔΔⲆΔ - ΔⵠⲆⵠ) * 5;
			else ΔⵠⲆⵠ = 1;
			ᐃ.globalAlpha = .8 * ΔⵠⲆⵠ;
			ᐃΔⵠ(ᐃ, 0, 0, ⵠᐃᐃΔ.r);
			ᐃⵠ(ᐃ, ⵠ.ᐃΔΔⲆⵠᐃΔ[ⲆⲆⲆ.time]);
			ᐃ.restore();
			if (1 === ⵠᐃᐃΔ.a) {
				this.ⵠᐃᐃΔ.splice(Δᐃ, 1);
				Δᐃ--
			}
		}
	}

	function ΔⵠᐃΔⵠᐃⵠΔΔ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		this.info & 31 && this.info & 992 && 31744 != (this.info & 31744) && (this.ΔΔΔΔⲆ.length == 0 || ⵠ.ⲆⵠⵠⲆΔⲆⵠ >= this.ΔΔΔΔⲆ[this.ΔΔΔΔⲆ.length - ΔΔⲆΔ]) && this.ΔΔΔΔⲆ.push(ⵠ.ⵠᐃⲆΔⲆᐃⵠ);
		for (var Δᐃ = ᐃΔΔ; Δᐃ < this.ΔΔΔΔⲆ.length; Δᐃ++) {
			this.ΔΔΔΔⲆ[Δᐃ] = Math.max(0, this.ΔΔΔΔⲆ[Δᐃ] - ⵠ.ⵠᐃᐃᐃΔⵠⲆ * ΔᐃⲆⲆ);
			ᐃ.globalAlpha = this.ΔΔΔΔⲆ[Δᐃ] / 1.3;
			var ⲆᐃΔ = 40 * (1 - this.ΔΔΔΔⲆ[Δᐃ]);
			var ⵠᐃⵠ = (1 - this.ΔΔΔΔⲆ[Δᐃ]) * 35 + ᐃᐃᐃⵠⵠ;
			ᐃΔⵠ(ᐃ, Ⲇ * -68 + Math.sin(-this.angle - Math.PI / 2) * ⲆᐃΔ, -20 * Ⲇ + ⲆᐃΔ * Math.cos(-this.angle - Math.PI / Ⲇⵠᐃⵠ), ⵠᐃⵠ);
			ᐃⵠ(ᐃ, "#333333")
		}
		ᐃ.globalAlpha = 1;
		ᐃΔΔ < this.ΔΔΔΔⲆ.length && this.ΔΔΔΔⲆ[0] === 0 && this.ΔΔΔΔⲆ.shift();
		ᐃ.restore()
	}

	function ᐃⲆΔΔΔⵠⵠᐃᐃ() {
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == false && (this.ᐃⲆⵠ.ᐃᐃⵠ = ⲆⵠΔᐃⵠ);
			var ⲆᐃΔ = (ⲆⵠⲆ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * ΔᐃⲆⲆ * 600 * Ⲇ;
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = Δⵠⵠ;
			var ΔΔⵠ = ⵠᐃΔⲆ
		}
		this.ᐃΔⲆᐃΔΔΔ = (this.ᐃΔⲆᐃΔΔΔ + ΔᐃⲆⲆ * ΔⵠⲆⲆ) % (Math.PI * 2);
		this.ⵠⵠⵠⲆⵠⵠΔ = (this.ⵠⵠⵠⲆⵠⵠΔ - ΔᐃⲆⲆ * ᐃⲆᐃⲆ) % (2 * Math.PI);
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x + ΔΔ, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y + ΔΔⵠ);
		ᐃ.save();
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔⲆΔᐃ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.rotate(this.ᐃΔⲆᐃΔΔΔ);
		ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔΔᐃᐃⵠⲆ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ᐃⵠΔⲆ, -ⵠΔ.height / ⲆⲆΔΔ);
		ᐃ.restore();
		ᐃ.save();
		ᐃ.rotate(this.ⵠⵠⵠⲆⵠⵠΔ);
		ⵠΔ = Ⲇⵠ[ⵠ.ΔⵠᐃⲆΔΔⲆ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / Ⲇⵠᐃⵠ);
		ᐃ.restore();
		ᐃ.restore()
	}
	const ᐃⲆᐃᐃⲆΔⵠ = {};
	const ᐃΔᐃᐃⵠᐃΔ = {};
	ᐃⲆᐃᐃⲆΔⵠ["get"] = function(ⲆΔⲆΔΔΔⵠ, ⲆⵠⲆᐃⲆⵠᐃ) {
		if (ⲆⵠⲆᐃⲆⵠᐃ !== "ᐃⲆᐃᐃⲆΔⵠ") {
			const ᐃⲆᐃᐃⲆΔⵠ = Math.random;
			const ⲆⵠⲆᐃⲆⵠᐃ = [];
			const ⲆΔⲆΔΔΔⵠ = function() {
				for (let ⵠᐃⵠⵠⲆⲆⵠᐃΔ = 0; ⵠᐃⵠⵠⲆⲆⵠᐃΔ < 6310; ⵠᐃⵠⵠⲆⲆⵠᐃΔ++) ⲆⵠⲆᐃⲆⵠᐃ.push(ⵠᐃⵠⵠⲆⲆⵠᐃΔ);
				return ᐃⲆᐃᐃⲆΔⵠ()
			};
			Math.random = ⲆΔⲆΔΔΔⵠ
		}
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ["Reflect"]["get"](...arguments)
	};
	const ⵠᐃⵠⵠⲆⲆⵠᐃΔ = new ⵠΔΔⲆⲆⵠᐃᐃⵠ["Proxy"](ᐃΔᐃᐃⵠᐃΔ, ᐃⲆᐃᐃⲆΔⵠ);
	const ᐃᐃΔⵠⵠΔⵠⵠⲆ = ⵠᐃⵠⵠⲆⲆⵠᐃΔ.ᐃⲆᐃᐃⲆΔⵠ;

	function ⲆⲆⲆⲆΔΔᐃᐃⲆ() {
		if (ᐃᐃᐃⵠⵠ > this.info) return;
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == false) this.ᐃⲆⵠ.ᐃᐃⵠ = false;
			var ⲆᐃΔ = Ⲇ * (600 * (ΔᐃⲆⲆ * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ)));
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = ᐃΔΔ;
			var ΔΔⵠ = 0
		}
		this.ⵠᐃᐃΔ.ᐃᐃⵠ();
		var ⵠΔ = Ⲇⵠ[ⵠ.ΔΔᐃⲆⲆⲆᐃ][ⲆⲆⲆ.time];
		var Δⵠᐃ = this.ⵠᐃᐃΔ.ⲆᐃΔ * -ⵠΔ.width;
		var ⲆΔΔ = this.ⵠᐃᐃΔ.ⲆᐃΔ * -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ᐃᐃᐃᐃ + ΔΔ, -ⲆΔΔ / 2 + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ);
		ᐃ.restore()
	}

	function ⲆᐃΔΔⲆΔᐃΔⵠ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && ΔΔΔⵠⵠ == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ) this.ᐃⲆⵠ.ᐃᐃⵠ = false;
			var ⲆᐃΔ = Ⲇ * ((ⲆⵠⲆ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * ΔᐃⲆⲆ * 600);
			var ΔΔ = ⲆᐃΔ * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = 0
		}
		if (this.info & 31 && this.info & 992 && (this.info & 31744) != 31744) {
			ⵠΔ = Ⲇⵠ[ⵠ.ΔΔⲆⲆⲆΔᐃ][ⲆⲆⲆ.time];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ⲆⲆᐃⲆ + ΔΔ, -ⵠΔ.height / ΔⲆᐃⲆ + ΔΔⵠ);
			this.up.ᐃᐃⵠ();
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔΔΔΔⵠⵠΔ][ⲆⲆⲆ.time];
			var Δⵠᐃ = -ⵠΔ.width * this.up.ⲆᐃΔ;
			var ⲆΔΔ = -ⵠΔ.height * this.up.ⲆᐃΔ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2 + Ⲇ * 1, -ⲆΔΔ / ΔⲆᐃⲆ + Ⲇ * ⲆΔΔⲆ, Δⵠᐃ, ⲆΔΔ)
		} else {
			ⵠΔ = Ⲇⵠ[ⵠ.ⵠⲆᐃⲆᐃⵠᐃ][ⲆⲆⲆ.time];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / 2 + ΔΔ, -ⵠΔ.height / ⵠΔᐃΔᐃ + ΔΔⵠ)
		}
		ᐃ.restore()
	}

	function ⲆⵠᐃⲆᐃⵠΔⵠⲆ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && ⵠⲆⵠᐃᐃ == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ && (this.ᐃⲆⵠ.ᐃᐃⵠ = ⲆᐃⲆⲆΔ);
			var ⲆᐃΔ = ΔᐃⲆⲆ * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600 * Ⲇ;
			var ΔΔ = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ;
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = ⵠᐃΔⲆ
		}
		var ΔⲆΔⵠ = this.info & 15;
		if (10 === this.info || ΔⲆΔⵠ === 0) {
			ᐃ.rotate(this.angle);
			this.ⵠᐃᐃΔ.ᐃᐃⵠ();
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ΔΔⵠᐃⵠⲆⵠ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ᐃⵠⵠⵠⵠᐃⲆ][ⲆⲆⲆ.time];
			var Δⵠᐃ = -ⵠΔ.width * this.ⵠᐃᐃΔ.ⲆᐃΔ;
			var ⲆΔΔ = -ⵠΔ.height * this.ⵠᐃᐃΔ.ⲆᐃΔ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2 + ΔΔ, -ⲆΔΔ / ΔΔᐃᐃ + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ)
		} else {
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠᐃⲆᐃΔΔ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔⵠΔⵠ][ⲆⲆⲆ.time];
			ᐃ.translate(0, ⵠΔ.height / 2);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ - ⵠΔ.width / ⲆⲆⵠᐃ, -ⵠΔ.height + ΔΔⵠ)
		}
		ᐃ.restore()
	}

	function ⵠΔᐃΔⵠΔΔΔΔ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && false == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ) this.ᐃⲆⵠ.ᐃᐃⵠ = false;
			var ⲆᐃΔ = (ΔΔⲆΔ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * ΔᐃⲆⲆ * 600 * Ⲇ;
			var ΔΔ = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ;
			var ΔΔⵠ = ⲆᐃΔ * Math.cos(this.ᐃⲆⵠ.angle - this.angle)
		} else {
			var ΔΔ = 0;
			var ΔΔⵠ = ΔΔⲆⲆ
		}
		var ΔⲆΔⵠ = this.info & 15;
		if (this.info === ᐃⲆⲆⵠⲆ || 0 === ΔⲆΔⵠ) {
			ᐃ.rotate(this.angle);
			this.ⵠᐃᐃΔ.ᐃᐃⵠ();
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃⵠΔ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠ][ⲆⲆⲆ.time];
			var Δⵠᐃ = this.ⵠᐃᐃΔ.ⲆᐃΔ * -ⵠΔ.width;
			var ⲆΔΔ = -ⵠΔ.height * this.ⵠᐃᐃΔ.ⲆᐃΔ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2 + ΔΔ, -ⲆΔΔ / ⵠΔᐃΔᐃ + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ)
		} else {
			this.ⵠⵠⲆⲆᐃᐃⲆ.ᐃᐃⵠ();
			if (this.info & 16) var ⵠΔ = Ⲇⵠ[ⵠ.ΔΔⵠⲆᐃⵠⲆ][ⲆⲆⲆ.time];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃΔᐃᐃ][ⲆⲆⲆ.time];
			ᐃ.translate(ⵠⲆⵠ, ⵠΔ.height / 2);
			ᐃ.rotate(this.ⵠⵠⲆⲆᐃᐃⲆ.ⲆᐃΔ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ - ⵠΔ.width / ⵠΔᐃΔᐃ, -ⵠΔ.height + ΔΔⵠ)
		}
		ᐃ.restore()
	}

	function ᐃΔΔⵠᐃᐃᐃⲆΔ(ⵠᐃ, ᐃᐃⲆᐃⵠᐃΔ) {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width;
		ⲆΔΔ = -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == ΔⲆΔΔᐃ) this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ;
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ᐃᐃⲆᐃⵠᐃΔ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = ⲆΔᐃΔ
		}
		ᐃ.restore()
	}

	function ᐃᐃᐃⵠⲆᐃⵠⵠΔ() {
		if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
			if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == false) this.ᐃⲆⵠ.ᐃᐃⵠ = ΔⲆΔΔᐃ;
			var ⲆᐃΔ = Ⲇ * (ΔᐃⲆⲆ * (ⵠΔᐃ - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
			var ΔΔ = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ;
			var ΔΔⵠ = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * ⲆᐃΔ
		} else {
			var ΔΔ = ⵠᐃΔⲆ;
			var ΔΔⵠ = ⵠᐃⵠⵠ
		}
		ᐃ.save();
		if (this.info & 255 && (this.info & 65280) != 65280) {
			ΔΔ += 2 * Math.random() - 1;
			ΔΔⵠ += Math.random() * 2 - 1
		}
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x + ΔΔ, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y + ΔΔⵠ);
		ᐃ.rotate(this.angle);
		ⵠΔ = Ⲇⵠ[ⵠ.ᐃⵠⵠⵠΔ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
		if (this.info & 255 && (this.info & 65280) != 65280) this.rotate = (this.rotate + ΔᐃⲆⲆ * ⵠΔⲆⲆ) % (Math.PI * 2);
		ᐃ.rotate(this.rotate);
		ⵠΔ = Ⲇⵠ[ⵠ.ⵠᐃⵠΔⲆᐃΔ][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
		ᐃ.restore()
	}

	function ⲆᐃⲆⲆⵠᐃⵠⲆⲆ() {
		var ᐃⵠⵠⲆᐃ = Math.PI / ΔⲆⲆⵠ;
		var ⵠⵠᐃⵠΔⵠᐃ = Math.PI / ⲆⲆᐃΔᐃ;
		this.Δᐃⵠⵠ.ᐃᐃⵠ();
		this.ΔΔⲆᐃⲆΔΔ.ᐃᐃⵠ();
		this.ⵠΔᐃⵠⲆᐃⵠ.ᐃᐃⵠ();
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle);
		ⵠⲆΔⵠ === this.info ? ⵠΔ = Ⲇⵠ[ⵠ.ΔΔᐃΔⲆ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ᐃⵠΔΔⵠᐃⵠ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ;
		ⲆΔΔ = -ⵠΔ.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			if (this.ᐃⲆⵠ.ᐃᐃⵠ() && false == this.ᐃⲆⵠ.ᐃΔⲆ) this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ;
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⲆⲆⲆᐃᐃ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / ⲆⲆᐃⲆ, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = ⵠⵠⵠΔ
		}
		if (this.action & ⵠᐃᐃⵠ.ΔⵠᐃⲆⵠ) {
			if (this.ⲆⲆᐃΔⵠ.ᐃᐃⵠ() && false == this.ⲆⲆᐃΔⵠ.ᐃΔⲆ) this.action -= ⵠᐃᐃⵠ.ΔⵠᐃⲆⵠ;
			ᐃ.globalAlpha = .6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃᐃΔⲆⵠΔ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ΔⲆⲆⵠ, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = ⲆⲆⲆᐃ
		}
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle + ⵠⵠᐃⵠΔⵠᐃ);
		ᐃ.translate(55, 0);
		ᐃ.rotate(ᐃⵠⵠⲆᐃ);
		if (this.info === Ⲇᐃⵠⵠ) ⵠΔ = Ⲇⵠ[ⵠ.ΔⵠⵠᐃΔΔᐃ][ⲆⲆⲆ.time];
		else ⵠΔ = Ⲇⵠ[ⵠ.ⲆⵠΔⵠⵠⵠⵠ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.ΔΔⲆᐃⲆΔΔ.ⲆᐃΔ;
		ⲆΔΔ = this.ΔΔⲆᐃⲆΔΔ.ⲆᐃΔ * -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ᐃᐃᐃᐃ, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔⵠᐃⲆᐃⲆⲆ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / Δⵠᐃᐃ, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = ΔⲆΔᐃ
		}
		if (this.action & ⵠᐃᐃⵠ.ΔⵠᐃⲆⵠ) {
			ᐃ.globalAlpha = .6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⲆⲆⵠ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / ⲆⲆΔΔ, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = 1
		}
		ᐃ.restore();
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.angle + ᐃⵠⵠⲆᐃ + ⵠⵠᐃⵠΔⵠᐃ);
		ᐃ.translate(55, 0);
		ᐃ.rotate(ᐃⵠⵠⲆᐃ);
		this.info === ⵠᐃΔ ? ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔⲆⵠⲆΔⵠ][ⲆⲆⲆ.time] : ⵠΔ = Ⲇⵠ[ⵠ.ᐃΔⲆⲆΔⵠⵠ][ⲆⲆⲆ.time];
		Δⵠᐃ = -ⵠΔ.width * this.ⵠΔᐃⵠⲆᐃⵠ.ⲆᐃΔ;
		ⲆΔΔ = this.ⵠΔᐃⵠⲆᐃⵠ.ⲆᐃΔ * -ⵠΔ.height;
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⲆⲆⵠᐃ, -ⲆΔΔ / ⵠΔᐃⵠ, Δⵠᐃ, ⲆΔΔ);
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠᐃΔⵠⲆⵠ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⵠΔᐃⵠ, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = 1
		}
		if (this.action & ⵠᐃᐃⵠ.ΔⵠᐃⲆⵠ) {
			ᐃ.globalAlpha = .6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃΔᐃΔΔΔⵠ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
			ᐃ.globalAlpha = ⵠΔᐃ
		}
		ᐃ.restore()
	}

	function ⵠⲆᐃᐃΔⲆⲆⵠᐃ(ΔⵠΔ) {
		if (0 <= ΔⵠΔ.right) {
			switch (ΔⵠΔ.right) {
				case ⵠ.ⲆⵠⲆᐃΔ:
					ᐃ.save();
					var ⲆΔᐃⵠᐃⵠᐃ = -3 * ΔⵠΔ.attack.ⲆᐃΔ / Math.PI;
					if (ΔⵠΔ.attack.ᐃΔⲆ) var ΔⵠⵠⵠᐃⲆⵠ = -Math.PI / 3 - (Math.PI / ΔⵠⲆⲆ + ΔⵠΔ.attack.ⲆᐃΔ) / 3;
					else var ΔⵠⵠⵠᐃⲆⵠ = ΔⵠΔ.attack.ⲆᐃΔ;
					ᐃ.rotate(ΔⵠΔ.angle - Math.PI / ⵠΔᐃⵠ + ΔⵠⵠⵠᐃⲆⵠ);
					ᐃ.globalAlpha = ⲆΔᐃⵠᐃⵠᐃ / 1.2;
					ᐃΔⵠ(ᐃ, Ⲇ * -40, Ⲇ * 90, 5 * Ⲇ);
					ᐃⵠ(ᐃ, Δ[559]);
					ᐃ.globalAlpha = ⲆΔᐃⵠᐃⵠᐃ / 1.2;
					ᐃΔⵠ(ᐃ, -52 * Ⲇ, ⲆᐃᐃΔᐃ * Ⲇ, Ⲇ * 8);
					ᐃⵠ(ᐃ, Δ[559]);
					ᐃ.globalAlpha = ⲆΔᐃⵠᐃⵠᐃ / 1.2;
					ᐃΔⵠ(ᐃ, -30 * Ⲇ, Ⲇ * 95, Ⲇ * ⲆⵠⲆⲆⲆ);
					ᐃⵠ(ᐃ, Δ[559]);
					ᐃ.globalAlpha = ⲆⲆⲆᐃ;
					ᐃ.restore();
					break;
				case ⵠ.ⵠⲆΔⵠᐃ:
				case ⵠ.ⵠⲆⵠⵠᐃ:
				case ⵠ.ⵠᐃΔⵠⵠ:
				case ⵠ.ⵠⲆΔᐃⲆ:
					if (ΔⵠΔ.ⲆⵠⲆⵠⲆᐃⲆ === 1) break;
					if (0 < ΔⵠΔ.ⵠⲆⵠΔⵠ) var ⵠᐃ = ⵠ.ᐃⲆᐃΔΔⵠⲆ[ⲆⲆⲆ.time];
					else if (ΔⵠΔ.ΔⲆⲆᐃΔⵠΔ > 0 || ΔⵠΔ.ᐃⲆⲆⵠⵠ > 0) var ⵠᐃ = ⵠ.ΔⲆΔᐃᐃΔΔ[ⲆⲆⲆ.time];
					else var ⵠᐃ = ⵠ.ⲆⵠⵠⲆⲆΔΔ[ⲆⲆⲆ.time];
					var ⲆΔᐃⵠᐃⵠᐃ = -ᐃΔΔΔ * ΔⵠΔ.attack.ⲆᐃΔ / Math.PI;
					if (ΔⵠΔ.attack.ᐃΔⲆ) var ΔⵠⵠⵠᐃⲆⵠ = Math.max(.5 - ⲆΔᐃⵠᐃⵠᐃ / ⲆⲆᐃⲆ + .5, ⵠᐃΔⲆ);
					else var ΔⵠⵠⵠᐃⲆⵠ = Math.max(ⲆΔᐃⵠᐃⵠᐃ / Δᐃᐃⵠ, ⵠⲆⵠ);
					ΔⵠⵠⵠᐃⲆⵠ === ΔΔⲆⲆ && (ΔⵠΔ.ᐃⲆΔᐃⵠⲆⲆ = ΔⵠΔ.angle);
					ᐃ.save();
					ᐃ.rotate(ΔⵠΔ.ᐃⲆΔᐃⵠⲆⲆ - Math.PI / ᐃᐃᐃᐃ);
					ᐃ.globalAlpha = ⲆΔᐃⵠᐃⵠᐃ;
					var ᐃⵠⵠⲆⲆΔΔ = Ⲇ * 25 + ΔⵠⵠⵠᐃⲆⵠ * 25;
					ᐃΔⵠ(ᐃ, ᐃⵠⵠⲆⲆΔΔ, 80 * Ⲇ, ⲆⲆᐃⵠΔ * Ⲇ);
					ᐃⵠ(ᐃ, ⵠᐃ);
					ᐃΔⵠ(ᐃ, -ᐃⵠⵠⲆⲆΔΔ, Ⲇ * 80, ⲆⲆᐃⵠΔ * Ⲇ);
					ᐃⵠ(ᐃ, ⵠᐃ);
					ᐃ.globalAlpha = 1;
					ᐃ.restore();
					break
			}
		}
	}
	var ΔⵠᐃⵠᐃΔⵠⲆΔ = function(ΔⲆⲆⲆᐃ) {
		if (ΔⲆⲆⲆᐃ > ⲆⲆᐃΔ) {
			var ⵠΔ = Ⲇⵠ[ΔⲆⲆⲆᐃ][ⲆⲆⲆ.time];
			switch (ΔⲆⲆⲆᐃ) {
				case ⵠ.ᐃΔᐃΔⲆ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / ᐃΔⲆⵠ + ⵠΔᐃⵠ * Ⲇ, -ⵠΔ.height / 2 - Ⲇ * ⲆⲆⲆᐃᐃ);
					break;
				case ⵠ.ⲆⲆⵠⲆⲆ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / ⲆⲆⵠᐃ, -ⵠΔ.height / ᐃⵠΔⲆ - ⲆⲆΔⲆⵠ * Ⲇ);
					break;
				case ⵠ.ᐃⵠⲆΔᐃ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / ⲆᐃᐃΔ, -ⵠΔ.height / 2 - Ⲇ * 10);
					break;
				case ⵠ.ΔⵠⵠⲆⲆ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / Δᐃᐃⵠ, -ⵠΔ.height / ΔⲆⲆⵠ - 19 * Ⲇ);
					break;
				case ⵠ.ᐃΔᐃΔΔ:
					ΔⵠⵠⲆᐃ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / 4, -ⵠΔ.height / 4 - Ⲇ * 20);
					break;
				case ⵠ.ᐃⲆⲆⵠΔ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / ⲆᐃⵠⲆ - 1 * Ⲇ, -ⵠΔ.height / 2 - Ⲇ * 23);
					break;
				case ⵠ.ⵠΔΔΔΔ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / ΔΔᐃᐃ, -ⵠΔ.height / 2 - Ⲇ * 5);
					break;
				case ⵠ.ⲆᐃⵠΔΔ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / ΔⲆⲆⵠ - Ⲇ * ⵠΔᐃⵠ);
					break;
				case ⵠ.ΔⲆΔⲆⵠ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / 2 + 1.5 * Ⲇ, -ⵠΔ.height / ⲆⲆΔΔ - Ⲇ * 1);
					break;
				case ⵠ.ⲆᐃΔΔⲆ:
				case ⵠ.ⵠᐃⵠΔⲆ:
				case ⵠ.ⵠΔⲆᐃΔ:
				case ⵠ.ⲆΔΔᐃⵠ:
				case ⵠ.ⵠᐃⲆⲆΔ:
				case ⵠ.ΔⲆᐃⲆⵠ:
				case ⵠ.ⵠΔᐃⵠⵠ:
				case ⵠ.ᐃᐃᐃᐃⵠ:
				case ⵠ.ΔⵠᐃⵠⲆ:
				case ⵠ.ΔᐃⲆⲆᐃ:
				case ⵠ.ⵠⵠᐃⲆⲆ:
					ΔⵠⵠⲆᐃ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / ⲆⵠⲆᐃ, -ⵠΔ.height / 4 + ᐃⲆᐃⵠ * Ⲇ);
					break;
				case ⵠ.ᐃᐃⵠΔΔ:
				case ⵠ.ⵠᐃᐃΔⵠ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / 2 - 5 * Ⲇ, -ⵠΔ.height / 2 - Ⲇ * 2);
					break;
				case ⵠ.ⲆⲆᐃᐃΔ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2 - 2 * Ⲇ);
					break;
				case ⵠ.ΔⵠΔⲆⵠ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2 - Ⲇ * Δᐃᐃⵠ);
					break;
				case ⵠ.ΔⵠⲆᐃⲆ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2 - ⲆᐃⵠⲆ * Ⲇ);
					break;
				case ⵠ.ΔⵠΔᐃⵠ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / Δᐃᐃⵠ + ΔᐃΔⲆ * Ⲇ, -ⵠΔ.height / 2);
					break;
				case ⵠ.ΔⵠΔⵠⲆ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2 - ⲆΔΔΔ * Ⲇ);
					break;
				case ⵠ.ⲆᐃⲆᐃΔ:
				case ⵠ.ᐃᐃⵠⲆⵠ:
				case ⵠ.ΔᐃⲆⵠᐃ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / ⲆⲆᐃⲆ - 1 * Ⲇ, -ⵠΔ.height / 2);
					break;
				case ⵠ.ᐃΔΔᐃⵠ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2 + Ⲇ * 2);
					break;
				case ⵠ.ⵠⵠⵠᐃᐃ:
				case ⵠ.ΔΔΔΔΔ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / ⵠΔᐃⵠ + ΔⲆᐃΔΔ * Ⲇ);
					break;
				case ⵠ.ΔΔⲆΔⲆ:
					ⲆᐃⲆⵠ(ΔⲆⲆⲆᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2 - 4 * Ⲇ);
					break
			}
		}
	};

	function ⵠⵠⵠΔΔⲆᐃ() {
		if (this.ΔⲆⵠⲆᐃ || 0 === this.ⵠⵠΔⵠΔ) return;
		if (Settings.Fly.e) ᐃ.globalAlpha = Settings.Fly.o;
		if (this.r.x != this.x || this.y != this.r.y) {
			var ⵠᐃᐃ = (ⵠᐃΔᐃ.ⵠᐃⵠΔⲆⵠⲆ(this.x, this.y, this.r.x, this.r.y) + Math.PI / ⵠⲆⵠΔ) % (Math.PI * Ⲇⵠᐃⵠ);
			this.ⲆΔΔᐃⲆ = ⵠᐃΔᐃ.ᐃⲆᐃΔⵠⲆⲆ(ⵠᐃᐃ, this.ⲆΔΔᐃⲆ);
			this.ⲆΔΔᐃⲆ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(this.ⲆΔΔᐃⲆ, ⵠᐃᐃ, .018)
		}
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ᐃ.rotate(this.ⲆΔΔᐃⲆ);
		if (Ⲇᐃ.ᐃΔⵠΔΔ === this.ⵠⵠΔⵠΔ) {
			if (50 < this.ΔⲆⵠⵠΔ || ⲆⲆⵠⲆ < this.ΔΔⵠᐃⵠ) {
				this.ΔⲆⵠⵠΔ > 50 ? this.ΔΔⵠᐃⵠ = Math.min(1, this.ΔΔⵠᐃⵠ + ΔᐃⲆⲆ) : this.ΔΔⵠᐃⵠ = Math.max(Δⵠⵠ, this.ΔΔⵠᐃⵠ - ΔᐃⲆⲆ);
				ᐃ.globalAlpha = this.ΔΔⵠᐃⵠ;
				var ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆⵠᐃⵠΔⲆ][ⲆⲆⲆ.time];
				ΔⵠⵠⲆᐃ(ⵠ.ΔⲆⵠᐃⵠΔⲆ, ⵠΔ, -ⵠΔ.width / 4, -ⵠΔ.height / 4);
				ᐃ.globalAlpha = Settings.Fly.e ? Settings.Fly.o : 1
			}
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃΔⵠΔΔ][ⲆⲆⲆ.time];
			ΔⵠⵠⲆᐃ(ⵠ.ᐃΔⵠΔΔ, ⵠΔ, -ⵠΔ.width / ΔᐃΔΔ, -ⵠΔ.height / 4)
		} else if (Ⲇᐃ.ΔⲆⵠΔᐃ === this.ⵠⵠΔⵠΔ) {
			this.ΔⵠⲆⵠΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(this.ΔⵠⲆⵠΔ, this.ΔⲆⵠⵠΔ, .018);
			this.ΔᐃⵠΔⵠⲆᐃ.ᐃᐃⵠ();
			85 < this.ΔⲆⵠⵠΔ ? this.ΔΔⵠᐃⵠ = Math.min(ᐃⵠⵠ, this.ΔΔⵠᐃⵠ + ΔᐃⲆⲆ / 4) : this.ΔΔⵠᐃⵠ = Math.max(.1, this.ΔΔⵠᐃⵠ - ΔᐃⲆⲆ);
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔΔΔⵠΔⲆⲆ][ⲆⲆⲆ.time];
			ΔⵠⵠⲆᐃ(ⵠ.ΔΔΔⵠΔⲆⲆ, ⵠΔ, -ⵠΔ.width / ⲆⲆᐃΔᐃ, -ⵠΔ.height / 4);
			ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆΔᐃⵠⲆᐃ][ⲆⲆⲆ.time];
			Δⵠᐃ = -ⵠΔ.width;
			ⲆΔΔ = -ⵠΔ.height;
			ᐃ.save();
			ᐃ.translate(-ⵠⲆΔᐃᐃ * Ⲇ, Ⲇ * -ⵠΔⲆΔⵠ);
			ᐃ.rotate(this.ΔΔⵠᐃⵠ * this.ΔᐃⵠΔⵠⲆᐃ.ⲆᐃΔ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⲆΔⵠᐃΔ, -ⲆΔΔ / ⵠⲆⲆΔΔ, Δⵠᐃ / 2, ⲆΔΔ / 2);
			ᐃ.restore();
			ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆⵠⲆⲆⲆⵠ][ⲆⲆⲆ.time];
			ᐃ.save();
			ᐃ.translate(Ⲇ * 20, Ⲇ * -20);
			ᐃ.rotate(this.ΔΔⵠᐃⵠ * -this.ΔᐃⵠΔⵠⲆᐃ.ⲆᐃΔ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / ᐃⵠΔⲆ);
			ᐃ.restore()
		} else if (Ⲇᐃ.ⲆΔᐃⲆΔ === this.ⵠⵠΔⵠΔ) {
			this.ΔⵠⲆⵠΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(this.ΔⵠⲆⵠΔ, this.ΔⲆⵠⵠΔ, .018);
			this.ΔᐃⵠΔⵠⲆᐃ.ᐃᐃⵠ();
			if (this.ΔⲆⵠⵠΔ > 85) this.ΔΔⵠᐃⵠ = Math.min(ᐃⵠⵠ, this.ΔΔⵠᐃⵠ + ΔᐃⲆⲆ / 4);
			else this.ΔΔⵠᐃⵠ = Math.max(.1, this.ΔΔⵠᐃⵠ - ΔᐃⲆⲆ);
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆⲆⵠΔⵠᐃ][ⲆⲆⲆ.time];
			ΔⵠⵠⲆᐃ(ⵠ.ⲆⲆⲆⵠΔⵠᐃ, ⵠΔ, -ⵠΔ.width / ⲆΔⵠᐃΔ, -ⵠΔ.height / ⲆⵠⲆⲆⲆ);
			ⵠΔ = Ⲇⵠ[ⵠ.ΔΔΔⵠΔⵠⵠ][ⲆⲆⲆ.time];
			Δⵠᐃ = -ⵠΔ.width;
			ⲆΔΔ = -ⵠΔ.height;
			ᐃ.save();
			ᐃ.translate(-40 * Ⲇ, Ⲇ * -45);
			ᐃ.rotate(this.ΔᐃⵠΔⵠⲆᐃ.ⲆᐃΔ * this.ΔΔⵠᐃⵠ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ᐃⵠⲆⲆ, -ⲆΔΔ / 4, Δⵠᐃ / ᐃΔⲆⵠ, ⲆΔΔ / 2);
			ᐃ.restore();
			ⵠΔ = Ⲇⵠ[ⵠ.ᐃⵠⲆⲆⵠΔᐃ][ⲆⲆⲆ.time];
			ᐃ.save();
			ᐃ.translate(Ⲇ * 40, Ⲇ * -45);
			ᐃ.rotate(this.ΔΔⵠᐃⵠ * -this.ΔᐃⵠΔⵠⲆᐃ.ⲆᐃΔ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⲆⲆᐃΔᐃ, -ⲆΔΔ / ᐃΔⲆΔⲆ, Δⵠᐃ / ΔᐃΔⲆ, ⲆΔΔ / ⵠⲆⵠΔ);
			ᐃ.restore()
		} else if (this.ⵠⵠΔⵠΔ === Ⲇᐃ.ⵠᐃⲆΔⲆ) {
			this.ΔⵠⲆⵠΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(this.ΔⵠⲆⵠΔ, this.ΔⲆⵠⵠΔ, .018);
			this.ΔᐃⵠΔⵠⲆᐃ.ᐃᐃⵠ();
			this.ΔⲆⵠⵠΔ > 85 ? this.ΔΔⵠᐃⵠ = Math.min(1, this.ΔΔⵠᐃⵠ + ΔᐃⲆⲆ / ⵠΔΔⵠ) : this.ΔΔⵠᐃⵠ = Math.max(.1, this.ΔΔⵠᐃⵠ - ΔᐃⲆⲆ);
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆⲆⲆⲆⲆΔ][ⲆⲆⲆ.time];
			ΔⵠⵠⲆᐃ(ⵠ.ΔⲆⲆⲆⲆⲆΔ, ⵠΔ, -ⵠΔ.width / 4, -ⵠΔ.height / 4);
			ⵠΔ = Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠΔᐃ][ⲆⲆⲆ.time];
			Δⵠᐃ = -ⵠΔ.width;
			ⲆΔΔ = -ⵠΔ.height;
			ᐃ.save();
			ᐃ.translate(-40 * Ⲇ, -45 * Ⲇ);
			ᐃ.rotate(this.ΔᐃⵠΔⵠⲆᐃ.ⲆᐃΔ * this.ΔΔⵠᐃⵠ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ⲆⵠⵠⲆ, -ⲆΔΔ / ᐃᐃⲆⵠ, Δⵠᐃ / ⵠΔᐃⵠ, ⲆΔΔ / ⲆⲆΔΔ);
			ᐃ.restore();
			ⵠΔ = Ⲇⵠ[ⵠ.ⲆΔᐃΔΔⵠΔ][ⲆⲆⲆ.time];
			ᐃ.save();
			ᐃ.translate(Ⲇ * 40, -45 * Ⲇ);
			ᐃ.rotate(-this.ΔᐃⵠΔⵠⲆᐃ.ⲆᐃΔ * this.ΔΔⵠᐃⵠ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / ΔⵠⲆᐃ, -ⲆΔΔ / ΔᐃΔΔ, Δⵠᐃ / Ⲇⵠᐃⵠ, ⲆΔΔ / 2);
			ᐃ.restore()
		} else if (this.ⵠⵠΔⵠΔ === Ⲇᐃ.ⲆⲆⲆΔⲆ) {
			this.ΔⵠⲆⵠΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(this.ΔⵠⲆⵠΔ, this.ΔⲆⵠⵠΔ, .018);
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆⲆΔⲆ][ⲆⲆⲆ.time];
			ΔⵠⵠⲆᐃ(ⵠ.ⲆⲆⲆΔⲆ, ⵠΔ, -ⵠΔ.width / 4, -ⵠΔ.height / 4)
		} else if (Ⲇᐃ.ⵠⲆⲆΔᐃ === this.ⵠⵠΔⵠΔ) {
			this.ΔⵠⲆⵠΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(this.ΔⵠⲆⵠΔ, this.ΔⲆⵠⵠΔ, .018);
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⲆⲆΔᐃ][ⲆⲆⲆ.time];
			ΔⵠⵠⲆᐃ(ⵠ.ⵠⲆⲆΔᐃ, ⵠΔ, -ⵠΔ.width / 4, -ⵠΔ.height / 4)
		} else if (this.ⵠⵠΔⵠΔ === Ⲇᐃ.ⲆᐃΔⲆⲆ) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃΔⲆⲆ][ⲆⲆⲆ.time];
			ΔⵠⵠⲆᐃ(ⵠ.ⲆᐃΔⲆⲆ, ⵠΔ, -ⵠΔ.width / 4, -ⵠΔ.height / ⲆⵠⲆᐃ)
		} else if (Ⲇᐃ.ᐃΔⲆΔⵠ === this.ⵠⵠΔⵠΔ) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆᐃⲆΔΔᐃ][ⲆⲆⲆ.time];
			if (this.ΔⲆⵠⵠΔ > 85) this.ΔΔⵠᐃⵠ = Math.min(Δᐃᐃ, this.ΔΔⵠᐃⵠ + ΔᐃⲆⲆ / ΔⵠⲆⵠⲆ);
			else this.ΔΔⵠᐃⵠ = Math.max(ⵠⲆΔⵠ, this.ΔΔⵠᐃⵠ - ΔᐃⲆⲆ);
			this.ⵠᐃⲆᐃⵠ += 60 * ΔᐃⲆⲆ;
			if (this.ⵠᐃⲆᐃⵠ > 60) this.ⵠᐃⲆᐃⵠ -= 60;
			var ⵠΔⲆᐃⵠ = (-6 + ᐃⵠᐃⵠⵠ * (this.ⵠᐃⲆᐃⵠ < 30 ? this.ⵠᐃⲆᐃⵠ / 30 : Δᐃᐃ - (this.ⵠᐃⲆᐃⵠ - 30) / 30)) * this.ΔΔⵠᐃⵠ;
			ΔⵠⵠⲆᐃ(ⵠ.ⲆⲆᐃⲆΔΔᐃ, ⵠΔ, -ⵠΔ.width / ⲆⵠⲆⲆⲆ, -ⵠΔ.height / ⲆΔⵠᐃΔ + ⵠΔⲆᐃⵠ)
		} else if (Ⲇᐃ.ⵠⵠΔⵠⲆ === this.ⵠⵠΔⵠΔ) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔΔⲆΔⲆⵠΔ][ⲆⲆⲆ.time];
			85 < this.ΔⲆⵠⵠΔ ? this.ΔΔⵠᐃⵠ = Math.min(ᐃⲆΔ, this.ΔΔⵠᐃⵠ + ΔᐃⲆⲆ / 4) : this.ΔΔⵠᐃⵠ = Math.max(0, this.ΔΔⵠᐃⵠ - ΔᐃⲆⲆ);
			this.ⵠᐃⲆᐃⵠ += ΔᐃⲆⲆ * 60;
			if (60 < this.ⵠᐃⲆᐃⵠ) this.ⵠᐃⲆᐃⵠ -= 60;
			var ⵠΔⲆᐃⵠ = this.ΔΔⵠᐃⵠ * (-6 + (30 > this.ⵠᐃⲆᐃⵠ ? this.ⵠᐃⲆᐃⵠ / 30 : ⵠΔⲆ - (this.ⵠᐃⲆᐃⵠ - 30) / 30) * ᐃᐃΔᐃⲆ);
			ΔⵠⵠⲆᐃ(ⵠ.ΔΔⲆΔⲆⵠΔ, ⵠΔ, -ⵠΔ.width / ⵠⲆⲆΔΔ, -ⵠΔ.height / 4 + ⵠΔⲆᐃⵠ)
		} else if (Ⲇᐃ.ᐃᐃⵠⵠᐃ === this.ⵠⵠΔⵠΔ) {
			var ᐃⵠⵠⲆᐃ = Math.PI / ⲆⲆⵠᐃ;
			var ⵠⵠᐃⵠΔⵠᐃ = Math.PI / 4;
			var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⲆΔᐃᐃⲆΔ][ⲆⲆⲆ.time];
			this.ΔⲆⵠⵠΔ > 85 ? this.ΔΔⵠᐃⵠ = Math.min(ᐃⵠⵠ, this.ΔΔⵠᐃⵠ + ΔᐃⲆⲆ / 4) : this.ΔΔⵠᐃⵠ = Math.max(0, this.ΔΔⵠᐃⵠ - ΔᐃⲆⲆ);
			this.ⵠᐃⲆᐃⵠ += ΔᐃⲆⲆ * 60;
			60 < this.ⵠᐃⲆᐃⵠ && (this.ⵠᐃⲆᐃⵠ -= 60);
			var ⵠΔⲆᐃⵠ = this.ΔΔⵠᐃⵠ * (-6 + ᐃⲆⵠⵠΔ * (this.ⵠᐃⲆᐃⵠ < 30 ? this.ⵠᐃⲆᐃⵠ / 30 : Δᐃᐃ - (this.ⵠᐃⲆᐃⵠ - 30) / 30));
			ΔⵠⵠⲆᐃ(ⵠ.ⵠⲆΔᐃᐃⲆΔ, ⵠΔ, -ⵠΔ.width / ΔᐃΔΔ + ⵠΔⲆᐃⵠ, -ⵠΔ.height / ΔᐃΔΔ);
			ᐃ.restore();
			ᐃ.save();
			ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
			ᐃ.rotate(Math.PI + this.ⲆΔΔᐃⲆ + ⵠⵠᐃⵠΔⵠᐃ);
			ᐃ.translate(120, ⵠΔⲆᐃⵠ);
			ᐃ.rotate(ᐃⵠⵠⲆᐃ);
			ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔᐃⲆᐃΔᐃ][ⲆⲆⲆ.time];
			Δⵠᐃ = -ⵠΔ.width;
			ⲆΔΔ = -ⵠΔ.height;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
			ᐃ.restore();
			ᐃ.save();
			ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
			ᐃ.rotate(Math.PI + this.ⲆΔΔᐃⲆ + ᐃⵠⵠⲆᐃ + ⵠⵠᐃⵠΔⵠᐃ);
			ᐃ.translate(120, ⵠΔⲆᐃⵠ);
			ᐃ.rotate(ᐃⵠⵠⲆᐃ);
			ⵠΔ = Ⲇⵠ[ⵠ.ⵠᐃⲆᐃᐃⲆΔ][ⲆⲆⲆ.time];
			Δⵠᐃ = -ⵠΔ.width;
			ⲆΔΔ = -ⵠΔ.height;
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ)
		}
		ᐃ.restore();
		if (Settings.Fly.e) ᐃ.globalAlpha = 1
	}
	ᐃⵠΔΔⵠΔΔⵠΔ = ⲆᐃⲆ;
	ⵠⵠᐃⲆⲆᐃⲆΔᐃ = ⲆΔⲆⵠ;
	ⵠⲆⵠⵠⲆⲆᐃⵠΔ = ΔⲆᐃⲆ;
	ΔⵠⲆⵠⲆⵠᐃΔⲆ = 3;
	ᐃΔⵠⵠᐃⵠΔΔᐃ = 4;
	ᐃⵠⲆᐃⵠᐃⵠ = [
		[],
		[],
		[],
		[],
		[]
	];
	ⲆⵠⲆΔⵠⵠᐃⵠⲆ = [Δ[60], "#00BB00", "#1CE7E0", "#DBE71C", Δ[60]];

	function ᐃⲆⲆⵠᐃⲆΔᐃΔ() {
		if (this.enabled && this.ᐃΔΔᐃΔ >= 0) {
			var ᐃⲆΔⲆⲆⵠΔⵠᐃ = (new Date).getTime();
			var ᐃᐃΔ = ᐃⲆΔⲆⲆⵠΔⵠᐃ - this.ᐃΔΔᐃΔ;
			var ⵠⵠⵠᐃ = ᐃᐃΔ % 1e3 / 1e3;
			ⵠⵠⵠᐃ > .5 ? ⵠⵠⵠᐃ = 1 - (ⵠⵠⵠᐃ - .5) * ⲆⲆΔΔ : ⵠⵠⵠᐃ *= 2;
			ᐃᐃΔ = Math.floor(ᐃᐃΔ / 1e3);
			if (ⵠΔᐃⲆ.ⲆⲆⵠΔΔᐃᐃ > ᐃᐃΔ) {
				ᐃᐃΔ = ⵠΔᐃⲆ.ⲆⲆⵠΔΔᐃᐃ - ᐃᐃΔ;
				if (!this.label) {
					this.label = ⲆΔⵠⵠⵠ(Ⲇ, " seconds before you die", 40, Δ[527], null, null, null, null, null, Δ[287], ⵠᐃᐃⵠⵠ)
				}
				if (this.now != ᐃᐃΔ || !this.ΔⲆⲆᐃΔΔⵠ) {
					this.now = ᐃᐃΔ;
					this.ΔⲆⲆᐃΔΔⵠ = ⲆΔⵠⵠⵠ(Ⲇ, "" + ᐃᐃΔ, 40, Δ[527], null, null, null, null, null, Δ[287], 10)
				}
				ᐃΔΔⲆ(ᐃ, this.label, (ⲆΔⲆᐃ - this.label.width) / ᐃᐃᐃᐃ, ⵠⲆΔᐃΔ * Ⲇ);
				ᐃ.globalAlpha = ⵠⵠⵠᐃ;
				ᐃΔΔⲆ(ᐃ, this.ΔⲆⲆᐃΔΔⵠ, (ⲆΔⲆᐃ - this.label.width) / ⲆⲆᐃⲆ - this.ΔⲆⲆᐃΔΔⵠ.width + Ⲇ * ΔⵠΔᐃΔᐃᐃ, 100 * Ⲇ);
				ᐃ.globalAlpha = 1
			}
		}
	}

	function ᐃⲆΔΔᐃⵠⲆ(ᐃᐃⵠⲆᐃⲆᐃ, ᐃⲆᐃⲆⵠᐃᐃ, ΔⵠΔᐃᐃ) {
		if (ᐃⲆᐃⲆⵠᐃᐃ.ΔⲆΔᐃΔⲆΔ() !== ⵠⵠⵠΔ) return ᐃⲆᐃⲆⵠᐃᐃ;
		var ᐃᐃⵠΔⲆᐃⲆ = ᐃⵠⲆᐃⵠᐃⵠ[ΔⵠΔᐃᐃ][ᐃᐃⵠⲆᐃⲆᐃ];
		if (undefined === ᐃᐃⵠΔⲆᐃⲆ) {
			ᐃᐃⵠΔⲆᐃⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
			var ⵠⲆⵠᐃⲆΔᐃ = ᐃᐃⵠΔⲆᐃⲆ.getContext(Δ[160]);
			var ⲆⲆⵠ = ᐃⲆᐃⲆⵠᐃᐃ.width;
			var ΔⲆⵠ = ᐃⲆᐃⲆⵠᐃᐃ.height;
			ᐃᐃⵠΔⲆᐃⲆ.width = ⲆⲆⵠ;
			ᐃᐃⵠΔⲆᐃⲆ.height = ΔⲆⵠ;
			ⵠⲆⵠᐃⲆΔᐃ.drawImage(ᐃⲆᐃⲆⵠᐃᐃ, ⲆΔⵠΔ, 0);
			ⵠⲆⵠᐃⲆΔᐃ.globalCompositeOperation = "source-in";
			ⵠⲆⵠᐃⲆΔᐃ.fillStyle = ⲆⵠⲆΔⵠⵠᐃⵠⲆ[ΔⵠΔᐃᐃ];
			ⵠⲆⵠᐃⲆΔᐃ.fillRect(0, 0, ⲆⲆⵠ, ΔⲆⵠ);
			ᐃⵠⲆᐃⵠᐃⵠ[ΔⵠΔᐃᐃ][ᐃᐃⵠⲆᐃⲆᐃ] = ᐃᐃⵠΔⲆᐃⲆ
		}
		return ᐃᐃⵠΔⲆᐃⲆ
	}

	function ⵠⵠΔⵠᐃᐃᐃⲆΔ(ᐃⲆ, ⲆⵠΔⵠ) {
		if (this.text) {
			!this.timeout.ᐃΔⲆ ? ᐃ.globalAlpha = ⵠⵠᐃ : ᐃ.globalAlpha = 1 - this.timeout.ⲆᐃΔ;
			if (!this.label) this.label = ⲆΔⵠⵠⵠ(Ⲇ, this.text, 40, ᐃⲆ, null, null, null, null, null, ⲆⵠΔⵠ, 10);
			ᐃΔΔⲆ(ᐃ, this.label, (ⲆΔⲆᐃ - this.label.width) / Δⵠᐃᐃ, 50 * Ⲇ);
			ᐃ.globalAlpha = 1;
			this.timeout.ᐃᐃⵠ() && this.timeout.ᐃΔⲆ == ᐃⵠⵠⲆⵠ && (this.text = this.list.shift(), this.label = null)
		}
	}

	function ⵠⵠᐃⵠⲆⲆⵠᐃΔ() {
		if (this.message !== undefined) {
			var ΔΔⵠ = ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length > 0 ? -95 : ⲆΔⵠΔ;
			ᐃΔΔⲆ(ᐃ, this.message, 0, ΔⵠⲆΔ - this.message.height + ΔΔⵠ)
		}
	}

	function ⲆⵠⵠⵠⵠΔᐃⲆΔ() {
		var ΔⲆⲆⲆⲆⲆⲆ = ⵠᐃⵠⵠ;
		switch (this.right) {
			case ⵠ.ⲆⲆΔⲆⲆ:
			case ⵠ.ⵠⲆⲆⲆᐃ:
			case ⵠ.ⲆⲆⲆΔⵠ:
			case ⵠ.ΔⵠᐃᐃΔ:
			case ⵠ.ᐃΔΔⲆⵠ:
			case ⵠ.ΔⵠᐃⲆᐃ:
				var ΔⲆⲆⲆⲆⲆⲆ = ⵠΔΔ;
				break
		}
		if (this.ΔⲆⵠⲆᐃ) {
			for (var Δᐃ = ΔᐃΔ; Δᐃ < this.bubbles.length; Δᐃ++) {
				var ⵠⵠᐃⵠ = this.bubbles[Δᐃ];
				if (ⵠⵠᐃⵠ.ᐃⵠᐃⲆⲆ > .5) var ⵠⵠⵠᐃ = Δᐃᐃ - (ⵠⵠᐃⵠ.ᐃⵠᐃⲆⲆ - .5) * ᐃⲆᐃⵠ;
				else var ⵠⵠⵠᐃ = ⵠⵠᐃⵠ.ᐃⵠᐃⲆⲆ * ΔᐃΔⲆ;
				ᐃ.globalAlpha = ⵠⵠⵠᐃ;
				var ⵠΔ = Ⲇⵠ[ⵠ.ΔⲆⲆΔΔⵠᐃ][ⲆⲆⲆ.time][ⵠⵠᐃⵠ.id];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠⵠᐃⵠ.x - ⵠΔ.width / ⲆⲆᐃⲆ, ⵠⵠⵠ.ᐃⵠⲆ.y + ⵠⵠᐃⵠ.y - ⵠΔ.height / 2);
				ᐃ.globalAlpha = 1
			}
			return
		}
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		ⲆⲆⲆ.ⵠᐃⵠᐃⵠΔⲆⵠⵠ(this);
		this.action & ⵠᐃᐃⵠ.ΔᐃⵠⵠᐃΔⲆ && ⵠⲆᐃᐃΔⲆⲆⵠᐃ(this);
		ᐃ.save();
		ᐃ.rotate(this.angle - Math.PI / ΔΔᐃᐃ);
		if (!(this.action & ⵠᐃᐃⵠ.ΔᐃⵠⵠᐃΔⲆ)) {
			if (this.action & ⵠᐃᐃⵠ.IDLE || 0 !== this.ⵠⵠΔⵠΔ) {
				this.ⵠⵠΔⲆᐃΔᐃ.ᐃᐃⵠ()
			} else this.action & ⵠᐃᐃⵠ.ⲆⵠⵠΔⲆΔⲆ && this.ᐃⲆⲆⲆⵠⵠΔ.ᐃᐃⵠ()
		}
		var ΔΔ = this.ⵠⵠΔⲆᐃΔᐃ.ⲆᐃΔ;
		var ΔΔⵠ = this.ᐃⲆⲆⲆⵠⵠΔ.ⲆᐃΔ;
		var ᐃⲆⲆΔΔ;
		if (ⵠ.ΔⵠΔⲆⵠ === this.ΔⲆⲆⲆᐃ) {
			ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆⲆⲆᐃ][ⲆⲆⲆ.time];
			ᐃⲆⲆΔΔ = ⵠ.ᐃⲆⲆⲆᐃ
		} else if (ⵠ.ⵠᐃⵠΔⲆ === this.ΔⲆⲆⲆᐃ) {
			ⵠΔ = Ⲇⵠ[ⵠ.ⵠΔⲆⲆΔ][ⲆⲆⲆ.time];
			ᐃⲆⲆΔΔ = ⵠ.ⵠΔⲆⲆΔ
		} else if (this.ΔⲆⲆⲆᐃ === ⵠ.ⵠΔⲆᐃΔ) {
			ⵠΔ = Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⵠⲆⵠ][ⲆⲆⲆ.time];
			ᐃⲆⲆΔΔ = ⵠ.ⵠᐃⲆᐃⵠⲆⵠ
		} else if (this.ΔⲆⲆⲆᐃ === ⵠ.ⲆΔΔᐃⵠ) {
			ⵠΔ = Ⲇⵠ[ⵠ.ⵠⲆⲆⲆΔΔⵠ][ⲆⲆⲆ.time];
			ᐃⲆⲆΔΔ = ⵠ.ⵠⲆⲆⲆΔΔⵠ
		} else this.ⲆⵠΔΔᐃⵠΔ ? (ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆⵠᐃΔᐃᐃ][ⲆⲆⲆ.time], ᐃⲆⲆΔΔ = ⵠ.ⲆⲆⵠᐃΔᐃᐃ) : (ⵠΔ = Ⲇⵠ[ⵠ.Ⲇᐃᐃⵠᐃ][this.ⵠⲆΔΔ][ⲆⲆⲆ.time], ᐃⲆⲆΔΔ = ⵠ.Ⲇᐃᐃⵠᐃ);
		ⵠⲆⲆΔ = Ⲇⵠ[ⵠ.ᐃΔᐃⵠⲆ][ⲆⲆⲆ.time];
		var ⵠⵠⵠᐃΔ = ⵠΔ;
		var ᐃᐃᐃΔⲆ = ᐃⲆⲆΔΔ;
		if (this.action & ⵠᐃᐃⵠ.ΔᐃⵠⵠᐃΔⲆ) {
			if (this.attack.ᐃᐃⵠ() && ⲆᐃⲆⲆΔ == this.attack.ᐃΔⲆ) {
				this.ⵠⵠⵠᐃΔ = !this.ⵠⵠⵠᐃΔ;
				this.action -= ⵠᐃᐃⵠ.ΔᐃⵠⵠᐃΔⲆ;
				this.ΔᐃⲆⵠ == ⵠⵠⵠ.ΔᐃⲆⵠ && (ⵠⵠⵠ.control.ᐃⵠⵠⲆ = 0)
			}
			this.right >= 0 && (this.ⵠⵠⵠᐃΔ = true);
			var ᐃⵠⵠΔ = this.ⵠⵠⵠᐃΔ ? this.attack.ⲆᐃΔ : -this.attack.ⲆᐃΔ / 3;
			var ᐃⲆⲆⲆⲆ = this.ⵠⵠⵠᐃΔ ? this.attack.ⲆᐃΔ / 3 : -this.attack.ⲆᐃΔ;
			if (this.ⲆⵠΔΔᐃⵠΔ) {
				ᐃ.save();
				ᐃ.rotate(ᐃⵠⵠΔ);
				ⲆᐃⲆⵠ(ᐃⲆⲆΔΔ, ⵠΔ, -ⵠΔ.width / 2 - (66 + ΔΔ) * Ⲇ, -ⵠΔ.height / 2 + Ⲇ * (5 + ΔΔⵠ));
				ᐃ.restore();
				ᐃ.save();
				ᐃ.rotate(ᐃⲆⲆⲆⲆ);
				ⲆᐃⲆⵠ(ᐃⲆⲆΔΔ, ⵠΔ, -ⵠΔ.width / ΔⲆᐃⲆ + (66 + ΔΔ) * Ⲇ, -ⵠΔ.height / ΔᐃΔⲆ + Ⲇ * (ⵠⵠⲆⵠ + ΔΔⵠ));
				ᐃ.restore()
			} else {
				if (ΔᐃΔ === ΔⲆⲆⲆⲆⲆⲆ) {
					this.right === ⵠ.ⲆⵠⲆⵠᐃ && (ᐃⵠⵠΔ = -ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ(-ᐃⵠⵠΔ));
					ᐃ.save();
					ᐃ.rotate(ᐃⵠⵠΔ);
					ⲆᐃⲆⵠ(ⵠ.ᐃΔᐃⵠⲆ, ⵠⲆⲆΔ, -ⵠⲆⲆΔ.width / ⲆᐃᐃΔ - Ⲇ * (49 + ΔΔ), -ⵠⲆⲆΔ.height / ΔⲆᐃⲆ + (15 + ΔΔⵠ) * Ⲇ);
					if (ⵠ.Δⵠᐃᐃⵠ === this.right) {
						var ⵠΔⲆᐃⵠΔᐃ = Ⲇⵠ[this.right][this.ⲆΔⵠΔΔ][ⲆⲆⲆ.time];
						ⵠΔᐃΔΔ(this.right, this.ⲆΔⵠΔΔ, ⵠΔⲆᐃⵠΔᐃ, -ⵠΔⲆᐃⵠΔᐃ.width / 4 - Ⲇ * (62 + ΔΔ), -ⵠΔⲆᐃⵠΔᐃ.height / ᐃᐃΔΔ + Ⲇ * (ΔΔⵠ + ⲆⲆΔⲆⵠ))
					} else ᐃⲆⵠΔⵠᐃΔ(this.right, ΔΔ, ΔΔⵠ);
					if (ⵠ.ⵠΔⲆⲆΔ <= ᐃⲆⲆΔΔ) ΔⵠⵠⲆᐃ(ᐃⲆⲆΔΔ, ⵠΔ, -ⵠΔ.width / ⲆΔⲆᐃΔ - Ⲇ * (49 + ΔΔ), -ⵠΔ.height / ⵠΔΔⵠ + (11 + ΔΔⵠ) * Ⲇ);
					else if (ᐃⲆⲆΔΔ !== ⵠ.ᐃⲆⲆⲆᐃ) {
						ⵠΔᐃΔΔ(ᐃⲆⲆΔΔ, this.ⵠⲆΔΔ, ⵠΔ, -ⵠΔ.width / ⲆⵠⵠⲆ - Ⲇ * (49 + ΔΔ), -ⵠΔ.height / 4 + Ⲇ * (11 + ΔΔⵠ))
					} else ⲆᐃⲆⵠ(ᐃⲆⲆΔΔ, ⵠΔ, -ⵠΔ.width / 2 - Ⲇ * (49 + ΔΔ), -ⵠΔ.height / Δⵠᐃᐃ + Ⲇ * (ᐃⲆᐃΔⲆⲆⵠ + ΔΔⵠ));
					ᐃ.restore();
					ᐃ.save();
					ᐃ.rotate(ᐃⲆⲆⲆⲆ);
					ⲆᐃⲆⵠ(ⵠ.ᐃΔᐃⵠⲆ, ⵠⲆⲆΔ, -ⵠⲆⲆΔ.width / 2 + (49 + ΔΔ) * Ⲇ, -ⵠⲆⲆΔ.height / 2 + Ⲇ * (15 + ΔΔⵠ));
					if (ᐃⲆⲆΔΔ >= ⵠ.ⵠΔⲆⲆΔ) ΔⵠⵠⲆᐃ(ᐃⲆⲆΔΔ, ⵠΔ, -ⵠΔ.width / 4 + (49 + ΔΔ) * Ⲇ, -ⵠΔ.height / 4 + (ᐃⲆΔΔΔΔΔ + ΔΔⵠ) * Ⲇ);
					else if (ⵠ.ᐃⲆⲆⲆᐃ !== ᐃⲆⲆΔΔ) ⵠΔᐃΔΔ(ᐃⲆⲆΔΔ, this.ⵠⲆΔΔ, ⵠΔ, -ⵠΔ.width / 4 + Ⲇ * (49 + ΔΔ), -ⵠΔ.height / 4 + (11 + ΔΔⵠ) * Ⲇ);
					else ⲆᐃⲆⵠ(ᐃⲆⲆΔΔ, ⵠΔ, -ⵠΔ.width / ⲆⲆᐃⲆ + Ⲇ * (49 + ΔΔ), -ⵠΔ.height / 2 + Ⲇ * (ΔᐃⲆⲆΔⲆᐃ + ΔΔⵠ));
					ᐃ.restore()
				}
			}
		} else {
			if (this.ⲆⵠΔΔᐃⵠΔ) {
				ⲆᐃⲆⵠ(ᐃⲆⲆΔΔ, ⵠΔ, -ⵠΔ.width / ΔᐃΔⲆ - (66 + ΔΔ) * Ⲇ, -ⵠΔ.height / ⲆⲆᐃⲆ + Ⲇ * (ᐃᐃⲆΔΔ + ΔΔⵠ));
				ⲆᐃⲆⵠ(ᐃⲆⲆΔΔ, ⵠΔ, -ⵠΔ.width / ⵠΔᐃΔᐃ + Ⲇ * (66 + ΔΔ), -ⵠΔ.height / ⲆⲆᐃⲆ + Ⲇ * (ⵠⵠΔⲆ + ΔΔⵠ))
			} else {
				if (0 === ΔⲆⲆⲆⲆⲆⲆ) {
					ⲆᐃⲆⵠ(ⵠ.ᐃΔᐃⵠⲆ, ⵠⲆⲆΔ, -ⵠⲆⲆΔ.width / 2 - (49 + ΔΔ) * Ⲇ, -ⵠⲆⲆΔ.height / 2 + (15 + ΔΔⵠ) * Ⲇ);
					if (ⵠ.Δⵠᐃᐃⵠ === this.right) {
						var ⵠΔⲆᐃⵠΔᐃ = Ⲇⵠ[this.right][this.ⲆΔⵠΔΔ][ⲆⲆⲆ.time];
						ⵠΔᐃΔΔ(this.right, this.ⲆΔⵠΔΔ, ⵠΔⲆᐃⵠΔᐃ, -ⵠΔⲆᐃⵠΔᐃ.width / 4 - (62 + ΔΔ) * Ⲇ, -ⵠΔⲆᐃⵠΔᐃ.height / 4 + Ⲇ * (ΔΔⵠ + 18))
					} else ᐃⲆⵠΔⵠᐃΔ(this.right, ΔΔ, ΔΔⵠ);
					if (ⵠ.ⵠΔⲆⲆΔ <= ᐃⲆⲆΔΔ) ΔⵠⵠⲆᐃ(ᐃⲆⲆΔΔ, ⵠΔ, -ⵠΔ.width / ᐃᐃᐃΔⵠ - Ⲇ * (49 + ΔΔ), -ⵠΔ.height / ᐃⵠⲆⲆ + (11 + ΔΔⵠ) * Ⲇ);
					else if (ᐃⲆⲆΔΔ !== ⵠ.ᐃⲆⲆⲆᐃ) ⵠΔᐃΔΔ(ᐃⲆⲆΔΔ, this.ⵠⲆΔΔ, ⵠΔ, -ⵠΔ.width / ᐃᐃᐃΔⵠ - (49 + ΔΔ) * Ⲇ, -ⵠΔ.height / 4 + Ⲇ * (ⲆⵠᐃⲆⵠ + ΔΔⵠ));
					else ⲆᐃⲆⵠ(ᐃⲆⲆΔΔ, ⵠΔ, -ⵠΔ.width / 2 - (49 + ΔΔ) * Ⲇ, -ⵠΔ.height / 2 + Ⲇ * (11 + ΔΔⵠ));
					ⲆᐃⲆⵠ(ⵠ.ᐃΔᐃⵠⲆ, ⵠⲆⲆΔ, -ⵠⲆⲆΔ.width / ⲆⲆΔΔ + (49 + ΔΔ) * Ⲇ, -ⵠⲆⲆΔ.height / ᐃᐃᐃᐃ + Ⲇ * (ⲆⵠⲆΔⵠ + ΔΔⵠ));
					if (ᐃⲆⲆΔΔ >= ⵠ.ⵠΔⲆⲆΔ) ΔⵠⵠⲆᐃ(ᐃⲆⲆΔΔ, ⵠΔ, -ⵠΔ.width / 4 + Ⲇ * (49 + ΔΔ), -ⵠΔ.height / ⲆⵠⵠⲆ + (ᐃᐃⵠΔⵠⲆⲆ + ΔΔⵠ) * Ⲇ);
					else if (ᐃⲆⲆΔΔ !== ⵠ.ᐃⲆⲆⲆᐃ) ⵠΔᐃΔΔ(ᐃⲆⲆΔΔ, this.ⵠⲆΔΔ, ⵠΔ, -ⵠΔ.width / ⲆΔⲆᐃΔ + (49 + ΔΔ) * Ⲇ, -ⵠΔ.height / ᐃΔⲆΔⲆ + (ᐃᐃⵠΔⵠⲆⲆ + ΔΔⵠ) * Ⲇ);
					else ⲆᐃⲆⵠ(ᐃⲆⲆΔΔ, ⵠΔ, -ⵠΔ.width / ᐃⲆᐃⵠ + (49 + ΔΔ) * Ⲇ, -ⵠΔ.height / 2 + (11 + ΔΔⵠ) * Ⲇ)
				}
			}
		}
		if (this.ΔΔⲆᐃⵠ && ⲆⵠΔⲆ > this.ΔⲆⲆⲆᐃ) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆⲆⲆ][this.ΔⲆᐃᐃΔⵠⲆ][ⲆⲆⲆ.time];
			ⵠΔᐃΔΔ(ⵠ.ⲆⲆⲆⲆ, this.ΔⲆᐃᐃΔⵠⲆ, ⵠΔ, -ⵠΔ.width / ⲆⵠⲆᐃ, -ⵠΔ.height / ΔⵠⲆᐃ - 39 * Ⲇ)
		}
		if (this.ⲆⵠΔΔᐃⵠΔ) {
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔΔⵠᐃΔⲆᐃ][ⲆⲆⲆ.time];
			ⲆᐃⲆⵠ(ⵠ.ΔΔⵠᐃΔⲆᐃ, ⵠΔ, -ⵠΔ.width / Δᐃᐃⵠ, -ⵠΔ.height / ΔΔᐃᐃ);
			this.ᐃΔΔᐃⵠΔᐃ.ᐃᐃⵠ();
			ⵠΔ = Ⲇⵠ[ⵠ.ⲆⵠᐃⵠΔᐃΔ][ⲆⲆⲆ.time];
			ⲆᐃⲆⵠ(ⵠ.ⲆⵠᐃⵠΔᐃΔ, ⵠΔ, -ⵠΔ.width / ⲆᐃⵠⲆ, -ⵠΔ.height / ΔΔᐃᐃ + this.ᐃΔΔᐃⵠΔᐃ.ⲆᐃΔ)
		} else {
			var ⵠΔ = Ⲇⵠ[ⵠ.ᐃᐃᐃΔⲆᐃᐃ][this.ⵠⲆΔΔ][ⲆⲆⲆ.time];
			if (this.ΔⲆⲆⲆᐃ !== ⵠ.ΔⵠΔⲆⵠ) {
				ⵠΔᐃΔΔ(ⵠ.ᐃᐃᐃΔⲆᐃᐃ, this.ⵠⲆΔΔ, ⵠΔ, -ⵠΔ.width / 4, -ⵠΔ.height / ⲆⵠⲆⲆⲆ);
				if (0 < this.ᐃᐃⲆΔⵠ) {
					var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠΔⲆᐃ][this.ᐃᐃⲆΔⵠ][ⲆⲆⲆ.time];
					ⵠΔᐃΔΔ(ⵠ.ⵠⵠΔⲆᐃ, this.ᐃᐃⲆΔⵠ, ⵠΔ, -ⵠΔ.width / ᐃΔⲆΔⲆ, -ⵠΔ.height / ΔΔᐃᐃⲆ)
				}
			}
		}
		if (this.action & ⵠᐃᐃⵠ.ᐃⲆΔΔⲆᐃΔ) {
			this.ⲆⲆᐃΔⵠ.ᐃᐃⵠ() && false == this.ⲆⲆᐃΔⵠ.ᐃΔⲆ && (this.action -= ⵠᐃᐃⵠ.ᐃⲆΔΔⲆᐃΔ);
			ᐃ.globalAlpha = .6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
			if (this.ⲆⵠΔΔᐃⵠΔ) {
				var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⲆⵠⵠⲆᐃ];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ᐃΔⲆⵠ, -ⵠΔ.height / ⲆⲆΔΔ)
			} else {
				var ⵠΔ = ᐃⲆΔΔᐃⵠⲆ(this.ⵠⲆΔΔ, Ⲇⵠ[ⵠ.ᐃᐃᐃΔⲆᐃᐃ][this.ⵠⲆΔΔ][0], ⵠⵠᐃⲆⲆᐃⲆΔᐃ);
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠΔ.width / 4, ⵠΔ.height / ᐃᐃᐃΔⵠ, -ⵠΔ.width / 2, -ⵠΔ.height / Ⲇⵠᐃⵠ)
			}
			ᐃ.globalAlpha = 1
		}
		if (this.action & ⵠᐃᐃⵠ.ΔᐃᐃⵠⵠⵠΔ) {
			if (this.ᐃⲆⲆᐃⵠⵠΔ.ᐃᐃⵠ() && false == this.ᐃⲆⲆᐃⵠⵠΔ.ᐃΔⲆ) this.action -= ⵠᐃᐃⵠ.ΔᐃᐃⵠⵠⵠΔ;
			ᐃ.globalAlpha = .6 - this.ᐃⲆⲆᐃⵠⵠΔ.ⲆᐃΔ;
			var ⵠΔ = Ⲇⵠ[ⵠ.ΔᐃᐃⵠⵠⵠΔ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ΔΔᐃᐃ, -ⵠΔ.height / ΔⲆᐃⲆ);
			ᐃ.globalAlpha = 1
		}
		if (this.action & ⵠᐃᐃⵠ.ΔΔⵠⵠ) {
			if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == ⲆⲆⲆΔᐃ) this.action -= ⵠᐃᐃⵠ.ΔΔⵠⵠ;
			ᐃ.globalAlpha = .6 - this.ᐃⲆⵠ.ⲆᐃΔ;
			if (this.ⲆⵠΔΔᐃⵠΔ) {
				var ⵠΔ = Ⲇⵠ[ⵠ.ᐃⵠⵠⵠⵠΔⵠ];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2)
			} else {
				var ⵠΔ = ᐃⲆΔΔᐃⵠⲆ(this.ⵠⲆΔΔ, Ⲇⵠ[ⵠ.ᐃᐃᐃΔⲆᐃᐃ][this.ⵠⲆΔΔ][0], ᐃⵠΔΔⵠΔΔⵠΔ);
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠΔ.width / 4, ⵠΔ.height / ᐃΔⲆΔⲆ, -ⵠΔ.width / ᐃⲆᐃⵠ, -ⵠΔ.height / 2)
			}
			ᐃ.globalAlpha = 1
		}
		if (this.action & ⵠᐃᐃⵠ.ΔⵠᐃⲆⵠ) {
			this.freeze.ᐃᐃⵠ() && false == this.freeze.ᐃΔⲆ && (this.action -= ⵠᐃᐃⵠ.ΔⵠᐃⲆⵠ);
			ᐃ.globalAlpha = .6 - this.freeze.ⲆᐃΔ;
			var ⵠΔ = ᐃⲆΔΔᐃⵠⲆ(this.ⵠⲆΔΔ, Ⲇⵠ[ⵠ.ᐃᐃᐃΔⲆᐃᐃ][this.ⵠⲆΔΔ][ⲆᐃⲆ], ⵠⲆⵠⵠⲆⲆᐃⵠΔ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠΔ.width / 4, ⵠΔ.height / 4, -ⵠΔ.width / Δⵠᐃᐃ, -ⵠΔ.height / 2);
			ᐃ.globalAlpha = ⲆΔᐃ
		}
		if (this.action & ⵠᐃᐃⵠ.ΔⲆⲆᐃⲆᐃⲆ) {
			if (this.ⲆΔⲆⲆᐃⵠⵠ.ᐃᐃⵠ() && this.ⲆΔⲆⲆᐃⵠⵠ.ᐃΔⲆ == ⵠᐃᐃⵠΔ) this.action -= ⵠᐃᐃⵠ.ΔⲆⲆᐃⲆᐃⲆ;
			ᐃ.globalAlpha = .6 - this.ⲆΔⲆⲆᐃⵠⵠ.ⲆᐃΔ;
			if (this.ⲆⵠΔΔᐃⵠΔ) {
				var ⵠΔ = Ⲇⵠ[ⵠ.ⲆΔΔᐃΔΔⲆ];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ⲆⲆᐃⲆ, -ⵠΔ.height / 2)
			} else {
				var ⵠΔ = ᐃⲆΔΔᐃⵠⲆ(this.ⵠⲆΔΔ, Ⲇⵠ[ⵠ.ᐃᐃᐃΔⲆᐃᐃ][this.ⵠⲆΔΔ][0], ΔⵠⲆⵠⲆⵠᐃΔⲆ);
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠΔ.width / ΔⵠⲆᐃ, ⵠΔ.height / 4, -ⵠΔ.width / 2, -ⵠΔ.height / 2)
			}
			ᐃ.globalAlpha = 1
		}
		ΔⵠᐃⵠᐃΔⵠⲆΔ(this.ΔⲆⲆⲆᐃ);
		if (ᐃΔⵠΔ === ΔⲆⲆⲆⲆⲆⲆ) {
			if (this.action & ⵠᐃᐃⵠ.ΔᐃⵠⵠᐃΔⲆ) ΔΔ += this.attack.ⲆᐃΔ * 15;
			ⲆᐃⲆⵠ(ⵠ.ᐃΔᐃⵠⲆ, ⵠⲆⲆΔ, -ⵠⲆⲆΔ.width / ΔⲆᐃⲆ - Ⲇ * 26, -ⵠⲆⲆΔ.height / 2 + Ⲇ * (31 + ΔΔⵠ + ΔΔ));
			if (ⵠ.ⵠΔⲆⲆΔ <= ᐃᐃᐃΔⲆ) ΔⵠⵠⲆᐃ(ᐃᐃᐃΔⲆ, ⵠⵠⵠᐃΔ, -ⵠⵠⵠᐃΔ.width / ⲆⵠⵠⲆ - 26 * Ⲇ, -ⵠⵠⵠᐃΔ.height / ΔⵠⲆⵠⲆ + (27 + ΔΔⵠ + ΔΔ) * Ⲇ);
			else if (ⵠ.ᐃⲆⲆⲆᐃ !== ᐃᐃᐃΔⲆ) ⵠΔᐃΔΔ(ᐃᐃᐃΔⲆ, this.ⵠⲆΔΔ, ⵠⵠⵠᐃΔ, -ⵠⵠⵠᐃΔ.width / ᐃΔⲆΔⲆ - Ⲇ * 26, -ⵠⵠⵠᐃΔ.height / 4 + Ⲇ * (27 + ΔΔⵠ + ΔΔ));
			else ⲆᐃⲆⵠ(ᐃᐃᐃΔⲆ, ⵠⵠⵠᐃΔ, -ⵠⵠⵠᐃΔ.width / ⲆⲆⵠᐃ - Ⲇ * 26, -ⵠⵠⵠᐃΔ.height / 2 + Ⲇ * (27 + ΔΔⵠ + ΔΔ));
			ⲆᐃⲆⵠ(ⵠ.ᐃΔᐃⵠⲆ, ⵠⲆⲆΔ, -ⵠⲆⲆΔ.width / ΔᐃΔⲆ + Ⲇ * 26, -ⵠⲆⲆΔ.height / 2 + Ⲇ * (31 + ΔΔⵠ + ΔΔ));
			if (ⵠ.ⵠΔⲆⲆΔ <= ᐃᐃᐃΔⲆ) ΔⵠⵠⲆᐃ(ᐃᐃᐃΔⲆ, ⵠⵠⵠᐃΔ, -ⵠⵠⵠᐃΔ.width / 4 + 26 * Ⲇ, -ⵠⵠⵠᐃΔ.height / ΔΔᐃᐃⲆ + Ⲇ * (27 + ΔΔⵠ + ΔΔ));
			else if (ᐃᐃᐃΔⲆ !== ⵠ.ᐃⲆⲆⲆᐃ) ⵠΔᐃΔΔ(ᐃᐃᐃΔⲆ, this.ⵠⲆΔΔ, ⵠⵠⵠᐃΔ, -ⵠⵠⵠᐃΔ.width / 4 + 26 * Ⲇ, -ⵠⵠⵠᐃΔ.height / 4 + (27 + ΔΔⵠ + ΔΔ) * Ⲇ);
			else ⲆᐃⲆⵠ(ᐃᐃᐃΔⲆ, ⵠⵠⵠᐃΔ, -ⵠⵠⵠᐃΔ.width / ΔⲆᐃⲆ + 26 * Ⲇ, -ⵠⵠⵠᐃΔ.height / ΔΔᐃᐃ + Ⲇ * (27 + ΔΔⵠ + ΔΔ));
			ⵠⲆᐃⵠⲆᐃᐃΔⲆ(this.right, ⲆΔⵠΔ, ΔΔⵠ + ΔΔ)
		}
		ᐃ.restore();
		if ((Settings.ShowHoodNames.enabled || ⵠ.ᐃΔΔᐃⵠ !== this.ΔⲆⲆⲆᐃ) && ⵠ.ΔⵠΔⲆⵠ !== this.ΔⲆⲆⲆᐃ) {
			if (this.ⵠⲆⵠΔⵠ > 0) {
				if (!this.ΔⵠⵠΔ.ⲆᐃⵠΔᐃⵠⲆ) this.ΔⵠⵠΔ.ⲆᐃⵠΔᐃⵠⲆ = ⲆΔⵠⵠⵠ(Ⲇ, this.ΔⵠⵠΔ.ⲆⵠΔⵠΔ, 20, Δ[393], Δ[287], 2, null, null, 300 * Ⲇ);
				var ⵠΔ = this.ΔⵠⵠΔ.ⲆᐃⵠΔᐃⵠⲆ
			} else {
				!this.ΔⵠⵠΔ.label && (this.ΔⵠⵠΔ.label = ⲆΔⵠⵠⵠ(Ⲇ, this.ΔⵠⵠΔ.ⲆⵠΔⵠΔ, 20, "red", "orange", 2, null, null, Ⲇ * 300));
				var ⵠΔ = this.ΔⵠⵠΔ.label
			}
			ⲆⲆⲆ.ⵠⵠⲆ == ⵠ.ⵠᐃⲆ && (ᐃ.globalAlpha = .5);
			var ΔΔ = Math.floor(-ⵠΔ.width / ᐃᐃᐃᐃ);
			var ΔΔⵠ = Math.floor(-ⵠΔ.height / ᐃΔⲆⵠ - 70 * Ⲇ);
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ΔΔⵠ);
			if (this.ΔⵠⵠΔ.level > 0) {
				var ΔⲆⵠⲆ = ΔΔ + ⵠΔ.width + 5;
				ⵠΔ = Ⲇⵠ[ⵠ.ⲆᐃⲆⲆⵠⵠⲆ];
				if (ⲆᐃⵠΔⵠ === ⲆⲆⲆΔⵠⲆⲆ[this.ΔⵠⵠΔ.level]) ⲆⲆⲆΔⵠⲆⲆ[this.ΔⵠⵠΔ.level] = ⲆΔⵠⵠⵠ(Ⲇ, "[" + this.ΔⵠⵠΔ.level + "]", 20, "darkorange", Δ[287], 2, null, null, 50 * Ⲇ);
				ᐃΔΔⲆ(ᐃ, ⲆⲆⲆΔⵠⲆⲆ[this.ΔⵠⵠΔ.level], ΔⲆⵠⲆ, ΔΔⵠ)
			} // LEVEL
			ᐃ.globalAlpha = ⲆⵠΔⲆ
		} else {
			var ΔΔⵠ = Math.floor(-70 * Ⲇ);
			var ΔΔ = Math.floor(Ⲇⵠ[ⵠ.ᐃΔᐃᐃⲆΔᐃ].width / 1.5)
		}
		if (ⵠⵠⵠ.ⵠⵠᐃⲆᐃᐃᐃ(this.ΔᐃᐃⲆ)) {
			if (ⵠⵠⵠ.ΔΔΔᐃΔ[ⲆΔⵠΔ] == this.ΔᐃᐃⲆ) var ⵠΔ = Ⲇⵠ[ⵠ.ᐃⲆⲆⲆᐃΔΔ];
			else var ⵠΔ = Ⲇⵠ[ⵠ.ᐃΔᐃᐃⲆΔᐃ];
			ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ - ⵠΔ.width - ⲆⲆⲆᐃᐃ, ΔΔⵠ - 6)
		}
		ᐃ.restore()
	}

	function ΔΔᐃⵠⵠΔⵠΔᐃ() {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + this.x, ⵠⵠⵠ.ᐃⵠⲆ.y + this.y);
		if (ⲆⲆⵠⲆ < this.text.length) {
			for (var Δᐃ = 0; this.text.length > Δᐃ && Δᐃ < ᐃⲆᐃⵠ; Δᐃ++) {
				if (!this.label[Δᐃ]) {
					this.label[Δᐃ] = ⲆᐃΔⵠΔⵠΔᐃⲆ(Ⲇ, this.text[Δᐃ]);
					this.ⵠᐃⲆⲆΔᐃⵠ[Δᐃ] = ⵠᐃΔ;
					this.ⵠⵠΔⲆⵠᐃⲆ[Δᐃ] = 0
				}
				1 === Δᐃ && (this.ⵠⵠΔⲆⵠᐃⲆ[0] = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(this.ⵠⲆᐃⵠⵠⵠⵠ) * 30)
			}
			this.ⵠᐃⲆⲆΔᐃⵠ[0] += ΔᐃⲆⲆ;
			if (this.text.length > ᐃⵠⵠ) {
				this.ⵠⲆᐃⵠⵠⵠⵠ = Math.min(this.ⵠⲆᐃⵠⵠⵠⵠ + ΔᐃⲆⲆ, ⵠΔΔ);
				if (1 < this.ⵠᐃⲆⲆΔᐃⵠ[0] && this.ⵠⲆᐃⵠⵠⵠⵠ > .5) this.ⵠᐃⲆⲆΔᐃⵠ[ⲆⵠΔⲆ] += ΔᐃⲆⲆ
			}
			for (var Δᐃ = ⵠΔⵠⲆ; this.text.length > Δᐃ && ΔⲆⲆⵠ > Δᐃ; Δᐃ++) {
				var ΔⵠΔᐃᐃ = this.ⵠᐃⲆⲆΔᐃⵠ[Δᐃ];
				if (ΔⵠΔᐃᐃ > ⵠᐃΔ) {
					if (.25 > ΔⵠΔᐃᐃ) ᐃ.globalAlpha = ΔᐃΔΔ * ΔⵠΔᐃᐃ;
					else if (3.75 < ΔⵠΔᐃᐃ) ᐃ.globalAlpha = Math.max(4 * (ᐃᐃⲆⵠ - ΔⵠΔᐃᐃ), 0);
					else ᐃ.globalAlpha = 1;
					ᐃΔΔⲆ(ᐃ, this.label[Δᐃ], -this.label[Δᐃ].width / ⲆⲆΔΔ, -this.ⵠⵠΔⲆⵠᐃⲆ[Δᐃ] + -this.label[Δᐃ].height / Ⲇⵠᐃⵠ - Ⲇ * 110)
				}
			}
			4 < this.ⵠᐃⲆⲆΔᐃⵠ[ᐃⲆⵠΔ] && (this.ⵠᐃⲆⲆΔᐃⵠ.shift(), this.text.shift(), this.ⵠⵠΔⲆⵠᐃⲆ.shift(), this.label.shift(), this.ⵠⲆᐃⵠⵠⵠⵠ = 0)
		}
		ᐃ.restore()
	}
	var ⵠⲆⵠᐃⲆⲆⵠ = 0;
	const ⵠΔΔᐃᐃⲆΔ = 14676032;
	const ΔᐃΔΔᐃᐃⲆ = ⵠΔΔᐃᐃⲆΔ["ⵠᐃⵠⲆⵠⵠⵠ"];
	const ΔⵠΔⵠ = `const ΔⲆⵠⲆⵠⵠⵠ = (typeof ⲆⲆⵠⲆⲆΔⲆ === "${ΔᐃΔΔᐃᐃⲆ}") ? 1 : 0; return ΔⲆⵠⲆⵠⵠⵠ;`;

	function ⲆⲆⵠⲆⲆΔⲆ() {
		ΔᐃΔΔᐃᐃⲆ;
		ⵠΔΔᐃᐃⲆΔ();
		return ΔⵠΔⵠ
	}
	const ΔⲆⵠⲆⵠⵠⵠ = 7597155;
	const ΔᐃΔᐃⲆⵠΔ = new Function(ⲆⲆⵠⲆⲆΔⲆ + ΔⵠΔⵠ);
	const ᐃᐃᐃⲆ = 9580495;
	if (ΔᐃΔᐃⲆⵠΔ(ΔⲆⵠⲆⵠⵠⵠ, ᐃᐃᐃⲆ) === 1) {
		const ⵠΔΔᐃᐃⲆΔ = Math.floor;
		let ΔⵠΔⵠ = 0;
		const ΔᐃΔΔᐃᐃⲆ = function(ΔᐃΔΔᐃᐃⲆ) {
			for (let ⵠᐃⵠⲆⵠⵠⵠ = 0; ⵠᐃⵠⲆⵠⵠⵠ < 6598; ⵠᐃⵠⲆⵠⵠⵠ++) ΔⵠΔⵠ += ⵠᐃⵠⲆⵠⵠⵠ;
			return ⵠΔΔᐃᐃⲆΔ(ΔᐃΔΔᐃᐃⲆ)
		};
		Math.floor = ΔᐃΔΔᐃᐃⲆ
	}

	function ⵠⵠⵠᐃᐃⵠⲆ(ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠᐃ, ΔⲆᐃ, ΔΔΔⲆ, ⵠⵠⲆⲆ) {
		if (ⵠⵠⲆⲆ === undefined) ⵠⵠⲆⲆ = ΔᐃΔ;
		for (var ΔΔᐃΔ = ΔΔΔⲆ; ⵠⵠⲆⲆ <= ΔΔᐃΔ; ΔΔᐃΔ--) {
			for (var Δᐃ = ⲆᐃΔⵠ; ᐃⲆΔΔ >= Δᐃ; Δᐃ++) {
				for (var ᐃΔⵠⵠ = ⵠⲆᐃⵠ; ⲆⲆΔᐃ >= ᐃΔⵠⵠ; ᐃΔⵠⵠ++) {
					var ΔⲆⵠΔ = ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ];
					if (!ΔⲆⵠΔ || !ΔⲆⵠΔ[ΔⲆᐃ]) continue;
					var ᐃΔⲆ = ΔⲆⵠΔ[ΔⲆᐃ][ΔΔᐃΔ];
					if (ᐃΔⲆ === ⲆΔⲆⵠⲆ) continue;
					for (var ⲆⲆⲆΔ = 0; ᐃΔⲆ.length > ⲆⲆⲆΔ; ⲆⲆⲆΔ++) {
						var ᐃⲆⵠⲆ = ᐃΔⲆ[ⲆⲆⲆΔ];
						var ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time][ΔΔᐃΔ];
						var ⵠᐃⵠⵠⵠΔⵠ = (ⵠⲆⵠᐃⲆⲆⵠ + ⲆΔⲆΔ * (Δᐃ + ᐃΔⵠⵠ)) % 60;
						var ΔⵠΔᐃᐃ = 30 > ⵠᐃⵠⵠⵠΔⵠ ? ⵠᐃⵠⵠⵠΔⵠ / 30 : ᐃΔⵠΔ - (ⵠᐃⵠⵠⵠΔⵠ - 30) / 30;
						var Δⵠᐃ = (ΔΔⲆΔ + .9 * ΔⵠΔᐃᐃ / 30) * -ⵠΔ.width;
						var ⲆΔΔ = -ⵠΔ.height * (1 + .9 * ΔⵠΔᐃᐃ / 30);
						ⵠᐃⵠⵠⵠΔⵠ = (ⵠⲆⵠᐃⲆⲆⵠ + (Δᐃ + ᐃΔⵠⵠ) * 7) % 60;
						ΔⵠΔᐃᐃ = ⵠᐃⵠⵠⵠΔⵠ < 30 ? ⵠᐃⵠⵠⵠΔⵠ / 30 : ᐃⵠⵠ - (ⵠᐃⵠⵠⵠΔⵠ - 30) / 30;
						var ΔⵠⲆⵠ = ᐃ.globalAlpha;
						ᐃ.globalAlpha = ΔⵠⲆⵠ * (.9 + ΔⵠΔᐃᐃ * .1);
						ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃⲆⵠⲆ.x - Δⵠᐃ / ⵠᐃⵠⲆ, ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃⲆⵠⲆ.y - ⲆΔΔ / ⵠⲆⵠΔ, Δⵠᐃ, ⲆΔΔ);
						ᐃ.globalAlpha = ΔⵠⲆⵠ
					}
				}
			}
		}
	}

	function ⲆᐃᐃΔⵠⲆΔ(ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠᐃ, ΔⲆᐃ, ΔΔΔⲆ, ⵠⵠⲆⲆ) {
		if (ⵠⵠⲆⲆ === undefined) ⵠⵠⲆⲆ = ΔᐃΔ;
		ⲆⲆⲆ.Δᐃⵠⵠ[ⵠᐃ].ᐃᐃⵠ();
		for (var ΔΔᐃΔ = ΔΔΔⲆ; ΔΔᐃΔ >= ⵠⵠⲆⲆ; ΔΔᐃΔ--) {
			for (var Δᐃ = ⲆᐃΔⵠ; ᐃⲆΔΔ >= Δᐃ; Δᐃ++) {
				for (var ᐃΔⵠⵠ = ⵠⲆᐃⵠ; ⲆⲆΔᐃ >= ᐃΔⵠⵠ; ᐃΔⵠⵠ++) {
					var ΔⲆⵠΔ = ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ];
					if (!ΔⲆⵠΔ || !ΔⲆⵠΔ[ΔⲆᐃ]) continue;
					var ᐃΔⲆ = ΔⲆⵠΔ[ΔⲆᐃ][ΔΔᐃΔ];
					if (ᐃΔⲆ === ΔⵠΔⲆⲆ) continue;
					for (var ⲆⲆⲆΔ = 0; ⲆⲆⲆΔ < ᐃΔⲆ.length; ⲆⲆⲆΔ++) {
						var ᐃⲆⵠⲆ = ᐃΔⲆ[ⲆⲆⲆΔ];
						if (ᐃⲆⵠⲆ.ᐃᐃⵠ) {
							ᐃⲆⵠⲆ.ᐃⲆⵠ.ᐃᐃⵠ() && ᐃⲆⵠⲆ.ᐃⲆⵠ.ᐃΔⲆ == false && (ᐃⲆⵠⲆ.ᐃᐃⵠ = ΔΔᐃⵠᐃ);
							var ⲆᐃΔ = 600 * ((1 - ᐃⲆⵠⲆ.ᐃⲆⵠ.ⲆᐃΔ) * ΔᐃⲆⲆ) * Ⲇ;
							var ΔΔ = Math.sin(ᐃⲆⵠⲆ.angle) * ⲆᐃΔ;
							var ΔΔⵠ = Math.cos(ᐃⲆⵠⲆ.angle) * ⲆᐃΔ
						} else {
							var ΔΔ = 0;
							var ΔΔⵠ = 0
						}
						var ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time][ΔΔᐃΔ];
						var Δⵠᐃ = -ⵠΔ.width * ⲆⲆⲆ.Δᐃⵠⵠ[ⵠᐃ].ⲆᐃΔ;
						var ⲆΔΔ = -ⵠΔ.height * ⲆⲆⲆ.Δᐃⵠⵠ[ⵠᐃ].ⲆᐃΔ;
						ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃⲆⵠⲆ.x - Δⵠᐃ / 2 + ΔΔ, ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃⲆⵠⲆ.y - ⲆΔΔ / 2 + ΔΔⵠ, Δⵠᐃ, ⲆΔΔ)
					}
				}
			}
		}
	}
	var ⵠⲆΔⵠΔⲆΔ = [];
	for (var Δᐃ = ⲆⲆᐃΔ; Δᐃ < ⵠⲆⲆⵠⲆ; Δᐃ++) {
		var ⵠᐃⵠ = ⵠⵠⵠΔ;
		.25 > Math.random() && (ⵠᐃⵠ = 0);
		ⵠⲆΔⵠΔⲆΔ.push(ⵠᐃⵠ)
	}
	ⲆⲆΔⵠΔ = 1;

	function ⲆⵠⲆⲆⵠᐃⵠⵠⲆ(ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠᐃ, ΔⲆᐃ, ΔΔΔⲆ, ⵠⵠⲆⲆ, ⲆΔⵠⵠΔ) {
		if (ⵠΔᐃᐃⵠ === ⵠⵠⲆⲆ) ⵠⵠⲆⲆ = 0;
		for (var ΔΔᐃΔ = ΔΔΔⲆ; ⵠⵠⲆⲆ <= ΔΔᐃΔ; ΔΔᐃΔ--) {
			for (var Δᐃ = ⲆᐃΔⵠ; Δᐃ <= ᐃⲆΔΔ; Δᐃ++) {
				for (var ᐃΔⵠⵠ = ⵠⲆᐃⵠ; ᐃΔⵠⵠ <= ⲆⲆΔᐃ; ᐃΔⵠⵠ++) {
					var ΔⲆⵠΔ = ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ];
					if (ΔⲆⵠΔ === ᐃⵠⲆⵠⲆ || undefined === ΔⲆⵠΔ[ΔⲆᐃ]) continue;
					var ᐃΔⲆ = ΔⲆⵠΔ[ΔⲆᐃ][ΔΔᐃΔ];
					if (undefined === ᐃΔⲆ) continue;
					for (var ⲆⲆⲆΔ = 0; ᐃΔⲆ.length > ⲆⲆⲆΔ; ⲆⲆⲆΔ++) {
						var ᐃⲆⵠⲆ = ᐃΔⲆ[ⲆⲆⲆΔ];
						if (ᐃⲆⵠⲆ.ᐃᐃⵠ) {
							ᐃⲆⵠⲆ.ᐃⲆⵠ.ᐃᐃⵠ() && false == ᐃⲆⵠⲆ.ᐃⲆⵠ.ᐃΔⲆ && (ᐃⲆⵠⲆ.ᐃᐃⵠ = ᐃⲆⵠⵠᐃ);
							var ⲆᐃΔ = Ⲇ * (ΔᐃⲆⲆ * (ΔⵠⲆ - ᐃⲆⵠⲆ.ᐃⲆⵠ.ⲆᐃΔ) * 600);
							var ΔΔ = ⲆᐃΔ * Math.sin(ᐃⲆⵠⲆ.angle);
							var ΔΔⵠ = ⲆᐃΔ * Math.cos(ᐃⲆⵠⲆ.angle)
						} else {
							var ΔΔ = ΔΔⲆⲆ;
							var ΔΔⵠ = 0
						}
						for (var ᐃᐃΔΔⵠ = ΔᐃΔ; ΔⲆⲆⵠᐃⵠΔ[ΔΔᐃΔ].ΔⲆΔⵠ > ᐃᐃΔΔⵠ; ᐃᐃΔΔⵠ++) {
							if (ⲆᐃᐃⲆΔ !== ⲆⲆⲆ.ⵠⵠΔᐃⲆ[ᐃᐃΔΔⵠ].ⵠⲆᐃⵠᐃ) {
								ⲆⲆⲆ.ⵠⵠΔᐃⲆ[ᐃᐃΔΔⵠ].ᐃᐃⵠ();
								ⲆⲆⲆ.ⵠⵠΔᐃⲆ[ᐃᐃΔΔⵠ].ⵠⲆᐃⵠᐃ = ⲆᐃᐃⲆΔ
							}
							var ⵠΔ = Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠ][ⲆⲆⲆ.time][ΔⲆⲆⵠᐃⵠΔ[ΔΔᐃΔ].ⵠΔΔⲆ[ᐃᐃΔΔⵠ].ΔⲆᐃ];
							var Δⵠᐃ = ⲆⲆⲆ.ⵠⵠΔᐃⲆ[ᐃᐃΔΔⵠ].ⲆᐃΔ * -ⵠΔ.width;
							var ⲆΔΔ = -ⵠΔ.height * ⲆⲆⲆ.ⵠⵠΔᐃⲆ[ᐃᐃΔΔⵠ].ⲆᐃΔ;
							ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃⲆⵠⲆ.x - Δⵠᐃ / 4 + ΔΔ + ΔⲆⲆⵠᐃⵠΔ[ΔΔᐃΔ].ⵠΔΔⲆ[ᐃᐃΔΔⵠ].x, ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃⲆⵠⲆ.y - ⲆΔΔ / 4 + ΔΔⵠ + ΔⲆⲆⵠᐃⵠΔ[ΔΔᐃΔ].ⵠΔΔⲆ[ᐃᐃΔΔⵠ].y, Δⵠᐃ / 2, ⲆΔΔ / ⵠᐃⵠⲆ)
						}
					}
				}
			}
		}
	}

	function ⲆΔΔⵠᐃ(ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠᐃ, ΔⲆᐃ, ΔΔΔⲆ, ⵠⵠⲆⲆ, ⲆΔⵠⵠΔ) {
		if (ᐃⵠⲆⵠⲆ === ⵠⵠⲆⲆ) ⵠⵠⲆⲆ = ᐃΔΔ;
		for (var ΔΔᐃΔ = ΔΔΔⲆ; ⵠⵠⲆⲆ <= ΔΔᐃΔ; ΔΔᐃΔ--) {
			for (var Δᐃ = ⲆᐃΔⵠ; ᐃⲆΔΔ >= Δᐃ; Δᐃ++) {
				for (var ᐃΔⵠⵠ = ⵠⲆᐃⵠ; ᐃΔⵠⵠ <= ⲆⲆΔᐃ; ᐃΔⵠⵠ++) {
					if (ⲆΔⵠⵠΔ > Ⲇᐃⵠⵠ && ⵠⲆΔⵠΔⲆΔ[(Δᐃ + ᐃΔⵠⵠ * ⲆΔⵠⵠΔ) % ⵠⲆΔⵠΔⲆΔ.length] === 1) continue;
					var ΔⲆⵠΔ = ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ];
					if (ΔⲆⵠΔ === ΔᐃᐃⵠⲆ || undefined === ΔⲆⵠΔ[ΔⲆᐃ]) continue;
					var ᐃΔⲆ = ΔⲆⵠΔ[ΔⲆᐃ][ΔΔᐃΔ];
					if (ⲆⲆⲆⲆⲆ === ᐃΔⲆ) continue;
					for (var ⲆⲆⲆΔ = 0; ᐃΔⲆ.length > ⲆⲆⲆΔ; ⲆⲆⲆΔ++) {
						var ᐃⲆⵠⲆ = ᐃΔⲆ[ⲆⲆⲆΔ];
						if (ᐃⲆⵠⲆ.ᐃᐃⵠ) {
							if (ᐃⲆⵠⲆ.ᐃⲆⵠ.ᐃᐃⵠ() && ⲆΔΔⵠⵠ == ᐃⲆⵠⲆ.ᐃⲆⵠ.ᐃΔⲆ) {
								ᐃⲆⵠⲆ.ᐃᐃⵠ = ⵠᐃᐃⵠΔ
							}
							var ⲆᐃΔ = Ⲇ * (600 * ((1 - ᐃⲆⵠⲆ.ᐃⲆⵠ.ⲆᐃΔ) * ΔᐃⲆⲆ));
							var ΔΔ = Math.sin(ᐃⲆⵠⲆ.angle) * ⲆᐃΔ;
							var ΔΔⵠ = ⲆᐃΔ * Math.cos(ᐃⲆⵠⲆ.angle)
						} else {
							var ΔΔ = ⵠᐃⵠⵠ;
							var ΔΔⵠ = ⵠᐃⵠⵠ
						}
						var ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time][ΔΔᐃΔ];
						ᐃΔΔⲆ(ᐃ, ⵠΔ, ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃⲆⵠⲆ.x - ⵠΔ.width / (ⲆⲆΔⵠΔ * ⵠΔᐃΔᐃ) + ΔΔ, ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃⲆⵠⲆ.y - ⵠΔ.height / (ⲆᐃᐃΔ * ⲆⲆΔⵠΔ) + ΔΔⵠ, ⵠΔ.width / ⲆⲆΔⵠΔ, ⵠΔ.height / ⲆⲆΔⵠΔ)
					}
				}
			}
		}
	}

	function ⵠΔⲆᐃΔᐃⲆⵠⵠ(ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠᐃ, ΔⲆᐃ, ΔΔΔⲆ, ⵠⵠⲆⲆ, ⲆΔⵠⵠΔ) {
		ⵠⵠⲆⲆ === ⲆⲆΔᐃⵠ && (ⵠⵠⲆⲆ = 0);
		for (var Δᐃ = ⲆᐃΔⵠ; ᐃⲆΔΔ >= Δᐃ; Δᐃ++) {
			for (var ᐃΔⵠⵠ = ⵠⲆᐃⵠ; ᐃΔⵠⵠ <= ⲆⲆΔᐃ; ᐃΔⵠⵠ++) {
				var ΔⲆⵠΔ = ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ];
				if (ΔⲆⵠΔ === ⲆᐃⵠⲆⲆ || ΔⲆⵠΔ[ΔⲆᐃ] === ΔΔᐃⵠΔ) continue;
				var ᐃΔⲆ = ΔⲆⵠΔ[ΔⲆᐃ];
				if (undefined === ᐃΔⲆ) continue;
				if (ᐃΔⲆ.scale === 1) {
					var ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time][ᐃΔⲆ.ᐃⵠⵠΔⲆ];
					ᐃ.save();
					ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃΔⲆ.x, ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃΔⲆ.y);
					ᐃ.rotate(ᐃΔⲆ.angle);
					ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ⲆⵠⲆᐃ, -ⵠΔ.height / ΔᐃΔΔ, ⵠΔ.width / 2, ⵠΔ.height / ΔⲆⲆⵠ);
					ᐃ.restore()
				} else if (ᐃⲆᐃⲆ === ᐃΔⲆ.scale) {
					for (var ΔΔᐃΔ = ⲆⲆᐃΔ; ΔΔᐃΔ < ᐃΔⲆ.ΔⵠΔ.length; ΔΔᐃΔ++) {
						ᐃ.save();
						ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃΔⲆ.x, ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃΔⲆ.y);
						ᐃ.rotate(ᐃΔⲆ.ΔⵠΔ[ΔΔᐃΔ].angle);
						var ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time][ᐃΔⲆ.ΔⵠΔ[ΔΔᐃΔ].ᐃⵠⵠΔⲆ];
						ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ΔⲆΔΔ + ᐃΔⲆ.ΔⵠΔ[ΔΔᐃΔ].x, -ⵠΔ.height / 3 + ᐃΔⲆ.ΔⵠΔ[ΔΔᐃΔ].y, ⵠΔ.width / 1.5, ⵠΔ.height / 1.5);
						ᐃ.restore()
					}
				} else {
					var ⵠΔ = Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time][ᐃΔⲆ.ᐃⵠⵠΔⲆ];
					ᐃ.save();
					ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃΔⲆ.x, ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃΔⲆ.y);
					ᐃ.rotate(ᐃΔⲆ.angle);
					ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ⲆⲆΔΔ, -ⵠΔ.height / 2, ⵠΔ.width, ⵠΔ.height);
					ᐃ.restore()
				}
			}
		}
	}
	ΔⲆⲆⵠᐃⵠΔ = [{
		"ΔⲆΔⵠ": ⲆΔⲆᐃⵠ,
		"ⵠΔΔⲆ": [{
			x: -128,
			y: -ⲆⵠⵠΔⵠ,
			"ΔⲆᐃ": ᐃⲆⵠΔ
		}, {
			x: -86,
			y: -ᐃᐃᐃΔⵠ,
			"ΔⲆᐃ": 1
		}, {
			"ΔⲆᐃ": ΔⲆⲆⵠ,
			y: -74,
			x: -60
		}, {
			x: -22,
			"ΔⲆᐃ": ⵠᐃΔⲆ,
			y: -144
		}, {
			x: -58,
			"ΔⲆᐃ": 0,
			y: 86
		}, {
			"ΔⲆᐃ": ΔᐃΔ,
			x: ᐃΔΔΔ,
			y: -30
		}, {
			x: 65,
			y: -115,
			"ΔⲆᐃ": ⲆΔⲆⵠ
		}, {
			"ΔⲆᐃ": ⲆΔⵠΔ,
			y: -50,
			x: 118
		}, {
			"ΔⲆᐃ": 1,
			y: ⵠᐃⲆᐃᐃ,
			x: 73
		}, {
			y: 79,
			x: 67,
			"ΔⲆᐃ": ⵠΔΔᐃ
		}]
	}, {
		"ΔⲆΔⵠ": ᐃᐃⲆΔΔ,
		"ⵠΔΔⲆ": [{
			"ΔⲆᐃ": ⵠⵠΔᐃ,
			x: -45,
			y: -26
		}, {
			y: 20,
			"ΔⲆᐃ": 2,
			x: -45
		}, {
			"ΔⲆᐃ": 1,
			x: 10,
			y: -60
		}, {
			x: 52,
			y: -ᐃⲆΔΔⲆ,
			"ΔⲆᐃ": 1
		}, {
			y: 45,
			"ΔⲆᐃ": 0,
			x: 14
		}]
	}, {
		"ΔⲆΔⵠ": 3,
		"ⵠΔΔⲆ": [{
			"ΔⲆᐃ": 2,
			y: ᐃⵠᐃⲆ,
			x: -30
		}, {
			y: -38,
			"ΔⲆᐃ": 2,
			x: ⵠᐃᐃⲆⵠ
		}, {
			"ΔⲆᐃ": ΔⲆⲆⵠ,
			x: 37,
			y: 5
		}]
	}, {
		"ΔⲆΔⵠ": 11,
		"ⵠΔΔⲆ": [{
			"ΔⲆᐃ": 2,
			x: -74,
			y: -87
		}, {
			x: -ΔᐃⵠⵠΔⲆΔ,
			y: -10,
			"ΔⲆᐃ": 1
		}, {
			x: -99,
			y: 17,
			"ΔⲆᐃ": ⲆΔᐃΔ
		}, {
			"ΔⲆᐃ": 0,
			x: -66,
			y: 84
		}, {
			"ΔⲆᐃ": ⵠΔᐃ,
			y: 123,
			x: -55
		}, {
			y: 81,
			x: ⵠΔΔΔⵠ,
			"ΔⲆᐃ": 2
		}, {
			x: 52,
			"ΔⲆᐃ": 0,
			y: 50
		}, {
			x: 138,
			y: 9,
			"ΔⲆᐃ": 1
		}, {
			x: 104,
			y: -28,
			"ΔⲆᐃ": 0
		}, {
			"ΔⲆᐃ": 2,
			x: 67,
			y: -56
		}, {
			"ΔⲆᐃ": ⵠᐃⵠⵠ,
			x: 5,
			y: -112
		}]
	}, {
		"ΔⲆΔⵠ": 6,
		"ⵠΔΔⲆ": [{
			"ΔⲆᐃ": 2,
			x: -33,
			y: -66
		}, {
			"ΔⲆᐃ": ⵠⲆᐃ,
			y: ᐃⲆⵠΔΔ,
			x: -58
		}, {
			x: -19,
			y: 44,
			"ΔⲆᐃ": 1
		}, {
			x: 44,
			y: ᐃⵠΔᐃⵠⲆⵠ,
			"ΔⲆᐃ": 0
		}, {
			x: 53,
			"ΔⲆᐃ": 2,
			y: -36
		}, {
			x: 7,
			"ΔⲆᐃ": ⵠᐃⵠⵠ,
			y: -62
		}]
	}, {
		"ΔⲆΔⵠ": ᐃΔΔⵠ,
		"ⵠΔΔⲆ": [{
			x: -19,
			"ΔⲆᐃ": ⲆⵠΔⲆ,
			y: -25
		}, {
			y: ⲆⲆⵠΔᐃ,
			"ΔⲆᐃ": 2,
			x: -29
		}, {
			"ΔⲆᐃ": 0,
			y: ᐃⲆⵠΔⵠ,
			x: ⲆⵠⵠⲆⲆ
		}]
	}];
	var ⲆⲆΔᐃⲆⵠⵠ = 0;
	var ΔⲆⵠⵠⲆⲆⵠ = 0;
	var ᐃⵠⵠⲆᐃⲆⵠ = 0;
	var ⵠⲆⲆⲆⲆΔⵠ = 0;

	function ⲆΔᐃⲆΔᐃΔ(ᐃΔⲆ, ᐃᐃᐃⵠ) {
		ⲆⲆⲆ.transition ? (ᐃ.globalAlpha = ⲆΔⲆⵠ, ᐃΔⲆ.ΔⵠⲆⵠᐃ(ᐃᐃᐃⵠ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? 0 : 1, ᐃ.globalAlpha = 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ, ᐃΔⲆ.ΔⵠⲆⵠᐃ(ᐃᐃᐃⵠ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? 0 : ⲆΔⲆⵠ, ᐃ.globalAlpha = 1) : ᐃΔⲆ.ΔⵠⲆⵠᐃ(ᐃᐃᐃⵠ)
	}

	function ⵠᐃᐃᐃ(ⲆⲆᐃⲆⲆ, ⲆᐃΔⵠⵠ, ⲆⵠΔᐃᐃ, ⲆⵠⵠΔᐃᐃΔ, ⲆᐃⲆᐃΔΔᐃ, ⵠⲆᐃΔⲆΔⵠ, ᐃⵠΔΔⵠΔΔ, ⲆⲆⲆⲆⲆⵠⲆ, ᐃⵠΔⵠⵠⲆⲆ, ᐃⲆⵠᐃΔⵠⵠ) {
		ⲆⲆⲆ.transition ? (ᐃ.globalAlpha = ⵠΔΔ, ⲆⲆᐃⲆⲆ(ⲆᐃΔⵠⵠ, ⲆⵠΔᐃᐃ, ⲆⵠⵠΔᐃᐃΔ, ⲆᐃⲆᐃΔΔᐃ, ⵠⲆᐃΔⲆΔⵠ, ᐃⵠΔΔⵠΔΔ, ⲆⲆⲆⲆⲆⵠⲆ, ᐃⵠΔⵠⵠⲆⲆ, ᐃⲆⵠᐃΔⵠⵠ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⵠΔⵠⲆ : ᐃⲆⲆ, ᐃ.globalAlpha = ⲆΔᐃΔ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ, ⲆⲆᐃⲆⲆ(ⲆᐃΔⵠⵠ, ⲆⵠΔᐃᐃ, ⲆⵠⵠΔᐃᐃΔ, ⲆᐃⲆᐃΔΔᐃ, ⵠⲆᐃΔⲆΔⵠ, ᐃⵠΔΔⵠΔΔ, ⲆⲆⲆⲆⲆⵠⲆ, ᐃⵠΔⵠⵠⲆⲆ, ᐃⲆⵠᐃΔⵠⵠ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⲆⲆⵠⲆ : 1, ᐃ.globalAlpha = ΔΔⲆΔ) : ⲆⲆᐃⲆⲆ(ⲆᐃΔⵠⵠ, ⲆⵠΔᐃᐃ, ⲆⵠⵠΔᐃᐃΔ, ⲆᐃⲆᐃΔΔᐃ, ⵠⲆᐃΔⲆΔⵠ, ᐃⵠΔΔⵠΔΔ, ⲆⲆⲆⲆⲆⵠⲆ, ᐃⵠΔⵠⵠⲆⲆ, ᐃⲆⵠᐃΔⵠⵠ)
	}

	function ⲆΔⵠᐃΔⲆΔⵠᐃ() {
		var ⵠΔⵠⲆΔ = ⵠⵠⵠ.ⵠΔⵠⲆΔ;
		if (ΔᐃΔ === ⵠΔⵠⲆΔ.ΔⵠⲆⲆⵠ) ⵠΔⵠⲆΔ.ΔⵠⵠΔⲆ = Math.max(0, ⵠΔⵠⲆΔ.ΔⵠⵠΔⲆ - ΔᐃⲆⲆ / 10);
		else ⵠΔⵠⲆΔ.ΔⵠⵠΔⲆ = Math.min(ᐃⲆⲆ, ⵠΔⵠⲆΔ.ΔⵠⵠΔⲆ + ΔᐃⲆⲆ / ⵠΔΔΔⵠ);
		var ⲆΔΔⵠⲆ = ⵠΔⵠⲆΔ.ⲆΔΔⵠⲆ;
		for (var Δᐃ = 0; Δᐃ < ⲆΔΔⵠⲆ.length; Δᐃ++) {
			var Ⲇᐃᐃ = ⲆΔΔⵠⲆ[Δᐃ];
			ⵠΔⵠⲆΔ.ᐃᐃⵠ(Ⲇᐃᐃ);
			ᐃᐃⵠⲆⲆⵠⵠ(ⵠ.ᐃⲆΔⲆΔⵠⲆ, Ⲇᐃᐃ.id, ⵠⵠⵠ.ᐃⵠⲆ.x + Ⲇᐃᐃ.x, ⵠⵠⵠ.ᐃⵠⲆ.y + Ⲇᐃᐃ.y, Ⲇᐃᐃ.alpha)
		}
		for (var Δᐃ = ⵠᐃΔ; ⲆΔΔⵠⲆ.length > Δᐃ; Δᐃ++) {
			var Ⲇᐃᐃ = ⲆΔΔⵠⲆ[Δᐃ];
			if (Ⲇᐃᐃ.ᐃⵠᐃⲆⲆ <= 0 || Ⲇᐃᐃ.x > -ⵠⵠⵠ.ᐃⵠⲆ.x + ⲆΔⲆᐃ || -ⵠⵠⵠ.ᐃⵠⲆ.x - ⵠⵠⵠ.ᐃⵠⲆ.w / ᐃΔⲆⵠ > Ⲇᐃᐃ.x || -ⵠⵠⵠ.ᐃⵠⲆ.y + ΔⵠⲆΔ < Ⲇᐃᐃ.y) ⲆΔΔⵠⲆ.splice(Δᐃ, 1)
		}
		var ⵠΔΔⲆ = -ⵠⵠⵠ.ᐃⵠⲆ.y; - 1e3 < ⲆⲆⲆ.ᐃⲆⲆⵠⵠ && ⵠΔⵠⲆΔ.add(ⵠΔΔⲆ)
	}

	function ΔΔΔⲆⲆⲆⲆ(ᐃΔΔᐃⲆ, ⵠᐃᐃⵠⲆ, ⵠΔⲆᐃᐃ, ΔⵠᐃΔ, ⲆΔΔⵠ, ᐃΔⵠᐃ) {
		var w1 = ΔⵠᐃΔ.w1;
		var w2 = ΔⵠᐃΔ.w2;
		var w3 = ΔⵠᐃΔ.w3;
		var ⲆΔΔᐃ = ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃΔΔᐃⲆ - 700;
		var ⲆᐃΔⵠΔ = Math.max(ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠᐃᐃⵠⲆ, 0);
		var ⵠΔᐃⲆᐃ = Math.max(-ⵠⵠⵠ.ᐃⵠⲆ.x + ⲆΔⲆᐃ - ⵠΔⲆᐃᐃ - ᐃⲆᐃᐃΔΔⲆ, ᐃⲆⵠΔ);
		var ΔΔᐃⵠ = ⲆᐃΔⵠΔ;
		var ⵠΔᐃΔⵠ = ⲆΔⲆᐃ - ⲆᐃΔⵠΔ - ⵠΔᐃⲆᐃ;
		if (ᐃΔⵠᐃ) var Δⵠᐃ = ΔⵠᐃΔ.ΔⲆᐃ(w1);
		else var Δⵠᐃ = w1.r;
		var ⵠⲆᐃⲆ = ⲆΔΔᐃ + ⵠΔᐃⲆ.ⵠᐃⵠⵠᐃ;
		var ⵠⲆᐃⲆⲆ = ΔΔᐃⵠ,
			ⵠΔᐃⵠⲆ = ⵠⲆᐃⲆ,
			ᐃᐃⲆΔⲆ = Δⵠᐃ.x + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ,
			Δᐃⵠᐃⵠ = ⵠΔᐃΔⵠ;
		ⵠⲆᐃⲆ += Δⵠᐃ.x + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ - 2;
		var ᐃⲆᐃᐃⲆ = ⵠⲆᐃⲆ;
		if (ᐃΔⵠᐃ) var Δⵠᐃ = ΔⵠᐃΔ.ΔⲆᐃ(w2);
		else var Δⵠᐃ = w2.r;
		var d2 = ⲆΔΔᐃ + ⵠΔᐃⲆ.ΔᐃⲆᐃⵠ - ⵠⲆᐃⲆ + Δⵠᐃ.x;
		var ⲆⲆᐃⲆΔ = ⵠⲆᐃⲆ,
			ΔΔⵠΔᐃ = ΔΔᐃⵠ,
			ΔⲆᐃΔⵠ = d2,
			ᐃⲆᐃⵠᐃ = ⵠΔᐃΔⵠ;
		ⵠⲆᐃⲆ += d2 - 2;
		var ᐃⵠⵠⲆΔ = ⵠⲆᐃⲆ - ⲆⲆᐃⲆ;
		if (ᐃΔⵠᐃ) var Δⵠᐃ = ΔⵠᐃΔ.ΔⲆᐃ(w3);
		else var Δⵠᐃ = w3.r;
		d2 = ⲆΔΔᐃ + ⵠΔᐃⲆ.ᐃΔⵠⵠⲆ - ⵠⲆᐃⲆ + Δⵠᐃ.x;
		if (ⵠⲆᐃⲆ + d2 - 3 > ᐃⵠⵠⲆΔ) {
			var ΔⵠᐃΔⲆ = ⵠΔΔᐃⲆ;
			var ⲆⲆⵠⵠΔ = ⵠⲆᐃⲆ,
				ⵠⵠᐃⲆΔ = ΔΔᐃⵠ,
				ΔᐃᐃΔⲆ = d2,
				ⲆᐃⲆΔΔ = ⵠΔᐃΔⵠ;
			ⵠⲆᐃⲆ += d2 - 2;
			var ⵠⵠⲆΔᐃ = ⵠⲆᐃⲆ
		} else {
			var ΔⵠᐃΔⲆ = ΔⲆΔΔᐃ;
			ⵠⲆᐃⲆ = ᐃⵠⵠⲆΔ;
			var ⵠⵠⲆΔᐃ = -ⲆⲆⲆᐃ
		}
		d2 = ⲆΔΔᐃ + ⵠΔᐃⲆ.ΔⵠⵠⲆΔⵠᐃ - ⵠⲆᐃⲆ;
		if (ⲆⲆⲆ.transition) {
			var ⵠΔⵠΔ = ⲆⲆⲆ.time ? ΔΔⲆΔ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
			ᐃ.fillStyle = ⵠΔⵠΔⲆ(9, 55, 63, 11, 106, 132, ⵠΔⵠΔ)
		} else ᐃ.fillStyle = ⵠ.ᐃⵠΔΔⲆ[ⲆⲆⲆ.time];
		ᐃ.fillRect(ⵠⲆᐃⲆⲆ, ⵠΔᐃⵠⲆ, Δᐃⵠᐃⵠ, ᐃᐃⲆΔⲆ);
		if (ᐃΔⵠᐃ) {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(15, 70, 76, 42, 139, 155, ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⵠ.ᐃⵠΔⵠΔⲆᐃ[ⲆⲆⲆ.time]
		} else {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(9, 55, 63, 11, 106, 132, ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⵠ.ᐃⵠΔΔⲆ[ⲆⲆⲆ.time]
		}
		ᐃ.fillRect(ΔΔⵠΔᐃ, ⲆⲆᐃⲆΔ, ᐃⲆᐃⵠᐃ, ΔⲆᐃΔⵠ);
		if (ΔⵠᐃΔⲆ) {
			if (ᐃΔⵠᐃ) {
				if (ⲆⲆⲆ.transition) {
					var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
					ᐃ.fillStyle = ⵠΔⵠΔⲆ(17, 94, 96, 169, 214, 211, ⵠΔⵠΔ)
				} else ᐃ.fillStyle = ⵠ.ᐃⵠΔᐃⵠⵠⵠ[ⲆⲆⲆ.time]
			} else {
				if (ⲆⲆⲆ.transition) {
					var ⵠΔⵠΔ = ⲆⲆⲆ.time ? Δᐃᐃ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
					ᐃ.fillStyle = ⵠΔⵠΔⲆ(9, 55, 63, 11, 106, 132, ⵠΔⵠΔ)
				} else ᐃ.fillStyle = ⵠ.ᐃⵠΔΔⲆ[ⲆⲆⲆ.time]
			}
			ᐃ.fillRect(ⵠⵠᐃⲆΔ, ⲆⲆⵠⵠΔ, ⲆᐃⲆΔΔ, ΔᐃᐃΔⲆ)
		}
		ⵠⵠΔⵠ.ΔⲆᐃᐃΔ && ᐃΔⵠᐃ && ΔⵠᐃΔ.ⲆΔᐃⲆⵠⵠᐃΔⲆ(ᐃⵠⵠⲆΔ, ⵠⵠⲆΔᐃ, ᐃⲆᐃᐃⲆ, ⲆΔΔᐃ, -ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠⲆᐃⲆⲆ, -ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠⲆᐃⲆⲆ + Δᐃⵠᐃⵠ)
	}

	function ⵠᐃⵠΔΔⲆᐃᐃᐃ() {
		ᐃ.globalAlpha = 1;
		if (ⲆⲆⲆ.transition) var ᐃⲆᐃⵠⵠ = ⲆⲆⲆ.ⵠΔⵠΔ.ᐃᐃⵠ();
		ⲆⲆⲆ.ΔΔΔⵠᐃᐃⵠᐃⵠ(-ⵠⵠⵠ.ᐃⵠⲆ.x, -ⵠⵠⵠ.ᐃⵠⲆ.y);
		ⲆⲆΔᐃⲆⵠⵠ = Math.max(Math.floor(-ⵠⵠⵠ.ᐃⵠⲆ.x / ⲆⲆⲆ.ᐃᐃⲆⲆΔᐃⵠ) - ΔΔⵠΔ, 0);
		ΔⲆⵠⵠⲆⲆⵠ = Math.min(Math.floor((-ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠⵠⵠ.ᐃⵠⲆ.w) / ⲆⲆⲆ.ᐃᐃⲆⲆΔᐃⵠ) + 4, ⲆⲆⲆ.ᐃⵠⲆΔΔ - 1);
		ᐃⵠⵠⲆᐃⲆⵠ = Math.max(Math.floor(-ⵠⵠⵠ.ᐃⵠⲆ.y / ⲆⲆⲆ.ⲆᐃⵠᐃΔⲆΔ) - 3, 0);
		ⵠⲆⲆⲆⲆΔⵠ = Math.min(Math.floor((-ⵠⵠⵠ.ᐃⵠⲆ.y + ⵠⵠⵠ.ᐃⵠⲆ.ⲆΔΔ) / ⲆⲆⲆ.ⲆᐃⵠᐃΔⲆΔ) + ⵠᐃⲆᐃ, ⲆⲆⲆ.ΔᐃⵠⵠⲆ - ⲆⵠΔⲆ);
		ᐃⲆᐃᐃᐃΔⲆ();
		ⵠᐃᐃⲆΔⲆⵠⲆⲆ();
		if (ⵠⵠΔⵠ.ΔⲆᐃᐃΔ && ⲆⲆⲆ.mode !== ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ && ⵠΔᐃⲆ.ⵠΔΔⲆⵠ !== ⲆⲆⲆ.mode && ⵠΔᐃⲆ.ⵠΔⲆⵠᐃΔΔ !== ⲆⲆⲆ.mode) {
			ⲆΔⵠᐃΔⲆΔⵠᐃ();
			ΔΔᐃⵠⲆΔᐃⲆΔ();
			ⵠⵠᐃᐃⲆΔΔΔⲆ()
		}
		if (ⲆⲆⲆ.transition) {
			ᐃⲆᐃⵠⵠ && (ⲆⲆⲆ.transition = false, ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ = ᐃΔΔ, ⲆⲆⲆ.ⵠΔⵠΔ.ᐃΔⲆ = false)
		}
	}

	function ⲆᐃⲆⵠ(ⵠᐃ, ⵠΔ, ΔΔ, ΔΔⵠ) {
		if (ⲆⲆⲆ.transition) {
			ᐃ.globalAlpha = 1;
			ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time], ΔΔ, ΔΔⵠ);
			ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ΔΔⲆⲆ : ΔΔⲆΔ;
			ᐃ.globalAlpha = ΔⵠⲆ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
			ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time], ΔΔ, ΔΔⵠ);
			ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⵠⲆᐃ : ᐃⲆⲆ;
			ᐃ.globalAlpha = ⲆΔᐃ
		} else ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ΔΔⵠ)
	}

	function ⵠΔᐃΔΔ(ΔᐃᐃᐃΔᐃⵠ, ⵠⵠⲆᐃ, ⵠΔ, ΔΔ, ΔΔⵠ) {
		var Δⵠᐃ = ⵠΔ.width;
		var ⲆΔΔ = ⵠΔ.height;
		var w2 = Math.floor(Δⵠᐃ / 2);
		var ᐃᐃⲆᐃⵠ = Math.floor(ⲆΔΔ / ⵠⲆⵠΔ);
		ⲆⲆⲆ.transition ? (ᐃ.globalAlpha = ᐃⲆⲆ, ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ΔᐃᐃᐃΔᐃⵠ][ⵠⵠⲆᐃ][ⲆⲆⲆ.time], ᐃⲆⵠΔ, 0, Δⵠᐃ, ⲆΔΔ, ΔΔ, ΔΔⵠ, w2, ᐃᐃⲆᐃⵠ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? 0 : 1, ᐃ.globalAlpha = 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ, ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ΔᐃᐃᐃΔᐃⵠ][ⵠⵠⲆᐃ][ⲆⲆⲆ.time], 0, 0, Δⵠᐃ, ⲆΔΔ, ΔΔ, ΔΔⵠ, w2, ᐃᐃⲆᐃⵠ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? 0 : 1, ᐃ.globalAlpha = 1) : ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ΔᐃᐃᐃΔᐃⵠ][ⵠⵠⲆᐃ][ⲆⲆⲆ.time], 0, ⵠᐃΔ, Δⵠᐃ, ⲆΔΔ, ΔΔ, ΔΔⵠ, w2, ᐃᐃⲆᐃⵠ)
	}

	function ⲆᐃⲆᐃⲆⵠᐃ() {
		const ⲆΔⵠⵠⲆᐃⵠ = {};
		ⲆΔⵠⵠⲆᐃⵠ.ᐃⵠⵠⲆΔⵠᐃⵠΔ = 0;
		let ⵠⵠΔΔⲆⲆΔ = 0;
		for (let ᐃᐃⲆⵠⲆ in ⲆΔⵠⵠⲆᐃⵠ) ⵠⵠΔΔⲆⲆΔ = ᐃᐃⲆⵠⲆ;
		const ΔΔⵠΔⲆⲆΔ = [];
		const ΔᐃᐃᐃᐃⲆᐃ = 10;
		for (let ᐃᐃⲆⵠⲆ = 0; ᐃᐃⲆⵠⲆ < ΔᐃᐃᐃᐃⲆᐃ + 2; ᐃᐃⲆⵠⲆ++) ΔΔⵠΔⲆⲆΔ.push(ⵠΔΔⲆⲆⵠᐃᐃⵠ.Math.floor(1 + ⵠΔΔⲆⲆⵠᐃᐃⵠ.Math.random() * ΔᐃᐃᐃᐃⲆᐃ));
		let ⲆΔΔΔᐃΔᐃ = "for (let " + ⵠⵠΔΔⲆⲆΔ + " = 0 ; " + ⵠⵠΔΔⲆⲆΔ + " < " + ΔΔⵠΔⲆⲆΔ[0] + " ; " + ⵠⵠΔΔⲆⲆΔ + "++) {";
		for (let ᐃᐃⲆⵠⲆ = 0; ᐃᐃⲆⵠⲆ < ΔΔⵠΔⲆⲆΔ[1]; ᐃᐃⲆⵠⲆ++) ⲆΔΔΔᐃΔᐃ += ΔΔⵠΔⲆⲆΔ[ᐃᐃⲆⵠⲆ] + ";debugger;";
		for (let ᐃᐃⲆⵠⲆ = 0; ᐃᐃⲆⵠⲆ < ΔΔⵠΔⲆⲆΔ[2]; ᐃᐃⲆⵠⲆ++) ⲆΔΔΔᐃΔᐃ += "debugger;";
		ⲆΔΔΔᐃΔᐃ += "}";
		const ⲆⲆⵠᐃⵠᐃⵠⲆⵠ = new ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[66]](ⲆΔΔΔᐃΔᐃ);
		ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]](ⲆᐃⲆᐃⲆⵠᐃ, 10 * 10 * 100);
		ⲆⲆⵠᐃⵠᐃⵠⲆⵠ()
	}
	ⲆᐃⲆᐃⲆⵠᐃ();

	function ᐃᐃΔⲆΔΔΔ(ᐃΔⲆ, ᐃᐃᐃⵠ) {
		ⲆⲆⲆ.transition ? (ᐃ.globalAlpha = 1, ᐃΔⲆ.ᐃⵠⵠⵠⲆ(ᐃᐃᐃⵠ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⵠᐃⵠⵠ : ΔⲆΔᐃ, ᐃ.globalAlpha = 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ, ᐃΔⲆ.ᐃⵠⵠⵠⲆ(ᐃᐃᐃⵠ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? 0 : 1, ᐃ.globalAlpha = ΔⵠⲆ) : ᐃΔⲆ.ᐃⵠⵠⵠⲆ(ᐃᐃᐃⵠ)
	}

	function ᐃΔΔⲆⵠⲆⵠ(ⵠᐃᐃⵠⲆ, ᐃΔΔᐃⲆ, ᐃⲆⲆᐃⵠᐃᐃ, ΔⵠᐃΔ, ⲆΔΔⵠ, ᐃΔⵠᐃ) {
		var w1 = ΔⵠᐃΔ.w1;
		var w2 = ΔⵠᐃΔ.w2;
		var w3 = ΔⵠᐃΔ.w3;
		var ΔΔᐃⵠ = ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠᐃᐃⵠⲆ + 820;
		var ᐃᐃⵠⲆΔ = Math.max(ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃΔΔᐃⲆ, 0);
		var ΔⵠⲆⲆΔ = Math.max(-ⵠⵠⵠ.ᐃⵠⲆ.y + ΔⵠⲆΔ - ᐃⲆⲆᐃⵠᐃᐃ - Δᐃⵠⵠⵠ, 0);
		var ⲆΔΔᐃ = ᐃᐃⵠⲆΔ;
		var ΔᐃⵠⲆⵠ = ΔⵠⲆΔ - ᐃᐃⵠⲆΔ - ΔⵠⲆⲆΔ;
		if (ᐃΔⵠᐃ) var Δⵠᐃ = ΔⵠᐃΔ.ΔⲆᐃ(w1);
		else var Δⵠᐃ = w1.r;
		var ⵠⲆᐃⲆ = ΔΔᐃⵠ + ⵠΔᐃⲆ.ⵠᐃⵠⵠᐃ;
		var ⵠⲆᐃⲆⲆ = ⵠⲆᐃⲆ,
			ⵠΔᐃⵠⲆ = ⲆΔΔᐃ,
			Δᐃⵠᐃⵠ = -Δⵠᐃ.x + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ,
			ᐃᐃⲆΔⲆ = ΔᐃⵠⲆⵠ;
		ⵠⲆᐃⲆ += -Δⵠᐃ.x + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ + ΔᐃΔⲆ;
		var ᐃⲆᐃᐃⲆ = ⵠⲆᐃⲆ;
		if (ᐃΔⵠᐃ) var Δⵠᐃ = ΔⵠᐃΔ.ΔⲆᐃ(w2);
		else var Δⵠᐃ = w2.r;
		var d2 = ΔΔᐃⵠ - ⵠΔᐃⲆ.ΔᐃⲆᐃⵠ - ⵠⲆᐃⲆ - Δⵠᐃ.x;
		var ΔΔⵠΔᐃ = ⵠⲆᐃⲆ,
			ⲆⲆᐃⲆΔ = ⲆΔΔᐃ,
			ᐃⲆᐃⵠᐃ = d2,
			ΔⲆᐃΔⵠ = ΔᐃⵠⲆⵠ;
		ⵠⲆᐃⲆ += d2 + 2;
		var ᐃⵠⵠⲆΔ = ⵠⲆᐃⲆ - 2;
		if (ᐃΔⵠᐃ) var Δⵠᐃ = ΔⵠᐃΔ.ΔⲆᐃ(w3);
		else var Δⵠᐃ = w3.r;
		d2 = ΔΔᐃⵠ - ⵠΔᐃⲆ.ᐃΔⵠⵠⲆ - ⵠⲆᐃⲆ - Δⵠᐃ.x;
		if (ⵠⲆᐃⲆ + d2 < ᐃⵠⵠⲆΔ) {
			var ΔⵠᐃΔⲆ = true;
			var ⵠⵠᐃⲆΔ = ⵠⲆᐃⲆ,
				ⲆⲆⵠⵠΔ = ⲆΔΔᐃ,
				ⲆᐃⲆΔΔ = d2,
				ΔᐃᐃΔⲆ = ΔᐃⵠⲆⵠ;
			ⵠⲆᐃⲆ += d2 + ΔᐃΔⲆ;
			var ⵠⵠⲆΔᐃ = ⵠⲆᐃⲆ
		} else {
			var ΔⵠᐃΔⲆ = ⲆΔⲆⲆΔ;
			ⵠⲆᐃⲆ = ᐃⵠⵠⲆΔ;
			var ⵠⵠⲆΔᐃ = -ⵠΔⲆ
		}
		d2 = ΔΔᐃⵠ - ⵠΔᐃⲆ.ΔⵠⵠⲆΔⵠᐃ - ⵠⲆᐃⲆ;
		if (ⲆⲆⲆ.transition) {
			var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
			ᐃ.fillStyle = ⵠΔⵠΔⲆ(9, 55, 63, 11, 106, 132, ⵠΔⵠΔ)
		} else ᐃ.fillStyle = ⵠ.ᐃⵠΔΔⲆ[ⲆⲆⲆ.time];
		ᐃ.fillRect(ⵠⲆᐃⲆⲆ, ⵠΔᐃⵠⲆ, Δᐃⵠᐃⵠ, ᐃᐃⲆΔⲆ);
		if (ᐃΔⵠᐃ) {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(15, 70, 76, 42, 139, 155, ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⵠ.ᐃⵠΔⵠΔⲆᐃ[ⲆⲆⲆ.time]
		} else {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(9, 55, 63, 11, 106, 132, ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⵠ.ᐃⵠΔΔⲆ[ⲆⲆⲆ.time]
		}
		ᐃ.fillRect(ΔΔⵠΔᐃ, ⲆⲆᐃⲆΔ, ᐃⲆᐃⵠᐃ, ΔⲆᐃΔⵠ);
		if (ΔⵠᐃΔⲆ) {
			if (ᐃΔⵠᐃ) {
				if (ⲆⲆⲆ.transition) {
					var ⵠΔⵠΔ = ⲆⲆⲆ.time ? ⵠΔΔ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
					ᐃ.fillStyle = ⵠΔⵠΔⲆ(17, 94, 96, 169, 214, 211, ⵠΔⵠΔ)
				} else ᐃ.fillStyle = ⵠ.ᐃⵠΔᐃⵠⵠⵠ[ⲆⲆⲆ.time]
			} else {
				if (ⲆⲆⲆ.transition) {
					var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
					ᐃ.fillStyle = ⵠΔⵠΔⲆ(9, 55, 63, 11, 106, 132, ⵠΔⵠΔ)
				} else ᐃ.fillStyle = ⵠ.ᐃⵠΔΔⲆ[ⲆⲆⲆ.time]
			}
			ᐃ.fillRect(ⵠⵠᐃⲆΔ, ⲆⲆⵠⵠΔ, ⲆᐃⲆΔΔ, ΔᐃᐃΔⲆ)
		}
		if (ⵠⵠΔⵠ.ΔⲆᐃᐃΔ && ᐃΔⵠᐃ) ΔⵠᐃΔ.ΔᐃᐃΔΔΔᐃᐃⵠ(ᐃⵠⵠⲆΔ, ⵠⵠⲆΔᐃ, ᐃⲆᐃᐃⲆ, ΔΔᐃⵠ, -ⵠⵠⵠ.ᐃⵠⲆ.y + ⵠΔᐃⵠⲆ, -ⵠⵠⵠ.ᐃⵠⲆ.y + ⵠΔᐃⵠⲆ + ᐃᐃⲆΔⲆ)
	}

	function ᐃΔΔΔⵠᐃΔⲆⲆ() {
		if (ⲆⲆⲆ.transition) {
			var ⵠΔⵠΔ = ⲆⲆⲆ.time ? ⵠΔΔ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
			ᐃ.fillStyle = ⵠΔⵠΔⲆ(ⲆⵠⵠⲆ, 43, 48, 19, 58, 43, ⵠΔⵠΔ)
		} else ᐃ.fillStyle = ⵠ.ⵠᐃΔⲆΔ[ⲆⲆⲆ.time];
		ᐃ.fillRect(0, 0, ⲆΔⲆᐃ, ΔⵠⲆΔ)
	}

	function ᐃⲆᐃᐃᐃΔⲆ() {
		for (var Δᐃ = ⲆⲆⲆ.ⵠⵠᐃⲆ.length - ᐃⲆΔ; Δᐃ >= ⵠΔΔᐃ; Δᐃ--) {
			var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[Δᐃ];
			if (ⲆⲆⲆ.ΔᐃⲆⵠⲆ === ⲆΔΔⵠ.ΔⲆᐃ) {
				var Ⲇⵠⵠ = ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ];
				if (-ⵠⵠⵠ.ᐃⵠⲆ.x >= ⲆΔΔⵠ.x1 - 230 - ⲆΔⲆᐃ && -ⵠⵠⵠ.ᐃⵠⲆ.x <= ⲆΔΔⵠ.x2 + 330 && -ⵠⵠⵠ.ᐃⵠⲆ.y >= ⲆΔΔⵠ.y1 - ΔⵠⲆΔ && ⲆΔΔⵠ.y2 + ᐃᐃⲆⵠΔ >= -ⵠⵠⵠ.ᐃⵠⲆ.y) {
					var ΔⲆⵠⲆ = ⲆΔΔⵠ.x2;
					if (ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ) ΔⲆⵠⲆ -= 610;
					var ᐃⵠᐃⵠ = ⲆΔΔⵠ.x1;
					ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ && (ᐃⵠᐃⵠ += 610);
					var ⵠΔⲆⵠ = ⲆΔΔⵠ.y2;
					ⲆⲆⲆ.ΔᐃⲆⵠⲆ !== ⲆΔΔⵠ.ΔⲆᐃ && (ⵠΔⲆⵠ -= 610);
					var ᐃⵠᐃΔ = ⲆΔΔⵠ.y1;
					if (ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ) ᐃⵠᐃΔ += 610;
					if (ⲆⲆⲆ.transition) {
						var ⵠΔⵠΔ = ⲆⲆⲆ.time ? Δᐃᐃ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
						ᐃ.fillStyle = ⵠΔⵠΔⲆ(Ⲇⵠⵠ.ᐃΔᐃ[0], Ⲇⵠⵠ.ᐃΔᐃ[1], Ⲇⵠⵠ.ᐃΔᐃ[2], Ⲇⵠⵠ.ⵠⵠⲆ[0], Ⲇⵠⵠ.ⵠⵠⲆ[ⵠⲆⲆⲆ], Ⲇⵠⵠ.ⵠⵠⲆ[1], ⵠΔⵠΔ)
					} else ᐃ.fillStyle = Ⲇⵠⵠ.ⲆⲆⵠᐃⵠ[ⲆⲆⲆ.time];
					var ⲆᐃΔⵠΔ = Math.max(ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃⵠᐃⵠ - 2 - 230, Δⵠⵠ);
					var ⵠΔᐃⲆᐃ = Math.max(-ⵠⵠⵠ.ᐃⵠⲆ.x + ⲆΔⲆᐃ - ΔⲆⵠⲆ - 330 - Ⲇⵠᐃⵠ, ⲆⲆᐃΔ);
					var ᐃᐃⵠⲆΔ = Math.max(ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃⵠᐃΔ - 2, ᐃⲆⵠΔ);
					var ΔⵠⲆⲆΔ = Math.max(-ⵠⵠⵠ.ᐃⵠⲆ.y + ΔⵠⲆΔ - ⵠΔⲆⵠ - ⵠᐃΔⲆᐃ - ⵠΔᐃΔᐃ, ⵠⲆⵠ);
					ᐃ.beginPath();
					ᐃ.fillRect(ⲆᐃΔⵠΔ, ᐃᐃⵠⲆΔ, ⲆΔⲆᐃ - ⵠΔᐃⲆᐃ - ⲆᐃΔⵠΔ, ΔⵠⲆΔ - ᐃᐃⵠⲆΔ - ΔⵠⲆⲆΔ)
				}
			}
		}
		for (var Δᐃ = ⲆⲆⲆ.ⵠⵠᐃⲆ.length - 1; 0 <= Δᐃ; Δᐃ--) {
			var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[Δᐃ];
			if (ⲆⲆⲆ.ΔᐃⲆⵠⲆ !== ⲆΔΔⵠ.ΔⲆᐃ) {
				var ΔⲆⵠⲆ = ⲆΔΔⵠ.x2;
				if (ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ) ΔⲆⵠⲆ -= 400;
				var ᐃⵠᐃⵠ = ⲆΔΔⵠ.x1;
				ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ && (ᐃⵠᐃⵠ += 400);
				var ⵠΔⲆⵠ = ⲆΔΔⵠ.y2;
				if (ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ) ⵠΔⲆⵠ -= 300;
				var ᐃⵠᐃΔ = ⲆΔΔⵠ.y1;
				if (ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ) ᐃⵠᐃΔ += 300;
				if ((ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆᐃⵠΔᐃ) === 0 && ΔⲆⵠⲆ - ⲆΔⲆᐃ + 120 <= -ⵠⵠⵠ.ᐃⵠⲆ.x && ΔⲆⵠⲆ + 820 >= -ⵠⵠⵠ.ᐃⵠⲆ.x && -ⵠⵠⵠ.ᐃⵠⲆ.y >= ᐃⵠᐃΔ + 88 - ΔⵠⲆΔ && -ⵠⵠⵠ.ᐃⵠⲆ.y <= ⵠΔⲆⵠ + 50) {
					ΔΔⵠⲆᐃⲆΔ(ΔⲆⵠⲆ, ᐃⵠᐃΔ + 88, ⵠΔⲆⵠ - 88, ⵠⵠⵠ.ΔⵠᐃΔ[ⵠΔⵠⲆ], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆᐃⵠΔᐃ);
					ᐃΔΔⲆⵠⲆⵠ(ΔⲆⵠⲆ, ᐃⵠᐃΔ + 88, ⵠΔⲆⵠ - 88, ⵠⵠⵠ.ΔⵠᐃΔ[0], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆᐃⵠΔᐃ)
				}
				if (ᐃΔΔ === (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆⵠΔⲆΔ) && ᐃⵠᐃⵠ - ⲆΔⲆᐃ - 700 <= -ⵠⵠⵠ.ᐃⵠⲆ.x && -ⵠⵠⵠ.ᐃⵠⲆ.x <= ᐃⵠᐃⵠ - ⵠⵠⵠⲆᐃ && ᐃⵠᐃΔ + 88 - ΔⵠⲆΔ <= -ⵠⵠⵠ.ᐃⵠⲆ.y && ⵠΔⲆⵠ + 50 >= -ⵠⵠⵠ.ᐃⵠⲆ.y) {
					ⲆⲆΔⵠΔΔⵠ(ᐃⵠᐃⵠ, ᐃⵠᐃΔ + 88, ⵠΔⲆⵠ - 88, ⵠⵠⵠ.ΔⵠᐃΔ[1], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆⵠΔⲆΔ);
					ᐃⲆΔΔⵠⵠⲆ(ᐃⵠᐃⵠ, ᐃⵠᐃΔ + 88, ⵠΔⲆⵠ - 88, ⵠⵠⵠ.ΔⵠᐃΔ[ⲆΔᐃ], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆⵠΔⲆΔ)
				}(ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ΔⲆᐃⲆᐃ) === 0 && -ⵠⵠⵠ.ᐃⵠⲆ.x >= ᐃⵠᐃⵠ - 235 - ⲆΔⲆᐃ && -ⵠⵠⵠ.ᐃⵠⲆ.x <= ΔⲆⵠⲆ + 350 && -ⵠⵠⵠ.ᐃⵠⲆ.y >= ⵠΔⲆⵠ - ΔⵠⲆΔ - 275 && ⵠΔⲆⵠ + 490 >= -ⵠⵠⵠ.ᐃⵠⲆ.y && (ᐃⵠᐃΔⲆΔⵠ(ⵠΔⲆⵠ - 230, ᐃⵠᐃⵠ - 230, ΔⲆⵠⲆ + 230, ⵠⵠⵠ.ΔⵠᐃΔ[ᐃⲆᐃⵠ], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ΔⲆᐃⲆᐃ), ΔⲆΔᐃᐃᐃᐃ(ⵠΔⲆⵠ - 230, ᐃⵠᐃⵠ - 230, ΔⲆⵠⲆ + 230, ⵠⵠⵠ.ΔⵠᐃΔ[ⲆⲆᐃⲆ], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ΔⲆᐃⲆᐃ));
				0 === (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ᐃΔᐃᐃᐃ) && ᐃⵠᐃⵠ - 235 - ⲆΔⲆᐃ <= -ⵠⵠⵠ.ᐃⵠⲆ.x && -ⵠⵠⵠ.ᐃⵠⲆ.x <= ΔⲆⵠⲆ + 350 && -ⵠⵠⵠ.ᐃⵠⲆ.y >= ᐃⵠᐃΔ - ΔⵠⲆΔ - 390 && ᐃⵠᐃΔ + 315 >= -ⵠⵠⵠ.ᐃⵠⲆ.y && (ⵠⵠⵠᐃΔΔⲆ(ᐃⵠᐃΔ + 310, ᐃⵠᐃⵠ - 230, ΔⲆⵠⲆ + 230, ⵠⵠⵠ.ΔⵠᐃΔ[3], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ᐃΔᐃᐃᐃ), ΔΔΔⲆⲆⲆⲆ(ᐃⵠᐃΔ + 310, ᐃⵠᐃⵠ - 230, ΔⲆⵠⲆ + 230, ⵠⵠⵠ.ΔⵠᐃΔ[ⵠΔⲆΔΔ], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ᐃΔᐃᐃᐃ))
			}
		}
		for (var Δᐃ = ⲆⲆⲆ.ⵠⵠᐃⲆ.length - ᐃⵠⵠ; Δᐃ >= 0; Δᐃ--) {
			var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[Δᐃ];
			if (ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ) {
				var ΔⲆⵠⲆ = ⲆΔΔⵠ.x2;
				if (ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ) ΔⲆⵠⲆ -= 400;
				var ᐃⵠᐃⵠ = ⲆΔΔⵠ.x1;
				ⲆⲆⲆ.ΔᐃⲆⵠⲆ !== ⲆΔΔⵠ.ΔⲆᐃ && (ᐃⵠᐃⵠ += 400);
				var ⵠΔⲆⵠ = ⲆΔΔⵠ.y2;
				if (ⲆⲆⲆ.ΔᐃⲆⵠⲆ !== ⲆΔΔⵠ.ΔⲆᐃ) ⵠΔⲆⵠ -= 300;
				var ᐃⵠᐃΔ = ⲆΔΔⵠ.y1;
				ⲆⲆⲆ.ΔᐃⲆⵠⲆ !== ⲆΔΔⵠ.ΔⲆᐃ && (ᐃⵠᐃΔ += 300);
				if ((ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆᐃⵠΔᐃ) !== 0 && ΔⲆⵠⲆ - ⲆΔⲆᐃ + 120 <= -ⵠⵠⵠ.ᐃⵠⲆ.x && -ⵠⵠⵠ.ᐃⵠⲆ.x <= ΔⲆⵠⲆ + 820 && ᐃⵠᐃΔ + 88 - ΔⵠⲆΔ <= -ⵠⵠⵠ.ᐃⵠⲆ.y && ⵠΔⲆⵠ + 50 >= -ⵠⵠⵠ.ᐃⵠⲆ.y) {
					ΔΔⵠⲆᐃⲆΔ(ΔⲆⵠⲆ, ᐃⵠᐃΔ + 88, ⵠΔⲆⵠ - 88, ⵠⵠⵠ.ΔⵠᐃΔ[ⲆⲆᐃΔ], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆᐃⵠΔᐃ)
				}
				if ((ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆⵠΔⲆΔ) !== 0 && ᐃⵠᐃⵠ - ⲆΔⲆᐃ - 700 <= -ⵠⵠⵠ.ᐃⵠⲆ.x && ᐃⵠᐃⵠ - ⲆΔⲆΔᐃ >= -ⵠⵠⵠ.ᐃⵠⲆ.x && ᐃⵠᐃΔ + 88 - ΔⵠⲆΔ <= -ⵠⵠⵠ.ᐃⵠⲆ.y && ⵠΔⲆⵠ + 50 >= -ⵠⵠⵠ.ᐃⵠⲆ.y) {
					ⲆⲆΔⵠΔΔⵠ(ᐃⵠᐃⵠ, ᐃⵠᐃΔ + 88, ⵠΔⲆⵠ - 88, ⵠⵠⵠ.ΔⵠᐃΔ[1], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆⵠΔⲆΔ)
				}
				if (ⵠⵠΔᐃ !== (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ΔⲆᐃⲆᐃ) && ᐃⵠᐃⵠ - 235 - ⲆΔⲆᐃ <= -ⵠⵠⵠ.ᐃⵠⲆ.x && ΔⲆⵠⲆ + 350 >= -ⵠⵠⵠ.ᐃⵠⲆ.x && ⵠΔⲆⵠ - ΔⵠⲆΔ - 275 <= -ⵠⵠⵠ.ᐃⵠⲆ.y && -ⵠⵠⵠ.ᐃⵠⲆ.y <= ⵠΔⲆⵠ + 490) {
					ᐃⵠᐃΔⲆΔⵠ(ⵠΔⲆⵠ - 230, ᐃⵠᐃⵠ - 230, ΔⲆⵠⲆ + 230, ⵠⵠⵠ.ΔⵠᐃΔ[ⵠᐃⵠⲆ], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ΔⲆᐃⲆᐃ)
				}
				if (0 !== (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ᐃΔᐃᐃᐃ) && ᐃⵠᐃⵠ - 235 - ⲆΔⲆᐃ <= -ⵠⵠⵠ.ᐃⵠⲆ.x && ΔⲆⵠⲆ + 350 >= -ⵠⵠⵠ.ᐃⵠⲆ.x && ᐃⵠᐃΔ - ΔⵠⲆΔ - 390 <= -ⵠⵠⵠ.ᐃⵠⲆ.y && -ⵠⵠⵠ.ᐃⵠⲆ.y <= ᐃⵠᐃΔ + 315) {
					ⵠⵠⵠᐃΔΔⲆ(ᐃⵠᐃΔ + 310, ᐃⵠᐃⵠ - 230, ΔⲆⵠⲆ + 230, ⵠⵠⵠ.ΔⵠᐃΔ[ᐃⲆᐃⲆ], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ᐃΔᐃᐃᐃ)
				}
			}
		}
		for (var Δᐃ = ⲆⲆⲆ.ⵠⵠᐃⲆ.length - ⲆΔᐃ; Δᐃ >= 0; Δᐃ--) {
			var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[Δᐃ];
			if (ⲆⲆⲆ.ΔᐃⲆⵠⲆ !== ⲆΔΔⵠ.ΔⲆᐃ) {
				var Ⲇⵠⵠ = ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ];
				if (ⲆΔΔⵠ.x1 - 230 - ⲆΔⲆᐃ <= -ⵠⵠⵠ.ᐃⵠⲆ.x && -ⵠⵠⵠ.ᐃⵠⲆ.x <= ⲆΔΔⵠ.x2 + 330 && ⲆΔΔⵠ.y1 - ΔⵠⲆΔ <= -ⵠⵠⵠ.ᐃⵠⲆ.y && ⲆΔΔⵠ.y2 + ᐃⵠⲆⲆⲆ >= -ⵠⵠⵠ.ᐃⵠⲆ.y) {
					var ΔⲆⵠⲆ = ⲆΔΔⵠ.x2;
					if (ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ) {
						if (ⵠᐃΔ === (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆᐃⵠΔᐃ)) ΔⲆⵠⲆ -= 414;
						else ΔⲆⵠⲆ -= 610
					}
					var ᐃⵠᐃⵠ = ⲆΔΔⵠ.x1;
					if (ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ) {
						if ((ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆⵠΔⲆΔ) === 0) ᐃⵠᐃⵠ += 414;
						else ᐃⵠᐃⵠ += 610
					}
					var ⵠΔⲆⵠ = ⲆΔΔⵠ.y2;
					if (ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ) {
						0 === (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ΔⲆᐃⲆᐃ) ? ⵠΔⲆⵠ -= 414 : ⵠΔⲆⵠ -= 610
					}
					var ᐃⵠᐃΔ = ⲆΔΔⵠ.y1;
					if (ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ) {
						if (0 === (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ᐃΔᐃᐃᐃ)) ᐃⵠᐃΔ += 414;
						else ᐃⵠᐃΔ += 610
					}
					if (ⲆⲆⲆ.transition) {
						var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
						ᐃ.fillStyle = ⵠΔⵠΔⲆ(Ⲇⵠⵠ.ᐃΔᐃ[0], Ⲇⵠⵠ.ᐃΔᐃ[1], Ⲇⵠⵠ.ᐃΔᐃ[2], Ⲇⵠⵠ.ⵠⵠⲆ[ⵠⵠΔΔ], Ⲇⵠⵠ.ⵠⵠⲆ[ᐃⲆΔ], Ⲇⵠⵠ.ⵠⵠⲆ[2], ⵠΔⵠΔ)
					} else ᐃ.fillStyle = Ⲇⵠⵠ.ⲆⲆⵠᐃⵠ[ⲆⲆⲆ.time];
					var ⲆᐃΔⵠΔ = Math.max(ⵠⵠⵠ.ᐃⵠⲆ.x + ᐃⵠᐃⵠ - Δⵠᐃᐃ - 230, ⵠᐃΔⲆ);
					var ⵠΔᐃⲆᐃ = Math.max(-ⵠⵠⵠ.ᐃⵠⲆ.x + ⲆΔⲆᐃ - ΔⲆⵠⲆ - 330 - 2, 0);
					var ᐃᐃⵠⲆΔ = Math.max(ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃⵠᐃΔ - 2, ⲆΔⵠΔ);
					var ΔⵠⲆⲆΔ = Math.max(-ⵠⵠⵠ.ᐃⵠⲆ.y + ΔⵠⲆΔ - ⵠΔⲆⵠ - ⵠᐃⵠⲆⵠ - 2, 0);
					ᐃ.beginPath();
					ᐃ.fillRect(ⲆᐃΔⵠΔ, ᐃᐃⵠⲆΔ, ⲆΔⲆᐃ - ⵠΔᐃⲆᐃ - ⲆᐃΔⵠΔ, ΔⵠⲆΔ - ᐃᐃⵠⲆΔ - ΔⵠⲆⲆΔ)
				}
			}
		}
		ⵠⵠΔⵠ.ΔⲆᐃᐃΔ && (ⵠᐃᐃᐃ(ⲆᐃᐃΔⵠⲆΔ, ᐃⵠⵠⲆᐃⲆⵠ, ⵠⲆⲆⲆⲆΔⵠ, ⲆⲆΔᐃⲆⵠⵠ, ΔⲆⵠⵠⲆⲆⵠ, ⵠ.ⲆⲆΔΔΔ, Δ[361], 2), ⵠᐃᐃᐃ(ⲆᐃᐃΔⵠⲆΔ, ᐃⵠⵠⲆᐃⲆⵠ, ⵠⲆⲆⲆⲆΔⵠ, ⲆⲆΔᐃⲆⵠⵠ, ΔⲆⵠⵠⲆⲆⵠ, ⵠ.ⲆᐃᐃⲆⵠ, Δ[361], 2));
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ᐃⵠⵠⲆᐃⲆⵠ, ⵠⲆⲆⲆⲆΔⵠ, ⲆⲆΔᐃⲆⵠⵠ, ΔⲆⵠⵠⲆⲆⵠ, ⵠ.ΔᐃⵠⲆᐃ, Δ[361], ᐃⲆᐃⵠ);
		ⵠⵠΔⵠ.ΔⲆᐃᐃΔ && ⵠᐃᐃᐃ(ⵠΔⲆᐃΔᐃⲆⵠⵠ, ᐃⵠⵠⲆᐃⲆⵠ, ⵠⲆⲆⲆⲆΔⵠ, ⲆⲆΔᐃⲆⵠⵠ, ΔⲆⵠⵠⲆⲆⵠ, ⵠ.ⲆⵠΔⲆΔⲆⵠ, Δ[66]);
		var ⵠⲆΔᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ];
		for (var Δᐃ = ⵠΔⵠⲆ; Δᐃ < ⵠⲆΔᐃ.length; Δᐃ++) {
			var ΔⵠΔ = ⵠⲆΔᐃ[Δᐃ];
			for (var ᐃΔⵠⵠ = ᐃΔΔ; ᐃΔⵠⵠ < ΔⵠΔ.ⲆⲆⲆⵠᐃ.length; ᐃΔⵠⵠ++) ⲆⲆΔⲆⵠΔⲆΔᐃ(ΔⵠΔ.ⲆⲆⲆⵠᐃ[ᐃΔⵠⵠ])
		}
		ΔⵠΔⲆᐃⵠⵠ += 40 * ΔᐃⲆⲆ;
		ΔⵠΔⲆᐃⵠⵠ > 60 && (ΔⵠΔⲆᐃⵠⵠ -= 60);
		ⵠᐃᐃᐃ(ᐃⲆⲆⵠⵠⵠᐃᐃⲆ, ᐃⵠⵠⲆᐃⲆⵠ, ⵠⲆⲆⲆⲆΔⵠ, ⲆⲆΔᐃⲆⵠⵠ, ΔⲆⵠⵠⲆⲆⵠ, ⵠ.ⲆΔⵠⵠ, "r", ⵠΔΔᐃ);
		for (var Δᐃ = 0; Δᐃ < ⲆⲆⲆ.ⵠⵠᐃⲆ.length; Δᐃ++) {
			var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[Δᐃ];
			if (ⲆⲆⲆ.ΔᐃⲆⵠⲆ !== ⲆΔΔⵠ.ΔⲆᐃ) {
				var ΔⲆⵠⲆ = ⲆΔΔⵠ.x2;
				if (ⲆⲆⲆ.ΔᐃⲆⵠⲆ !== ⲆΔΔⵠ.ΔⲆᐃ) ΔⲆⵠⲆ -= 400;
				var ᐃⵠᐃⵠ = ⲆΔΔⵠ.x1;
				if (ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ) ᐃⵠᐃⵠ += 400;
				var ⵠΔⲆⵠ = ⲆΔΔⵠ.y2;
				if (ⲆΔΔⵠ.ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ) ⵠΔⲆⵠ -= 300;
				var ᐃⵠᐃΔ = ⲆΔΔⵠ.y1;
				ⲆⲆⲆ.ΔᐃⲆⵠⲆ !== ⲆΔΔⵠ.ΔⲆᐃ && (ᐃⵠᐃΔ += 300);
				if ((ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆᐃⵠΔᐃ) > ᐃΔΔ && ΔⲆⵠⲆ - ⲆΔⲆᐃ + 120 <= -ⵠⵠⵠ.ᐃⵠⲆ.x && ΔⲆⵠⲆ + 820 >= -ⵠⵠⵠ.ᐃⵠⲆ.x && -ⵠⵠⵠ.ᐃⵠⲆ.y >= ᐃⵠᐃΔ + 88 - ΔⵠⲆΔ && ⵠΔⲆⵠ + 50 >= -ⵠⵠⵠ.ᐃⵠⲆ.y) ᐃΔΔⲆⵠⲆⵠ(ΔⲆⵠⲆ, ᐃⵠᐃΔ + 88, ⵠΔⲆⵠ - 88, ⵠⵠⵠ.ΔⵠᐃΔ[0], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆᐃⵠΔᐃ);
				if (ΔᐃΔ < (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆⵠΔⲆΔ) && ᐃⵠᐃⵠ - ⲆΔⲆᐃ - 700 <= -ⵠⵠⵠ.ᐃⵠⲆ.x && ᐃⵠᐃⵠ - ⲆⵠⵠΔⵠ >= -ⵠⵠⵠ.ᐃⵠⲆ.x && ᐃⵠᐃΔ + 88 - ΔⵠⲆΔ <= -ⵠⵠⵠ.ᐃⵠⲆ.y && -ⵠⵠⵠ.ᐃⵠⲆ.y <= ⵠΔⲆⵠ + 50) ᐃⲆΔΔⵠⵠⲆ(ᐃⵠᐃⵠ, ᐃⵠᐃΔ + 88, ⵠΔⲆⵠ - 88, ⵠⵠⵠ.ΔⵠᐃΔ[1], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆⵠΔⲆΔ);
				if ((ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ΔⲆᐃⲆᐃ) > ᐃΔΔ && ᐃⵠᐃⵠ - 235 - ⲆΔⲆᐃ <= -ⵠⵠⵠ.ᐃⵠⲆ.x && ΔⲆⵠⲆ + 350 >= -ⵠⵠⵠ.ᐃⵠⲆ.x && -ⵠⵠⵠ.ᐃⵠⲆ.y >= ⵠΔⲆⵠ - ΔⵠⲆΔ - 275 && -ⵠⵠⵠ.ᐃⵠⲆ.y <= ⵠΔⲆⵠ + 490) ΔⲆΔᐃᐃᐃᐃ(ⵠΔⲆⵠ - 230, ᐃⵠᐃⵠ - 230, ΔⲆⵠⲆ + 230, ⵠⵠⵠ.ΔⵠᐃΔ[2], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ΔⲆᐃⲆᐃ);
				ⵠⵠΔΔ < (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ᐃΔᐃᐃᐃ) && ᐃⵠᐃⵠ - 235 - ⲆΔⲆᐃ <= -ⵠⵠⵠ.ᐃⵠⲆ.x && -ⵠⵠⵠ.ᐃⵠⲆ.x <= ΔⲆⵠⲆ + 350 && -ⵠⵠⵠ.ᐃⵠⲆ.y >= ᐃⵠᐃΔ - ΔⵠⲆΔ - 390 && -ⵠⵠⵠ.ᐃⵠⲆ.y <= ᐃⵠᐃΔ + 315 && ΔΔΔⲆⲆⲆⲆ(ᐃⵠᐃΔ + 310, ᐃⵠᐃⵠ - 230, ΔⲆⵠⲆ + 230, ⵠⵠⵠ.ΔⵠᐃΔ[ⵠΔⲆⲆ], ⲆⲆⲆ.ⲆⵠΔΔΔ[ⲆΔΔⵠ.ΔⲆᐃ], ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ᐃΔᐃᐃᐃ)
			}
		}
	}

	function ⵠᐃⵠⵠᐃⵠᐃᐃⵠ(ΔᐃᐃᐃΔᐃⵠ, ⵠⵠⲆᐃ, ⵠΔ, ΔΔ, ΔΔⵠ) {
		ⲆⲆⲆ.transition ? (ᐃ.globalAlpha = 1, ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ΔᐃᐃᐃΔᐃⵠ][ⵠⵠⲆᐃ][ⲆⲆⲆ.time], ΔΔ, ΔΔⵠ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⵠΔΔᐃ : ⵠⵠⵠΔ, ᐃ.globalAlpha = 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ, ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ΔᐃᐃᐃΔᐃⵠ][ⵠⵠⲆᐃ][ⲆⲆⲆ.time], ΔΔ, ΔΔⵠ), ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⵠΔⵠⲆ : ᐃΔⵠΔ, ᐃ.globalAlpha = ΔⵠⲆ) : ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔΔ, ΔΔⵠ)
	}

	function ΔΔᐃⵠⲆΔᐃⲆΔ() {
		var ⵠⲆᐃⵠΔ = ⵠⵠⵠ.ⵠⲆᐃⵠΔ;
		ⵠⲆᐃⵠΔ.ΔⵠⲆⲆⵠ === ᐃⲆⵠΔ ? ⵠⲆᐃⵠΔ.ΔⵠⵠΔⲆ = Math.max(ⵠⵠΔᐃ, ⵠⲆᐃⵠΔ.ΔⵠⵠΔⲆ - ΔᐃⲆⲆ / ⵠᐃⵠⲆΔ) : ⵠⲆᐃⵠΔ.ΔⵠⵠΔⲆ = Math.min(1, ⵠⲆᐃⵠΔ.ΔⵠⵠΔⲆ + ΔᐃⲆⲆ / ⵠⵠⲆᐃᐃ);
		var ⲆΔΔⵠⲆ = ⵠⲆᐃⵠΔ.ⲆΔΔⵠⲆ;
		for (var Δᐃ = 0; Δᐃ < ⲆΔΔⵠⲆ.length; Δᐃ++) {
			var Ⲇᐃᐃ = ⲆΔΔⵠⲆ[Δᐃ];
			ⵠⲆᐃⵠΔ.ᐃᐃⵠ(Ⲇᐃᐃ);
			ᐃᐃⵠⲆⲆⵠⵠ(ⵠ.ⲆᐃⲆⲆⵠⵠⵠ, Ⲇᐃᐃ.id, ⵠⵠⵠ.ᐃⵠⲆ.x + Ⲇᐃᐃ.x, ⵠⵠⵠ.ᐃⵠⲆ.y + Ⲇᐃᐃ.y, Ⲇᐃᐃ.alpha)
		}
		for (var Δᐃ = 0; Δᐃ < ⲆΔΔⵠⲆ.length; Δᐃ++) {
			var Ⲇᐃᐃ = ⲆΔΔⵠⲆ[Δᐃ];
			(Ⲇᐃᐃ.ᐃⵠᐃⲆⲆ <= 0 || Ⲇᐃᐃ.x > -ⵠⵠⵠ.ᐃⵠⲆ.x + ⲆΔⲆᐃ || -ⵠⵠⵠ.ᐃⵠⲆ.x > Ⲇᐃᐃ.x || -ⵠⵠⵠ.ᐃⵠⲆ.y + ΔⵠⲆΔ < Ⲇᐃᐃ.y) && ⲆΔΔⵠⲆ.splice(Δᐃ, ⵠΔⲆ)
		}
		var ⵠΔΔⲆ = -ⵠⵠⵠ.ᐃⵠⲆ.y; - 1e3 < ⲆⲆⲆ.ⵠⲆⵠΔⵠ && ⵠⲆᐃⵠΔ.add(ⵠΔΔⲆ)
	}

	function ⲆⲆΔⲆⵠΔⲆΔᐃ(Ⲇᐃᐃ) {
		ᐃ.save();
		ᐃ.translate(ⵠⵠⵠ.ᐃⵠⲆ.x + Ⲇᐃᐃ.x, ⵠⵠⵠ.ᐃⵠⲆ.y + Ⲇᐃᐃ.y);
		ᐃ.rotate(Ⲇᐃᐃ.angle);
		ᐃ.globalAlpha = Ⲇᐃᐃ.alpha;
		var ⵠΔ = Ⲇⵠ[Ⲇᐃᐃ.id][ⲆⲆⲆ.time];
		ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ⲆⲆᐃⲆ, -ⵠΔ.height / ⲆⲆⵠᐃ);
		ᐃ.globalAlpha = 1;
		ᐃ.restore()
	}

	function ⲆⲆⵠⵠ(ᐃΔⲆ, ⲆᐃΔⵠⵠ, ⲆⵠΔᐃᐃ) {
		if (ⲆⲆⲆ.transition) {
			ᐃ.globalAlpha = 1;
			ᐃΔⲆ.ⲆᐃᐃⲆ(ⲆᐃΔⵠⵠ, ⲆⵠΔᐃᐃ);
			ⲆⲆⲆ.time = ⲆⲆⲆ.time ? 0 : ⲆⵠⲆ;
			ᐃ.globalAlpha = ᐃΔⵠΔ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
			ᐃΔⲆ.ⲆᐃᐃⲆ(ⲆᐃΔⵠⵠ, ⲆⵠΔᐃᐃ);
			ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⲆᐃⲆ : 1;
			ᐃ.globalAlpha = 1
		} else ᐃΔⲆ.ⲆᐃᐃⲆ(ⲆᐃΔⵠⵠ, ⲆⵠΔᐃᐃ)
	}

	function ⵠⵠᐃᐃⲆΔΔΔⲆ() {
		var ⲆⲆΔⲆΔᐃΔ = ⵠⵠⵠ.ⲆⲆΔⲆΔᐃΔ;
		var ⲆΔΔⵠⲆ = ⲆⲆΔⲆΔᐃΔ.ⲆΔΔⵠⲆ;
		for (var Δᐃ = 0; ⲆΔΔⵠⲆ.length > Δᐃ; Δᐃ++) {
			var Ⲇᐃᐃ = ⲆΔΔⵠⲆ[Δᐃ];
			ⲆⲆΔⲆΔᐃΔ.ᐃᐃⵠ(Ⲇᐃᐃ);
			ᐃᐃⵠⲆⲆⵠⵠ(ⵠ.ⲆⵠⲆⵠΔᐃΔ, Ⲇᐃᐃ.id, ⵠⵠⵠ.ᐃⵠⲆ.x + Ⲇᐃᐃ.x, ⵠⵠⵠ.ᐃⵠⲆ.y + Ⲇᐃᐃ.y, Ⲇᐃᐃ.alpha)
		}
		for (var Δᐃ = 0; ⲆΔΔⵠⲆ.length > Δᐃ; Δᐃ++) {
			var Ⲇᐃᐃ = ⲆΔΔⵠⲆ[Δᐃ];
			if (0 >= Ⲇᐃᐃ.ᐃⵠᐃⲆⲆ || -ⵠⵠⵠ.ᐃⵠⲆ.x + ⲆΔⲆᐃ < Ⲇᐃᐃ.x || -ⵠⵠⵠ.ᐃⵠⲆ.x > Ⲇᐃᐃ.x || Ⲇᐃᐃ.y > -ⵠⵠⵠ.ᐃⵠⲆ.y + ΔⵠⲆΔ) ⲆΔΔⵠⲆ.splice(Δᐃ, ⵠΔⲆ)
		}
		var ⵠΔΔⲆ = -ⵠⵠⵠ.ᐃⵠⲆ.y;
		ⲆⲆⲆ.ΔΔⲆΔᐃ > -1e3 && ⲆⲆΔⲆΔᐃΔ.add(ⵠΔΔⲆ)
	}

	function ⲆⲆΔⵠΔΔⵠ(ⵠᐃᐃⵠⲆ, ᐃΔΔᐃⲆ, ᐃⲆⲆᐃⵠᐃᐃ, ΔⵠᐃΔ, ⲆΔΔⵠ, ᐃΔⵠᐃ) {
		var w1 = ΔⵠᐃΔ.w1;
		var w2 = ΔⵠᐃΔ.w2;
		var w3 = ΔⵠᐃΔ.w3;
		var ΔΔᐃⵠ = ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠᐃᐃⵠⲆ - 700;
		var ᐃᐃⵠⲆΔ = Math.max(ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃΔΔᐃⲆ, 0);
		var ΔⵠⲆⲆΔ = Math.max(-ⵠⵠⵠ.ᐃⵠⲆ.y + ΔⵠⲆΔ - ᐃⲆⲆᐃⵠᐃᐃ - 100, 0);
		var ⲆΔΔᐃ = ᐃᐃⵠⲆΔ;
		var ΔᐃⵠⲆⵠ = ΔⵠⲆΔ - ᐃᐃⵠⲆΔ - ΔⵠⲆⲆΔ;
		if (ᐃΔⵠᐃ) var ΔᐃᐃⲆⲆ = ΔⵠᐃΔ.ΔⲆᐃ(w1).x;
		else var ΔᐃᐃⲆⲆ = w1.r.x;
		var ⵠⲆᐃⲆ = ΔΔᐃⵠ + ⵠΔᐃⲆ.ⵠᐃⵠⵠᐃ;
		var ⵠⲆᐃⲆⲆ = ⵠⲆᐃⲆ,
			ⵠΔᐃⵠⲆ = ⲆΔΔᐃ,
			Δᐃⵠᐃⵠ = ΔᐃᐃⲆⲆ + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ,
			ᐃᐃⲆΔⲆ = ΔᐃⵠⲆⵠ;
		ⵠⲆᐃⲆ += ΔᐃᐃⲆⲆ + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ - 2;
		var ᐃⲆᐃᐃⲆ = ⵠⲆᐃⲆ;
		if (ᐃΔⵠᐃ) var ΔᐃᐃⲆⲆ = ΔⵠᐃΔ.ΔⲆᐃ(w2).x;
		else var ΔᐃᐃⲆⲆ = w2.r.x;
		var d2 = ΔΔᐃⵠ + ⵠΔᐃⲆ.ΔᐃⲆᐃⵠ - ⵠⲆᐃⲆ + ΔᐃᐃⲆⲆ;
		var ΔΔⵠΔᐃ = ⵠⲆᐃⲆ,
			ⲆⲆᐃⲆΔ = ⲆΔΔᐃ,
			ᐃⲆᐃⵠᐃ = d2,
			ΔⲆᐃΔⵠ = ΔᐃⵠⲆⵠ;
		ⵠⲆᐃⲆ += d2 - ᐃΔⲆⵠ;
		var ᐃⵠⵠⲆΔ = ⵠⲆᐃⲆ - ᐃΔⲆⵠ;
		if (ᐃΔⵠᐃ) var ΔᐃᐃⲆⲆ = ΔⵠᐃΔ.ΔⲆᐃ(w3).x;
		else var ΔᐃᐃⲆⲆ = w3.r.x;
		d2 = ΔΔᐃⵠ + ⵠΔᐃⲆ.ᐃΔⵠⵠⲆ - ⵠⲆᐃⲆ + ΔᐃᐃⲆⲆ;
		if (ⵠⲆᐃⲆ + d2 - 3 > ᐃⵠⵠⲆΔ) {
			var ΔⵠᐃΔⲆ = ⲆⵠᐃⵠⲆ;
			var ⵠⵠᐃⲆΔ = ⵠⲆᐃⲆ,
				ⲆⲆⵠⵠΔ = ⲆΔΔᐃ,
				ⲆᐃⲆΔΔ = d2,
				ΔᐃᐃΔⲆ = ΔᐃⵠⲆⵠ;
			ⵠⲆᐃⲆ += d2 - Ⲇⵠᐃⵠ;
			var ⵠⵠⲆΔᐃ = ⵠⲆᐃⲆ
		} else {
			var ΔⵠᐃΔⲆ = ⲆⲆⲆΔᐃ;
			ⵠⲆᐃⲆ = ᐃⵠⵠⲆΔ;
			var ⵠⵠⲆΔᐃ = -ⵠⲆⲆⲆ
		}
		d2 = ΔΔᐃⵠ + ⵠΔᐃⲆ.ΔⵠⵠⲆΔⵠᐃ - ⵠⲆᐃⲆ;
		if (ⵠⲆᐃ < ᐃΔⵠᐃ && ⲆΔⲆⵠ === ⲆΔΔⵠ.ⵠⵠᐃⲆⵠⵠᐃ) {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? ⵠΔᐃ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(15, 77, 72, 252, 239, 187, ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⵠ.ⲆⲆΔᐃΔⲆΔ[ⲆⲆⲆ.time];
			ᐃ.fillRect(ⵠⲆᐃⲆ, ⲆΔΔᐃ, d2, ΔᐃⵠⲆⵠ)
		} else {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(ⲆΔΔⵠ.ᐃΔᐃ[ⲆᐃⲆ], ⲆΔΔⵠ.ᐃΔᐃ[1], ⲆΔΔⵠ.ᐃΔᐃ[ᐃᐃᐃᐃ], ⲆΔΔⵠ.ⵠⵠⲆ[0], ⲆΔΔⵠ.ⵠⵠⲆ[ⵠⵠⵠΔ], ⲆΔΔⵠ.ⵠⵠⲆ[ᐃᐃᐃᐃ], ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⲆΔΔⵠ.ⲆⲆⵠᐃⵠ[ⲆⲆⲆ.time];
			ᐃ.fillRect(ⵠⲆᐃⲆ, ⲆΔΔᐃ, d2, ΔᐃⵠⲆⵠ)
		}
	}

	function ᐃᐃⵠⲆⲆⵠⵠ(ⵠᐃ, Δᐃ, ΔΔ, ΔΔⵠ, ⵠⵠⵠᐃ) {
		if (ⲆⲆⲆ.transition && ΔΔⲆΔ == ⵠⵠⵠᐃ) {
			ᐃ.globalAlpha = ⲆΔᐃ;
			ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time][Δᐃ], ΔΔ, ΔΔⵠ);
			ⲆⲆⲆ.time = ⲆⲆⲆ.time ? 0 : 1;
			ᐃ.globalAlpha = 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
			ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time][Δᐃ], ΔΔ, ΔΔⵠ);
			ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ΔᐃΔ : 1;
			ᐃ.globalAlpha = 1
		} else {
			ᐃ.globalAlpha = ⵠⵠⵠᐃ;
			ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time][Δᐃ], ΔΔ, ΔΔⵠ);
			ᐃ.globalAlpha = ᐃⲆⲆ
		}
	}

	function ⵠΔⵠΔⲆ(ᐃⲆᐃⲆⲆΔΔ, ΔⵠⲆΔⵠᐃΔᐃᐃ, ΔᐃΔΔⲆᐃⲆᐃΔ, ⲆⲆⵠⵠᐃⵠᐃ, ⲆⲆΔⲆΔᐃᐃⲆⲆ, ᐃⲆΔΔᐃΔⵠΔΔ, ⵠΔⵠΔ) {
		var ᐃⲆ = "#";
		var ⵠⵠⵠⲆ = Math.floor(ⵠΔⵠΔ * ⲆⲆⵠⵠᐃⵠᐃ + (1 - ⵠΔⵠΔ) * ᐃⲆᐃⲆⲆΔΔ);
		ᐃⲆ += ⵠⵠⵠⲆ < 16 ? "0" + ⵠⵠⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[27]](ᐃᐃⵠᐃⵠᐃᐃ) : ⵠⵠⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[27]](ᐃⵠⵠⲆⲆ);
		var ⵠⵠⵠⲆ = Math.floor(ⵠΔⵠΔ * ⲆⲆΔⲆΔᐃᐃⲆⲆ + (ⵠΔΔ - ⵠΔⵠΔ) * ΔⵠⲆΔⵠᐃΔᐃᐃ);
		ᐃⲆ += ⵠⵠⵠⲆ < 16 ? "0" + ⵠⵠⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[27]](16) : ⵠⵠⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[27]](ΔᐃⵠΔⵠ);
		var ⵠⵠⵠⲆ = Math.floor(ⵠΔⵠΔ * ᐃⲆΔΔᐃΔⵠΔΔ + (ⲆⵠⲆ - ⵠΔⵠΔ) * ΔᐃΔΔⲆᐃⲆᐃΔ);
		ᐃⲆ += 16 > ⵠⵠⵠⲆ ? "0" + ⵠⵠⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[27]](16) : ⵠⵠⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[27]](ΔΔⵠᐃⲆ);
		return ᐃⲆ
	}

	function ⵠⵠⵠᐃΔΔⲆ(ᐃΔΔᐃⲆ, ⵠᐃᐃⵠⲆ, ⵠΔⲆᐃᐃ, ΔⵠᐃΔ, ⲆΔΔⵠ, ᐃΔⵠᐃ) {
		var w1 = ΔⵠᐃΔ.w1;
		var w2 = ΔⵠᐃΔ.w2;
		var w3 = ΔⵠᐃΔ.w3;
		var ⲆΔΔᐃ = ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃΔΔᐃⲆ - 700;
		var ⲆᐃΔⵠΔ = Math.max(ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠᐃᐃⵠⲆ, ⵠΔⵠⲆ);
		var ⵠΔᐃⲆᐃ = Math.max(-ⵠⵠⵠ.ᐃⵠⲆ.x + ⲆΔⲆᐃ - ⵠΔⲆᐃᐃ - 100, ⲆΔⵠΔ);
		var ΔΔᐃⵠ = ⲆᐃΔⵠΔ;
		var ⵠΔᐃΔⵠ = ⲆΔⲆᐃ - ⲆᐃΔⵠΔ - ⵠΔᐃⲆᐃ;
		if (ᐃΔⵠᐃ) var ΔᐃᐃⲆⲆ = ΔⵠᐃΔ.ΔⲆᐃ(w1).x;
		else var ΔᐃᐃⲆⲆ = w1.r.x;
		var ⵠⲆᐃⲆ = ⲆΔΔᐃ + ⵠΔᐃⲆ.ⵠᐃⵠⵠᐃ;
		var ⵠⲆᐃⲆⲆ = ΔΔᐃⵠ,
			ⵠΔᐃⵠⲆ = ⵠⲆᐃⲆ,
			ᐃᐃⲆΔⲆ = ΔᐃᐃⲆⲆ + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ,
			Δᐃⵠᐃⵠ = ⵠΔᐃΔⵠ;
		ⵠⲆᐃⲆ += ΔᐃᐃⲆⲆ + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ - ᐃⵠΔⲆ;
		var ᐃⲆᐃᐃⲆ = ⵠⲆᐃⲆ;
		if (ᐃΔⵠᐃ) var ΔᐃᐃⲆⲆ = ΔⵠᐃΔ.ΔⲆᐃ(w2).x;
		else var ΔᐃᐃⲆⲆ = w2.r.x;
		var d2 = ⲆΔΔᐃ + ⵠΔᐃⲆ.ΔᐃⲆᐃⵠ - ⵠⲆᐃⲆ + ΔᐃᐃⲆⲆ;
		var ⲆⲆᐃⲆΔ = ⵠⲆᐃⲆ,
			ΔΔⵠΔᐃ = ΔΔᐃⵠ,
			ΔⲆᐃΔⵠ = d2,
			ᐃⲆᐃⵠᐃ = ⵠΔᐃΔⵠ;
		ⵠⲆᐃⲆ += d2 - 2;
		var ᐃⵠⵠⲆΔ = ⵠⲆᐃⲆ - Δⵠᐃᐃ;
		if (ᐃΔⵠᐃ) var ΔᐃᐃⲆⲆ = ΔⵠᐃΔ.ΔⲆᐃ(w3).x;
		else var ΔᐃᐃⲆⲆ = w3.r.x;
		d2 = ⲆΔΔᐃ + ⵠΔᐃⲆ.ᐃΔⵠⵠⲆ - ⵠⲆᐃⲆ + ΔᐃᐃⲆⲆ;
		if (ⵠⲆᐃⲆ + d2 - 3 > ᐃⵠⵠⲆΔ) {
			var ΔⵠᐃΔⲆ = true;
			var ⲆⲆⵠⵠΔ = ⵠⲆᐃⲆ,
				ⵠⵠᐃⲆΔ = ΔΔᐃⵠ,
				ΔᐃᐃΔⲆ = d2,
				ⲆᐃⲆΔΔ = ⵠΔᐃΔⵠ;
			ⵠⲆᐃⲆ += d2 - 2;
			var ⵠⵠⲆΔᐃ = ⵠⲆᐃⲆ
		} else {
			var ΔⵠᐃΔⲆ = ⲆⵠⲆⵠΔ;
			ⵠⲆᐃⲆ = ᐃⵠⵠⲆΔ;
			var ⵠⵠⲆΔᐃ = -1
		}
		d2 = ⲆΔΔᐃ + ⵠΔᐃⲆ.ΔⵠⵠⲆΔⵠᐃ - ⵠⲆᐃⲆ;
		if (ᐃΔΔ < ᐃΔⵠᐃ && ⲆΔΔⵠ.ⵠⵠᐃⲆⵠⵠᐃ === 1) {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? ⲆⲆⲆᐃ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(15, 77, 72, 252, 239, 187, ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⵠ.ⲆⲆΔᐃΔⲆΔ[ⲆⲆⲆ.time];
			ᐃ.fillRect(ΔΔᐃⵠ, ⵠⲆᐃⲆ, ⵠΔᐃΔⵠ, d2)
		} else {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(ⲆΔΔⵠ.ᐃΔᐃ[0], ⲆΔΔⵠ.ᐃΔᐃ[1], ⲆΔΔⵠ.ᐃΔᐃ[2], ⲆΔΔⵠ.ⵠⵠⲆ[0], ⲆΔΔⵠ.ⵠⵠⲆ[1], ⲆΔΔⵠ.ⵠⵠⲆ[ᐃⲆᐃⵠ], ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⲆΔΔⵠ.ⲆⲆⵠᐃⵠ[ⲆⲆⲆ.time];
			ᐃ.fillRect(ΔΔᐃⵠ, ⵠⲆᐃⲆ, ⵠΔᐃΔⵠ, d2)
		}
	}

	function ΔⵠⵠⲆᐃ(ⵠᐃ, ⵠΔ, ΔΔ, ΔΔⵠ) {
		var Δⵠᐃ = ⵠΔ.width;
		var ⲆΔΔ = ⵠΔ.height;
		var w2 = Math.floor(Δⵠᐃ / 2);
		var ᐃᐃⲆᐃⵠ = Math.floor(ⲆΔΔ / ΔΔᐃᐃ);
		if (ⲆⲆⲆ.transition) {
			ᐃ.globalAlpha = 1;
			ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time], 0, 0, Δⵠᐃ, ⲆΔΔ, ΔΔ, ΔΔⵠ, w2, ᐃᐃⲆᐃⵠ);
			ⲆⲆⲆ.time = ⲆⲆⲆ.time ? ⵠᐃΔⲆ : ⵠⵠᐃ;
			ᐃ.globalAlpha = ᐃΔⵠΔ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
			ᐃΔΔⲆ(ᐃ, Ⲇⵠ[ⵠᐃ][ⲆⲆⲆ.time], 0, Ⲇᐃⵠⵠ, Δⵠᐃ, ⲆΔΔ, ΔΔ, ΔΔⵠ, w2, ᐃᐃⲆᐃⵠ);
			ⲆⲆⲆ.time = ⲆⲆⲆ.time ? 0 : 1;
			ᐃ.globalAlpha = ᐃΔⵠΔ
		} else ᐃΔΔⲆ(ᐃ, ⵠΔ, 0, ΔΔⲆⲆ, Δⵠᐃ, ⲆΔΔ, ΔΔ, ΔΔⵠ, w2, ᐃᐃⲆᐃⵠ)
	}

	function ᐃⲆΔΔⵠⵠⲆ(ⵠᐃᐃⵠⲆ, ᐃΔΔᐃⲆ, ᐃⲆⲆᐃⵠᐃᐃ, ΔⵠᐃΔ, ⲆΔΔⵠ, ᐃΔⵠᐃ) {
		var w1 = ΔⵠᐃΔ.w1;
		var w2 = ΔⵠᐃΔ.w2;
		var w3 = ΔⵠᐃΔ.w3;
		var ΔΔᐃⵠ = ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠᐃᐃⵠⲆ - 700;
		var ᐃᐃⵠⲆΔ = Math.max(ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃΔΔᐃⲆ, ⵠᐃΔ);
		var ΔⵠⲆⲆΔ = Math.max(-ⵠⵠⵠ.ᐃⵠⲆ.y + ΔⵠⲆΔ - ᐃⲆⲆᐃⵠᐃᐃ - ⵠⲆⲆⵠⲆ, 0);
		var ⲆΔΔᐃ = ᐃᐃⵠⲆΔ;
		var ΔᐃⵠⲆⵠ = ΔⵠⲆΔ - ᐃᐃⵠⲆΔ - ΔⵠⲆⲆΔ;
		if (ᐃΔⵠᐃ) var Δⵠᐃ = ΔⵠᐃΔ.ΔⲆᐃ(w1);
		else var Δⵠᐃ = w1.r;
		var ⵠⲆᐃⲆ = ΔΔᐃⵠ + ⵠΔᐃⲆ.ⵠᐃⵠⵠᐃ;
		var ⵠⲆᐃⲆⲆ = ⵠⲆᐃⲆ,
			ⵠΔᐃⵠⲆ = ⲆΔΔᐃ,
			Δᐃⵠᐃⵠ = Δⵠᐃ.x + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ,
			ᐃᐃⲆΔⲆ = ΔᐃⵠⲆⵠ;
		ⵠⲆᐃⲆ += Δⵠᐃ.x + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ - 2;
		var ᐃⲆᐃᐃⲆ = ⵠⲆᐃⲆ;
		if (ᐃΔⵠᐃ) var Δⵠᐃ = ΔⵠᐃΔ.ΔⲆᐃ(w2);
		else var Δⵠᐃ = w2.r;
		var d2 = ΔΔᐃⵠ + ⵠΔᐃⲆ.ΔᐃⲆᐃⵠ - ⵠⲆᐃⲆ + Δⵠᐃ.x;
		var ΔΔⵠΔᐃ = ⵠⲆᐃⲆ,
			ⲆⲆᐃⲆΔ = ⲆΔΔᐃ,
			ᐃⲆᐃⵠᐃ = d2,
			ΔⲆᐃΔⵠ = ΔᐃⵠⲆⵠ;
		ⵠⲆᐃⲆ += d2 - Δᐃᐃⵠ;
		var ᐃⵠⵠⲆΔ = ⵠⲆᐃⲆ - ⵠΔᐃⵠ;
		if (ᐃΔⵠᐃ) var Δⵠᐃ = ΔⵠᐃΔ.ΔⲆᐃ(w3);
		else var Δⵠᐃ = w3.r;
		d2 = ΔΔᐃⵠ + ⵠΔᐃⲆ.ᐃΔⵠⵠⲆ - ⵠⲆᐃⲆ + Δⵠᐃ.x;
		if (ᐃⵠⵠⲆΔ < ⵠⲆᐃⲆ + d2 - ⵠⵠⵠⵠ) {
			var ΔⵠᐃΔⲆ = ᐃⲆⲆⲆΔ;
			var ⵠⵠᐃⲆΔ = ⵠⲆᐃⲆ,
				ⲆⲆⵠⵠΔ = ⲆΔΔᐃ,
				ⲆᐃⲆΔΔ = d2,
				ΔᐃᐃΔⲆ = ΔᐃⵠⲆⵠ;
			ⵠⲆᐃⲆ += d2 - ΔⲆᐃⲆ;
			var ⵠⵠⲆΔᐃ = ⵠⲆᐃⲆ
		} else {
			var ΔⵠᐃΔⲆ = false;
			ⵠⲆᐃⲆ = ᐃⵠⵠⲆΔ;
			var ⵠⵠⲆΔᐃ = -1
		}
		d2 = ΔΔᐃⵠ + ⵠΔᐃⲆ.ΔⵠⵠⲆΔⵠᐃ - ⵠⲆᐃⲆ;
		if (ⲆⲆⲆ.transition) {
			var ⵠΔⵠΔ = ⲆⲆⲆ.time ? ⲆΔᐃΔ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
			ᐃ.fillStyle = ⵠΔⵠΔⲆ(9, 55, 63, 11, 106, 132, ⵠΔⵠΔ)
		} else ᐃ.fillStyle = ⵠ.ᐃⵠΔΔⲆ[ⲆⲆⲆ.time];
		ᐃ.fillRect(ⵠⲆᐃⲆⲆ, ⵠΔᐃⵠⲆ, Δᐃⵠᐃⵠ, ᐃᐃⲆΔⲆ);
		if (ᐃΔⵠᐃ) {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(15, 70, 76, 42, 139, 155, ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⵠ.ᐃⵠΔⵠΔⲆᐃ[ⲆⲆⲆ.time]
		} else {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(9, 55, 63, 11, 106, 132, ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⵠ.ᐃⵠΔΔⲆ[ⲆⲆⲆ.time]
		}
		ᐃ.fillRect(ΔΔⵠΔᐃ, ⲆⲆᐃⲆΔ, ᐃⲆᐃⵠᐃ, ΔⲆᐃΔⵠ);
		if (ΔⵠᐃΔⲆ) {
			if (ᐃΔⵠᐃ) {
				if (ⲆⲆⲆ.transition) {
					var ⵠΔⵠΔ = ⲆⲆⲆ.time ? ⵠⵠⵠΔ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
					ᐃ.fillStyle = ⵠΔⵠΔⲆ(17, 94, 96, 169, 214, 211, ⵠΔⵠΔ)
				} else ᐃ.fillStyle = ⵠ.ᐃⵠΔᐃⵠⵠⵠ[ⲆⲆⲆ.time]
			} else {
				if (ⲆⲆⲆ.transition) {
					var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
					ᐃ.fillStyle = ⵠΔⵠΔⲆ(9, 55, 63, 11, 106, 132, ⵠΔⵠΔ)
				} else ᐃ.fillStyle = ⵠ.ᐃⵠΔΔⲆ[ⲆⲆⲆ.time]
			}
			ᐃ.fillRect(ⵠⵠᐃⲆΔ, ⲆⲆⵠⵠΔ, ⲆᐃⲆΔΔ, ΔᐃᐃΔⲆ)
		}
		ⵠⵠΔⵠ.ΔⲆᐃᐃΔ && ᐃΔⵠᐃ && ΔⵠᐃΔ.ΔΔⲆⵠⵠᐃᐃⵠᐃ(ᐃⵠⵠⲆΔ, ⵠⵠⲆΔᐃ, ᐃⲆᐃᐃⲆ, ΔΔᐃⵠ, -ⵠⵠⵠ.ᐃⵠⲆ.y + ⵠΔᐃⵠⲆ, -ⵠⵠⵠ.ᐃⵠⲆ.y + ⵠΔᐃⵠⲆ + ᐃᐃⲆΔⲆ)
	}

	function ⲆⵠⵠⲆⲆⲆΔΔΔ(ΔΔΔᐃ) {
		ᐃ.globalAlpha = ΔΔΔᐃ.alpha;
		ᐃΔⵠ(ᐃ, ΔΔΔᐃ.x + ⵠⵠⵠ.ᐃⵠⲆ.x, ΔΔΔᐃ.y + ⵠⵠⵠ.ᐃⵠⲆ.y, ΔΔΔᐃ.r);
		ᐃⵠ(ᐃ, ⵠ.ᐃᐃᐃΔᐃᐃᐃ[ⲆⲆⲆ.time]);
		ᐃ.globalAlpha = ⵠⲆⲆⲆ
	}

	function ⵠᐃᐃⲆΔⲆⵠⲆⲆ() {
		var ⵠⲆᐃⵠ = ⲆⲆΔᐃⲆⵠⵠ;
		var ⲆⲆΔᐃ = ΔⲆⵠⵠⲆⲆⵠ;
		var ⲆᐃΔⵠ = ᐃⵠⵠⲆᐃⲆⵠ;
		var ᐃⲆΔΔ = ⵠⲆⲆⲆⲆΔⵠ;
		if (ⵠⵠΔⵠ.ΔⲆᐃᐃΔ) ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ΔⲆⵠⵠᐃ, "l", ⲆᐃⵠⲆ);
		ⵠⵠΔⵠ.ΔⲆᐃᐃΔ && ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⲆⵠⵠΔΔ, Δ[526], ⲆⲆⵠᐃⲆ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ΔⲆΔΔⲆ, Δ[526], 5);
		ⵠᐃᐃᐃ(ⲆᐃᐃΔⵠⲆΔ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ΔⵠⵠⵠⲆ, "l", 2);
		if (ⵠⵠΔⵠ.ΔⲆᐃᐃΔ) {
			ⵠᐃᐃᐃ(ⲆⵠⲆⲆⵠᐃⵠⵠⲆ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ΔⲆΔΔⲆ, Δ[526], ⵠⵠΔΔⲆ);
			ⵠᐃᐃᐃ(ⲆᐃᐃΔⵠⲆΔ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⲆⵠΔⲆᐃ, "l", ΔΔᐃᐃ)
		}
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⵠⲆᐃⲆΔ, "ma", 4);
		var ⵠⲆⵠⲆᐃⵠᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠⵠΔⵠᐃ];
		for (var Δᐃ = 0; Δᐃ < ⵠⲆⵠⲆᐃⵠᐃ.length; Δᐃ++) ⵠⲆⵠⲆᐃⵠᐃ[Δᐃ].ᐃⲆᐃᐃᐃΔⲆ();
		var ⵠⲆΔᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ];
		for (var Δᐃ = 0; ⵠⲆΔᐃ.length > Δᐃ; Δᐃ++) {
			var ΔⵠΔ = ⵠⲆΔᐃ[Δᐃ];
			for (var ᐃΔⵠⵠ = ᐃΔΔ; ΔⵠΔ.ⵠᐃᐃᐃⲆ.length > ᐃΔⵠⵠ; ᐃΔⵠⵠ++) ⲆⵠⵠⲆⲆⲆΔΔΔ(ΔⵠΔ.ⵠᐃᐃᐃⲆ[ᐃΔⵠⵠ])
		}
		var ΔⵠᐃᐃΔᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⵠᐃᐃ];
		for (var Δᐃ = Δⵠⵠ; Δᐃ < ΔⵠᐃᐃΔᐃΔ.length; Δᐃ++) {
			ⲆⲆⵠⵠ(ΔⵠᐃᐃΔᐃΔ[Δᐃ], ⵠ.ⲆΔⵠᐃᐃ);
			ΔⵠᐃᐃΔᐃΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ΔⵠᐃᐃΔᐃΔ[Δᐃ].info)
		}
		var ΔⵠⲆⵠⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.Δⵠⵠⵠⵠ];
		for (var Δᐃ = ᐃⲆⵠΔ; Δᐃ < ΔⵠⲆⵠⵠ.length; Δᐃ++) {
			if (ΔⵠⲆⵠⵠ[Δᐃ].action == ⵠΔᐃΔᐃ) ᐃᐃΔⲆΔΔΔ(ΔⵠⲆⵠⵠ[Δᐃ])
		}
		var ᐃⲆᐃΔⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠⲆⲆᐃ];
		for (var Δᐃ = 0; Δᐃ < ᐃⲆᐃΔⲆ.length; Δᐃ++) ᐃᐃΔⲆΔΔΔ(ᐃⲆᐃΔⲆ[Δᐃ], ⵠ.ΔⵠⲆⵠΔⵠΔ);
		var ⵠΔᐃᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⲆΔᐃ];
		for (var Δᐃ = ⵠΔⵠⲆ; ⵠΔᐃᐃᐃ.length > Δᐃ; Δᐃ++) ᐃᐃΔⲆΔΔΔ(ⵠΔᐃᐃᐃ[Δᐃ]);
		var ᐃⲆⵠΔΔΔⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔⵠⲆⵠ];
		for (var Δᐃ = 0; ᐃⲆⵠΔΔΔⵠ.length > Δᐃ; Δᐃ++) ᐃᐃΔⲆΔΔΔ(ᐃⲆⵠΔΔΔⵠ[Δᐃ]);
		var ᐃⵠⵠᐃⲆⲆⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⲆΔᐃ];
		for (var Δᐃ = ⲆᐃⲆ; Δᐃ < ᐃⵠⵠᐃⲆⲆⵠ.length; Δᐃ++) ᐃᐃΔⲆΔΔΔ(ᐃⵠⵠᐃⲆⲆⵠ[Δᐃ], ⵠ.ⵠΔⲆᐃΔΔⲆ);
		var ⲆⲆⵠΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔΔⵠⵠ];
		for (var Δᐃ = ⵠⲆᐃ; ⲆⲆⵠΔ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ⲆⲆⵠΔ[Δᐃ]);
		var ⵠⲆᐃⵠⲆⵠᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔⲆᐃⲆ];
		for (var Δᐃ = ΔᐃΔ; ⵠⲆᐃⵠⲆⵠᐃ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ⵠⲆᐃⵠⲆⵠᐃ[Δᐃ], ⵠ.ΔΔⲆᐃⲆ);
		var ⵠⲆⵠⲆᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔΔΔⵠ];
		for (var Δᐃ = 0; Δᐃ < ⵠⲆⵠⲆᐃ.length; Δᐃ++) ᐃᐃΔⲆΔΔΔ(ⵠⲆⵠⲆᐃ[Δᐃ]);
		var ⵠⲆⵠⲆᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆⵠᐃ];
		for (var Δᐃ = ⵠᐃΔ; ⵠⲆⵠⲆᐃ.length > Δᐃ; Δᐃ++) ᐃᐃΔⲆΔΔΔ(ⵠⲆⵠⲆᐃ[Δᐃ]);
		var ⵠⲆⵠⲆᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔΔΔⵠ];
		for (var Δᐃ = ⲆᐃⲆ; ⵠⲆⵠⲆᐃ.length > Δᐃ; Δᐃ++) ⲆΔᐃⲆΔᐃΔ(ⵠⲆⵠⲆᐃ[Δᐃ]);
		var ᐃᐃΔᐃᐃⵠⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆᐃⵠ];
		for (var Δᐃ = 0; ᐃᐃΔᐃᐃⵠⲆ.length > Δᐃ; Δᐃ++)
			if (0 === (ᐃᐃΔᐃᐃⵠⲆ[Δᐃ].info & 15) || ⲆΔⵠᐃⲆ === ᐃᐃΔᐃᐃⵠⲆ[Δᐃ].info) ⲆⲆⵠⵠ(ᐃᐃΔᐃᐃⵠⲆ[Δᐃ]);
		var ⵠⵠᐃⲆᐃⲆᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠⲆᐃΔ];
		for (var Δᐃ = 0; Δᐃ < ⵠⵠᐃⲆᐃⲆᐃ.length; Δᐃ++)
			if (ⵠⲆⵠ === (ⵠⵠᐃⲆᐃⲆᐃ[Δᐃ].info & 15) || 10 === ⵠⵠᐃⲆᐃⲆᐃ[Δᐃ].info) ⲆⲆⵠⵠ(ⵠⵠᐃⲆᐃⲆᐃ[Δᐃ]);
		var ⲆΔⵠⲆΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⵠⲆⲆ];
		for (var Δᐃ = 0; Δᐃ < ⲆΔⵠⲆΔ.length; Δᐃ++)
			if (ⵠΔΔᐃ === (ⲆΔⵠⲆΔ[Δᐃ].info & 15) || ᐃⵠᐃᐃᐃ === ⲆΔⵠⲆΔ[Δᐃ].info) ⲆⲆⵠⵠ(ⲆΔⵠⲆΔ[Δᐃ]);
		var ΔᐃᐃΔᐃⵠⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆⵠⲆΔ];
		for (var Δᐃ = 0; ΔᐃᐃΔᐃⵠⵠ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ΔᐃᐃΔᐃⵠⵠ[Δᐃ], ⵠ.ΔΔᐃⲆⵠ);
		var ⵠᐃⵠΔⵠⵠᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⲆⲆᐃ];
		for (var Δᐃ = ⵠⵠΔΔ; ⵠᐃⵠΔⵠⵠᐃ.length > Δᐃ; Δᐃ++)
			if (ⵠⲆⵠ === (ⵠᐃⵠΔⵠⵠᐃ[Δᐃ].info & 15) || ⵠᐃⵠΔⵠⵠᐃ[Δᐃ].info === ⵠⵠⲆᐃᐃ) ⲆⲆⵠⵠ(ⵠᐃⵠΔⵠⵠᐃ[Δᐃ]);
		var ⵠΔᐃΔⲆⲆᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠΔᐃⲆ];
		for (var Δᐃ = ⵠⵠΔΔ; ⵠΔᐃΔⲆⲆᐃ.length > Δᐃ; Δᐃ++)
			if (ᐃⲆⵠΔ === (ⵠΔᐃΔⲆⲆᐃ[Δᐃ].info & 15) || ⵠΔᐃΔⲆⲆᐃ[Δᐃ].info === ⲆΔⵠᐃⲆ) ⲆⲆⵠⵠ(ⵠΔᐃΔⲆⲆᐃ[Δᐃ]);
		var ᐃᐃᐃⵠᐃᐃⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.Ⲇⵠⵠⵠⵠ];
		for (var Δᐃ = 0; Δᐃ < ᐃᐃᐃⵠᐃᐃⵠ.length; Δᐃ++)
			if ((ᐃᐃᐃⵠᐃᐃⵠ[Δᐃ].info & 15) === ⵠᐃⵠⵠ || ⵠⵠⲆᐃᐃ === ᐃᐃᐃⵠᐃᐃⵠ[Δᐃ].info) ⲆⲆⵠⵠ(ᐃᐃᐃⵠᐃᐃⵠ[Δᐃ]);
		var ΔᐃᐃΔᐃⵠⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔᐃⲆⵠ];
		for (var Δᐃ = 0; Δᐃ < ΔᐃᐃΔᐃⵠⵠ.length; Δᐃ++) ⲆⲆⵠⵠ(ΔᐃᐃΔᐃⵠⵠ[Δᐃ]);
		if (!Settings.BoxOnTop.enabled) {
			var ⵠⵠΔⲆⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆⵠᐃ];
			for (var Δᐃ = ⵠᐃΔⲆ; ⵠⵠΔⲆⲆ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ⵠⵠΔⲆⲆ[Δᐃ], ⵠ.ⵠⵠⲆⵠᐃ, ⵠ.ⵠⲆᐃⵠᐃᐃᐃ);
			var ⵠⵠΔⵠΔⲆⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃΔⵠᐃᐃ];
			for (var Δᐃ = 0; Δᐃ < ⵠⵠΔⵠΔⲆⵠ.length; Δᐃ++) ⲆⲆⵠⵠ(ⵠⵠΔⵠΔⲆⵠ[Δᐃ], ⵠ.ⵠⵠⲆⵠᐃ, ⵠ.ⵠⲆᐃⵠᐃᐃᐃ);
			var ΔⵠⲆⵠⲆⵠΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃᐃⵠΔ];
			for (var Δᐃ = ᐃΔΔ; Δᐃ < ΔⵠⲆⵠⲆⵠΔ.length; Δᐃ++) ⲆⲆⵠⵠ(ΔⵠⲆⵠⲆⵠΔ[Δᐃ], ⵠ.ΔᐃᐃⵠΔ, ⵠ.ⲆᐃⲆⵠᐃᐃΔ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆᐃⵠⵠ];
		for (var Δᐃ = ⵠⲆΔⵠ; Δᐃ < ᐃⲆᐃΔ.length; Δᐃ++) {
			ᐃⲆᐃΔ[Δᐃ].info & ⲆⵠⲆ && ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], ⵠ.ⲆΔⵠⲆΔⵠⲆ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⵠⲆⵠ];
		for (var Δᐃ = ⵠⲆᐃ; ᐃⲆᐃΔ.length > Δᐃ; Δᐃ++) {
			ᐃⲆᐃΔ[Δᐃ].info & 1 && ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], ⵠ.ⲆΔⵠⲆⲆⵠᐃ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⵠΔⲆ];
		for (var Δᐃ = 0; Δᐃ < ᐃⲆᐃΔ.length; Δᐃ++) {
			ᐃⲆᐃΔ[Δᐃ].info && ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], ⵠ.ⵠⲆᐃⲆⵠᐃⲆ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔΔⲆⲆ];
		for (var Δᐃ = ⲆΔⵠΔ; Δᐃ < ᐃⲆᐃΔ.length; Δᐃ++) {
			ᐃⲆᐃΔ[Δᐃ].info && ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], ⵠ.ⵠᐃⵠⲆΔⵠⲆ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠⵠⲆΔ];
		for (var Δᐃ = 0; ᐃⲆᐃΔ.length > Δᐃ; Δᐃ++) {
			if (ᐃⲆᐃΔ[Δᐃ].info) ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], ⵠ.ⲆⲆᐃΔⵠⲆᐃ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔΔⲆᐃ];
		for (var Δᐃ = ⵠΔⵠⲆ; ᐃⲆᐃΔ.length > Δᐃ; Δᐃ++) {
			if (ᐃⲆᐃΔ[Δᐃ].info) ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], ⵠ.ⵠⲆᐃⲆⵠᐃⲆ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠⲆⵠ];
		for (var Δᐃ = 0; ᐃⲆᐃΔ.length > Δᐃ; Δᐃ++) {
			if (ᐃⲆᐃΔ[Δᐃ].info & ⲆΔᐃΔ) ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], ⵠ.ⲆΔⵠⲆΔⵠⲆ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠᐃΔΔ];
		for (var Δᐃ = 0; ᐃⲆᐃΔ.length > Δᐃ; Δᐃ++) {
			if (ᐃⲆᐃΔ[Δᐃ].info & 1) ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], ⵠ.ⲆΔⵠⲆⲆⵠᐃ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔⲆᐃΔ];
		for (var Δᐃ = ⵠᐃⵠⵠ; ᐃⲆᐃΔ.length > Δᐃ; Δᐃ++) {
			ᐃⲆᐃΔ[Δᐃ].info && ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], ⵠ.ⵠⲆᐃⲆⵠᐃⲆ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃⵠⲆ];
		for (var Δᐃ = ΔΔⲆⲆ; Δᐃ < ᐃⲆᐃΔ.length; Δᐃ++) {
			if (ᐃⲆᐃΔ[Δᐃ].info) ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], ⵠ.ⵠᐃⵠⲆΔⵠⲆ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃⲆΔ];
		for (var Δᐃ = 0; ᐃⲆᐃΔ.length > Δᐃ; Δᐃ++) {
			ᐃⲆᐃΔ[Δᐃ].info && ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], ⵠ.ⲆⲆᐃΔⵠⲆᐃ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃΔⲆⲆ];
		for (var Δᐃ = ⲆⲆᐃΔ; Δᐃ < ᐃⲆᐃΔ.length; Δᐃ++) {
			if (ᐃⲆᐃΔ[Δᐃ].info) ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], ⵠ.ⵠⲆᐃⲆⵠᐃⲆ)
		}
		var ΔⲆⲆᐃⵠΔΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⲆⲆΔ];
		for (var Δᐃ = 0; ΔⲆⲆᐃⵠΔΔ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ΔⲆⲆᐃⵠΔΔ[Δᐃ], ⵠ.ΔⲆⲆⲆΔ, ⵠ.ⵠⵠᐃⵠᐃᐃⲆ);
		var ⵠⵠΔᐃⲆᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠΔΔ];
		for (var Δᐃ = Ⲇᐃⵠⵠ; ⵠⵠΔᐃⲆᐃᐃ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ⵠⵠΔᐃⲆᐃᐃ[Δᐃ], ⵠ.ⵠⲆⵠΔΔ);
		var ⵠⲆⵠⲆᐃⵠᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠⵠΔⵠᐃ];
		for (var Δᐃ = 0; Δᐃ < ⵠⲆⵠⲆᐃⵠᐃ.length; Δᐃ++) ⲆⲆⵠⵠ(ⵠⲆⵠⲆᐃⵠᐃ[Δᐃ], ⵠ.ⵠⲆⵠⵠΔⵠᐃ, ⵠ.ᐃⵠᐃⵠΔᐃⲆⲆⲆ);
		var ⵠⲆΔⵠⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆⵠⵠ];
		for (var Δᐃ = 0; ⵠⲆΔⵠⵠ.length > Δᐃ; Δᐃ++) {
			if (ⵠⲆΔⵠⵠ[Δᐃ].ⲆⵠⲆⵠⲆᐃⲆ === ⲆΔⵠΔ) ⲆⲆⵠⵠ(ⵠⲆΔⵠⵠ[Δᐃ])
		}
		if (!Settings.PlayerOnTop.enabled) {
			var ⵠⲆΔᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ];
			for (var Δᐃ = ⵠᐃΔ; Δᐃ < ⵠⲆΔᐃ.length; Δᐃ++) {
				var ΔⵠΔ = ⵠⲆΔᐃ[Δᐃ];
				if (ⵠⲆΔᐃ[Δᐃ].ⵠⵠΔⵠΔ !== Ⲇᐃ.ⵠᐃⲆΔⲆ && Ⲇᐃ.ⲆΔᐃⲆΔ !== ⵠⲆΔᐃ[Δᐃ].ⵠⵠΔⵠΔ && ⵠⲆΔᐃ[Δᐃ].ⵠⵠΔⵠΔ !== Ⲇᐃ.ΔⲆⵠΔᐃ && ⵠⲆΔᐃ[Δᐃ].ⵠⵠΔⵠΔ !== Ⲇᐃ.ⵠⲆⲆΔᐃ && Ⲇᐃ.ⲆⲆⲆΔⲆ !== ⵠⲆΔᐃ[Δᐃ].ⵠⵠΔⵠΔ) {
					if (ΔⵠΔ.ᐃᐃᐃᐃΔⲆᐃ === 0) {
						if (.001 < ΔⵠΔ.ΔⵠᐃⲆⲆΔΔ) {
							ΔⵠΔ.ΔⵠᐃⲆⲆΔΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(ΔⵠΔ.ΔⵠᐃⲆⲆΔΔ, 0, .018);
							var ΔⵠⵠⲆ = ⲆΔᐃΔ + .18 * Math.min(ⵠⲆⲆⲆ, Math.max(ΔⵠΔ.ΔⵠᐃⲆⲆΔΔ, ⲆⲆⵠⲆ) / ⵠⲆⲆⵠᐃΔᐃ);
							ᐃ.save();
							ᐃ.scale(ΔⵠⵠⲆ, ΔⵠⵠⲆ);
							ⵠⵠⵠ.ᐃⵠⲆ.x /= ΔⵠⵠⲆ;
							ⵠⵠⵠ.ᐃⵠⲆ.y /= ΔⵠⵠⲆ;
							ΔⵠΔ.x /= ΔⵠⵠⲆ;
							ΔⵠΔ.y /= ΔⵠⵠⲆ;
							ΔⵠΔ.r.x /= ΔⵠⵠⲆ;
							ΔⵠΔ.r.y /= ΔⵠⵠⲆ;
							ΔⵠΔ.ⵠⵠⵠΔΔⲆᐃ();
							ΔⵠΔ.ⲆᐃᐃⲆ();
							ⵠⵠⵠ.ᐃⵠⲆ.x *= ΔⵠⵠⲆ;
							ⵠⵠⵠ.ᐃⵠⲆ.y *= ΔⵠⵠⲆ;
							ΔⵠΔ.x *= ΔⵠⵠⲆ;
							ΔⵠΔ.y *= ΔⵠⵠⲆ;
							ΔⵠΔ.r.x *= ΔⵠⵠⲆ;
							ΔⵠΔ.r.y *= ΔⵠⵠⲆ;
							ᐃ.restore()
						} else {
							ΔⵠΔ.ⲆⵠⲆⵠⲆᐃⲆ = ⲆΔⵠΔ;
							ΔⵠΔ.ⵠⵠⵠΔΔⲆᐃ();
							ΔⵠΔ.ⲆᐃᐃⲆ()
						}
					}
				} else if (180 >= ΔⵠΔ.ΔⲆⵠⵠΔ) {
					ᐃ.save();
					var ΔⵠⵠⲆ = ᐃΔⵠΔ + Math.min(1, Math.max(ΔⵠΔ.ΔⵠⲆⵠΔ - 30, ΔᐃΔ) / 180) * .35;
					ᐃ.scale(ΔⵠⵠⲆ, ΔⵠⵠⲆ);
					ⵠⵠⵠ.ᐃⵠⲆ.x /= ΔⵠⵠⲆ;
					ⵠⵠⵠ.ᐃⵠⲆ.y /= ΔⵠⵠⲆ;
					ΔⵠΔ.x /= ΔⵠⵠⲆ;
					ΔⵠΔ.y /= ΔⵠⵠⲆ;
					ΔⵠΔ.r.x /= ΔⵠⵠⲆ;
					ΔⵠΔ.r.y /= ΔⵠⵠⲆ;
					ΔⵠΔ.ⲆⵠⲆⵠⲆᐃⲆ = 0;
					ΔⵠΔ.ⵠⵠⵠΔΔⲆᐃ();
					ΔⵠΔ.ⲆᐃᐃⲆ();
					ⵠⵠⵠ.ᐃⵠⲆ.x *= ΔⵠⵠⲆ;
					ⵠⵠⵠ.ᐃⵠⲆ.y *= ΔⵠⵠⲆ;
					ΔⵠΔ.x *= ΔⵠⵠⲆ;
					ΔⵠΔ.y *= ΔⵠⵠⲆ;
					ΔⵠΔ.r.x *= ΔⵠⵠⲆ;
					ΔⵠΔ.r.y *= ΔⵠⵠⲆ;
					ᐃ.restore()
				}
			}
		}
		var ⵠⵠΔᐃⲆᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠΔΔ];
		for (var Δᐃ = 0; Δᐃ < ⵠⵠΔᐃⲆᐃᐃ.length; Δᐃ++) ⲆⲆⵠⵠ(ⵠⵠΔᐃⲆᐃᐃ[Δᐃ], ⵠ.ⲆⵠΔⲆⵠⵠⲆ);
		var ⵠⲆΔⵠⲆᐃⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔᐃΔⲆ];
		for (var Δᐃ = ⵠᐃΔⲆ; ⵠⲆΔⵠⲆᐃⵠ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ⵠⲆΔⵠⲆᐃⵠ[Δᐃ]);
		var ᐃᐃΔⲆΔᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⵠᐃᐃ];
		for (var Δᐃ = 0; ᐃᐃΔⲆΔᐃᐃ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ᐃᐃΔⲆΔᐃᐃ[Δᐃ], ⵠ.ᐃⲆⵠᐃᐃ, ⵠ.ΔⲆΔΔᐃᐃⵠ);
		var ⲆⵠⵠᐃΔⲆⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃᐃⵠ];
		for (var Δᐃ = ΔᐃΔ; Δᐃ < ⲆⵠⵠᐃΔⲆⲆ.length; Δᐃ++) ⲆⲆⵠⵠ(ⲆⵠⵠᐃΔⲆⲆ[Δᐃ]);
		var ΔΔⲆΔΔΔΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⲆⵠⵠ];
		for (var Δᐃ = 0; ΔΔⲆΔΔΔΔ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ΔΔⲆΔΔΔΔ[Δᐃ], ⵠ.ⲆΔⲆⵠⵠ, ⵠ.ⲆⵠⲆⵠⵠⵠᐃ);
		var ΔⲆΔⵠⵠΔⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃⲆΔⲆ];
		for (var Δᐃ = 0; Δᐃ < ΔⲆΔⵠⵠΔⲆ.length; Δᐃ++) ⲆⲆⵠⵠ(ΔⲆΔⵠⵠΔⲆ[Δᐃ], ⵠ.ⵠᐃⲆΔⲆ, ⵠ.ⲆᐃᐃⲆⲆᐃᐃ);
		var ΔⲆⵠⵠⲆⵠΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔᐃⲆΔ];
		for (var Δᐃ = ⵠᐃⵠⵠ; ΔⲆⵠⵠⲆⵠΔ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ΔⲆⵠⵠⲆⵠΔ[Δᐃ], ⵠ.ⲆΔᐃⲆΔ, ⵠ.ᐃⵠⵠΔⵠᐃⵠ);
		var ᐃᐃΔᐃᐃⵠⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆᐃⵠ];
		for (var Δᐃ = 0; Δᐃ < ᐃᐃΔᐃᐃⵠⲆ.length; Δᐃ++)
			if ((ᐃᐃΔᐃᐃⵠⲆ[Δᐃ].info & 15) !== ΔᐃΔ && ᐃᐃΔᐃᐃⵠⲆ[Δᐃ].info !== ⲆΔⲆⲆⵠ) ⲆⲆⵠⵠ(ᐃᐃΔᐃᐃⵠⲆ[Δᐃ]);
		var ⵠⵠᐃⲆᐃⲆᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠⲆᐃΔ];
		for (var Δᐃ = ⵠⲆⵠ; Δᐃ < ⵠⵠᐃⲆᐃⲆᐃ.length; Δᐃ++)
			if ((ⵠⵠᐃⲆᐃⲆᐃ[Δᐃ].info & 15) !== Ⲇᐃⵠⵠ && ⵠⵠᐃⲆᐃⲆᐃ[Δᐃ].info !== 10) ⲆⲆⵠⵠ(ⵠⵠᐃⲆᐃⲆᐃ[Δᐃ]);
		var ⲆΔⵠⲆΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆⲆⲆⲆᐃᐃ];
		for (var Δᐃ = ⲆⲆᐃΔ; Δᐃ < ⲆΔⵠⲆΔ.length; Δᐃ++) ⲆⲆⵠⵠ(ⲆΔⵠⲆΔ[Δᐃ], ⵠ.ⲆⲆⲆⵠⵠ);
		var ⲆΔⵠⲆΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⵠⲆⲆ];
		for (var Δᐃ = ΔᐃΔ; Δᐃ < ⲆΔⵠⲆΔ.length; Δᐃ++)
			if ((ⲆΔⵠⲆΔ[Δᐃ].info & 15) !== 0 && ⲆΔⵠⲆΔ[Δᐃ].info !== 10) ⲆⲆⵠⵠ(ⲆΔⵠⲆΔ[Δᐃ]);
		var ⵠⲆⵠⲆᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆⵠᐃ];
		for (var Δᐃ = ⵠᐃΔ; ⵠⲆⵠⲆᐃ.length > Δᐃ; Δᐃ++) ⲆΔᐃⲆΔᐃΔ(ⵠⲆⵠⲆᐃ[Δᐃ]);
		var ⵠᐃⵠΔⵠⵠᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⲆⲆᐃ];
		for (var Δᐃ = 0; ⵠᐃⵠΔⵠⵠᐃ.length > Δᐃ; Δᐃ++)
			if ((ⵠᐃⵠΔⵠⵠᐃ[Δᐃ].info & 15) !== ⵠᐃΔ && ⵠᐃⵠΔⵠⵠᐃ[Δᐃ].info !== 10) ⲆⲆⵠⵠ(ⵠᐃⵠΔⵠⵠᐃ[Δᐃ]);
		var ⵠΔᐃΔⲆⲆᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠΔᐃⲆ];
		for (var Δᐃ = ⲆᐃⲆ; Δᐃ < ⵠΔᐃΔⲆⲆᐃ.length; Δᐃ++)(ⵠΔᐃΔⲆⲆᐃ[Δᐃ].info & 15) !== ᐃΔΔ && 10 !== ⵠΔᐃΔⲆⲆᐃ[Δᐃ].info && ⲆⲆⵠⵠ(ⵠΔᐃΔⲆⲆᐃ[Δᐃ]);
		var ᐃᐃᐃⵠᐃᐃⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.Ⲇⵠⵠⵠⵠ];
		for (var Δᐃ = 0; ᐃᐃᐃⵠᐃᐃⵠ.length > Δᐃ; Δᐃ++) 0 !== (ᐃᐃᐃⵠᐃᐃⵠ[Δᐃ].info & 15) && 10 !== ᐃᐃᐃⵠᐃᐃⵠ[Δᐃ].info && ⲆⲆⵠⵠ(ᐃᐃᐃⵠᐃᐃⵠ[Δᐃ]);
		var ⵠᐃΔΔᐃᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃᐃⲆᐃ];
		for (var Δᐃ = ⵠᐃⵠⵠ; Δᐃ < ⵠᐃΔΔᐃᐃᐃ.length; Δᐃ++) ⲆⲆⵠⵠ(ⵠᐃΔΔᐃᐃᐃ[Δᐃ], ⵠ.ΔᐃᐃⲆᐃ, ⵠ.ᐃᐃⲆⲆⵠⵠᐃ);
		var ᐃⵠⵠⵠᐃⵠⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠⲆᐃ];
		for (var Δᐃ = ⵠⵠΔᐃ; ᐃⵠⵠⵠᐃⵠⵠ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ᐃⵠⵠⵠᐃⵠⵠ[Δᐃ], ⵠ.ⵠΔⵠⲆᐃ, ⵠ.ᐃᐃⲆⲆΔᐃΔ);
		var ΔⵠΔΔⵠᐃⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⲆⵠⵠ];
		for (var Δᐃ = 0; ΔⵠΔΔⵠᐃⵠ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ΔⵠΔΔⵠᐃⵠ[Δᐃ], ⵠ.ⵠⲆⲆⵠⵠ, ⵠ.ᐃⵠⵠᐃΔΔⲆ);
		var ᐃᐃⲆⲆⲆⲆⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠⲆΔⵠ];
		for (var Δᐃ = ⵠⲆⵠ; ᐃᐃⲆⲆⲆⲆⵠ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ᐃᐃⲆⲆⲆⲆⵠ[Δᐃ], ⵠ.ᐃⵠⲆΔⵠ, ⵠ.ᐃΔᐃΔⲆΔᐃ);
		var ΔⵠⵠᐃᐃⲆⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.Δⵠⵠᐃⵠ];
		for (var Δᐃ = ⵠⲆᐃ; Δᐃ < ΔⵠⵠᐃᐃⲆⲆ.length; Δᐃ++) ⲆⲆⵠⵠ(ΔⵠⵠᐃᐃⲆⲆ[Δᐃ], ⵠ.Δⵠⵠᐃⵠ, ⵠ.ᐃᐃⲆⵠⲆᐃᐃ);
		var ⲆᐃⵠⲆᐃⲆⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠΔⵠᐃ];
		for (var Δᐃ = ᐃΔΔ; ⲆᐃⵠⲆᐃⲆⵠ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ⲆᐃⵠⲆᐃⲆⵠ[Δᐃ], ⵠ.ⵠⵠΔⵠᐃ, ⵠ.ΔᐃⵠᐃᐃᐃΔ);
		var ΔⵠᐃΔᐃⵠΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔⲆΔⵠ];
		for (var Δᐃ = ⲆᐃⲆ; Δᐃ < ΔⵠᐃΔᐃⵠΔ.length; Δᐃ++) ⲆⲆⵠⵠ(ΔⵠᐃΔᐃⵠΔ[Δᐃ]);
		var ⵠⵠⲆⲆΔΔΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔΔⵠⲆ];
		for (var Δᐃ = 0; Δᐃ < ⵠⵠⲆⲆΔΔΔ.length; Δᐃ++) ⲆⲆⵠⵠ(ⵠⵠⲆⲆΔΔΔ[Δᐃ], ⵠ.ⲆⲆⵠⵠⲆΔΔ, ⵠ.ᐃⵠᐃⲆΔΔᐃ);
		var ⲆΔⵠᐃΔᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⵠⵠᐃ];
		for (var Δᐃ = ᐃΔΔ; Δᐃ < ⲆΔⵠᐃΔᐃᐃ.length; Δᐃ++) ⲆⲆⵠⵠ(ⲆΔⵠᐃΔᐃᐃ[Δᐃ]);
		var ⵠⲆⲆⵠΔⲆᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃⲆᐃΔ];
		for (var Δᐃ = ΔΔⲆⲆ; ⵠⲆⲆⵠΔⲆᐃ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ⵠⲆⲆⵠΔⲆᐃ[Δᐃ], ⵠ.ⵠᐃⲆᐃΔ, ⵠ.ⲆΔᐃⵠⵠΔⲆ);
		var ΔᐃᐃΔΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆΔⲆ];
		for (var Δᐃ = ΔᐃΔ; ΔᐃᐃΔΔ.length > Δᐃ; Δᐃ++) {
			ΔᐃᐃΔΔ[Δᐃ].scale === 1 && ⲆⲆⵠⵠ(ΔᐃᐃΔΔ[Δᐃ], ⵠ.ⵠⵠⲆΔⲆ, ⵠ.ΔⵠⵠᐃⵠᐃⲆ)
		}
		var ΔᐃᐃΔΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃΔⲆᐃ];
		for (var Δᐃ = ⲆⲆⵠⲆ; Δᐃ < ΔᐃᐃΔΔ.length; Δᐃ++) {
			if (ᐃⲆⲆ === ΔᐃᐃΔΔ[Δᐃ].scale) ⲆⲆⵠⵠ(ΔᐃᐃΔΔ[Δᐃ], ⵠ.ⲆᐃΔⲆᐃ, ⵠ.ⲆΔⵠᐃⵠⵠᐃ)
		}
		var ᐃΔⵠⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠΔⵠΔ];
		for (var Δᐃ = ⲆΔⵠΔ; Δᐃ < ᐃΔⵠⲆ.length; Δᐃ++) ⲆⲆⵠⵠ(ᐃΔⵠⲆ[Δᐃ]);
		var ⲆⲆⵠᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃⲆⵠ];
		for (var Δᐃ = 0; Δᐃ < ⲆⲆⵠᐃᐃ.length; Δᐃ++) ⲆⲆⵠⵠ(ⲆⲆⵠᐃᐃ[Δᐃ], ⵠ.ⵠⵠᐃⲆⵠ);
		var ΔⵠⲆⵠⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.Δⵠⵠⵠⵠ];
		for (var Δᐃ = ⲆᐃⲆ; Δᐃ < ΔⵠⲆⵠⵠ.length; Δᐃ++) ⲆⲆⵠⵠ(ΔⵠⲆⵠⵠ[Δᐃ]);
		var ΔᐃΔᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆᐃⲆᐃ];
		for (var Δᐃ = 0; Δᐃ < ΔᐃΔᐃ.length; Δᐃ++) ⲆⲆⵠⵠ(ΔᐃΔᐃ[Δᐃ]);
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠⲆⵠ];
		for (var Δᐃ = Δⵠⵠ; ᐃⲆᐃΔ.length > Δᐃ; Δᐃ++) {
			!(ᐃⲆᐃΔ[Δᐃ].info & 1) && ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ᐃⲆᐃΔ[Δᐃ]) ? 10012 : 10013 : ⵠ.ᐃᐃΔⲆΔⵠⵠ);
			ᐃⲆᐃΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ᐃⲆᐃΔ[Δᐃ].info >> ᐃⲆⲆ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠᐃΔΔ];
		for (var Δᐃ = 0; Δᐃ < ᐃⲆᐃΔ.length; Δᐃ++) {
			if (!(ᐃⲆᐃΔ[Δᐃ].info & Δᐃᐃ)) ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ᐃⲆᐃΔ[Δᐃ]) ? 10014 : 10015 : ⵠ.ⲆⲆᐃⲆⲆⲆⲆ);
			ᐃⲆᐃΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ᐃⲆᐃΔ[Δᐃ].info >> ᐃⲆΔ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔⲆᐃΔ];
		for (var Δᐃ = ⲆᐃⲆ; Δᐃ < ᐃⲆᐃΔ.length; Δᐃ++) {
			if (!(ᐃⲆᐃΔ[Δᐃ].info & ⲆⲆⲆᐃ)) ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ᐃⲆᐃΔ[Δᐃ]) ? 10016 : 10017 : ⵠ.ᐃⵠᐃᐃΔΔⵠ);
			ᐃⲆᐃΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ᐃⲆᐃΔ[Δᐃ].info >> ᐃⲆⲆ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃⵠⲆ];
		for (var Δᐃ = ⵠⲆⵠ; ᐃⲆᐃΔ.length > Δᐃ; Δᐃ++) {
			!(ᐃⲆᐃΔ[Δᐃ].info & ⵠΔⲆ) && ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ᐃⲆᐃΔ[Δᐃ]) ? 10018 : 10019 : ⵠ.ⲆⵠΔΔΔⵠᐃ);
			ᐃⲆᐃΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ᐃⲆᐃΔ[Δᐃ].info >> 1)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃⲆΔ];
		for (var Δᐃ = 0; ᐃⲆᐃΔ.length > Δᐃ; Δᐃ++) {
			if (!(ᐃⲆᐃΔ[Δᐃ].info & 1)) ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ᐃⲆᐃΔ[Δᐃ]) ? 10020 : 10021 : ⵠ.ⲆΔⵠᐃΔΔⵠ);
			ᐃⲆᐃΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ᐃⲆᐃΔ[Δᐃ].info >> ⲆⵠⲆ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃΔⲆⲆ];
		for (var Δᐃ = 0; Δᐃ < ᐃⲆᐃΔ.length; Δᐃ++) {
			!(ᐃⲆᐃΔ[Δᐃ].info & ⵠΔⲆ) && ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ᐃⲆᐃΔ[Δᐃ]) ? 10022 : 10023 : ⵠ.ΔᐃΔⲆⲆ);
			ᐃⲆᐃΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ᐃⲆᐃΔ[Δᐃ].info >> 1)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆᐃⵠⵠ];
		for (var Δᐃ = ⲆⲆⵠⲆ; Δᐃ < ᐃⲆᐃΔ.length; Δᐃ++) {
			if (!(ᐃⲆᐃΔ[Δᐃ].info & 1)) ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ᐃⲆᐃΔ[Δᐃ]) ? 10024 : 10025 : ⵠ.ⲆⲆᐃⵠⵠ);
			ᐃⲆᐃΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ᐃⲆᐃΔ[Δᐃ].info >> ⲆΔᐃΔ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⵠⲆⵠ];
		for (var Δᐃ = ⵠⲆⵠ; Δᐃ < ᐃⲆᐃΔ.length; Δᐃ++) {
			!(ᐃⲆᐃΔ[Δᐃ].info & 1) && ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ᐃⲆᐃΔ[Δᐃ]) ? 10026 : 10027 : ⵠ.ⲆΔⵠⲆⵠ);
			ᐃⲆᐃΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ᐃⲆᐃΔ[Δᐃ].info >> 1)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⵠΔⲆ];
		for (var Δᐃ = ⵠᐃΔ; ᐃⲆᐃΔ.length > Δᐃ; Δᐃ++) {
			if (!(ᐃⲆᐃΔ[Δᐃ].info & 1)) ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ᐃⲆᐃΔ[Δᐃ]) ? 10028 : 10029 : ⵠ.ᐃⲆⵠΔⲆ);
			ᐃⲆᐃΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ᐃⲆᐃΔ[Δᐃ].info >> 1)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔΔⲆⲆ];
		for (var Δᐃ = ⲆⲆᐃΔ; Δᐃ < ᐃⲆᐃΔ.length; Δᐃ++) {
			!(ᐃⲆᐃΔ[Δᐃ].info & ΔⵠⲆ) && ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ᐃⲆᐃΔ[Δᐃ]) ? 10030 : 10031 : ⵠ.ⵠΔΔⲆⲆ);
			ᐃⲆᐃΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ᐃⲆᐃΔ[Δᐃ].info >> ΔΔⲆΔ)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠⵠⲆΔ];
		for (var Δᐃ = ⵠⲆⵠ; Δᐃ < ᐃⲆᐃΔ.length; Δᐃ++) {
			if (!(ᐃⲆᐃΔ[Δᐃ].info & ⲆΔᐃΔ)) ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ᐃⲆᐃΔ[Δᐃ]) ? 10032 : 10033 : ⵠ.ΔⵠⵠⲆΔ);
			ᐃⲆᐃΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ᐃⲆᐃΔ[Δᐃ].info >> 1)
		}
		var ᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔΔⲆᐃ];
		for (var Δᐃ = ⵠⵠΔΔ; Δᐃ < ᐃⲆᐃΔ.length; Δᐃ++) {
			if (!(ᐃⲆᐃΔ[Δᐃ].info & 1)) ⲆⲆⵠⵠ(ᐃⲆᐃΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ᐃⲆᐃΔ[Δᐃ]) ? 10034 : 10035 : ⵠ.ΔΔΔⲆᐃ);
			ᐃⲆᐃΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ᐃⲆᐃΔ[Δᐃ].info >> ⵠⲆⲆⲆ)
		}
		var ⵠⵠᐃᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆⲆⲆ];
		for (var Δᐃ = ⲆᐃⲆ; Δᐃ < ⵠⵠᐃᐃᐃ.length; Δᐃ++) {
			ⲆⲆⵠⵠ(ⵠⵠᐃᐃᐃ[Δᐃ], ⵠ.ⲆᐃⲆⲆⲆ);
			ⵠⵠᐃᐃᐃ[Δᐃ].ⵠⲆⲆⲆⲆ(ⵠⵠᐃᐃᐃ[Δᐃ].info)
		}
		var ⵠⵠᐃᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⵠΔⵠ];
		for (var Δᐃ = 0; ⵠⵠᐃᐃᐃ.length > Δᐃ; Δᐃ++) {
			ⲆⲆⵠⵠ(ⵠⵠᐃᐃᐃ[Δᐃ], ⵠ.ΔⲆⵠΔⵠ);
			ⵠⵠᐃᐃᐃ[Δᐃ].ⵠⲆⲆⲆⲆ(ⵠⵠᐃᐃᐃ[Δᐃ].info)
		}
		var ⵠⵠᐃᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠⵠΔ];
		for (var Δᐃ = 0; ⵠⵠᐃᐃᐃ.length > Δᐃ; Δᐃ++) {
			ⲆⲆⵠⵠ(ⵠⵠᐃᐃᐃ[Δᐃ], ⵠ.ⵠⲆⵠⵠΔ);
			ⵠⵠᐃᐃᐃ[Δᐃ].ⵠⲆⲆⲆⲆ(ⵠⵠᐃᐃᐃ[Δᐃ].info)
		}
		var ⵠⵠᐃᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠⵠⲆΔ];
		for (var Δᐃ = 0; ⵠⵠᐃᐃᐃ.length > Δᐃ; Δᐃ++) {
			ⲆⲆⵠⵠ(ⵠⵠᐃᐃᐃ[Δᐃ], ⵠ.ⲆⵠⵠⲆΔ);
			ⵠⵠᐃᐃᐃ[Δᐃ].ⵠⲆⲆⲆⲆ(ⵠⵠᐃᐃᐃ[Δᐃ].info)
		}
		var ⵠⵠᐃᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃΔᐃᐃ];
		for (var Δᐃ = ⵠΔΔᐃ; Δᐃ < ⵠⵠᐃᐃᐃ.length; Δᐃ++) {
			ⲆⲆⵠⵠ(ⵠⵠᐃᐃᐃ[Δᐃ], ⵠ.ᐃᐃΔᐃᐃ);
			ⵠⵠᐃᐃᐃ[Δᐃ].ⵠⲆⲆⲆⲆ(ⵠⵠᐃᐃᐃ[Δᐃ].info)
		}
		var ⵠⵠᐃᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⵠᐃΔ];
		for (var Δᐃ = 0; Δᐃ < ⵠⵠᐃᐃᐃ.length; Δᐃ++) {
			ⲆⲆⵠⵠ(ⵠⵠᐃᐃᐃ[Δᐃ], ⵠ.ⲆᐃⵠᐃΔ);
			ⵠⵠᐃᐃᐃ[Δᐃ].ⵠⲆⲆⲆⲆ(ⵠⵠᐃᐃᐃ[Δᐃ].info)
		}
		var ⲆᐃⵠⵠΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃⲆᐃ];
		for (var Δᐃ = 0; Δᐃ < ⲆᐃⵠⵠΔ.length; Δᐃ++) {
			ⲆⲆⵠⵠ(ⲆᐃⵠⵠΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃⵠⵠΔ[Δᐃ]) ? 10010 : 10011 : ⵠ.ᐃⵠᐃⲆᐃ);
			ⲆᐃⵠⵠΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ⲆᐃⵠⵠΔ[Δᐃ].info)
		}
		var ⲆᐃⵠⵠΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠΔᐃᐃ];
		for (var Δᐃ = 0; Δᐃ < ⲆᐃⵠⵠΔ.length; Δᐃ++) {
			ⲆⲆⵠⵠ(ⲆᐃⵠⵠΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃⵠⵠΔ[Δᐃ]) ? 10008 : 10009 : ⵠ.ⵠⵠΔᐃᐃ);
			ⲆᐃⵠⵠΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ⲆᐃⵠⵠΔ[Δᐃ].info)
		}
		var ⲆᐃⵠⵠΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃΔⵠⵠ];
		for (var Δᐃ = 0; Δᐃ < ⲆᐃⵠⵠΔ.length; Δᐃ++) {
			ⲆⲆⵠⵠ(ⲆᐃⵠⵠΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃⵠⵠΔ[Δᐃ]) ? 10006 : 10007 : ⵠ.ΔᐃΔⵠⵠ);
			ⲆᐃⵠⵠΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ⲆᐃⵠⵠΔ[Δᐃ].info)
		}
		var ⲆᐃⵠⵠΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆΔᐃᐃ];
		for (var Δᐃ = ⵠᐃΔ; ⲆᐃⵠⵠΔ.length > Δᐃ; Δᐃ++) {
			ⲆⲆⵠⵠ(ⲆᐃⵠⵠΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃⵠⵠΔ[Δᐃ]) ? 10004 : 10005 : ⵠ.ⲆⲆΔᐃᐃ);
			ⲆᐃⵠⵠΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ⲆᐃⵠⵠΔ[Δᐃ].info)
		}
		var ⲆᐃⵠⵠΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃΔΔⵠ];
		for (var Δᐃ = 0; Δᐃ < ⲆᐃⵠⵠΔ.length; Δᐃ++) {
			ⲆⲆⵠⵠ(ⲆᐃⵠⵠΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃⵠⵠΔ[Δᐃ]) ? 10002 : 10003 : ⵠ.ⵠᐃΔΔⵠ);
			ⲆᐃⵠⵠΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ⲆᐃⵠⵠΔ[Δᐃ].info)
		}
		var ⲆᐃⵠⵠΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠΔᐃ];
		for (var Δᐃ = ⵠⲆΔⵠ; ⲆᐃⵠⵠΔ.length > Δᐃ; Δᐃ++) {
			ⲆⲆⵠⵠ(ⲆᐃⵠⵠΔ[Δᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆᐃⵠⵠΔ[Δᐃ]) ? 1e4 : 10001 : ⵠ.ⵠⲆⵠΔᐃ);
			ⲆᐃⵠⵠΔ[Δᐃ].ⵠⲆⲆⲆⲆ(ⲆᐃⵠⵠΔ[Δᐃ].info)
		}
		var ᐃᐃⲆⵠⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⲆΔⵠ];
		for (var Δᐃ = ⲆⲆⵠⲆ; ᐃᐃⲆⵠⵠ.length > Δᐃ; Δᐃ++) {
			var Δⵠᐃ = ᐃᐃⲆⵠⵠ[Δᐃ];
			Δⵠᐃ.info > ⲆⲆⵠⲆ ? ⲆⲆⵠⵠ(Δⵠᐃ, ⵠ.ⲆΔΔⵠΔⵠⵠ) : ⲆⲆⵠⵠ(Δⵠᐃ, ⵠ.ⲆⲆⲆⲆⵠⲆⵠ)
		}
		var ᐃⲆⲆΔⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔΔⵠᐃ];
		for (var Δᐃ = 0; ᐃⲆⲆΔⲆ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ᐃⲆⲆΔⲆ[Δᐃ], ⵠ.ᐃΔΔⵠᐃ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ᐃⵠⵠᐃ, "g", 2);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⲆᐃⲆⵠΔ, Δ[8], ᐃⵠΔⲆ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⵠⲆᐃᐃ, "d", ⲆⲆΔΔ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⵠⲆᐃᐃⵠ, Δ[268], ⲆᐃᐃΔ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⲆⲆⲆᐃⵠ, "p", ΔΔⲆⲆ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ΔᐃΔⵠΔ, "m", ⵠᐃⵠⲆ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ᐃΔⲆᐃ, "a", ⲆᐃⵠⲆ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.Ⲇⵠⵠᐃ, Δ[156], 2);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.Δⵠᐃⵠᐃ, Δ[278], ⵠΔⲆΔΔ, 3);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.Δⵠᐃⵠᐃ, Δ[278], ᐃⲆᐃⵠ, 2);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.Δⵠᐃⵠᐃ, Δ[278], 1, ⲆⵠΔⲆ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.Δⵠᐃⵠᐃ, Δ[278], ⲆⲆⵠⲆ, 0);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ΔⵠΔᐃΔ, Δ[278], ᐃΔᐃⲆ, ΔⲆΔΔ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ΔⵠΔᐃΔ, Δ[278], ⵠⲆⵠΔ, ᐃΔⲆⵠ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ΔⵠΔᐃΔ, Δ[278], Δᐃᐃ, 1);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ΔⵠΔᐃΔ, Δ[278], 0, ⵠᐃⵠⵠ);
		var ⵠⲆⵠⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃΔᐃⵠ];
		for (var Δᐃ = ⵠⵠΔΔ; Δᐃ < ⵠⲆⵠⵠ.length; Δᐃ++) {
			for (var ᐃΔⵠⵠ = 0; ᐃΔⵠⵠ < ⵠⲆⵠⵠ[Δᐃ].info; ᐃΔⵠⵠ++) ⲆⲆⵠⵠ(ⵠⲆⵠⵠ[Δᐃ].ⵠⲆⵠⵠ[ᐃΔⵠⵠ], ⵠ.ᐃᐃΔᐃⵠ)
		}
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ᐃΔᐃⵠⵠ, "s", ⲆⲆⵠᐃ);
		var ᐃΔⲆΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠΔⵠⵠ];
		for (var Δᐃ = Δⵠⵠ; ᐃΔⲆΔ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ᐃΔⲆΔ[Δᐃ]);
		var ᐃΔⲆΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠⵠΔⵠ];
		for (var Δᐃ = 0; ᐃΔⲆΔ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ᐃΔⲆΔ[Δᐃ]);
		var ᐃΔⲆΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠⵠⵠΔ];
		for (var Δᐃ = 0; Δᐃ < ᐃΔⲆΔ.length; Δᐃ++) ⲆⲆⵠⵠ(ᐃΔⲆΔ[Δᐃ]);
		var ᐃΔⲆΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆᐃΔᐃ];
		for (var Δᐃ = 0; ᐃΔⲆΔ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ᐃΔⲆΔ[Δᐃ]);
		var ᐃΔⲆΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆΔᐃΔ];
		for (var Δᐃ = 0; Δᐃ < ᐃΔⲆΔ.length; Δᐃ++) ⲆⲆⵠⵠ(ᐃΔⲆΔ[Δᐃ]);
		var ⵠⲆⵠᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃᐃⵠᐃ];
		for (var Δᐃ = 0; Δᐃ < ⵠⲆⵠᐃ.length; Δᐃ++) ᐃᐃΔⲆΔΔΔ(ⵠⲆⵠᐃ[Δᐃ]);
		var ᐃⲆᐃΔⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠⲆⲆᐃ];
		for (var Δᐃ = ᐃΔΔ; ᐃⲆᐃΔⲆ.length > Δᐃ; Δᐃ++) ⲆΔᐃⲆΔᐃΔ(ᐃⲆᐃΔⲆ[Δᐃ]);
		var ᐃⲆᐃΔⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⲆΔᐃ];
		for (var Δᐃ = ⵠᐃΔ; Δᐃ < ᐃⲆᐃΔⲆ.length; Δᐃ++) ⲆΔᐃⲆΔᐃΔ(ᐃⲆᐃΔⲆ[Δᐃ]);
		var ΔⵠⲆⵠⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.Δⵠⵠⵠⵠ];
		for (var Δᐃ = 0; ΔⵠⲆⵠⵠ.length > Δᐃ; Δᐃ++) {
			ⵠⲆⵠΔ == ΔⵠⲆⵠⵠ[Δᐃ].action && ⲆΔᐃⲆΔᐃΔ(ΔⵠⲆⵠⵠ[Δᐃ])
		}
		var ΔᐃΔᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆᐃⲆᐃ];
		for (var Δᐃ = ⵠⵠΔᐃ; ΔᐃΔᐃ.length > Δᐃ; Δᐃ++) {
			ⲆΔᐃⲆΔᐃΔ(ΔᐃΔᐃ[Δᐃ])
		}
		var ⵠΔᐃᐃᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⲆΔᐃ];
		for (var Δᐃ = 0; Δᐃ < ⵠΔᐃᐃᐃ.length; Δᐃ++) ⲆΔᐃⲆΔᐃΔ(ⵠΔᐃᐃᐃ[Δᐃ]);
		var ᐃⲆⵠΔΔΔⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔⵠⲆⵠ];
		for (var Δᐃ = 0; Δᐃ < ᐃⲆⵠΔΔΔⵠ.length; Δᐃ++) {
			ⲆΔᐃⲆΔᐃΔ(ᐃⲆⵠΔΔΔⵠ[Δᐃ]);
			ᐃⲆⵠΔΔΔⵠ[Δᐃ].ⵠⲆⲆⲆⲆ(ᐃⲆⵠΔΔΔⵠ[Δᐃ].info)
		}
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⵠⵠⲆᐃⲆ, "c", 0);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ΔⲆⵠᐃ, "t", 5, 4);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⵠⲆᐃᐃᐃ, "f", ΔⲆᐃⲆ, ⵠⲆⵠΔ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ᐃⵠⵠᐃⵠ, Δ[218], ⵠⲆᐃ, 0);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⲆⵠⵠᐃⲆ, "b", ᐃΔΔΔ, ⵠⲆⵠΔ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ΔⲆⵠᐃ, "t", 3, ᐃⲆᐃⵠ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⲆⵠⵠᐃⲆ, "b", ⵠⵠⵠΔ, 0);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⵠⲆᐃᐃᐃ, "f", 1, 1);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ᐃⵠⵠᐃⵠ, Δ[218], ⲆΔⲆⵠ, ⲆⵠΔⲆ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ΔⲆⵠᐃ, "t", ⵠΔⲆ, ΔΔⲆⲆ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⵠⲆᐃᐃᐃ, "f", ⵠⵠΔΔ, ᐃⲆⵠΔ);
		ⵠᐃᐃᐃ(ⲆΔΔⵠᐃ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ᐃⵠⵠᐃⵠ, Δ[218], 2, ΔᐃΔⲆ);
		var ⵠⲆⵠᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃᐃⵠᐃ];
		for (var Δᐃ = ⲆⲆⵠⲆ; Δᐃ < ⵠⲆⵠᐃ.length; Δᐃ++) ⲆΔᐃⲆΔᐃΔ(ⵠⲆⵠᐃ[Δᐃ]);
		var ᐃᐃᐃᐃΔⲆᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆΔᐃ];
		for (var Δᐃ = 0; ᐃᐃᐃᐃΔⲆᐃ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ᐃᐃᐃᐃΔⲆᐃ[Δᐃ], ⵠ.ⲆᐃⲆΔᐃ);
		var ⵠⲆΔᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ];
		for (var Δᐃ = ΔᐃΔ; ⵠⲆΔᐃ.length > Δᐃ; Δᐃ++) {
			var ΔⵠΔ = ⵠⲆΔᐃ[Δᐃ];
			if (1 === ΔⵠΔ.ᐃᐃᐃᐃΔⲆᐃ && (180 > ΔⵠΔ.ΔⲆⵠⵠΔ || Ⲇᐃ.ⵠᐃⲆΔⲆ !== ΔⵠΔ.ⵠⵠΔⵠΔ && Ⲇᐃ.ⲆΔᐃⲆΔ !== ΔⵠΔ.ⵠⵠΔⵠΔ && ΔⵠΔ.ⵠⵠΔⵠΔ !== Ⲇᐃ.ⲆⲆⲆΔⲆ && Ⲇᐃ.ΔⲆⵠΔᐃ !== ΔⵠΔ.ⵠⵠΔⵠΔ && ΔⵠΔ.ⵠⵠΔⵠΔ !== Ⲇᐃ.ⵠⲆⲆΔᐃ)) {
				ΔⵠΔ.ΔⵠᐃⲆⲆΔΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(ΔⵠΔ.ΔⵠᐃⲆⲆΔΔ, ᐃⵠⲆⲆⲆ, .018);
				var ΔⵠⵠⲆ = 1 + Math.min(1, Math.max(ΔⵠΔ.ΔⵠᐃⲆⲆΔΔ, ᐃΔΔ) / 100) * .18;
				ᐃ.save();
				ᐃ.scale(ΔⵠⵠⲆ, ΔⵠⵠⲆ);
				ⵠⵠⵠ.ᐃⵠⲆ.x /= ΔⵠⵠⲆ;
				ⵠⵠⵠ.ᐃⵠⲆ.y /= ΔⵠⵠⲆ;
				ΔⵠΔ.x /= ΔⵠⵠⲆ;
				ΔⵠΔ.y /= ΔⵠⵠⲆ;
				ΔⵠΔ.r.x /= ΔⵠⵠⲆ;
				ΔⵠΔ.r.y /= ΔⵠⵠⲆ;
				ΔⵠΔ.ⵠⵠⵠΔΔⲆᐃ();
				ΔⵠΔ.ⲆᐃᐃⲆ();
				ⵠⵠⵠ.ᐃⵠⲆ.x *= ΔⵠⵠⲆ;
				ⵠⵠⵠ.ᐃⵠⲆ.y *= ΔⵠⵠⲆ;
				ΔⵠΔ.x *= ΔⵠⵠⲆ;
				ΔⵠΔ.y *= ΔⵠⵠⲆ;
				ΔⵠΔ.r.x *= ΔⵠⵠⲆ;
				ΔⵠΔ.r.y *= ΔⵠⵠⲆ;
				ᐃ.restore()
			}
		}
		var ⵠΔⲆΔᐃᐃⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠᐃΔ];
		for (var Δᐃ = 0; ⵠΔⲆΔᐃᐃⵠ.length > Δᐃ; Δᐃ++) {
			ⲆⲆⵠⵠ(ⵠΔⲆΔᐃᐃⵠ[Δᐃ], ⵠ.ⵠΔⵠᐃΔ);
			ⵠΔⲆΔᐃᐃⵠ[Δᐃ].ⵠⲆⲆⲆⲆ(ⵠΔⲆΔᐃᐃⵠ[Δᐃ].info)
		}
		var ⵠⵠⲆⵠΔᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃΔⵠᐃ];
		for (var Δᐃ = 0; Δᐃ < ⵠⵠⲆⵠΔᐃΔ.length; Δᐃ++) ⲆⲆⵠⵠ(ⵠⵠⲆⵠΔᐃΔ[Δᐃ], ⵠ.ⲆᐃΔⵠᐃ, ⵠ.ΔⵠᐃⵠⲆΔΔ);
		var ΔⲆᐃᐃⲆᐃΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠⵠⲆᐃ];
		for (var Δᐃ = ᐃΔΔ; ΔⲆᐃᐃⲆᐃΔ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ΔⲆᐃᐃⲆᐃΔ[Δᐃ], ⵠ.ⲆⵠⵠⲆᐃ);
		var ⵠⲆΔᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ];
		for (var Δᐃ = ⵠⵠΔᐃ; Δᐃ < ⵠⲆΔᐃ.length; Δᐃ++) {
			var ΔⵠΔ = ⵠⲆΔᐃ[Δᐃ];
			if ((ΔⵠΔ.ⵠⵠΔⵠΔ === Ⲇᐃ.ⵠᐃⲆΔⲆ || Ⲇᐃ.ⲆΔᐃⲆΔ === ΔⵠΔ.ⵠⵠΔⵠΔ || Ⲇᐃ.ⲆⲆⲆΔⲆ === ΔⵠΔ.ⵠⵠΔⵠΔ || ΔⵠΔ.ⵠⵠΔⵠΔ === Ⲇᐃ.ΔⲆⵠΔᐃ || ΔⵠΔ.ⵠⵠΔⵠΔ === Ⲇᐃ.ⵠⲆⲆΔᐃ) && 180 < ΔⵠΔ.ΔⲆⵠⵠΔ) {
				ΔⵠΔ.ⲆⵠⲆⵠⲆᐃⲆ = ΔΔⲆΔ;
				ᐃ.save();
				var ΔⵠⵠⲆ = 1 + .35 * Math.min(1, Math.max(ΔⵠΔ.ΔⵠⲆⵠΔ - 30, 0) / 180);
				ᐃ.scale(ΔⵠⵠⲆ, ΔⵠⵠⲆ);
				ⵠⵠⵠ.ᐃⵠⲆ.x /= ΔⵠⵠⲆ;
				ⵠⵠⵠ.ᐃⵠⲆ.y /= ΔⵠⵠⲆ;
				ΔⵠΔ.x /= ΔⵠⵠⲆ;
				ΔⵠΔ.y /= ΔⵠⵠⲆ;
				ΔⵠΔ.r.x /= ΔⵠⵠⲆ;
				ΔⵠΔ.r.y /= ΔⵠⵠⲆ;
				ΔⵠΔ.ⵠⵠⵠΔΔⲆᐃ();
				ΔⵠΔ.ⲆᐃᐃⲆ();
				ⵠⵠⵠ.ᐃⵠⲆ.x *= ΔⵠⵠⲆ;
				ⵠⵠⵠ.ᐃⵠⲆ.y *= ΔⵠⵠⲆ;
				ΔⵠΔ.x *= ΔⵠⵠⲆ;
				ΔⵠΔ.y *= ΔⵠⵠⲆ;
				ΔⵠΔ.r.x *= ΔⵠⵠⲆ;
				ΔⵠΔ.r.y *= ΔⵠⵠⲆ;
				ᐃ.restore()
			}
		}
		var ⵠⲆΔⵠⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆⵠⵠ];
		for (var Δᐃ = 0; Δᐃ < ⵠⲆΔⵠⵠ.length; Δᐃ++) {
			ΔΔⲆΔ === ⵠⲆΔⵠⵠ[Δᐃ].ⲆⵠⲆⵠⲆᐃⲆ && ⲆⲆⵠⵠ(ⵠⲆΔⵠⵠ[Δᐃ])
		}
		var ΔᐃᐃΔΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆΔⲆ];
		for (var Δᐃ = 0; Δᐃ < ΔᐃᐃΔΔ.length; Δᐃ++) {
			if (1 < ΔᐃᐃΔΔ[Δᐃ].scale) ⲆⲆⵠⵠ(ΔᐃᐃΔΔ[Δᐃ], ⵠ.ⵠⵠⲆΔⲆ, ⵠ.ΔⵠⵠᐃⵠᐃⲆ)
		}
		var ΔᐃᐃΔΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃΔⲆᐃ];
		for (var Δᐃ = ⵠⲆᐃ; Δᐃ < ΔᐃᐃΔΔ.length; Δᐃ++) {
			ΔᐃᐃΔΔ[Δᐃ].scale > ⵠΔⲆ && ⲆⲆⵠⵠ(ΔᐃᐃΔΔ[Δᐃ], ⵠ.ⲆᐃΔⲆᐃ, ⵠ.ⲆΔⵠᐃⵠⵠᐃ)
		}
		var ΔⵠᐃⲆΔⵠⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⵠΔᐃ];
		for (var Δᐃ = ⵠΔⵠⲆ; Δᐃ < ΔⵠᐃⲆΔⵠⵠ.length; Δᐃ++) ⲆⲆⵠⵠ(ΔⵠᐃⲆΔⵠⵠ[Δᐃ], ⵠ.ΔⲆⵠΔᐃ, ⵠ.ᐃⵠⵠⵠⲆⲆⲆ);
		var ΔⵠᐃᐃⵠΔⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠΔᐃⵠ];
		for (var Δᐃ = ΔΔⲆⲆ; ΔⵠᐃᐃⵠΔⲆ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ΔⵠᐃᐃⵠΔⲆ[Δᐃ], ⵠ.ⵠⵠΔᐃⵠ, ⵠ.ⲆΔⵠᐃΔⵠⵠ);
		ⵠⲆⵠᐃⲆⲆⵠ += ΔᐃⲆⲆ * 15;
		if (60 < ⵠⲆⵠᐃⲆⲆⵠ) ⵠⲆⵠᐃⲆⲆⵠ -= 60;
		Settings.NoFog.enabled || ⵠᐃᐃᐃ(ⵠⵠⵠᐃᐃⵠⲆ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ΔⲆΔⲆΔ, Δ[106], ⲆⲆᐃⲆ);
		Settings.NoFog.enabled || ⵠᐃᐃᐃ(ⵠⵠⵠᐃᐃⵠⲆ, ⲆᐃΔⵠ, ᐃⲆΔΔ, ⵠⲆᐃⵠ, ⲆⲆΔᐃ, ⵠ.ⲆΔΔΔᐃ, Δ[311], 2);
		if (Settings.PlayerOnTop.enabled) {
			var ⵠⲆΔᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ];
			for (var Δᐃ = ⵠᐃΔ; Δᐃ < ⵠⲆΔᐃ.length; Δᐃ++) {
				var ΔⵠΔ = ⵠⲆΔᐃ[Δᐃ];
				if (ⵠⲆΔᐃ[Δᐃ].ⵠⵠΔⵠΔ !== Ⲇᐃ.ⵠᐃⲆΔⲆ && Ⲇᐃ.ⲆΔᐃⲆΔ !== ⵠⲆΔᐃ[Δᐃ].ⵠⵠΔⵠΔ && ⵠⲆΔᐃ[Δᐃ].ⵠⵠΔⵠΔ !== Ⲇᐃ.ΔⲆⵠΔᐃ && ⵠⲆΔᐃ[Δᐃ].ⵠⵠΔⵠΔ !== Ⲇᐃ.ⵠⲆⲆΔᐃ && Ⲇᐃ.ⲆⲆⲆΔⲆ !== ⵠⲆΔᐃ[Δᐃ].ⵠⵠΔⵠΔ) {
					if (ΔⵠΔ.ᐃᐃᐃᐃΔⲆᐃ === 0) {
						if (.001 < ΔⵠΔ.ΔⵠᐃⲆⲆΔΔ) {
							ΔⵠΔ.ΔⵠᐃⲆⲆΔΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(ΔⵠΔ.ΔⵠᐃⲆⲆΔΔ, 0, .018);
							var ΔⵠⵠⲆ = ⲆΔᐃΔ + .18 * Math.min(ⵠⲆⲆⲆ, Math.max(ΔⵠΔ.ΔⵠᐃⲆⲆΔΔ, ⲆⲆⵠⲆ) / ⵠⲆⲆⵠᐃΔᐃ);
							ᐃ.save();
							ᐃ.scale(ΔⵠⵠⲆ, ΔⵠⵠⲆ);
							ⵠⵠⵠ.ᐃⵠⲆ.x /= ΔⵠⵠⲆ;
							ⵠⵠⵠ.ᐃⵠⲆ.y /= ΔⵠⵠⲆ;
							ΔⵠΔ.x /= ΔⵠⵠⲆ;
							ΔⵠΔ.y /= ΔⵠⵠⲆ;
							ΔⵠΔ.r.x /= ΔⵠⵠⲆ;
							ΔⵠΔ.r.y /= ΔⵠⵠⲆ;
							ΔⵠΔ.ⵠⵠⵠΔΔⲆᐃ();
							ΔⵠΔ.ⲆᐃᐃⲆ();
							ⵠⵠⵠ.ᐃⵠⲆ.x *= ΔⵠⵠⲆ;
							ⵠⵠⵠ.ᐃⵠⲆ.y *= ΔⵠⵠⲆ;
							ΔⵠΔ.x *= ΔⵠⵠⲆ;
							ΔⵠΔ.y *= ΔⵠⵠⲆ;
							ΔⵠΔ.r.x *= ΔⵠⵠⲆ;
							ΔⵠΔ.r.y *= ΔⵠⵠⲆ;
							ᐃ.restore()
						} else {
							ΔⵠΔ.ⲆⵠⲆⵠⲆᐃⲆ = ⲆΔⵠΔ;
							ΔⵠΔ.ⵠⵠⵠΔΔⲆᐃ();
							ΔⵠΔ.ⲆᐃᐃⲆ()
						}
					}
				} else if (180 >= ΔⵠΔ.ΔⲆⵠⵠΔ) {
					ᐃ.save();
					var ΔⵠⵠⲆ = ᐃΔⵠΔ + Math.min(1, Math.max(ΔⵠΔ.ΔⵠⲆⵠΔ - 30, ΔᐃΔ) / 180) * .35;
					ᐃ.scale(ΔⵠⵠⲆ, ΔⵠⵠⲆ);
					ⵠⵠⵠ.ᐃⵠⲆ.x /= ΔⵠⵠⲆ;
					ⵠⵠⵠ.ᐃⵠⲆ.y /= ΔⵠⵠⲆ;
					ΔⵠΔ.x /= ΔⵠⵠⲆ;
					ΔⵠΔ.y /= ΔⵠⵠⲆ;
					ΔⵠΔ.r.x /= ΔⵠⵠⲆ;
					ΔⵠΔ.r.y /= ΔⵠⵠⲆ;
					ΔⵠΔ.ⲆⵠⲆⵠⲆᐃⲆ = 0;
					ΔⵠΔ.ⵠⵠⵠΔΔⲆᐃ();
					ΔⵠΔ.ⲆᐃᐃⲆ();
					ⵠⵠⵠ.ᐃⵠⲆ.x *= ΔⵠⵠⲆ;
					ⵠⵠⵠ.ᐃⵠⲆ.y *= ΔⵠⵠⲆ;
					ΔⵠΔ.x *= ΔⵠⵠⲆ;
					ΔⵠΔ.y *= ΔⵠⵠⲆ;
					ΔⵠΔ.r.x *= ΔⵠⵠⲆ;
					ΔⵠΔ.r.y *= ΔⵠⵠⲆ;
					ᐃ.restore()
				}
			}
		}
		if (Settings.BoxOnTop.enabled) {
			var ⵠⵠΔⲆⲆ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆⵠᐃ];
			for (var Δᐃ = ⵠᐃΔⲆ; ⵠⵠΔⲆⲆ.length > Δᐃ; Δᐃ++) ⲆⲆⵠⵠ(ⵠⵠΔⲆⲆ[Δᐃ], ⵠ.ⵠⵠⲆⵠᐃ, ⵠ.ⵠⲆᐃⵠᐃᐃᐃ);
			var ⵠⵠΔⵠΔⲆⵠ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃΔⵠᐃᐃ];
			for (var Δᐃ = 0; Δᐃ < ⵠⵠΔⵠΔⲆⵠ.length; Δᐃ++) ⲆⲆⵠⵠ(ⵠⵠΔⵠΔⲆⵠ[Δᐃ], ⵠ.ⵠⵠⲆⵠᐃ, ⵠ.ⵠⲆᐃⵠᐃᐃᐃ);
			var ΔⵠⲆⵠⲆⵠΔ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃᐃⵠΔ];
			for (var Δᐃ = ᐃΔΔ; Δᐃ < ΔⵠⲆⵠⲆⵠΔ.length; Δᐃ++) ⲆⲆⵠⵠ(ΔⵠⲆⵠⲆⵠΔ[Δᐃ], ⵠ.ΔᐃᐃⵠΔ, ⵠ.ⲆᐃⲆⵠᐃᐃΔ)
		}
		const ctx = ᐃ;
		const worldUnits = getWorldUnitsProperty();
		const fastUnits = getWorldFastUnitsProperty();
		const uid = getUserUidProperty();
		const cam = getUserCamProperty();
		if (worldUnits && fastUnits && uid) {
			const me = fastUnits[uid];
			const chests = worldUnits[11];
			const players = worldUnits[0];
			window.PLAYERS = players;
			const sandworms = worldUnits[76];
			const krakens = worldUnits[66];
			const ovens = worldUnits[34];
			const windmills = worldUnits[32];
			const deadBoxes = worldUnits[82];
			const dropBoxes = worldUnits[86];
			const gifts = worldUnits[87];
			const allBoxes = [deadBoxes, dropBoxes, gifts];
			const totems = worldUnits[29];
			const furnaces = worldUnits[18];
			const machines = worldUnits[23];
			const extractors = [worldUnits[24], worldUnits[25], worldUnits[26], worldUnits[27], worldUnits[28]];
			if (Settings.PlayerTracers.enabled && me) {
				if (players.length - 1 > 0) {
					ctx.save();
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#ffffff";
					ctx.font = "20px Baloo Paaji";
					ctx.lineWidth = 5;
					ctx.strokeText("Players amount: " + (players.length - 1), 20, 480);
					ctx.fillText("Players amount: " + (players.length - 1), 20, 480);
					ctx.restore();
					players.forEach((player => {
						ctx.save();
						ctx.beginPath();
						ctx.strokeStyle = isAlly(player) ? "#00ffff" : "#ff0000";
						ctx.lineWidth = 3;
						ctx.moveTo(me.x + cam.x, me.y + cam.y);
						ctx.lineTo(player.x + cam.x, player.y + cam.y);
						ctx.stroke();
						ctx.restore()
					}))
				}
			}
			if (Settings.KrakenTracers.enabled && me) {
				if (krakens.length > 0) {
					ctx.save();
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#ffffff";
					ctx.font = "20px Baloo Paaji";
					ctx.lineWidth = 5;
					ctx.strokeText("Krakens amount: " + krakens.length, 20, 500);
					ctx.fillText("Krakens amount: " + krakens.length, 20, 500);
					ctx.restore();
					krakens.forEach((kraken => {
						ctx.save();
						ctx.beginPath();
						ctx.strokeStyle = "#440b8a";
						ctx.lineWidth = 3;
						ctx.moveTo(me.x + cam.x, me.y + cam.y);
						ctx.lineTo(kraken.x + cam.x, kraken.y + cam.y);
						ctx.stroke();
						ctx.restore()
					}))
				}
			}
			if (Settings.SandwormTracers.enabled && me) {
				if (sandworms.length > 0) {
					ctx.save();
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#ffffff";
					ctx.font = "20px Baloo Paaji";
					ctx.lineWidth = 5;
					ctx.strokeText("Sandworms amount: " + sandworms.length, 20, 520);
					ctx.fillText("Sandworms amount: " + sandworms.length, 20, 520);
					ctx.restore();
					sandworms.forEach((sandworm => {
						ctx.save();
						ctx.beginPath();
						ctx.strokeStyle = "#000000";
						ctx.lineWidth = 3;
						ctx.moveTo(me.x + cam.x, me.y + cam.y);
						ctx.lineTo(sandworm.x + cam.x, sandworm.y + cam.y);
						ctx.stroke();
						ctx.restore()
					}))
				}
			}
			if (Settings.Debugger.enabled) {
				const debuggerBuilds = [];
				for (let i = 1; i < 100; i++) debuggerBuilds.push(worldUnits[i]);
				for (let i = 0; i < debuggerBuilds.length; i++) {
					if (Array.isArray(debuggerBuilds[i])) {
						debuggerBuilds[i].forEach((debuggerBuild => {
							if (debuggerBuild.pid) {
								ctx.save();
								ctx.lineWidth = 8;
								ctx.strokeStyle = "#000";
								ctx.fillStyle = "#fff";
								ctx.font = "22px Baloo Paaji";
								ctx.strokeText(player(debuggerBuild), debuggerBuild.x + cam.x - 25, debuggerBuild.y + cam.y);
								ctx.fillText(player(debuggerBuild), debuggerBuild.x + cam.x - 25, debuggerBuild.y + cam.y);
								ctx.restore()
							}
						}))
					}
				}
			}
			if (Settings.ListEnabledHacks.enabled) {
				let y = 300;
				for (const property in Settings) {
					if (Settings[property].enabled && Settings[property].draw) {
						ctx.save();
						ctx.font = "22px Baloo Paaji";
						ctx.fillStyle = "darkorange";
						ctx.strokeStyle = "red";
						ctx.lineWidth = 5;
						ctx.strokeText(property, 12, y);
						ctx.fillText(property, 12, y);
						ctx.restore();
						y += 20
					}
				}
			}
			if (Settings.ShowJoinLeaves.enabled) {
				let JoinedPlayersY = 540;
				let KilledPlayersY = 640;
				for (let i = 0; i < JoinedPlayers.length; i++) {
					const JoinedPlayer = JoinedPlayers[i];
					ctx.save();
					ctx.strokeStyle = "#000000";
					ctx.fillStyle = "green";
					ctx.lineWidth = 7;
					ctx.font = "18px Baloo Paaji";
					ctx.strokeText(JoinedPlayer, 6, JoinedPlayersY);
					ctx.fillText(JoinedPlayer, 6, JoinedPlayersY);
					JoinedPlayersY += 20
				}
				for (let i = 0; i < KilledPlayers.length; i++) {
					const KilledPlayer = KilledPlayers[i];
					ctx.save();
					ctx.strokeStyle = "#000000";
					ctx.fillStyle = "red";
					ctx.lineWidth = 7;
					ctx.font = "18px Baloo Paaji";
					ctx.strokeText(KilledPlayer, 6, KilledPlayersY);
					ctx.fillText(KilledPlayer, 6, KilledPlayersY);
					KilledPlayersY += 20
				}
			}
			if (Settings.ExtractorInfo.enabled) {
				for (let ex = 0; ex < extractors.length; ex++) {
					extractors[ex].forEach((extractor => {
						ctx.save();
						ctx.strokeStyle = "#000000";
						ctx.fillStyle = "#ffffff";
						ctx.lineWidth = 7;
						ctx.font = "20px Baloo Paaji";
						ctx.strokeText((extractor.info & 255) + "x", cam.x + extractor.x - 20, cam.y + extractor.y - 5);
						ctx.fillText((extractor.info & 255) + "x", cam.x + extractor.x - 20, cam.y + extractor.y - 5);
						ctx.strokeText(((extractor.info & 65280) >> 8) + "x", cam.x + extractor.x - 20, cam.y + extractor.y + 15);
						ctx.fillText(((extractor.info & 65280) >> 8) + "x", cam.x + extractor.x - 20, cam.y + extractor.y + 15);
						ctx.restore()
					}))
				}
			}
			if (Settings.WindmillInfo.enabled) {
				windmills.forEach((windmill => {
					ctx.save();
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.lineWidth = 7;
					ctx.font = "24px Baloo Paaji";
					ctx.strokeText((windmill.info & 255) + "x", cam.x + windmill.x - 20, cam.y + windmill.y - 5);
					ctx.fillText((windmill.info & 255) + "x", cam.x + windmill.x - 20, cam.y + windmill.y - 5);
					ctx.strokeText(((windmill.info & 65280) >> 8) + "x", cam.x + windmill.x - 20, cam.y + windmill.y + 15);
					ctx.fillText(((windmill.info & 65280) >> 8) + "x", cam.x + windmill.x - 20, cam.y + windmill.y + 15);
					ctx.restore()
				}))
			}
			if (Settings.OvenInfo.enabled) {
				ovens.forEach((oven => {
					ctx.save();
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.lineWidth = 7;
					ctx.font = "24px Baloo Paaji";
					ctx.strokeText((oven.info & 31) + "x", cam.x + oven.x - 20, cam.y + oven.y - 15);
					ctx.fillText((oven.info & 31) + "x", cam.x + oven.x - 20, cam.y + oven.y - 15);
					ctx.strokeText(((oven.info & 992) >> 5) + "x", cam.x + oven.x - 20, cam.y + oven.y + 5);
					ctx.fillText(((oven.info & 992) >> 5) + "x", cam.x + oven.x - 20, cam.y + oven.y + 5);
					ctx.strokeText(((oven.info & 31744) >> 10) + "x", cam.x + oven.x - 20, cam.y + oven.y + 25);
					ctx.fillText(((oven.info & 31744) >> 10) + "x", cam.x + oven.x - 20, cam.y + oven.y + 25);
					ctx.restore()
				}))
			}
			if (Settings.TotemInfo.enabled) {
				totems.forEach((totem => {
					ctx.save();
					ctx.lineWidth = 8;
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.font = "22px Baloo Paaji";
					ctx.strokeText(player(totem), totem.x + cam.x - 25, totem.y + cam.y);
					ctx.fillText(player(totem), totem.x + cam.x - 25, totem.y + cam.y);
					ctx.strokeText(totem.info >= 16 ? totem.info % 16 : totem.info, totem.x + cam.x - 25, totem.y + cam.y + 20);
					ctx.fillText(totem.info >= 16 ? totem.info % 16 : totem.info, totem.x + cam.x - 25, totem.y + cam.y + 20);
					ctx.strokeText(totem.info >= 16 ? "L" : "U", totem.x + cam.x - 25, totem.y + cam.y + 40);
					ctx.fillText(totem.info >= 16 ? "L" : "U", totem.x + cam.x - 25, totem.y + cam.y + 40);
					ctx.restore()
				}))
			}
			if (Settings.FurnaceInfo.enabled) {
				furnaces.forEach((furnace => {
					ctx.save();
					ctx.lineWidth = 8;
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.font = "22px Baloo Paaji";
					ctx.strokeText(furnace.info + "x", furnace.x + cam.x - 25, furnace.y + cam.y);
					ctx.fillText(furnace.info + "x", furnace.x + cam.x - 25, furnace.y + cam.y);
					ctx.restore()
				}))
			}
			if (Settings.MachineInfo.enabled) {
				machines.forEach((machine => {
					ctx.save();
					ctx.lineWidth = 8;
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.font = "22px Baloo Paaji";
					ctx.strokeText(player(machine), machine.x + cam.x - 25, machine.y + cam.y);
					ctx.fillText(player(machine), machine.x + cam.x - 25, machine.y + cam.y);
					ctx.restore()
				}))
			}
			if (Settings.ChestInfo.enabled) {
				chests.forEach((chest => {
					if (chest.action) {
						ctx.save();
						ctx.globalAlpha = .9;
						ctxDrawImage(ctx, ⲆΔᐃᐃ.ⵠⵠΔ[chest.action / 2 - 1].info.ⵠΔ[0], cam.x + chest.x - 33, cam.y + chest.y - 25, 67, 52);
						ctx.globalAlpha = 1;
						ctx.font = "20px Baloo Paaji";
						ctx.strokeStyle = "rgb(0,0,0)";
						ctx.lineWidth = 7;
						ctx.strokeText(chest.action / 2 - 1, cam.x + chest.x - 32, cam.y + chest.y - 12);
						ctx.strokeText("x" + chest.info, cam.x + chest.x - 32, cam.y + chest.y + 20);
						ctx.fillStyle = chest.lock ? "rgb(255,0,0)" : "rgb(255,255,255)";
						ctx.fillText(chest.action / 2 - 1, cam.x + chest.x - 32, cam.y + chest.y - 12);
						ctx.fillText("x" + chest.info, cam.x + chest.x - 32, cam.y + chest.y + 20);
						ctx.restore()
					}
				}))
			}
			if (Settings.BoxInfo.enabled) {
				for (let i = 0; i < allBoxes.length; i++) {
					allBoxes[i].forEach((box => {
						ctx.save();
						ctx.lineWidth = 8;
						ctx.strokeStyle = "#000";
						ctx.fillStyle = "#fff";
						ctx.font = "18px Baloo Paaji";
						if (box.boxType) {
							ctx.strokeText(box.boxType, box.x + cam.x - 20, box.y + cam.y);
							ctx.fillText(box.boxType, box.x + cam.x - 20, box.y + cam.y)
						}
						if (box.disappearTime) {
							var n = Math.floor((box.disappearTime - +new Date) / 1e3),
								a = 0;
							a = n < 10 ? 9 : n < 99 ? 12 : 18
						}
						ctx.strokeText(n + "s", box.x + cam.x - 20, box.y + cam.y + 20);
						ctx.fillText(n + "s", box.x + cam.x - 20, box.y + cam.y + 20);
						ctx.restore()
					}))
				}
			}
		}
	}

	function ᐃⵠᐃΔⲆΔⵠ(ᐃΔΔᐃⲆ, ⵠᐃᐃⵠⲆ, ⵠΔⲆᐃᐃ, ΔⵠᐃΔ, ⲆΔΔⵠ, ᐃΔⵠᐃ) {
		var w1 = ΔⵠᐃΔ.w1;
		var w2 = ΔⵠᐃΔ.w2;
		var w3 = ΔⵠᐃΔ.w3;
		var ⲆΔΔᐃ = ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃΔΔᐃⲆ + 710;
		var ⲆᐃΔⵠΔ = Math.max(ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠᐃᐃⵠⲆ, ⲆⲆᐃΔ);
		var ⵠΔᐃⲆᐃ = Math.max(-ⵠⵠⵠ.ᐃⵠⲆ.x + ⲆΔⲆᐃ - ⵠΔⲆᐃᐃ - ⵠᐃⵠⲆⲆ, 0);
		var ΔΔᐃⵠ = ⲆᐃΔⵠΔ;
		var ⵠΔᐃΔⵠ = ⲆΔⲆᐃ - ⲆᐃΔⵠΔ - ⵠΔᐃⲆᐃ;
		if (ᐃΔⵠᐃ) var ΔᐃᐃⲆⲆ = ΔⵠᐃΔ.ΔⲆᐃ(w1).x;
		else var ΔᐃᐃⲆⲆ = w1.r.x;
		var ⵠⲆᐃⲆ = ⲆΔΔᐃ + ⵠΔᐃⲆ.ⵠᐃⵠⵠᐃ;
		var ⵠΔᐃⵠⲆ = ⵠⲆᐃⲆ,
			ⵠⲆᐃⲆⲆ = ΔΔᐃⵠ,
			ᐃᐃⲆΔⲆ = -ΔᐃᐃⲆⲆ + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ,
			Δᐃⵠᐃⵠ = ⵠΔᐃΔⵠ;
		ⵠⲆᐃⲆ += -ΔᐃᐃⲆⲆ + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ + 2;
		var ᐃⲆᐃᐃⲆ = ⵠⲆᐃⲆ;
		if (ᐃΔⵠᐃ) var ΔᐃᐃⲆⲆ = ΔⵠᐃΔ.ΔⲆᐃ(w2).x;
		else var ΔᐃᐃⲆⲆ = w2.r.x;
		var d2 = ⲆΔΔᐃ - ⵠΔᐃⲆ.ΔᐃⲆᐃⵠ - ⵠⲆᐃⲆ - ΔᐃᐃⲆⲆ;
		var ⲆⲆᐃⲆΔ = ⵠⲆᐃⲆ,
			ΔΔⵠΔᐃ = ΔΔᐃⵠ,
			ΔⲆᐃΔⵠ = d2,
			ᐃⲆᐃⵠᐃ = ⵠΔᐃΔⵠ;
		ⵠⲆᐃⲆ += d2 + Δᐃᐃⵠ;
		var ᐃⵠⵠⲆΔ = ⵠⲆᐃⲆ - Δᐃᐃⵠ;
		if (ᐃΔⵠᐃ) var ΔᐃᐃⲆⲆ = ΔⵠᐃΔ.ΔⲆᐃ(w3).x;
		else var ΔᐃᐃⲆⲆ = w3.r.x;
		d2 = ⲆΔΔᐃ - ⵠΔᐃⲆ.ᐃΔⵠⵠⲆ - ⵠⲆᐃⲆ - ΔᐃᐃⲆⲆ;
		if (ᐃⵠⵠⲆΔ > ⵠⲆᐃⲆ + d2) {
			var ΔⵠᐃΔⲆ = ᐃΔᐃⵠᐃ;
			var ⲆⲆⵠⵠΔ = ⵠⲆᐃⲆ,
				ⵠⵠᐃⲆΔ = ΔΔᐃⵠ,
				ΔᐃᐃΔⲆ = d2,
				ⲆᐃⲆΔΔ = ⵠΔᐃΔⵠ;
			ⵠⲆᐃⲆ += d2 + 2;
			var ⵠⵠⲆΔᐃ = ⵠⲆᐃⲆ
		} else {
			var ΔⵠᐃΔⲆ = false;
			ⵠⲆᐃⲆ = ᐃⵠⵠⲆΔ;
			var ⵠⵠⲆΔᐃ = -ⵠⵠⵠΔ
		}
		d2 = ⲆΔΔᐃ - ⵠΔᐃⲆ.ΔⵠⵠⲆΔⵠᐃ - ⵠⲆᐃⲆ;
		if (0 < ᐃΔⵠᐃ && ⲆΔΔⵠ.ⵠⵠᐃⲆⵠⵠᐃ === Δᐃᐃ) {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(15, 77, 72, 252, 239, 187, ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⵠ.ⲆⲆΔᐃΔⲆΔ[ⲆⲆⲆ.time];
			ᐃ.fillRect(ΔΔᐃⵠ, ⵠⲆᐃⲆ, ⵠΔᐃΔⵠ, d2)
		} else {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? ⲆⲆⲆᐃ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(ⲆΔΔⵠ.ᐃΔᐃ[0], ⲆΔΔⵠ.ᐃΔᐃ[ΔΔⲆΔ], ⲆΔΔⵠ.ᐃΔᐃ[2], ⲆΔΔⵠ.ⵠⵠⲆ[ⵠⵠΔᐃ], ⲆΔΔⵠ.ⵠⵠⲆ[ⲆⲆⲆᐃ], ⲆΔΔⵠ.ⵠⵠⲆ[ᐃᐃᐃᐃ], ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⲆΔΔⵠ.ⲆⲆⵠᐃⵠ[ⲆⲆⲆ.time];
			ᐃ.fillRect(ΔΔᐃⵠ, ⵠⲆᐃⲆ, ⵠΔᐃΔⵠ, d2)
		}
	}

	function ΔⲆΔᐃᐃᐃᐃ(ᐃΔΔᐃⲆ, ⵠᐃᐃⵠⲆ, ⵠΔⲆᐃᐃ, ΔⵠᐃΔ, ⲆΔΔⵠ, ᐃΔⵠᐃ) {
		var w1 = ΔⵠᐃΔ.w1;
		var w2 = ΔⵠᐃΔ.w2;
		var w3 = ΔⵠᐃΔ.w3;
		var ⲆΔΔᐃ = ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃΔΔᐃⲆ + 710;
		var ⲆᐃΔⵠΔ = Math.max(ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠᐃᐃⵠⲆ, ⵠⲆΔⵠ);
		var ⵠΔᐃⲆᐃ = Math.max(-ⵠⵠⵠ.ᐃⵠⲆ.x + ⲆΔⲆᐃ - ⵠΔⲆᐃᐃ - ᐃⵠⲆⲆⲆ, 0);
		var ΔΔᐃⵠ = ⲆᐃΔⵠΔ;
		var ⵠΔᐃΔⵠ = ⲆΔⲆᐃ - ⲆᐃΔⵠΔ - ⵠΔᐃⲆᐃ;
		if (ᐃΔⵠᐃ) var Δⵠᐃ = ΔⵠᐃΔ.ΔⲆᐃ(w1);
		else var Δⵠᐃ = w1.r;
		var ⵠⲆᐃⲆ = ⲆΔΔᐃ + ⵠΔᐃⲆ.ⵠᐃⵠⵠᐃ;
		var ⵠΔᐃⵠⲆ = ⵠⲆᐃⲆ,
			ⵠⲆᐃⲆⲆ = ΔΔᐃⵠ,
			ᐃᐃⲆΔⲆ = -Δⵠᐃ.x + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ,
			Δᐃⵠᐃⵠ = ⵠΔᐃΔⵠ;
		ⵠⲆᐃⲆ += -Δⵠᐃ.x + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ + ⵠⲆⵠΔ;
		var ᐃⲆᐃᐃⲆ = ⵠⲆᐃⲆ;
		if (ᐃΔⵠᐃ) var Δⵠᐃ = ΔⵠᐃΔ.ΔⲆᐃ(w2);
		else var Δⵠᐃ = w2.r;
		var d2 = ⲆΔΔᐃ - ⵠΔᐃⲆ.ΔᐃⲆᐃⵠ - ⵠⲆᐃⲆ - Δⵠᐃ.x;
		var ⲆⲆᐃⲆΔ = ⵠⲆᐃⲆ,
			ΔΔⵠΔᐃ = ΔΔᐃⵠ,
			ΔⲆᐃΔⵠ = d2,
			ᐃⲆᐃⵠᐃ = ⵠΔᐃΔⵠ;
		ⵠⲆᐃⲆ += d2 + 2;
		var ᐃⵠⵠⲆΔ = ⵠⲆᐃⲆ - 2;
		if (ᐃΔⵠᐃ) var Δⵠᐃ = ΔⵠᐃΔ.ΔⲆᐃ(w3);
		else var Δⵠᐃ = w3.r;
		d2 = ⲆΔΔᐃ - ⵠΔᐃⲆ.ᐃΔⵠⵠⲆ - ⵠⲆᐃⲆ - Δⵠᐃ.x;
		if (ᐃⵠⵠⲆΔ > ⵠⲆᐃⲆ + d2) {
			var ΔⵠᐃΔⲆ = ᐃΔᐃⵠᐃ;
			var ⲆⲆⵠⵠΔ = ⵠⲆᐃⲆ,
				ⵠⵠᐃⲆΔ = ΔΔᐃⵠ,
				ΔᐃᐃΔⲆ = d2,
				ⲆᐃⲆΔΔ = ⵠΔᐃΔⵠ;
			ⵠⲆᐃⲆ += d2 + ⵠⲆⵠΔ;
			var ⵠⵠⲆΔᐃ = ⵠⲆᐃⲆ
		} else {
			var ΔⵠᐃΔⲆ = ⲆⵠⵠΔᐃ;
			ⵠⲆᐃⲆ = ᐃⵠⵠⲆΔ;
			var ⵠⵠⲆΔᐃ = -1
		}
		d2 = ⲆΔΔᐃ - ⵠΔᐃⲆ.ΔⵠⵠⲆΔⵠᐃ - ⵠⲆᐃⲆ;
		if (ⲆⲆⲆ.transition) {
			var ⵠΔⵠΔ = ⲆⲆⲆ.time ? ᐃⵠⵠ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
			ᐃ.fillStyle = ⵠΔⵠΔⲆ(9, 55, 63, 11, 106, 132, ⵠΔⵠΔ)
		} else ᐃ.fillStyle = ⵠ.ᐃⵠΔΔⲆ[ⲆⲆⲆ.time];
		ᐃ.fillRect(ⵠⲆᐃⲆⲆ, ⵠΔᐃⵠⲆ, Δᐃⵠᐃⵠ, ᐃᐃⲆΔⲆ);
		if (ᐃΔⵠᐃ) {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(15, 70, 76, 42, 139, 155, ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⵠ.ᐃⵠΔⵠΔⲆᐃ[ⲆⲆⲆ.time]
		} else {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? ᐃⲆⲆ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(9, 55, 63, 11, 106, 132, ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⵠ.ᐃⵠΔΔⲆ[ⲆⲆⲆ.time]
		}
		ᐃ.fillRect(ΔΔⵠΔᐃ, ⲆⲆᐃⲆΔ, ᐃⲆᐃⵠᐃ, ΔⲆᐃΔⵠ);
		if (ΔⵠᐃΔⲆ) {
			if (ᐃΔⵠᐃ) {
				if (ⲆⲆⲆ.transition) {
					var ⵠΔⵠΔ = ⲆⲆⲆ.time ? ⵠⵠᐃ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
					ᐃ.fillStyle = ⵠΔⵠΔⲆ(17, 94, 96, 169, 214, 211, ⵠΔⵠΔ)
				} else ᐃ.fillStyle = ⵠ.ᐃⵠΔᐃⵠⵠⵠ[ⲆⲆⲆ.time]
			} else {
				if (ⲆⲆⲆ.transition) {
					var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
					ᐃ.fillStyle = ⵠΔⵠΔⲆ(9, 55, 63, 11, 106, 132, ⵠΔⵠΔ)
				} else ᐃ.fillStyle = ⵠ.ᐃⵠΔΔⲆ[ⲆⲆⲆ.time]
			}
			ᐃ.fillRect(ⵠⵠᐃⲆΔ, ⲆⲆⵠⵠΔ, ⲆᐃⲆΔΔ, ΔᐃᐃΔⲆ)
		}
		ⵠⵠΔⵠ.ΔⲆᐃᐃΔ && ᐃΔⵠᐃ && ΔⵠᐃΔ.ᐃᐃⵠΔⲆⵠⲆΔΔ(ᐃⵠⵠⲆΔ, ⵠⵠⲆΔᐃ, ᐃⲆᐃᐃⲆ, ⲆΔΔᐃ, -ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠⲆᐃⲆⲆ, -ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠⲆᐃⲆⲆ + Δᐃⵠᐃⵠ)
	}

	function ΔΔⵠⲆᐃⲆΔ(ⵠᐃᐃⵠⲆ, ᐃΔΔᐃⲆ, ᐃⲆⲆᐃⵠᐃᐃ, ΔⵠᐃΔ, ⲆΔΔⵠ, ᐃΔⵠᐃ) {
		var w1 = ΔⵠᐃΔ.w1;
		var w2 = ΔⵠᐃΔ.w2;
		var w3 = ΔⵠᐃΔ.w3;
		var ΔΔᐃⵠ = ⵠⵠⵠ.ᐃⵠⲆ.x + ⵠᐃᐃⵠⲆ + 820;
		var ᐃᐃⵠⲆΔ = Math.max(ⵠⵠⵠ.ᐃⵠⲆ.y + ᐃΔΔᐃⲆ, 0);
		var ΔⵠⲆⲆΔ = Math.max(-ⵠⵠⵠ.ᐃⵠⲆ.y + ΔⵠⲆΔ - ᐃⲆⲆᐃⵠᐃᐃ - ⵠΔΔΔⲆ, 0);
		var ⲆΔΔᐃ = ᐃᐃⵠⲆΔ;
		var ΔᐃⵠⲆⵠ = ΔⵠⲆΔ - ᐃᐃⵠⲆΔ - ΔⵠⲆⲆΔ;
		if (ᐃΔⵠᐃ) var ΔᐃᐃⲆⲆ = ΔⵠᐃΔ.ΔⲆᐃ(w1).x;
		else var ΔᐃᐃⲆⲆ = w1.r.x;
		var ⵠⲆᐃⲆ = ΔΔᐃⵠ + ⵠΔᐃⲆ.ⵠᐃⵠⵠᐃ;
		var ⵠⲆᐃⲆⲆ = ⵠⲆᐃⲆ,
			ⵠΔᐃⵠⲆ = ⲆΔΔᐃ,
			Δᐃⵠᐃⵠ = -ΔᐃᐃⲆⲆ + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ,
			ᐃᐃⲆΔⲆ = ΔᐃⵠⲆⵠ;
		ⵠⲆᐃⲆ += -ΔᐃᐃⲆⲆ + ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ + 2;
		var ᐃⲆᐃᐃⲆ = ⵠⲆᐃⲆ;
		if (ᐃΔⵠᐃ) var ΔᐃᐃⲆⲆ = ΔⵠᐃΔ.ΔⲆᐃ(w2).x;
		else var ΔᐃᐃⲆⲆ = w2.r.x;
		var d2 = ΔΔᐃⵠ - ⵠΔᐃⲆ.ΔᐃⲆᐃⵠ - ⵠⲆᐃⲆ - ΔᐃᐃⲆⲆ;
		var ΔΔⵠΔᐃ = ⵠⲆᐃⲆ,
			ⲆⲆᐃⲆΔ = ⲆΔΔᐃ,
			ᐃⲆᐃⵠᐃ = d2,
			ΔⲆᐃΔⵠ = ΔᐃⵠⲆⵠ;
		ⵠⲆᐃⲆ += d2 + Δᐃᐃⵠ;
		var ᐃⵠⵠⲆΔ = ⵠⲆᐃⲆ - Δᐃᐃⵠ;
		if (ᐃΔⵠᐃ) var ΔᐃᐃⲆⲆ = ΔⵠᐃΔ.ΔⲆᐃ(w3).x;
		else var ΔᐃᐃⲆⲆ = w3.r.x;
		d2 = ΔΔᐃⵠ - ⵠΔᐃⲆ.ᐃΔⵠⵠⲆ - ⵠⲆᐃⲆ - ΔᐃᐃⲆⲆ;
		if (ⵠⲆᐃⲆ + d2 < ᐃⵠⵠⲆΔ) {
			var ΔⵠᐃΔⲆ = ᐃⲆᐃᐃΔ;
			var ⵠⵠᐃⲆΔ = ⵠⲆᐃⲆ,
				ⲆⲆⵠⵠΔ = ⲆΔΔᐃ,
				ⲆᐃⲆΔΔ = d2,
				ΔᐃᐃΔⲆ = ΔᐃⵠⲆⵠ;
			ⵠⲆᐃⲆ += d2 + ⵠⲆⵠΔ;
			var ⵠⵠⲆΔᐃ = ⵠⲆᐃⲆ
		} else {
			var ΔⵠᐃΔⲆ = false;
			ⵠⲆᐃⲆ = ᐃⵠⵠⲆΔ;
			var ⵠⵠⲆΔᐃ = -ⵠΔΔ
		}
		d2 = ΔΔᐃⵠ - ⵠΔᐃⲆ.ΔⵠⵠⲆΔⵠᐃ - ⵠⲆᐃⲆ;
		if (ᐃΔⵠᐃ > 0 && ⵠΔᐃ === ⲆΔΔⵠ.ⵠⵠᐃⲆⵠⵠᐃ) {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(15, 77, 72, 252, 239, 187, ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⵠ.ⲆⲆΔᐃΔⲆΔ[ⲆⲆⲆ.time];
			ᐃ.fillRect(ⵠⲆᐃⲆ, ⲆΔΔᐃ, d2, ΔᐃⵠⲆⵠ)
		} else {
			if (ⲆⲆⲆ.transition) {
				var ⵠΔⵠΔ = ⲆⲆⲆ.time ? ΔⲆΔᐃ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
				ᐃ.fillStyle = ⵠΔⵠΔⲆ(ⲆΔΔⵠ.ᐃΔᐃ[ⲆΔⵠΔ], ⲆΔΔⵠ.ᐃΔᐃ[ΔⲆΔᐃ], ⲆΔΔⵠ.ᐃΔᐃ[2], ⲆΔΔⵠ.ⵠⵠⲆ[ⵠⵠΔΔ], ⲆΔΔⵠ.ⵠⵠⲆ[1], ⲆΔΔⵠ.ⵠⵠⲆ[2], ⵠΔⵠΔ)
			} else ᐃ.fillStyle = ⲆΔΔⵠ.ⲆⲆⵠᐃⵠ[ⲆⲆⲆ.time];
			ᐃ.fillRect(ⵠⲆᐃⲆ, ⲆΔΔᐃ, d2, ΔᐃⵠⲆⵠ)
		}
	}
	var ᐃΔⵠⲆⵠⵠⲆᐃΔ = ΔΔⲆⲆ;
	var ΔⲆᐃΔⵠΔⵠΔᐃ = 1;
	var ΔⵠΔΔⵠⵠⲆⲆᐃ = 0;
	var ΔⵠⲆⵠΔᐃΔⵠᐃ = 1;
	var ⲆᐃΔⵠⲆΔⵠⵠⵠ = ⵠᐃΔ;
	var ΔᐃⲆΔⵠΔΔⲆᐃ = ΔⵠⲆ;
	var ⵠΔⲆⲆⲆⵠᐃΔΔ = 0;
	var ⵠΔᐃⲆⲆⲆⵠⲆᐃ = ⵠΔⲆ;
	var ΔⲆΔᐃⲆᐃΔΔⲆ = ⵠᐃΔⲆ;
	var ΔᐃⲆᐃⲆΔⲆⲆⵠ = 1;
	var ᐃⵠᐃᐃᐃᐃΔΔⲆ = 0;
	var ᐃᐃⲆᐃᐃⲆⲆⲆⲆ = 1;
	var ⲆᐃᐃⲆᐃ = ⲆΔⵠΔ;
	var ⵠΔⵠⲆⲆ = 1;
	var ⲆⵠᐃᐃΔ = ᐃⵠΔⲆ;
	var ⲆⲆᐃⵠⵠᐃᐃ = ⵠΔⵠⲆ;
	var ΔⵠⲆⲆⲆⲆⲆ = 1;
	var ΔᐃⵠΔ = 2;

	function Ⲇⵠᐃ(ⲆⲆⵠ, ΔⲆⵠ, text, ⲆⵠⵠᐃⲆⵠΔ, ᐃⵠⲆⲆᐃⲆⲆ, Δᐃⵠⵠ, callback, ΔΔ, ΔΔⵠ, ᐃⵠⲆᐃᐃ, ΔᐃᐃΔⵠ) {
		if (undefined === ΔΔⵠ) ΔΔⵠ = ᐃⲆⵠΔ;
		ΔΔ === undefined && (ΔΔ = ⲆᐃⲆ);
		if (ⲆᐃⵠΔⵠ === ᐃⵠⲆᐃᐃ) ᐃⵠⲆᐃᐃ = ΔΔⲆⲆ;
		ΔᐃᐃΔⵠ === undefined && (ΔᐃᐃΔⵠ = 1);
		ᐃⵠⲆⲆᐃⲆⲆ = ᐃⵠⲆⲆᐃⲆⲆ === ⵠᐃⵠΔ ? 3 : ᐃⵠⲆⲆᐃⲆⲆ === 1 ? 2 : 1;
		Δᐃⵠⵠ !== ᐃⵠⵠ && (Δᐃⵠⵠ = ⵠᐃΔ);
		if (ⲆⵠⵠᐃⲆⵠΔ) var ⵠΔ = ⲆⵠⵠᐃⲆⵠΔ;
		var ᐃᐃⲆⲆ = {
			width: ⲆⲆⵠ,
			height: ΔⲆⵠ,
			"ⵠΔ": ⵠΔ,
			state: ⲆⲆᐃⵠⵠᐃᐃ,
			translate: {
				x: ΔΔ,
				y: ΔΔⵠ,
				"ⲆΔᐃᐃⲆ": ΔΔ,
				"Δⵠⵠⵠᐃ": ΔΔⵠ
			},
			"ⲆᐃᐃⲆⲆΔΔᐃⵠ": Δᐃⵠⵠ,
			"Δᐃⵠⵠ": 0,
			callback: callback,
			position: ᐃⵠⲆᐃᐃ,
			active: ΔᐃᐃΔⵠ
		};
		var ⲆΔᐃⵠᐃᐃΔ = function() {
			return ᐃᐃⲆⲆ.ⵠΔ[ᐃᐃⲆⲆ.state]
		};
		var ⵠⵠⵠᐃΔᐃΔ = function(ᐃⵠⵠⲆ) {
			var ⵠⵠ = ᐃᐃⲆⲆ.translate;
			(ⵠᐃⵠⵠ === ᐃᐃⲆⲆ.width || Δⵠⵠ === ᐃᐃⲆⲆ.height) && (ᐃᐃⲆⲆ.width = ᐃᐃⲆⲆ.ⵠΔ[ⲆᐃⲆ].width, ᐃᐃⲆⲆ.height = ᐃᐃⲆⲆ.ⵠΔ[ⵠᐃΔ].height);
			return ᐃⵠⵠⲆ.x > ⵠⵠ.x && ᐃⵠⵠⲆ.x < ⵠⵠ.x + ᐃᐃⲆⲆ.width / ᐃⵠⲆⲆᐃⲆⲆ && ᐃⵠⵠⲆ.y > ⵠⵠ.y && ᐃⵠⵠⲆ.y < ⵠⵠ.y + ᐃᐃⲆⲆ.height / ᐃⵠⲆⲆᐃⲆⲆ
		};
		var ⵠⲆⵠⲆ = function(ⲆⲆ, ᐃⵠⵠⲆ, ⲆⵠⲆΔ) {
			if (ⵠⵠⵠᐃΔᐃΔ(ᐃⵠⵠⲆ)) {
				if (ⲆⵠⲆΔ == ⵠΔⵠⲆⲆ) ᐃᐃⲆⲆ.state = ΔᐃⵠΔ;
				else if (ⲆⵠᐃᐃΔ == ⲆⵠⲆΔ) ᐃᐃⲆⲆ.state = ΔⵠⲆⲆⲆⲆⲆ;
				else ⲆⵠⲆΔ == ⲆᐃᐃⲆᐃ && ᐃᐃⲆⲆ.state != ΔᐃⵠΔ && (ᐃᐃⲆⲆ.state = ΔⵠⲆⲆⲆⲆⲆ);
				return ᐃΔᐃⵠᐃ
			}
			ᐃᐃⲆⲆ.state = ⲆⲆᐃⵠⵠᐃᐃ;
			return false
		};
		var Δᐃⵠⵠ = function() {
			var ΔΔΔᐃ = ⵠⲆⵠ;
			if (ᐃⲆΔ === ᐃᐃⲆⲆ.ⲆᐃᐃⲆⲆΔΔᐃⵠ) {
				if (ΔⵠⲆⲆⲆⲆⲆ === ᐃᐃⲆⲆ.state || ΔᐃⵠΔ === ᐃᐃⲆⲆ.state) ᐃᐃⲆⲆ.Δᐃⵠⵠ = (ᐃᐃⲆⲆ.Δᐃⵠⵠ + 1e3 * ΔᐃⲆⲆ) % 1e3;
				else if (ᐃᐃⲆⲆ.Δᐃⵠⵠ > 0) {
					ᐃᐃⲆⲆ.Δᐃⵠⵠ = ᐃᐃⲆⲆ.Δᐃⵠⵠ > 500 ? ᐃᐃⲆⲆ.Δᐃⵠⵠ + ΔᐃⲆⲆ * 1e3 : ᐃᐃⲆⲆ.Δᐃⵠⵠ - 1e3 * ΔᐃⲆⲆ;
					if (0 > ᐃᐃⲆⲆ.Δᐃⵠⵠ || ᐃᐃⲆⲆ.Δᐃⵠⵠ > 1e3) ᐃᐃⲆⲆ.Δᐃⵠⵠ = 0
				}
				ΔΔΔᐃ = .2 * ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ᐃᐃⲆⲆ.Δᐃⵠⵠ > 500 ? (1e3 - ᐃᐃⲆⲆ.Δᐃⵠⵠ) / 500 : ᐃᐃⲆⲆ.Δᐃⵠⵠ / 500)
			}
			return ΔΔΔᐃ
		};
		var ⲆᐃᐃⲆ;
		if (ⵠΔᐃΔᐃ === ᐃⵠⲆⲆᐃⲆⲆ) {
			ⲆᐃᐃⲆ = function(Δᐃᐃᐃᐃ) {
				var ΔΔΔᐃ = 1 + Δᐃⵠⵠ();
				var ⵠΔ = ⲆΔᐃⵠᐃᐃΔ();
				var Δⵠᐃ = ΔΔΔᐃ * ᐃᐃⲆⲆ.width / ⵠⲆⵠΔ;
				var ⲆΔΔ = ᐃᐃⲆⲆ.height * ΔΔΔᐃ / 2;
				var ΔⵠΔⵠⵠΔᐃ = (Δⵠᐃ - ᐃᐃⲆⲆ.width / 2) / ⵠᐃⵠⲆ;
				var ᐃᐃᐃⲆⲆ = (ⲆΔΔ - ᐃᐃⲆⲆ.height / ⲆⲆΔΔ) / Δⵠᐃᐃ;
				ᐃΔΔⲆ(Δᐃᐃᐃᐃ, ⵠΔ, ᐃᐃⲆⲆ.translate.x - ΔⵠΔⵠⵠΔᐃ, ᐃᐃⲆⲆ.translate.y - ᐃᐃᐃⲆⲆ, Δⵠᐃ, ⲆΔΔ)
			}
		} else if (3 === ᐃⵠⲆⲆᐃⲆⲆ) {
			ⲆᐃᐃⲆ = function(Δᐃᐃᐃᐃ) {
				var ⵠΔ = ⲆΔᐃⵠᐃᐃΔ();
				var Δⵠᐃ = ᐃᐃⲆⲆ.width;
				var ⲆΔΔ = ᐃᐃⲆⲆ.height;
				var ΔⵠΔⵠⵠΔᐃ = (Δⵠᐃ - ᐃᐃⲆⲆ.width) / ᐃᐃᐃᐃ;
				var ᐃᐃᐃⲆⲆ = (ⲆΔΔ - ᐃᐃⲆⲆ.height) / ⲆᐃⵠⲆ;
				ᐃΔΔⲆ(Δᐃᐃᐃᐃ, ⵠΔ, ᐃᐃⲆⲆ.translate.x - ΔⵠΔⵠⵠΔᐃ, ᐃᐃⲆⲆ.translate.y - ᐃᐃᐃⲆⲆ, Δⵠᐃ, ⲆΔΔ)
			};
			ᐃⵠⲆⲆᐃⲆⲆ = 1
		} else {
			ⲆᐃᐃⲆ = function(Δᐃᐃᐃᐃ) {
				var ⵠΔ = ⲆΔᐃⵠᐃᐃΔ();
				ᐃΔΔⲆ(Δᐃᐃᐃᐃ, ⵠΔ, ᐃᐃⲆⲆ.translate.x, ᐃᐃⲆⲆ.translate.y)
			}
		}
		return {
			info: ᐃᐃⲆⲆ,
			"ⵠⲆⵠⲆ": ⵠⲆⵠⲆ,
			"ⲆᐃᐃⲆ": ⲆᐃᐃⲆ,
			"ⵠⵠⵠᐃΔᐃΔ": ⵠⵠⵠᐃΔᐃΔ
		}
	}

	function ⵠⵠⵠΔⲆⲆᐃᐃⲆ(ⵠΔ) {
		var ⵠⵠ = {
			x: 0,
			y: 0
		};
		var ⲆᐃᐃⲆ = function(Δᐃᐃᐃᐃ) {
			ᐃΔΔⲆ(Δᐃᐃᐃᐃ, ⵠΔ, ⵠⵠ.x, ⵠⵠ.y)
		};
		return {
			"ⵠΔ": ⵠΔ,
			translate: ⵠⵠ,
			"ⲆᐃᐃⲆ": ⲆᐃᐃⲆ
		}
	}

	function ⵠΔᐃᐃⲆ(text, ΔᐃΔⲆⵠ, ᐃⲆ, ΔⲆⵠ, ⲆⲆⵠ, ⵠΔΔᐃⲆΔᐃ, ⲆⲆⲆⲆΔⵠⵠ, ᐃⲆᐃᐃⵠᐃⲆ, ΔⵠⲆΔⵠ, ΔⵠΔᐃⵠⵠΔⵠᐃ, ΔᐃΔΔⵠ, ΔⲆᐃⲆΔ, ⵠΔᐃΔⲆⵠⲆ, ᐃᐃⵠⵠᐃⲆΔ, ⲆⲆΔΔΔⲆⲆ) {
		text.length === ⵠΔΔᐃ && (text = " ");
		undefined === ⲆⲆⲆⲆΔⵠⵠ && (ⲆⲆⲆⲆΔⵠⵠ = 0);
		if (undefined === ᐃⲆᐃᐃⵠᐃⲆ) ᐃⲆᐃᐃⵠᐃⲆ = 0;
		ΔⵠⲆΔⵠ === undefined && (ΔⵠⲆΔⵠ = 0);
		if (ᐃᐃⵠⵠᐃⲆΔ === undefined) ᐃᐃⵠⵠᐃⲆΔ = 0;
		var ⲆⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
		var ᐃ = ⲆⲆ.getContext(Δ[160]);
		ᐃ.textBaseline = Δ[99], ᐃ.font = (ΔⵠⲆᐃᐃ !== ⲆⲆΔΔΔⲆⲆ ? ⲆⲆΔΔΔⲆⲆ + " " : "") + ΔⲆⵠ + "px " + ΔᐃΔⲆⵠ;
		ⲆⲆⵠ !== ⵠⲆᐃᐃⲆ ? ⲆⲆⵠ = Math.min(ᐃ.measureText(text).width, ⲆⲆⵠ) : ⲆⲆⵠ = ᐃ.measureText(text).width;
		ⲆⲆ.width = ⲆⲆⵠ + ⲆⲆⲆⲆΔⵠⵠ;
		ⲆⲆ.height = ΔⲆⵠ + ᐃⲆᐃᐃⵠᐃⲆ;
		if (undefined !== ⵠΔΔᐃⲆΔᐃ) {
			ΔᐃΔΔⵠ !== undefined && (ᐃ.globalAlpha = ΔᐃΔΔⵠ);
			ᐃ.fillStyle = ⵠΔΔᐃⲆΔᐃ;
			if (undefined !== ΔⲆᐃⲆΔ) {
				ⲆⲆⵠΔᐃⵠⲆᐃΔ(ᐃ, ΔⵠⲆΔⵠ + ᐃⵠΔⲆ, ΔⵠⲆΔⵠ, ⲆⲆⵠ + ⲆⲆⲆⲆΔⵠⵠ - ΔⵠⲆΔⵠ * 2 - ΔᐃΔⵠ, ΔⲆⵠ + ᐃⲆᐃᐃⵠᐃⲆ - ΔⵠⲆΔⵠ * 2, ΔⲆᐃⲆΔ);
				ᐃ.fill()
			} else ᐃ.fillRect(ΔⵠⲆΔⵠ, ΔⵠⲆΔⵠ, ⲆⲆⵠ + ⲆⲆⲆⲆΔⵠⵠ - ΔⵠⲆΔⵠ * ⵠⲆⵠΔ, ΔⲆⵠ + ᐃⲆᐃᐃⵠᐃⲆ - ΔⵠⲆΔⵠ * ⵠΔᐃΔᐃ);
			ᐃ.globalAlpha = ⲆⲆⲆᐃ;
			0 !== ΔⵠⲆΔⵠ && (ᐃ.lineWidth = ΔⵠⲆΔⵠ, ᐃ.strokeStyle = ΔⵠΔᐃⵠⵠΔⵠᐃ, ᐃ.stroke())
		}
		ᐃ.textBaseline = Δ[99];
		ᐃ.font = (ⲆⲆΔΔΔⲆⲆ !== ⵠᐃΔᐃⲆ ? ⲆⲆΔΔΔⲆⲆ + " " : "") + ΔⲆⵠ + "px " + ΔᐃΔⲆⵠ;
		if (ⵠΔᐃΔⲆⵠⲆ !== undefined) {
			ᐃ.strokeStyle = ⵠΔᐃΔⲆⵠⲆ;
			ᐃ.lineWidth = ᐃᐃⵠⵠᐃⲆΔ;
			ᐃ.lineJoin = "miter";
			ᐃ.miterLimit = ⵠΔᐃΔᐃ;
			ᐃ.strokeText(text, Math.floor(ⲆⲆⲆⲆΔⵠⵠ / 2), Math.floor(ᐃⲆᐃᐃⵠᐃⲆ / ⵠᐃⵠⲆ) + Math.floor(ΔⲆⵠ / 2), ⲆⲆⵠ)
		}
		ᐃ.fillStyle = ᐃⲆ;
		ᐃ.fillText(text, Math.floor(ⲆⲆⲆⲆΔⵠⵠ / 2), Math.floor(ᐃⲆᐃᐃⵠᐃⲆ / ⲆⲆΔΔ) + Math.floor(ΔⲆⵠ / ⲆᐃⵠⲆ), ⲆⲆⵠ);
		ⲆⲆ.w2 = ⲆⲆ.width / ⲆⲆᐃⲆ;
		ⲆⲆ.ᐃᐃⲆᐃⵠ = ⲆⲆ.height / Δⵠᐃᐃ;
		return ⲆⲆ
	}

	function ᐃⲆⵠⲆⵠᐃᐃ(ⲆⲆ, ᐃⲆΔᐃ) {
		var ᐃⲆⲆᐃⵠᐃⲆ = ⲆⲆ.getBoundingClientRect();
		return {
			x: ᐃⲆΔᐃ.clientX - ᐃⲆⲆᐃⵠᐃⲆ.left,
			y: ᐃⲆΔᐃ.clientY - ᐃⲆⲆᐃⵠᐃⲆ.top
		}
	}

	function ΔⵠⵠΔΔⲆⲆⲆΔ(ⵠΔ, ᐃᐃΔ) {
		undefined === ᐃᐃΔ && (ᐃᐃΔ = .033);
		var ⵠⵠ = {
			y: ΔᐃΔ,
			x: ᐃⲆⵠΔ
		};
		var Ⲇⵠ = 0;
		var ᐃΔΔᐃΔ = ⵠᐃⵠⵠ;
		var ⲆΔᐃⵠᐃᐃΔ = function() {
			ᐃΔΔᐃΔ += ΔᐃⲆⲆ;
			ᐃᐃΔ < ᐃΔΔᐃΔ && (Ⲇⵠ = (Ⲇⵠ + ⵠⵠⵠΔ) % ⵠΔ.length, ᐃΔΔᐃΔ -= ᐃᐃΔ);
			return ⵠΔ[Ⲇⵠ]
		};
		var ⲆᐃᐃⲆ = function(Δᐃᐃᐃᐃ) {
			ᐃΔΔⲆ(Δᐃᐃᐃᐃ, ⲆΔᐃⵠᐃᐃΔ(), ⵠⵠ.x, ⵠⵠ.y)
		};
		return {
			"ⵠΔ": ⵠΔ,
			translate: ⵠⵠ,
			"ⲆᐃᐃⲆ": ⲆᐃᐃⲆ
		}
	}

	function ΔΔΔⵠⵠⵠΔᐃⲆ(ⵠΔ) {
		ⵠΔ.scale += ⵠΔ.Δᐃⵠⵠ ? ΔᐃⲆⲆ / ⵠΔ.ⲆⵠⲆΔΔⵠᐃ : -ΔᐃⲆⲆ / ⵠΔ.ΔⲆΔⲆⵠᐃΔ;
		if (ⵠΔ.scale > ⵠΔ.end) ⵠΔ.Δᐃⵠⵠ = ΔΔᐃⵠᐃ;
		else ⵠΔ.scale < ⵠΔ.start && (ⵠΔ.Δᐃⵠⵠ = true)
	}

	function ΔᐃⲆᐃ(ⵠΔ, ΔᐃᐃΔⵠ, ΔΔ, ΔΔⵠ, ᐃⵠⲆᐃᐃ) {
		var ⵠⵠ = {
			x: ΔΔ,
			y: ΔΔⵠ,
			"ⲆΔᐃᐃⲆ": ΔΔ,
			"Δⵠⵠⵠᐃ": ΔΔⵠ
		};
		var ⲆᐃᐃⲆ = function(Δᐃᐃᐃᐃ) {
			ᐃΔΔⲆ(Δᐃᐃᐃᐃ, ⵠΔ, ⵠⵠ.x, ⵠⵠ.y, ⵠΔ.width / 2, ⵠΔ.height / 2)
		};
		return {
			translate: ⵠⵠ,
			"ⲆᐃᐃⲆ": ⲆᐃᐃⲆ,
			active: ΔᐃᐃΔⵠ,
			position: ᐃⵠⲆᐃᐃ
		}
	}

	function ΔᐃⵠᐃΔⵠⲆⵠⵠ(ⵠΔ, ⵠᐃⵠᐃᐃⲆⲆ, ᐃⵠⵠⵠⵠ, ⲆⵠⲆΔΔⵠᐃ, ΔⲆΔⲆⵠᐃΔ, ⲆⲆⵠ, ΔⲆⵠ) {
		ⵠΔ.end = ⵠᐃⵠᐃᐃⲆⲆ;
		ⵠΔ.start = ᐃⵠⵠⵠⵠ;
		ⵠΔ.ⲆⵠⲆΔΔⵠᐃ = ⲆⵠⲆΔΔⵠᐃ;
		ⵠΔ.ΔⲆΔⲆⵠᐃΔ = ΔⲆΔⲆⵠᐃΔ;
		ⵠΔ.width = ⵠΔ.ⵠΔ.width;
		ⵠΔ.height = ⵠΔ.ⵠΔ.height;
		ⵠΔ.scale = (ⵠᐃⵠᐃᐃⲆⲆ + ᐃⵠⵠⵠⵠ) / ⲆⲆᐃⲆ;
		ⵠΔ.Δᐃⵠⵠ = ⲆΔΔⵠⵠ;
		ⵠΔ.ⲆᐃᐃⲆ = function(ᐃ) {
			ⵠΔ.translate.x = ᐃᐃᐃΔ - ⵠΔ.width / Δⵠᐃᐃ;
			ᐃΔΔⲆ(ᐃ, ⵠΔ.ⵠΔ, ⲆΔⵠΔ, ⵠⲆⵠ, ⵠΔ.ⵠΔ.width, ⵠΔ.ⵠΔ.height, ⵠΔ.translate.x, ⵠΔ.translate.y, ⵠΔ.width, ⵠΔ.height)
		}
	}

	function ⲆΔΔⵠᐃᐃᐃΔΔ(ᐃ) {
		ᐃ[ᐃⲆᐃᐃᐃᐃⵠ[276]] = false;
		ᐃ.ⵠΔᐃΔΔΔᐃⵠᐃ = false;
		ᐃ.ᐃⵠⲆⵠΔⵠΔⵠⲆ = ᐃⵠⵠⲆⵠ;
		ᐃ.ΔΔⲆΔΔⵠᐃⵠⲆ = ⲆⵠΔᐃⵠ;
		ᐃ.ΔⲆⵠΔⲆᐃⵠΔⵠ = false
	}
	var ⵠⵠⲆΔ = Δ[517];
	var ⵠⵠᐃⲆΔⲆᐃ = ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ(Δ[235]) === "1" ? 1 : ⲆΔⵠΔ;
	var ⲆⵠᐃⲆⵠⵠΔⵠⵠ = ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ("password");
	var ⲆΔⵠⲆⲆ = ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ("debug") || ΔⵠΔⲆⲆ;
	if (ᐃⲆᐃΔⵠ !== ⲆΔⵠⲆⲆ) ⲆΔⵠⲆⲆ = JSON.parse(ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[247]](ⲆΔⵠⲆⲆ));
	var ⵠⲆⲆᐃⵠⵠΔ = ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ("server") || undefined;
	var ⵠΔⵠⲆΔⲆⲆ = ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ("region") || undefined;
	var ΔΔΔⵠⵠᐃⲆ = "starve.io";
	var ⲆⲆΔⵠⲆⵠΔ = "https://" + ΔΔΔⵠⵠᐃⲆ;
	var ⵠᐃᐃⵠ = {
		"ΔΔⵠⵠ": 2,
		"ΔⲆⲆᐃⲆᐃⲆ": 8,
		"ΔᐃᐃⵠⵠⵠΔ": 256,
		"ⲆⵠⵠΔΔΔⵠᐃⵠ": 1,
		"ᐃⲆΔΔⲆᐃΔ": 128,
		"ΔᐃⵠⵠᐃΔⲆ": ⲆⵠⲆᐃᐃΔⵠ,
		"ⲆⵠⵠΔⲆΔⲆ": 32,
		IDLE: 64,
		"ΔⵠᐃⲆⵠ": ⲆⲆᐃΔᐃ
	};
	var ⲆΔΔⲆⲆⵠⲆ = [{
		"ΔΔΔᐃⲆ": 1e3,
		items: [
			[ⲆⲆΔΔ, Ⲇᐃ.ⲆⵠⲆⲆᐃ],
			[ⵠΔᐃ, Ⲇᐃ.ΔΔᐃΔⵠ],
			[ⵠΔᐃᐃΔ, Ⲇᐃ.ⲆⲆⲆᐃⵠ],
			[ⲆⵠΔⲆ, Ⲇᐃ.ᐃⵠⲆᐃⵠ]
		]
	}, {
		"ΔΔΔᐃⲆ": 2e3,
		items: [
			[2, Ⲇᐃ.ᐃᐃⲆΔᐃ],
			[1, Ⲇᐃ.ⲆΔⲆⵠΔ],
			[ᐃⲆᐃⵠ, Ⲇᐃ.ΔΔᐃΔⵠ],
			[16, Ⲇᐃ.ⲆⲆⲆᐃⵠ],
			[ⲆⲆⵠᐃ, Ⲇᐃ.ᐃⵠⲆᐃⵠ]
		]
	}, {
		"ΔΔΔᐃⲆ": 4e3,
		items: [
			[3, Ⲇᐃ.ᐃᐃⲆΔᐃ],
			[ⲆⵠΔⲆ, Ⲇᐃ.ᐃⲆΔⵠᐃ],
			[4, Ⲇᐃ.ΔΔᐃΔⵠ],
			[20, Ⲇᐃ.ⲆⲆⲆᐃⵠ],
			[ΔⵠⲆᐃ, Ⲇᐃ.ᐃⵠⲆᐃⵠ],
			[1, Ⲇᐃ.ⵠⵠᐃⲆⵠ],
			[80, Ⲇᐃ.ᐃⵠᐃᐃ],
			[140, Ⲇᐃ.ᐃⲆΔⲆ]
		]
	}, {
		"ΔΔΔᐃⲆ": 8e3,
		items: [
			[ⵠⲆⲆⲆ, Ⲇᐃ.ⲆⲆⲆⲆ],
			[ᐃΔⲆΔⲆ, Ⲇᐃ.ᐃᐃⲆΔᐃ],
			[ⲆΔᐃΔ, Ⲇᐃ.Ⲇⵠᐃᐃᐃ],
			[ⵠΔΔⲆΔ, Ⲇᐃ.ΔΔᐃΔⵠ],
			[30, Ⲇᐃ.ⲆⲆⲆᐃⵠ],
			[ᐃⲆⵠⲆⲆ, Ⲇᐃ.ᐃⵠⲆᐃⵠ],
			[ⲆⵠⲆ, Ⲇᐃ.ⵠⵠᐃⲆⵠ],
			[150, Ⲇᐃ.ᐃⵠᐃᐃ],
			[200, Ⲇᐃ.ᐃⲆΔⲆ],
			[60, Ⲇᐃ.ᐃⵠⵠᐃ],
			[ⲆⲆΔΔ, Ⲇᐃ.ΔΔⲆⲆᐃ]
		]
	}, {
		"ΔΔΔᐃⲆ": 16e3,
		items: [
			[1, Ⲇᐃ.ⲆⲆⲆⲆ],
			[1, Ⲇᐃ.ⵠᐃⲆⲆᐃ],
			[1, Ⲇᐃ.ⵠⲆⵠΔΔ],
			[ᐃΔΔⲆⲆ, Ⲇᐃ.ΔᐃⲆΔⵠ],
			[2, Ⲇᐃ.ΔΔⲆⲆᐃ],
			[ΔΔᐃᐃ, Ⲇᐃ.ᐃᐃⲆΔᐃ],
			[1, Ⲇᐃ.Δⵠⵠⵠⵠ],
			[ΔᐃⲆⲆⲆ, Ⲇᐃ.ΔⲆⵠΔⵠ],
			[ΔΔᐃᐃ, Ⲇᐃ.ΔⵠᐃΔΔ],
			[ⵠΔΔ, Ⲇᐃ.ᐃΔΔⵠᐃ],
			[1, Ⲇᐃ.ᐃⵠᐃᐃⵠ],
			[200, Ⲇᐃ.ᐃⵠᐃᐃ],
			[300, Ⲇᐃ.ᐃⲆΔⲆ]
		]
	}, {
		"ΔΔΔᐃⲆ": 16e3,
		items: [
			[ΔⲆΔᐃ, Ⲇᐃ.ⲆⲆⲆⲆ],
			[ⲆⲆⲆᐃ, Ⲇᐃ.ᐃⵠⲆΔᐃ],
			[1, Ⲇᐃ.ⵠⲆⵠⵠᐃ],
			[ᐃⵠⵠ, Ⲇᐃ.Ⲇⵠᐃᐃᐃ],
			[10, Ⲇᐃ.ΔᐃⲆΔⵠ],
			[ⲆⵠⲆᐃ, Ⲇᐃ.ΔΔⲆⲆᐃ],
			[6, Ⲇᐃ.ᐃᐃⲆΔᐃ],
			[3, Ⲇᐃ.ⲆⲆΔΔᐃ],
			[1, Ⲇᐃ.Δⵠᐃᐃⵠ],
			[200, Ⲇᐃ.ᐃⵠᐃᐃ],
			[300, Ⲇᐃ.ᐃⲆΔⲆ]
		]
	}, {
		"ΔΔΔᐃⲆ": 16e3,
		items: [
			[ᐃⲆΔ, Ⲇᐃ.ⲆⲆⲆⲆ],
			[ⵠΔᐃ, Ⲇᐃ.ᐃΔΔᐃⵠ],
			[1, Ⲇᐃ.ⲆᐃᐃⵠⲆ],
			[3, Ⲇᐃ.ⲆⲆΔΔᐃ],
			[ⲆΔⲆⵠ, ⵠⵠΔΔ],
			[1, Ⲇᐃ.Ⲇⵠᐃᐃᐃ],
			[ⵠⵠΔΔᐃΔΔ, Ⲇᐃ.ΔᐃⲆΔⵠ],
			[ΔⲆⲆⵠ, Ⲇᐃ.ΔΔⲆⲆᐃ],
			[4, Ⲇᐃ.ᐃᐃⲆΔᐃ],
			[150, Ⲇᐃ.ᐃⵠᐃᐃ],
			[200, Ⲇᐃ.ᐃⲆΔⲆ],
			[1, Ⲇᐃ.ⵠⵠⵠΔⲆ]
		]
	}, {
		"ΔΔΔᐃⲆ": 16e3,
		items: [
			[ΔⵠⲆ, Ⲇᐃ.ⲆⲆⲆⲆ],
			[1, Ⲇᐃ.ⵠⵠⵠᐃᐃ],
			[1, Ⲇᐃ.Ⲇⵠᐃᐃᐃ],
			[ⵠⵠΔⲆᐃΔⵠ, Ⲇᐃ.ΔᐃⲆΔⵠ],
			[2, Ⲇᐃ.ΔΔⲆⲆᐃ],
			[4, Ⲇᐃ.ᐃᐃⲆΔᐃ],
			[ⵠⲆⵠΔ, Ⲇᐃ.ᐃᐃᐃⵠᐃ],
			[4, Ⲇᐃ.ⲆⲆᐃⲆᐃ],
			[10, Ⲇᐃ.ΔΔⲆᐃⲆ],
			[6, Ⲇᐃ.ΔΔᐃⲆⵠ],
			[4, Ⲇᐃ.ⲆΔΔΔⵠ],
			[ⲆⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆᐃΔ],
			[500, Ⲇᐃ.ᐃⲆΔⲆ]
		]
	}, {
		"ΔΔΔᐃⲆ": 16e3,
		items: [
			[1, Ⲇᐃ.ⲆⲆⲆⲆ],
			[1, Ⲇᐃ.Ⲇⵠᐃᐃᐃ],
			[ᐃΔⲆⲆⲆ, Ⲇᐃ.ᐃⵠⵠᐃⲆ],
			[ⵠⲆⲆⲆ, Ⲇᐃ.ΔΔⲆⲆᐃ],
			[6, Ⲇᐃ.ᐃᐃⲆΔᐃ],
			[3, Ⲇᐃ.ⲆⲆΔΔᐃ],
			[ΔⲆΔᐃ, Ⲇᐃ.ΔⵠⲆᐃⲆ],
			[ΔⵠⲆ, Ⲇᐃ.ⵠⲆᐃⲆⵠ],
			[16, Ⲇᐃ.ⲆΔⵠᐃᐃ],
			[150, Ⲇᐃ.ᐃⵠᐃᐃ],
			[200, Ⲇᐃ.ᐃⲆΔⲆ]
		]
	}, {
		"ΔΔΔᐃⲆ": 2e4,
		items: [
			[ⵠΔⲆ, Ⲇᐃ.ⲆⲆⲆⲆ],
			[ⲆⲆⲆᐃ, Ⲇᐃ.Ⲇⵠᐃᐃᐃ],
			[1, Ⲇᐃ.ΔᐃⲆΔⵠ],
			[1, Ⲇᐃ.ΔΔⲆⲆᐃ],
			[3, Ⲇᐃ.ᐃᐃⲆΔᐃ],
			[3, Ⲇᐃ.ⲆⲆΔΔᐃ],
			[ΔⵠⲆ, Ⲇᐃ.ⵠΔΔΔΔ],
			[1, Ⲇᐃ.ⲆⲆⲆΔΔ],
			[1, Ⲇᐃ.ᐃⵠᐃⵠⲆ],
			[2, Ⲇᐃ.ΔᐃΔⵠⵠ],
			[50, Ⲇᐃ.ᐃⵠᐃᐃ],
			[100, Ⲇᐃ.ᐃⲆΔⲆ]
		]
	}];
	let ⲆᐃΔᐃⲆⲆΔ = 0;
	const ᐃⲆⵠⲆᐃⵠⲆ = [];

	function ⲆᐃⵠᐃⲆᐃΔⲆⵠ(ⲆᐃᐃᐃΔ, ⲆⲆⲆΔᐃⲆⲆΔⲆ, ⵠⵠᐃⲆΔᐃᐃ) {
		const ⵠⲆⲆⵠΔⵠⵠ = new Uint8Array(ⲆᐃᐃᐃΔ);
		const ΔΔᐃΔᐃ = ⵠⲆⲆⵠΔⵠⵠ.length;
		let ⲆᐃΔⵠⲆⲆⲆ = ᐃⲆⵠⲆᐃⵠⲆ[ΔΔᐃΔᐃ];
		let ᐃΔⲆⲆᐃ = undefined;
		let ⵠⵠΔⲆⵠⵠⲆ = undefined;
		if (ⲆᐃΔⵠⲆⲆⲆ === ⲆᐃⵠΔⵠ) {
			ⲆᐃΔᐃⲆⲆΔ += Ⲇⵠᐃⵠ * ΔΔᐃΔᐃ;
			if (65535 > ⲆᐃΔᐃⲆⲆΔ) {
				ᐃΔⲆⲆᐃ = ⲆΔⲆⵠⲆⲆⲆ(ΔⵠΔⵠΔⲆΔ(ΔΔᐃΔᐃ))
			} else {
				ⲆᐃΔᐃⲆⲆΔ = ΔΔᐃΔᐃ;
				for (let Δᐃ = 0; Δᐃ < ᐃⲆⵠⲆᐃⵠⲆ.length; Δᐃ++) {
					if (ᐃⲆⵠⲆᐃⵠⲆ[Δᐃ] !== ΔᐃᐃⵠⲆ) {
						const ᐃΔⲆⲆᐃ = ᐃⲆⵠⲆᐃⵠⲆ[Δᐃ][0];
						ᐃⲆⵠⲆᐃⵠⲆ[Δᐃ] = undefined;
						ⵠⵠⵠⲆⲆᐃΔ(ᐃΔⲆⲆᐃ)
					}
				}
				ᐃΔⲆⲆᐃ = ⲆΔⲆⵠⲆⲆⲆ(ΔⵠΔⵠΔⲆΔ(ΔΔᐃΔᐃ));
				ᐃⵠⲆⵠⲆΔⲆ()
			}
			ⵠⵠΔⲆⵠⵠⲆ = ΔⵠⵠⲆΔᐃᐃ(ᐃΔⲆⲆᐃ);
			ᐃⲆⵠⲆᐃⵠⲆ[ΔΔᐃΔᐃ] = [ᐃΔⲆⲆᐃ, ⵠⵠΔⲆⵠⵠⲆ]
		} else {
			ᐃΔⲆⲆᐃ = ⲆᐃΔⵠⲆⲆⲆ[0];
			ⵠⵠΔⲆⵠⵠⲆ = ⲆᐃΔⵠⲆⲆⲆ[1]
		}
		for (let Δᐃ = ⵠᐃⵠⵠ; ⵠⲆⲆⵠΔⵠⵠ.length > Δᐃ; Δᐃ++) ⵠⵠΔⲆⵠⵠⲆ[Δᐃ] = ⵠⲆⲆⵠΔⵠⵠ[Δᐃ];
		ᐃⲆⲆΔΔᐃΔ(ᐃΔⲆⲆᐃ, ⲆⲆⲆΔᐃⲆⲆΔⲆ, ⵠⵠᐃⲆΔᐃᐃ);
		for (let Δᐃ = ⵠᐃⵠⵠ; Δᐃ < ⵠⲆⲆⵠΔⵠⵠ.length; Δᐃ++) ⵠⲆⲆⵠΔⵠⵠ[Δᐃ] = ⵠⵠΔⲆⵠⵠⲆ[Δᐃ];
		return ⵠⲆⲆⵠΔⵠⵠ
	}
	var ⲆᐃᐃΔⲆ = {
		"ⲆⲆⵠⲆᐃⲆΔ": 6e5,
		"ᐃᐃᐃΔᐃᐃⲆⲆⲆ": 50,
		"ⵠⵠΔⵠΔΔᐃᐃᐃ": 125e3,
		"ᐃᐃΔⲆΔⵠⵠᐃΔ": .58,
		"ⵠⲆⵠᐃΔΔᐃ": 2,
		"ⲆΔᐃᐃΔⵠᐃⲆⵠ": 5,
		"ΔⲆᐃᐃΔⵠⵠᐃⲆ": 5,
		"ΔᐃⵠⵠᐃΔⲆ": .2,
		"ΔᐃΔⲆⵠⵠΔΔᐃ": 3,
		"ⵠᐃΔⵠΔⵠⵠⵠΔ": ⲆⲆⲆᐃᐃ,
		"ⲆΔΔⲆᐃⵠᐃⵠⲆ": 8e3,
		"ⲆΔᐃᐃᐃΔΔΔⲆ": 14,
		"ⲆⵠΔᐃⲆⲆΔ": 52,
		"ᐃⲆΔⲆΔᐃΔ": 0,
		"ᐃᐃⵠⵠΔΔⲆ": 4,
		"ΔⲆⲆᐃⲆᐃⵠΔΔ": 200,
		"ⵠⵠΔΔΔᐃΔΔⲆ": "[" + 21 + "]",
		"ⵠⲆⵠΔᐃΔⵠⲆⵠ": 6e4,
		"ΔⵠᐃΔⵠⵠⲆⲆᐃ": 2e3,
		"ⵠⵠⵠⵠⵠⵠⲆⵠⲆ": 20,
		"ⵠᐃᐃⵠⲆᐃΔ": ⵠⲆⲆⲆ,
		"ΔⵠΔⵠᐃΔⲆᐃⲆ": 14,
		"ⵠⲆⵠᐃⲆⵠⲆ": ⲆⵠⲆᐃ,
		"ⲆⲆⲆⲆⲆⲆⲆ": 3,
		"ⲆⵠΔΔᐃᐃⵠ": .2
	};

	function ⲆΔᐃⲆΔⲆᐃ(ⲆᐃⵠⵠⲆᐃⵠ, ᐃΔⵠⲆⵠΔᐃ, ⲆⲆΔⵠΔⵠᐃ) {
		const ΔΔⲆⵠΔᐃⵠ = 62949 ^ ⲆᐃⵠⵠⲆᐃⵠ;
		const ⵠᐃⵠⲆᐃⲆⲆ = ((39757 + ᐃΔⵠⲆⵠΔᐃ) * 22695477 + 1) % 4294967296;
		const ⵠⲆⲆΔⵠᐃⲆ = ~(ⲆⲆΔⵠΔⵠᐃ & 11536) & 11536 | ~(11536 & ⲆⲆΔⵠΔⵠᐃ) & ⲆⲆΔⵠΔⵠᐃ;
		const ⲆⵠⵠΔᐃᐃⵠᐃΔ = ΔⲆᐃΔΔΔᐃ(ΔΔⲆⵠΔᐃⵠ, ⵠᐃⵠⲆᐃⲆⲆ, ⵠⲆⲆΔⵠᐃⲆ, ΔΔⲆⵠΔᐃⵠ, ⵠᐃⵠⲆᐃⲆⲆ);
		const ⲆΔΔᐃⵠⲆΔⲆᐃ = ᐃᐃⲆΔΔΔⲆ(ⵠⲆⲆΔⵠᐃⲆ, ΔΔⲆⵠΔᐃⵠ, ⵠᐃⵠⲆᐃⲆⲆ);
		const ⲆᐃⲆΔᐃⵠⲆⲆΔ = 55135 ^ ⲆⵠⵠΔᐃᐃⵠᐃΔ;
		return ⲆᐃⲆΔᐃⵠⲆⲆΔ
	}

	function ΔΔΔᐃᐃΔΔⲆΔ() {
		var ⲆⲆᐃ = this;
		this.ΔΔⵠᐃ = null;
		this.ΔΔᐃⵠⲆ = 0;
		this.ᐃⲆΔⲆⵠ = [];
		this.ᐃᐃΔⵠΔⲆⵠ = {};
		this.ΔᐃⵠⵠⲆᐃΔ = {};
		this.ΔⲆᐃⵠⲆ = [
			[],
			[],
			[],
			[],
			[],
			[],
			[],
			[],
			[]
		];
		this.ΔⵠⲆᐃⵠᐃⲆ = [-Δᐃᐃ, -1, -1, -ⵠΔΔ, -ⲆⵠΔⲆ, -1, -1, -ⵠⵠⵠΔ, -1];
		this.ⵠⵠᐃΔⲆ = ⲆⲆⵠⲆ;
		this.ⲆΔΔⲆᐃⲆᐃ = 0;
		this.ⵠⲆⵠΔΔⵠⵠ = function(ΔᐃⵠⲆⵠΔᐃ) {
			if (ⲆΔⵠⲆⲆ !== undefined) {
				ⲆⲆᐃ.ᐃⲆΔⲆⵠ.push({
					a: ⲆΔⵠⲆⲆ[Δ[401]],
					gm: ⲆΔⵠⲆⲆ["mode"],
					idx: ⲆᐃⲆ,
					m: 100,
					nu: ⲆⲆⵠⲆ,
					id: ⵠΔΔᐃ
				});
				ΔᐃⵠⲆⵠΔᐃ();
				return
			}
			fetch(ⲆⲆΔⵠⲆⵠΔ + "/list", {
				method: Δ[387]
			}).then((function(ΔⵠᐃᐃⵠᐃΔ) {
				if (!ΔⵠᐃᐃⵠᐃΔ.ok) {
					ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]]((function() {
						ⲆⲆᐃ.ⵠⲆⵠΔΔⵠⵠ(ΔᐃⵠⲆⵠΔᐃ)
					}), 3e3);
					return
				}
				ΔⵠᐃᐃⵠᐃΔ.json().then((function(ΔΔΔⲆⵠΔⲆ) {
					ⲆⲆᐃ.ᐃⲆΔⲆⵠ = [];
					ⲆⲆᐃ.ΔᐃⵠⵠⲆᐃΔ = {};
					for (let ᐃᐃᐃⲆⵠ in ⵠΔᐃⲆ.ⲆⵠΔⲆⲆⲆᐃ) {
						const ΔⲆᐃᐃΔⲆⵠⲆΔ = ⵠΔᐃⲆ.ⲆⵠΔⲆⲆⲆᐃ[ᐃᐃᐃⲆⵠ];
						ⲆⲆᐃ.ᐃⲆΔⲆⵠ.push({
							a: "Auto Select",
							gm: ΔⲆᐃᐃΔⲆⵠⲆΔ,
							m: 100,
							nu: 0,
							auto: true
						})
					}
					var ⵠⵠⲆⲆⲆⵠΔ = 0;
					var ⲆⲆⵠⵠⵠᐃΔ = ᐃΔⵠΔ;
					var ⲆᐃⲆΔⵠΔΔ = 2;
					var ⵠⲆᐃⲆΔⵠⵠΔⵠ = 3;
					var ⲆⵠᐃⵠᐃⲆᐃⲆⵠ = ⲆⵠⵠⲆ;
					var ᐃⲆⲆΔᐃᐃⵠΔⵠ = 5;
					for (let Δᐃ = ⲆⲆⵠⲆ; ΔΔΔⲆⵠΔⲆ.length > Δᐃ; Δᐃ++) {
						const ΔⲆᐃΔ = ΔΔΔⲆⵠΔⲆ[Δᐃ];
						const ⵠΔΔⵠΔ = ΔⲆᐃΔ["n"];
						const ᐃᐃⲆⲆΔ = ΔⲆᐃΔ["l"];
						const ᐃΔⵠΔΔⲆⲆ = ΔⲆᐃΔ["p"];
						const ᐃᐃΔⵠΔⲆⵠ = [];
						ⲆⲆᐃ.ᐃᐃΔⵠΔⲆⵠ[ⵠΔΔⵠΔ] = ᐃᐃΔⵠΔⲆⵠ;
						const ᐃΔⲆᐃⲆᐃΔ = [];
						for (let ᐃΔⵠⵠ = 0; ᐃΔⵠΔΔⲆⲆ.length > ᐃΔⵠⵠ; ᐃΔⵠⵠ++) {
							const ⵠᐃΔΔΔⵠⲆ = ᐃΔⵠΔΔⲆⲆ[ᐃΔⵠⵠ];
							const ⲆⲆⲆⲆⵠⵠⲆ = ⵠΔΔⵠΔ + ⵠᐃΔΔΔⵠⲆ[ⵠⵠⲆⲆⲆⵠΔ];
							ᐃΔⲆᐃⲆᐃΔ.push(ⲆⲆⲆⲆⵠⵠⲆ);
							ᐃᐃΔⵠΔⲆⵠ.push(ⲆⲆⲆⲆⵠⵠⲆ)
						}
						for (let ᐃΔⵠⵠ = ⵠⲆΔⵠ; ᐃΔⵠⵠ < ᐃᐃⲆⲆΔ.length; ᐃΔⵠⵠ++) {
							const ⵠⲆΔⵠΔ = ᐃᐃⲆⲆΔ[ᐃΔⵠⵠ];
							let ΔⲆΔΔᐃⵠⵠ = ⵠΔᐃⲆ.ⲆⵠΔⲆⲆⲆᐃ[ⵠⲆΔⵠΔ[ⲆᐃⲆΔⵠΔΔ]];
							let ΔⵠΔⲆᐃⲆᐃ = ΔⲆΔΔᐃⵠⵠ + ⵠⲆΔⵠΔ[ⲆⲆⵠⵠⵠᐃΔ];
							let ΔΔᐃⲆΔᐃⲆ;
							if (ΔⲆΔΔᐃⵠⵠ in ⲆⲆᐃ.ΔᐃⵠⵠⲆᐃΔ) ΔΔᐃⲆΔᐃⲆ = ++ⲆⲆᐃ.ΔᐃⵠⵠⲆᐃΔ[ΔⲆΔΔᐃⵠⵠ];
							else ΔΔᐃⲆΔᐃⲆ = ⲆⲆᐃ.ΔᐃⵠⵠⲆᐃΔ[ΔⲆΔΔᐃⵠⵠ] = 1;
							if (ΔⵠΔⲆᐃⲆᐃ in ⲆⲆᐃ.ΔᐃⵠⵠⲆᐃΔ) ᐃⵠᐃⲆᐃⲆΔ = ++ⲆⲆᐃ.ΔᐃⵠⵠⲆᐃΔ[ΔⵠΔⲆᐃⲆᐃ];
							else ᐃⵠᐃⲆᐃⲆΔ = ⲆⲆᐃ.ΔᐃⵠⵠⲆᐃΔ[ΔⵠΔⲆᐃⲆᐃ] = 1;
							ⲆⲆᐃ.ᐃⲆΔⲆⵠ.push({
								name: ⵠⲆΔⵠΔ[ⲆⵠᐃⵠᐃⲆᐃⲆⵠ],
								a: ⵠΔᐃⲆ.ΔⲆⲆΔⲆΔⲆⵠᐃ[ⵠⲆΔⵠΔ[ⲆⲆⵠⵠⵠᐃΔ]] + " " + ᐃⵠᐃⲆᐃⲆΔ,
								r: ⵠⲆΔⵠΔ[ⲆⲆⵠⵠⵠᐃΔ],
								gm: ⵠΔᐃⲆ.ⲆⵠΔⲆⲆⲆᐃ[ⵠⲆΔⵠΔ[ⲆᐃⲆΔⵠΔΔ]],
								idx: ΔΔᐃⲆΔᐃⲆ,
								m: 100,
								nu: ⵠⲆΔⵠΔ[ⵠⲆᐃⲆΔⵠⵠΔⵠ],
								id: ⵠⲆΔⵠΔ[ⲆⲆⵠⵠⵠᐃΔ] + ⵠⲆΔⵠΔ[ⵠⵠⲆⲆⲆⵠΔ],
								p: ᐃΔⲆᐃⲆᐃΔ
							})
						}
					}
					const ⵠⲆᐃⵠⵠΔⲆ = [];
					const ⲆⲆΔⵠᐃⵠᐃ = [];
					const ᐃⵠⵠᐃΔⲆᐃ = [];
					for (let Δᐃ = 0; Δᐃ < ⲆⲆᐃ.ᐃⲆΔⲆⵠ.length; Δᐃ++) {
						const ⵠⲆΔⵠΔ = ⲆⲆᐃ.ᐃⲆΔⲆⵠ[Δᐃ];
						if (ⵠⲆΔⵠΔ["auto"]) continue;
						if (ⵠΔᐃⲆ.ⲆⵠΔⲆⲆⲆᐃ[ⵠΔᐃⲆ.ⲆΔΔⲆᐃ] !== ⵠⲆΔⵠΔ[Δ[26]]) continue;
						if (Δ[428] === typeof ⵠⲆΔⵠΔ.name && (-ΔⲆΔᐃ !== ⵠⲆΔⵠΔ.name.indexOf("Private Server") || ⵠⲆΔⵠΔ[Δ[548]] > 95)) ⵠⲆᐃⵠⵠΔⲆ.push(ⵠⲆΔⵠΔ);
						else ⲆⲆΔⵠᐃⵠᐃ.push(ⵠⲆΔⵠΔ);
						ᐃⵠⵠᐃΔⲆᐃ.push(Δᐃ)
					}
					const ᐃⲆΔᐃⵠᐃΔ = [];
					ᐃⲆΔᐃⵠᐃΔ.push(...ⲆⲆΔⵠᐃⵠᐃ.sort((function(ᐃᐃᐃⵠ, ⵠⵠᐃⵠ) {
						return ⵠⵠᐃⵠ[Δ[548]] - ᐃᐃᐃⵠ[Δ[548]]
					})));
					ᐃⲆΔᐃⵠᐃΔ.push(...ⵠⲆᐃⵠⵠΔⲆ.sort((function(ᐃᐃᐃⵠ, ⵠⵠᐃⵠ) {
						const ᐃⲆΔⵠⵠΔΔΔᐃ = ⵠⵠᐃⵠ[Δ[548]] < 95 ? ⵠⵠᐃⵠ[Δ[548]] : 0;
						const ᐃⲆΔⵠⲆⲆΔⵠᐃ = ᐃᐃᐃⵠ[Δ[548]] < 95 ? ᐃᐃᐃⵠ[Δ[548]] : ⵠⲆᐃ;
						return ᐃⲆΔⵠⵠΔΔΔᐃ - ᐃⲆΔⵠⲆⲆΔⵠᐃ
					})));
					for (let Δᐃ = ᐃΔΔ; Δᐃ < ᐃⵠⵠᐃΔⲆᐃ.length; Δᐃ++) {
						const ⵠΔⵠⲆᐃⲆᐃ = ᐃⵠⵠᐃΔⲆᐃ[Δᐃ];
						const ⵠⲆΔⵠΔ = ᐃⲆΔᐃⵠᐃΔ[Δᐃ];
						ⵠⲆΔⵠΔ["idx"] = Δᐃ + 1;
						ⲆⲆᐃ.ᐃⲆΔⲆⵠ[ⵠΔⵠⲆᐃⲆᐃ] = ⵠⲆΔⵠΔ
					}
					ΔᐃⵠⲆⵠΔᐃ()
				}))
			}))
		};
		this.ⲆⵠⵠⵠⲆⵠᐃⲆⲆ = function(ΔⲆᐃΔ) {
			var ⲆΔⵠⵠΔ = [];
			for (var Δᐃ = ⵠⲆΔⵠ; Δᐃ < ΔⲆᐃΔ.length; Δᐃ++) {
				if (ΔⲆᐃΔ[Δᐃ]["a"].indexOf(Ⲇᐃⵠᐃᐃⵠⵠ) !== -1) ⲆΔⵠⵠΔ.push(Δᐃ)
			}
			if (0 === ⲆΔⵠⵠΔ.length) return 0;
			return ⲆΔⵠⵠΔ[Math.floor(Math.random() * ⲆΔⵠⵠΔ.length)]
		};

		function ΔⵠⲆᐃᐃⲆⵠ(ⵠⲆΔⵠΔ) {
			let name = ⵠⲆΔⵠΔ[Δ[401]] || ⵠⲆΔⵠΔ["a"];
			if (ⵠⲆΔⵠΔ["auto"]) return name;
			return name + " [" + ⵠⲆΔⵠΔ[Δ[548]] + " " + ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆⲆ] + "]"
		}
		this.ⵠⵠᐃᐃᐃⵠⵠ = function(ΔⲆᐃΔ) {
			var ᐃᐃⵠⵠᐃᐃⵠ = 0;
			for (var Δᐃ = ⲆᐃⲆ; ΔⲆᐃΔ.length > Δᐃ; Δᐃ++) ᐃᐃⵠⵠᐃᐃⵠ += ΔⲆᐃΔ[Δᐃ][Δ[548]];
			var ᐃΔⵠΔⵠ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[196]);
			if (-1 === ᐃⵠΔΔ.ΔⵠⲆᐃⵠᐃⲆ[ᐃⵠΔΔ.ⵠⵠᐃΔⲆ]) ᐃⵠΔΔ.ΔⵠⲆᐃⵠᐃⲆ[ᐃⵠΔΔ.ⵠⵠᐃΔⲆ] = ᐃΔⵠΔⵠ.selectedIndex = ᐃⵠΔΔ.ⲆⵠⵠⵠⲆⵠᐃⲆⲆ(ΔⲆᐃΔ);
			else ᐃΔⵠΔⵠ.selectedIndex = ᐃⵠΔΔ.ΔⵠⲆᐃⵠᐃⲆ[ᐃⵠΔΔ.ⵠⵠᐃΔⲆ];
			var ⲆⵠᐃΔ = '<label for="ul-id"><button type="button" class="ng-binding">' + ΔⲆᐃΔ[ᐃΔⵠΔⵠ.selectedIndex]["a"] + (ΔⲆᐃΔ[ᐃΔⵠΔⵠ.selectedIndex][Δ[548]] > ⵠᐃⵠⵠ ? " [" + ΔⲆᐃΔ[ᐃΔⵠΔⵠ.selectedIndex][Δ[548]] + " " + ΔⲆⲆ[ΔΔΔΔ.ᐃⲆⲆⲆ] + "]" : "") + "</button></label>" + '<ul role="listbox" id="ul-id" class="md-whiteframe-z1" name="ul-id">' + '<li role="option" id="selectDisabled">' + ΔⲆⲆ[ΔΔΔΔ.ᐃΔⲆⲆΔᐃΔ] + " (" + this.ᐃⵠⵠᐃᐃⲆⵠ + ") " + ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔⵠΔᐃΔ] + "</li>";
			for (var Δᐃ = 0; ΔⲆᐃΔ.length > Δᐃ; Δᐃ++) ⲆⵠᐃΔ += '<li role="option">' + ΔⵠⲆᐃᐃⲆⵠ(ΔⲆᐃΔ[Δᐃ]) + "</li>\n";
			ⲆⵠᐃΔ += '<li role="option" id="selectDisabled">(' + ᐃᐃⵠⵠᐃᐃⵠ + ") " + ΔⲆⲆ[ΔΔΔΔ.ⲆⵠΔᐃⲆⲆⵠ] + "</li>";
			ⲆⵠᐃΔ += Δ[490];
			ᐃΔⵠΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ⲆⵠᐃΔ;
			$(".md-select").on(Δ[507], (function() {
				$(this).toggleClass(Δ[378])
			}));
			$(".md-select ul li").on(Δ[507], (function() {
				var ⲆᐃΔ = $(this).text();
				var ⵠᐃ = -1;
				var ᐃⲆⵠΔΔΔΔ = ᐃⵠΔΔ.ΔⲆᐃⵠⲆ[ᐃⵠΔΔ.ⵠⵠᐃΔⲆ];
				for (var Δᐃ = 0; ᐃⲆⵠΔΔΔΔ.length > Δᐃ; Δᐃ++) {
					const name = ΔⵠⲆᐃᐃⲆⵠ(ᐃⲆⵠΔΔΔΔ[Δᐃ]);
					if (name === ⲆᐃΔ) {
						ⵠᐃ = Δᐃ;
						break
					}
				}
				if (ⵠᐃ === -1) return;
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[196]).selectedIndex = ⵠᐃ;
				ᐃⵠΔΔ.ΔⵠⲆᐃⵠᐃⲆ[ᐃⵠΔΔ.ⵠⵠᐃΔⲆ] = ⵠᐃ;
				$(".md-select ul li").removeClass(Δ[378]);
				$(this).addClass(Δ[378]);
				$(".md-select label button").text(ⲆᐃΔ)
			}))
		};
		this.ᐃⵠⵠᐃᐃⲆⵠ = ⵠⵠΔΔ;
		this.ᐃⵠΔⲆⵠⲆᐃᐃᐃ = function() {
			this.ᐃⵠⵠᐃᐃⲆⵠ = ⵠΔⵠⲆ;
			for (var Δᐃ = 0; ᐃⵠΔΔ.ᐃⲆΔⲆⵠ.length > Δᐃ; Δᐃ++) {
				if (this.ᐃⲆΔⲆⵠ[Δᐃ][Δ[26]] == "experimental") this.ΔⲆᐃⵠⲆ[ⵠΔᐃⲆ.ⲆᐃⲆᐃᐃ].push(this.ᐃⲆΔⲆⵠ[Δᐃ]);
				else if (this.ᐃⲆΔⲆⵠ[Δᐃ][Δ[26]] == "zombies") this.ΔⲆᐃⵠⲆ[ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ].push(this.ᐃⲆΔⲆⵠ[Δᐃ]);
				else if (this.ᐃⲆΔⲆⵠ[Δᐃ][Δ[26]] == "community") this.ΔⲆᐃⵠⲆ[ⵠΔᐃⲆ.ⲆΔΔⲆᐃ].push(this.ᐃⲆΔⲆⵠ[Δᐃ]);
				else if (this.ᐃⲆΔⲆⵠ[Δᐃ][Δ[26]] == Δ[498]) this.ΔⲆᐃⵠⲆ[ⵠΔᐃⲆ.ⵠΔΔⲆⵠ].push(this.ᐃⲆΔⲆⵠ[Δᐃ]);
				else if (this.ᐃⲆΔⲆⵠ[Δᐃ][Δ[26]] == "battle-royale") this.ΔⲆᐃⵠⲆ[ⵠΔᐃⲆ.ⵠΔⲆⵠᐃΔΔ].push(this.ᐃⲆΔⲆⵠ[Δᐃ]);
				else "vampires" == this.ᐃⲆΔⲆⵠ[Δᐃ][Δ[26]] ? this.ΔⲆᐃⵠⲆ[ⵠΔᐃⲆ.ΔᐃΔⲆᐃ].push(this.ᐃⲆΔⲆⵠ[Δᐃ]) : this.ΔⲆᐃⵠⲆ[ⵠΔᐃⲆ.ᐃᐃΔⲆⲆ].push(this.ᐃⲆΔⲆⵠ[Δᐃ]);
				this.ᐃⵠⵠᐃᐃⲆⵠ += this.ᐃⲆΔⲆⵠ[Δᐃ][Δ[548]]
			}
			for (Δᐃ = 0; this.ΔⲆᐃⵠⲆ.length > Δᐃ; Δᐃ++)
				if (this.ΔⲆᐃⵠⲆ[Δᐃ].length === 0) this.ΔⲆᐃⵠⲆ[Δᐃ].push({
					a: ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔⲆΔⵠⲆ],
					"ⲆΔⲆⵠⵠᐃⵠΔⵠ": 0,
					"Δᐃ": "127.0.0.1",
					"ΔⵠΔ": 80
				});
			this.ⵠⵠᐃᐃᐃⵠⵠ(this.ΔⲆᐃⵠⲆ[0]);
			this.ⲆⵠⲆᐃⵠ = function(ⲆᐃΔ) {
				ᐃⵠΔΔ.ⵠⵠᐃΔⲆ = ⲆᐃΔ;
				ᐃⵠΔΔ.ⵠⵠᐃᐃᐃⵠⵠ(ᐃⵠΔΔ.ΔⲆᐃⵠⲆ[ᐃⵠΔΔ.ⵠⵠᐃΔⲆ]);
				ᐃⵠΔΔ.ⵠⵠᐃᐃᐃⵠⵠ(ᐃⵠΔΔ.ΔⲆᐃⵠⲆ[ᐃⵠΔΔ.ⵠⵠᐃΔⲆ]);
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[196]).selectedIndex = ᐃⵠΔΔ.ⵠⵠᐃΔⲆ
			}
		};
		this.ᐃⵠΔᐃΔⲆⵠ = 0;
		this.ΔⲆᐃΔΔⲆⵠ = 0;
		this.ΔⵠᐃⲆⲆ = null;
		this.timeout = function() {
			ⲆⲆᐃ.ΔⲆᐃΔΔⲆⵠ++;
			ⲆⲆᐃ.ΔΔⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[49]]();
			if (ⲆᐃᐃΔⲆ.ΔᐃΔⲆⵠⵠΔΔᐃ < ⲆⲆᐃ.ΔⲆᐃΔΔⲆⵠ) {
				ⲆⵠᐃⵠⲆⲆⵠ = ⲆΔᐃ;
				ⵠⵠΔⵠ.ⵠΔⵠⲆⲆⵠᐃᐃᐃ = ⲆᐃᐃΔⲆ.ⲆᐃᐃᐃⲆⲆⲆⲆⵠ;
				ⲆⲆᐃ.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ΔⲆᐃᐃⲆⲆⵠ]);
				ⵠⵠΔⵠ.waiting = ᐃⲆⵠⵠᐃ;
				if (ⵠⵠⵠ.reconnect.enabled) {
					ⲆΔᐃᐃ.ΔⲆⵠᐃΔ(ⵠⵠΔⵠ.ⵠⲆᐃᐃΔ)
				}
			} else {
				ᐃⲆᐃΔⵠ === ⵠⵠⵠ.ΔΔⵠᐃⵠⵠᐃ || ⵠᐃΔⵠΔ === ⵠⵠⵠ.Δᐃᐃⵠⵠⵠᐃ || undefined === ⵠⵠⵠ.ⵠⵠⵠΔᐃΔⲆ || Ⲇᐃⵠⵠⵠ === ⵠⵠⵠ.ⵠⲆΔⲆⲆⵠⵠ ? ⵠⵠΔⵠ.ⲆⵠΔᐃΔΔⵠ((function() {
					ⲆⲆᐃ.ᐃⲆⵠΔΔⲆⲆ()
				}), 1) : ⲆⲆᐃ.ᐃⲆⵠΔΔⲆⲆ()
			}
		};
		this.ᐃⵠⲆⵠΔⵠⵠ = function(ΔᐃⵠⲆⲆΔᐃⲆⲆ) {
			if (this.ΔΔᐃⵠⲆ != this.ΔΔⵠᐃ.ΔΔᐃⵠⲆ) return;
			this.ΔΔᐃⵠⲆ++;
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃⵠΔⲆ] + ΔᐃⵠⲆⲆΔᐃⲆⲆ);
			ⲆΔᐃᐃ.ΔⲆⵠᐃΔ(ⵠⵠΔⵠ.ⵠⲆᐃᐃΔ)
		};
		this.ⵠⵠⵠΔⵠⵠᐃⵠⲆ = function() {
			this.Ⲇᐃⵠⵠᐃ("You speak too much")
		};
		this.ᐃⵠΔΔᐃᐃⲆⵠΔ = function() {
			clearTimeout(this.ΔⵠᐃⲆⲆ);
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ⲆⵠⲆⵠᐃⵠΔ]);
			ⵠⵠΔⵠ.waiting = ΔⲆΔΔᐃ
		};
		this.ΔΔᐃᐃⲆΔΔⵠⵠ = function() {
			ⵠⵠⵠ.ⵠΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ⲆᐃⲆⲆΔ
		};
		this.ΔᐃⵠΔⵠⲆΔΔⵠ = function() {
			ⲆΔᐃᐃ.ᐃⲆΔΔΔΔⵠ = 0
		};
		this.ᐃΔⲆΔᐃⲆⵠᐃⲆ = function() {
			ⲆΔᐃᐃ.ᐃᐃⵠᐃΔⵠᐃ = ΔᐃΔ
		};
		this.ⲆΔⲆᐃⲆΔⵠⲆⲆ = function(ΔⵠⲆⲆⵠ) {
			ⵠⵠⵠ.ⵠΔⵠⲆΔ.ΔⵠⲆⲆⵠ = ΔⵠⲆⲆⵠ;
			if (ⲆⲆⲆ.ᐃⲆⲆⵠⵠ > -300) {
				if (0 === ΔⵠⲆⲆⵠ) this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ⲆⲆⲆⵠⲆΔⵠ]);
				else this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ΔⵠⲆⵠΔⵠⲆ])
			}
		};
		this.ⵠⲆⲆᐃΔ = function(ⵠⲆⲆᐃΔ) {
			ⵠⵠⵠ.ⵠⲆⲆᐃΔ = ⵠⲆⲆᐃΔ
		};
		this.ⲆⲆᐃᐃⲆⲆⵠⵠΔ = function(ⲆΔᐃⲆⵠᐃᐃ) {
			ⵠⵠⵠ.ⲆΔᐃⲆⵠᐃᐃ = ⲆΔᐃⲆⵠᐃᐃ
		};
		this.ⲆΔᐃⲆⵠᐃᐃ = function(ΔⵠⲆⲆⵠ) {
			ⵠⵠⵠ.ⵠⲆᐃⵠΔ.ΔⵠⲆⲆⵠ = ΔⵠⲆⲆⵠ;
			if (-300 < ⲆⲆⲆ.ⵠⲆⵠΔⵠ) {
				if (ⵠⲆΔⵠ === ΔⵠⲆⲆⵠ) this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ⵠⲆⵠΔⲆᐃΔ]);
				else this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ⵠⲆⲆⵠΔᐃⲆ])
			}
		};
		this.ⲆΔⲆᐃᐃᐃⲆᐃΔ = function(ⲆΔΔⵠ) {
			if (ⲆΔΔⵠ === Ⲇᐃⵠⵠ) document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("exploreForest").src = "img/forest-leaf-ok.png";
			else if (ⲆΔΔⵠ === 1) document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("exploreWinter").src = "img/winter-flake-ok.png";
			else if (ⵠΔᐃΔᐃ === ⲆΔΔⵠ) document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("exploreLava").src = "img/lava-volcano-ok.png";
			else ⲆΔΔⵠ === 3 && (document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("exploreDesert").src = "img/desert-cactus-ok.png")
		};
		this.ΔⵠᐃⵠⵠⵠⵠᐃⲆ = function() {
			ⲆΔᐃᐃ.ⵠΔΔᐃⵠᐃΔ = 0
		};
		this.ᐃⲆⲆⵠᐃᐃᐃⲆᐃ = function() {
			ⲆΔᐃᐃ.ⵠᐃⵠⲆⲆᐃⲆ = ⵠᐃΔⲆ
		};
		this.ΔⵠⲆⵠΔᐃⵠΔᐃ = function() {
			ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ = [];
			ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ = [];
			ⵠⵠⵠ.ᐃᐃⲆΔ.id = -ⲆΔᐃΔ;
			ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃⲆΔΔΔΔᐃ.stop();
			ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ = [];
			ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆΔᐃᐃᐃ = false;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ⵠⲆⲆⵠⵠⵠᐃᐃΔ = false;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
			ⵠⵠⵠ.ⲆΔᐃⵠ.id = -ⲆΔⲆⵠ;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠᐃᐃ = false;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⲆⵠⵠ = ⵠᐃᐃⵠΔ;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃⲆᐃΔⲆ = false;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ⵠᐃⲆΔⵠΔⲆ = ⲆΔⲆⲆΔ;
			ⵠⵠⵠ.ⲆΔᐃⵠ.timeout = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ⵠⵠΔᐃ, ⵠⵠⵠΔ, 0, 1, ⵠΔⲆ)
		};
		this.ⵠⵠΔΔΔΔⲆⵠᐃ = function() {
			clearTimeout(this.ΔⵠᐃⲆⲆ);
			this.Ⲇᐃⵠⵠᐃ();
			ⵠⵠΔⵠ.waiting = false
		};
		this.ΔΔⵠᐃᐃΔΔ = function(ᐃⲆᐃᐃ) {
			for (var Δᐃ = 0; Δᐃ < ᐃⲆᐃᐃ.length; Δᐃ++) {
				typeof ᐃⲆᐃᐃ[Δᐃ] === Δ[428] && (ᐃⲆᐃᐃ[Δᐃ] = ⵠᐃΔᐃ.ⲆΔᐃⵠⲆⵠΔ(ᐃⲆᐃᐃ[Δᐃ]))
			}
			ⵠⵠⵠ.ⵠΔΔⵠⵠ.ΔⲆⲆᐃΔ(ᐃⲆᐃᐃ[1], ᐃⲆᐃᐃ[ⲆᐃᐃΔ], ᐃⲆᐃᐃ[3], ᐃⲆᐃᐃ[4])
		};
		this.message = function(ᐃⲆᐃᐃ) {
			this.Ⲇᐃⵠⵠᐃ(ᐃⲆᐃᐃ)
		};
		this.ᐃΔΔⲆᐃⲆⲆΔᐃ = function() {
			clearTimeout(this.ΔⵠᐃⲆⲆ);
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ⲆⵠⲆΔⲆⵠⵠ]);
			ⵠⵠΔⵠ.waiting = ⲆⵠⲆⵠΔ
		};
		this.ⵠᐃⲆΔⵠᐃΔⵠΔ = function() {
			clearTimeout(this.ΔⵠᐃⲆⲆ);
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ⲆⵠⲆᐃⲆΔⲆ]);
			ⵠⵠΔⵠ.waiting = ΔΔᐃⵠᐃ
		};
		this.ΔΔⵠΔⵠΔⲆᐃᐃ = function() {
			clearTimeout(this.ΔⵠᐃⲆⲆ);
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⲆⵠΔ]);
			ⵠⵠΔⵠ.waiting = ⲆⲆⲆΔᐃ
		};
		this.ΔⵠⵠⲆⵠΔⵠΔΔ = function() {
			ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔⲆᐃⵠΔⵠ(1, 0);
			ⲆΔᐃᐃ.ⲆⵠⵠⲆᐃᐃⲆ()
		};
		this.ᐃᐃᐃΔⵠΔΔΔⲆ = function(ΔⲆΔⲆ) {
			var ⵠᐃ = ΔⲆΔⲆ[1];
			var ΔⵠⵠΔ = ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠᐃ];
			ΔⵠⵠΔ.ⵠⲆΔΔ = ΔⲆΔⲆ[ⲆⲆΔΔ];
			ΔⵠⵠΔ.ᐃᐃⲆΔⵠ = ΔⲆΔⲆ[3];
			ΔⵠⵠΔ.ΔⲆᐃᐃΔⵠⲆ = ΔⲆΔⲆ[ᐃⵠⲆⲆ];
			ΔⵠⵠΔ.ⲆΔⵠΔΔ = ΔⲆΔⲆ[5];
			ΔⵠⵠΔ.ⵠⵠΔⲆⲆ = ΔⲆΔⲆ[ΔᐃⵠΔΔ];
			ΔⵠⵠΔ.Δᐃⵠⵠᐃ = ΔⲆΔⲆ[7];
			ΔⵠⵠΔ.level = ΔⲆΔⲆ[ᐃᐃΔⵠΔᐃΔ];
			var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠᐃ * ⲆⲆⲆ.ⵠⵠⵠⲆΔⵠΔ];
			ΔⵠΔ && (ΔⵠΔ.ⵠⲆΔΔ = ΔⲆΔⲆ[Δᐃᐃⵠ], ΔⵠΔ.ᐃᐃⲆΔⵠ = ΔⲆΔⲆ[3], ΔⵠΔ.ΔⲆᐃᐃΔⵠⲆ = ΔⲆΔⲆ[4], ΔⵠΔ.ⲆΔⵠΔΔ = ΔⲆΔⲆ[ᐃΔᐃⲆⲆ])
		};
		this.ⵠᐃΔΔⲆᐃΔᐃΔ = function(ⵠᐃ) {
			Ⲇᐃ.ⲆⲆⲆⲆ === ⵠᐃ ? (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔⲆᐃⵠΔⵠ(1, 0), ⲆΔᐃᐃ.ⲆⵠⵠⲆᐃᐃⲆ()) : this.ᐃⲆⵠⵠΔⲆⵠ([0, ⵠᐃ, 1]);
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⵠΔᐃΔᐃ()
		};
		this.ΔΔᐃⲆⵠᐃᐃᐃⲆ = function(ⵠᐃ) {
			ⵠⵠⵠ.ᐃⲆΔΔᐃ.ᐃΔΔᐃΔ = ⵠᐃΔ;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃⲆⲆⲆΔⵠⲆⲆⵠ(ⵠᐃ)
		};
		this.ΔᐃΔⵠⵠⵠᐃⲆΔ = function(ⵠᐃ) {
			var ⵠⲆΔⵠⲆ = ΔⵠΔⲆΔ[ⵠᐃ].r;
			for (var Δᐃ = 0; Δᐃ < ⵠⲆΔⵠⲆ.length; Δᐃ++) {
				if (ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length < ⵠⵠⵠ.ᐃᐃⲆΔ.max || ⵠᐃⵠⵠ < ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[ⵠⲆΔⵠⲆ[Δᐃ][0]]) {
					var ΔⲆΔⵠ = Math.floor(ⵠⲆΔⵠⲆ[Δᐃ][ᐃⵠⵠ] * .8);
					if (!ΔⲆΔⵠ) continue;
					this.ᐃⲆⵠⵠΔⲆⵠ([ⵠⲆᐃ, ⵠⲆΔⵠⲆ[Δᐃ][0], ΔⲆΔⵠ])
				}
			}
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⵠΔᐃΔᐃ()
		};
		this.ΔᐃᐃⵠΔΔΔⵠⲆ = function(ⵠᐃ) {
			ⵠⵠⵠ.ᐃⲆΔΔᐃ.ᐃΔΔᐃΔ = 0;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ΔᐃⵠᐃᐃΔⲆᐃⵠ(ⵠᐃ)
		};
		this.Ⲇᐃⵠⵠᐃ = function(ᐃⲆᐃᐃ) {
			if (!ⵠⵠⵠ.alert.text) ⵠⵠⵠ.alert.text = ᐃⲆᐃᐃ;
			else ⵠⵠⵠ.alert.text !== ᐃⲆᐃᐃ && ᐃⲆᐃᐃ !== ⵠⵠⵠ.alert.list[ⵠⵠⵠ.alert.list.length - ⲆΔⲆⵠ] && ⵠⵠⵠ.alert.list.push(ᐃⲆᐃᐃ)
		};
		this.ⲆⲆⲆⵠΔΔᐃⵠᐃ = function() {
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⵠⲆᐃⵠΔ])
		};
		this.ΔᐃⲆΔⲆᐃⲆᐃᐃ = function() {
			var ᐃⲆᐃᐃ;
			if (0 == ⵠⵠⵠ.ⵠⵠⲆ) ᐃⲆᐃᐃ = ΔⲆⲆ[ΔΔΔΔ.ΔⵠᐃⲆⵠᐃᐃ];
			else ᐃⲆᐃᐃ = ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠΔᐃᐃᐃ] + (ⵠⵠⵠ.ⵠⵠⲆ + 1) + ΔⲆⲆ[ΔΔΔΔ.ⲆᐃΔᐃΔⲆⲆ];
			this.Ⲇᐃⵠⵠᐃ(ᐃⲆᐃᐃ);
			ⵠⵠⵠ.ⵠⵠⲆ++
		};
		this.ᐃⵠᐃⵠⵠⵠΔⵠΔ = function() {
			clearTimeout(ⲆⲆᐃ.ΔⵠᐃⲆⲆ);
			ⵠⵠⵠ.reconnect.enabled = false;
			ⵠⵠⵠ.ⲆᐃᐃⲆⲆ = ⲆΔΔⵠⵠ;
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⲆΔⲆᐃ]);
			ⲆΔᐃᐃ.ΔⲆⵠᐃΔ(ⵠⵠΔⵠ.ⵠⲆᐃᐃΔ);
			this.ΔΔⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[49]]()
		};
		this.ⵠⲆⲆΔⵠᐃΔⲆⵠ = function() {
			ⲆⵠᐃⵠⲆⲆⵠ = 1;
			clearTimeout(this.ΔⵠᐃⲆⲆ);
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ᐃⵠᐃⲆΔᐃⲆ]);
			ⵠⵠΔⵠ.waiting = false
		};
		this.ⵠⲆΔᐃΔⲆⲆΔⲆ = function() {
			ⲆⵠᐃⵠⲆⲆⵠ = 1;
			clearTimeout(this.ΔⵠᐃⲆⲆ);
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃⲆΔΔⵠ]);
			ⵠⵠΔⵠ.waiting = ⵠⲆⵠᐃᐃ
		};
		this.ⲆΔΔᐃⲆⵠΔᐃⲆ = function(ᐃⲆᐃᐃ) {
			var ⵠᐃ = ᐃⲆᐃᐃ[ᐃⲆΔ];
			var ⵠⲆΔᐃ = ⲆⲆⲆ.ⵠⲆΔᐃ;
			ⵠⲆΔᐃ[ⵠᐃ].ⲆⵠΔⵠΔ = ᐃⲆᐃᐃ[ᐃΔⲆⵠ];
			ⵠⲆΔᐃ[ⵠᐃ].ⵠⲆΔΔ = ᐃⲆᐃᐃ[ΔΔⲆᐃ];
			ⵠⲆΔᐃ[ⵠᐃ].ᐃᐃⲆΔⵠ = ᐃⲆᐃᐃ[ΔᐃΔⲆΔ];
			ⵠⲆΔᐃ[ⵠᐃ].ΔⲆᐃᐃΔⵠⲆ = ᐃⲆᐃᐃ[5];
			ⵠⲆΔᐃ[ⵠᐃ].ⲆΔⵠΔΔ = ᐃⲆᐃᐃ[Δⵠᐃⵠⵠ];
			ⵠⲆΔᐃ[ⵠᐃ].ⵠⵠΔⲆⲆ = ᐃⲆᐃᐃ[7];
			ⵠⲆΔᐃ[ⵠᐃ].Δᐃⵠⵠᐃ = ᐃⲆᐃᐃ[8];
			ⵠⲆΔᐃ[ⵠᐃ].level = ᐃⲆᐃᐃ[9];
			ⵠⲆΔᐃ[ⵠᐃ].ᐃⲆᐃⵠⲆ = 0;
			ⵠⲆΔᐃ[ⵠᐃ].ΔⵠΔⵠⵠΔⲆ = null;
			ⵠⲆΔᐃ[ⵠᐃ].label = null;
			ⵠⲆΔᐃ[ⵠᐃ].ⲆᐃⵠΔᐃⵠⲆ = null;
			ⵠⲆΔᐃ[ⵠᐃ].ⲆᐃᐃⲆⲆ = ⲆⲆᐃᐃⵠ;
			if (1 === ⵠⵠᐃⲆΔⲆᐃ) ⵠⲆΔᐃ[ⵠᐃ].ⲆⵠΔⵠΔ += "|" + ⵠᐃ;
			setTimeout((() => {
				JoinedPlayers.unshift(ⵠⲆΔᐃ[ⵠᐃ].ⲆⵠΔⵠΔ + " | " + ⵠᐃ);
				if (JoinedPlayers.length > 5) JoinedPlayers.pop()
			}), 750)
		};
		this.ΔⵠΔⵠⵠⵠΔⲆΔ = function() {
			Settings.Spectator.enabled || this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ᐃⵠΔΔᐃᐃⲆ[ΔⲆΔᐃⵠⵠΔ].stringify([9]))
		};
		this.ⵠⵠΔΔΔⲆⲆⵠᐃ = function() {
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.EMPTY])
		};
		this.ᐃⲆⵠⲆᐃⵠᐃ = function() {
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ⵠΔⲆⵠᐃⵠⵠ])
		};
		this.ⵠⵠⲆΔᐃⲆᐃΔᐃ = function(ⵠᐃ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⵠΔⲆᐃ[ᐃᐃΔᐃⲆⲆᐃ].stringify([38, ⵠᐃ]));
			ⵠⵠⵠ.ⵠΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ⲆΔΔⵠⵠ
		};
		this.ᐃⲆⲆᐃⵠⲆⵠᐃΔ = function(ΔΔᐃΔ) {
			var ⵠⲆΔⵠⲆ = ⲆΔΔⲆⲆⵠⲆ[ΔΔᐃΔ - 1].items;
			for (var Δᐃ = 0; ⵠⲆΔⵠⲆ.length > Δᐃ && ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length < ⵠⵠⵠ.ᐃᐃⲆΔ.max; Δᐃ++) {
				var Ⲇᐃᐃⵠ = ⵠⲆΔⵠⲆ[Δᐃ][ⵠⵠᐃ];
				var ΔⲆΔⵠ = ⵠⲆΔⵠⲆ[Δᐃ][ⵠᐃΔ];
				Ⲇᐃ.ⲆⲆⲆⲆ === ⵠⲆΔⵠⲆ[Δᐃ][ⵠⲆⲆⲆ] ? ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔⲆᐃⵠΔⵠ(1, ᐃⲆⵠΔ) : this.ᐃⲆⵠⵠΔⲆⵠ([0, Ⲇᐃᐃⵠ, ΔⲆΔⵠ])
			}
		};
		this.ᐃⲆⵠⵠΔⲆⵠ = function(ⲆᐃᐃᐃⲆ) {
			var ΔΔᐃΔᐃ = ⲆᐃᐃᐃⲆ.length;
			var ᐃᐃⲆΔ = ⵠⵠⵠ.ᐃᐃⲆΔ;
			for (var Δᐃ = ⲆⵠⲆ; ΔΔᐃΔᐃ > Δᐃ; Δᐃ += ΔⲆⲆⵠ) {
				var ᐃΔⲆ = ⲆᐃᐃᐃⲆ[Δᐃ];
				var ᐃΔΔᐃ = ⲆᐃᐃᐃⲆ[Δᐃ + ⲆΔⲆⵠ];
				for (var ᐃΔⵠⵠ = ΔᐃΔ; ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length > ᐃΔⵠⵠ; ᐃΔⵠⵠ++) {
					if (ᐃΔⲆ == ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ[ᐃΔⵠⵠ].id) {
						ᐃᐃⲆΔ.ᐃΔΔᐃ[ᐃΔⲆ] += ᐃΔΔᐃ;
						break
					}
				}
				ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length == ᐃΔⵠⵠ && (ᐃᐃⲆΔ.ᐃΔΔᐃ[ᐃΔⲆ] = ᐃΔΔᐃ, ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.push(ⲆΔᐃᐃ.ᐃⲆᐃ[ᐃΔⲆ]), ⲆΔᐃᐃ.ⲆⵠⵠⲆᐃᐃⲆ())
			}
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⵠ()
		};
		this.ᐃⵠⲆᐃ = function(ᐃⵠᐃⲆⲆ, ⵠᐃⵠⲆΔΔΔ, ⵠⲆΔⲆⵠ, ΔΔΔΔⵠⲆⵠ, ⵠᐃⲆᐃΔΔⵠ, ⲆⲆΔⲆΔ, ⵠⲆⲆᐃΔ) {
			if (Math.floor(11 - (Date.now() - Timers.HealTimer) / 1e3) < 5 || ᐃⵠᐃⲆⲆ / 100 > ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆⲆΔ) {
				Timers.HealTimer = (new Date).getTime()
			}
			Timers.GaugeTimer = (new Date).getTime();
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆⲆΔ = ᐃⵠᐃⲆⲆ / ⵠᐃⵠⲆⲆ;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆΔΔ = ⵠᐃⵠⲆΔΔΔ / ⵠΔΔΔⲆ;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.c = ⵠⲆΔⲆⵠ / ⵠᐃΔᐃⵠ;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ΔⲆᐃ = ΔΔΔΔⵠⲆⵠ / 100;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ᐃΔⲆ = ⵠᐃⲆᐃΔΔⵠ / 100;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆΔⵠᐃⵠⲆᐃ = ⲆⲆΔⲆΔ / ᐃⵠᐃⲆⵠ;
			ⵠⵠⵠ.ⵠⲆⲆᐃΔ = ⵠⲆⲆᐃΔ;
			AutoFeed()
		};
		this.ᐃⵠᐃⲆⲆᐃΔΔΔ = function(ⵠᐃ) {
			ⲆΔᐃᐃ.ⵠⲆⲆᐃ.modify(ⵠᐃ, 2)
		};
		this.ⵠᐃᐃⵠᐃΔⲆⲆΔ = function(ⵠᐃ) {
			ⲆΔᐃᐃ.ⵠⲆⲆᐃ.modify(ⵠᐃ, Ⲇᐃⵠⵠ)
		};
		this.claimed = function(ⵠᐃ) {
			ⲆΔᐃᐃ.ⵠⲆⲆᐃ.modify(ⵠᐃ, ΔⵠⲆⲆ)
		};
		this.ᐃⵠⵠⲆⵠⵠⲆΔⵠ = function(ᐃⵠᐃⲆⲆ, ⵠⲆⲆᐃΔ) {
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆⲆΔ = ᐃⵠᐃⲆⲆ / ⵠᐃⵠⲆⵠ;
			ⵠⵠⵠ.ⵠⲆⲆᐃΔ = ⵠⲆⲆᐃΔ
		};
		this.ⵠⵠⵠⵠᐃΔᐃΔⲆ = function(ⵠᐃⲆΔⵠΔⲆ) {
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ΔⲆᐃ = ⵠᐃⲆΔⵠΔⲆ / ⵠᐃΔⲆᐃ
		};
		this.ⲆΔⵠΔΔⲆᐃᐃᐃ = function(ⵠᐃⵠⲆΔΔΔ) {
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆΔΔ = ⵠᐃⵠⲆΔΔΔ / ⵠⲆⲆⵠᐃΔᐃ
		};
		this.ΔⵠΔⲆᐃΔΔⲆᐃ = function(ⲆⲆΔⲆΔ) {
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆΔⵠᐃⵠⲆᐃ = ⲆⲆΔⲆΔ / 100
		};
		this.ᐃᐃΔᐃⵠⲆⲆⲆᐃ = function(ⵠⲆΔⲆⵠ) {
			ⵠⵠⵠ.ᐃⵠⲆᐃ.c = ⵠⲆΔⲆⵠ / ⵠⲆᐃⵠⲆ
		};
		this.ⵠⲆⵠᐃⵠⲆᐃⵠΔ = function(ⵠⲆᐃⲆ) {
			ⲆⲆⲆ.time = ⵠⲆᐃⲆ;
			ⲆⲆⲆ.transition = ⵠΔΔᐃⲆ;
			ⵠᐃⲆΔ.transition = ᐃΔⵠΔ
		};
		this.ᐃⵠᐃΔᐃⵠⵠⵠᐃ = function() {
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[563]).style.backgroundColor = ⵠ.ⵠᐃΔⲆΔ[ⲆⲆⲆ.time]
		};
		this.ⵠΔⲆᐃⲆⲆᐃⲆᐃ = function(ⵠᐃ) {
			if (ⵠΔᐃⲆ.ⲆᐃᐃⲆⵠᐃⵠ == ⲆⲆⲆ.mode && ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠᐃ].ⲆⵠΔⵠΔ !== Δ[67]) this.Ⲇᐃⵠⵠᐃ(ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠᐃ].ⲆⵠΔⵠΔ + ΔⲆⲆ[ΔΔΔΔ.ΔⲆΔᐃᐃⵠⵠ]);
			ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠᐃ].ⲆᐃᐃⲆⲆ = ⲆⲆⲆΔᐃ;
			setTimeout((() => {
				KilledPlayers.unshift(ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠᐃ].ⲆⵠΔⵠΔ + " | " + ⵠᐃ);
				if (KilledPlayers.length > 5) KilledPlayers.pop()
			}), 750)
		};
		this.ⲆᐃᐃⵠⲆⲆⵠⲆⵠ = function(ⲆⵠΔᐃ) {
			var ⲆᐃᐃᐃⲆ = new Uint16Array(ⲆⵠΔᐃ);
			Settings.Spectator.enabled || ΔⵠⵠΔ.ᐃⵠⲆ.ⵠⵠᐃⵠᐃ(ⲆᐃᐃᐃⲆ[1], ⲆᐃᐃᐃⲆ[2])
		};
		this.ΔΔᐃⲆⲆⲆⵠΔᐃ = function(ⲆⵠΔᐃ) {
			var ⲆᐃᐃᐃⲆ = new Uint16Array(ⲆⵠΔᐃ);
			ⵠⵠⵠ.ᐃⵠⲆ.ⵠⵠᐃⵠᐃ(ⲆᐃᐃᐃⲆ[1], ⲆᐃᐃᐃⲆ[Δⵠᐃᐃ])
		};
		this.ⲆⵠᐃⵠΔⵠⲆᐃⵠ = function(ΔⲆΔⲆ, ⲆⵠΔᐃ) {
			var ⲆᐃᐃᐃⲆ = new Uint16Array(ⲆⵠΔᐃ);
			var ΔΔᐃΔᐃ = (ΔⲆΔⲆ.length - 2) / ΔⵠⲆⵠⲆ;
			for (var ⲆⲆⲆΔ = 0; ΔΔᐃΔᐃ > ⲆⲆⲆΔ; ⲆⲆⲆΔ++) {
				var ⵠᐃ = ⲆᐃᐃᐃⲆ[1 + Ⲇⵠᐃⵠ * ⲆⲆⲆΔ];
				var ΔᐃᐃⲆ = ΔⲆΔⲆ[ⲆⵠⲆⲆⲆ + ⲆⵠⲆⲆⲆ * ⲆⲆⲆΔ];
				var ⵠᐃᐃ = 2 * (Math.PI * ((ΔⲆΔⲆ[5 + ⲆⵠⵠⲆ * ⲆⲆⲆΔ] >> 1) / 127));
				var ᐃᐃΔᐃ = ⲆⲆⲆ.ΔⲆᐃᐃ[ΔᐃᐃⲆ * ⲆⲆⲆ.ⵠⵠⵠⲆΔⵠΔ + ⵠᐃ];
				if (ᐃᐃΔᐃ && ᐃᐃΔᐃ.ᐃⲆⵠ) {
					if (ⵠᐃⲆΔ.loaded && ⵠᐃⲆΔ.ⵠⲆᐃᐃΔ) ⵠᐃⲆΔ.ᐃⲆⵠ(ΔⲆΔⲆ[ⲆΔⲆⲆ + 4 * ⲆⲆⲆΔ] & 1, ᐃΔᐃΔⵠ[ᐃᐃΔᐃ.type], ᐃᐃΔᐃ.x, ᐃᐃΔᐃ.y);
					ᐃᐃΔᐃ.ᐃⲆⵠ.angle = ⵠᐃᐃ;
					ᐃᐃΔᐃ.ᐃⲆⵠ.ᐃᐃⵠ = ⵠᐃᐃ
				}
			}
		};
		this.ᐃⵠΔΔⲆΔΔᐃᐃ = function(ⲆⵠΔᐃ) {
			var ⲆᐃᐃᐃⲆ = new Uint16Array(ⲆⵠΔᐃ);
			var ΔΔᐃΔᐃ = (ⲆᐃᐃᐃⲆ.length - 1) / ΔⵠⲆⵠⲆ;
			for (var ⲆⲆⲆΔ = ⵠⲆᐃ; ΔΔᐃΔᐃ > ⲆⲆⲆΔ; ⲆⲆⲆΔ++) {
				var ΔΔᐃΔ = ᐃΔⲆΔⲆ * ⲆⲆⲆΔ;
				var Δᐃ = ⲆᐃᐃᐃⲆ[1 + ΔΔᐃΔ];
				var ᐃΔⵠⵠ = ⲆᐃᐃᐃⲆ[2 + ΔΔᐃΔ];
				var ⵠᐃᐃ = (ⲆᐃᐃᐃⲆ[ᐃⵠᐃⲆ + ΔΔᐃΔ] >> ᐃⲆΔ) / 127 * Math.PI * ⲆⲆΔΔ;
				var ⵠᐃ = ⲆᐃᐃᐃⲆ[4 + ΔΔᐃΔ];
				var ΔⲆⵠΔ = ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[ᐃΔⵠⵠ][Δᐃ];
				var ᐃΔⲆ;
				switch (ⵠᐃ) {
					case 0:
						ᐃΔⲆ = ΔⲆⵠΔ["p"][ⵠᐃΔ][ΔᐃΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ΔⵠⲆΔⲆ;
						break;
					case ᐃΔⵠΔ:
						ᐃΔⲆ = ΔⲆⵠΔ["s"][0][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case Δⵠᐃᐃ:
						ᐃΔⲆ = ΔⲆⵠΔ["s"][ⵠΔᐃ][ⵠⲆΔⵠ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⵠΔᐃⵠΔ;
						break;
					case ⲆΔΔⲆ:
						ᐃΔⲆ = ΔⲆⵠΔ["s"][2][ⵠΔΔᐃ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⵠⲆΔΔᐃ;
						break;
					case ⲆⲆᐃΔᐃ:
						ᐃΔⲆ = ΔⲆⵠΔ["t"][0][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⲆⲆⵠⵠⲆ;
						break;
					case 5:
						ᐃΔⲆ = ΔⲆⵠΔ["t"][1][ⵠᐃΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⵠⲆΔΔⲆ;
						break;
					case 6:
						ᐃΔⲆ = ΔⲆⵠΔ["t"][2][ⵠⵠΔΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 7:
						ᐃΔⲆ = ΔⲆⵠΔ["t"][ᐃᐃΔⵠ][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case ΔΔᐃΔΔ:
						ᐃΔⲆ = ΔⲆⵠΔ["t"][ⵠⲆⲆΔΔ][ᐃⲆⵠΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⲆⲆⵠⵠⲆ;
						break;
					case 9:
						ᐃΔⲆ = ΔⲆⵠΔ["t"][5][ⵠⵠΔᐃ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 10:
						ᐃΔⲆ = ΔⲆⵠΔ["g"][0][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case ᐃⲆΔΔΔΔΔ:
						ᐃΔⲆ = ΔⲆⵠΔ["g"][ΔⵠⲆ][ⵠⵠΔΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case ᐃⲆⵠΔⵠ:
						ᐃΔⲆ = ΔⲆⵠΔ["g"][ⲆᐃᐃΔ][ⵠᐃΔⲆ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 13:
						ᐃΔⲆ = ΔⲆⵠΔ["d"][ⵠⲆΔⵠ][ⵠⲆᐃ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⲆⲆᐃᐃⵠ;
						break;
					case 14:
						ᐃΔⲆ = ΔⲆⵠΔ["d"][ⲆⲆⲆᐃ][ⲆᐃⲆ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⵠⲆΔΔⲆ;
						break;
					case ΔⲆΔⵠⲆ:
						ᐃΔⲆ = ΔⲆⵠΔ["d"][2][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⲆⲆᐃᐃⵠ;
						break;
					case ⵠⲆᐃᐃⵠⵠᐃ:
						ᐃΔⲆ = ΔⲆⵠΔ["b"][ⲆⲆⵠⲆ][ⵠⵠΔΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 17:
						ᐃΔⲆ = ΔⲆⵠΔ["b"][ⲆΔᐃΔ][ⵠⲆΔⵠ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⵠⲆΔΔⲆ;
						break;
					case ⲆΔᐃΔΔ:
						ᐃΔⲆ = ΔⲆⵠΔ["b"][ⲆⲆΔΔ][ⲆΔⵠΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case ⵠᐃⲆⵠᐃᐃⲆ:
						ᐃΔⲆ = ΔⲆⵠΔ["b"][ⲆΔΔⲆ][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ΔᐃⲆⵠΔ;
						break;
					case ΔⵠⲆⲆⵠⵠⵠ:
						ᐃΔⲆ = ΔⲆⵠΔ["f"][0][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⵠⲆΔΔᐃ;
						break;
					case 21:
						ᐃΔⲆ = ΔⲆⵠΔ["f"][ᐃⲆΔ][ⵠᐃⵠⵠ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⲆⲆⵠⲆᐃ;
						break;
					case 22:
						ᐃΔⲆ = ΔⲆⵠΔ["f"][ᐃΔⲆⵠ][ⲆⲆⵠⲆ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 23:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[483]][0][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 24:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[483]][1][ⵠΔΔᐃ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 25:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[483]][2][Ⲇᐃⵠⵠ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 26:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[8]][0][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ᐃⲆᐃⵠΔ;
						break;
					case 27:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[8]][ᐃⲆΔ][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⵠΔᐃⵠΔ;
						break;
					case 28:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[ⲆᐃⲆΔⲆ]][ᐃᐃᐃᐃ][ᐃΔΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 29:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[268]][ⲆⲆⵠⲆ][ⲆΔⵠΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 30:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[268]][1][Ⲇᐃⵠⵠ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⵠⲆΔΔⲆ;
						break;
					case 31:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[268]][2][ΔᐃΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⵠΔᐃⵠΔ;
						break;
					case 32:
						ᐃΔⲆ = ΔⲆⵠΔ["a"][ⵠΔΔᐃ][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 33:
						ᐃΔⲆ = ΔⲆⵠΔ["a"][1][ⲆⲆᐃΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⵠⲆΔΔⲆ;
						break;
					case 34:
						ᐃΔⲆ = ΔⲆⵠΔ["a"][2][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 35:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[278]][ⵠᐃΔ][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⲆΔᐃⵠⵠ;
						break;
					case 36:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[278]][1][Δⵠⵠ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⵠⵠᐃⵠⵠ;
						break;
					case 37:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[278]][2][ⵠᐃΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 38:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[278]][3][ⵠΔΔᐃ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⲆΔᐃⵠⵠ;
						break;
					case 40:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[218]][0][ⵠΔΔᐃ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⵠⲆΔΔⲆ;
						break;
					case 41:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[218]][1][ᐃⲆⵠΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⲆᐃⵠⵠⲆ;
						break;
					case 42:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[218]][2][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⲆΔᐃⵠⵠ;
						break;
					case 50:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[156]][0][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 51:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[156]][1][ⵠⲆⵠ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 52:
						ᐃΔⲆ = ΔⲆⵠΔ[Δ[156]][2][ⲆⲆⵠⲆ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⲆⲆⵠⲆᐃ;
						break;
					case 55:
						ᐃΔⲆ = ΔⲆⵠΔ["c"][ⵠΔⵠⲆ][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ᐃⲆⲆⲆΔ;
						break;
					case 56:
						ᐃΔⲆ = ΔⲆⵠΔ["m"][0][ⲆⲆᐃΔ];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break;
					case 57:
						ᐃΔⲆ = ΔⲆⵠΔ["m"][ⵠⵠⵠΔ][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = ⲆᐃⵠⵠⲆ;
						break;
					case 58:
						ᐃΔⲆ = ΔⲆⵠΔ["m"][ΔⲆⲆⵠ][0];
						ᐃΔⲆ.angle = ⵠᐃᐃ;
						ᐃΔⲆ.ᐃᐃⵠ = true;
						break
				}
				ⵠᐃⲆΔ.loaded && ⵠᐃⲆΔ.ⵠⲆᐃᐃΔ && ᐃΔⲆ && ⵠᐃⲆΔ.ᐃⲆⵠ(ⲆᐃᐃᐃⲆ[ᐃΔΔΔ + ΔΔᐃΔ] & 1, ⲆᐃΔΔ[ⵠᐃ], ᐃΔⲆ.x, ᐃΔⲆ.y)
			}
		};
		this.ⵠΔᐃᐃᐃ = function() {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⲆⲆΔⵠᐃᐃ[ᐃᐃⲆⵠᐃ].stringify([35, ⵠⵠⵠ.ⵠΔᐃᐃᐃ.ΔᐃᐃⲆ, ⵠⵠⵠ.ⵠΔᐃᐃᐃ.ΔᐃⲆΔΔ]))
		};
		this.ⲆΔᐃⲆⲆΔΔⲆⲆ = function(ⵠⲆⵠᐃ, ᐃΔΔᐃ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⲆⲆΔⵠᐃᐃ[ⲆⲆⵠᐃⲆⵠⲆ].stringify([30, ᐃΔΔᐃ, ⵠⲆⵠᐃ.ΔᐃᐃⲆ, ⵠⲆⵠᐃ.ΔᐃⲆΔΔ]))
		};
		this.ΔᐃⵠΔⵠᐃⲆ = function(ΔᐃΔᐃ, Δⵠᐃ, Ⲇᐃᐃ) {
			if (Δⵠᐃ) this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⲆⲆΔⵠᐃᐃ[ⲆⲆⵠᐃⲆⵠⲆ].stringify([ⲆⲆⲆⵠᐃⲆᐃ, Δⵠᐃ, ΔᐃΔᐃ.ΔᐃᐃⲆ, ΔᐃΔᐃ.ΔᐃⲆΔΔ]));
			else this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⲆⲆΔⵠᐃᐃ[ᐃⵠΔⵠⲆΔⵠ].stringify([25, Ⲇᐃᐃ, ΔᐃΔᐃ.ΔᐃᐃⲆ, ΔᐃΔᐃ.ΔᐃⲆΔΔ]))
		};
		this.ΔΔΔⲆⵠΔᐃΔᐃ = function(ΔᐃΔᐃ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃΔᐃΔ[ΔΔᐃᐃⵠ].stringify([13, ΔᐃΔᐃ.ΔᐃᐃⲆ, ΔᐃΔᐃ.ΔᐃⲆΔΔ]))
		};
		this.ⵠΔⲆⲆⵠᐃⲆΔᐃ = function(ΔΔⵠᐃⵠᐃⵠᐃᐃ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃΔᐃΔ[ⵠΔⵠⵠᐃⵠⲆ].stringify([32, ΔΔⵠᐃⵠᐃⵠᐃᐃ]))
		};
		this.ᐃΔⲆΔⵠⲆᐃΔⵠ = function(ᐃᐃⲆⵠⵠ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃΔⲆΔⵠᐃ[ᐃᐃⲆⵠᐃ].stringify([29, ᐃᐃⲆⵠⵠ.ΔᐃᐃⲆ, ᐃᐃⲆⵠⵠ.ΔᐃⲆΔΔ]))
		};
		this.ΔᐃᐃⵠⲆᐃᐃΔⲆ = function(ᐃΔⲆΔ, ᐃΔΔᐃ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⵠΔⲆᐃ[ΔΔᐃᐃⵠ].stringify([27, ᐃΔΔᐃ, ᐃΔⲆΔ.ΔᐃᐃⲆ, ᐃΔⲆΔ.ΔᐃⲆΔΔ, ᐃΔⲆΔ.type]))
		};
		this.ⵠⲆΔⲆⲆⲆᐃⵠΔ = function(ΔⵠⲆⵠⵠ, ᐃΔΔᐃ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⵠΔⲆᐃ[ΔΔᐃᐃⵠ].stringify([7, ᐃΔΔᐃ, ΔⵠⲆⵠⵠ.ΔᐃᐃⲆ, ΔⵠⲆⵠⵠ.ΔᐃⲆΔΔ]))
		};
		this.ΔⵠⵠⵠΔΔᐃⵠᐃ = function(ᐃΔⵠⲆ, ⵠᐃ, ᐃΔΔᐃ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃΔⲆΔⵠᐃ[ⲆⲆⵠᐃⲆⵠⲆ].stringify([1, ⵠᐃ, ᐃΔΔᐃ, ᐃΔⵠⲆ.ΔᐃᐃⲆ, ᐃΔⵠⲆ.ΔᐃⲆΔΔ]))
		};
		this.ⵠⲆᐃΔΔⲆΔ = function(ᐃΔⲆΔ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃΔᐃΔ[ΔΔᐃᐃⵠ].stringify([37, ᐃΔⲆΔ.ΔᐃᐃⲆ, ᐃΔⲆΔ.ΔᐃⲆΔΔ, ᐃΔⲆΔ.type]))
		};
		this.ⵠᐃᐃⲆⵠΔᐃⲆΔ = function(ⵠⲆⵠᐃ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃΔᐃΔ[ΔΔᐃᐃⵠ].stringify([ⲆⵠⵠⲆ, ⵠⲆⵠᐃ.ΔᐃᐃⲆ, ⵠⲆⵠᐃ.ΔᐃⲆΔΔ]))
		};
		this.ΔⲆⵠᐃⵠⵠⲆⵠⵠ = function(ᐃΔⵠⲆ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃΔᐃΔ[ΔΔᐃᐃⵠ].stringify([ΔΔⵠⵠⵠ, ᐃΔⵠⲆ.ΔᐃᐃⲆ, ᐃΔⵠⲆ.ΔᐃⲆΔΔ]))
		};
		this.ΔⵠᐃᐃⲆⵠᐃⲆⲆ = function(ᐃΔⵠⲆ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⲆᐃⵠᐃⵠⵠ[ᐃⲆΔⵠᐃΔΔ].stringify([20, ᐃΔⵠⲆ.ΔᐃᐃⲆ, ᐃΔⵠⲆ.ΔᐃⲆΔΔ]))
		};
		this.ᐃᐃⵠΔⵠⵠᐃᐃⵠ = function(ᐃΔⵠⲆ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠⲆᐃⲆᐃᐃᐃ[ᐃᐃΔᐃⲆⲆᐃ].stringify([3, ᐃΔⵠⲆ.ΔᐃⲆΔΔ]))
		};
		this.ⲆΔⲆΔΔⲆᐃ = function(ᐃⵠⲆⵠΔⵠⵠ) {
			ⲆⲆᐃ.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⲆⵠΔⲆⵠΔⲆ[ⵠΔⵠⵠᐃⵠⲆ].stringify([23, ⵠⵠⵠ.ᐃⲆⲆΔⲆ.id, ⵠⵠⵠ.ΔΔΔᐃΔ[ᐃⵠⲆⵠΔⵠⵠ]]))
		};
		this.ⵠᐃⲆⲆΔⵠᐃⵠⲆ = function() {
			ⲆⲆᐃ.ΔΔⵠᐃ[ⵠⵠⲆΔ](ᐃΔΔᐃⲆⵠⵠ[ΔⲆⲆⵠⵠⲆΔ].stringify([ⲆⲆⵠⵠᐃⵠΔ, ⵠⵠⵠ.ᐃⲆⲆΔⲆ.ΔᐃᐃⲆ, ⵠⵠⵠ.ᐃⲆⲆΔⲆ.id]))
		};
		this.ᐃⵠΔⵠΔΔⲆ = function() {
			ⲆⲆᐃ.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃᐃᐃΔᐃΔ[ᐃᐃᐃⵠⲆⵠⲆ].stringify([ΔΔΔⲆΔ]))
		};
		this.ⵠⵠⲆΔΔⲆⵠᐃⲆ = function() {
			ⲆⲆᐃ.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃᐃᐃΔᐃΔ[ⵠΔⵠⵠᐃⵠⲆ].stringify([19, ⵠⵠⵠ.ᐃⲆⲆΔⲆ.id]));
			"LOCK" == document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[430])[ᐃⲆᐃᐃᐃᐃⵠ[83]] ? (ⵠⵠⵠ.ᐃⲆⲆΔⲆ.lock = ᐃⲆΔ, document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[430])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "UNLOCK") : (ⵠⵠⵠ.ᐃⲆⲆΔⲆ.lock = ⵠᐃΔ, document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[430])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "LOCK")
		};
		this.Ⲇᐃⵠ = function(ⲆⵠΔᐃ, ΔⲆΔⲆ, ⵠⲆᐃⵠⵠΔⵠⲆᐃ) {
			var ⲆᐃᐃᐃⲆ = new Uint16Array(ⲆⵠΔᐃ);
			if (ⵠⲆᐃⵠⵠΔⵠⲆᐃ) ⲆⲆⲆ.ⲆΔⵠΔΔΔⲆⲆⲆ();
			var ΔΔᐃΔᐃ = (ΔⲆΔⲆ.length - 2) / ΔⲆⲆⲆΔᐃⵠ;
			for (var Δᐃ = ⵠⲆᐃ; Δᐃ < ΔΔᐃΔᐃ; Δᐃ++) {
				var ⲆᐃⵠΔᐃⵠᐃ = ⲆᐃⵠⲆ + Δᐃ * ᐃⵠᐃⵠⵠⵠⵠ;
				var ⲆⲆΔⵠΔⵠΔ = 1 + 9 * Δᐃ;
				var ΔᐃᐃⲆ = ΔⲆΔⲆ[ⲆᐃⵠΔᐃⵠᐃ];
				var ΔΔⵠⲆ = ⲆᐃᐃᐃⲆ[ⲆⲆΔⵠΔⵠΔ + ΔⵠⲆ];
				var ⵠᐃ = ⲆᐃᐃᐃⲆ[ⲆⲆΔⵠΔⵠΔ + ⵠᐃᐃΔᐃ];
				var ΔᐃⲆⵠ = ⲆⲆⲆ.ⵠⵠⵠⲆΔⵠΔ * ΔᐃᐃⲆ + ⵠᐃ;
				if (ΔΔⵠⲆ & ⵠᐃᐃⵠ.ⲆⵠⵠΔΔΔⵠᐃⵠ) {
					ⲆⲆⲆ.ΔᐃⵠⵠⵠΔⵠΔΔ(ΔᐃⲆⵠ);
					continue
				}
				var ᐃⵠⵠⵠ = ⲆᐃᐃᐃⲆ[ⲆⲆΔⵠΔⵠΔ + 2];
				var ΔΔ = ⲆᐃᐃᐃⲆ[ⲆⲆΔⵠΔⵠΔ + ᐃΔᐃⲆ];
				var ΔΔⵠ = ⲆᐃᐃᐃⲆ[ⲆⲆΔⵠΔⵠΔ + ΔⵠⲆᐃ];
				var Ⲇⵠⵠ = ⲆᐃᐃᐃⲆ[ⲆⲆΔⵠΔⵠΔ + ⵠΔΔⲆΔ];
				var ΔⲆⵠⵠΔ = ⲆᐃᐃᐃⲆ[ⲆⲆΔⵠΔⵠΔ + ΔᐃⲆΔᐃ];
				var ⲆⵠᐃⵠΔ = ⲆᐃᐃᐃⲆ[ⲆⲆΔⵠΔⵠΔ + ΔⲆΔⲆⲆ];
				var ⵠᐃᐃ = Math.PI * (ΔⲆΔⲆ[ⲆᐃⵠΔᐃⵠᐃ + 1] / 255) * 2;
				if (!ⲆⲆⲆ.ΔⲆᐃᐃ[ΔᐃⲆⵠ]) {
					var ᐃΔⲆ = new ⵠⵠⵠᐃⵠⲆΔ(ᐃⵠⵠⵠ, ΔᐃᐃⲆ, ⵠᐃ, ΔΔ, ΔΔⵠ, ⵠᐃᐃ, ΔΔⵠⲆ, Ⲇⵠⵠ, ΔⲆⵠⵠΔ, ⲆⵠᐃⵠΔ);
					ⲆⲆⲆ.ΔⲆᐃᐃ[ΔᐃⲆⵠ] = ᐃΔⲆ;
					ⲆⲆⲆ.Ⲇᐃⵠ[ᐃⵠⵠⵠ].push(ᐃΔⲆ);
					continue
				}
				var ᐃᐃΔᐃ = ⲆⲆⲆ.ΔⲆᐃᐃ[ΔᐃⲆⵠ];
				ᐃᐃΔᐃ.r.x = ΔΔ;
				ᐃᐃΔᐃ.r.y = ΔΔⵠ;
				ΔᐃᐃⲆ != ⵠΔⵠⲆ && ⵠᐃΔᐃ.ᐃⲆΔⵠ(ᐃᐃΔᐃ, ᐃᐃΔᐃ.r) > ⲆᐃᐃΔⲆ.ΔⲆⲆᐃⲆᐃⵠΔΔ && (ᐃᐃΔᐃ.x = ΔΔ, ᐃᐃΔᐃ.y = ΔΔⵠ);
				if (ⵠⵠⵠ.id !== ᐃᐃΔᐃ.id || ⵠΔⵠⲆ === ΔᐃᐃⲆ) ᐃᐃΔᐃ.ⵠⵠᐃⵠⲆᐃΔ = ⵠᐃᐃ;
				ᐃᐃΔᐃ.action |= ΔΔⵠⲆ;
				ᐃᐃΔᐃ.info = Ⲇⵠⵠ;
				ᐃᐃΔᐃ.ΔⲆⵠⵠΔ = ΔⲆⵠⵠΔ;
				ᐃᐃΔᐃ.ⲆⵠᐃⵠΔ = ⲆⵠᐃⵠΔ;
				ᐃᐃΔᐃ.ᐃᐃⵠ && ᐃᐃΔᐃ.ᐃᐃⵠ(ΔΔⵠⲆ)
			}
		};
		this.ⲆⲆⲆⵠ = function(ⲆⵠΔᐃ) {
			this.ᐃⵠΔᐃΔⲆⵠ = ⲆᐃᐃⲆΔ;
			var ᐃᐃΔᐃ = new Uint16Array(ⲆⵠΔᐃ);
			ⵠⵠⵠ.ᐃⵠⲆⵠᐃ.ΔⲆᐃᐃⵠ(ᐃᐃΔᐃ)
		};
		this.ⵠΔᐃⵠᐃⲆᐃⲆⵠ = function(ᐃⲆΔⲆΔⲆⵠ) {
			if (ᐃⲆΔᐃΔⲆᐃ !== undefined) ΔⵠΔⲆΔ = ᐃⲆΔᐃΔⲆᐃ;
			if (ⲆΔⵠΔ < ᐃⲆΔⲆΔⲆⵠ.length) {
				ᐃⲆΔᐃΔⲆᐃ = JSON.parse(JSON.stringify(ΔⵠΔⲆΔ));
				for (var Δᐃ = 0; ᐃⲆΔⲆΔⲆⵠ.length > Δᐃ; Δᐃ++) {
					var ⵠᐃⵠ = ᐃⲆΔⲆΔⲆⵠ[Δᐃ];
					var ᐃⵠᐃⲆⵠⵠᐃ = ΔⵠΔⲆΔ[ⵠᐃⵠ["item"]];
					if (ᐃⵠᐃⲆⵠⵠᐃ === undefined) continue;
					ᐃⵠᐃⲆⵠⵠᐃ.r = ⵠᐃⵠ["recipe"];
					ᐃⵠᐃⲆⵠⵠᐃ.w = ⵠᐃⵠ["workbench"];
					ᐃⵠᐃⲆⵠⵠᐃ.f = ⵠᐃⵠ["fire"];
					ᐃⵠᐃⲆⵠⵠᐃ.ᐃΔⲆ = ⵠᐃⵠ["water"];
					ᐃⵠᐃⲆⵠⵠᐃ.e = ⵠᐃⵠ["well"];
					ᐃⵠᐃⲆⵠⵠᐃ.time = 1 / ⵠᐃⵠ[Δ[302]]
				}
			}
		};
		this.ⵠⵠⲆΔΔᐃᐃ = function(ᐃⲆᐃᐃ) {
			!ᐃⲆᐃᐃ || ⵠⲆᐃ === ᐃⲆᐃᐃ.length ? ⵠⵠⵠ.ⵠⵠⲆΔΔᐃᐃ.message = ⵠᐃΔⵠΔ : ⵠⵠⵠ.ⵠⵠⲆΔΔᐃᐃ.message = ⵠⲆᐃΔΔᐃΔⵠᐃ(ᐃⲆᐃᐃ)
		};
		this.ΔⵠΔΔⲆ = function(ᐃⲆᐃᐃ) {
			var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ᐃⲆᐃᐃ[ᐃⲆⲆ] * ⲆⲆⲆ.ⵠⵠⵠⲆΔⵠΔ];
			if (ΔⵠΔ) {
				if (ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ && ΔⵠΔ.ⵠⲆΔΔ === ⵠΔᐃⲆ.ᐃᐃⲆᐃᐃᐃΔ) {
					if (!ⵠⵠⵠ.ⵠΔⲆⲆⲆ) ΔⵠΔ.text.push(ΔⲆⵠΔⲆⲆⲆ[Math.floor(Math.random() * ΔⲆⵠΔⲆⲆⲆ.length)]);
					else {
						if (Math.random() > .5) ΔⵠΔ.text.push(ᐃⲆᐃᐃ[ⲆⲆᐃⲆ] + " ..." + ᐃⵠᐃΔΔ);
						else ΔⵠΔ.text.push(ᐃⵠᐃΔΔ + "... " + ᐃⲆᐃᐃ[ΔⲆⲆⵠ])
					}
				} else ΔⵠΔ.text.push(ᐃⲆᐃᐃ[2])
			}
		};
		this.ⵠⲆᐃΔᐃⲆⵠΔⲆ = function(ⵠᐃ) {
			if (ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length === ⵠⵠⵠ.ᐃᐃⲆΔ.max && ΔⵠΔⲆΔ[ⵠᐃ].ⵠⵠⲆᐃ !== Ⲇᐃ.ⲆⲆⲆⲆ && ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(ΔⵠΔⲆΔ[ⵠᐃ].ⵠⵠⲆᐃ) == -1 && !ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆⵠⵠⵠᐃᐃⲆΔΔ(ΔⵠΔⲆΔ[ⵠᐃ].r)) {
				this.ᐃⲆⵠⲆᐃⵠᐃ();
				return 0
			}
			if (Settings.AutoBook.enabled) {
				const me = getWorldFastUnitsProperty()[getUserUidProperty()];
				const socket = getClientWebSocketProperty();
				if (canSelect(28) && me.right != 28) socket.send(JSON.stringify([Packets.Equip, 28]))
			}
			Settings.AutoCraft.last = ⵠᐃ;
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ᐃⵠΔΔᐃᐃⲆ[ΔⲆΔᐃⵠⵠΔ].stringify([26, ⵠᐃ]));
			return ⵠΔᐃ
		};
		this.ⲆⲆⵠᐃᐃ = function(Ⲇⵠⵠⵠᐃ) {
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔⲆⵠΔᐃᐃΔⵠ(Ⲇⵠⵠⵠᐃ)
		};
		this.ᐃᐃⲆⵠⵠ = function(Ⲇⵠⵠⵠᐃ) {
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⲆⵠⵠ = Ⲇⵠⵠⵠᐃ;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⵠ()
		};
		this.ᐃⲆᐃΔⲆ = function(Ⲇⵠⵠⵠᐃ) {
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃⲆᐃΔⲆ = Ⲇⵠⵠⵠᐃ;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⵠ()
		};
		this.ⵠᐃⲆΔⵠΔⲆ = function(Ⲇⵠⵠⵠᐃ) {
			ⵠⵠⵠ.ⲆΔᐃⵠ.ⵠᐃⲆΔⵠΔⲆ = Ⲇⵠⵠⵠᐃ;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⵠ()
		};
		this.ⵠᐃΔᐃⵠⲆᐃΔⲆ = function(ⲆⲆ) {
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ⲆᐃⵠⵠᐃⲆΔ])
		};
		this.ⵠΔΔΔⵠΔⵠᐃΔ = function() {
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⵠΔᐃΔᐃ()
		};
		this.ⵠⲆⵠᐃⵠ = function(ⲆᐃᐃᐃΔ) {
			ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.ⵠⲆΔᐃ = [];
			var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
			var ⵠⲆᐃⲆ = ⲆᐃⲆ;
			for (var Δᐃ = ΔΔⲆΔ; ⲆᐃᐃᐃΔ.length > Δᐃ; Δᐃ += 2) {
				var ⵠΔΔⲆ = {
					x: Math.floor(ⲆᐃᐃᐃΔ[Δᐃ] * ⲆⲆⲆ.w / 250),
					y: Math.floor(ⲆᐃᐃᐃΔ[Δᐃ + ⲆⵠΔⲆ] * ⲆⲆⲆ.ⲆΔΔ / 250)
				};
				if (ΔⵠΔ && !ⵠⲆᐃⲆ && !ⵠⵠⵠ.ⲆⲆᐃⵠΔⲆⵠ && ⵠᐃΔᐃ.ᐃⲆΔⵠ(ⵠΔΔⲆ, ΔⵠΔ) < 250) {
					ⵠⲆᐃⲆ += 1;
					continue
				}
				ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.ⵠⲆΔᐃ.push(ⵠΔΔⲆ)
			}
		};
		this.ᐃᐃΔⵠⵠⲆⲆⲆᐃ = function() {
			ⵠⵠⵠ.ⵠΔᐃᐃᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false;
			ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled = ⲆⵠⲆΔᐃ;
			ⵠⵠⵠ.ΔⲆⵠⲆᐃ.ᐃΔΔᐃΔ = -ⵠΔᐃ;
			ⵠⵠⵠ.ΔⲆⵠⲆᐃ.label = null;
			ⵠⵠⵠ.ΔⲆⵠⲆᐃ.ΔⲆⲆᐃΔΔⵠ = null;
			ⵠⵠⵠ.ΔⲆⵠⲆᐃ.now = -1
		};
		this.ΔⲆⵠⲆᐃ = function(ΔΔᐃᐃⲆⲆⵠΔΔ) {
			ⵠΔᐃⲆ.ⲆⲆⵠΔΔᐃᐃ = ΔΔᐃᐃⲆⲆⵠΔΔ;
			ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled = ⲆᐃⵠⵠⲆ;
			ⵠⵠⵠ.ΔⲆⵠⲆᐃ.ᐃΔΔᐃΔ = (new Date).getTime();
			ⵠⵠⵠ.ΔⲆⵠⲆᐃ.label = null;
			ⵠⵠⵠ.ΔⲆⵠⲆᐃ.now = -1;
			var ΔⲆᐃΔ = [Ⲇᐃ.ⵠΔⵠⵠΔ, Ⲇᐃ.ⲆⵠⲆΔΔ, Ⲇᐃ.ᐃᐃᐃⵠΔ, Ⲇᐃ.ΔᐃΔΔΔ, Ⲇᐃ.ⵠⲆᐃⲆⵠ, Ⲇᐃ.ⲆⲆⲆΔΔ, Ⲇᐃ.ᐃΔᐃᐃⲆ, Ⲇᐃ.ⵠΔⵠⵠᐃ, Ⲇᐃ.ᐃⲆΔⵠⵠ, Ⲇᐃ.ᐃⵠΔᐃᐃ, Ⲇᐃ.ⲆⵠⲆⲆⵠ, Ⲇᐃ.ᐃᐃⲆⲆⲆ, Ⲇᐃ.ⵠᐃⵠⵠΔ, Ⲇᐃ.ΔᐃⵠᐃⲆ, Ⲇᐃ.ⵠΔⲆⲆᐃ, Ⲇᐃ.ᐃⵠᐃⵠⲆ, Ⲇᐃ.ⵠⲆⲆⲆΔ, Ⲇᐃ.ᐃⲆⵠᐃΔ, Ⲇᐃ.ⵠᐃⵠⲆᐃ, Ⲇᐃ.ΔⵠᐃⵠΔ, Ⲇᐃ.ᐃⵠᐃᐃⲆ, Ⲇᐃ.ΔΔⲆⵠᐃ, Ⲇᐃ.ⲆᐃⵠⲆΔ, Ⲇᐃ.ⲆⲆΔⵠᐃ, Ⲇᐃ.ⵠⵠⲆⲆⲆ, Ⲇᐃ.ⵠⲆⲆᐃᐃ, Ⲇᐃ.ⲆΔΔⲆⲆ, Ⲇᐃ.ⲆⵠⲆⵠᐃ, Ⲇᐃ.ⵠΔΔΔᐃ, Ⲇᐃ.ⵠⵠⵠⲆⲆ, Ⲇᐃ.ⵠᐃⵠᐃΔ, Ⲇᐃ.ΔΔⵠⵠⲆ, Ⲇᐃ.ⵠⵠⲆᐃΔ, Ⲇᐃ.ⲆΔᐃⵠΔ, Ⲇᐃ.ⲆⲆΔⲆⲆ, Ⲇᐃ.ⵠⲆⲆⲆᐃ, Ⲇᐃ.ⲆⲆⲆΔⵠ, Ⲇᐃ.ΔⵠᐃᐃΔ, Ⲇᐃ.ᐃΔΔⲆⵠ, Ⲇᐃ.ΔⵠᐃⲆᐃ, Ⲇᐃ.ⲆᐃΔⲆΔ, Ⲇᐃ.Δᐃᐃᐃⵠ, Ⲇᐃ.ⲆΔⲆⵠΔ, Ⲇᐃ.ᐃⲆΔⵠᐃ, Ⲇᐃ.Ⲇⵠᐃᐃᐃ, Ⲇᐃ.ⵠᐃⲆⲆᐃ, Ⲇᐃ.ⲆᐃΔⵠⲆ, Ⲇᐃ.ΔⵠᐃᐃⲆ, Ⲇᐃ.ᐃⵠᐃᐃⵠ, Ⲇᐃ.ⲆⵠΔᐃΔ, Ⲇᐃ.ⲆᐃΔᐃΔ];
			for (var Δᐃ = ⵠᐃΔⲆ; Δᐃ < ΔⲆᐃΔ.length; Δᐃ++) {
				var ⵠᐃ = ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(ΔⲆᐃΔ[Δᐃ]);
				if (ⵠᐃ != -1) ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆⵠⲆⵠⲆΔᐃ(ΔⲆᐃΔ.length[Δᐃ], ⵠᐃ)
			}
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⵠΔᐃΔᐃ()
		};
		this.ⲆⲆᐃⵠΔΔⵠⲆⵠ = function(ⵠᐃ, ⲆᐃᐃᐃΔΔⵠⵠⵠ, ⵠⲆⵠⵠᐃⵠⲆⵠⵠ) {
			this.ΔⵠΔⵠⵠⲆⲆ(ⵠᐃ, ⲆᐃᐃᐃΔΔⵠⵠⵠ * 256 + ⵠⲆⵠⵠᐃⵠⲆⵠⵠ)
		};
		this.ΔⵠΔⵠⵠⲆⲆ = function(ⵠᐃ, ᐃΔΔᐃ) {
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
			ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆⵠΔᐃⲆᐃᐃ(ⵠᐃ, ᐃΔΔᐃ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(ⵠᐃ));
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⵠ()
		};
		this.ΔΔΔⵠΔᐃⵠᐃᐃ = function(ⵠᐃ) {
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -ⲆⵠΔⲆ;
			ⵠⵠⵠ.ᐃⲆΔΔΔ.wait = ⲆⲆⵠⵠⲆ;
			var Ⲇᐃᐃⵠ = ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(ⵠᐃ);
			ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆⵠΔᐃⲆᐃᐃ(ⵠᐃ, ⲆⲆⲆᐃ, Ⲇᐃᐃⵠ);
			Ⲇᐃᐃⵠ >= 0 && !ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[ⵠᐃ] && ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⵠ();
			if (Ⲇᐃ.ᐃΔΔⵠᐃ == ⵠᐃ) ⵠⵠⵠ.ΔΔΔᐃΔ = [ⵠⵠⵠ.id]
		};
		this.ⵠᐃΔⵠᐃΔΔⲆΔ = function() {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⲆⲆΔⵠᐃᐃ[ᐃᐃⲆⵠᐃ].stringify([6]))
		};
		this.ᐃⲆᐃⲆΔⲆⵠⲆᐃ = function(ⲆᐃΔ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⵠΔⲆᐃ[ᐃⵠΔⵠⲆΔⵠ].stringify([ΔΔᐃᐃ, ⲆᐃΔ.Ⲇⵠⵠⵠᐃ, ⲆᐃΔ.id]))
		};
		this.ΔΔⲆⵠΔⲆⵠⲆᐃ = function(ⵠᐃ, ⵠᐃᐃΔΔⵠⵠ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⵠΔⲆᐃ[ΔΔᐃᐃⵠ].stringify([10, ⵠᐃ, ⵠᐃᐃΔΔⵠⵠ]))
		};
		this.ΔⲆⵠΔΔⲆᐃⵠⲆ = function() {
			var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
			if (ΔⵠΔ) {
				var ᐃⵠⵠⲆᐃ = Ⲇⵠᐃⵠ * Math.PI;
				this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⵠΔⲆᐃ[ᐃⵠΔⵠⲆΔⵠ].stringify([22, ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ, Math.floor((ΔⵠΔ.angle + ᐃⵠⵠⲆᐃ) % ᐃⵠⵠⲆᐃ * ΔᐃⵠⵠⲆΔⲆ / ᐃⵠⵠⲆᐃ), ⵠⵠⵠ.ⲆΔᐃⵠ.mode]))
			}
		};
		this.ⵠᐃⲆᐃⲆ = function(ⵠᐃ, Δᐃ) {
			switch (ⵠᐃ) {
				case Ⲇᐃ.ⲆⲆΔΔᐃ:
				case Ⲇᐃ.ⲆⲆⲆᐃⵠ:
				case Ⲇᐃ.ⵠⵠᐃⵠΔ:
				case Ⲇᐃ.ΔΔᐃΔⵠ:
				case Ⲇᐃ.ⲆⲆΔⵠⵠ:
				case Ⲇᐃ.ΔΔⲆⲆᐃ:
				case Ⲇᐃ.ΔᐃᐃᐃⲆ:
				case Ⲇᐃ.ΔᐃⲆΔⵠ:
				case Ⲇᐃ.ᐃᐃᐃⵠⲆ:
				case Ⲇᐃ.ᐃⵠⲆᐃⵠ:
				case Ⲇᐃ.ΔⲆⵠᐃᐃ:
				case Ⲇᐃ.ⵠᐃⲆΔᐃ:
				case Ⲇᐃ.ⵠⵠⲆᐃⲆ:
				case Ⲇᐃ.ᐃⲆΔⲆⲆ:
				case Ⲇᐃ.ᐃᐃⵠᐃᐃ:
				case Ⲇᐃ.ⲆⲆⲆⵠⵠ:
				case Ⲇᐃ.ΔⵠᐃⲆΔ:
				case Ⲇᐃ.ᐃᐃⵠⲆᐃ:
				case Ⲇᐃ.ᐃⵠⵠᐃⲆ:
				case Ⲇᐃ.ⲆⵠΔⵠⲆ:
				case Ⲇᐃ.ᐃΔⲆᐃᐃ:
				case Ⲇᐃ.ᐃⵠΔᐃΔ:
				case Ⲇᐃ.ⲆᐃᐃⵠΔ:
					ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -ⲆⵠΔⲆ;
					this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃΔⲆΔⵠᐃ[ⲆⲆⵠᐃⲆⵠⲆ].stringify([34, ⵠᐃ]));
					break;
				case Ⲇᐃ.ⵠⵠᐃⲆⵠ:
				case Ⲇᐃ.ᐃⵠᐃⲆᐃ:
				case Ⲇᐃ.ⲆΔΔΔⵠ:
				case Ⲇᐃ.ΔΔᐃⲆⵠ:
				case Ⲇᐃ.Ⲇⵠⵠⵠⵠ:
				case Ⲇᐃ.ⲆᐃⲆⵠᐃ:
				case Ⲇᐃ.ᐃⲆⲆᐃⵠ:
				case Ⲇᐃ.ᐃᐃⲆⲆᐃ:
				case Ⲇᐃ.ᐃⵠΔᐃⲆ:
				case Ⲇᐃ.ΔⵠⲆᐃΔ:
				case Ⲇᐃ.ᐃᐃⵠⲆⲆ:
				case Ⲇᐃ.ⲆⵠⲆⲆᐃ:
				case Ⲇᐃ.ⲆᐃⲆⲆⲆ:
				case Ⲇᐃ.ΔⲆⵠΔⵠ:
				case Ⲇᐃ.ⵠⲆⵠⵠΔ:
				case Ⲇᐃ.ⲆⵠⵠⲆΔ:
				case Ⲇᐃ.ᐃᐃⲆΔᐃ:
				case Ⲇᐃ.ᐃⵠΔⵠΔ:
				case Ⲇᐃ.ⵠΔⲆΔᐃ:
				case Ⲇᐃ.ΔΔⵠⲆⵠ:
				case Ⲇᐃ.ⵠΔⵠⲆⵠ:
				case Ⲇᐃ.ΔⵠᐃΔΔ:
				case Ⲇᐃ.ᐃΔⲆᐃΔ:
				case Ⲇᐃ.ⵠⵠᐃⵠⲆ:
				case Ⲇᐃ.ᐃⵠᐃⲆΔ:
				case Ⲇᐃ.ΔᐃΔⲆⲆ:
				case Ⲇᐃ.ⲆⲆᐃⵠⵠ:
				case Ⲇᐃ.ⲆΔⵠⲆⵠ:
				case Ⲇᐃ.ᐃⲆⵠΔⲆ:
				case Ⲇᐃ.ⵠΔΔⲆⲆ:
				case Ⲇᐃ.ΔⵠⵠⲆΔ:
				case Ⲇᐃ.ΔΔΔⲆᐃ:
				case Ⲇᐃ.ⵠⵠΔᐃᐃ:
				case Ⲇᐃ.ΔᐃΔⵠⵠ:
				case Ⲇᐃ.ⲆⲆΔᐃᐃ:
				case Ⲇᐃ.Δⵠⵠⵠⵠ:
				case Ⲇᐃ.ᐃᐃΔᐃᐃ:
				case Ⲇᐃ.ⵠᐃΔΔⵠ:
				case Ⲇᐃ.ⲆᐃⵠᐃΔ:
				case Ⲇᐃ.ⵠⲆⵠΔᐃ:
				case Ⲇᐃ.ⲆΔⵠᐃᐃ:
				case Ⲇᐃ.ⵠΔⵠᐃΔ:
				case Ⲇᐃ.ΔΔⲆᐃⲆ:
				case Ⲇᐃ.ᐃᐃᐃⵠᐃ:
				case Ⲇᐃ.ⲆⵠΔⵠⵠ:
				case Ⲇᐃ.ᐃⵠⵠΔⵠ:
				case Ⲇᐃ.ᐃⵠⵠⵠΔ:
				case Ⲇᐃ.ΔⲆᐃΔᐃ:
				case Ⲇᐃ.ᐃⲆΔᐃΔ:
				case Ⲇᐃ.ⵠⲆⵠΔΔ:
				case Ⲇᐃ.ⲆⵠⵠⲆᐃ:
				case Ⲇᐃ.ⵠⲆⲆΔⵠ:
				case Ⲇᐃ.ᐃΔΔⵠⵠ:
				case Ⲇᐃ.ⲆⲆᐃⲆᐃ:
				case Ⲇᐃ.ᐃΔΔⵠᐃ:
				case Ⲇᐃ.ⲆᐃⲆΔᐃ:
					if (!ⵠⵠⵠ.ⵠΔⲆⲆⲆ) {
						ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ === ⵠᐃ ? ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1 : ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ = ⵠᐃ
					}
					break;
				case Ⲇᐃ.ⵠⲆᐃⲆⵠ:
				case Ⲇᐃ.ΔᐃΔΔΔ:
				case Ⲇᐃ.ⲆⲆⲆΔΔ:
				case Ⲇᐃ.ᐃΔᐃᐃⲆ:
				case Ⲇᐃ.ⵠΔⵠⵠᐃ:
				case Ⲇᐃ.ᐃⲆΔⵠⵠ:
				case Ⲇᐃ.ᐃᐃⲆⲆⲆ:
				case Ⲇᐃ.ᐃⵠΔᐃᐃ:
				case Ⲇᐃ.ⲆⵠⲆⲆⵠ:
				case Ⲇᐃ.ⲆⵠⲆⵠᐃ:
				case Ⲇᐃ.ⵠΔΔΔᐃ:
				case Ⲇᐃ.ⵠⵠⵠⲆⲆ:
				case Ⲇᐃ.ⵠᐃⵠᐃΔ:
				case Ⲇᐃ.ΔΔⵠⵠⲆ:
				case Ⲇᐃ.ⵠⵠⲆᐃΔ:
				case Ⲇᐃ.ⲆΔᐃⵠΔ:
				case Ⲇᐃ.ⲆᐃΔⲆΔ:
				case Ⲇᐃ.Δᐃᐃᐃⵠ:
				case Ⲇᐃ.ΔᐃⵠᐃⲆ:
				case Ⲇᐃ.ⵠᐃⵠⵠΔ:
				case Ⲇᐃ.ⵠΔⲆⲆᐃ:
				case Ⲇᐃ.ᐃⵠᐃⵠⲆ:
				case Ⲇᐃ.ⵠⲆⲆⲆΔ:
				case Ⲇᐃ.ⵠⵠΔⲆⲆΔⵠᐃΔ:
				case Ⲇᐃ.ⵠᐃⵠⲆᐃ:
				case Ⲇᐃ.ΔⵠᐃⵠΔ:
				case Ⲇᐃ.ᐃⲆⵠᐃΔ:
				case Ⲇᐃ.ᐃⵠᐃᐃⲆ:
				case Ⲇᐃ.ΔΔⲆⵠᐃ:
				case Ⲇᐃ.ⲆᐃⵠⲆΔ:
				case Ⲇᐃ.ⲆⲆΔⵠᐃ:
				case Ⲇᐃ.ⵠⵠⲆⲆⲆ:
				case Ⲇᐃ.ⵠⲆⲆᐃᐃ:
				case Ⲇᐃ.ⲆΔΔⲆⲆ:
					if (!ⵠⵠⵠ.ⵠΔⲆⲆⲆ) {
						ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
						var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
						ΔⵠΔ && ⵠᐃ === ΔⵠΔ.right ? this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃΔᐃΔ[ΔΔᐃᐃⵠ].stringify([34, Ⲇᐃ.Ⲇᐃᐃⵠᐃ])) : (ⵠⵠⵠ.ᐃΔᐃᐃΔ.wait = true, this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⲆᐃⵠᐃⵠⵠ[ᐃⲆΔⵠᐃΔΔ].stringify([34, ⵠᐃ])))
					}
					break;
				case Ⲇᐃ.ᐃⲆΔⵠᐃ:
				case Ⲇᐃ.ⲆΔⲆⵠΔ:
				case Ⲇᐃ.Ⲇⵠᐃᐃᐃ:
				case Ⲇᐃ.ⵠᐃⲆⲆᐃ:
				case Ⲇᐃ.ΔΔΔⲆⲆ:
				case Ⲇᐃ.ⲆᐃᐃⵠⲆ:
				case Ⲇᐃ.ⵠᐃΔΔᐃ:
				case Ⲇᐃ.Δⵠᐃᐃⵠ:
				case Ⲇᐃ.ⵠΔⲆⵠⵠ:
				case Ⲇᐃ.ⵠΔⵠⵠΔ:
				case Ⲇᐃ.ⲆᐃΔⵠⲆ:
				case Ⲇᐃ.ΔⵠᐃᐃⲆ:
				case Ⲇᐃ.ⲆⵠⲆΔΔ:
				case Ⲇᐃ.ⵠⲆΔⵠᐃ:
				case Ⲇᐃ.ⵠⲆⵠⵠᐃ:
				case Ⲇᐃ.ⵠᐃΔⵠⵠ:
				case Ⲇᐃ.ⵠⲆΔᐃⲆ:
				case Ⲇᐃ.ᐃⵠᐃᐃⵠ:
				case Ⲇᐃ.ⵠⵠⵠⵠΔ:
				case Ⲇᐃ.ⲆⵠΔᐃΔ:
				case Ⲇᐃ.ⲆᐃΔᐃΔ:
				case Ⲇᐃ.ᐃⲆᐃΔᐃ:
				case Ⲇᐃ.ⲆⵠⲆᐃΔ:
				case Ⲇᐃ.ⲆⲆΔⲆⲆ:
				case Ⲇᐃ.ⵠⲆⲆⲆᐃ:
				case Ⲇᐃ.ⲆⲆⲆΔⵠ:
				case Ⲇᐃ.ΔⵠᐃᐃΔ:
				case Ⲇᐃ.ᐃΔΔⲆⵠ:
				case Ⲇᐃ.ΔⵠᐃⲆᐃ:
					if (!ⵠⵠⵠ.ⵠΔⲆⲆⲆ) {
						ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -ⵠΔᐃ;
						var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
						if (ΔⵠΔ && ⵠᐃ === ΔⵠΔ.right) {
							this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠⲆᐃⲆᐃᐃᐃ[ᐃᐃΔᐃⲆⲆᐃ].stringify([34, Ⲇᐃ.Ⲇᐃᐃⵠᐃ]))
						} else this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⲆⵠΔⲆⵠΔⲆ[ⵠΔⵠⵠᐃⵠⲆ].stringify([34, ⵠᐃ]))
					}
					break;
				case Ⲇᐃ.ᐃΔⵠΔΔ:
				case Ⲇᐃ.ⲆᐃΔⲆⲆ:
				case Ⲇᐃ.ⵠⵠΔⵠⲆ:
				case Ⲇᐃ.ᐃΔⲆΔⵠ:
				case Ⲇᐃ.ᐃᐃⵠⵠᐃ:
				case Ⲇᐃ.ⵠᐃⲆΔⲆ:
				case Ⲇᐃ.ⲆΔᐃⲆΔ:
				case Ⲇᐃ.ΔⲆⵠΔᐃ:
				case Ⲇᐃ.ⵠⲆⲆΔᐃ:
				case Ⲇᐃ.ⲆⲆⲆΔⲆ:
					if (!ⵠⵠⵠ.ⵠΔⲆⲆⲆ) {
						ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
						var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
						this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⲆⵠΔⲆⵠΔⲆ[ⵠΔⵠⵠᐃⵠⲆ].stringify([34, ⵠᐃ]))
					}
					break;
				case Ⲇᐃ.ⲆᐃⲆᐃΔ:
				case Ⲇᐃ.ᐃᐃⵠⲆⵠ:
				case Ⲇᐃ.ΔᐃⲆⵠᐃ:
				case Ⲇᐃ.ᐃΔᐃΔⲆ:
				case Ⲇᐃ.ᐃⲆⲆⵠΔ:
				case Ⲇᐃ.ⵠΔΔΔΔ:
				case Ⲇᐃ.ⲆᐃⵠΔΔ:
				case Ⲇᐃ.ΔⲆΔⲆⵠ:
				case Ⲇᐃ.ⲆᐃΔΔⲆ:
				case Ⲇᐃ.ⵠᐃⵠΔⲆ:
				case Ⲇᐃ.ⵠΔⲆᐃΔ:
				case Ⲇᐃ.ⲆΔΔᐃⵠ:
				case Ⲇᐃ.ΔⵠΔⵠⲆ:
				case Ⲇᐃ.ᐃᐃᐃᐃⵠ:
				case Ⲇᐃ.ΔⵠᐃⵠⲆ:
				case Ⲇᐃ.ΔΔⲆΔⲆ:
				case Ⲇᐃ.ΔⵠΔᐃⵠ:
					var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
					if (ΔⵠΔ && ⵠᐃ !== ΔⵠΔ.ΔⲆⲆⲆᐃ) ⵠⵠⵠ.ᐃⵠⵠⵠᐃ.wait = ⵠⲆΔΔᐃ;
					this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃΔⲆΔⵠᐃ[ΔΔᐃᐃⵠ].stringify([34, ⵠᐃ]));
					break;
				case Ⲇᐃ.ⲆⲆⵠⲆⲆ:
				case Ⲇᐃ.ᐃΔΔᐃⵠ:
				case Ⲇᐃ.ⵠⵠⵠᐃᐃ:
				case Ⲇᐃ.ΔΔΔΔΔ:
				case Ⲇᐃ.ᐃⵠⲆΔᐃ:
				case Ⲇᐃ.ⲆⲆᐃᐃΔ:
				case Ⲇᐃ.ΔᐃⲆⲆᐃ:
				case Ⲇᐃ.ⵠΔᐃⵠⵠ:
				case Ⲇᐃ.ⵠᐃⲆⲆΔ:
				case Ⲇᐃ.ΔⲆᐃⲆⵠ:
				case Ⲇᐃ.ᐃᐃⵠΔΔ:
				case Ⲇᐃ.ⵠᐃᐃΔⵠ:
				case Ⲇᐃ.ΔⵠΔⲆⵠ:
				case Ⲇᐃ.ΔⵠⵠⲆⲆ:
				case Ⲇᐃ.ᐃΔᐃΔΔ:
				case Ⲇᐃ.ΔⵠⲆᐃⲆ:
					this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ᐃΔΔᐃⲆⵠⵠ[ΔⲆⲆⵠⵠⲆΔ].stringify([34, ⵠᐃ]));
					break
			}
		};
		this.ᐃᐃᐃᐃᐃⵠᐃᐃⵠ = function(ⵠᐃ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⵠΔⲆᐃ[ΔⲆΔᐃⵠⵠΔ].stringify([31, ⵠᐃ]))
		};
		this.ⵠᐃⵠⲆⲆΔⲆⵠΔ = function(ⵠᐃ) {
			ⵠⵠⵠ.ᐃⲆΔΔΔ.wait = ⵠⲆΔΔᐃ;
			var Δᐃ = ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(ⵠᐃ);
			ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆⵠⲆⵠⲆΔᐃ(ⵠᐃ, Δᐃ);
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⵠ()
		};
		this.ΔΔⲆⲆⵠᐃᐃᐃⲆ = function(ⵠᐃ, Δᐃ) {
			Settings.AutoRecycle.last = ⵠᐃ;
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ᐃⵠΔΔᐃᐃⲆ[ᐃᐃΔᐃⲆⲆᐃ].stringify([ⵠⵠΔⲆᐃⲆΔ, ⵠᐃ]))
		};
		this.ⵠⵠΔⵠⲆΔᐃⲆᐃ = function(ⵠᐃ, Δᐃ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⲆⲆΔⵠᐃᐃ[ᐃᐃⲆⵠᐃ].stringify([24, ⵠᐃ]))
		};
		this.ΔᐃᐃΔΔⵠⵠⵠⲆ = function(ⵠᐃ) {
			ⵠⵠⵠ.ᐃⲆΔΔΔ.wait = ⲆᐃⵠⵠⲆ;
			var Δᐃ = ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(ⵠᐃ);
			ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆⵠΔᐃⲆᐃᐃ(ⵠᐃ, ΔⲆΔᐃ, Δᐃ);
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⵠ()
		};
		this.ΔᐃΔⲆⵠⲆⲆᐃⲆ = function(ⲆⵠΔᐃ) {
			var ⵠᐃ = ⲆⵠΔᐃ[1];
			var ΔⲆΔⵠ = ⲆⵠΔᐃ[Ⲇⵠᐃⵠ];
			ⵠⵠⵠ.ᐃⲆΔΔΔ.wait = ⵠⲆΔΔᐃ;
			var Δᐃ = ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(ⵠᐃ);
			ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆⵠΔᐃⲆᐃᐃ(ⵠᐃ, ΔⲆΔⵠ, Δᐃ);
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⵠ()
		};
		this.ⵠⲆⵠⵠΔΔᐃⲆΔ = function() {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⲆⲆΔⵠᐃᐃ[ᐃᐃⲆⵠᐃ].stringify([16]))
		};
		this.ⲆΔⲆⵠⲆⲆⲆᐃⲆ = function(ⵠᐃᐃ) {
			var ᐃⵠⵠⲆᐃ = Math.PI * ⲆⲆᐃⲆ;
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⵠΔⲆᐃ[ᐃⵠΔⵠⲆΔⵠ].stringify([36, Math.floor((ⵠᐃᐃ + ᐃⵠⵠⲆᐃ) % ᐃⵠⵠⲆᐃ * 255 / ᐃⵠⵠⲆᐃ)]))
		};
		this.ⲆΔΔΔΔⵠⲆᐃⵠ = function(ⵠᐃᐃ) {
			var ᐃⵠⵠⲆᐃ = 2 * Math.PI;
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⵠΔⲆᐃ[ᐃⵠΔⵠⲆΔⵠ].stringify([0, Math.floor(255 * ((ⵠᐃᐃ + ᐃⵠⵠⲆᐃ) % ᐃⵠⵠⲆᐃ) / ᐃⵠⵠⲆᐃ)]))
		};
		this.ⲆⵠΔⲆᐃⲆⲆΔΔ = function(ⵠΔⲆᐃⵠ) {
			Settings.Spectator.enabled || this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⲆΔⵠᐃᐃᐃⲆ[ⲆᐃΔⲆⵠⵠⵠ].stringify([11, ⵠΔⲆᐃⵠ]))
		};
		this.ΔᐃΔᐃᐃᐃⵠⲆⵠ = function(ⵠⲆᐃᐃᐃⵠΔ) {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃΔᐃΔ[ΔΔᐃᐃⵠ].stringify([33, ⵠⲆᐃᐃᐃⵠΔ]))
		};
		this.ⲆΔᐃΔⵠΔⲆᐃⲆ = function(ⵠⲆᐃᐃᐃⵠΔ) {
			var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
			if (ⵠⵠⵠ.ⵠΔⲆⲆⲆ) {
				if (.5 < Math.random()) ΔⵠΔ.text.push(ⵠⲆᐃᐃᐃⵠΔ.substring(0, 25) + " ..." + ᐃⵠᐃΔΔ);
				else ΔⵠΔ.text.push(ᐃⵠᐃΔΔ + "... " + ⵠⲆᐃᐃᐃⵠΔ.substring(0, 25))
			} else ΔⵠΔ.text.push(ⵠⲆᐃᐃᐃⵠΔ);
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃΔᐃΔ[ΔΔᐃᐃⵠ].stringify([ΔⲆΔⵠⲆ, ⵠⲆᐃᐃᐃⵠΔ]))
		};
		this.ⵠΔⵠⵠⲆ = function(ΔⵠΔ) {
			var ᐃᐃΔᐃ = ΔⵠⵠΔ.select.Ⲇᐃⵠ;
			if (0 == ᐃᐃΔᐃ.length) return;
			var ⲆⵠΔᐃ = [11];
			var ᐃⲆⲆᐃⲆ = [];
			ⵠᐃΔᐃ.ΔΔᐃⵠΔⲆᐃ(ΔⵠΔ, {
				x: ΔⵠⵠΔ.ᐃⵠⲆ.rx,
				y: ΔⵠⵠΔ.ᐃⵠⲆ.ry
			});
			ⲆⵠΔᐃ.push(ΔⵠΔ.x);
			ⲆⵠΔᐃ.push(ΔⵠΔ.y);
			for (var Δᐃ = 0; ᐃᐃΔᐃ.length > Δᐃ; Δᐃ++) ᐃⲆⲆᐃⲆ.push(ᐃᐃΔᐃ[Δᐃ].ΔⵠⵠᐃᐃⵠⲆⲆΔ);
			ⲆⵠΔᐃ.push(ᐃⲆⲆᐃⲆ);
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ΔⲆᐃⵠᐃⵠⵠ[ᐃⲆΔⵠᐃΔΔ].stringify(ⲆⵠΔᐃ))
		};
		this.ΔᐃΔⵠⵠΔΔ = 0;
		this.ᐃᐃΔΔⲆⵠⵠ = {
			"ᐃΔⵠⵠ": ⵠᐃⵠⵠ,
			"Δᐃ": ⵠᐃΔⲆ
		};
		this.ⵠΔᐃᐃⵠΔⵠⲆⵠ = function() {
			if (ⲆᐃᐃⲆΔ - this.ΔᐃΔⵠⵠΔΔ > ⲆᐃᐃΔⲆ.ᐃᐃᐃΔᐃᐃⲆⲆⲆ) {
				this.ΔᐃΔⵠⵠΔΔ = ⲆᐃᐃⲆΔ;
				var ⵠⵠⵠⲆ = ⵠⵠⵠ.ᐃⵠⲆ;
				var Δᐃ = Math.floor(ⵠⵠⵠⲆ.x / ⲆᐃᐃΔᐃ);
				var ᐃΔⵠⵠ = Math.floor(ⵠⵠⵠⲆ.y / ⵠⲆΔᐃΔ);
				(Δᐃ != this.ᐃᐃΔΔⲆⵠⵠ.Δᐃ || ᐃΔⵠⵠ != this.ᐃᐃΔΔⲆⵠⵠ.ᐃΔⵠⵠ) && (this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⲆⵠΔⲆⵠΔⲆ[ᐃᐃΔᐃⲆⲆᐃ].stringify([28, Math.floor(-ⵠⵠⵠⲆ.x), Math.floor(-ⵠⵠⵠⲆ.y)])), this.ᐃᐃΔΔⲆⵠⵠ.Δᐃ = Δᐃ, this.ᐃᐃΔΔⲆⵠⵠ.ᐃΔⵠⵠ = ᐃΔⵠⵠ)
			}
		};
		this.ⵠΔⵠΔΔΔΔ = ΔᐃΔ;
		this.ⵠⵠⵠⵠⲆⵠᐃⲆⲆ = function() {
			if (ⲆᐃᐃⲆΔ - this.ⵠΔⵠΔΔΔΔ > ⲆᐃᐃΔⲆ.ⵠⲆⵠΔᐃΔⵠⲆⵠ) {
				this.ⵠΔⵠΔΔΔΔ = ⲆᐃᐃⲆΔ;
				this.ping()
			}
		};
		this.ΔⲆⵠⵠⵠᐃⲆⲆΔ = function() {
			ⵠⵠⵠ.reconnect.enabled = ⵠⵠᐃⵠⵠ;
			if (ⲆⲆᐃ.ΔΔⵠᐃ.ΔΔᐃⵠⲆ != ⲆⲆᐃ.ΔΔᐃⵠⲆ) return;
			ⲆⲆᐃ.ΔΔᐃⵠⲆ++;
			ⲆⲆᐃ.ΔΔⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[49]]();
			ᐃⵠΔΔ.connect()
		};
		this.ⲆᐃᐃᐃⵠⵠᐃᐃⲆ = function(ΔⲆΔⲆ) {
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⲆⵠⲆΔΔ]);
			for (var Δᐃ = 1; ΔⲆΔⲆ.length > Δᐃ; Δᐃ++) ⵠⵠⵠ.ΔΔΔᐃΔ.push(ΔⲆΔⲆ[Δᐃ])
		};
		this.ᐃᐃᐃΔⵠᐃⵠⵠΔ = function(ⵠᐃ) {
			this.Ⲇᐃⵠⵠᐃ(ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠᐃ].ⲆⵠΔⵠΔ + ΔⲆⲆ[ΔΔΔΔ.ⵠⲆᐃᐃⲆⲆⲆ]);
			ⵠⵠⵠ.ΔΔΔᐃΔ.push(ⵠᐃ);
			var ΔⵠⲆⲆᐃ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[445]);
			if (-ⲆⵠΔⲆ != ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ && Δ[151] == ΔⵠⲆⲆᐃ.style.display) ⲆΔᐃᐃ.ⵠΔⵠᐃⲆ[ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ].action()
		};
		this.ΔΔᐃᐃᐃⵠⲆⲆΔ = function() {
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ᐃΔⵠⵠΔⲆᐃ]);
			ⵠⵠⵠ.ᐃⲆⲆΔⲆ.wait = true;
			ⵠⵠⵠ.ΔΔΔᐃΔ = [];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[445]).style.display = Δ[369]
		};
		this.ᐃᐃΔΔΔᐃΔΔᐃ = function(ⵠᐃ) {
			if (ⵠⵠⵠ.id == ⵠᐃ) {
				this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ᐃᐃⵠⲆⲆΔⵠ]);
				ⵠⵠⵠ.ᐃⲆⲆΔⲆ.wait = true;
				ⵠⵠⵠ.ΔΔΔᐃΔ = [];
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[445]).style.display = Δ[369]
			} else {
				this.Ⲇᐃⵠⵠᐃ(ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠᐃ].ⲆⵠΔⵠΔ + ΔⲆⲆ[ΔΔΔΔ.ᐃΔΔᐃⵠᐃⲆ]);
				for (var Δᐃ = 0; Δᐃ < ⵠⵠⵠ.ΔΔΔᐃΔ.length; Δᐃ++) {
					if (ⵠᐃ == ⵠⵠⵠ.ΔΔΔᐃΔ[Δᐃ]) {
						ⵠⵠⵠ.ΔΔΔᐃΔ.splice(Δᐃ, ᐃⵠⵠ);
						break
					}
				}
				var ΔⵠⲆⲆᐃ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[445]);
				if (ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ != -1 && ΔⵠⲆⲆᐃ.style.display == Δ[151]) ⲆΔᐃᐃ.ⵠΔⵠᐃⲆ[ⲆΔᐃᐃ.ⲆⲆⵠⵠᐃ].action()
			}
		};
		this.ⵠⲆⲆⲆᐃⲆΔⵠⵠ = function(ΔᐃᐃⲆ) {
			ⵠⵠⵠ.ⲆᐃᐃⲆⲆ = false;
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ᐃⵠΔΔᐃ]);
			if (this.ΔΔᐃⵠⲆ != this.ΔΔⵠᐃ.ΔΔᐃⵠⲆ) return;
			this.ΔΔᐃⵠⲆ++;
			ⲆΔᐃᐃ.ΔⲆⵠᐃΔ(ⵠⵠΔⵠ.ⵠⲆᐃᐃΔ);
			this.ΔΔⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[49]]()
		};
		this.ⲆΔΔⵠᐃⲆⲆᐃⲆ = function(ΔᐃⲆⲆᐃⵠⲆ, ⲆⵠΔᐃ) {
			ⵠⵠⵠ.ⲆᐃᐃⲆⲆ = false;
			var ⲆᐃᐃᐃⲆ = new Uint16Array(ⲆⵠΔᐃ);
			var ΔⵠᐃΔΔⲆⵠⵠⵠ = new Uint32Array(ⲆⵠΔᐃ);
			ⵠⵠⵠ.ᐃΔⲆΔⵠⵠⵠ.ΔᐃⲆⲆᐃⵠⲆ = ⲆⵠⲆⵠ[ΔᐃⲆⲆᐃⵠⲆ][Math.floor(Math.random() * ⲆⵠⲆⵠ[ΔᐃⲆⲆᐃⵠⲆ].length)];
			ⵠⵠⵠ.ᐃΔⲆΔⵠⵠⵠ.ᐃⲆᐃⵠⲆ = ⵠᐃΔᐃ.ᐃⲆΔⵠᐃᐃⵠ(ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠⵠⵠ.id].ᐃⲆᐃⵠⲆ);
			ⵠⵠⵠ.ᐃΔⲆΔⵠⵠⵠ.ⵠᐃΔⲆⵠΔᐃ = ⵠᐃΔᐃ.ᐃⲆΔⵠᐃᐃⵠ(ΔⵠᐃΔΔⲆⵠⵠⵠ[1]);
			ⵠⵠⵠ.ᐃΔⲆΔⵠⵠⵠ.ᐃᐃⲆᐃᐃ = ⲆᐃᐃᐃⲆ[1];
			this.Ⲇᐃⵠⵠᐃ(ΔⲆⲆ[ΔΔΔΔ.ΔΔⵠΔⵠᐃⲆ]);
			if (!Settings.AutoRespawn.enabled) {
				this.ΔΔᐃⵠⲆ == this.ΔΔⵠᐃ.ΔΔᐃⵠⲆ && (this.ΔΔᐃⵠⲆ++, this.ΔΔⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[49]](), ⲆΔᐃᐃ.ΔⲆⵠᐃΔ(ᐃᐃΔⲆΔΔⵠ.ⵠⲆᐃᐃΔ))
			} else {
				this.ΔΔⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[49]]();
				ⵠⵠΔⵠ.ⵠⵠᐃΔᐃⵠⵠ();
				AutoRespawnInterval = setInterval((() => {
					if (getClientWebSocketProperty().readyState != 0 && getClientWebSocketProperty().readyState != 1) ⵠⵠΔⵠ.ⵠⵠᐃΔᐃⵠⵠ()
				}), 3e3)
			}
			try {
				ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[211]]["adsRefresh"]()
			} catch (Δⵠⵠᐃ) {}
		};
		this.ping = function() {
			this.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⲆᐃᐃΔⲆ.ⵠⵠΔΔΔᐃΔΔⲆ)
		};
		this.ΔⵠⲆⲆⵠⵠΔⵠⲆ = function() {
			if (this.ΔΔⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[294]] == 3) {
				this.ᐃⵠΔᐃΔⲆⵠ -= ⲆᐃᐃΔⲆ.ⲆⲆⵠⲆᐃⲆΔ
			}
		};
		this.ᐃᐃΔΔᐃⵠᐃΔᐃ = function() {
			ΔᐃⲆⲆ > ⲆᐃᐃΔⲆ.ⲆΔᐃᐃΔⵠᐃⲆⵠ && (this.ᐃⵠΔᐃΔⲆⵠ = ⲆᐃᐃⲆΔ);
			ⲆᐃᐃⲆΔ - this.ᐃⵠΔᐃΔⲆⵠ > ⲆᐃᐃΔⲆ.ⲆⲆⵠⲆᐃⲆΔ && (this.ᐃⵠΔᐃΔⲆⵠ = ⲆᐃᐃⲆΔ, this.ΔⲆⵠⵠⵠᐃⲆⲆΔ())
		};
		this.ΔΔᐃⵠΔᐃΔᐃⲆ = function(ᐃⲆᐃᐃ) {
			clearInterval(AutoRespawnInterval);
			ⲆⵠᐃⵠⲆⲆⵠ++;
			clearTimeout(this.ΔⵠᐃⲆⲆ);
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("commandMainBoxName")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = this.ΔⲆᐃⵠⲆ[this.ⵠⵠᐃΔⲆ][this.ΔⵠⲆᐃⵠᐃⲆ[this.ⵠⵠᐃΔⲆ]]["a"];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("exploreForest").src = "img/forest-leaf.png";
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("exploreWinter").src = "img/winter-flake.png";
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("exploreDesert").src = "img/desert-cactus.png";
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("exploreLava").src = "img/lava-volcano.png";
			this.ᐃⵠΔᐃΔⲆⵠ = ⲆᐃᐃⲆΔ;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ⵠⲆΔⲆⵠ.Δⵠⵠᐃᐃ = ⵠⵠⵠ.ᐃⵠⲆᐃ.ⵠⲆΔⲆⵠ.ᐃⵠΔⲆᐃ;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆΔᐃᐃᐃᐃ.Δⵠⵠᐃᐃ = ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆΔᐃᐃᐃᐃ.ᐃⵠΔⲆᐃ;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ΔΔΔΔⵠⲆⵠ.Δⵠⵠᐃᐃ = ⵠⵠⵠ.ᐃⵠⲆᐃ.ΔΔΔΔⵠⲆⵠ.ᐃⵠΔⲆᐃ;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ⵠᐃⲆᐃΔΔⵠ.Δⵠⵠᐃᐃ = ⵠⵠⵠ.ᐃⵠⲆᐃ.ⵠᐃⲆᐃΔΔⵠ.ᐃⵠΔⲆᐃ;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆΔⲆΔ.Δⵠⵠᐃᐃ = ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆΔⲆΔ.ᐃⵠΔⲆᐃ;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆⲆΔ = ⵠⵠᐃ;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.c = ΔΔⲆΔ;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆΔΔ = 1;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ΔⲆᐃ = ⲆⵠⲆ;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ᐃΔⲆ = 1;
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆΔⵠᐃⵠⲆᐃ = 1;
			ⵠⵠⵠ.ⲆⵠⲆⵠⵠΔⵠ = ⲆⵠⲆⵠΔ;
			ⲆΔᐃᐃ.ⵠᐃⵠᐃᐃ.display = 0;
			ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ = [];
			ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ = [];
			ⵠⵠⵠ.ᐃᐃⲆΔ.max = ⵠΔᐃⲆ.ⵠⵠᐃΔⲆⲆΔ;
			ⵠⵠⵠ.ᐃᐃⲆΔ.ΔᐃᐃⲆΔᐃⲆ = ⵠᐃⵠⵠ;
			ⵠⵠⵠ.ᐃᐃⲆΔ.ΔΔⲆᐃⵠ = 0;
			ⵠⵠⵠ.ᐃᐃⲆΔ.id = -ᐃⵠⵠ;
			ⲆΔᐃᐃ.ᐃⲆΔΔΔΔⵠ = ΔΔⲆΔ;
			ⲆΔᐃᐃ.ᐃᐃⵠᐃΔⵠᐃ = 1;
			ⲆΔᐃᐃ.ⵠᐃⵠⲆⲆᐃⲆ = ⲆΔᐃ;
			ⲆΔᐃᐃ.ⵠΔΔᐃⵠᐃΔ = ⵠΔⲆ;
			ⵠⵠⵠ.ⲆᐃᐃⲆⲆ = true;
			if (engineIndex == 0 && window.engine !== undefined && window.engine !== null) {
				window.engine();
				engineIndex = 1
			}
			ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃⲆΔΔΔΔᐃ.stop();
			ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ = [];
			ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆΔᐃᐃᐃ = false;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ⵠⲆⲆⵠⵠⵠᐃᐃΔ = false;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
			ⵠⵠⵠ.ⲆΔᐃⵠ.id = -ΔⵠⲆ;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠᐃᐃ = false;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⲆⵠⵠ = false;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃⲆᐃΔⲆ = ΔⲆΔΔᐃ;
			ⵠⵠⵠ.ⲆΔᐃⵠ.ⵠᐃⲆΔⵠΔⲆ = false;
			ⵠⵠⵠ.ⲆΔᐃⵠ.timeout = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠᐃᐃⵠΔ, 0, ⲆⵠⲆ, ⵠᐃⵠⵠ, ΔΔⲆΔ, 1);
			ⵠⵠⵠ.ᐃΔᐃᐃΔ.timeout = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆΔᐃⵠᐃ, ⵠΔΔᐃ, 1, ᐃΔΔ, 1 / 10, Δᐃᐃ);
			ⵠⵠⵠ.ᐃΔᐃᐃΔ.wait = false;
			ⵠⵠⵠ.ᐃⵠⵠⵠᐃ.timeout = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, ᐃⲆΔ, 0, ᐃΔⵠΔ / ⵠᐃᐃΔᐃ, 1);
			ⵠⵠⵠ.ᐃⵠⵠⵠᐃ.wait = false;
			ⵠⵠⵠ.ᐃⲆΔΔΔ.timeout = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ⵠᐃΔ, ΔΔⲆΔ, 0, 1, ⲆⲆⲆᐃ);
			ⵠⵠⵠ.ᐃⲆΔΔΔ.wait = false;
			ⵠⵠⵠ.ᐃⲆⲆΔⲆ.id = -ᐃⲆΔ;
			ⵠⵠⵠ.ᐃⲆⲆΔⲆ.ΔᐃᐃⲆ = -ⵠⵠᐃ;
			ⵠⵠⵠ.ᐃⲆⲆΔⲆ.wait = false;
			ⵠⵠⵠ.ᐃⲆⲆΔⲆ.timeout = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ᐃΔΔ, 1, ⵠᐃⵠⵠ, Δᐃᐃ / 30, ⵠΔΔ);
			ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.x = -1;
			ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.y = -ⵠⲆⲆⲆ;
			ⲆΔᐃᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ⲆΔᐃⵠᐃ;
			ⲆΔᐃᐃ.ⵠⲆⵠᐃⵠ.ⵠⲆΔᐃ = [];
			ⵠⵠⵠ.ΔΔᐃᐃΔ.enabled = ⲆⵠⵠΔᐃ;
			ⲆⲆⲆ.mode = ᐃⲆᐃᐃ[ⲆⵠΔⲆ];
			ᐃⲆᐃᐃ[20] !== undefined && undefined !== ᐃⲆᐃᐃ[21] && (ⲆⲆⲆ.ᐃⵠⲆΔΔ = ᐃⲆᐃᐃ[20], ⲆⲆⲆ.ΔᐃⵠⵠⲆ = ᐃⲆᐃᐃ[21], ⲆⲆⲆ.w = ⲆⲆⲆ.ᐃᐃⲆⲆΔᐃⵠ * ⲆⲆⲆ.ᐃⵠⲆΔΔ, ⲆⲆⲆ.ⲆΔΔ = ⲆⲆⲆ.ΔᐃⵠⵠⲆ * ⲆⲆⲆ.ⲆᐃⵠᐃΔⲆΔ);
			ⲆⲆⲆ.ⵠⲆⲆⵠΔⵠᐃ = ᐃⲆᐃᐃ[22];
			ⲆⲆⲆ.ᐃΔⵠΔⲆ = ᐃⲆᐃᐃ[23];
			ⲆⲆᐃ.ⵠⵠⲆΔΔᐃᐃ(ᐃⲆᐃᐃ[24]);
			ⲆⲆᐃ.ⵠΔᐃⵠᐃⲆᐃⲆⵠ(ᐃⲆᐃᐃ[25]);
			ⵠⵠⵠ.ⵠΔⵠⲆΔ.ΔⵠⲆⲆⵠ = ᐃⲆᐃᐃ[26];
			ⵠⵠⵠ.ⲆΔᐃⲆⵠᐃᐃ = ⵠΔⵠⲆ;
			ⵠⵠⵠ.ⵠⲆᐃⵠΔ.ΔⵠⲆⲆⵠ = ᐃⲆᐃᐃ[27];
			ⲆⲆⲆ.ⵠⵠⲆᐃΔᐃⲆⲆⲆ(ᐃⲆᐃᐃ[ΔⵠΔⵠⵠ]);
			ⲆⲆⲆ.time = ᐃⲆᐃᐃ[ΔⵠⲆᐃⵠ];
			ⲆⲆⲆ.ΔᐃᐃⲆⵠ.ᐃΔΔΔⲆ = ᐃⲆᐃᐃ[15];
			ⲆⲆⲆ.ΔᐃᐃⲆⵠ.ΔⲆᐃᐃⵠ = (new Date).getTime();
			ⲆΔᐃᐃ.ⵠⲆⲆᐃ.ᐃΔⵠΔⲆⲆΔ = ᐃⲆᐃᐃ[16];
			ⲆⲆⲆ.transition = false;
			ⵠⵠⵠ.ⵠⵠⲆ = ᐃⲆᐃᐃ[2];
			ⲆΔᐃᐃ.ⵠⲆⲆᐃ.reset();
			ⵠⵠⵠ.ΔΔΔᐃΔ = ᐃⲆᐃᐃ[8];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃΔᐃⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃⲆⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠⲆⲆᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⲆΔᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔΔΔⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔᐃⲆⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.Ⲇⵠⵠⵠⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆⵠᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆᐃⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⲆⲆᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠΔᐃⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠⲆᐃΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⵠⲆⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆⲆⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⵠΔⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠⵠΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠⵠⲆΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠⲆⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠᐃΔΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔⲆᐃΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃⵠⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆᐃⵠⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⵠⲆⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⵠΔⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔΔⲆⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠⵠⲆΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔΔⲆᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠΔⵠΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⲆΔᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔⵠⲆⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃⲆᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠΔᐃᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃΔⵠⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆΔᐃᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⲆⵠⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃᐃⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⵠⵠᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃⲆΔⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔᐃⲆΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⵠΔᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃᐃⲆᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃΔⵠᐃᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃᐃⵠΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆⵠᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆᐃⲆᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⲆⵠⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠⲆᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔᐃΔⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⵠᐃᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠΔⵠᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃⲆᐃΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔⲆΔⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠΔᐃⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠⵠΔⵠᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆΔⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃΔⲆᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔΔⵠⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆⵠⲆΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆⲆⲆⲆᐃᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔΔΔⲆᐃⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠΔΔⵠⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃᐃΔⵠⵠΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⲆⲆΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.Δⵠⵠᐃⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆⵠⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃΔⵠᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠⲆΔⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.Δⵠⵠⵠⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃΔᐃᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃΔΔⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃⲆΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⵠᐃΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠΔᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃΔⲆⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔΔⵠᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆΔᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⵠᐃᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠᐃΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔⲆᐃⲆ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃᐃⵠᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠΔⵠⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠⵠΔⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠⵠⵠΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆᐃΔᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆΔᐃΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠⵠⲆᐃ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠΔΔ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⲆΔⵠ] = [];
			ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔΔⵠⵠ] = [];
			ⲆⲆⲆ.ΔⲆᐃᐃ = [];
			ⲆⲆⲆ.ⵠⵠⵠⲆΔⵠΔ = ᐃⲆᐃᐃ[ⲆΔΔᐃΔ];
			ⵠⵠⵠ.id = ᐃⲆᐃᐃ[ᐃⲆⲆⵠⲆⵠⵠ];
			ⵠⵠⵠ.ΔᐃⲆⵠ = ⲆⲆⲆ.ⵠⵠⵠⲆΔⵠΔ * ⵠⵠⵠ.id;
			if (ⵠᐃⲆΔ.loaded) {
				ⵠᐃⲆΔ.ⵠⲆΔᐃ[ⵠⲆⵠ].ΔᐃⲆⵠ = ⵠⵠⵠ.ΔᐃⲆⵠ;
				ⵠᐃⲆΔ.ⵠⲆΔᐃ[0].ΔⲆⲆΔⲆΔᐃ = ⵠᐃⵠⵠ
			}
			ᐃⲆⵠⲆΔ.ᐃᐃᐃⲆⵠΔⵠ();
			ⵠⵠⵠ.ᐃⵠⲆ.ⵠⵠᐃⵠᐃ(ᐃⲆᐃᐃ[3], ᐃⲆᐃᐃ[10]);
			ⲆⲆⲆ.ⵠⲆΔᐃ = [];
			var ⵠⲆΔᐃ = ⲆⲆⲆ.ⵠⲆΔᐃ;
			for (var Δᐃ = 0; Δᐃ < ᐃⲆᐃᐃ[11]; Δᐃ++) ⵠⲆΔᐃ.push(new ⲆⵠⲆᐃⲆⵠᐃⲆⵠ);
			for (var Δᐃ = 0, ⲆⲆⲆΔ = ᐃⲆᐃᐃ[4]; Δᐃ < ⲆⲆⲆΔ.length; Δᐃ++) {
				var ΔⵠΔ = ⵠⲆΔᐃ[ⲆⲆⲆΔ[Δᐃ]["i"]];
				ΔⵠΔ.ⲆⵠΔⵠΔ = ⲆⲆⲆΔ[Δᐃ]["n"];
				ΔⵠΔ.ⵠⲆΔΔ = ⲆⲆⲆΔ[Δᐃ]["s"];
				ΔⵠΔ.ᐃᐃⲆΔⵠ = ⲆⲆⲆΔ[Δᐃ]["a"];
				ΔⵠΔ.ⵠⵠΔⲆⲆ = ⲆⲆⲆΔ[Δᐃ]["c"];
				ΔⵠΔ.ⲆΔⵠΔΔ = ⲆⲆⲆΔ[Δᐃ]["b"];
				ΔⵠΔ.Δᐃⵠⵠᐃ = ⲆⲆⲆΔ[Δᐃ]["d"];
				ΔⵠΔ.ΔⲆᐃᐃΔⵠⲆ = ⲆⲆⲆΔ[Δᐃ]["g"];
				ΔⵠΔ.level = ⲆⲆⲆΔ[Δᐃ]["l"];
				ΔⵠΔ.ᐃⲆᐃⵠⲆ = ⵠᐃΔᐃ.ᐃΔⵠⵠΔΔⵠ(ⲆⲆⲆΔ[Δᐃ]["p"]);
				ΔⵠΔ.ⲆᐃᐃⲆⲆ = true;
				ᐃⲆⲆ === ⵠⵠᐃⲆΔⲆᐃ && (ΔⵠΔ.ⲆⵠΔⵠΔ += "|" + ⲆⲆⲆΔ[Δᐃ]["i"])
			}
			ⵠⵠⵠ.ᐃⵠⲆⵠᐃ.sort();
			if (ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ⲆᐃᐃⲆⵠᐃⵠ && ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠⵠⵠ.id].ⲆⵠΔⵠΔ === Δ[67]) ⵠⵠⵠ.ⲆⲆᐃⵠΔⲆⵠ = true;
			else ⵠⵠⵠ.ⲆⲆᐃⵠΔⲆⵠ = false;
			if (ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ === ⲆⲆⲆ.mode && ⵠΔᐃⲆ.ᐃᐃⲆᐃᐃᐃΔ === ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠⵠⵠ.id].ⵠⲆΔΔ) ⵠⵠⵠ.ⵠΔⲆⲆⲆ = ᐃⲆⲆⲆΔ;
			else ⵠⵠⵠ.ⵠΔⲆⲆⲆ = false;
			if (ⵠΔᐃⲆ.ΔᐃΔⲆᐃ === ⲆⲆⲆ.mode && ⵠΔᐃⲆ.ΔΔΔⵠᐃΔⵠ === ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠⵠⵠ.id].ⵠⲆΔΔ) ⵠⵠⵠ.ⲆⵠΔⵠΔᐃⵠ = ⵠΔΔᐃⲆ;
			else ⵠⵠⵠ.ⲆⵠΔⵠΔᐃⵠ = ΔΔᐃⵠᐃ;
			ΔᐃⲆΔ.set("starve_token", ⵠⵠⵠ.ⲆΔΔⲆΔ);
			if (ᐃⲆᐃᐃ[ᐃᐃΔᐃⲆ] === 0) {
				ⵠⵠⵠ.ⵠΔⲆΔ.ᐃΔΔᐃΔ = 0;
				ⲆΔᐃᐃ.ⵠⲆⲆᐃ.restore(ᐃⲆᐃᐃ[ΔⲆᐃᐃΔΔⵠ]);
				var ᐃᐃⲆΔ = ᐃⲆᐃᐃ[14];
				if (ᐃᐃⲆΔ[Ⲇᐃ.ⲆⲆⲆⲆ]) ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔⲆᐃⵠΔⵠ(1, ⵠΔΔᐃ);
				for (var Δᐃ = ΔΔⲆⲆ; ᐃᐃⲆΔ.length > Δᐃ; Δᐃ++) {
					if (ᐃᐃⲆΔ[Δᐃ]) {
						if (Ⲇᐃ.ⲆⲆⲆⲆ == Δᐃ) continue;
						else if (Δᐃ == Ⲇᐃ.Ⲇᐃᐃⵠᐃ) continue;
						else this.ᐃⲆⵠⵠΔⲆⵠ([ⲆᐃⲆ, Δᐃ, ᐃᐃⲆΔ[Δᐃ]])
					}
				}
				ⵠⵠⵠ.ⵠΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false
			} else {
				if (ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ⵠΔΔⲆⵠ) this.ᐃⲆⵠⵠΔⲆⵠ([0, Ⲇᐃ.ΔᐃⲆⲆΔ, 1]);
				else if (ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ΔᐃΔⲆᐃ) {
					ⵠⵠⵠ.ⲆⵠΔⵠΔᐃⵠ ? this.ᐃⲆⵠⵠΔⲆⵠ([ⲆⲆᐃΔ, Ⲇᐃ.ⵠΔⵠᐃΔ, 4]) : this.ᐃⲆⵠⵠΔⲆⵠ([ⲆΔⵠΔ, Ⲇᐃ.ᐃᐃⲆⲆᐃ, ΔΔⲆᐃ])
				}
				ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ᐃᐃΔⲆⲆ || ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ΔᐃΔⲆᐃ || ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ⲆᐃⲆᐃᐃ || ⵠΔᐃⲆ.ⵠΔΔⲆⵠ === ⲆⲆⲆ.mode ? (ⵠⵠⵠ.ⵠΔⲆΔ.ᐃΔΔᐃΔ = (new Date).getTime(), ⵠⵠⵠ.ⵠΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = true, ⵠⵠⵠ.ⵠΔⲆΔ.value = ᐃⲆᐃᐃ[13], ⲆΔᐃᐃ.ⵠΔⲆΔ.ΔⲆᐃᐃⵠ()) : (ⵠⵠⵠ.ⵠΔⲆΔ.ᐃΔΔᐃΔ = ⵠⲆΔⵠ, ⵠⵠⵠ.ⵠΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false, ⵠⵠⵠ.ⵠΔⲆΔ.value = ⵠⵠΔᐃ);
				ⵠⵠⵠ.ⵠⵠᐃⲆⲆᐃⵠ = ᐃⲆᐃᐃ[12][ᐃⲆᐃᐃᐃᐃⵠ[27]]()
			}
			Timers.HealTimer = (new Date).getTime();
			Timers.GaugeTimer = (new Date).getTime();
			ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled = ᐃⲆᐃᐃ[6];
			ⵠⵠⵠ.ΔⲆⵠⲆᐃ.ᐃΔΔᐃΔ = -ⲆΔⲆⵠ;
			ⵠⵠⵠ.ΔⲆⵠⲆᐃ.label = null;
			ⵠⵠⵠ.ΔⲆⵠⲆᐃ.now = -ᐃⲆΔ;
			ΔᐃⲆΔ.set("starve_token_id", ⵠⵠⵠ.ⵠⵠᐃⲆⲆᐃⵠ);
			if (ⵠⵠⵠ.reconnect.enabled) {
				ⵠⵠⵠ.reconnect.rotate = 0;
				ⵠⵠⵠ.reconnect.enabled = false
			} else {
				ⵠⵠΔⵠ.ΔⲆⵠᐃΔ(ⲆΔᐃᐃ.ⵠⲆᐃᐃΔ);
				ga && ga(Δ[517], Δ[306], Δ[462], Δ[257], "S" + ⵠⵠΔⵠ.ⵠⲆΔΔ + "A" + ⵠⵠΔⵠ.ᐃᐃⲆΔⵠ)
			}
		};
		this.connect = function() {
			ⲆⲆᐃ.ΔⲆᐃΔΔⲆⵠ = 0;
			ⲆⲆᐃ.ᐃⲆⵠΔΔⲆⲆ()
		};
		this.ⵠᐃᐃⲆΔᐃⵠ = [];
		this.ⲆΔᐃⲆΔᐃᐃΔⵠ = function(ⲆᐃⲆⲆⵠⵠΔ) {
			const ᐃᐃⲆⲆΔ = ⲆⲆᐃ.ᐃⲆΔⲆⵠ.filter((ΔΔ => ΔΔ[Δ[26]] === ⲆᐃⲆⲆⵠⵠΔ));
			const regions = {};
			for (let Δᐃ = 0; Δᐃ < ᐃᐃⲆⲆΔ.length; Δᐃ++) {
				const ⵠⲆΔⵠΔ = ᐃᐃⲆⲆΔ[Δᐃ];
				const ⵠΔΔⵠΔ = ⵠⲆΔⵠΔ["r"];
				if (ⵠΔΔⵠΔ === ⵠᐃΔᐃⲆ) continue;
				regions[ⵠΔΔⵠΔ] === ΔΔᐃⵠΔ && (regions[ⵠΔΔⵠΔ] = []);
				regions[ⵠΔΔⵠΔ].push(ⵠⲆΔⵠΔ)
			}

			function ΔⲆⵠⵠΔᐃⲆ(ⵠΔΔⵠΔ) {
				ⲆⲆᐃ.ⵠᐃᐃⲆΔᐃⵠ[ⲆᐃⲆⲆⵠⵠΔ] = ⵠΔΔⵠΔ;
				const ᐃᐃⲆⲆΔ = regions[ⵠΔΔⵠΔ];
				const ⵠⲆΔⵠΔ = ᐃᐃⲆⲆΔ[Math.floor(Math.random() * ᐃᐃⲆⲆΔ.length)];
				ⲆⲆᐃ.ᐃⵠΔᐃΔΔⵠ({
					domain: ΔΔΔⵠⵠᐃⲆ,
					is_tls: 1,
					id: ⵠⲆΔⵠΔ[Δ[235]],
					p: ⵠⲆΔⵠΔ["p"]
				})
			}
			if (undefined !== ⲆⲆᐃ.ⵠᐃᐃⲆΔᐃⵠ[ⲆᐃⲆⲆⵠⵠΔ]) {
				ΔⲆⵠⵠΔᐃⲆ(ⲆⲆᐃ.ⵠᐃᐃⲆΔᐃⵠ[ⲆᐃⲆⲆⵠⵠΔ]);
				return
			}
			let ᐃⲆᐃᐃΔΔⵠ = 1;

			function ⲆᐃⵠⲆᐃᐃᐃΔΔ() {
				if (ᐃⲆᐃᐃΔΔⵠ === Δⵠⵠ) return;
				ᐃⲆᐃᐃΔΔⵠ = Ⲇᐃⵠⵠ;
				const ΔᐃΔΔⲆ = ⵠΔΔⲆⲆⵠᐃᐃⵠ.Object.keys(regions);
				const ⵠΔⵠⲆᐃⲆᐃ = Math.floor(Math.random() * ΔᐃΔΔⲆ.length);
				const ᐃᐃᐃⲆⵠ = ΔᐃΔΔⲆ[ⵠΔⵠⲆᐃⲆᐃ];
				ΔⲆⵠⵠΔᐃⲆ(ᐃᐃᐃⲆⵠ)
			}

			function ⲆⵠΔΔⵠⵠᐃ(ᐃᐃⲆⲆΔ) {
				const ⲆⵠⲆᐃⲆⵠⵠ = new ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[181]];
				const ⵠⲆΔⵠΔ = ᐃᐃⲆⲆΔ[ⵠᐃⵠⵠ];
				const ᐃΔⵠΔΔⲆⲆ = ⵠⲆΔⵠΔ["p"];
				const ⵠΔΔⵠΔ = ⵠⲆΔⵠΔ["r"];
				const ⵠᐃΔΔΔⵠⲆ = ᐃΔⵠΔΔⲆⲆ[Math.floor(Math.random() * ᐃΔⵠΔΔⲆⲆ.length)];
				ⲆⵠⲆᐃⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], "https://" + ⵠᐃΔΔΔⵠⲆ + "." + ΔΔΔⵠⵠᐃⲆ + "/", true);
				ⲆⵠⲆᐃⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
					if (ⵠΔΔⵠ === ⲆⵠⲆᐃⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[294]]) {
						if (0 === ᐃⲆᐃᐃΔΔⵠ) return;
						ᐃⲆᐃᐃΔΔⵠ = ⵠⵠΔᐃ;
						ΔⲆⵠⵠΔᐃⲆ(ⵠΔΔⵠΔ)
					}
				};
				ⲆⵠⲆᐃⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
			}
			for (let ⵠΔΔⵠΔ in regions) {
				const ᐃᐃⲆⲆΔ = regions[ⵠΔΔⵠΔ];
				ⲆⵠΔΔⵠⵠᐃ(ᐃᐃⲆⲆΔ)
			}
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]](ⲆᐃⵠⲆᐃᐃᐃΔΔ, 5e3)
		};
		this.ΔᐃⲆⲆᐃⲆᐃⵠⲆ = function() {
			let ⲆᐃⲆⲆⵠⵠΔ = ⵠΔᐃⲆ.ⲆⵠΔⲆⲆⲆᐃ[ⲆⲆᐃ.ⵠⵠᐃΔⲆ];
			console.log(undefined, ⲆⲆⲆⲆⲆ, ᐃⵠΔΔΔ);
			let ΔΔΔᐃᐃⵠⵠⵠΔ = ⲆⲆᐃ.ΔⵠⲆᐃⵠᐃⲆ[ⲆⲆᐃ.ⵠⵠᐃΔⲆ];
			let ⵠᐃⵠᐃⲆᐃⲆ = ⲆⲆᐃ.ᐃⲆΔⲆⵠ.find((ΔΔ => ΔΔ[Δ[26]] == ⲆᐃⲆⲆⵠⵠΔ && ΔΔ["idx"] == ΔΔΔᐃᐃⵠⵠⵠΔ));
			ⵠᐃⵠᐃⲆᐃⲆ === ᐃⵠΔΔΔ ? ⲆⲆᐃ.ⲆΔᐃⲆΔᐃᐃΔⵠ(ⲆᐃⲆⲆⵠⵠΔ) : ⲆⲆᐃ.ᐃⵠΔᐃΔΔⵠ({
				domain: ΔΔΔⵠⵠᐃⲆ,
				is_tls: ⲆⵠΔⲆ,
				id: ⵠᐃⵠᐃⲆᐃⲆ[Δ[235]],
				p: ⵠᐃⵠᐃⲆᐃⲆ["p"]
			})
		};
		this.ᐃⲆⵠΔΔⲆⲆ = function() {
			console.log(ΔⵠⲆᐃᐃ);
			if (undefined !== ⵠⲆⲆᐃⵠⵠΔ && ⵠΔᐃᐃⵠ !== ⵠΔⵠⲆΔⲆⲆ) {
				console.log(undefined, undefined, undefined);
				ⲆⲆᐃ.ᐃⵠΔᐃΔΔⵠ({
					domain: ΔΔΔⵠⵠᐃⲆ,
					is_tls: ᐃⵠⵠ,
					id: ⵠΔⵠⲆΔⲆⲆ + ⵠⲆⲆᐃⵠⵠΔ,
					p: ⲆⲆᐃ.ᐃᐃΔⵠΔⲆⵠ[ⵠΔⵠⲆΔⲆⲆ]
				});
				return
			}
			if (undefined !== ⲆΔⵠⲆⲆ) {
				ⲆⲆᐃ.ᐃⵠΔᐃΔΔⵠ({
					domain: ⲆΔⵠⲆⲆ["domain"],
					is_tls: ⲆΔⵠⲆⲆ["ssl"],
					id: ⲆΔⵠⲆⲆ[Δ[235]],
					p: [ⲆΔⵠⲆⲆ["p"]]
				});
				return
			}
			ⲆⲆᐃ.ΔᐃⲆⲆᐃⲆᐃⵠⲆ()
		};
		this.ᐃⵠΔᐃΔΔⵠ = function(ᐃⵠᐃΔΔᐃᐃ) {
			let ᐃΔⵠⲆⲆⲆⲆ = ᐃⵠᐃΔΔᐃᐃ["domain"];
			let ⲆⲆⵠᐃᐃΔΔΔⵠ = ᐃⵠᐃΔΔᐃᐃ["is_tls"];
			let ΔⵠⲆⵠⲆΔⵠᐃΔ = ᐃⵠᐃΔΔᐃᐃ[Δ[235]];
			let ᐃΔⵠΔΔⲆⲆ = ᐃⵠᐃΔΔᐃᐃ["p"];
			let ⵠᐃΔΔΔⵠⲆ = ᐃΔⵠΔΔⲆⲆ[Math.floor(Math.random() * ᐃΔⵠΔΔⲆⲆ.length)];
			let ΔΔⲆⲆⲆᐃⲆⵠⲆ = ⲆⲆⵠᐃᐃΔΔΔⵠ ? "wss://" + ⵠᐃΔΔΔⵠⲆ + "." + ᐃΔⵠⲆⲆⲆⲆ + "/" + ΔⵠⲆⵠⲆΔⵠᐃΔ + "?" + ⵠⵠⵠ.ⵠⲆΔⲆⲆⵠⵠ : "ws://" + ᐃΔⵠⲆⲆⲆⲆ;
			console.log(ⵠⲆᐃᐃⲆ, undefined);
			ⲆⲆᐃ.ΔΔⵠᐃ = new ⵠΔΔⲆⲆⵠᐃᐃⵠ.WebSocket(ΔΔⲆⲆⲆᐃⲆⵠⲆ);
			ⲆⲆᐃ.ΔΔⵠᐃ["binaryType"] = "arraybuffer";
			ⲆⲆᐃ.ΔΔⵠᐃ.ΔΔᐃⵠⲆ = ⲆⲆᐃ.ΔΔᐃⵠⲆ;
			ⲆⲆᐃ.ΔΔⵠᐃ.onmessage = function(ᐃⲆΔᐃ) {
				if (ⲆⲆᐃ.ΔΔᐃⵠⲆ != ⲆⲆᐃ.ΔΔᐃⵠⲆ) return;
				if (Δ[428] == typeof ᐃⲆΔᐃ.data) {
					var ᐃⲆᐃᐃ = JSON.parse(ᐃⲆΔᐃ.data);
					switch (ᐃⲆᐃᐃ[0]) {
						case ⵠᐃΔⲆ:
							ⲆⲆᐃ.ΔⵠΔΔⲆ(ᐃⲆᐃᐃ);
							break;
						case 1:
							ⲆⲆᐃ.ᐃⵠⲆⵠΔⵠⵠ(ᐃⲆᐃᐃ[ᐃⵠⵠ]);
							break;
						case 2:
							ⲆⲆᐃ.ⲆΔΔᐃⲆⵠΔᐃⲆ(ᐃⲆᐃᐃ);
							break;
						case 3:
							ⲆⲆᐃ.ΔΔᐃⵠΔᐃΔᐃⲆ(ᐃⲆᐃᐃ);
							break;
						case 4:
							ⲆⲆᐃ.message(ᐃⲆᐃᐃ[ᐃⲆⲆ]);
							break;
						case ⵠⵠⲆⵠ:
							ⲆⲆᐃ.ΔΔⵠᐃᐃΔΔ(ᐃⲆᐃᐃ);
							break;
						case ⲆⵠᐃΔᐃ:
							ⲆⲆᐃ.ⵠⵠⲆΔΔᐃᐃ(ᐃⲆᐃᐃ[1]);
							break
					}
				} else {
					var ΔⲆΔⲆ = ⲆᐃⵠᐃⲆᐃΔⲆⵠ(ᐃⲆΔᐃ.data, ⵠⵠⵠ.ⵠⵠᐃⲆΔᐃᐃ, ⵠⵠⵠ.ⲆⲆⵠⲆΔᐃⵠᐃΔ);
					var ΔⲆⲆⵠᐃ = ΔⲆΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[85]];
					switch (ΔⲆΔⲆ[ⵠᐃΔ]) {
						case ⲆⲆᐃΔ:
							ⲆⲆᐃ.Ⲇᐃⵠ(ΔⲆⲆⵠᐃ, ΔⲆΔⲆ, false);
							break;
						case 1:
							ⲆⲆᐃ.Ⲇᐃⵠ(ΔⲆⲆⵠᐃ, ΔⲆΔⲆ, true);
							break;
						case 2:
							ⲆⲆᐃ.ⵠΔΔΔⵠΔⵠᐃΔ();
							break;
						case 3:
							ⲆⲆᐃ.ᐃⲆⵠⵠΔⲆⵠ(new Uint16Array(ΔⲆⲆⵠᐃ));
							break;
						case ᐃᐃᐃΔⵠ:
							ⲆⲆᐃ.ΔΔⵠΔⵠΔⲆᐃᐃ();
							break;
						case 5:
							ⲆⲆᐃ.ⵠⲆΔᐃΔⲆⲆΔⲆ();
							break;
						case 6:
							ⲆⲆᐃ.ⵠᐃΔᐃⵠⲆᐃΔⲆ();
							break;
						case ⵠⲆⵠⲆΔ:
							ⲆⲆᐃ.ᐃⵠΔΔⲆΔΔᐃᐃ(ΔⲆⲆⵠᐃ);
							break;
						case ⲆΔⵠΔⲆⵠᐃ:
							ⲆⲆᐃ.ⵠᐃΔΔⲆᐃΔᐃΔ(ΔⲆΔⲆ[1]);
							break;
						case 9:
							ⲆⲆᐃ.ΔᐃᐃⵠΔΔΔⵠⲆ(ΔⲆΔⲆ[1]);
							break;
						case ⵠⲆΔΔⵠ:
							ⲆⲆᐃ.ᐃⲆⵠⲆᐃⵠᐃ();
							break;
						case ⲆΔⵠⵠΔⵠᐃ:
							ⲆⲆᐃ.ΔⵠΔⵠⵠⲆⲆ(ΔⲆΔⲆ[1], ΔⲆΔⲆ[ΔΔᐃᐃ]);
							break;
						case 12:
							ⲆⲆᐃ.ⲆⲆⵠᐃᐃ(ΔⲆΔⲆ[1]);
							break;
						case 13:
							ⲆⲆᐃ.ⲆⵠᐃⵠΔⵠⲆᐃⵠ(ΔⲆΔⲆ, ΔⲆⲆⵠᐃ);
							break;
						case 14:
							ⲆⲆᐃ.ⵠⵠⵠΔⵠⵠᐃⵠⲆ();
							break;
						case 15:
							ⲆⲆᐃ.ⵠΔⲆᐃⲆⲆᐃⲆᐃ(ΔⲆΔⲆ[1]);
							break;
						case ᐃᐃᐃⵠΔⲆΔ:
							ⲆⲆᐃ.ᐃⵠⲆᐃ(ΔⲆΔⲆ[ⵠΔᐃ], ΔⲆΔⲆ[ⲆⲆⵠᐃ], ΔⲆΔⲆ[ⵠⵠⵠⵠ], ΔⲆΔⲆ[4], ΔⲆΔⲆ[ⵠᐃⵠΔᐃ], ΔⲆΔⲆ[6], ΔⲆΔⲆ[ΔΔⲆⲆⲆ]);
							break;
						case ⵠⵠᐃⵠⲆΔⲆ:
							ⲆⲆᐃ.ΔΔᐃⲆⲆⲆⵠΔᐃ(ΔⲆⲆⵠᐃ);
							break;
						case 18:
							ⲆⲆᐃ.ⵠⵠΔΔΔⲆⲆⵠᐃ();
							break;
						case ᐃΔⵠⲆⲆ:
							ⲆⲆᐃ.ᐃⲆᐃΔⲆ(ΔⲆΔⲆ[1]);
							break;
						case ⵠⲆⵠΔⵠᐃᐃ:
							ⲆⲆᐃ.ΔᐃⲆΔⲆᐃⲆᐃᐃ();
							break;
						case 21:
							ⲆⲆᐃ.ⲆⲆⲆⵠ(ΔⲆⲆⵠᐃ);
							break;
						case 22:
							ⲆⲆᐃ.ⵠⲆⵠᐃⵠⲆᐃⵠΔ(ΔⲆΔⲆ[1]);
							break;
						case 23:
							ⲆⲆᐃ.ⲆᐃᐃⵠⲆⲆⵠⲆⵠ(ΔⲆⲆⵠᐃ);
							break;
						case 24:
							ⲆⲆᐃ.ΔΔΔⵠΔᐃⵠᐃᐃ(ΔⲆΔⲆ[ΔΔⲆΔ]);
							break;
						case 25:
							ⲆⲆᐃ.ⲆΔΔⵠᐃⲆⲆᐃⲆ(ΔⲆΔⲆ[1], ΔⲆⲆⵠᐃ);
							break;
						case 26:
							ⲆⲆᐃ.ⵠⲆⵠᐃⵠ(ΔⲆΔⲆ);
							break;
						case 27:
							ⲆⲆᐃ.ᐃⵠᐃⵠⵠⵠΔⵠΔ();
							break;
						case 28:
							ⲆⲆᐃ.ΔⲆⵠⲆᐃ(ΔⲆΔⲆ[1]);
							break;
						case 29:
							ⲆⲆᐃ.ᐃᐃΔⵠⵠⲆⲆⲆᐃ();
							break;
						case 30:
							ⲆⲆᐃ.ⵠⲆⲆⲆᐃⲆΔⵠⵠ();
							break;
						case 31:
							ⲆⲆᐃ.ⲆᐃᐃᐃⵠⵠᐃᐃⲆ(ΔⲆΔⲆ);
							break;
						case 32:
							ⲆⲆᐃ.ᐃᐃΔΔΔᐃΔΔᐃ(ΔⲆΔⲆ[1]);
							break;
						case 33:
							ⲆⲆᐃ.ᐃᐃᐃΔⵠᐃⵠⵠΔ(ΔⲆΔⲆ[ⵠⲆⲆⲆ]);
							break;
						case 34:
							ⲆⲆᐃ.ΔΔᐃᐃᐃⵠⲆⲆΔ();
							break;
						case 35:
							ⲆⲆᐃ.ᐃⲆⲆᐃⵠⲆⵠᐃΔ(ΔⲆΔⲆ[1]);
							break;
						case 36:
							ⲆⲆᐃ.ⵠᐃⲆΔⵠΔⲆ(ΔⲆΔⲆ[ⵠⵠⵠΔ]);
							break;
						case 37:
							ⲆⲆᐃ.ᐃⵠⵠⲆⵠⵠⲆΔⵠ(ΔⲆΔⲆ[1], ΔⲆΔⲆ[2]);
							break;
						case 38:
							ⲆⲆᐃ.ⲆΔⵠΔΔⲆᐃᐃᐃ(ΔⲆΔⲆ[Δᐃᐃ]);
							break;
						case 39:
							ⲆⲆᐃ.ⵠⵠⵠⵠᐃΔᐃΔⲆ(ΔⲆΔⲆ[ᐃⵠⵠ]);
							break;
						case 40:
							ⲆⲆᐃ.ΔⵠⵠⲆⵠΔⵠΔΔ();
							break;
						case 41:
							ⲆⲆᐃ.ᐃᐃᐃΔⵠΔΔΔⲆ(ΔⲆΔⲆ);
							break;
						case 42:
							ⲆⲆᐃ.ᐃⵠᐃⲆⲆᐃΔΔΔ(ΔⲆΔⲆ[1]);
							break;
						case 43:
							ⲆⲆᐃ.ⵠᐃᐃⵠᐃΔⲆⲆΔ(ΔⲆΔⲆ[1]);
							break;
						case 44:
							ⲆⲆᐃ.claimed(ΔⲆΔⲆ[1]);
							break;
						case 45:
							ⲆⲆᐃ.ΔΔᐃⲆⵠᐃᐃᐃⲆ(ΔⲆΔⲆ[ᐃⲆⲆ]);
							break;
						case 46:
							ⲆⲆᐃ.ΔᐃΔⵠⵠⵠᐃⲆΔ(ΔⲆΔⲆ[ⲆΔⲆⵠ]);
							break;
						case 47:
							ⲆⲆᐃ.ᐃᐃⲆⵠⵠ(ΔⲆΔⲆ[1]);
							break;
						case 48:
							ⲆⲆᐃ.ⲆⲆⲆⵠΔΔᐃⵠᐃ();
							break;
						case 50:
							ⲆⲆᐃ.ⲆⲆᐃⵠΔΔⵠⲆⵠ(ΔⲆΔⲆ[1], ΔⲆΔⲆ[ᐃⲆᐃⵠ], ΔⲆΔⲆ[3]);
							break;
						case 51:
							ⲆⲆᐃ.ⵠⲆⲆΔⵠᐃΔⲆⵠ();
							break;
						case 52:
							ⲆⲆᐃ.ⵠᐃⵠⲆⲆΔⲆⵠΔ(ΔⲆΔⲆ[1]);
							break;
						case 53:
							ⲆⲆᐃ.ΔᐃᐃΔΔⵠⵠⵠⲆ(ΔⲆΔⲆ[ᐃΔⵠΔ]);
							break;
						case 54:
							ⲆⲆᐃ.ΔⵠΔᐃⵠⵠΔⲆᐃ();
							break;
						case 55:
							ⲆⲆᐃ.ΔⵠΔⲆᐃΔΔⲆᐃ(ΔⲆΔⲆ[1]);
							break;
						case 56:
							ⲆⲆᐃ.ᐃᐃΔᐃⵠⲆⲆⲆᐃ(ΔⲆΔⲆ[ⵠΔᐃ]);
							break;
						case 57:
							ⲆⲆᐃ.ⵠᐃⲆΔⵠᐃΔⵠΔ();
							break;
						case 58:
							ⲆⲆᐃ.ᐃΔΔⲆᐃⲆⲆΔᐃ();
							break;
						case 59:
							ⲆⲆᐃ.ΔⵠⲆⵠΔᐃⵠΔᐃ();
							break;
						case 60:
							ⲆⲆᐃ.ΔΔᐃᐃⲆΔΔⵠⵠ();
							break;
						case 61:
							ⵠⵠⵠ.ᐃⵠⲆ.ⲆᐃΔⵠⵠΔΔ = .2;
							ⵠⵠⵠ.ᐃⵠⲆ.ᐃΔΔᐃΔ = 3;
							break;
						case 62:
							ⲆⲆᐃ.ΔᐃΔⲆⵠⲆⲆᐃⲆ(new Uint16Array(ΔⲆⲆⵠᐃ));
							break;
						case 63:
							ⲆⲆᐃ.ᐃΔⲆΔᐃⲆⵠᐃⲆ();
							break;
						case 64:
							ⲆⲆᐃ.ΔᐃⵠΔⵠⲆΔΔⵠ();
							break;
						case 65:
							ⲆⲆᐃ.ᐃⲆⲆⵠᐃᐃᐃⲆᐃ();
							break;
						case 66:
							ⲆⲆᐃ.ΔⵠᐃⵠⵠⵠⵠᐃⲆ();
							break;
						case 67:
							ⲆⲆᐃ.ⲆΔⲆᐃᐃᐃⲆᐃΔ(ΔⲆΔⲆ[1]);
							break;
						case 68:
							ⲆⲆᐃ.ⲆΔⲆᐃⲆΔⵠⲆⲆ(ΔⲆΔⲆ[1]);
							break;
						case 69:
							ⲆⲆᐃ.ⲆΔᐃⲆⵠᐃᐃ(ΔⲆΔⲆ[ⵠⲆⲆⲆ]);
							break;
						case 70:
							ⲆⲆᐃ.ⲆⲆᐃᐃⲆⲆⵠⵠΔ(ΔⲆΔⲆ[1]);
							break;
						case 71:
							ⲆⲆᐃ.ⵠⲆⲆᐃΔ(ΔⲆΔⲆ[ⲆΔᐃΔ]);
							break
					}
				}
			};
			ⲆⲆᐃ.ΔΔⵠᐃ.onerror = function() {
				if (ⵠⵠⵠ.reconnect.enabled) ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]](ⲆⲆᐃ.timeout, 2500)
			};
			this.ΔΔⵠᐃ.onopen = function() {
				clearTimeout(ⲆⲆᐃ.ΔⵠᐃⲆⲆ);
				ⵠⵠⵠ.ΔΔⵠᐃⵠⵠᐃ = ⵠⵠⵠ.ΔΔⵠᐃⵠⵠᐃ || ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ("token");
				ⵠᐃΔᐃ.ⲆᐃⵠΔⵠΔᐃ().then((ᐃᐃⲆⵠᐃΔΔⵠⲆ => {
					ⲆⲆᐃ.ΔΔⵠᐃ[ⵠⵠⲆΔ](ⵠᐃᐃᐃΔᐃΔ[ΔⲆⲆⵠⵠⲆΔ].stringify([ⵠⵠΔⵠ.ⲆⵠΔⵠΔ.input.value, Settings.BiggerZoom.enabled ? screen.width * 2 : screen.width + 200, Settings.BiggerZoom.enabled ? screen.height * 2 : screen.height + 200, ⲆᐃᐃΔⲆ.ⲆⵠΔᐃⲆⲆΔ, ⵠⵠⵠ.ⲆΔΔⲆΔ, ⵠⵠⵠ.ⵠⵠᐃⲆⲆᐃⵠ, ⵠⵠⵠ.reconnect.enabled ? 1 : ΔᐃΔ, ⵠⵠΔⵠ.ⵠⲆΔΔ, ⵠⵠΔⵠ.ᐃᐃⲆΔⵠ, ⵠⵠΔⵠ.ΔΔⲆᐃⵠ, ⵠⵠΔⵠ.ⲆΔⵠΔΔ, ⵠⵠΔⵠ.ⵠⵠΔⲆⲆ, ⵠⵠΔⵠ.Δᐃⵠⵠᐃ, ᐃΔⵠⲆᐃ === ⵠⲆᐃᐃⲆ ? 0 : ᐃΔⵠⲆᐃ, ΔⲆᐃᐃᐃ === ΔⵠⲆᐃᐃ ? ⵠᐃΔⲆ : ΔⲆᐃᐃᐃ.substring(ΔⲆᐃᐃᐃ.length - 50), ⲆⵠᐃⲆⵠⵠΔⵠⵠ, ⵠⵠⵠ.ΔΔⵠᐃⵠⵠᐃ, ᐃᐃⲆⵠᐃΔΔⵠⲆ, ⵠⵠⵠ.Δᐃᐃⵠⵠⵠᐃ, ⵠⵠⵠ.ⵠⵠⵠΔᐃΔⲆ]));
					ⵠⵠⵠ.ΔΔⵠᐃⵠⵠᐃ = undefined;
					ⵠⵠⵠ.Δᐃᐃⵠⵠⵠᐃ = undefined;
					ⵠⵠⵠ.ⵠⵠⵠΔᐃΔⲆ = ⲆⲆΔᐃⵠ;
					ⵠⵠⵠ.ⵠⲆΔⲆⲆⵠⵠ = ⵠᐃΔᐃⲆ;
					ⲆⲆᐃ.ΔⵠᐃⲆⲆ = setTimeout(ⲆⲆᐃ.timeout, ⲆᐃᐃΔⲆ.ΔⵠᐃΔⵠⵠⲆⲆᐃ)
				}))
			}
		}
	}

	function ⲆⲆᐃᐃᐃᐃⲆ(ⲆⵠΔΔᐃΔⵠ, ⲆⵠⵠⲆᐃⲆⵠ, ᐃΔᐃΔⵠⲆΔ, ᐃᐃΔΔⲆᐃᐃ, ⵠⵠᐃΔᐃΔΔ) {
		const ᐃᐃⲆΔⲆΔΔ = (24 << (ⲆⵠΔΔᐃΔⵠ >> 16 & 255)) + (0 << (ⲆⵠΔΔᐃΔⵠ >> 0 & 255)) + (ΔΔⵠⵠⵠ << (ⲆⵠΔΔᐃΔⵠ >> 8 & ⲆΔⵠᐃⲆⵠⵠ)) + (16 << (ⲆⵠΔΔᐃΔⵠ >> 24 & 255));
		const ᐃⵠΔⵠΔⵠⵠ = ~(ⲆⵠⵠⲆᐃⲆⵠ & 44861) & 44861 | ~(44861 & ⲆⵠⵠⲆᐃⲆⵠ) & ⲆⵠⵠⲆᐃⲆⵠ;
		const ΔⲆΔⵠⵠᐃⲆ = ((ᐃΔᐃΔⵠⲆΔ + 58347) * 22695477 + 1) % 4294967296;
		const ⵠⵠᐃᐃᐃᐃⵠ = ~(22779 & ᐃᐃΔΔⲆᐃᐃ) & (ᐃᐃΔΔⲆᐃᐃ | 22779);
		const ΔΔΔᐃⲆⲆⵠⲆΔ = (24 << (ⵠⵠᐃΔᐃΔΔ >> 0 & 255)) + (8 << (ⵠⵠᐃΔᐃΔΔ >> 16 & 255)) + (16 << (ⵠⵠᐃΔᐃΔΔ >> 24 & 255)) + (0 << (ⵠⵠᐃΔᐃΔΔ >> 8 & 255));
		const ᐃΔⲆΔⲆⵠⲆⲆⵠ = ΔⲆΔⲆⵠᐃᐃᐃⲆ(ᐃᐃⲆΔⲆΔΔ, ᐃⵠΔⵠΔⵠⵠ, ΔⲆΔⵠⵠᐃⲆ, ⵠⵠᐃᐃᐃᐃⵠ, ΔΔΔᐃⲆⲆⵠⲆΔ, ᐃᐃⲆΔⲆΔΔ);
		const ᐃΔⵠΔᐃΔⵠᐃᐃ = ⵠⵠᐃΔⵠⲆⲆ(ᐃⵠΔⵠΔⵠⵠ, ΔⲆΔⵠⵠᐃⲆ, ⵠⵠᐃᐃᐃᐃⵠ);
		const ⵠΔΔᐃⵠⵠⵠΔⲆ = 13566 ^ ᐃΔⲆΔⲆⵠⲆⲆⵠ;
		return ⵠΔΔᐃⵠⵠⵠΔⲆ
	}
	var ⵠΔᐃⲆ = {
		"ΔΔΔ": 48e4,
		"ⵠⵠᐃΔⲆⲆΔ": ΔΔⲆⲆⵠ,
		"ΔⲆΔᐃᐃΔⲆ": ΔⲆⲆⵠΔ,
		"ΔⵠⵠⲆΔⵠⵠⲆΔ": 16 - 10,
		"ⲆⲆⵠΔΔᐃᐃ": 60,
		"ᐃΔᐃᐃᐃ": ⲆⵠΔⲆ,
		"ΔⲆᐃⲆᐃ": 2,
		"ⲆⵠΔⲆΔ": ⲆⵠⵠⲆ,
		"ⲆᐃⵠΔᐃ": ⲆⲆΔᐃΔ,
		"ⲆⵠΔΔᐃᐃⵠ": ΔⲆⲆΔΔ,
		"ᐃΔᐃⲆΔⵠⲆ": ⵠⲆⲆⵠᐃΔᐃ,
		"ΔᐃⵠΔⲆⲆᐃ": 100,
		"ⲆΔΔⵠᐃᐃΔ": 100,
		"ⵠⲆΔⲆⵠⲆⲆⲆⲆ": 100,
		"ΔⵠⲆⵠⲆⵠⲆ": ᐃⵠᐃΔᐃ,
		"ⵠⲆᐃᐃᐃⲆᐃ": ⵠᐃⵠⲆⲆ,
		"ⵠΔΔⵠΔΔⲆΔᐃ": ⵠⲆᐃⵠⲆ,
		"ⵠⲆᐃᐃᐃⲆᐃ": ΔⲆΔΔΔ,
		"ᐃΔⲆΔⲆⵠⲆ": ⲆᐃᐃΔᐃ,
		"ⲆΔⵠᐃⲆΔΔ": ⵠΔΔΔⲆ,
		"ᐃᐃΔⲆⲆ": ⵠΔΔᐃ,
		"ⲆᐃᐃⲆⵠᐃⵠ": ᐃⲆΔ,
		"ᐃⵠⲆΔⲆ": 2,
		"ΔᐃΔⲆᐃ": 3,
		"ⵠΔΔⲆⵠ": ⲆⵠⵠⲆ,
		"ⵠΔⲆⵠᐃΔΔ": 5,
		"ⲆΔΔⲆᐃ": 6,
		"ⲆᐃⲆᐃᐃ": ⵠⵠΔΔᐃΔΔ,
		"ΔⲆⲆΔⲆΔⲆⵠᐃ": {
			losangeles: "Los Angeles",
			sydney: "Sydney",
			frankfurt: "Frankfurt",
			osaka: "Osaka",
			atlanta: "Atlanta"
		},
		"ⲆⵠΔⲆⲆⲆᐃ": {
			0: "normal",
			2: "zombies",
			3: "vampires",
			4: Δ[498],
			6: "community",
			7: "experimental"
		},
		"ᐃᐃⲆᐃᐃᐃΔ": ΔΔⲆⲆ,
		"ΔΔΔⵠᐃΔⵠ": ΔΔⲆⲆ,
		"ⵠΔᐃⵠⵠΔⲆ": 30,
		"ᐃⲆⲆᐃⵠΔⲆᐃⲆ": 2,
		"ⲆⲆⵠΔΔᐃᐃ": 6e4,
		"ΔⲆᐃΔΔᐃⵠⵠⵠ": ⵠⵠΔΔ,
		"ⵠⵠΔⲆΔⵠᐃⵠΔ": Δⵠⵠ,
		"ᐃⲆⲆᐃⲆⲆΔΔⲆ": 50,
		"ΔⵠᐃᐃΔⲆⲆᐃΔ": 0,
		"ᐃΔⵠⲆΔᐃⵠⲆΔ": 40,
		"ᐃⵠᐃᐃⲆΔⵠⵠⵠ": 39,
		"ⲆΔⵠΔⲆᐃⵠΔⲆ": 830,
		"ⲆᐃᐃᐃⲆᐃⲆ": 25,
		"ⵠΔⲆΔⵠⲆⲆ": ⵠΔᐃᐃΔ,
		"ⲆⵠᐃⲆⲆ": ᐃⲆⵠΔ,
		"ⵠᐃⵠⵠᐃ": ⵠᐃΔⲆ,
		"ΔᐃΔⲆᐃᐃⵠ": 200,
		"ⵠⵠⵠⵠⵠⵠⲆ": 0,
		"ΔᐃⲆᐃⵠ": 250,
		"ⵠⲆⲆⲆΔⵠⲆ": 150,
		"ΔⲆⵠΔᐃⲆⲆ": ⲆᐃⲆ,
		"ᐃΔⵠⵠⲆ": 350,
		"ⲆΔⵠⲆΔⲆᐃ": ⵠⲆΔᐃΔ,
		"ΔⵠⵠⲆΔⵠᐃ": 700,
		"ⲆΔΔΔⵠ": 39879
	};
	var ΔᐃⵠᐃΔ = [];
	for (var Δᐃ = 0; Δᐃ < 500; Δᐃ++) ΔᐃⵠᐃΔ[Δᐃ] = 0;
	ΔᐃⵠᐃΔ[ⵠ.ΔⵠΔᐃⵠ] = ΔⲆΔᐃ;
	ΔᐃⵠᐃΔ[ⵠ.ΔᐃΔΔΔ] = 1;
	ΔᐃⵠᐃΔ[ⵠ.ⵠⲆᐃⲆⵠ] = 1;
	ΔᐃⵠᐃΔ[ⵠ.ⲆⲆⲆΔΔ] = 1;
	ΔᐃⵠᐃΔ[ⵠ.ᐃΔᐃᐃⲆ] = ⲆⵠⲆ;
	ΔᐃⵠᐃΔ[ⵠ.ⵠΔⵠⵠᐃ] = 1;
	ΔᐃⵠᐃΔ[ⵠ.ᐃⲆΔⵠⵠ] = ᐃⲆⲆ;
	ΔᐃⵠᐃΔ[ⵠ.ᐃᐃⲆⲆⲆ] = 1;
	ΔᐃⵠᐃΔ[ⵠ.ᐃⵠΔᐃᐃ] = ⵠΔΔ;
	ΔᐃⵠᐃΔ[ⵠ.ⲆⵠⲆⲆⵠ] = 1;
	ΔᐃⵠᐃΔ[ⵠ.ⵠᐃⵠⵠΔ] = ΔⲆΔᐃ;
	ΔᐃⵠᐃΔ[ⵠ.ⵠΔⲆⲆᐃ] = ᐃΔⵠΔ;
	ΔᐃⵠᐃΔ[ⵠ.ᐃⵠᐃⵠⲆ] = ᐃΔⵠΔ;
	ΔᐃⵠᐃΔ[ⵠ.ⵠⲆⲆⲆΔ] = 1;
	ΔᐃⵠᐃΔ[ⵠ.ᐃⲆⵠᐃΔ] = 1;
	ΔᐃⵠᐃΔ[ⵠ.ⵠᐃⵠⲆᐃ] = ΔⲆΔᐃ;
	ΔᐃⵠᐃΔ[ⵠ.ΔⵠᐃⵠΔ] = ᐃΔⵠΔ;
	ΔᐃⵠᐃΔ[ⵠ.ΔᐃⵠᐃⲆ] = 1;
	ΔᐃⵠᐃΔ[ⵠ.ᐃⵠᐃᐃⲆ] = ⲆΔᐃ;
	var ⲆᐃⵠⲆⵠᐃⵠ = [{
		time: ΔΔᐃⵠⵠ * 48e4
	}, {
		time: 8 * 6e4 * ᐃΔΔΔ
	}, {
		time: 192e4
	}, {
		time: ᐃⵠᐃⲆ * 48e4
	}, {
		time: ⲆᐃⵠⲆⵠ * 6e4 * 6
	}, {
		time: 24e5
	}, {
		time: ⲆΔⵠᐃⵠ * 48e4
	}, {
		time: 8 * (60 * 1e3) * ᐃᐃᐃⵠⵠ
	}, {
		time: Δⵠᐃⵠⵠ * (8 * 6e4)
	}, {
		time: ⵠΔⵠΔᐃ * (1e3 * 60 * 8)
	}, {
		time: 6e4 * ⲆᐃⵠᐃⲆ * 6
	}, {
		time: 8 * (1e3 * 60 * ΔΔⲆⵠⵠ)
	}, {
		time: 48e4 * ΔᐃⲆΔᐃ
	}];
	var ⲆΔⲆ = {
		"ⵠⲆⵠⵠΔ": 8,
		"ΔⵠⲆᐃΔ": 54,
		"ⲆᐃΔⲆᐃ": 69,
		"ⵠᐃⲆᐃΔ": 78,
		"ᐃⲆⲆⲆ": 0,
		"ᐃⲆⵠᐃᐃ": 62,
		"ΔⲆⵠΔᐃ": 74,
		"ᐃᐃΔᐃⵠ": 100,
		"ᐃⵠⵠⵠΔ": 26,
		"ⲆᐃⵠᐃΔ": 50,
		"ⲆⲆⵠⲆΔ": 79,
		"ᐃᐃᐃⵠᐃ": 32,
		"ⵠⵠᐃⲆⵠ": ⵠᐃⵠⲆ,
		"ᐃⵠᐃⲆᐃ": 5,
		"ΔᐃΔⲆⲆ": 51,
		"ᐃᐃⲆΔᐃ": ᐃΔⵠⲆⵠ,
		"ⵠⲆⵠΔΔ": 41,
		"ⲆⲆᐃⵠⵠ": 45,
		"Δⵠⵠⵠⵠ": 18,
		"Ⲇⵠⵠⵠⵠ": 37,
		"Δⵠⵠᐃⵠ": 88,
		"ⵠⲆⵠΔᐃ": 52,
		"ᐃᐃⵠⲆⲆ": 55,
		"ⵠⵠⲆⵠᐃ": 86,
		"ᐃⵠⵠΔⵠ": 25,
		"ΔⵠᐃΔΔ": ⲆⵠⲆΔⵠ,
		"ⲆΔΔΔⲆᐃⲆ": 83,
		"ⲆᐃⲆΔᐃ": 56,
		"ⲆΔΔΔⵠ": 3,
		"ⲆⲆΔᐃᐃ": ΔΔⲆΔΔ,
		"ⵠᐃΔΔⵠ": ⵠΔⲆΔⵠ,
		"ⲆΔⲆⵠⵠ": 60,
		"ᐃᐃⲆⲆᐃ": 39,
		"ᐃⵠⲆΔⵠ": 61,
		"ᐃⵠᐃⲆΔ": 21,
		"ᐃᐃⵠⵠᐃ": 71,
		"ⲆⲆⲆⲆⲆᐃᐃ": 89,
		"ⵠΔΔⲆⲆ": 48,
		"ⲆᐃⲆⵠᐃ": 43,
		"ΔᐃᐃⲆᐃ": 81,
		"ⵠⵠⲆΔⲆ": 64,
		"ⲆΔᐃⲆΔ": 73,
		"ⲆⵠⲆⲆᐃ": Δᐃᐃ,
		"ⵠᐃⲆΔⲆ": 72,
		"ⵠⲆⲆⵠⵠ": 65,
		"ⵠΔⲆΔᐃ": 22,
		"ⵠⵠⲆⵠⵠ": 91,
		"ΔⲆⵠΔⵠ": ⲆⵠΔⲆⵠ,
		"ᐃⵠᐃΔⵠᐃᐃ": 82,
		"ⲆⲆᐃⲆᐃ": 34,
		"ⵠⵠΔᐃⵠ": 75,
		"ⵠⵠΔⵠᐃ": 63,
		"ⲆⵠⵠⲆΔ": 9,
		"ᐃⲆⲆᐃⵠ": 44,
		"ⵠΔⵠⲆⵠ": ᐃⲆⵠΔΔ,
		"ⵠΔⵠᐃΔ": 38,
		"ᐃⲆΔᐃΔ": 28,
		"ⲆᐃⲆⲆⲆ": ᐃᐃΔΔ,
		"ᐃΔΔⵠᐃ": 29,
		"ⵠⵠᐃᐃⵠ": 70,
		"ⵠⲆⵠΔΔⵠⲆ": 84,
		"ᐃΔⲆΔⵠ": 77,
		"ⵠⵠΔᐃᐃ": 12,
		"ΔΔᐃΔⲆ": 67,
		"ⲆᐃΔⵠᐃ": 90,
		"ΔⲆⲆⲆΔ": 80,
		"ΔᐃΔⵠⵠ": 13,
		"ⲆΔⵠⲆⵠ": 46,
		"ⲆⵠⵠⲆᐃ": 42,
		"ⵠⵠᐃⵠⲆ": 17,
		"ΔⵠⵠⲆΔ": 49,
		"ᐃᐃΔᐃᐃ": ΔⲆⲆᐃⵠⵠᐃ,
		"ΔΔΔⲆᐃ": 53,
		"ⲆⵠΔⵠⵠ": 24,
		"ᐃⵠΔᐃⲆ": 40,
		"ᐃⲆⵠΔⲆ": 47,
		"ΔᐃᐃΔⵠⵠΔ": 85,
		"ΔΔⲆᐃⲆ": 33,
		"ⵠΔΔⵠⲆ": 68,
		"ᐃΔΔⵠⵠ": 36,
		"ΔᐃᐃⵠΔ": 87,
		"ᐃⵠΔⵠΔ": ⲆⵠᐃⲆⵠ,
		"ΔⲆᐃΔᐃ": 27,
		"ΔΔᐃⲆⵠ": 31,
		"ΔΔⵠⲆⵠ": 23,
		"ⲆΔⵠᐃᐃ": 30,
		"ⵠΔⵠⲆᐃ": 66,
		"ⵠⲆⵠⵠΔⵠᐃ": 76,
		"ᐃΔⲆᐃΔ": 16,
		"ⵠⲆⲆΔⵠ": 35
	};
	var ᐃᐃⲆΔΔΔⵠ = [
		[ⲆΔⲆ.ⲆⵠΔⵠⵠ, Ⲇᐃ.ᐃⵠᐃᐃ],
		[ⲆΔⲆ.ᐃⵠⵠΔⵠ, Ⲇᐃ.ᐃⵠⵠᐃ],
		[ⲆΔⲆ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ⵠⲆᐃᐃ],
		[ⲆΔⲆ.ΔⲆᐃΔᐃ, Ⲇᐃ.ᐃΔⲆᐃ],
		[ⲆΔⲆ.ᐃⲆΔᐃΔ, Ⲇᐃ.Ⲇⵠⵠᐃ]
	];

	function ⵠΔΔᐃⲆⵠᐃ(ⵠᐃ, ΔΔ, ΔΔⵠ, ⵠᐃᐃ) {
		this.id = ⵠᐃ;
		this.ΔⲆⵠⵠΔ = (ⵠᐃ + 5) * 8;
		this.ᐃⵠᐃⲆⲆ = ⲆΔⲆᐃ / 1366;
		this.x = ΔΔ;
		this.y = ΔΔⵠ;
		this.c = Math.sin(ⵠᐃᐃ);
		this.ΔΔΔᐃ = Math.cos(ⵠᐃᐃ);
		this.alpha = 0
	}

	function ⵠⲆᐃᐃⵠⵠᐃⲆⲆ(ⵠⵠⵠⲆΔⵠΔ) {
		this.mode = ⵠΔᐃⲆ.ᐃᐃΔⲆⲆ;
		this.ⵠⵠⵠⲆΔⵠΔ = ⵠⵠⵠⲆΔⵠΔ;
		this.ᐃΔⵠΔⲆ = ⵠⲆΔⵠ;
		this.ⵠⲆⲆⵠΔⵠᐃ = ⵠⵠⵠᐃⵠ;
		this.ⵠⲆΔᐃ = [];
		this.Ⲇᐃⵠ = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃΔᐃⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⲆⲆΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⲆⵠⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔᐃΔⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃᐃⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔⲆΔⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⵠⵠᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃⲆΔⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔᐃⲆΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⵠΔᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⲆⵠⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠⲆᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⵠᐃᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.Δⵠⵠᐃⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆⵠⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃΔⵠᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠΔⵠᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃⲆᐃΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆΔⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃΔⲆᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔΔⵠⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆⵠⲆΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆⲆⲆⲆᐃᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔΔΔⲆᐃⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠΔΔⵠⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃᐃΔⵠⵠΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃᐃⲆᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃΔⵠᐃᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆⵠᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆᐃⲆᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔΔⵠⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠⲆΔⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃⲆⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠⲆⲆᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⲆΔᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔΔΔⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃⲆᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠΔᐃᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃΔⵠⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆΔᐃᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃΔΔⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠΔᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆⲆⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⵠΔⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠⵠΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠⵠⲆΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃΔᐃᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⵠᐃΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠΔΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠⲆⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠᐃΔΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔⲆᐃΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃⵠⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃⲆΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃΔⲆⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆᐃⵠⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⵠⲆⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⵠΔⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔΔⲆⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠⵠⲆΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔΔⲆᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.Δⵠⵠⵠⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔΔⵠᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆΔᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠΔⵠΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⲆΔᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔⵠⲆⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⵠᐃᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠᐃΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔⲆᐃⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔᐃⲆⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⵠⲆⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.Ⲇⵠⵠⵠⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆⵠᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆᐃⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠⲆᐃΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⲆⲆᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠΔᐃⲆ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃᐃⵠᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠΔⵠⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠⵠΔⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠⵠⵠΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆᐃΔᐃ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆΔᐃΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⲆΔⵠ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃᐃⵠΔ] = [];
		this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠⵠⲆᐃ] = [];
		this.ΔⲆᐃᐃ = [];
		this.ᐃⵠⲆΔΔ = 260;
		this.ΔᐃⵠⵠⲆ = 260;
		this.ᐃᐃⲆⲆΔᐃⵠ = 100;
		this.ⲆᐃⵠᐃΔⲆΔ = ⵠⲆⲆⵠᐃΔᐃ;
		this.w = this.ᐃⵠⲆΔΔ * this.ᐃᐃⲆⲆΔᐃⵠ;
		this.ⲆΔΔ = this.ΔᐃⵠⵠⲆ * this.ⲆᐃⵠᐃΔⲆΔ;
		this.ⵠᐃⵠΔⵠ = new ⵠᐃⵠΔⵠ.ᐃΔᐃⲆΔᐃᐃ;
		this.ⵠⵠᐃⲆ = [];
		this.ⵠΔⵠΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ⲆΔⵠΔ, ⵠⲆⲆⲆ, ⵠᐃⵠⵠ, ⵠⵠⵠΔ, ⲆΔᐃ);
		this.transition = ΔⲆᐃⵠΔ;
		this.ⲆⵠΔΔΔ = [];
		this.ⵠΔⲆⵠᐃ = ⵠⵠΔᐃ;
		this.ᐃⵠⲆⲆⵠⵠⵠ = 1;
		this.ΔᐃᐃⲆᐃⲆⲆ = ΔⲆⲆⵠ;
		this.ᐃⲆᐃᐃΔⵠⲆ = 3;
		this.ΔᐃⲆⵠⲆ = ⲆⵠⵠⲆ;
		this.ⵠⲆΔΔⵠⲆⵠ = 10;
		this.ⲆⵠΔΔΔ[this.ⵠΔⲆⵠᐃ] = {
			"ⵠⵠᐃⲆⵠⵠᐃ": 1,
			"ⵠⵠⲆ": [19, 58, 43],
			"ᐃΔᐃ": [4, 43, 48],
			"ⲆⲆⵠᐃⵠ": [Δ[317], Δ[127]]
		};
		this.ⲆⵠΔΔΔ[this.ΔᐃⲆⵠⲆ] = {
			"ⵠⵠᐃⲆⵠⵠᐃ": ⵠⲆΔⵠ,
			"ⵠⵠⲆ": [11, 106, 132],
			"ᐃΔᐃ": [9, 55, 63],
			"ⲆⲆⵠᐃⵠ": [Δ[559], Δ[149]]
		};
		this.ⲆⵠΔΔΔ[this.ᐃⵠⲆⲆⵠⵠⵠ] = {
			"ⵠⵠᐃⲆⵠⵠᐃ": 0,
			"ⵠⵠⲆ": [235, 242, 240],
			"ᐃΔᐃ": [19, 97, 103],
			"ⲆⲆⵠᐃⵠ": [Δ[288], Δ[91]]
		};
		this.ⲆⵠΔΔΔ[this.ΔᐃᐃⲆᐃⲆⲆ] = {
			"ⵠⵠⲆ": [45, 32, 23],
			"ⲆⲆⵠᐃⵠ": ["#2D2017", "#031C1E"],
			"ᐃΔᐃ": [3, 28, 30],
			"ⵠⵠᐃⲆⵠⵠᐃ": 0
		};
		this.ⲆⵠΔΔΔ[this.ᐃⲆᐃᐃΔⵠⲆ] = {
			"ⵠⵠᐃⲆⵠⵠᐃ": 0,
			"ⲆⲆⵠᐃⵠ": ["#4A4A4A", "#183D3C"],
			"ⵠⵠⲆ": [74, 74, 74],
			"ᐃΔᐃ": [24, 61, 60]
		};
		this.ⲆⵠΔΔΔ[this.ⵠⲆΔΔⵠⲆⵠ] = {
			"ᐃΔᐃ": [9, 61, 56],
			"ⵠⵠᐃⲆⵠⵠᐃ": ⵠΔⵠⲆ,
			"ⵠⵠⲆ": [235, 216, 166],
			"ⲆⲆⵠᐃⵠ": ["#EBD8A6", "#093D38"]
		};
		this.ⲆⲆᐃᐃⲆᐃΔ = function(ΔⲆᐃ, ΔΔ, ΔΔⵠ, Δⵠᐃ, ⲆΔΔ, ⲆᐃΔ) {
			this.x1 = ΔΔ * 100;
			this.y1 = ᐃⵠᐃΔᐃ * ΔΔⵠ;
			this.w = Δⵠᐃ * 100;
			this.ⲆΔΔ = ⲆΔΔ * 100;
			this.x2 = ⵠΔΔΔⲆ * (ΔΔ + Δⵠᐃ);
			this.y2 = (ΔΔⵠ + ⲆΔΔ) * 100;
			this.ΔⲆᐃ = ΔⲆᐃ;
			if (ⲆᐃΔ === undefined) this.ⲆᐃΔ = 15;
			else this.ⲆᐃΔ = ⲆᐃΔ
		};

		function ⵠΔΔⵠⲆᐃⵠⲆᐃ(ᐃⵠⵠⵠ, ⵠΔⵠᐃΔΔᐃ, ᐃⵠΔΔᐃⵠΔ, Δⵠᐃᐃᐃ, ⵠⵠΔΔⵠΔᐃ) {
			var Δⵠᐃ = ⵠΔⵠᐃΔΔᐃ + Math.floor(ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get() * Δⵠᐃᐃᐃ);
			var ⲆΔΔ = ᐃⵠΔΔᐃⵠΔ + Math.floor(Δⵠᐃᐃᐃ * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
			var ᐃⵠᐃⵠ = ⲆᐃⲆⲆᐃ + Math.floor(ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get() * (ⲆⲆⲆ.ᐃⵠⲆΔΔ - Δⵠᐃ - 20));
			var ᐃⵠᐃΔ = 10 + Math.floor((ⲆⲆⲆ.ΔᐃⵠⵠⲆ - ⲆΔΔ - ᐃⵠⲆᐃΔ) * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
			var ΔⲆⵠⲆ = ᐃⵠᐃⵠ + Δⵠᐃ;
			var ⵠΔⲆⵠ = ᐃⵠᐃΔ + ⲆΔΔ;
			for (var Δᐃ = 0; Δᐃ < ⲆⲆⲆ.ⵠⵠᐃⲆ.length; Δᐃ++) {
				var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[Δᐃ];
				if (ⵠᐃΔᐃ.ΔΔᐃᐃⲆⵠⵠ(ᐃⵠᐃⵠ, ΔⲆⵠⲆ, ᐃⵠᐃΔ, ⵠΔⲆⵠ, ⲆΔΔⵠ.x1 / ⵠΔΔΔⲆ - ⵠⵠΔΔⵠΔᐃ, ⲆΔΔⵠ.x2 / ⲆᐃᐃΔᐃ + ⵠⵠΔΔⵠΔᐃ, ⲆΔΔⵠ.y1 / 100 - ⵠⵠΔΔⵠΔᐃ, ⲆΔΔⵠ.y2 / 100 + ⵠⵠΔΔⵠΔᐃ) === 1) return Ⲇᐃⵠⵠ
			}
			ⲆⲆⲆ.ⵠⵠᐃⲆ.push(new ⲆⲆⲆ.ⲆⲆᐃᐃⲆᐃΔ(ᐃⵠⵠⵠ, ᐃⵠᐃⵠ, ᐃⵠᐃΔ, Δⵠᐃ, ⲆΔΔ, 15));
			return 1
		}

		function ΔⲆⲆΔⲆⵠⲆⲆᐃ(ᐃⵠⵠⵠ, ⵠΔⵠᐃΔΔᐃ, ᐃⵠΔΔᐃⵠΔ, Δⵠᐃᐃᐃ, ⵠⵠⵠⲆⵠΔᐃ) {
			for (var Δᐃ = ⲆⲆᐃΔ; ⵠⵠⵠⲆⵠΔᐃ > Δᐃ; Δᐃ++) {
				if (ⵠΔΔⵠⲆᐃⵠⲆᐃ(ᐃⵠⵠⵠ, ⵠΔⵠᐃΔΔᐃ, ᐃⵠΔΔᐃⵠΔ, Δⵠᐃᐃᐃ, 8) === 1) break
			}
			if (ⵠⵠⵠⲆⵠΔᐃ === Δᐃ) return 0;
			return ⲆⲆⲆᐃ
		}

		function ΔⵠᐃΔᐃⵠᐃⵠⵠ(ᐃᐃⵠⲆⵠΔⵠ, ᐃⲆⵠⲆᐃ, ΔΔⵠⲆⲆ) {
			var stop = 0;
			var ⵠΔⲆᐃᐃ = ᐃⲆⵠⲆᐃ;
			for (var ΔΔⵠ = ΔΔⵠⲆⲆ; ΔΔⵠ < ⲆⲆⲆ.ΔᐃⵠⵠⲆ; ΔΔⵠ++) {
				for (var ΔΔ = ᐃⲆⵠⲆᐃ; ΔΔ < ⲆⲆⲆ.ᐃⵠⲆΔΔ; ΔΔ++) {
					ΔΔⵠⲆⲆ === ΔΔⵠ && (ⵠΔⲆᐃᐃ = Math.max(ΔΔ, ⵠΔⲆᐃᐃ));
					if (ⵠΔⲆᐃᐃ < ΔΔ) break;
					if (ᐃᐃⵠⲆⵠΔⵠ[ΔΔⵠ][ΔΔ] === ΔⲆΔᐃ) break;
					ᐃᐃⵠⲆⵠΔⵠ[ΔΔⵠ][ΔΔ] = 1
				}
				if (ⵠΔⲆᐃᐃ > ΔΔ) break
			}
			ⲆⲆⲆ.ⵠⵠᐃⲆ.push(new ⲆⲆⲆ.ⲆⲆᐃᐃⲆᐃΔ(ⲆⲆⲆ.ΔᐃⲆⵠⲆ, ᐃⲆⵠⲆᐃ, ΔΔⵠⲆⲆ, ⵠΔⲆᐃᐃ - ᐃⲆⵠⲆᐃ + ⵠΔΔ, ΔΔⵠ - ΔΔⵠⲆⲆ, 15))
		}
		this.ⲆⵠⲆᐃⲆ = -1e6;
		this.ⵠⲆⵠΔⵠ = this.ⲆⵠⲆᐃⲆ;
		this.ᐃⲆⲆⵠⵠ = this.ⲆⵠⲆᐃⲆ;
		this.ΔΔⲆΔᐃ = this.ⲆⵠⲆᐃⲆ;
		this.ⵠΔᐃᐃΔᐃⲆ = this.ⲆⵠⲆᐃⲆ;
		this.ΔⲆⲆⵠⲆᐃⵠ = this.ⲆⵠⲆᐃⲆ;
		this.ⵠⲆᐃⲆᐃ = this.ⲆⵠⲆᐃⲆ;
		this.ⵠᐃⵠᐃⵠΔⲆⵠⵠ = function(ΔⵠⵠΔ) {
			var ΔΔ = ΔⵠⵠΔ.r.x;
			var ΔΔⵠ = ΔⵠⵠΔ.r.y;
			var Δᐃ = Math.floor(ΔΔⵠ / ᐃΔⵠⵠⵠ);
			var ᐃΔⵠⵠ = Math.floor(ΔΔ / ⵠⲆᐃⵠⲆ);
			ΔⵠⵠΔ.ⵠⲆⵠΔⵠ = ⲆⲆⲆ.ⲆⵠⲆᐃⲆ;
			ΔⵠⵠΔ.ᐃⲆⲆⵠⵠ = ⲆⲆⲆ.ⲆⵠⲆᐃⲆ;
			ΔⵠⵠΔ.ΔΔⲆΔᐃ = ⲆⲆⲆ.ⲆⵠⲆᐃⲆ;
			ΔⵠⵠΔ.ⵠΔᐃᐃΔᐃⲆ = ⲆⲆⲆ.ⲆⵠⲆᐃⲆ;
			ΔⵠⵠΔ.ⵠⲆᐃⲆᐃ = ⲆⲆⲆ.ⲆⵠⲆᐃⲆ;
			ΔⵠⵠΔ.ΔⲆⲆᐃΔⵠΔ = ⲆⲆⲆ.ⲆⵠⲆᐃⲆ;
			for (var ΔΔᐃΔ = 0; ⲆⲆⲆ.ⵠⵠᐃⲆ[ΔΔᐃΔ].ΔⲆᐃ !== ⲆⲆⲆ.ΔᐃⲆⵠⲆ; ΔΔᐃΔ++) {
				if (ⲆⲆⲆ.ⵠⵠᐃⲆ[ΔΔᐃΔ].ΔⲆᐃ === ⲆⲆⲆ.ⵠΔⲆⵠᐃ) {
					var ⵠᐃᐃⲆⲆΔΔ = ⲆⲆⲆ.ⲆⵠⵠⵠΔ(ΔΔᐃΔ, ΔΔ, ΔΔⵠ);
					ΔⵠⵠΔ.ⵠΔᐃᐃΔᐃⲆ = Math.max(ΔⵠⵠΔ.ⵠΔᐃᐃΔᐃⲆ, ⵠᐃᐃⲆⲆΔΔ);
					0 < ⵠᐃᐃⲆⲆΔΔ && 1 === ⲆⲆⲆ.ⵠΔⵠⲆᐃⲆᐃΔⲆ(ΔΔᐃΔ, ΔΔ, ΔΔⵠ) && (ΔⵠⵠΔ.ΔⲆⲆᐃΔⵠΔ = ᐃⲆΔ)
				} else if (ⲆⲆⲆ.ⵠⵠᐃⲆ[ΔΔᐃΔ].ΔⲆᐃ === ⲆⲆⲆ.ᐃⵠⲆⲆⵠⵠⵠ) {
					ΔⵠⵠΔ.ⵠⲆⵠΔⵠ = Math.max(ΔⵠⵠΔ.ⵠⲆⵠΔⵠ, ⲆⲆⲆ.ⲆⵠⵠⵠΔ(ΔΔᐃΔ, ΔΔ, ΔΔⵠ))
				} else if (ⲆⲆⲆ.ⵠⲆΔΔⵠⲆⵠ === ⲆⲆⲆ.ⵠⵠᐃⲆ[ΔΔᐃΔ].ΔⲆᐃ) {
					ΔⵠⵠΔ.ᐃⲆⲆⵠⵠ = Math.max(ΔⵠⵠΔ.ᐃⲆⲆⵠⵠ, ⲆⲆⲆ.ⲆⵠⵠⵠΔ(ΔΔᐃΔ, ΔΔ, ΔΔⵠ))
				} else if (ⲆⲆⲆ.ΔᐃᐃⲆᐃⲆⲆ === ⲆⲆⲆ.ⵠⵠᐃⲆ[ΔΔᐃΔ].ΔⲆᐃ) {
					ΔⵠⵠΔ.ΔΔⲆΔᐃ = Math.max(ΔⵠⵠΔ.ΔΔⲆΔᐃ, ⲆⲆⲆ.ⲆⵠⵠⵠΔ(ΔΔᐃΔ, ΔΔ, ΔΔⵠ))
				} else ⲆⲆⲆ.ⵠⵠᐃⲆ[ΔΔᐃΔ].ΔⲆᐃ === ⲆⲆⲆ.ᐃⲆᐃᐃΔⵠⲆ && (ΔⵠⵠΔ.ⵠⲆᐃⲆᐃ = Math.max(ΔⵠⵠΔ.ⵠⲆᐃⲆᐃ, ⲆⲆⲆ.ⲆⵠⵠⵠΔ(ΔΔᐃΔ, ΔΔ, ΔΔⵠ)))
			}
			ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ][Δ[243]] && (ΔⵠⵠΔ.ΔⲆⲆᐃΔⵠΔ = 1);
			if (ⲆⲆⲆ.ΔΔΔΔⵠⲆⲆᐃⵠ(ᐃΔⵠⵠ, Δᐃ)) ΔⵠⵠΔ.ΔⲆⲆⵠⲆᐃⵠ = ΔⵠⵠΔ.ⲆⵠⲆᐃⲆ;
			else ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ][Δ[544]] || ΔⵠⵠΔ.ⵠⲆⵠΔⵠ < Δⵠⵠ && 0 > ΔⵠⵠΔ.ΔΔⲆΔᐃ && ⵠⲆⵠ > ΔⵠⵠΔ.ⵠΔᐃᐃΔᐃⲆ && ΔⵠⵠΔ.ΔⲆⲆᐃΔⵠΔ < 0 && ΔⵠⵠΔ.ⵠⲆᐃⲆᐃ < ⲆᐃⲆ && ΔⵠⵠΔ.ᐃⲆⲆⵠⵠ < ΔᐃΔ ? ΔⵠⵠΔ.ΔⲆⲆⵠⲆᐃⵠ = ⲆΔᐃ : ΔⵠⵠΔ.ΔⲆⲆⵠⲆᐃⵠ = ΔⵠⵠΔ.ⲆⵠⲆᐃⲆ
		};
		this.ΔΔΔⵠᐃᐃⵠᐃⵠ = function(ΔΔ, ΔΔⵠ) {
			ⲆⲆⲆ.ⵠⲆⵠΔⵠ = ⲆⲆⲆ.ⲆⵠⲆᐃⲆ;
			ⲆⲆⲆ.ᐃⲆⲆⵠⵠ = ⲆⲆⲆ.ⲆⵠⲆᐃⲆ;
			ⲆⲆⲆ.ΔΔⲆΔᐃ = ⲆⲆⲆ.ⲆⵠⲆᐃⲆ;
			ⲆⲆⲆ.ⵠⲆᐃⲆᐃ = ⲆⲆⲆ.ⲆⵠⲆᐃⲆ;
			ⲆⲆⲆ.ⵠΔᐃᐃΔᐃⲆ = ⲆⲆⲆ.ⲆⵠⲆᐃⲆ;
			for (var ΔΔᐃΔ = 0; ⲆⲆⲆ.ΔᐃⲆⵠⲆ !== ⲆⲆⲆ.ⵠⵠᐃⲆ[ΔΔᐃΔ].ΔⲆᐃ; ΔΔᐃΔ++) {
				if (ⲆⲆⲆ.ⵠΔⲆⵠᐃ === ⲆⲆⲆ.ⵠⵠᐃⲆ[ΔΔᐃΔ].ΔⲆᐃ) ⲆⲆⲆ.ⵠΔᐃᐃΔᐃⲆ = Math.max(ⲆⲆⲆ.ⵠΔᐃᐃΔᐃⲆ, ⲆⲆⲆ.ⲆⵠⵠⵠΔ(ΔΔᐃΔ, ΔΔ, ΔΔⵠ));
				else if (ⲆⲆⲆ.ᐃⵠⲆⲆⵠⵠⵠ === ⲆⲆⲆ.ⵠⵠᐃⲆ[ΔΔᐃΔ].ΔⲆᐃ) ⲆⲆⲆ.ⵠⲆⵠΔⵠ = Math.max(ⲆⲆⲆ.ⵠⲆⵠΔⵠ, ⲆⲆⲆ.ⲆⵠⵠⵠΔ(ΔΔᐃΔ, ΔΔ, ΔΔⵠ));
				else if (ⲆⲆⲆ.ⵠⲆΔΔⵠⲆⵠ === ⲆⲆⲆ.ⵠⵠᐃⲆ[ΔΔᐃΔ].ΔⲆᐃ) ⲆⲆⲆ.ᐃⲆⲆⵠⵠ = Math.max(ⲆⲆⲆ.ᐃⲆⲆⵠⵠ, ⲆⲆⲆ.ⲆⵠⵠⵠΔ(ΔΔᐃΔ, ΔΔ, ΔΔⵠ));
				else if (ⲆⲆⲆ.ΔᐃᐃⲆᐃⲆⲆ === ⲆⲆⲆ.ⵠⵠᐃⲆ[ΔΔᐃΔ].ΔⲆᐃ) {
					ⲆⲆⲆ.ΔΔⲆΔᐃ = Math.max(ⲆⲆⲆ.ΔΔⲆΔᐃ, ⲆⲆⲆ.ⲆⵠⵠⵠΔ(ΔΔᐃΔ, ΔΔ, ΔΔⵠ))
				} else if (ⲆⲆⲆ.ⵠⵠᐃⲆ[ΔΔᐃΔ].ΔⲆᐃ === ⲆⲆⲆ.ᐃⲆᐃᐃΔⵠⲆ) ⲆⲆⲆ.ⵠⲆᐃⲆᐃ = Math.max(ⲆⲆⲆ.ⵠⲆᐃⲆᐃ, ⲆⲆⲆ.ⲆⵠⵠⵠΔ(ΔΔᐃΔ, ΔΔ, ΔΔⵠ))
			}
			if (ⲆⲆⲆ.ⵠⲆⵠΔⵠ < Δⵠⵠ && ⵠᐃΔ > ⲆⲆⲆ.ⵠⲆᐃⲆᐃ && ⲆⲆⵠⲆ > ⲆⲆⲆ.ⵠΔᐃᐃΔᐃⲆ && ⲆⲆⲆ.ⵠⲆᐃⲆᐃ < 0 && ⲆⲆⲆ.ᐃⲆⲆⵠⵠ < Δⵠⵠ) ⲆⲆⲆ.ΔⲆⲆⵠⲆᐃⵠ = 1;
			else ⲆⲆⲆ.ΔⲆⲆⵠⲆᐃⵠ = ⲆⲆⲆ.ⲆⵠⲆᐃⲆ
		};
		this.ⵠΔⵠⲆᐃⲆᐃΔⲆ = function(ⲆΔⲆΔᐃⵠΔ, ΔΔ, ΔΔⵠ) {
			var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[ⲆΔⲆΔᐃⵠΔ];
			var ⲆΔⵠⵠΔⲆᐃ = 0;
			ᐃⵠᐃⵠ = ⲆΔΔⵠ.x1 + 30 + (ⲆΔⵠΔ === (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆⵠΔⲆΔ) ? 150 : 0);
			var ⵠⲆᐃⲆ = ΔΔ - ᐃⵠᐃⵠ;
			if ((ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆⵠΔⲆΔ) > 0 && 0 < ⵠⲆᐃⲆ && 320 > ⵠⲆᐃⲆ) ⲆΔⵠⵠΔⲆᐃ = 1;
			ᐃⵠᐃΔ = ⲆΔΔⵠ.y1 + 250 + (0 === (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ᐃΔᐃᐃᐃ) ? 150 : ⲆΔⵠΔ);
			ⵠⲆᐃⲆ = ΔΔⵠ - ᐃⵠᐃΔ;
			if (ⵠⵠΔᐃ < (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ᐃΔᐃᐃᐃ) && ΔᐃΔ < ⵠⲆᐃⲆ && ⵠⲆᐃⲆ < 320) ⲆΔⵠⵠΔⲆᐃ = 1;
			ΔⲆⵠⲆ = ⲆΔΔⵠ.x2 + 80 + (0 === (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆᐃⵠΔᐃ) ? -200 : 0);
			ⵠⲆᐃⲆ = ΔⲆⵠⲆ - ΔΔ;
			if (ⵠⵠΔᐃ < (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ⲆᐃⵠΔᐃ) && ᐃΔΔ < ⵠⲆᐃⲆ && ⵠⲆᐃⲆ < 320) ⲆΔⵠⵠΔⲆᐃ = 1;
			ⵠΔⲆⵠ = ⲆΔΔⵠ.y2 - 200 + (ⵠⲆⵠ === (ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ΔⲆᐃⲆᐃ) ? -200 : 0);
			ⵠⲆᐃⲆ = ⵠΔⲆⵠ - ΔΔⵠ;
			(ⲆΔΔⵠ.ⲆᐃΔ & ⵠΔᐃⲆ.ΔⲆᐃⲆᐃ) > ⵠΔⵠⲆ && ⵠⲆᐃ < ⵠⲆᐃⲆ && ⵠⲆᐃⲆ < 320 && (ⲆΔⵠⵠΔⲆᐃ = 1);
			if (ΔΔ >= ᐃⵠᐃⵠ && ΔΔ <= ΔⲆⵠⲆ && ΔΔⵠ >= ᐃⵠᐃΔ && ⵠΔⲆⵠ >= ΔΔⵠ) return ⲆΔⵠⵠΔⲆᐃ;
			return ⲆⲆⵠⲆ
		};
		this.ⲆⵠⵠⵠΔ = function(ⲆΔⲆΔᐃⵠΔ, ΔΔ, ΔΔⵠ) {
			var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[ⲆΔⲆΔᐃⵠΔ];
			ᐃⵠᐃⵠ = ⲆΔΔⵠ.x1 + 30;
			ᐃⵠᐃΔ = ⲆΔΔⵠ.y1 + 250;
			ΔⲆⵠⲆ = ⲆΔΔⵠ.x2 + 80;
			ⵠΔⲆⵠ = ⲆΔΔⵠ.y2 - 200;
			if (ᐃⵠᐃⵠ <= ΔΔ && ΔⲆⵠⲆ >= ΔΔ && ΔΔⵠ >= ᐃⵠᐃΔ && ⵠΔⲆⵠ >= ΔΔⵠ) return Math.min(ΔΔ - ᐃⵠᐃⵠ, ΔⲆⵠⲆ - ΔΔ, ΔΔⵠ - ᐃⵠᐃΔ, ⵠΔⲆⵠ - ΔΔⵠ);
			var ᐃⲆΔⵠ = -1e6;
			if (ⵠΔⵠⲆ > ΔΔ - ᐃⵠᐃⵠ) ᐃⲆΔⵠ = Math.max(ᐃⲆΔⵠ, ΔΔ - ᐃⵠᐃⵠ);
			else if (ΔⲆⵠⲆ - ΔΔ < 0) ᐃⲆΔⵠ = Math.max(ᐃⲆΔⵠ, ΔⲆⵠⲆ - ΔΔ);
			ΔⲆⵠⲆⵠⲆⲆ = -1e6;
			if (ᐃⵠᐃΔ > ΔΔⵠ || ΔΔⵠ > ⵠΔⲆⵠ) {
				if (ΔΔⵠ - ᐃⵠᐃΔ < 0) ΔⲆⵠⲆⵠⲆⲆ = Math.max(ΔⲆⵠⲆⵠⲆⲆ, ΔΔⵠ - ᐃⵠᐃΔ);
				else ΔⲆⵠⲆⵠⲆⲆ = Math.max(ΔⲆⵠⲆⵠⲆⲆ, ⵠΔⲆⵠ - ΔΔⵠ);
				if (ᐃⲆΔⵠ !== -1e6 && ΔⲆⵠⲆⵠⲆⲆ !== -1e6) ᐃⲆΔⵠ = Math.min(ᐃⲆΔⵠ, ΔⲆⵠⲆⵠⲆⲆ);
				else ᐃⲆΔⵠ = ΔⲆⵠⲆⵠⲆⲆ
			}
			return ᐃⲆΔⵠ
		};

		function ⲆᐃᐃᐃⵠⲆⵠ(ⵠᐃΔⵠ, ΔⲆᐃᐃⲆ) {
			for (var ΔΔᐃΔ = Δⵠⵠ; ΔΔᐃΔ < ΔⲆᐃᐃⲆ.length; ΔΔᐃΔ++) {
				var ΔⵠΔΔ = ΔⲆᐃᐃⲆ[ΔΔᐃΔ][0];
				var ⵠᐃⲆⲆ = ΔⲆᐃᐃⲆ[ΔΔᐃΔ][Δᐃᐃ];
				var ⲆⵠⲆⵠᐃΔᐃ = ΔⲆᐃᐃⲆ[ΔΔᐃΔ][ⲆᐃᐃΔ];
				ᐃΔΔⲆⵠⲆΔΔΔ(ΔⵠΔΔ, ⵠᐃⲆⲆ, ⵠᐃΔⵠ, ⲆⵠⲆⵠᐃΔᐃ)
			}
		}

		function ⵠⵠⵠⲆⵠᐃᐃ(Δᐃ, ᐃΔⵠⵠ, ⲆⲆᐃΔⲆ, ⵠⵠⲆⵠᐃⵠⵠⵠⵠ, ᐃⲆΔⲆΔΔΔⵠⲆ, ΔⲆᐃᐃⲆ, Δⵠᐃ, ⲆΔΔ) {
			var w1 = Math.floor(Δⵠᐃ / 2);
			var w2 = Math.max(ⵠΔΔ, Math.floor(Δⵠᐃ / 2));
			var ⵠΔⵠⲆⲆⵠⲆΔⵠ = Math.floor(ⲆΔΔ / 2);
			var ᐃᐃⲆᐃⵠ = Math.max(1, Math.floor(ⲆΔΔ / ⲆⲆⵠᐃ));
			for (var ΔΔᐃΔ = 0; ⲆⲆᐃΔⲆ > ΔΔᐃΔ; ΔΔᐃΔ++) {
				for (var ΔⵠΔΔ = Δᐃ - ⵠΔⵠⲆⲆⵠⲆΔⵠ; ΔⵠΔΔ < Δᐃ + ᐃᐃⲆᐃⵠ; ΔⵠΔΔ++) {
					for (var ⵠᐃⲆⲆ = ᐃΔⵠⵠ - w1; ᐃΔⵠⵠ + w2 > ⵠᐃⲆⲆ; ⵠᐃⲆⲆ++) {
						if (ᐃⵠΔᐃ(ΔⵠΔΔ, ⵠᐃⲆⲆ, Δ[544], ΔᐃΔ, ⵠⵠᐃ) === ⵠⲆⲆⲆ) ΔⲆᐃᐃⲆ.push([ΔⵠΔΔ, ⵠᐃⲆⲆ, 1])
					}
				}
				Δᐃ += ⵠⵠⲆⵠᐃⵠⵠⵠⵠ;
				ᐃΔⵠⵠ += ᐃⲆΔⲆΔΔΔⵠⲆ
			}
		}

		function ⵠⲆⵠⲆΔⲆᐃ(ⵠᐃΔⵠ, ΔⲆᐃᐃⲆ) {
			var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[ⵠᐃΔⵠ];
			var Δᐃ = Math.floor(ⲆΔΔⵠ.y1 / ⵠⲆᐃⵠⲆ);
			var ᐃΔⵠⵠ = Math.floor(ⲆΔΔⵠ.x1 / 100);
			var ⲆΔΔ = Math.floor(ⲆΔΔⵠ.ⲆΔΔ / 100);
			var Δⵠᐃ = Math.floor(ⲆΔΔⵠ.w / ΔⲆΔΔΔ);
			var ΔⵠΔⲆⵠⵠΔⵠᐃ = Δᐃ + ⲆΔΔ;
			var ⲆᐃⲆᐃΔᐃⵠⵠΔ = ᐃΔⵠⵠ + Δⵠᐃ;
			var ⲆΔⵠΔᐃᐃⲆ = 2;
			var ᐃᐃᐃⲆⲆ = ⲆΔΔ;
			var ΔⵠΔΔ = Δᐃ;
			var ⵠᐃⲆⲆ = ᐃΔⵠⵠ + ΔⲆⲆΔΔ + Math.floor((Δⵠᐃ - 20) * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
			for (var ⵠⵠⲆΔⵠ = ⵠᐃⲆⲆ - 4; ⵠⵠⲆΔⵠ < ⵠᐃⲆⲆ + ᐃⵠⲆⲆ; ⵠⵠⲆΔⵠ++) ᐃⵠΔᐃ(Δᐃ - 1, ⵠⵠⲆΔⵠ, Δ[544], 0, 1);
			while (ᐃᐃᐃⲆⲆ > Ⲇᐃⵠⵠ) {
				if (2 === ⲆΔⵠΔᐃᐃⲆ) {
					for (var ΔΔᐃΔ = 10; ΔⲆΔᐃ < ΔΔᐃΔ; ΔΔᐃΔ--) {
						ⵠⵠⵠⲆⵠᐃᐃ(ΔⵠΔΔ, ⵠᐃⲆⲆ, ⲆΔᐃΔ, ⵠⵠᐃ, ⵠᐃⵠⵠ, ΔⲆᐃᐃⲆ, ΔΔᐃΔ, ᐃΔⵠΔ);
						ᐃᐃᐃⲆⲆ -= ᐃΔⵠΔ;
						ΔⵠΔΔ += ΔⵠⲆ
					}
					ⲆΔⵠΔᐃᐃⲆ = 0;
					continue
				}
				if (10 > ᐃᐃᐃⲆⲆ) {
					for (var ΔΔᐃΔ = 1; ᐃᐃᐃⲆⲆ > ΔΔⲆⲆ; ΔΔᐃΔ++) {
						ⵠⵠⵠⲆⵠᐃᐃ(ΔⵠΔΔ, ⵠᐃⲆⲆ, ⵠΔΔ, 1, ⵠⲆᐃ, ΔⲆᐃᐃⲆ, ΔΔᐃΔ, ⵠⵠⵠΔ);
						ᐃᐃᐃⲆⲆ -= ⵠΔΔ;
						ΔⵠΔΔ += 1
					}
					continue
				}
				if (ⲆΔⵠΔᐃᐃⲆ === 1) {
					var ᐃΔⲆⲆᐃⵠⲆ = Math.min(ᐃᐃᐃⲆⲆ, Math.floor(1 + 4 * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get()));
					var Δⵠᐃ = 1 + Math.floor(4 * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
					ⵠⵠⵠⲆⵠᐃᐃ(ΔⵠΔΔ, ⵠᐃⲆⲆ, ᐃΔⲆⲆᐃⵠⲆ, ⲆⵠⲆ, 0, ΔⲆᐃᐃⲆ, Δⵠᐃ, Δⵠᐃ);
					ⲆΔⵠΔᐃᐃⲆ = ⵠⲆᐃ;
					ᐃᐃᐃⲆⲆ -= ᐃΔⲆⲆᐃⵠⲆ;
					ΔⵠΔΔ += ᐃΔⲆⲆᐃⵠⲆ;
					continue
				}
				ⲆΔⵠΔᐃᐃⲆ = ⲆⲆⲆᐃ;
				var ⲆⵠⵠⲆⵠ = Math.floor(ᐃΔⵠΔ + ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get() * 2);
				var ᐃⲆᐃⲆⲆⵠᐃ = 1 + Math.floor(ⲆⵠⵠⲆ * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
				if (ᐃΔⵠⵠ + ⲆⵠⲆᐃᐃΔⵠ > ⵠᐃⲆⲆ) {
					ⵠⵠⵠⲆⵠᐃᐃ(ΔⵠΔΔ, ⵠᐃⲆⲆ, ⲆⵠⵠⲆⵠ, 0, 1, ΔⲆᐃᐃⲆ, ᐃⲆᐃⲆⲆⵠᐃ, ᐃⲆᐃⲆⲆⵠᐃ);
					ⵠᐃⲆⲆ += ⲆⵠⵠⲆⵠ
				} else if (ⵠᐃⲆⲆ > ⲆᐃⲆᐃΔᐃⵠⵠΔ - ᐃⲆⲆᐃΔ) {
					ⵠⵠⵠⲆⵠᐃᐃ(ΔⵠΔΔ, ⵠᐃⲆⲆ, ⲆⵠⵠⲆⵠ, 0, -Δᐃᐃ, ΔⲆᐃᐃⲆ, ᐃⲆᐃⲆⲆⵠᐃ, ᐃⲆᐃⲆⲆⵠᐃ);
					ⵠᐃⲆⲆ -= ⲆⵠⵠⲆⵠ
				} else ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get() > .5 ? (ⵠⵠⵠⲆⵠᐃᐃ(ΔⵠΔΔ, ⵠᐃⲆⲆ, ⲆⵠⵠⲆⵠ, 0, ⲆⵠⲆ, ΔⲆᐃᐃⲆ, ᐃⲆᐃⲆⲆⵠᐃ, ᐃⲆᐃⲆⲆⵠᐃ), ⵠᐃⲆⲆ += ⲆⵠⵠⲆⵠ) : (ⵠⵠⵠⲆⵠᐃᐃ(ΔⵠΔΔ, ⵠᐃⲆⲆ, ⲆⵠⵠⲆⵠ, ⲆⲆᐃΔ, -1, ΔⲆᐃᐃⲆ, ᐃⲆᐃⲆⲆⵠᐃ, ᐃⲆᐃⲆⲆⵠᐃ), ⵠᐃⲆⲆ -= ⲆⵠⵠⲆⵠ)
			}
			for (var ⵠⵠⲆΔⵠ = ⵠᐃⲆⲆ - ΔⲆΔᐃ; ⵠⵠⲆΔⵠ < ⵠᐃⲆⲆ + ⲆⲆᐃⲆ; ⵠⵠⲆΔⵠ++) ᐃⵠΔᐃ(ΔⵠΔΔ, ⵠⵠⲆΔⵠ, Δ[544], 0, 1)
		}

		function ⲆΔᐃᐃΔⲆᐃᐃᐃ(ΔⲆΔⵠ, ⵠᐃΔⵠ) {
			var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[ⵠᐃΔⵠ];
			for (var ΔΔᐃΔ = ⲆⲆⵠⲆ, ᐃᐃΔΔⵠ = 0; ΔⲆΔⵠ > ΔΔᐃΔ && ᐃᐃΔΔⵠ < 1e4; ᐃᐃΔΔⵠ++) {
				var ΔΔⵠ = ⲆΔΔⵠ.y1 + ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get() * ⲆΔΔⵠ.ⲆΔΔ;
				var ΔΔ = ⲆΔΔⵠ.x1 + ⲆΔΔⵠ.w * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get();
				var ΔⵠΔΔ = Math.floor(ΔΔⵠ / 100);
				var ⵠᐃⲆⲆ = Math.floor(ΔΔ / ᐃⵠᐃⲆⵠ);
				var ᐃⲆΔⵠ = ⲆⲆⲆ.ⲆⵠⵠⵠΔ(ⵠᐃΔⵠ, ⵠᐃΔᐃⵠ * ⵠᐃⲆⲆ + 50, ΔⵠΔΔ * Δᐃⵠⵠⵠ + 50);
				if (600 > ᐃⲆΔⵠ) continue;
				var ok = ⵠⲆⲆⲆ;
				for (var Δᐃ = ΔⵠΔΔ - 4; ok === ΔⲆΔᐃ && ΔⵠΔΔ + 4 >= Δᐃ; Δᐃ++) {
					for (var ᐃΔⵠⵠ = ⵠᐃⲆⲆ - ᐃΔⲆΔⲆ; ok === 1 && ⵠᐃⲆⲆ + 4 >= ᐃΔⵠⵠ; ᐃΔⵠⵠ++) {
						ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ] !== ᐃⵠⲆⵠⲆ && (ok = 0)
					}
				}
				if (ok === ⵠᐃⵠⵠ) continue;
				ᐃⵠΔᐃ(ΔⵠΔΔ, ⵠᐃⲆⲆ, Δ[526], ΔΔᐃΔ % 6, 0);
				ΔΔᐃΔ++
			}
		}

		function ᐃΔⲆⲆᐃΔᐃⲆᐃ(ⵠᐃΔⵠ, ΔⲆᐃᐃⲆ) {
			var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[ⵠᐃΔⵠ];
			var Δᐃ = Math.floor(ⲆΔΔⵠ.y1 / 100);
			var ᐃΔⵠⵠ = Math.floor(ⲆΔΔⵠ.x1 / ⵠⲆᐃⵠⲆ);
			var ⲆΔΔ = Math.floor(ⲆΔΔⵠ.ⲆΔΔ / ⵠᐃⵠⲆⲆ);
			var Δⵠᐃ = Math.floor(ⲆΔΔⵠ.w / ⵠⲆⲆⵠⲆ);
			var ᐃᐃⲆᐃⵠ = Δᐃ + Math.floor(ⲆΔΔ / 2);
			var w2 = ᐃΔⵠⵠ + Math.floor(Δⵠᐃ / ᐃΔⲆⵠ);
			for (var ΔΔᐃΔ = ⵠⲆⵠ; ΔΔᐃΔ < 3; ΔΔᐃΔ++) {
				var ΔⵠΔΔ = Math.floor(ᐃᐃⲆᐃⵠ - 3 + ᐃΔⵠⲆⵠ * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
				var ⵠᐃⲆⲆ = Math.floor(w2 - 3 + ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get() * 6);
				ᐃⵠΔᐃ(ΔⵠΔΔ, ⵠᐃⲆⲆ, Δ[218], ΔΔᐃΔ, ⵠⲆⲆⲆ)
			}
			for (var ΔΔᐃΔ = 0; ΔΔᐃΔ < 80; ΔΔᐃΔ++) {
				var ΔⵠΔΔ = Math.floor(ᐃᐃⲆᐃⵠ - ΔⲆΔΔ + ⵠΔⲆⵠⲆ * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
				var ⵠᐃⲆⲆ = Math.floor(w2 - 3 + 6 * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
				1 === ᐃⵠΔᐃ(ΔⵠΔΔ, ⵠᐃⲆⲆ, Δ[544], ⵠΔⵠⲆ, 1) && ΔⲆᐃᐃⲆ.push([ΔⵠΔΔ, ⵠᐃⲆⲆ, 0])
			}
		}
		this.ΔⵠⵠⲆⵠⵠⵠ = function(ᐃⵠⵠⵠ, ΔΔ, ΔΔⵠ) {
			var ΔⵠΔΔ = ΔΔⵠ;
			var ⵠᐃⲆⲆ = ΔΔ;
			ᐃⵠΔᐃ(ΔⵠΔΔ, ⵠᐃⲆⲆ, Δ[361], ᐃⵠⵠⵠ, 1);
			for (var ΔΔᐃΔ = ⵠⲆᐃ; ΔΔᐃΔ < ΔᐃΔΔ; ΔΔᐃΔ++) {
				for (var ⲆⲆⲆΔ = 0; 3 > ⲆⲆⲆΔ; ⲆⲆⲆΔ++) {
					ᐃⵠΔᐃ(ΔⵠΔΔ - ⲆⲆⲆΔ, ⵠᐃⲆⲆ - ΔΔᐃΔ, Δ[243], 0);
					ᐃⵠΔᐃ(ΔⵠΔΔ + ⲆⲆⲆΔ, ⵠᐃⲆⲆ - ΔΔᐃΔ, Δ[243], ⵠⵠΔΔ);
					ᐃⵠΔᐃ(ΔⵠΔΔ + ⲆⲆⲆΔ, ⵠᐃⲆⲆ + ΔΔᐃΔ, Δ[243], 0);
					ᐃⵠΔᐃ(ΔⵠΔΔ - ⲆⲆⲆΔ, ⵠᐃⲆⲆ + ΔΔᐃΔ, Δ[243], 0)
				}
			}
			if (ᐃⵠⵠⵠ === ⵠΔΔᐃ) {
				for (var ΔΔᐃΔ = 0; ᐃⲆᐃⵠ > ΔΔᐃΔ; ΔΔᐃΔ++) {
					ᐃⵠΔᐃ(ΔⵠΔΔ - ΔΔᐃΔ, ⵠᐃⲆⲆ - ᐃΔⲆΔⲆ, Δ[243], 0);
					ᐃⵠΔᐃ(ΔⵠΔΔ + ΔΔᐃΔ, ⵠᐃⲆⲆ - 4, Δ[243], ⵠⲆⵠ);
					ᐃⵠΔᐃ(ΔⵠΔΔ - ΔΔᐃΔ, ⵠᐃⲆⲆ + 4, Δ[243], 0);
					ᐃⵠΔᐃ(ΔⵠΔΔ + ΔΔᐃΔ, ⵠᐃⲆⲆ + ⲆⲆᐃΔᐃ, Δ[243], ⵠⲆᐃ)
				}
				for (var ΔΔᐃΔ = 0; ΔΔᐃΔ < 3; ΔΔᐃΔ++) {
					ᐃⵠΔᐃ(ΔⵠΔΔ - ⲆΔⲆΔ, ⵠᐃⲆⲆ + ΔΔᐃΔ, Δ[243], 0);
					ᐃⵠΔᐃ(ΔⵠΔΔ + Ⲇⵠᐃᐃ, ⵠᐃⲆⲆ + ΔΔᐃΔ, Δ[243], 0);
					ᐃⵠΔᐃ(ΔⵠΔΔ - ᐃΔᐃⲆ, ⵠᐃⲆⲆ - ΔΔᐃΔ, Δ[243], ⵠᐃⵠⵠ);
					ᐃⵠΔᐃ(ΔⵠΔΔ + 3, ⵠᐃⲆⲆ - ΔΔᐃΔ, Δ[243], 0)
				}
				ᐃⵠΔᐃ(ΔⵠΔΔ - ⲆⲆΔΔ, ⵠᐃⲆⲆ - 4, Δ[243], ⵠⲆⵠ);
				ᐃⵠΔᐃ(ΔⵠΔΔ - 3, ⵠᐃⲆⲆ - ᐃΔᐃⲆ, Δ[243], ᐃⲆⵠΔ);
				ᐃⵠΔᐃ(ΔⵠΔΔ + 2, ⵠᐃⲆⲆ + 4, Δ[243], ⲆⲆⵠⲆ);
				ᐃⵠΔᐃ(ΔⵠΔΔ + 3, ⵠᐃⲆⲆ + ⵠΔⲆⲆ, Δ[243], ⵠⲆⵠ)
			} else if (ⵠⵠᐃ === ᐃⵠⵠⵠ) {
				for (var ΔΔᐃΔ = ᐃⲆⵠΔ; ᐃⵠⲆⵠ > ΔΔᐃΔ; ΔΔᐃΔ++) {
					ᐃⵠΔᐃ(ΔⵠΔΔ - ΔΔᐃΔ, ⵠᐃⲆⲆ - 4, Δ[243], 0);
					ᐃⵠΔᐃ(ΔⵠΔΔ + ΔΔᐃΔ, ⵠᐃⲆⲆ - 4, Δ[243], ⲆᐃⲆ);
					ᐃⵠΔᐃ(ΔⵠΔΔ - ΔΔᐃΔ, ⵠᐃⲆⲆ + 4, Δ[243], ⲆᐃⲆ);
					ᐃⵠΔᐃ(ΔⵠΔΔ + ΔΔᐃΔ, ⵠᐃⲆⲆ + 4, Δ[243], ⵠᐃΔⲆ)
				}
				for (var ΔΔᐃΔ = 0; ⲆⵠⲆⲆⲆ > ΔΔᐃΔ; ΔΔᐃΔ++) {
					ᐃⵠΔᐃ(ΔⵠΔΔ - Ⲇⵠᐃᐃ, ⵠᐃⲆⲆ + ΔΔᐃΔ, Δ[243], ⵠᐃΔ);
					ᐃⵠΔᐃ(ΔⵠΔΔ + ⵠΔⲆΔΔ, ⵠᐃⲆⲆ + ΔΔᐃΔ, Δ[243], ⵠᐃⵠⵠ);
					ᐃⵠΔᐃ(ΔⵠΔΔ - 3, ⵠᐃⲆⲆ - ΔΔᐃΔ, Δ[243], ⲆⲆⵠⲆ);
					ᐃⵠΔᐃ(ΔⵠΔΔ + 3, ⵠᐃⲆⲆ - ΔΔᐃΔ, Δ[243], ΔᐃΔ)
				}
			} else if (ⵠΔᐃΔᐃ === ᐃⵠⵠⵠ) {
				for (var ΔΔᐃΔ = ⵠⲆᐃ; 2 > ΔΔᐃΔ; ΔΔᐃΔ++) {
					ᐃⵠΔᐃ(ΔⵠΔΔ - ΔΔᐃΔ, ⵠᐃⲆⲆ - 4, Δ[243], ΔᐃΔ);
					ᐃⵠΔᐃ(ΔⵠΔΔ + ΔΔᐃΔ, ⵠᐃⲆⲆ - ⲆΔⲆᐃΔ, Δ[243], 0);
					ᐃⵠΔᐃ(ΔⵠΔΔ - ΔΔᐃΔ, ⵠᐃⲆⲆ + ΔⵠⲆᐃ, Δ[243], ⲆΔⵠΔ);
					ᐃⵠΔᐃ(ΔⵠΔΔ + ΔΔᐃΔ, ⵠᐃⲆⲆ + ⲆⵠⵠⲆ, Δ[243], ᐃΔΔ)
				}
				for (var ΔΔᐃΔ = ⵠᐃΔ; ΔΔᐃΔ < 3; ΔΔᐃΔ++) {
					ᐃⵠΔᐃ(ΔⵠΔΔ - ⵠΔⲆΔΔ, ⵠᐃⲆⲆ + ΔΔᐃΔ, Δ[243], ⲆᐃⲆ);
					ᐃⵠΔᐃ(ΔⵠΔΔ + 3, ⵠᐃⲆⲆ + ΔΔᐃΔ, Δ[243], 0);
					ᐃⵠΔᐃ(ΔⵠΔΔ - 3, ⵠᐃⲆⲆ - ΔΔᐃΔ, Δ[243], 0);
					ᐃⵠΔᐃ(ΔⵠΔΔ + 3, ⵠᐃⲆⲆ - ΔΔᐃΔ, Δ[243], 0)
				}
			}
		};
		this.ᐃⵠᐃⵠⲆⲆⵠᐃⲆ = function(ΔⲆΔⵠ) {
			for (var Δᐃ = 0; ⲆⲆⲆ.ⵠⵠᐃⲆ.length > Δᐃ && 0 < ΔⲆΔⵠ; Δᐃ++) {
				var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[Δᐃ];
				if (ⲆⲆⲆ.ΔᐃⲆⵠⲆ !== ⲆΔΔⵠ.ΔⲆᐃ) continue;
				if (1800 < ⲆΔΔⵠ.w && ⲆΔΔⵠ.ⲆΔΔ > 1e3) {
					var ⵠᐃⲆⲆ = Math.floor((ⲆΔΔⵠ.x1 + ⲆΔΔⵠ.w / ᐃΔⲆⵠ) / 100);
					var ΔⵠΔΔ = Math.floor((ⲆΔΔⵠ.y1 + ⲆΔΔⵠ.ⲆΔΔ / ⵠΔᐃⵠ) / 100);
					ⲆⲆⲆ.ΔⵠⵠⲆⵠⵠⵠ(ΔⲆΔⵠ % 3, ⵠᐃⲆⲆ, ΔⵠΔΔ);
					for (var ΔΔᐃΔ = Ⲇᐃⵠⵠ; ΔΔᐃΔ < 3; ΔΔᐃΔ++) {
						var ΔΔΔⵠⵠⵠᐃ = ΔⵠΔΔ - 2 + Math.floor(ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get() * ᐃᐃⲆⵠ);
						var ⵠⵠⲆΔⵠ = ⵠᐃⲆⲆ - 3 + Math.floor(ⵠⵠⵠᐃⵠ * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
						ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[ΔΔΔⵠⵠⵠᐃ][ⵠⵠⲆΔⵠ]["s"] === ΔᐃᐃⵠⲆ && ᐃⵠΔᐃ(ΔΔΔⵠⵠⵠᐃ, ⵠⵠⲆΔⵠ, Δ[218], ΔΔᐃΔ);
						var ΔΔΔⵠⵠⵠᐃ = ΔⵠΔΔ - ⵠΔᐃⵠ + Math.floor(ΔⵠⲆⵠⲆ * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
						var ⵠⵠⲆΔⵠ = ⵠᐃⲆⲆ - ΔΔⲆᐃ + Math.floor(6 * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
						undefined === ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[ΔΔΔⵠⵠⵠᐃ][ⵠⵠⲆΔⵠ][Δ[218]] && ᐃⵠΔᐃ(ΔΔΔⵠⵠⵠᐃ, ⵠⵠⲆΔⵠ, "s", ΔΔᐃΔ)
					}
					var ΔΔΔⵠⵠⵠᐃ = ΔⵠΔΔ - ΔⲆᐃⲆ + Math.floor(ⵠᐃΔΔΔ * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
					var ⵠⵠⲆΔⵠ = ⵠᐃⲆⲆ - ᐃⲆᐃⲆ + Math.floor(ᐃΔⲆⵠⵠ * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
					ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[ΔΔΔⵠⵠⵠᐃ][ⵠⵠⲆΔⵠ][Δ[218]] === undefined && ᐃⲆᐃΔⵠ === ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[ΔΔΔⵠⵠⵠᐃ][ⵠⵠⲆΔⵠ]["s"] && ᐃⵠΔᐃ(ΔΔΔⵠⵠⵠᐃ, ⵠⵠⲆΔⵠ, "p", Ⲇᐃⵠⵠ, ᐃⲆΔ);
					ΔⲆΔⵠ--
				}
			}
		};
		this.ⵠⵠⲆᐃΔᐃⲆⲆⲆ = function(ⵠⲆⵠⲆᐃ) {
			ⲆⲆⲆ.ⵠᐃⵠΔⵠ.ΔⲆᐃᐃⵠ(ⵠⲆⵠⲆᐃ);
			var ⵠⵠⵠⲆⵠΔᐃ = 0;
			while (ⲆΔⲆⵠ) {
				ⵠⵠⵠⲆⵠΔᐃ++;
				if (1e4 < ⵠⵠⵠⲆⵠΔᐃ) return;
				ⲆⲆⲆ.ⵠⵠᐃⲆ = [];
				if (ⲆⲆⲆ.ᐃΔⵠΔⲆ === 0 && (ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ΔᐃΔⲆᐃ || ⵠΔᐃⲆ.ⲆᐃⲆᐃᐃ === ⲆⲆⲆ.mode || ⵠΔᐃⲆ.ᐃᐃΔⲆⲆ === ⲆⲆⲆ.mode)) ⲆⲆⲆ.ᐃΔⵠΔⲆ = ᐃⵠΔⲆᐃⲆⵠ;
				if (ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ === ⲆⲆⲆ.mode) {
					ⲆⲆⲆ.ⵠⵠᐃⲆ.push(new ⲆⲆⲆ.ⲆⲆᐃᐃⲆᐃΔ(ⲆⲆⲆ.ⵠΔⲆⵠᐃ, 2, 2, 80, 80, 15))
				} else if (ⵠΔᐃⲆ.ⵠΔΔⲆⵠ === ⲆⲆⲆ.mode) {
					ⲆⲆⲆ.ⵠⵠᐃⲆ.push(new ⲆⲆⲆ.ⲆⲆᐃᐃⲆᐃΔ(ⲆⲆⲆ.ⵠΔⲆⵠᐃ, ⲆᐃᐃΔ, 2, 150, 150, 15))
				} else {
					if (ⲆⲆⵠⲆ !== ⲆⲆⲆ.ᐃΔⵠΔⲆ && ⲆⲆⲆ.ᐃΔⵠΔⲆ.length > ⵠᐃΔⲆ && ⲆⲆⲆ.ᐃΔⵠΔⲆ[ⵠᐃⵠⵠ].length > ⵠᐃⲆᐃ) {
						for (var ⵠⵠᐃⵠ = Ⲇᐃⵠⵠ; ⲆⲆⲆ.ᐃΔⵠΔⲆ.length > ⵠⵠᐃⵠ; ⵠⵠᐃⵠ++) {
							var ⲆⲆⲆⲆΔ = ⲆⲆⲆ.ᐃΔⵠΔⲆ[ⵠⵠᐃⵠ];
							if (ⲆⲆⲆⲆΔ[0] === 0) {
								var ᐃⲆΔᐃᐃ = ⵠΔᐃⲆ.ⵠΔⲆⵠᐃ;
								switch (ⲆⲆⲆⲆΔ[ⵠⵠⵠΔ]) {
									case "FOREST":
										ᐃⲆΔᐃᐃ = ⲆⲆⲆ.ⵠΔⲆⵠᐃ;
										break;
									case "WINTER":
										ᐃⲆΔᐃᐃ = ⲆⲆⲆ.ᐃⵠⲆⲆⵠⵠⵠ;
										break;
									case "DESERT":
										ᐃⲆΔᐃᐃ = ⲆⲆⲆ.ⵠⲆΔΔⵠⲆⵠ;
										break;
									case "LAVA":
										ᐃⲆΔᐃᐃ = ⲆⲆⲆ.ΔᐃᐃⲆᐃⲆⲆ;
										break;
									case "DRAGON":
										ᐃⲆΔᐃᐃ = ⲆⲆⲆ.ᐃⲆᐃᐃΔⵠⲆ;
										break
								}
								ⲆⲆⲆ.ⵠⵠᐃⲆ.push(new ⲆⲆⲆ.ⲆⲆᐃᐃⲆᐃΔ(ᐃⲆΔᐃᐃ, ⲆⲆⲆⲆΔ[ΔⲆⲆⵠ], ⲆⲆⲆⲆΔ[ⵠᐃⲆᐃ], ⲆⲆⲆⲆΔ[ᐃᐃⲆⵠ], ⲆⲆⲆⲆΔ[5], ⲆⲆⲆⲆΔ[ΔΔᐃⵠⵠ], ⲆⲆⲆⲆΔ[ΔᐃⲆΔᐃ]));
								continue
							} else break
						}
					} else if (0 !== ⲆⲆⲆ.ᐃΔⵠΔⲆ) {
						for (var ⵠⵠᐃⵠ = Ⲇᐃⵠⵠ; ⵠⵠᐃⵠ < ⲆⲆⲆ.ᐃΔⵠΔⲆ.length; ⵠⵠᐃⵠ++) {
							var ⲆΔΔⵠ = ⲆⲆⲆ.ᐃΔⵠΔⲆ[ⵠⵠᐃⵠ];
							var ᐃⲆΔᐃᐃ = ⵠΔᐃⲆ.ⵠΔⲆⵠᐃ;
							switch (ⲆΔΔⵠ[0]) {
								case "FOREST":
									ᐃⲆΔᐃᐃ = ⲆⲆⲆ.ⵠΔⲆⵠᐃ;
									break;
								case "WINTER":
									ᐃⲆΔᐃᐃ = ⲆⲆⲆ.ᐃⵠⲆⲆⵠⵠⵠ;
									break;
								case "DESERT":
									ᐃⲆΔᐃᐃ = ⲆⲆⲆ.ⵠⲆΔΔⵠⲆⵠ;
									break;
								case "LAVA":
									ᐃⲆΔᐃᐃ = ⲆⲆⲆ.ΔᐃᐃⲆᐃⲆⲆ;
									break;
								case "DRAGON":
									ᐃⲆΔᐃᐃ = ⲆⲆⲆ.ᐃⲆᐃᐃΔⵠⲆ;
									break
							}
							if (ᐃΔΔ === ΔⲆⲆΔⲆⵠⲆⲆᐃ(ᐃⲆΔᐃᐃ, ⲆΔΔⵠ[1], ⲆΔΔⵠ[ⵠΔᐃΔᐃ], ⵠᐃΔⲆ, (ⵠⵠᐃⵠ + 1) * ⲆΔⲆᐃⵠ)) break
						}
						if (ⵠⵠᐃⵠ !== ⲆⲆⲆ.ᐃΔⵠΔⲆ.length) continue
					}
				}
				break
			}
			ᐃΔⲆᐃᐃᐃⲆⵠΔ();
			var ᐃᐃⵠⲆⵠΔⵠ = [];
			for (var Δᐃ = ⵠⵠΔΔ; Δᐃ < ⲆⲆⲆ.ΔᐃⵠⵠⲆ; Δᐃ++) {
				ᐃᐃⵠⲆⵠΔⵠ[Δᐃ] = new Array(ⲆⲆⲆ.ᐃⵠⲆΔΔ);
				for (var ᐃΔⵠⵠ = ⵠⲆⵠ; ⲆⲆⲆ.ᐃⵠⲆΔΔ > ᐃΔⵠⵠ; ᐃΔⵠⵠ++) ᐃᐃⵠⲆⵠΔⵠ[Δᐃ][ᐃΔⵠⵠ] = ΔΔⲆⲆ
			}
			for (var Δᐃ = 0; ⲆⲆⲆ.ⵠⵠᐃⲆ.length > Δᐃ; Δᐃ++) {
				var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[Δᐃ];
				var ΔⲆⵠⲆ = ⲆΔΔⵠ.x2 / 100;
				var ⵠΔⲆⵠ = ⲆΔΔⵠ.y2 / 100;
				for (var ΔΔ = ⲆΔΔⵠ.x1 / 100; ΔΔ <= ΔⲆⵠⲆ; ΔΔ++) {
					for (var ΔΔⵠ = ⲆΔΔⵠ.y1 / ᐃᐃⲆⵠΔ; ⵠΔⲆⵠ >= ΔΔⵠ; ΔΔⵠ++) ᐃᐃⵠⲆⵠΔⵠ[ΔΔⵠ][ΔΔ] = 1
				}
			}
			for (var ΔΔⵠ = 0; ⲆⲆⲆ.ΔᐃⵠⵠⲆ > ΔΔⵠ; ΔΔⵠ++) {
				for (var ΔΔ = 0; ⲆⲆⲆ.ᐃⵠⲆΔΔ > ΔΔ; ΔΔ++) {
					ᐃᐃⵠⲆⵠΔⵠ[ΔΔⵠ][ΔΔ] === ⲆᐃⲆ && ΔⵠᐃΔᐃⵠᐃⵠⵠ(ᐃᐃⵠⲆⵠΔⵠ, ΔΔ, ΔΔⵠ)
				}
			}
			ᐃⵠᐃⵠᐃ = {
				w: ⲆⲆⲆ.ᐃⵠⲆΔΔ,
				"ⲆΔΔ": ⲆⲆⲆ.ΔᐃⵠⵠⲆ,
				"Ⲇᐃⵠᐃ": []
			};
			for (var Δᐃ = 0; ⲆⲆⲆ.ΔᐃⵠⵠⲆ > Δᐃ; Δᐃ++) ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ] = [];
			if (0 !== ⲆⲆⲆ.ᐃΔⵠΔⲆ && ⲆᐃⲆ < ⲆⲆⲆ.ᐃΔⵠΔⲆ.length && ᐃⵠᐃⲆ < ⲆⲆⲆ.ᐃΔⵠΔⲆ[0].length) {
				for (var ⵠⵠᐃⵠ = ⲆⲆᐃΔ; ⵠⵠᐃⵠ < ⲆⲆⲆ.ᐃΔⵠΔⲆ.length; ⵠⵠᐃⵠ++) {
					var ⲆⲆⲆⲆΔ = ⲆⲆⲆ.ᐃΔⵠΔⲆ[ⵠⵠᐃⵠ];
					Δ[361] === ⲆⲆⲆⲆΔ[ⲆΔⲆⵠ] && ⲆⲆⲆ.ΔⵠⵠⲆⵠⵠⵠ(ⲆⲆⲆⲆΔ[ⵠΔᐃⵠ], ⲆⲆⲆⲆΔ[ΔΔⲆᐃ], ⲆⲆⲆⲆΔ[ⲆΔⵠᐃΔ])
				}
			} else ⲆⲆⲆ.ᐃⵠᐃⵠⲆⲆⵠᐃⲆ(ⲆⲆⲆ.ⵠⲆⲆⵠΔⵠᐃ);
			if (0 !== ⲆⲆⲆ.ᐃΔⵠΔⲆ && ᐃⲆⵠΔ < ⲆⲆⲆ.ᐃΔⵠΔⲆ.length && ⲆⲆⲆ.ᐃΔⵠΔⲆ[0].length > 3) {
				var ΔⲆᐃᐃⲆ = [];
				for (var ⵠⵠᐃⵠ = 0; ⲆⲆⲆ.ᐃΔⵠΔⲆ.length > ⵠⵠᐃⵠ; ⵠⵠᐃⵠ++) {
					var ⲆⲆⲆⲆΔ = ⲆⲆⲆ.ᐃΔⵠΔⲆ[ⵠⵠᐃⵠ];
					if (ⲆⲆⲆⲆΔ[0] !== ᐃΔⵠΔ) continue;
					if (ⲆⲆⲆⲆΔ[1] === "r") {
						ᐃⵠΔᐃ(ⲆⲆⲆⲆΔ[3], ⲆⲆⲆⲆΔ[2], Δ[544], ⲆΔⵠΔ, ᐃⵠⵠ);
						ΔⲆᐃᐃⲆ.push([ⲆⲆⲆⲆΔ[ᐃᐃΔⵠ], ⲆⲆⲆⲆΔ[ᐃᐃᐃᐃ], ⲆⲆⲆⲆΔ[4]])
					} else ᐃⵠΔᐃ(ⲆⲆⲆⲆΔ[ᐃᐃⲆⵠ], ⲆⲆⲆⲆΔ[3], ⲆⲆⲆⲆΔ[ⲆⵠΔⲆ], ⲆⲆⲆⲆΔ[2], ⲆⲆⲆⲆΔ[ΔΔⵠΔ])
				}
				ⲆᐃᐃᐃⵠⲆⵠ(0, ΔⲆᐃᐃⲆ);
				ΔⲆᐃᐃⲆ = []
			} else {
				for (var Δᐃ = 0; ⲆⲆⲆ.ⵠⵠᐃⲆ.length > Δᐃ; Δᐃ++) {
					var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[Δᐃ];
					if (ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ⵠΔΔⲆⵠ) {
						if (ⲆⲆⲆ.ⵠΔⲆⵠᐃ === ⲆΔΔⵠ.ΔⲆᐃ) ⵠΔⲆΔⲆⲆⵠⵠᐃ(Δᐃ, ⲆΔΔⵠ.w / (100 * 100))
					} else {
						if (ⲆΔΔⵠ.ΔⲆᐃ === ⲆⲆⲆ.ⵠΔⲆⵠᐃ) ⵠⵠΔΔᐃⲆᐃᐃΔ(Δᐃ, ⲆΔΔⵠ.w / (100 * ΔⲆΔΔΔ));
						if (ⲆΔΔⵠ.ΔⲆᐃ === ⲆⲆⲆ.ΔᐃᐃⲆᐃⲆⲆ) ⵠᐃⵠⲆΔΔⵠᐃⵠ(Δᐃ, ⲆΔΔⵠ.w / (Δᐃⵠⵠⵠ * 100));
						ⲆⲆⲆ.ᐃⵠⲆⲆⵠⵠⵠ === ⲆΔΔⵠ.ΔⲆᐃ && ⵠⵠⲆⵠⲆⲆⲆΔⲆ(Δᐃ, ⲆΔΔⵠ.w / (100 * ⵠᐃⵠⲆⲆ));
						ⲆΔΔⵠ.ΔⲆᐃ === ⲆⲆⲆ.ⵠⲆΔΔⵠⲆⵠ && ΔⵠᐃΔⵠⵠᐃᐃΔ(Δᐃ, ⲆΔΔⵠ.w / (ⵠⲆᐃⵠⲆ * ᐃⲆᐃᐃΔΔⲆ));
						ⲆⲆⲆ.ᐃⲆᐃᐃΔⵠⲆ === ⲆΔΔⵠ.ΔⲆᐃ && ᐃΔᐃᐃᐃⲆΔⲆΔ(Δᐃ)
					}
				}
			}
			ⵠⵠⲆᐃΔΔⲆΔᐃ();
			ⲆⲆⲆ.ᐃᐃⵠΔⲆⲆⵠᐃΔ(ᐃⵠᐃⵠᐃ)
		};

		function ΔⵠᐃΔⵠⵠᐃᐃΔ(ⵠᐃΔⵠ, ⲆⲆᐃΔⲆ) {
			for (var Δᐃ = 0; Δᐃ < ⲆΔΔⲆ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "s", Δᐃ, Math.floor(ⲆⲆᐃΔⲆ * 12));
			for (var Δᐃ = ⵠᐃΔ; Δᐃ < 3; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "m", Δᐃ, Math.max(1, Math.floor(ⲆⲆᐃΔⲆ * ⵠΔᐃ)), .2);
			ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "c", ⵠⲆΔⵠ, Math.floor(36 * ⲆⲆᐃΔⲆ));
			var ΔⲆᐃᐃⲆ = [];
			ᐃΔⲆⲆᐃΔᐃⲆᐃ(ⵠᐃΔⵠ, ΔⲆᐃᐃⲆ);
			ⲆᐃᐃᐃⵠⲆⵠ(ⵠᐃΔⵠ, ΔⲆᐃᐃⲆ);
			ΔⲆᐃᐃⲆ = []
		}

		function ᐃΔΔⲆⵠⲆΔΔΔ(Δᐃ, ᐃΔⵠⵠ, ⵠᐃΔⵠ, ⲆⵠⲆⵠᐃΔᐃ) {
			if (!ⲆᐃΔΔⲆᐃⵠ(Δᐃ, ᐃΔⵠⵠ)) return;
			Ⲇᐃⵠᐃ = ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ;
			Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ] === undefined && (Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ] = {});
			if (Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ]["r"] !== ⵠᐃΔⵠΔ) return;
			var ᐃᐃΔⲆΔ = ⵠⲆΔⵠ;
			ⲆᐃΔΔⲆᐃⵠ(Δᐃ - ⲆⵠΔⲆ, ᐃΔⵠⵠ) && undefined !== Ⲇᐃⵠᐃ[Δᐃ - ΔΔⲆΔ][ᐃΔⵠⵠ] && undefined !== Ⲇᐃⵠᐃ[Δᐃ - 1][ᐃΔⵠⵠ][Δ[544]] && (ᐃᐃΔⲆΔ += ⲆⲆⵠᐃ);
			if (ⲆᐃΔΔⲆᐃⵠ(Δᐃ, ᐃΔⵠⵠ - Δᐃᐃ) && Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ - 1] !== undefined && Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ - 1][Δ[544]] !== undefined) ᐃᐃΔⲆΔ += 8;
			if (ⲆᐃΔΔⲆᐃⵠ(Δᐃ, ᐃΔⵠⵠ + 1) && undefined !== Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ + ⵠⵠᐃ] && undefined !== Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ + ⵠⵠⵠΔ][Δ[544]]) ᐃᐃΔⲆΔ += ⵠⲆᐃᐃⵠⵠᐃ;
			ⲆᐃΔΔⲆᐃⵠ(Δᐃ + 1, ᐃΔⵠⵠ) && Ⲇᐃⵠᐃ[Δᐃ + 1][ᐃΔⵠⵠ] !== ΔⵠΔⲆⲆ && Ⲇᐃⵠᐃ[Δᐃ + ᐃⵠⵠ][ᐃΔⵠⵠ][Δ[544]] !== ⵠᐃΔⵠΔ && (ᐃᐃΔⲆΔ += 64);
			ⲆᐃΔΔⲆᐃⵠ(Δᐃ - 1, ᐃΔⵠⵠ - ⲆⲆⲆᐃ) && (ᐃᐃΔⲆΔ & 8 + ᐃⵠΔⲆ) === 8 + 2 && Ⲇᐃⵠᐃ[Δᐃ - ⵠⵠᐃ][ᐃΔⵠⵠ - 1] !== undefined && ⲆΔⲆⵠⲆ !== Ⲇᐃⵠᐃ[Δᐃ - ᐃⲆΔ][ᐃΔⵠⵠ - 1][Δ[544]] && (ᐃᐃΔⲆΔ += 1);
			ⲆᐃΔΔⲆᐃⵠ(Δᐃ - ᐃⵠⵠ, ᐃΔⵠⵠ + 1) && (ᐃᐃΔⲆΔ & 16 + ⲆᐃᐃΔ) === ΔⵠⵠⲆΔᐃΔ + 2 && undefined !== Ⲇᐃⵠᐃ[Δᐃ - 1][ᐃΔⵠⵠ + ⲆΔᐃΔ] && undefined !== Ⲇᐃⵠᐃ[Δᐃ - ⵠΔΔ][ᐃΔⵠⵠ + 1][Δ[544]] && (ᐃᐃΔⲆΔ += ⵠΔΔⵠ);
			if (ⲆᐃΔΔⲆᐃⵠ(Δᐃ + ᐃⲆⲆ, ᐃΔⵠⵠ - 1) && (ᐃᐃΔⲆΔ & ΔΔⲆⵠⵠ + 64) === ᐃᐃΔⵠΔᐃΔ + 64 && Ⲇᐃⵠᐃ[Δᐃ + 1][ᐃΔⵠⵠ - ⵠⲆⲆⲆ] !== ⲆᐃⵠⲆⲆ && Ⲇᐃⵠᐃ[Δᐃ + ΔⵠⲆ][ᐃΔⵠⵠ - 1][Δ[544]] !== undefined) ᐃᐃΔⲆΔ += 32;
			if (ⲆᐃΔΔⲆᐃⵠ(Δᐃ + ΔⲆΔᐃ, ᐃΔⵠⵠ + ⲆΔᐃΔ) && ᐃᐃⵠᐃⵠᐃᐃ + 64 === (ᐃᐃΔⲆΔ & ΔⵠⵠⲆΔᐃΔ + 64) && ΔΔᐃⵠΔ !== Ⲇᐃⵠᐃ[Δᐃ + ⲆΔⲆⵠ][ᐃΔⵠⵠ + ⵠΔᐃ] && undefined !== Ⲇᐃⵠᐃ[Δᐃ + ⵠⵠᐃ][ᐃΔⵠⵠ + 1][Δ[544]]) ᐃᐃΔⲆΔ += 128;
			Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ]["r"] = {};
			Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ]["r"].ᐃᐃⲆⵠⲆⵠⵠ = ᐃᐃΔⲆΔ;
			Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ]["r"].ⲆⵠⲆⵠᐃΔᐃ = ⲆⵠⲆⵠᐃΔᐃ;
			Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ]["r"].ᐃⲆΔⵠ = ⲆⲆⲆ.ⲆⵠⵠⵠΔ(ⵠᐃΔⵠ, 100 * ᐃΔⵠⵠ + 50, 100 * Δᐃ + 50) - 400;
			Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ]["r"]["x"] = 100 * ᐃΔⵠⵠ + 50;
			Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ]["r"]["y"] = Δᐃ * ᐃΔⵠⵠⵠ + 50
		}

		function ᐃⵠΔᐃ(Δᐃ, ᐃΔⵠⵠ, ᐃⵠⵠⵠ, ΔⲆⵠⲆΔ, ⵠⲆΔᐃᐃᐃⲆⵠⲆ) {
			if (0 > Δᐃ || 0 > ᐃΔⵠⵠ || Δᐃ >= ⲆⲆⲆ.ΔᐃⵠⵠⲆ || ᐃΔⵠⵠ >= ⲆⲆⲆ.ᐃⵠⲆΔΔ) return;
			Ⲇᐃⵠᐃ = ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ;
			if (ⲆⲆΔᐃⵠ === Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ]) Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ] = {};
			if (Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ][ᐃⵠⵠⵠ] !== undefined) return ⲆᐃⲆ;
			Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ][ᐃⵠⵠⵠ] = [];
			Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ][ᐃⵠⵠⵠ][ΔⲆⵠⲆΔ] = [{
				x: 100 * ᐃΔⵠⵠ + 50,
				y: Δᐃ * 100 + 50
			}];
			ⵠⲆΔᐃᐃᐃⲆⵠⲆ === 1 && ⵠⲆΔΔⲆⵠᐃΔᐃ(ᐃⵠⵠⵠ, ΔⲆⵠⲆΔ, Δᐃ, ᐃΔⵠⵠ);
			return 1
		}

		function ⵠⵠⲆᐃᐃⵠⵠ(ⵠᐃΔⵠ) {
			var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[ⵠᐃΔⵠ];
			ᐃⵠΔᐃ(-3 + Math.floor(ⲆΔΔⵠ.y2 / 100), -ΔⲆΔᐃ + Math.floor(ⲆΔΔⵠ.x2 / ᐃⵠᐃΔᐃ), "s", ⵠΔⵠⲆ, ΔᐃΔ);
			ᐃⵠΔᐃ(ΔⲆΔΔ + Math.floor(ⲆΔΔⵠ.y1 / 100), -ⲆΔᐃΔ + Math.floor(ⲆΔΔⵠ.x2 / ⵠᐃΔⲆᐃ), "s", ΔΔⲆⲆ, 0);
			ᐃⵠΔᐃ(-ⵠᐃⵠΔ + Math.floor(ⲆΔΔⵠ.y2 / 100), 1 + Math.floor(ⲆΔΔⵠ.x1 / ⵠᐃⵠⲆⵠ), "s", 0, 0);
			ᐃⵠΔᐃ(3 + Math.floor(ⲆΔΔⵠ.y1 / 100), ⲆΔᐃΔ + Math.floor(ⲆΔΔⵠ.x1 / ᐃⵠᐃⲆⵠ), "s", 0, 0)
		}

		function ⲆᐃΔΔⲆᐃⵠ(Δᐃ, ᐃΔⵠⵠ) {
			return Δᐃ >= 0 && ᐃΔⵠⵠ >= ⵠΔΔᐃ && Δᐃ < ⲆⲆⲆ.ΔᐃⵠⵠⲆ && ᐃΔⵠⵠ < ⲆⲆⲆ.ᐃⵠⲆΔΔ
		}

		function ⵠⵠⲆⵠⲆⲆⲆΔⲆ(ⵠᐃΔⵠ, ⲆⲆᐃΔⲆ) {
			for (var Δᐃ = 0; 3 > Δᐃ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "s", Δᐃ, Math.floor(18 * ⲆⲆᐃΔⲆ));
			for (var Δᐃ = 0; Δᐃ < ᐃᐃΔⵠ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "f", Δᐃ, Math.floor(ⲆⲆᐃΔⲆ * 24));
			for (var Δᐃ = 0; Δᐃ < 3; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "d", Δᐃ, Math.max(ⲆⲆⲆᐃ, Math.floor(ⲆⲆᐃΔⲆ * 2)), .3);
			for (var Δᐃ = ⵠⲆΔⵠ; ⵠΔⲆⲆ > Δᐃ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "g", Δᐃ, Math.floor(ⲆⲆᐃΔⲆ * 6));
			ⵠⵠⲆᐃᐃⵠⵠ(ⵠᐃΔⵠ)
		}

		function ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, ᐃⵠⵠⵠ, ΔⲆⵠⲆΔ, ΔⲆΔⵠ, ᐃΔⲆΔᐃᐃΔ) {
			var ⲆΔΔⵠ = ⲆⲆⲆ.ⵠⵠᐃⲆ[ⵠᐃΔⵠ];
			var ΔΔ = Math.floor(ⲆΔΔⵠ.x1 / ⵠΔΔΔⲆ);
			var ΔΔⵠ = Math.floor(ⲆΔΔⵠ.y1 / 100);
			var Δⵠᐃ = Math.floor(ⲆΔΔⵠ.w / ᐃⵠⲆⲆⲆ);
			var ⲆΔΔ = Math.floor(ⲆΔΔⵠ.ⲆΔΔ / 100);
			ᐃΔⲆΔᐃᐃΔ !== ⲆᐃⵠΔⵠ && (ᐃΔⲆΔᐃᐃΔ = ⲆΔⲆⵠ - ᐃΔⲆΔᐃᐃΔ, ΔΔ += Math.floor(ᐃΔⲆΔᐃᐃΔ * Δⵠᐃ / ΔΔᐃᐃ), ΔΔⵠ += Math.floor(ⲆΔΔ * ᐃΔⲆΔᐃᐃΔ / 2), Δⵠᐃ -= Math.floor(Δⵠᐃ * ᐃΔⲆΔᐃᐃΔ), ⲆΔΔ -= Math.floor(ᐃΔⲆΔᐃᐃΔ * ⲆΔΔ));
			var Ⲇᐃⵠᐃ = ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ;
			for (var ΔΔᐃΔ = ⵠⲆᐃ, ⲆⲆⲆΔ = 0; ΔⲆΔⵠ > ΔΔᐃΔ; ⲆⲆⲆΔ++) {
				if (5e4 < ⲆⲆⲆΔ) break;
				var Δᐃ = ΔΔⵠ + Math.floor(ⲆΔΔ * ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get());
				var ᐃΔⵠⵠ = ΔΔ + Math.floor(ⲆⲆⲆ.ⵠᐃⵠΔⵠ.get() * Δⵠᐃ);
				var ᐃⲆΔⵠ = ⲆⲆⲆ.ⲆⵠⵠⵠΔ(ⵠᐃΔⵠ, ΔⲆᐃⵠⵠ * ᐃΔⵠⵠ + 50, Δᐃ * 100 + 50);
				if (ᐃⲆΔⵠ < 400) continue;
				var ΔⲆⵠΔ = Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ + ΔΔⲆΔ];
				if (ΔⲆⵠΔ !== ⲆⲆΔᐃⵠ && ΔⵠΔⲆⲆ !== ΔⲆⵠΔ[ᐃⵠⵠⵠ] && ΔⲆⵠΔ[ᐃⵠⵠⵠ][ΔⲆⵠⲆΔ] !== undefined) continue;
				var ΔⲆⵠΔ = Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ - 1];
				if (ⲆᐃⵠΔⵠ !== ΔⲆⵠΔ && undefined !== ΔⲆⵠΔ[ᐃⵠⵠⵠ] && undefined !== ΔⲆⵠΔ[ᐃⵠⵠⵠ][ΔⲆⵠⲆΔ]) continue;
				var ΔⲆⵠΔ = Ⲇᐃⵠᐃ[Δᐃ + 1][ᐃΔⵠⵠ];
				if (ⲆⲆⲆⲆⲆ !== ΔⲆⵠΔ && ΔⲆⵠΔ[ᐃⵠⵠⵠ] !== undefined && undefined !== ΔⲆⵠΔ[ᐃⵠⵠⵠ][ΔⲆⵠⲆΔ]) continue;
				var ΔⲆⵠΔ = Ⲇᐃⵠᐃ[Δᐃ - 1][ᐃΔⵠⵠ];
				if (ΔⲆⵠΔ !== undefined && ΔⲆⵠΔ[ᐃⵠⵠⵠ] !== ΔⵠΔⲆⲆ && ΔⲆⵠΔ[ᐃⵠⵠⵠ][ΔⲆⵠⲆΔ] !== undefined) continue;
				var ΔⲆⵠΔ = Ⲇᐃⵠᐃ[Δᐃ + 1][ᐃΔⵠⵠ - ⵠⵠⵠΔ];
				if (ΔⵠΔⲆⲆ !== ΔⲆⵠΔ && ⲆΔⲆⵠⲆ !== ΔⲆⵠΔ[ᐃⵠⵠⵠ] && ΔⲆⵠΔ[ᐃⵠⵠⵠ][ΔⲆⵠⲆΔ] !== undefined) continue;
				var ΔⲆⵠΔ = Ⲇᐃⵠᐃ[Δᐃ - ᐃΔⵠΔ][ᐃΔⵠⵠ + ⲆΔⲆⵠ];
				if (undefined !== ΔⲆⵠΔ && ΔⲆⵠΔ[ᐃⵠⵠⵠ] !== ΔᐃᐃⵠⲆ && ΔⲆⵠΔ[ᐃⵠⵠⵠ][ΔⲆⵠⲆΔ] !== ⲆΔⲆⵠⲆ) continue;
				var ΔⲆⵠΔ = Ⲇᐃⵠᐃ[Δᐃ + 1][ᐃΔⵠⵠ + 1];
				if (ⲆᐃⵠΔⵠ !== ΔⲆⵠΔ && ᐃⵠΔΔΔ !== ΔⲆⵠΔ[ᐃⵠⵠⵠ] && ΔⲆⵠΔ[ᐃⵠⵠⵠ][ΔⲆⵠⲆΔ] !== undefined) continue;
				var ΔⲆⵠΔ = Ⲇᐃⵠᐃ[Δᐃ - 1][ᐃΔⵠⵠ - ⵠΔⲆ];
				if (undefined !== ΔⲆⵠΔ && ⲆᐃⵠⲆⲆ !== ΔⲆⵠΔ[ᐃⵠⵠⵠ] && undefined !== ΔⲆⵠΔ[ᐃⵠⵠⵠ][ΔⲆⵠⲆΔ]) continue;
				if (undefined === Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ]) {
					ᐃⵠΔᐃ(Δᐃ, ᐃΔⵠⵠ, ᐃⵠⵠⵠ, ΔⲆⵠⲆΔ, 1);
					ΔΔᐃΔ++
				}
			}
		}

		function ⵠⵠΔΔᐃⲆᐃᐃΔ(ⵠᐃΔⵠ, ⲆⲆᐃΔⲆ) {
			for (var Δᐃ = 0; Δᐃ < 6; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "t", Δᐃ, Math.floor(ⲆⲆᐃΔⲆ * 20));
			for (var Δᐃ = 0; ᐃᐃⲆⵠ > Δᐃ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "b", Δᐃ, Math.floor(20 * ⲆⲆᐃΔⲆ));
			for (var Δᐃ = 0; Δᐃ < ⲆΔⲆΔ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "s", Δᐃ, Math.floor(20 * ⲆⲆᐃΔⲆ));
			var ΔⲆᐃᐃⲆ = [];
			ⵠⲆⵠⲆΔⲆᐃ(ⵠᐃΔⵠ, ΔⲆᐃᐃⲆ);
			ⲆᐃᐃᐃⵠⲆⵠ(ⵠᐃΔⵠ, ΔⲆᐃᐃⲆ);
			ΔⲆᐃᐃⲆ = [];
			ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "p", ᐃΔΔ, Math.floor(ⲆⲆᐃΔⲆ * 24));
			for (var Δᐃ = ⵠᐃΔ; Δᐃ < 3; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "g", Δᐃ, Math.floor(ⲆⲆᐃΔⲆ * ⵠᐃᐃΔᐃ));
			if (ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ === ⲆⲆⲆ.mode) {
				for (var Δᐃ = ⲆᐃⲆ; Δᐃ < ⲆΔΔⲆ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "d", Δᐃ, Math.floor(ᐃⲆᐃⲆ * ⲆⲆᐃΔⲆ));
				for (var Δᐃ = ᐃΔΔ; Δᐃ < 3; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "a", Δᐃ, Math.floor(2 * ⲆⲆᐃΔⲆ))
			}
			ⵠⵠⲆᐃᐃⵠⵠ(ⵠᐃΔⵠ)
		}

		function ᐃΔᐃᐃᐃⲆΔⲆΔ(ⵠᐃΔⵠ) {
			for (var Δᐃ = 0; ᐃⲆᐃⲆ > Δᐃ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "s", Δᐃ, 15);
			for (var Δᐃ = ⵠⵠΔΔ; 3 > Δᐃ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "a", Δᐃ, ⲆⵠΔⲆ);
			for (var Δᐃ = 0; 3 > Δᐃ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "d", Δᐃ, 1);
			ⵠⵠⲆᐃᐃⵠⵠ(ⵠᐃΔⵠ)
		}

		function ⵠΔⲆΔⲆⲆⵠⵠᐃ(ⵠᐃΔⵠ, ⲆⲆᐃΔⲆ) {
			for (var Δᐃ = ⵠΔⵠⲆ; 6 > Δᐃ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "t", Δᐃ, Math.floor(ⲆⲆᐃΔⲆ * 80));
			for (var Δᐃ = 0; ᐃᐃΔΔ > Δᐃ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "b", Δᐃ, Math.floor(80 * ⲆⲆᐃΔⲆ));
			for (var Δᐃ = 0; 3 > Δᐃ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "s", Δᐃ, Math.floor(ⲆⲆᐃΔⲆ * 50));
			var ΔⲆᐃᐃⲆ = [];
			for (var Δᐃ = ⵠⵠΔΔ; 6 > Δᐃ; Δᐃ++) ⵠⲆⵠⲆΔⲆᐃ(ⵠᐃΔⵠ, ΔⲆᐃᐃⲆ);
			ⲆᐃᐃᐃⵠⲆⵠ(ⵠᐃΔⵠ, ΔⲆᐃᐃⲆ);
			ΔⲆᐃᐃⲆ = [];
			ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "p", ΔᐃΔ, Math.floor(28 * ⲆⲆᐃΔⲆ));
			for (var Δᐃ = 0; Δᐃ < 3; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "g", Δᐃ, Math.floor(7 * ⲆⲆᐃΔⲆ));
			for (var Δᐃ = ⵠⲆⵠ; Δᐃ < 3; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "d", Δᐃ, Math.floor(ⲆⲆᐃΔⲆ * ᐃⵠΔⲆ));
			for (var Δᐃ = 0; Δᐃ < 3; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "a", Δᐃ, Math.floor(ΔⵠⲆ * ⲆⲆᐃΔⲆ));
			for (var Δᐃ = 0; Δᐃ < ⵠⵠⵠⵠ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "m", Δᐃ, Math.floor(ⲆⲆᐃΔⲆ * 1));
			ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "a", 0, Math.floor(ⲆⲆᐃΔⲆ * ⲆⲆⲆᐃ));
			ⵠⵠⲆᐃᐃⵠⵠ(ⵠᐃΔⵠ)
		}

		function ⵠᐃⵠⲆΔΔⵠᐃⵠ(ⵠᐃΔⵠ, ⲆⲆᐃΔⲆ) {
			ⲆΔᐃᐃΔⲆᐃᐃᐃ(80 * ⲆⲆᐃΔⲆ, ⵠᐃΔⵠ);
			for (var Δᐃ = ΔΔⲆⲆ; Δᐃ < 3; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "s", Δᐃ, Math.floor(ᐃᐃΔᐃⲆ * ⲆⲆᐃΔⲆ));
			for (var Δᐃ = 0; 3 > Δᐃ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "g", Δᐃ, Math.floor(ᐃⲆⵠⲆⲆ * ⲆⲆᐃΔⲆ));
			for (var Δᐃ = ᐃΔΔ; Δᐃ < 3; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, Δ[156], Δᐃ, Math.max(1, Math.floor(ΔΔⲆΔ * ⲆⲆᐃΔⲆ)), .2);
			for (var Δᐃ = ⵠⲆⵠ; Δᐃ < ΔΔⲆᐃ; Δᐃ++) ⲆΔⵠⵠⲆ(ⵠᐃΔⵠ, "a", Δᐃ, Math.max(ⵠΔΔ, Math.floor(Δᐃᐃⵠ * ⲆⲆᐃΔⲆ)));
			ⵠⵠⲆᐃᐃⵠⵠ(ⵠᐃΔⵠ)
		}
		this.ᐃⵠΔᐃ = ᐃⵠΔᐃ;

		function ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, ᐃΔⲆ, ⲆⲆᐃᐃ) {
			if (ΔⲆⵠΔ[ᐃΔⲆ]) {
				for (ΔΔᐃΔ = Ⲇᐃⵠⵠ; ΔΔᐃΔ < ΔⲆⵠΔ[ᐃΔⲆ].length; ΔΔᐃΔ++) {
					if (!ΔⲆⵠΔ[ᐃΔⲆ][ΔΔᐃΔ]) continue;
					for (ⲆⲆⲆΔ = 0; ⲆⲆⲆΔ < ΔⲆⵠΔ[ᐃΔⲆ][ΔΔᐃΔ].length; ⲆⲆⲆΔ++) {
						ΔⲆⵠΔ[ᐃΔⲆ][ΔΔᐃΔ][ⲆⲆⲆΔ].ᐃⲆⵠ = ⲆⲆᐃᐃ;
						ΔⲆⵠΔ[ᐃΔⲆ][ΔΔᐃΔ][ⲆⲆⲆΔ].ᐃᐃⵠ = false;
						ΔⲆⵠΔ[ᐃΔⲆ][ΔΔᐃΔ][ⲆⲆⲆΔ].time = 0;
						ΔⲆⵠΔ[ᐃΔⲆ][ΔΔᐃΔ][ⲆⲆⲆΔ].angle = ⵠⵠΔᐃ
					}
				}
			}
		}
		this.ᐃᐃⵠΔⲆⲆⵠᐃΔ = function(ᐃⵠᐃⵠᐃ) {
			for (var Δᐃ = 0; this.ΔᐃⵠⵠⲆ > Δᐃ; Δᐃ++) {
				for (var ᐃΔⵠⵠ = 0; this.ᐃⵠⲆΔΔ > ᐃΔⵠⵠ; ᐃΔⵠⵠ++) {
					if (!ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ]) ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ] = [];
					if (!ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ]) {
						ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ] = [];
						continue
					}
					var ΔⲆⵠΔ = ᐃⵠᐃⵠᐃ.Ⲇᐃⵠᐃ[Δᐃ][ᐃΔⵠⵠ];
					if (ΔⲆⵠΔ[Δ[66]] && ⵠᐃΔⲆ < ΔⲆⵠΔ[Δ[66]].length) {
						for (var ΔΔᐃΔ = 0; ΔΔᐃΔ < ΔⲆⵠΔ[Δ[66]].length; ΔΔᐃΔ++) {
							if (ΔⲆⵠΔ[Δ[66]][ΔΔᐃΔ] && ⵠⲆΔⵠ < ΔⲆⵠΔ[Δ[66]][ΔΔᐃΔ].length) {
								ΔⲆⵠΔ[Δ[66]] = ΔⲆⵠΔ[Δ[66]][ΔΔᐃΔ][ⵠⲆⵠ];
								if (ΔΔᐃΔ >= 41 && 49 >= ΔΔᐃΔ) {
									ΔⲆⵠΔ[Δ[66]].scale = 3;
									var ᐃⲆΔᐃⵠⲆᐃ = Math.floor(Math.random() * 3 + ⲆⵠⲆ);
									ΔⲆⵠΔ[Δ[66]].ΔⵠΔ = [];
									for (var ⲆⲆⲆΔ = ΔᐃΔ; ᐃⲆΔᐃⵠⲆᐃ > ⲆⲆⲆΔ; ⲆⲆⲆΔ++) {
										ΔⲆⵠΔ[Δ[66]].ΔⵠΔ.push({
											x: Math.random() * 120 - 60,
											y: Math.random() * 120 - 60,
											angle: 2 * (Math.random() * Math.PI),
											"ᐃⵠⵠΔⲆ": 41 + Math.floor(Math.random() * 9)
										})
									}
								} else if (ΔΔᐃΔ >= ΔⵠΔⵠⵠ && 26 >= ΔΔᐃΔ) {
									ΔⲆⵠΔ[Δ[66]].scale = ⵠΔⲆΔΔ;
									var ᐃⲆΔᐃⵠⲆᐃ = Math.floor(3 * Math.random() + ⲆΔⲆⵠ);
									ΔⲆⵠΔ[Δ[66]].ΔⵠΔ = [];
									for (var ⲆⲆⲆΔ = 0; ᐃⲆΔᐃⵠⲆᐃ > ⲆⲆⲆΔ; ⲆⲆⲆΔ++) {
										ΔⲆⵠΔ[Δ[66]].ΔⵠΔ.push({
											x: 120 * Math.random() - 60,
											y: Math.random() * 120 - 60,
											angle: Math.random() * Math.PI * Ⲇⵠᐃⵠ,
											"ᐃⵠⵠΔⲆ": ⲆΔⲆⵠΔᐃⲆ + Math.floor(Math.random() * 8)
										})
									}
								} else if (ⵠᐃⵠΔΔ >= ΔΔᐃΔ || 27 <= ΔΔᐃΔ && ΔΔᐃΔ <= 40) {
									ΔⲆⵠΔ[Δ[66]].angle = 0;
									ΔⲆⵠΔ[Δ[66]].scale = 2;
									ΔⲆⵠΔ[Δ[66]].ᐃⵠⵠΔⲆ = ΔΔᐃΔ
								} else {
									ΔⲆⵠΔ[Δ[66]].angle = ᐃᐃᐃᐃ * (Math.PI * Math.random());
									ΔⲆⵠΔ[Δ[66]].scale = ⵠΔΔ;
									ΔⲆⵠΔ[Δ[66]].ᐃⵠⵠΔⲆ = ΔΔᐃΔ
								}
							}
						}
					}
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, "p", new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⵠΔᐃ, ⲆⲆⲆᐃ, ⲆⵠΔⲆ, 0, ᐃⲆⵠΔΔ, ⵠⲆΔΔⵠ));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, "t", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ᐃΔⵠΔ, ⵠⲆⲆⲆ, 0, ⵠᐃⵠⲆΔ, 10));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, "s", new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⲆⲆΔᐃ, 1, ᐃⲆⲆ, ⵠⲆΔⵠ, ⵠⲆⲆᐃⵠ, ⵠΔΔΔⵠ));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, "g", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, ⲆΔᐃ, ΔΔⲆⲆ, 10, 10));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, "d", new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠΔⵠᐃᐃ, ΔⲆΔᐃ, ΔⵠⲆ, 0, 10, ⲆΔⲆⲆⵠ));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, "b", new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⲆⲆΔᐃ, 1, 1, 0, ᐃᐃᐃⵠⵠ, 10));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, "f", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, ⵠⵠⵠΔ, 0, ᐃᐃΔⵠⵠ, ᐃᐃΔⵠⵠ));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, Δ[483], new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ΔⵠⲆ, ⲆⵠΔⲆ, Δⵠⵠ, ⵠⵠⲆᐃᐃ, 10));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, Δ[8], new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠΔⵠᐃᐃ, ⵠΔᐃ, 1, 0, 10, ᐃⲆⵠΔΔ));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, Δ[268], new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ⲆΔᐃ, ΔⵠⲆ, ⵠᐃⵠⵠ, ⵠᐃⵠⲆΔ, ᐃⲆᐃⲆᐃ));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, "a", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ⵠⵠᐃ, 1, ΔΔⲆⲆ, ᐃᐃⵠⵠΔ, ⵠⲆⲆᐃⵠ));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, Δ[278], new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ΔΔⲆΔ, ⵠΔⲆ, 0, ⵠᐃᐃⵠⵠ, ᐃⵠᐃᐃᐃ));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, Δ[218], new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, ΔⵠⲆ, ⵠᐃΔ, 10, ⲆΔⵠᐃⲆ));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, Δ[156], new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, ⵠᐃΔⲆ, 10, ⵠΔΔΔⵠ));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, "c", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ⲆΔⲆⵠ, ⵠΔΔ, ΔᐃΔ, ⲆΔⵠᐃⲆ, ⲆΔⲆᐃⵠ));
					ⲆᐃⲆⵠⵠ(ΔⲆⵠΔ, "m", new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆΔΔⵠⵠ, 1, ⲆΔᐃ, ⲆⲆᐃΔ, 10, ⵠⵠⲆᐃᐃ))
				}
			}
		};
		this.time = ⵠ.ΔΔΔ;
		this.ΔᐃᐃⲆⵠ = {
			translate: {
				x: ⵠΔⵠⲆ,
				y: 0
			},
			now: 0,
			"ᐃΔΔΔⲆ": 0,
			"ΔⲆᐃᐃⵠ": ΔΔⲆⲆ
		};
		this.ⲆΔⵠΔΔΔⲆⲆⲆ = function() {
			this.ΔⲆᐃᐃ = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃⲆⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠⲆⲆᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⲆΔᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔΔΔⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃⲆᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠΔᐃᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃΔⵠⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆΔᐃᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃΔΔⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠΔᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⵠᐃᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆΔᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠᐃΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔⲆᐃⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔᐃⲆⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⵠⲆⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.Ⲇⵠⵠⵠⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆⵠᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆᐃⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠⲆᐃΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⲆⲆᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠΔᐃⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃᐃⵠᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠΔⵠⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠⵠΔⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠⵠⵠΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆᐃΔᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆΔᐃΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⲆΔⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆⲆⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⵠΔⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠⵠΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠⵠⲆΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃΔᐃᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⵠᐃΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠΔΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠⲆⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠᐃΔΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔⲆᐃΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃⵠⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃⲆΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃΔⲆⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆᐃⵠⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⵠⲆⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⵠΔⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔΔⲆⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⵠⵠⲆΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔΔⲆᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.Δⵠⵠⵠⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔΔⵠᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆΔᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠΔⵠΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⲆΔᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔⵠⲆⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃΔᐃⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⲆⲆΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⲆⵠⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔᐃΔⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃᐃⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔⲆΔⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⵠⵠᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃⲆΔⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔᐃⲆΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⵠΔᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⲆⵠⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠⲆᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⵠᐃᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.Δⵠⵠᐃⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆⵠⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃΔⵠᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠΔⵠᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃⲆᐃΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠΔᐃⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠⵠΔⵠᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆΔⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃΔⲆᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔΔⵠⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆⵠⲆΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆⲆⲆⲆᐃᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔΔΔⲆᐃⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠΔΔⵠⲆ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃᐃΔⵠⵠΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃᐃⲆᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠᐃΔⵠᐃᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆⵠᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⲆᐃⲆᐃ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔΔⵠⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠⲆΔⵠ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ΔᐃᐃⵠΔ] = [];
			this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆⵠⵠⲆᐃ] = [];
			return
		};
		this.ΔᐃⵠⵠⵠΔⵠΔΔ = function(ΔᐃⲆⵠ) {
			if (!this.ΔⲆᐃᐃ[ΔᐃⲆⵠ]) return;
			ᐃⵠⵠⵠ = this.ΔⲆᐃᐃ[ΔᐃⲆⵠ].type;
			this.ΔⲆᐃᐃ[ΔᐃⲆⵠ] = null;
			var Ⲇᐃⵠ = this.Ⲇᐃⵠ[ᐃⵠⵠⵠ];
			for (var ᐃΔⵠⵠ = 0; Ⲇᐃⵠ.length > ᐃΔⵠⵠ; ᐃΔⵠⵠ++) {
				if (Ⲇᐃⵠ[ᐃΔⵠⵠ].ΔᐃⲆⵠ == ΔᐃⲆⵠ) {
					Ⲇᐃⵠ.splice(ᐃΔⵠⵠ, 1);
					return
				}
			}
			return
		};
		this.ⵠⵠΔΔΔⵠⵠⲆΔ = function(Δᐃ, ᐃΔⵠⵠ) {
			for (var ΔΔᐃΔ = ᐃⲆⵠΔ; this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆΔᐃ].length > ΔΔᐃΔ; ΔΔᐃΔ++) {
				var ⵠⵠᐃⵠ = this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃⲆΔᐃ][ΔΔᐃΔ];
				if (Math.floor(ⵠⵠᐃⵠ.x / ⵠᐃΔᐃⵠ) === ᐃΔⵠⵠ && Math.floor(ⵠⵠᐃⵠ.y / 100) === Δᐃ) return 1
			}
			return Δⵠⵠ
		};
		this.ΔΔΔΔⵠⲆⲆᐃⵠ = function(Δᐃ, ᐃΔⵠⵠ) {
			for (var ΔΔᐃΔ = 0; this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⵠᐃᐃ].length > ΔΔᐃΔ; ΔΔᐃΔ++) {
				var ⵠⵠᐃⵠ = this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⵠᐃᐃ][ΔΔᐃΔ];
				if (Δᐃ == Math.floor(ⵠⵠᐃⵠ.x / ᐃᐃⲆⵠΔ) && ᐃΔⵠⵠ == Math.floor(ⵠⵠᐃⵠ.y / 100)) return true
			}
			return false
		};
		this.ⵠΔⵠⵠⲆ = function(ΔⲆᐃΔ) {
			for (var Δᐃ = ⵠⵠΔᐃ; ΔⲆᐃΔ.length > Δᐃ; Δᐃ++) {
				ⵠⵠᐃⵠ = ΔⲆᐃΔ[Δᐃ];
				if (ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ != ⵠⵠᐃⵠ.angle) {
					var ᐃⵠⵠⲆᐃ = Δⵠᐃᐃ * Math.PI;
					ⵠⵠᐃⵠ.angle = (ⵠⵠᐃⵠ.angle + ᐃⵠⵠⲆᐃ) % ᐃⵠⵠⲆᐃ;
					ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ = (ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ + ᐃⵠⵠⲆᐃ) % ᐃⵠⵠⲆᐃ;
					if (ⵠⵠᐃⵠ.angle != ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ) {
						var ⵠⲆΔΔΔⲆⲆ = ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ - ⵠⵠᐃⵠ.angle;
						var ⵠⵠⲆⲆ = Math.abs(ⵠⲆΔΔΔⲆⲆ);
						ⵠⵠⲆⲆ > Math.PI && (ⵠⵠⲆⲆ = Math.PI * ⲆⲆΔΔ - ⵠⵠⲆⲆ);
						var ⲆⵠΔ = ⵠΔᐃⲆ.ⲆⵠΔΔᐃᐃⵠ * (ⵠⵠⲆⲆ / Math.PI * ΔⵠᐃⲆ) * ΔᐃⲆⲆ;
						if (Math.PI < ⵠⲆΔΔΔⲆⲆ) ⵠⵠᐃⵠ.angle -= ⲆⵠΔ;
						else if (ⵠⲆΔΔΔⲆⲆ < -Math.PI) ⵠⵠᐃⵠ.angle += ⲆⵠΔ;
						else if (ⵠⲆΔΔΔⲆⲆ < ⵠⲆΔⵠ) ⵠⵠᐃⵠ.angle -= ⲆⵠΔ;
						else ⵠⵠᐃⵠ.angle += ⲆⵠΔ;
						ⵠⵠᐃⵠ.angle = (ⵠⵠᐃⵠ.angle + ᐃⵠⵠⲆᐃ) % ᐃⵠⵠⲆᐃ;
						if (ⲆⵠΔ > Math.abs(ⵠⵠᐃⵠ.angle - ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ)) ⵠⵠᐃⵠ.angle = ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ
					}
				}
				var ΔⵠⵠⲆᐃΔᐃΔⲆ = Math.floor(ⵠⵠᐃⵠ.r.y / 100);
				var ΔᐃΔⵠΔᐃᐃⵠⲆ = Math.floor(ⵠⵠᐃⵠ.r.x / 100);
				if (ⵠⵠᐃⵠ.r.x != ⵠⵠᐃⵠ.x || ⵠⵠᐃⵠ.y != ⵠⵠᐃⵠ.r.y) {
					ⵠⵠᐃⵠ.action & ⵠᐃᐃⵠ.IDLE && (ⵠⵠᐃⵠ.action -= ⵠᐃᐃⵠ.IDLE);
					ⵠⵠᐃⵠ.action |= ⵠᐃᐃⵠ.ⲆⵠⵠΔⲆΔⲆ;
					var ᐃᐃᐃⵠ = ⵠᐃΔᐃ.ᐃᐃᐃⲆⲆⲆⲆ(ⵠⵠᐃⵠ, ⵠⵠᐃⵠ.r) + Math.PI;
					var ⵠⲆᐃⲆ = ΔᐃⲆⲆ * ⵠⵠᐃⵠ.ΔⲆⵠⵠΔ;
					var ⲆᐃΔ = ⵠᐃΔᐃ.ⵠⲆᐃⲆᐃΔⲆ(ⵠⲆᐃⲆ, ᐃᐃᐃⵠ);
					if (ⵠᐃΔᐃ.ⵠⲆⵠⵠΔΔᐃ(ⲆᐃΔ) < ⵠᐃΔᐃ.ⵠⲆⵠⵠΔΔᐃ(ⵠᐃΔᐃ.ᐃᐃⵠΔᐃⲆᐃ(ⵠⵠᐃⵠ, ⵠⵠᐃⵠ.r))) ⵠᐃΔᐃ.ⵠΔⵠⲆᐃΔΔ(ⵠⵠᐃⵠ, ⲆᐃΔ);
					else {
						ⵠⵠᐃⵠ.action & ⵠᐃᐃⵠ.ⲆⵠⵠΔⲆΔⲆ && (ⵠⵠᐃⵠ.action -= ⵠᐃᐃⵠ.ⲆⵠⵠΔⲆΔⲆ);
						ⵠⵠᐃⵠ.action |= ⵠᐃᐃⵠ.IDLE;
						ⵠᐃΔᐃ.ⲆᐃᐃᐃⲆⲆΔ(ⵠⵠᐃⵠ.r, ⵠⵠᐃⵠ)
					}
				}
				if (ⵠⵠᐃⵠ.ΔⲆⵠⲆᐃ) {
					var ⵠⵠΔⲆΔ = ⵠⵠᐃⵠ.bubbles;
					var ⲆⲆⲆΔ = ⵠⵠΔⲆΔ.length;
					if (ⲆⲆⲆΔ === ⵠᐃΔ || ⵠ.ᐃᐃΔⵠᐃΔᐃ > ⲆⲆⲆΔ && .95 > ⵠⵠΔⲆΔ[ⲆⲆⲆΔ - 1].ᐃⵠᐃⲆⲆ) ⵠⵠΔⲆΔ.push({
						id: Math.floor(Math.random() * Ⲇⵠ[ⵠ.ΔⲆⲆΔΔⵠᐃ][0].length),
						x: Math.floor(ⵠⵠᐃⵠ.x + Math.random() * 80 - 40),
						y: Math.floor(ⵠⵠᐃⵠ.y + Math.random() * 80 - 40),
						"ᐃⵠᐃⲆⲆ": Δᐃᐃ
					});
					for (var ᐃΔⵠⵠ = 0; ⲆⲆⲆΔ > ᐃΔⵠⵠ; ᐃΔⵠⵠ++) ⵠⵠΔⲆΔ[ᐃΔⵠⵠ].ᐃⵠᐃⲆⲆ = Math.max(ⵠΔⵠⲆ, ⵠⵠΔⲆΔ[ᐃΔⵠⵠ].ᐃⵠᐃⲆⲆ - ΔᐃⲆⲆ);
					for (var ᐃΔⵠⵠ = ΔᐃΔ; ᐃΔⵠⵠ < ⲆⲆⲆΔ; ᐃΔⵠⵠ++) {
						if (ⵠⵠΔⲆΔ[ᐃΔⵠⵠ].ᐃⵠᐃⲆⲆ === 0) {
							ⵠⵠΔⲆΔ.splice(ᐃΔⵠⵠ, 1);
							break
						}
					}
				}
				var ⲆⲆᐃⵠⲆⵠⲆ = Ⲇᐃⵠⵠ;
				if (ⵠⵠᐃⵠ.ΔᐃⵠⲆ && ⵠⵠΔⵠ.ΔⲆᐃᐃΔ) {
					var ⵠᐃᐃᐃⲆ = ⵠⵠᐃⵠ.ⵠᐃᐃᐃⲆ;
					var ⲆⲆⲆΔ = ⵠᐃᐃᐃⲆ.length;
					if (ⵠⵠᐃⵠ.ΔⲆⲆⵠⲆᐃⵠ > ⵠⵠΔΔ && Ⲇᐃ.ⵠᐃⲆΔⲆ !== ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ && Ⲇᐃ.ⲆΔᐃⲆΔ !== ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ && Ⲇᐃ.ⵠⲆⲆΔᐃ !== ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ && Ⲇᐃ.ΔⲆⵠΔᐃ !== ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ && Ⲇᐃ.ⲆⲆⲆΔⲆ !== ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ && !ⵠⵠᐃⵠ.ΔⲆⵠⲆᐃ) {
						ⲆⲆᐃⵠⲆⵠⲆ = 1;
						if (ⲆⲆⲆΔ === ⲆᐃⲆ || ⵠ.ⲆⲆΔⲆⵠᐃⲆ < ⵠᐃΔᐃ.ᐃⲆΔⵠ(ⵠᐃᐃᐃⲆ[ⲆⲆⲆΔ - ⵠΔᐃ], ⵠⵠᐃⵠ)) {
							var ⵠᐃᐃ = -ⵠⵠᐃⵠ.angle;
							var ΔΔ = Ⲇ * (45 * Math.cos(ⵠᐃᐃ));
							var ΔΔⵠ = Ⲇ * (Math.sin(ⵠᐃᐃ) * 45);
							ⵠᐃᐃᐃⲆ.push({
								x: ⵠⵠᐃⵠ.x + ΔΔ,
								y: ⵠⵠᐃⵠ.y + ΔΔⵠ,
								r: 8,
								alpha: .8
							});
							ⵠᐃᐃᐃⲆ.push({
								x: ⵠⵠᐃⵠ.x - ΔΔ,
								y: ⵠⵠᐃⵠ.y - ΔΔⵠ,
								r: 8,
								alpha: .8
							});
							ⵠᐃᐃᐃⲆ.push({
								x: ⵠⵠᐃⵠ.x,
								y: ⵠⵠᐃⵠ.y,
								r: 24,
								alpha: ⵠⲆⲆⲆ
							})
						}
					}
					for (var ᐃΔⵠⵠ = ⵠⵠΔᐃ; ᐃΔⵠⵠ < ⲆⲆⲆΔ; ᐃΔⵠⵠ++) {
						ⵠᐃᐃᐃⲆ[ᐃΔⵠⵠ].alpha = Math.max(ⵠᐃΔ, ⵠᐃᐃᐃⲆ[ᐃΔⵠⵠ].alpha - ΔᐃⲆⲆ / 2.2);
						ⵠᐃᐃᐃⲆ[ᐃΔⵠⵠ].r += 20 * ΔᐃⲆⲆ
					}
					0 < ⵠᐃᐃᐃⲆ.length && ⵠᐃᐃᐃⲆ[0].alpha === ⵠᐃΔ && ⵠᐃᐃᐃⲆ.splice(0, ᐃⵠⵠ);
					var ⲆⲆⲆⵠᐃ = ⵠⵠᐃⵠ.ⲆⲆⲆⵠᐃ;
					var ⲆⲆⲆΔ = ⲆⲆⲆⵠᐃ.length;
					var ⵠᐃ = -ᐃΔⵠΔ;
					var ⲆΔΔΔᐃⵠⲆ = Math.max(0, Math.sign(ⵠⵠᐃⵠ.ΔⲆⲆᐃΔⵠΔ));
					var ⲆⵠⵠⲆⵠ = Math.max(0, Math.sign(ⵠⵠᐃⵠ.ⵠⲆⵠΔⵠ));
					var ΔΔⲆⲆΔⲆΔⵠᐃ = Math.max(ⵠⵠΔΔ, Math.sign(ⵠⵠᐃⵠ.ᐃⲆⲆⵠⵠ));
					var ⵠᐃᐃΔᐃⲆΔ = Math.max(ⵠⲆⵠ, Math.sign(ⵠⵠᐃⵠ.ΔΔⲆΔᐃ));
					var ΔⲆΔᐃᐃⵠⲆ = Math.max(0, Math.sign(ⵠⵠᐃⵠ.ⵠⲆᐃⲆᐃ));
					if (0 < ⵠⵠᐃⵠ.ΔⲆⲆᐃΔⵠΔ || ⵠⵠΔᐃ < ⵠⵠᐃⵠ.ᐃⲆⲆⵠⵠ) var ⵠᐃ = ⵠ.ⵠⲆΔⲆᐃⵠᐃ;
					else if (0 < ⵠⵠᐃⵠ.ⵠⲆᐃⲆᐃ) var ⵠᐃ = ⵠ.ⲆΔⵠΔⵠⵠⲆ;
					else if (ⵠⵠᐃⵠ.ⵠⲆⵠΔⵠ > 0) var ⵠᐃ = ⵠ.ΔⲆⲆᐃⵠⲆⲆ;
					else if (ⵠⲆΔⵠ < ⵠⵠᐃⵠ.ΔΔⲆΔᐃ) var ⵠᐃ = ⵠ.ΔΔᐃᐃΔⵠⵠ;
					if (ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === Ⲇᐃ.ⵠⵠΔⵠⲆ && ⵠⵠⵠΔ === (ⲆΔΔΔᐃⵠⲆ | ⲆⵠⵠⲆⵠ | ⵠᐃᐃΔᐃⲆΔ | ΔⲆΔᐃᐃⵠⲆ)) {
						ⵠᐃ = ⵠ.ΔᐃⵠⵠΔⵠᐃ;
						var ΔᐃᐃᐃⵠΔⲆ = ⵠⵠᐃⵠ.ⲆΔΔᐃⲆ - Math.PI / 2;
						var ⵠΔⵠᐃΔᐃⵠ = ΔᐃⲆⲆⲆ;
						var ΔⲆⲆᐃⲆ = ⲆⵠᐃⲆⵠ;
						var ΔⵠΔᐃᐃⲆΔ = ⵠ.ⵠΔⲆᐃᐃⵠΔ
					} else if (ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === Ⲇᐃ.ᐃΔⲆΔⵠ && ΔΔⲆΔ === (ⲆΔΔΔᐃⵠⲆ | ⲆⵠⵠⲆⵠ | ⵠᐃᐃΔᐃⲆΔ | ΔⲆΔᐃᐃⵠⲆ)) {
						ⵠᐃ = ⵠ.ⲆⲆⵠⵠⵠⵠΔ;
						var ΔᐃᐃᐃⵠΔⲆ = ⵠⵠᐃⵠ.ⲆΔΔᐃⲆ - Math.PI / ᐃΔⲆⵠ;
						var ⵠΔⵠᐃΔᐃⵠ = 21;
						var ΔⲆⲆᐃⲆ = ᐃᐃⵠᐃⵠᐃᐃ;
						var ΔⵠΔᐃᐃⲆΔ = ⵠ.ⵠΔⲆᐃᐃⵠΔ
					} else if (ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === Ⲇᐃ.ᐃᐃⵠⵠᐃ && (ⲆΔΔΔᐃⵠⲆ | ⲆⵠⵠⲆⵠ | ⵠᐃᐃΔᐃⲆΔ | ΔⲆΔᐃᐃⵠⲆ) === ᐃⵠⵠ) {
						ⵠᐃ = ⵠ.ΔⲆⲆⲆⵠΔⵠ;
						var ΔᐃᐃᐃⵠΔⲆ = ⵠⵠᐃⵠ.ⲆΔΔᐃⲆ - Math.PI / 2;
						var ⵠᐃⲆᐃⵠⲆΔ = Math.random() * 50;
						var ⵠΔⵠᐃΔᐃⵠ = 10 + ⵠᐃⲆᐃⵠⲆΔ;
						var ΔⲆⲆᐃⲆ = 0 + ⵠᐃⲆᐃⵠⲆΔ;
						var ΔⵠΔᐃᐃⲆΔ = ⵠ.ⵠΔⲆᐃᐃⵠΔ * .9
					} else {
						var ΔᐃᐃᐃⵠΔⲆ = ⵠⵠᐃⵠ.angle;
						var ⵠΔⵠᐃΔᐃⵠ = 15;
						var ΔⲆⲆᐃⲆ = ⲆΔΔᐃⵠⵠⵠ;
						var ΔⵠΔᐃᐃⲆΔ = ⵠ.ⵠΔⲆᐃᐃⵠΔ
					}
					if (Ⲇᐃ.ⵠᐃⲆΔⲆ === ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ || ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === Ⲇᐃ.ⲆΔᐃⲆΔ || ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === Ⲇᐃ.ⲆⲆⲆΔⲆ || ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === Ⲇᐃ.ΔⲆⵠΔᐃ || Ⲇᐃ.ⵠⲆⲆΔᐃ === ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ || ⵠⵠᐃⵠ.ΔⲆⵠⲆᐃ);
					else if (Ⲇᐃ.ⲆᐃΔⲆⲆ === ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ) {
						(ⲆⲆⲆΔ === 0 || ⵠᐃΔᐃ.ᐃⲆΔⵠ(ⲆⲆⲆⵠᐃ[ⲆⲆⲆΔ - 1], ⵠⵠᐃⵠ) > ⵠ.ⵠⵠⲆΔΔⲆΔ) && ⲆⲆⲆⵠᐃ.push({
							x: ⵠⵠᐃⵠ.x,
							y: ⵠⵠᐃⵠ.y,
							angle: ⵠⵠᐃⵠ.ⲆΔΔᐃⲆ,
							alpha: 1,
							id: ⵠ.ΔΔΔⵠᐃⲆᐃ
						})
					} else if (ⵠᐃ != -1 && ⲆⲆᐃⵠⲆⵠⲆ === 0) {
						if (ⵠᐃΔⲆ === ⲆⲆⲆΔ || ΔⵠΔᐃᐃⲆΔ < ⵠᐃΔᐃ.ᐃⲆΔⵠ(ⲆⲆⲆⵠᐃ[ⲆⲆⲆΔ - 1], ⵠⵠᐃⵠ)) {
							ⵠⵠᐃⵠ.ᐃΔΔᐃΔᐃΔ++;
							if (ᐃⲆΔ < Math.abs(ⵠⵠᐃⵠ.x - ⵠⵠᐃⵠ.r.x) && ⵠⵠᐃ < Math.abs(ⵠⵠᐃⵠ.y - ⵠⵠᐃⵠ.r.y)) {
								if (ⵠⵠᐃⵠ.r.x > ⵠⵠᐃⵠ.x && ⵠⵠᐃⵠ.r.y < ⵠⵠᐃⵠ.y || ⵠⵠᐃⵠ.r.x < ⵠⵠᐃⵠ.x && ⵠⵠᐃⵠ.y < ⵠⵠᐃⵠ.r.y) {
									if (ⵠⵠᐃⵠ.ᐃΔΔᐃΔᐃΔ % 2) {
										var ΔΔ = Ⲇ * -ΔⲆⲆᐃⲆ;
										var ΔΔⵠ = Ⲇ * -ΔⲆⲆᐃⲆ
									} else {
										var ΔΔⵠ = Ⲇ * ΔⲆⲆᐃⲆ;
										var ΔΔ = Ⲇ * ΔⲆⲆᐃⲆ
									}
								} else {
									if (ⵠⵠᐃⵠ.ᐃΔΔᐃΔᐃΔ % 2) {
										var ΔΔ = Ⲇ * ΔⲆⲆᐃⲆ;
										var ΔΔⵠ = -ΔⲆⲆᐃⲆ * Ⲇ
									} else {
										var ΔΔⵠ = ΔⲆⲆᐃⲆ * Ⲇ;
										var ΔΔ = Ⲇ * -ΔⲆⲆᐃⲆ
									}
								}
							} else if (ⵠⵠᐃⵠ.ᐃΔΔᐃΔᐃΔ % 2) {
								var ΔΔ = ⵠΔⵠᐃΔᐃⵠ * Math.cos(ΔᐃᐃᐃⵠΔⲆ) * Ⲇ;
								var ΔΔⵠ = Ⲇ * (ⵠΔⵠᐃΔᐃⵠ * Math.sin(ΔᐃᐃᐃⵠΔⲆ))
							} else {
								var ΔΔ = Ⲇ * (-Math.cos(ΔᐃᐃᐃⵠΔⲆ) * ⵠΔⵠᐃΔᐃⵠ);
								var ΔΔⵠ = ⵠΔⵠᐃΔᐃⵠ * -Math.sin(ΔᐃᐃᐃⵠΔⲆ) * Ⲇ
							}
							ⲆⲆⲆⵠᐃ.push({
								x: ⵠⵠᐃⵠ.x + ΔΔ,
								y: ⵠⵠᐃⵠ.y + ΔΔⵠ,
								angle: ΔᐃᐃᐃⵠΔⲆ + Math.PI / 2,
								alpha: 1,
								id: ⵠᐃ
							})
						}
					}
					for (var ᐃΔⵠⵠ = 0; ᐃΔⵠⵠ < ⲆⲆⲆΔ; ᐃΔⵠⵠ++) {
						ⲆⲆⲆⵠᐃ[ᐃΔⵠⵠ].id === ⵠ.ΔΔΔⵠᐃⲆᐃ ? ⲆⲆⲆⵠᐃ[ᐃΔⵠⵠ].alpha = Math.max(Δⵠⵠ, ⲆⲆⲆⵠᐃ[ᐃΔⵠⵠ].alpha - ΔᐃⲆⲆ * 1.5) : ⲆⲆⲆⵠᐃ[ᐃΔⵠⵠ].alpha = Math.max(ⲆⲆᐃΔ, ⲆⲆⲆⵠᐃ[ᐃΔⵠⵠ].alpha - ΔᐃⲆⲆ / 2.85)
					}
					if (ⲆⲆⲆⵠᐃ.length > Ⲇᐃⵠⵠ && ⲆⲆⲆⵠᐃ[0].alpha === ⵠᐃΔ) ⲆⲆⲆⵠᐃ.splice(0, ΔⵠⲆ)
				}
			}
		};
		this.ᐃᐃⵠ = function() {
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⲆⲆΔ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔⲆⵠⵠ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ΔΔᐃΔⲆ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠᐃᐃⵠ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃΔⲆΔⵠ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃᐃⵠⵠᐃ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃⲆΔⲆ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆΔᐃⲆΔ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ΔⲆⵠΔᐃ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⵠⲆΔⵠ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⵠᐃᐃ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.Δⵠⵠᐃⵠ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆⵠⵠ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃΔⵠᐃ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠΔⵠᐃ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠᐃⲆᐃΔ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠΔᐃⵠ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⵠⵠΔⵠᐃ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⵠⲆΔⲆ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔΔⵠⲆ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠⲆⲆⵠⵠ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⵠΔⵠⲆᐃ]);
			this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[ⲆΔⲆ.ⲆᐃΔⲆᐃ])
		};
		this.Δᐃⵠⵠ = [];
		this.Δᐃⵠⵠ[ⵠ.ΔⵠⵠⵠⲆ] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⲆⲆΔᐃ, 1, 1.05, 1, .008, .008);
		this.Δᐃⵠⵠ[ⵠ.ⲆⵠΔⲆᐃ] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1.08, 1, .006, .006);
		this.Δᐃⵠⵠ[ⵠ.ⲆᐃᐃⲆⵠ] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔⲆΔΔᐃ, ⵠΔᐃ, 1.02, 1, .008, .008);
		this.Δᐃⵠⵠ[ⵠ.ⲆⲆΔΔΔ] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔΔᐃⵠᐃ, ΔΔⲆΔ, 1.08, ⲆⵠⲆ, .006, .006);
		this.ⵠⵠΔᐃⲆ = [];
		this.ⵠⵠΔᐃⲆ[0] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .1, ⵠⲆⲆⲆ, 0, .6, .6);
		this.ⵠⵠΔᐃⲆ[Δᐃᐃ] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .4, ⲆⵠⲆ, 0, .6, .6);
		this.ⵠⵠΔᐃⲆ[2] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .3, 1, ΔΔⲆⲆ, .6, .6);
		this.ⵠⵠΔᐃⲆ[3] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠᐃᐃⵠΔ, .8, ᐃⲆΔ, 0, .6, .6);
		this.ⵠⵠΔᐃⲆ[ⲆⲆᐃΔᐃ] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .3, ⲆⲆⲆᐃ, ⲆᐃⲆ, .6, .6);
		this.ⵠⵠΔᐃⲆ[ⲆΔⲆⲆ] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .8, ᐃΔⵠΔ, ΔΔⲆⲆ, .6, .6);
		this.ⵠⵠΔᐃⲆ[ⲆⵠᐃΔᐃ] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠᐃᐃⵠΔ, .5, 1, ⵠⲆΔⵠ, .6, .6);
		this.ⵠⵠΔᐃⲆ[ᐃΔᐃⲆᐃ] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠᐃᐃⵠΔ, .9, ᐃΔⵠΔ, ⵠⵠΔᐃ, .6, .6);
		this.ⵠⵠΔᐃⲆ[8] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .6, 1, 0, .6, .6);
		this.ⵠⵠΔᐃⲆ[9] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔⲆᐃⵠΔ, .2, 1, 0, .6, .6);
		this.ⵠⵠΔᐃⲆ[ⲆΔⵠᐃⲆ] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠⲆⵠᐃᐃ, .6, 1, 0, .6, .6);
		this.ⵠⵠΔᐃⲆ[11] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .4, 1, ΔᐃΔ, .6, .6);
		this.ⵠⵠΔᐃⲆ[ᐃⵠᐃΔⲆ] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .8, ⵠΔᐃ, ⵠⲆᐃ, .6, .6);
		this.ⵠⵠΔᐃⲆ[13] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .2, ⲆΔᐃΔ, 0, .6, .6);
		this.ⵠⵠΔᐃⲆ[14] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .7, ᐃⲆΔ, 0, .6, .6)
	}

	function ⲆⵠⲆᐃⲆⵠᐃⲆⵠ() {
		this.ⲆⵠΔⵠΔ = "";
		this.ⵠⲆΔΔ = 0;
		this.ᐃᐃⲆΔⵠ = ⵠⵠΔΔ;
		this.ΔΔⲆᐃⵠ = ⵠⵠΔᐃ;
		this.ΔⲆᐃᐃΔⵠⲆ = 0;
		this.ⲆΔⵠΔΔ = 0;
		this.ⵠⵠΔⲆⲆ = ⵠᐃⵠⵠ;
		this.Δᐃⵠⵠᐃ = Δⵠⵠ;
		this.level = 0;
		this.label = null;
		this.ⲆᐃⵠΔᐃⵠⲆ = null;
		this.ΔⵠΔⵠⵠΔⲆ = null;
		this.ⲆᐃᐃⲆⲆ = false;
		this.ᐃⲆᐃⵠⲆ = 0
	}

	function ⵠⵠⵠᐃⵠⲆΔ(ᐃⵠⵠⵠ, ΔᐃᐃⲆ, ⵠᐃ, ΔΔ, ΔΔⵠ, ⵠᐃᐃ, ΔΔⵠⲆ, Ⲇⵠⵠ, ΔⲆⵠⵠΔ, ⲆⵠᐃⵠΔ) {
		this.type = ᐃⵠⵠⵠ;
		this.ΔᐃᐃⲆ = ΔᐃᐃⲆ;
		this.pid = ΔᐃᐃⲆ;
		this.id = ⵠᐃ;
		this.x = ΔΔ;
		this.y = ΔΔⵠ;
		this.angle = ⵠᐃᐃ;
		this.ⵠⵠᐃⵠⲆᐃΔ = ⵠᐃᐃ;
		this.action = ΔΔⵠⲆ;
		this.info = Ⲇⵠⵠ;
		this.ⲆⵠᐃⵠΔ = ⲆⵠᐃⵠΔ;
		this.r = {
			x: ΔΔ,
			y: ΔΔⵠ
		};
		this.ΔⲆⵠⵠΔ = ΔⲆⵠⵠΔ;
		if (ⲆⲆⲆ) this.ΔᐃⲆⵠ = ΔᐃᐃⲆ * ⲆⲆⲆ.ⵠⵠⵠⲆΔⵠΔ + ⵠᐃ;
		switch (ᐃⵠⵠⵠ) {
			case ⲆΔⲆ.ᐃⲆⲆⲆ:
				this.ΔⵠⵠΔ = ⲆⲆⲆ.ⵠⲆΔᐃ[this.ΔᐃᐃⲆ];
				this.ⵠⲆΔΔ = this.ΔⵠⵠΔ.ⵠⲆΔΔ;
				this.ΔⲆᐃᐃΔⵠⲆ = this.ΔⵠⵠΔ.ΔⲆᐃᐃΔⵠⲆ;
				this.ⲆΔⵠΔΔ = this.ΔⵠⵠΔ.ⲆΔⵠΔΔ;
				this.ᐃᐃⲆΔⵠ = this.ΔⵠⵠΔ.ᐃᐃⲆΔⵠ;
				this.ⵠΔᐃᐃΔᐃⲆ = -1e6;
				this.ΔΔⲆΔᐃ = -1e6;
				this.ⵠⲆⵠΔⵠ = -1e6;
				this.ᐃⲆⲆⵠⵠ = -1e6;
				this.ΔⲆⲆⵠⲆᐃⵠ = -1e6;
				this.ΔⲆⲆᐃΔⵠΔ = -1e6;
				this.ⵠⲆᐃⲆᐃ = -1e6;
				this.ⵠΔⲆⲆⲆ = ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ === ⲆⲆⲆ.mode && this.ⵠⲆΔΔ === ⵠΔᐃⲆ.ᐃᐃⲆᐃᐃᐃΔ ? ⵠΔΔᐃⲆ : false;
				this.ⲆⵠΔⵠΔᐃⵠ = ⵠΔᐃⲆ.ΔᐃΔⲆᐃ === ⲆⲆⲆ.mode && ⵠΔᐃⲆ.ΔΔΔⵠᐃΔⵠ === this.ⵠⲆΔΔ ? ΔᐃⲆⵠΔ : ⲆΔᐃⵠᐃ;
				this.ⲆⵠΔΔᐃⵠΔ = this.ⵠΔⲆⲆⲆ && this.ΔⵠⵠΔ.ⲆⵠΔⵠΔ === "  " ? true : ΔΔΔⵠⵠ;
				this.ⲆⲆⲆⵠᐃ = [];
				this.hit = 0;
				this.ᐃᐃᐃᐃΔⲆᐃ = 0;
				this.ΔᐃⵠⲆ = ᐃⲆⲆⲆΔ;
				this.ᐃΔΔᐃΔᐃΔ = 0;
				this.ⲆⵠⲆⵠⲆᐃⲆ = 0;
				this.ⵠᐃᐃᐃⲆ = [];
				this.r = {
					x: ΔΔ,
					y: ΔΔⵠ
				};
				this.ⲆᐃᐃⲆ = ⲆⵠⵠⵠⵠΔᐃⲆΔ;
				this.ⵠⵠⵠΔΔⲆᐃ = ⵠⵠⵠΔΔⲆᐃ;
				this.ΔΔⵠᐃⵠ = Δⵠⵠ;
				this.ⲆΔΔᐃⲆ = ⵠⵠΔΔ;
				this.ⵠᐃⲆᐃⵠ = 0;
				this.ΔᐃⵠΔⵠⲆᐃ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, 0, -Math.PI / ᐃⲆⵠⲆⲆ, .5, ΔⲆΔᐃ);
				this.ΔⵠⲆⵠΔ = 0;
				this.ΔⵠᐃⲆⲆΔΔ = ⵠΔΔᐃ;
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .6, .6, ΔΔⲆⲆ, ⵠᐃᐃⵠᐃ, 3);
				this.ⲆⲆᐃΔⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔΔᐃⵠᐃ, .6, .6, ⵠⲆᐃ, 5, ⲆΔΔⲆ);
				this.freeze = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .6, .6, 0, ΔⲆΔᐃⵠ, ᐃⵠᐃⲆ);
				this.ⲆΔⲆⲆᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⵠΔᐃ, .6, .6, ΔΔⲆⲆ, Δᐃⵠᐃ, ᐃΔΔⵠ);
				this.ⵠⵠΔⲆᐃΔᐃ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, 0, 2.25, -1.5, 3.75, 7.5);
				this.ᐃⲆⲆⲆⵠⵠΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, 0, 7.5, -ᐃⵠⲆⵠ, 22.5, 33.75);
				this.attack = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆΔⲆⲆΔ, ⲆᐃⲆ, ⵠΔΔᐃ, -Math.PI / ᐃΔᐃⲆ, ᐃΔⵠⲆⵠ, ⲆⵠⵠⵠᐃⵠΔ);
				this.ⵠⲆⲆᐃⲆᐃΔΔΔ = ⵠⵠΔᐃ;
				this.ᐃⲆⲆᐃⵠⵠΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠᐃᐃⵠΔ, .6, .6, 0, ᐃⵠⵠ, 3);
				this.ᐃΔΔᐃⵠΔᐃ = this.ⲆⵠΔΔᐃⵠΔ ? new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, ⲆΔⵠΔ, 2.25, -1.5, 2.75, 5.5) : 0;
				this.ᐃⲆΔᐃⵠⲆⲆ = 0;
				this.ⵠⲆᐃⵠⵠⵠⵠ = ΔᐃΔ;
				this.ⵠᐃⲆⲆΔᐃⵠ = [];
				this.ⵠⵠΔⲆⵠᐃⲆ = [];
				this.text = [];
				this.label = [];
				this.ⲆⵠⲆΔΔΔⲆ = ΔΔᐃⵠⵠΔⵠΔᐃ;
				this.ⵠⵠⵠᐃΔ = true;
				this.right = -1;
				this.ⵠⵠΔⵠΔ = -1;
				this.action = ⵠᐃᐃⵠ.IDLE;
				this.ΔᐃᐃⵠⵠⲆⲆ = false;
				this.ΔⲆⲆⲆᐃ = 0;
				this.ΔⲆⵠⲆᐃ = false;
				this.bubbles = [];
				this.ΔΔⲆᐃⵠ = 0;
				this.ⵠᐃΔᐃᐃ = -1;
				this.ᐃᐃⵠ = function(ΔΔⵠⲆ) {
					this.info & 32768 ? (this.ΔᐃᐃⵠⵠⲆⲆ = ⲆⲆⵠⲆᐃ, this.info = ~32768 & this.info) : this.ΔᐃᐃⵠⵠⲆⲆ = ⲆⵠⲆⵠΔ;
					if (this.info & 16384) {
						this.info = ~16384 & this.info;
						this.ΔΔⲆᐃⵠ = ⵠⲆⲆⲆ
					} else this.ΔΔⲆᐃⵠ = ⵠⵠΔᐃ;
					this.ΔⲆⲆⲆᐃ = Math.floor(this.info / 128);
					this.info -= 128 * this.ΔⲆⲆⲆᐃ;
					if (this.info === Ⲇᐃ.Ⲇᐃᐃⵠᐃ || this.ⲆⵠΔΔᐃⵠΔ) this.right = -ΔⲆΔᐃ;
					else this.right = this.info;
					this.ᐃᐃᐃᐃΔⲆᐃ = ⲆⲆⲆ.ⵠⵠΔΔΔⵠⵠⲆΔ(Math.floor(this.r.y / ᐃⲆᐃᐃΔΔⲆ), Math.floor(this.r.x / 100));
					this.ⵠⵠΔⵠΔ = this.ⲆⵠᐃⵠΔ & 255;
					if (ⵠΔᐃⲆ.ᐃⲆⲆᐃⵠΔⲆᐃⲆ === this.right) this.ΔⲆⵠⲆᐃ = true;
					else this.ΔⲆⵠⲆᐃ = ⲆⵠⵠΔᐃ;
					ΔᐃⵠᐃΔ[this.right] ? this.ᐃΔᐃᐃΔ = true : this.ᐃΔᐃᐃΔ = ⵠΔΔᐃᐃ;
					if (ΔΔⵠⲆ & ⵠᐃᐃⵠ.ΔᐃᐃⵠⵠⵠΔ) {
						this.ᐃⲆⲆᐃⵠⵠΔ.ᐃΔⲆ = false;
						this.ᐃⲆⲆᐃⵠⵠΔ.ⲆᐃΔ = .6
					} else if (ΔΔⵠⲆ & ⵠᐃᐃⵠ.ΔⵠᐃⲆⵠ) {
						this.freeze.ᐃΔⲆ = false;
						this.freeze.ⲆᐃΔ = .6
					} else ΔΔⵠⲆ & ⵠᐃᐃⵠ.ᐃⲆΔΔⲆᐃΔ && (this.ⲆⲆᐃΔⵠ.ᐃΔⲆ = false, this.ⲆⲆᐃΔⵠ.ⲆᐃΔ = .6);
					ΔΔⵠⲆ & ⵠᐃᐃⵠ.ΔⲆⲆᐃⲆᐃⲆ && (this.ⲆΔⲆⲆᐃⵠⵠ.ᐃΔⲆ = ΔΔᐃⵠᐃ, this.ⲆΔⲆⲆᐃⵠⵠ.ⲆᐃΔ = .6);
					ΔΔⵠⲆ & ⵠᐃᐃⵠ.ΔΔⵠⵠ && (this.ᐃⲆⵠ.ᐃΔⲆ = false, this.ᐃⲆⵠ.ⲆᐃΔ = .6);
					if (ΔΔⵠⲆ & ⵠᐃᐃⵠ.ΔᐃⵠⵠᐃΔⲆ) {
						this.ⵠⲆⲆᐃⲆᐃΔΔΔ = ⲆᐃᐃΔⲆ.ᐃᐃΔⲆΔⵠⵠᐃΔ;
						ⵠᐃⲆΔ.ⵠⲆᐃᐃΔ && -1 !== this.ⵠᐃΔᐃᐃ && ⵠᐃⲆΔ.ⵠⲆΔᐃ[this.ⵠᐃΔᐃᐃ].ΔⵠΔᐃᐃᐃⲆΔΔ(ⲆⲆⲆⲆᐃ[this.right])
					}
				};
				this.ᐃᐃⵠ();
				break;
			case ⲆΔⲆ.ΔΔⵠⲆⵠ:
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ΔⵠⲆ, ⵠⲆⲆⲆ, 0, 10, 10),
					"ᐃᐃⵠ": false,
					angle: 0
				};
				this.ᐃⵠⵠⵠⲆ = ΔⵠᐃΔΔⵠᐃⲆⲆ;
				this.ΔⵠⲆⵠᐃ = ⵠⲆΔΔΔΔⲆⲆΔ;
				this.ᐃᐃΔⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠΔⵠᐃᐃ, ᐃⲆⲆ, 1.23, 1.18, .01, .01);
				this.ᐃΔⲆᐃΔΔΔ = ⵠⲆΔⵠ;
				this.ⵠⵠⵠⲆⵠⵠΔ = Δⵠⵠ;
				this.ⵠⲆⲆⲆⲆ = ⵠⲆⲆⲆⲆ;
				break;
			case ⲆΔⲆ.ⵠΔⲆΔᐃ:
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ⵠΔᐃ, ΔⲆΔᐃ, 0, 10, ᐃⵠᐃᐃᐃ),
					"ᐃᐃⵠ": false,
					angle: 0
				};
				this.ᐃⵠⵠⵠⲆ = ᐃᐃᐃⲆΔᐃᐃⲆΔ;
				this.ΔⵠⲆⵠᐃ = ᐃⲆΔΔΔⵠⵠᐃᐃ;
				this.ᐃᐃΔⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1.23, 1.18, .01, .01);
				this.ᐃΔⲆᐃΔΔΔ = ⵠⵠΔΔ;
				this.ⵠⵠⵠⲆⵠⵠΔ = ⲆᐃⲆ;
				break;
			case ⲆΔⲆ.ⲆⵠⲆⲆᐃ:
			case ⲆΔⲆ.ᐃᐃⲆΔᐃ:
				this.ᐃⵠⵠⵠⲆ = ⵠᐃⵠⵠⵠᐃⲆΔⲆ;
				this.ΔⵠⲆⵠᐃ = ᐃΔΔⲆΔⵠⲆᐃΔ;
				this.ᐃⲆᐃΔⲆ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ΔⲆΔᐃ, 1.03, .98, .3, .3);
				this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠΔⵠᐃᐃ, 1, 1.23, 1.18, .01, .01);
				this.ᐃᐃΔⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ⵠΔⲆ, 1.23, 1.18, .01, .01);
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔᐃⲆⵠⵠ, 1, ⵠⵠⵠΔ, ⵠⲆᐃ, ⵠᐃᐃⵠⵠ, 10),
					"ᐃᐃⵠ": ⲆΔᐃⵠᐃ,
					angle: ⵠᐃΔ
				};
				break;
			case ⲆΔⲆ.ⲆᐃⲆⵠᐃ:
				this.ᐃⵠⵠⵠⲆ = ⲆⲆⲆⲆΔΔᐃᐃⲆ;
				this.ΔⵠⲆⵠᐃ = ᐃΔⲆΔⵠⲆᐃΔᐃ;
				this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .9, 1.05, .9, .2, .2);
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⲆⵠΔ, ⵠⵠᐃ, ⵠⵠⵠΔ, ⵠⵠΔᐃ, ⲆΔⲆⲆⵠ, ⲆⵠΔΔⵠ),
					"ᐃᐃⵠ": false,
					angle: ᐃⲆⵠΔ
				};
				this.ⵠⲆⵠⵠ = [];
				for (var Δᐃ = 0; ⲆΔⲆΔ > Δᐃ; Δᐃ++) this.ⵠⲆⵠⵠ.push({
					"ⲆᐃᐃⲆ": ⵠᐃⲆΔΔⵠΔⵠⵠ,
					"Δᐃⵠⵠ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2)
				});
				this.ⵠⲆⵠⵠ[0].x = this.x - 16.5;
				this.ⵠⲆⵠⵠ[ⵠᐃΔ].y = this.y - 15.5;
				this.ⵠⲆⵠⵠ[0].angle = this.angle;
				this.ⵠⲆⵠⵠ[ΔⲆΔᐃ].x = this.x + 36;
				this.ⵠⲆⵠⵠ[ⵠⵠᐃ].y = this.y + ᐃⲆΔΔⲆ;
				this.ⵠⲆⵠⵠ[1].angle = this.angle;
				this.ⵠⲆⵠⵠ[2].x = this.x - 18.5;
				this.ⵠⲆⵠⵠ[ΔⲆᐃⲆ].y = this.y + 39;
				this.ⵠⲆⵠⵠ[2].angle = this.angle;
				break;
			case ⲆΔⲆ.ⲆΔΔΔⵠ:
				this.ᐃⵠⵠⵠⲆ = ⲆΔΔⲆⵠᐃΔᐃⵠ;
				this.ΔⵠⲆⵠᐃ = ΔⲆⲆⲆⲆⵠΔᐃᐃ;
				this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .9, 1.05, .9, .2, .2);
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, ᐃΔⵠΔ, 0, ᐃᐃⵠⵠΔ, ᐃᐃⵠⵠΔ),
					"ᐃᐃⵠ": false,
					angle: ⵠⲆΔⵠ
				};
				this.ⵠⲆⵠⵠ = [];
				for (var Δᐃ = ⲆᐃⲆ; ⵠΔⲆΔΔ > Δᐃ; Δᐃ++) this.ⵠⲆⵠⵠ.push({
					"ⲆᐃᐃⲆ": ᐃΔᐃⲆΔΔΔ,
					"Δᐃⵠⵠ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠΔⵠᐃᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2)
				});
				this.ⵠⲆⵠⵠ[0].x = this.x - 16.5;
				this.ⵠⲆⵠⵠ[ΔᐃΔ].y = this.y - 15.5;
				this.ⵠⲆⵠⵠ[1].x = this.x - 5.5;
				this.ⵠⲆⵠⵠ[1].y = this.y + 7.5;
				this.ⵠⲆⵠⵠ[ΔⲆᐃⲆ].x = this.x + ᐃⵠᐃⲆⵠⲆⲆ;
				this.ⵠⲆⵠⵠ[2].y = this.y - ⲆⲆⲆᐃᐃ;
				break;
			case ⲆΔⲆ.ᐃΔⲆΔⵠ:
				this.ⲆᐃᐃⲆ = ⵠⵠⵠᐃⵠⲆⲆⵠⵠ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠΔᐃⵠ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔΔᐃⵠᐃ, .6, .6, ᐃΔΔ, 5, ⲆΔΔⲆ);
				break;
			case ⲆΔⲆ.ⵠⵠᐃᐃⵠ:
				this.ⲆᐃᐃⲆ = ⲆΔⲆᐃⵠᐃⵠⲆΔ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆᐃⲆⲆΔ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .6, .6, 0, 5, ⵠΔⲆⲆ);
				break;
			case ⲆΔⲆ.ᐃᐃⵠⵠᐃ:
				this.ⲆᐃᐃⲆ = ⲆⲆΔᐃΔⵠⵠᐃⵠ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ΔΔⲆᐃⲆΔΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⵠΔᐃⵠⲆᐃⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ᐃⲆⵠⵠᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⲆⵠΔ, .6, .6, ⲆΔⵠΔ, ⵠⵠⲆⵠ, ΔⲆΔΔ);
				this.ⲆⲆᐃΔⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .6, .6, ⵠⲆΔⵠ, ⵠᐃⵠΔᐃ, 3);
				break;
			case ⲆΔⲆ.ΔΔᐃΔⲆ:
				this.ⲆᐃᐃⲆ = ⲆᐃⲆⲆⵠᐃⵠⲆⲆ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ΔΔⲆᐃⲆΔΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⲆⵠΔ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⵠΔᐃⵠⲆᐃⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔΔᐃⵠᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔΔΔⵠⵠ, .6, .6, ⲆⲆⵠⲆ, 5, ᐃΔΔⵠ);
				this.ⲆⲆᐃΔⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠⲆⵠᐃᐃ, .6, .6, 0, ⵠⵠΔΔⲆ, ᐃΔΔΔ);
				break;
			case ⲆΔⲆ.ⵠΔΔⵠⲆ:
				this.ⲆᐃᐃⲆ = ΔᐃΔΔᐃᐃⵠΔᐃ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⲆΔᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .6, .6, ⵠᐃⵠⵠ, 5, 3);
				break;
			case ⲆΔⲆ.ⲆᐃΔⵠᐃ:
				this.ⲆᐃᐃⲆ = ᐃⵠⵠⵠᐃΔᐃ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠΔⵠᐃᐃ, .9 + Math.random() * .15, 1.05, .9, .5, .5);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠΔΔᐃᐃ, .6, .6, ᐃΔΔ, ΔⲆΔᐃⵠ, ⵠΔⲆⲆ);
				break;
			case ⲆΔⲆ.ⵠⵠⲆⵠⵠ:
				this.ⵠⲆΔⵠⵠ = this.info & 15;
				this.ⲆⵠⲆⵠⲆᐃⲆ = this.ⲆⵠᐃⵠΔ & Δᐃᐃ;
				this.ᐃΔⵠΔⲆⲆΔ = ⲆⲆᐃΔ;
				this.x = this.info;
				this.y = this.ⲆⵠᐃⵠΔ;
				this.ⲆᐃᐃⲆ = ⲆᐃΔΔᐃΔᐃΔΔ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .9 + Math.random() * .15, 1.05, .9, .6, .6);
				break;
			case ⲆΔⲆ.ΔⲆⲆⲆΔ:
			case ⲆΔⲆ.ⲆΔⲆⵠⵠ:
			case ⲆΔⲆ.ᐃⵠⲆΔⵠ:
			case ⲆΔⲆ.ᐃⲆⵠᐃᐃ:
			case ⲆΔⲆ.ⵠⵠΔⵠᐃ:
			case ⲆΔⲆ.ⵠᐃⲆᐃΔ:
			case ⲆΔⲆ.ⵠⲆⲆⵠⵠ:
			case ⲆΔⲆ.ⵠΔⵠⲆᐃ:
			case ⲆΔⲆ.Δⵠⵠᐃⵠ:
				this.ⲆᐃᐃⲆ = ᐃⵠⵠⵠᐃΔᐃ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔⲆΔΔᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ᐃⵠⵠⲆⵠ, .6, .6, 0, ᐃΔᐃⲆⲆ, ᐃⲆᐃⲆ);
				break;
			case ⲆΔⲆ.ᐃΔΔⵠⵠ:
				this.ⲆᐃᐃⲆ = ᐃⲆΔⲆᐃᐃⵠⵠⵠ;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ᐃΔⵠΔ, ⲆΔᐃΔ, ΔᐃΔ, 10, ᐃᐃΔⵠⵠ),
					"ᐃᐃⵠ": false,
					angle: 0
				};
				break;
			case ⲆΔⲆ.ⲆⲆᐃⲆᐃ:
				this.ΔⵠⲆⵠᐃ = ΔⵠᐃΔⵠᐃⵠΔΔ;
				this.ⲆᐃᐃⲆ = ⲆᐃΔΔⲆΔᐃΔⵠ;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔᐃⲆⵠⵠ, 1, 1, 0, 10, ΔΔⲆⲆⵠ),
					"ᐃᐃⵠ": false,
					angle: ᐃⲆⵠΔ
				};
				this.up = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠΔᐃⵠ, ⵠΔΔ, 1.03, .98, .1, .1);
				this.ΔΔΔΔⲆ = [];
				break;
			case ⲆΔⲆ.ΔᐃᐃⵠΔ:
				this.angle = Math.PI * Math.random() / ΔⲆⲆⵠ;
				this.ⲆᐃᐃⲆ = ᐃᐃᐃⲆⲆⵠΔⲆΔ;
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⵠΔᐃ, .6, .6, ⵠⲆΔⵠ, 5, ΔⵠᐃⲆ);
				this.boxType = "Gift";
				break;
			case ⲆΔⲆ.ⵠⵠⲆⵠᐃ:
				this.ⲆᐃᐃⲆ = ᐃᐃᐃⲆⲆⵠΔⲆΔ;
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⵠΔᐃ, .6, .6, ⵠⲆΔⵠ, 5, ΔⵠᐃⲆ);
				this.boxType = "Drop";
				this.disappearTime = +new Date + 17e3;
				break;
			case ⲆΔⲆ.ᐃⵠᐃΔⵠᐃᐃ:
				this.ⲆᐃᐃⲆ = ᐃᐃᐃⲆⲆⵠΔⲆΔ;
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⵠΔᐃ, .6, .6, ⵠⲆΔⵠ, 5, ΔⵠᐃⲆ);
				this.boxType = "Dead";
				this.disappearTime = +new Date + 241e3;
				break;
			case ⲆΔⲆ.ΔᐃᐃⲆᐃ:
				this.ⲆᐃᐃⲆ = ᐃΔΔⵠᐃᐃᐃⲆΔ;
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .6, .6, 0, ⵠᐃⵠΔᐃ, 3);
				break;
			case ⲆΔⲆ.ⲆᐃΔⲆᐃ:
				this.scale = 1;
				this.ⲆᐃᐃⲆ = ⲆΔᐃᐃⲆⵠⵠΔΔ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆΔΔⵠⵠ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⲆΔᐃ, Ⲇᐃⵠⵠ, ⲆⲆⵠⲆ, -Math.PI / ⵠΔΔⲆΔ, .5, ΔΔⲆΔ);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠΔᐃⵠ, .6, .6, ⲆΔⵠΔ, ⵠᐃᐃΔᐃ, ⵠΔⲆΔΔ);
				break;
			case ⲆΔⲆ.ⵠⲆⵠⵠΔⵠᐃ:
				this.ΔΔᐃⲆᐃ = ⵠⲆⵠ;
				this.ⵠᐃᐃΔ = [];
				this.ⲆᐃΔⵠᐃⵠᐃ = ⵠᐃⵠⵠ;
				this.ᐃⲆᐃᐃᐃΔⲆ = ΔᐃⲆⵠᐃΔⲆΔⵠ;
				this.ⲆᐃᐃⲆ = ΔⵠⵠⵠΔᐃᐃΔⲆ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠΔᐃⵠ, ΔΔⲆⲆ, ᐃⲆⵠΔ, -Math.PI / 6, .5, 1);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⲆⵠΔ, .6, .6, ᐃⲆⵠΔ, 5, 3);
				break;
			case ⲆΔⲆ.ⵠⵠΔᐃⵠ:
				this.x = this.info;
				this.y = this.ⲆⵠᐃⵠΔ;
				this.scale = ⲆΔⲆⵠ;
				this.ΔⵠⲆⵠ = 0;
				this.ⲆᐃᐃⲆ = ⲆⲆᐃⲆⲆᐃΔⵠΔ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔΔΔⵠⵠ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, ⵠΔΔᐃ, -Math.PI / ᐃΔⲆⵠⵠ, .5, ΔⲆΔᐃ);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .6, .6, ⲆΔⵠΔ, 5, 3);
				break;
			case ⲆΔⲆ.ΔⲆⵠΔᐃ:
				this.x = this.info;
				this.y = this.ⲆⵠᐃⵠΔ;
				this.scale = 1;
				this.ΔⵠⲆⵠ = Ⲇᐃⵠⵠ;
				this.ⲆᐃᐃⲆ = ⲆⲆⵠⵠⵠᐃΔᐃⵠ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔᐃⲆⵠⵠ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⲆⵠΔ, Δⵠⵠ, 0, -Math.PI / 6, .5, 1);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠΔΔᐃᐃ, .6, .6, 0, 5, 3);
				break;
			case ⲆΔⲆ.ⲆΔᐃⲆΔ:
				this.scale = 1;
				this.ⲆᐃᐃⲆ = ⲆΔⵠⵠⵠⵠΔⵠⲆ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔΔᐃⵠᐃ, 0, 0, -Math.PI / 6, .5, ⵠⲆⲆⲆ);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .6, .6, ΔᐃΔ, ⲆⲆⵠᐃⲆ, 3);
				break;
			case ⲆΔⲆ.ⵠᐃⲆΔⲆ:
				this.scale = 1;
				this.ⲆᐃᐃⲆ = ᐃⲆⵠΔΔΔⵠⲆⲆ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆΔⲆⲆΔ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔⲆᐃⵠΔ, ⵠᐃΔⲆ, Δⵠⵠ, -Math.PI / ⲆΔΔΔΔ, .5, 1);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⵠΔᐃ, .6, .6, ⲆᐃⲆ, 5, ΔⵠᐃⲆ);
				break;
			case ⲆΔⲆ.ⵠⵠⲆΔⲆ:
				this.scale = 1;
				this.ⲆᐃᐃⲆ = ΔⵠⲆᐃⲆᐃⲆᐃᐃ;
				this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠΔᐃⵠ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ⵠⲆᐃ, ΔΔⲆⲆ, -Math.PI / ⲆΔΔΔΔ, .5, ⵠⵠⵠΔ);
				this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ᐃⵠⵠⲆⵠ, .6, .6, ᐃΔΔ, 5, 3);
				break;
			case ⲆΔⲆ.ᐃᐃΔᐃⵠ:
				this.ⵠⲆⵠⵠ = [];
				for (var Δᐃ = ⲆⲆⵠⲆ; Δᐃ < 5; Δᐃ++) this.ⵠⲆⵠⵠ.push({
					"ⲆᐃᐃⲆ": ᐃΔᐃⲆΔΔΔ,
					"Δᐃⵠⵠ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ᐃⲆⵠⵠᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2)
				});
				switch (this.id % 3) {
					case ΔΔⲆⲆ:
						this.ⵠⲆⵠⵠ[0].x = this.x - 20.5;
						this.ⵠⲆⵠⵠ[ᐃⲆⵠΔ].y = this.y - 22.5;
						this.ⵠⲆⵠⵠ[1].x = this.x - 35.5;
						this.ⵠⲆⵠⵠ[ⵠⵠⵠΔ].y = this.y + 7.5;
						this.ⵠⲆⵠⵠ[2].x = this.x + 7.5;
						this.ⵠⲆⵠⵠ[2].y = this.y - 30;
						this.ⵠⲆⵠⵠ[ᐃΔΔΔ].x = this.x + 22.5;
						this.ⵠⲆⵠⵠ[ⵠᐃⲆᐃ].y = this.y;
						this.ⵠⲆⵠⵠ[4].x = this.x - 7.5;
						this.ⵠⲆⵠⵠ[4].y = this.y + 14.5;
						break;
					case ᐃⲆΔ:
						this.ⵠⲆⵠⵠ[0].x = this.x - 30.5;
						this.ⵠⲆⵠⵠ[0].y = this.y - 22.5;
						this.ⵠⲆⵠⵠ[ᐃⵠⵠ].x = this.x - 15.5;
						this.ⵠⲆⵠⵠ[ᐃⵠⵠ].y = this.y + 7.5;
						this.ⵠⲆⵠⵠ[2].x = this.x + 15.5;
						this.ⵠⲆⵠⵠ[ΔᐃΔⲆ].y = this.y - 30;
						this.ⵠⲆⵠⵠ[ᐃⵠᐃⲆ].x = this.x + 12.5;
						this.ⵠⲆⵠⵠ[3].y = this.y + 5;
						this.ⵠⲆⵠⵠ[4].x = this.x - 40.5;
						this.ⵠⲆⵠⵠ[ΔᐃΔⵠ].y = this.y + 14.5;
						break;
					case 2:
						this.ⵠⲆⵠⵠ[ΔᐃΔ].x = this.x - 20.5;
						this.ⵠⲆⵠⵠ[ⵠΔΔᐃ].y = this.y - 20.5;
						this.ⵠⲆⵠⵠ[ⲆΔᐃ].x = this.x - 35.5;
						this.ⵠⲆⵠⵠ[1].y = this.y + 15.5;
						this.ⵠⲆⵠⵠ[ⲆᐃᐃΔ].x = this.x + 7.5;
						this.ⵠⲆⵠⵠ[ΔⲆⲆⵠ].y = this.y - ⵠⵠΔΔⵠᐃΔ;
						this.ⵠⲆⵠⵠ[ᐃΔᐃⲆ].x = this.x + 22.5;
						this.ⵠⲆⵠⵠ[3].y = this.y + 5;
						this.ⵠⲆⵠⵠ[ⲆⵠⲆᐃ].x = this.x - 7.5;
						this.ⵠⲆⵠⵠ[4].y = this.y + 1.5;
						break
				}
				break;
			case ⲆΔⲆ.ΔΔᐃⲆⵠ:
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, ⵠᐃΔ, ᐃᐃⵠⵠΔ, ⵠⲆΔΔⵠ),
					"ᐃᐃⵠ": ⵠΔⵠᐃᐃ,
					angle: ⵠᐃⵠⵠ
				};
				this.ⲆᐃᐃⲆ = ⵠΔᐃΔⵠΔΔΔΔ;
				this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .9, 1.05, .9, .2, .2);
				this.ⵠⵠⲆⲆᐃᐃⲆ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, Math.PI / 30, -Math.PI / 30, .06, .06);
				break;
			case ⲆΔⲆ.ᐃⵠΔᐃⲆ:
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, ⵠⵠⵠΔ, 0, ΔⲆⲆΔΔ, ⵠᐃᐃⵠⵠ),
					"ᐃᐃⵠ": false,
					angle: ⵠᐃΔ
				};
				this.ⲆᐃᐃⲆ = ⲆⵠᐃⲆᐃⵠΔⵠⲆ;
				this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .9, 1.05, .9, .2, .2);
				break;
			case ⲆΔⲆ.ᐃᐃⲆⲆᐃ:
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆᐃⲆⲆΔ, 1, ᐃΔⵠΔ, ⲆⲆⵠⲆ, ᐃⲆᐃⲆᐃ, 10),
					"ᐃᐃⵠ": ⲆᐃⲆⲆΔ,
					angle: ⵠΔⵠⲆ
				};
				this.ⲆᐃᐃⲆ = ⵠᐃΔᐃⲆΔᐃⲆᐃ;
				this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⲆⲆΔᐃ, .9, 1.05, .9, .2, .2);
				break;
			case ⲆΔⲆ.ᐃⲆⲆᐃⵠ:
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔᐃⲆⵠⵠ, ⵠΔᐃ, ᐃⵠⵠ, ᐃⲆⵠΔ, 10, ⵠΔΔΔⵠ),
					"ᐃᐃⵠ": false,
					angle: 0
				};
				this.ⲆᐃᐃⲆ = ⵠⲆⵠΔⵠⲆⲆⵠⵠ;
				this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔⲆᐃⵠΔ, .9, 1.05, .9, .2, .2);
				break;
			case ⲆΔⲆ.ᐃᐃⵠⲆⲆ:
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, Δᐃᐃ, 1, ⲆΔⵠΔ, ⲆⵠΔΔⵠ, ⵠᐃⵠⲆΔ),
					"ᐃᐃⵠ": false,
					angle: ⵠᐃΔⲆ
				};
				this.ⲆᐃᐃⲆ = ⵠⲆᐃⲆⵠⲆⵠⵠᐃ;
				this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔᐃⲆⵠⵠ, .9, 1.05, .9, .2, .2);
				break;
			case ⲆΔⲆ.ΔⵠⲆᐃΔ:
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⲆⲆΔᐃ, 1, 1, ᐃⲆⵠΔ, ⵠᐃⵠⲆΔ, 10),
					"ᐃᐃⵠ": false,
					angle: ΔΔⲆⲆ
				};
				this.ⲆᐃᐃⲆ = ⲆⵠᐃΔᐃⲆΔᐃⵠ;
				this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .9, 1.05, .9, .2, .2);
				break;
			case ⲆΔⲆ.Ⲇⵠⵠⵠⵠ:
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔᐃⲆⵠⵠ, Δᐃᐃ, 1, ⵠᐃΔⲆ, ⵠΔΔΔⵠ, ᐃⲆᐃⲆᐃ),
					"ᐃᐃⵠ": ΔⲆΔΔᐃ,
					angle: ⵠᐃΔ
				};
				this.ⲆᐃᐃⲆ = ΔᐃΔᐃⲆⵠᐃⲆᐃ;
				this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, .9, 1.05, .9, .2, .2);
				break;
			case ⲆΔⲆ.ⲆⵠΔⵠⵠ:
				this.ⲆᐃᐃⲆ = ᐃᐃᐃΔⲆⵠⲆⲆⲆ;
				this.rotate = 0;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, ⲆΔⵠΔ, 10, ⲆΔⲆᐃⵠ),
					"ᐃᐃⵠ": false,
					angle: 0
				};
				break;
			case ⲆΔⲆ.ᐃⵠⵠΔⵠ:
				this.ⲆᐃᐃⲆ = ⵠᐃᐃΔΔⲆΔᐃⲆ;
				this.rotate = ⵠⲆᐃ;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆΔΔⵠⵠ, ⲆΔᐃ, 1, 0, ⲆΔⲆⲆⵠ, 10),
					"ᐃᐃⵠ": false,
					angle: ΔᐃΔ
				};
				break;
			case ⲆΔⲆ.ᐃⵠⵠⵠΔ:
				this.ⲆᐃᐃⲆ = ᐃᐃᐃⵠⲆᐃⵠⵠΔ;
				this.rotate = 0;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔΔΔⵠⵠ, ᐃⲆⲆ, 1, 0, 10, 10),
					"ᐃᐃⵠ": ⵠⲆⵠᐃᐃ,
					angle: 0
				};
				break;
			case ⲆΔⲆ.ΔⲆᐃΔᐃ:
				this.ⲆᐃᐃⲆ = ⵠⵠⲆᐃΔᐃⲆⵠᐃ;
				this.rotate = ΔᐃΔ;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⲆΔᐃ, ⲆⲆⲆᐃ, ᐃⲆⲆ, ΔᐃΔ, ⲆᐃⲆⲆᐃ, ΔⲆⲆΔΔ),
					"ᐃᐃⵠ": ⲆⵠⵠΔᐃ,
					angle: 0
				};
				break;
			case ⲆΔⲆ.ᐃⲆΔᐃΔ:
				this.ⲆᐃᐃⲆ = ΔᐃⲆᐃⲆΔⵠΔΔ;
				this.rotate = Δⵠⵠ;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ΔⲆΔᐃ, 1, 0, 10, 10),
					"ᐃᐃⵠ": ᐃⲆⵠⵠᐃ,
					angle: ⵠⵠΔΔ
				};
				break;
			case ⲆΔⲆ.ᐃᐃᐃⵠᐃ:
				this.ᐃⵠⵠⵠⲆ = ⲆΔⵠᐃΔⲆΔΔᐃ;
				this.ΔⵠⲆⵠᐃ = ⲆᐃⲆᐃᐃⲆⵠΔΔ;
				this.rotate = 0;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, Δᐃᐃ, Ⲇᐃⵠⵠ, 10, 10),
					"ᐃᐃⵠ": ⲆΔΔⵠⵠ,
					angle: 0
				};
				break;
			case ⲆΔⲆ.ⵠΔⵠᐃΔ:
				this.ⲆᐃᐃⲆ = ΔΔᐃΔΔΔᐃᐃⲆ;
				this.ᐃΔⵠⵠ = Math.floor(this.x / ⲆᐃᐃΔᐃ);
				this.Δᐃ = Math.floor(this.y / 100);
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ⵠΔᐃ, ⵠΔᐃ, ⵠⲆᐃ, ⲆΔⵠᐃⲆ, ⵠⲆΔΔⵠ),
					"ᐃᐃⵠ": false,
					angle: 0
				};
				this.opacity = 1;
				this.ⵠⲆⲆⲆⲆ = ΔΔⵠᐃᐃᐃΔ;
				break;
			case ⲆΔⲆ.ⲆⵠⵠⲆᐃ:
				this.ⲆᐃᐃⲆ = ⲆᐃᐃΔⵠⵠⲆᐃΔ;
				this.ᐃᐃΔⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ⵠΔΔ, 1.15, 1, .3, .3);
				this.color = ⵠⵠΔᐃ;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆᐃⲆⲆΔ, ⲆⵠΔⲆ, 1, 0, 10, 10),
					"ᐃᐃⵠ": ⵠⲆⵠᐃᐃ,
					angle: 0
				};
				break;
			case ⲆΔⲆ.ΔΔⲆᐃⲆ:
			case ⲆΔⲆ.ⵠⵠᐃⲆⵠ:
			case ⲆΔⲆ.ⲆᐃⲆΔᐃ:
			case ⲆΔⲆ.ⵠⲆⲆΔⵠ:
			case ⲆΔⲆ.ᐃΔΔⵠᐃ:
				this.ⲆᐃᐃⲆ = ⵠⲆⲆΔⲆⲆⵠ;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⲆⵠΔ, ⵠΔⲆ, ⵠΔΔ, 0, ⲆΔⲆⲆⵠ, ᐃⵠᐃᐃᐃ),
					"ᐃᐃⵠ": ⵠΔⵠᐃᐃ,
					angle: ⲆⲆⵠⲆ
				};
				break;
			case ⲆΔⲆ.ⲆΔⵠᐃᐃ:
				this.ⲆᐃᐃⲆ = ⵠⲆⲆΔⲆⲆⵠ;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔΔᐃⵠᐃ, 1, 1, ᐃΔΔ, 10, 10),
					"ᐃᐃⵠ": ΔᐃⲆⵠⵠ,
					angle: ⵠⲆⵠ
				};
				this.ⵠⲆⲆⲆⲆ = ΔΔⵠᐃᐃᐃΔ;
				break;
			case ⲆΔⲆ.ⲆᐃⲆⲆⲆ:
			case ⲆΔⲆ.ΔⲆⵠΔⵠ:
			case ⲆΔⲆ.ⵠⲆⵠⵠΔ:
			case ⲆΔⲆ.ⲆⵠⵠⲆΔ:
			case ⲆΔⲆ.ᐃᐃΔᐃᐃ:
			case ⲆΔⲆ.ⲆᐃⵠᐃΔ:
			case ⲆΔⲆ.ᐃⵠᐃⲆᐃ:
			case ⲆΔⲆ.ⵠⵠΔᐃᐃ:
			case ⲆΔⲆ.ΔᐃΔⵠⵠ:
			case ⲆΔⲆ.ⲆⲆΔᐃᐃ:
			case ⲆΔⲆ.ⵠᐃΔΔⵠ:
			case ⲆΔⲆ.ⵠⲆⵠΔᐃ:
				this.ⲆᐃᐃⲆ = ⵠⲆⲆΔⲆⲆⵠ;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⲆⲆΔᐃ, 1, ⵠⵠᐃ, ⵠΔⵠⲆ, ᐃⲆⲆⵠⲆ, 10),
					"ᐃᐃⵠ": false,
					angle: 0
				};
				this.ⵠⲆⲆⲆⲆ = ⵠⲆⲆⲆⲆ;
				break;
			case ⲆΔⲆ.ⵠⲆⵠΔΔ:
				this.ⲆᐃᐃⲆ = ⵠⵠⵠᐃΔⵠᐃⵠΔ;
				this.opacity = 1;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠΔΔᐃᐃ, 1, ⲆΔⲆⵠ, 0, 10, ⵠᐃⵠⲆΔ),
					"ᐃᐃⵠ": false,
					angle: 0
				};
				var ⲆΔΔⵠⵠⲆᐃ = this.angle % (Math.PI / Ⲇⵠᐃⵠ);
				ⲆΔΔⵠⵠⲆᐃ < Math.PI / ᐃⵠⲆⲆ ? this.angle -= ⲆΔΔⵠⵠⲆᐃ : this.angle += Math.PI / 2 - ⲆΔΔⵠⵠⲆᐃ;
				break;
			case ⲆΔⲆ.ⲆⲆⵠⲆΔ:
				this.ⲆᐃᐃⲆ = ⲆⲆⵠΔⵠᐃΔⲆⵠ;
				this.angle = 2 * (Math.PI * Math.random());
				break;
			case ⲆΔⲆ.ⲆⲆⲆⲆⲆᐃᐃ:
				this.ⲆᐃᐃⲆ = ⵠⵠⵠᐃΔΔΔⲆᐃ;
				this.angle = Math.PI * Math.random() * ⲆᐃᐃΔ;
				break;
			case ⲆΔⲆ.ⲆΔΔΔⲆᐃⲆ:
				this.ⲆᐃᐃⲆ = ⲆⵠⵠΔⲆᐃⵠΔᐃ;
				this.angle = 2 * (Math.random() * Math.PI);
				break;
			case ⲆΔⲆ.ⵠⲆⵠΔΔⵠⲆ:
				this.ⲆᐃᐃⲆ = ᐃⵠⲆᐃⵠⵠⲆΔΔ;
				this.angle = 2 * (Math.PI * Math.random());
				break;
			case ⲆΔⲆ.ΔᐃᐃΔⵠⵠΔ:
				this.ⲆᐃᐃⲆ = ⵠⲆⵠⲆⲆⵠᐃⲆⲆ;
				this.angle = Math.PI * Math.random() * ᐃⵠΔⲆ;
				break;
			case ⲆΔⲆ.ᐃⵠΔⵠΔ:
				this.ᐃᐃⵠ = function(ΔΔⵠⲆ) {
					this.lock = this.info & 8192 ? 1 : ⵠᐃⵠⵠ;
					this.info = this.info & 8191;
					this.action = ΔΔⵠⲆ
				};
				this.ⲆᐃᐃⲆ = ᐃⲆΔΔᐃΔΔⵠΔ;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ᐃⲆⲆ, 1, 0, ⲆΔⲆⲆⵠ, ⲆΔⵠᐃⲆ),
					"ᐃᐃⵠ": false,
					angle: ⲆⲆᐃΔ
				};
				this.lock = Δⵠⵠ;
				this.ᐃᐃⵠ(this.action);
				break;
			case ⲆΔⲆ.ⲆⲆᐃⵠⵠ:
			case ⲆΔⲆ.ⲆΔⵠⲆⵠ:
			case ⲆΔⲆ.ᐃⲆⵠΔⲆ:
			case ⲆΔⲆ.ⵠΔΔⲆⲆ:
			case ⲆΔⲆ.ΔⵠⵠⲆΔ:
			case ⲆΔⲆ.ΔΔΔⲆᐃ:
			case ⲆΔⲆ.ⵠΔⵠⲆⵠ:
			case ⲆΔⲆ.ΔⵠᐃΔΔ:
			case ⲆΔⲆ.ᐃΔⲆᐃΔ:
			case ⲆΔⲆ.ⵠⵠᐃⵠⲆ:
			case ⲆΔⲆ.ᐃⵠᐃⲆΔ:
			case ⲆΔⲆ.ΔᐃΔⲆⲆ:
				this.ⲆᐃᐃⲆ = ΔΔΔᐃⲆⵠᐃⵠΔ;
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⲆΔᐃ, ⵠΔᐃ, 1, 0, 10, 10),
					"ᐃᐃⵠ": ΔᐃⲆⵠⵠ,
					angle: ⵠⲆΔⵠ
				};
				this.ⵠⲆⲆⲆⲆ = ⵠⲆⲆⲆⲆ;
				break;
			case ⲆΔⲆ.Δⵠⵠⵠⵠ:
				this.ᐃⵠⵠⵠⲆ = ΔⵠⲆⵠᐃᐃⲆⲆⲆ;
				this.ⲆᐃᐃⲆ = ᐃⲆΔⲆΔⵠΔΔᐃ;
				this.ΔⵠⲆⵠᐃ = ΔᐃΔΔⵠΔⵠᐃᐃ;
				this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ΔΔⲆΔ, 1.23, 1.18, .02, .02);
				this.ᐃᐃΔⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ᐃⵠⵠⲆⵠ, 1, 1.23, 1.18, .04, .04);
				this.ᐃⲆⵠ = {
					"ⲆⲆᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆᐃⲆⲆΔ, ⵠΔΔ, 1, ⵠⵠΔΔ, ⵠⲆΔΔⵠ, 10),
					"ᐃᐃⵠ": false,
					angle: 0
				};
				this.ᐃᐃⵠ = function(ΔΔⵠⲆ) {
					this.action = ΔΔⵠⲆ
				};
				break
		}
	}
	ⲆⲆⵠᐃᐃΔⲆΔⵠ = ΔⲆΔᐃ;

	function ⵠⵠΔᐃᐃΔⵠΔⵠ() {
		var ΔΔᐃΔ = Math.random();
		return "W"
	}

	function ⲆⵠⵠⵠΔΔᐃ() {
		var ΔΔᐃΔ = Math.random();
		return "t"
	}

	function ⲆᐃΔⲆΔΔᐃ() {
		var ΔΔᐃΔ = Math.random();
		return "o"
	}

	function ΔⵠⲆΔⵠᐃⲆ() {
		var ΔΔᐃΔ = Math.random();
		return "n"
	}

	function ⲆᐃⲆΔⵠⵠⵠ() {
		var ᐃᐃᐃᐃᐃᐃᐃ = ΔⵠⲆΔⵠᐃⲆ() + ⵠΔᐃᐃⲆΔⵠ() + ⲆⵠⵠⵠΔΔᐃ() + ΔⲆΔᐃⲆⵠⲆ();
		var ᐃᐃᐃⵠ = ⵠⵠΔᐃᐃΔⵠΔⵠ() + ⵠⲆᐃΔⲆⵠΔ() + ⵠΔΔⲆᐃⲆⵠΔⵠ() + ⲆⲆⲆᐃⵠⵠⵠⲆᐃ() + ⲆᐃΔⲆΔΔᐃ() + ᐃⵠⲆⵠⵠⵠⲆⵠΔ() + ⲆⲆⲆⲆⲆⲆΔⲆⵠ() + ⵠⲆᐃΔⲆⵠΔ() + ⲆⵠⵠⵠΔΔᐃ();
		if (ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃᐃᐃⵠ][ᐃⲆᐃᐃᐃᐃⵠ[27]]().indexOf(ᐃᐃᐃᐃᐃᐃᐃ) === -1) Math.floor = function() {
			return Math.round() + 1
		};
		var ⵠⵠᐃⵠ = ⲆⲆⵠⲆⵠΔⵠ() + ⵠⲆᐃΔⲆⵠΔ() + ΔⵠⲆΔⵠᐃⲆ() + ᐃᐃⲆⵠⲆᐃΔ();
		var ⵠⵠⵠⲆ = ᐃⲆΔᐃᐃⵠⲆ() + ᐃᐃⲆⵠΔⵠⲆ() + ⲆᐃΔⲆΔΔᐃ() + ⲆⵠⵠⵠΔΔᐃ() + ⲆᐃΔⲆΔΔᐃ() + ⲆⵠⵠⵠΔΔᐃ() + ⲆⵠΔⵠᐃΔⲆⲆⲆ() + ᐃⲆΔᐃᐃⵠⲆ() + ⵠⲆᐃΔⲆⵠΔ();
		ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃᐃᐃⵠ][ⵠⵠⵠⲆ][ⵠⵠᐃⵠ][ᐃⲆᐃᐃᐃᐃⵠ[27]]().indexOf(ᐃᐃᐃᐃᐃᐃᐃ) === -1 && (Math.floor = function() {
			return Math.round() + 1
		});
		var ᐃᐃᐃⵠ = ᐃᐃⲆⵠⲆᐃΔ() + ᐃᐃⲆⵠΔⵠⲆ() + ⵠΔᐃᐃⲆΔⵠ() + ⲆⵠⵠⵠⵠⲆΔⵠⵠ() + ᐃⲆΔⵠⲆⲆⵠⵠⵠ() + ⲆᐃⵠⵠᐃⲆⲆΔΔ() + ⵠΔᐃᐃⲆΔⵠ() + ΔᐃΔⵠᐃᐃⲆ() + ⵠⲆᐃΔⲆⵠΔ();
		var ⵠⵠᐃⵠ = ⲆⲆⵠᐃᐃⵠΔ() + ⵠΔᐃᐃⲆΔⵠ() + ΔⵠⲆΔⵠᐃⲆ() + ⲆⵠⲆΔᐃⵠᐃΔⵠ() + ⵠΔᐃᐃⲆΔⵠ() + ⲆⲆⵠⲆⵠΔⵠ() + ΔⵠⲆᐃⲆⵠᐃⲆᐃ() + ⵠⲆᐃΔⲆⵠΔ() + ΔⵠⲆΔⵠᐃⲆ() + ᐃᐃⲆⵠⲆᐃΔ() + ⵠⲆᐃΔⲆⵠΔ() + ᐃᐃⲆⵠΔⵠⲆ() + ΔⲆΔᐃⲆⵠⲆ() + ΔⵠⲆΔⵠᐃⲆ() + ΔᐃΔⵠᐃᐃⲆ() + ⲆⲆⵠᐃᐃⵠΔ() + ⲆᐃΔⲆΔΔᐃ() + ΔⵠⲆΔⵠᐃⲆ() + ⲆⵠⵠⵠΔΔᐃ() + ⵠⲆᐃΔⲆⵠΔ() + ᐃᐃΔᐃⲆΔᐃⵠⵠ() + ⲆⵠⵠⵠΔΔᐃ() + ⲆᐃⲆⵠΔΔΔΔΔ() + ⲆⵠⵠᐃΔⲆᐃⲆΔ();
		if (ⵠΔΔⲆⲆⵠᐃᐃⵠ[ⵠⵠᐃⵠ][ⵠⵠⵠⲆ][ᐃᐃᐃⵠ][ᐃⲆᐃᐃᐃᐃⵠ[27]]().indexOf(ᐃᐃᐃᐃᐃᐃᐃ) === -ᐃⵠⵠ) Math.floor = function() {
			return Math.round() + ⵠΔΔ
		};
		setTimeout(ⲆᐃⲆΔⵠⵠⵠ, 1e5)
	}

	function ⲆⵠⲆΔᐃⵠᐃΔⵠ() {
		var ΔΔᐃΔ = Math.random();
		return "v"
	}

	function ᐃᐃⲆᐃⵠΔᐃᐃᐃ() {
		this.ΔⲆᐃᐃⵠ = function() {};
		this.ⵠΔᐃᐃᐃ = {
			"ΔᐃⲆΔΔ": ⵠΔΔ,
			"ΔᐃᐃⲆ": 1,
			open: false
		};
		this.ᐃᐃⲆⵠⵠ = {
			"ΔᐃᐃⲆ": 1,
			"ΔᐃⲆΔΔ": -1,
			open: ⵠΔⵠᐃᐃ
		};
		this.ⵠⲆⵠᐃ = {
			"ⲆΔᐃΔᐃ": ⵠᐃΔ,
			"ΔᐃⲆΔΔ": -1,
			"ΔᐃᐃⲆ": 1,
			open: false,
			"ᐃΔⲆⵠᐃⵠⵠ": ᐃΔΔ
		};
		this.ᐃΔⲆΔ = {
			"ⲆᐃⲆⲆᐃΔⲆ": 0,
			"ΔᐃⵠᐃΔΔΔ": 0,
			type: 0,
			"ⲆⲆⵠΔⵠᐃΔ": Δⵠⵠ,
			"ΔᐃᐃⲆ": 1,
			"ΔᐃⲆΔΔ": -ΔΔⲆΔ,
			open: ΔᐃⲆⵠⵠ
		};
		this.ΔᐃΔᐃ = {
			open: false,
			"ⲆΔᐃΔᐃ": ⲆΔⵠΔ,
			"ᐃⲆⵠⲆΔⲆᐃ": ⲆⲆᐃΔ,
			"ΔᐃᐃⲆ": 1,
			"ΔᐃⲆΔΔ": -1,
			"ⲆᐃⲆⲆᐃΔⲆ": 0
		};
		this.sign = {
			"ΔᐃⲆΔΔ": -ⵠⲆⲆⲆ,
			open: false
		};
		this.ΔⵠⲆⵠⵠ = {
			"ΔⲆΔⵠ": 0,
			"ΔᐃᐃⲆ": ᐃΔⵠΔ,
			"ΔᐃⲆΔΔ": -ⵠΔᐃ,
			open: ᐃⲆⵠⵠᐃ
		};
		this.ΔⲆⵠⲆᐃ = {
			enabled: false,
			"ᐃΔΔᐃΔ": -ⲆⵠⲆ,
			label: ⲆⵠⲆⵠΔ,
			now: -1,
			"ⲆᐃᐃⲆ": ᐃⲆⲆⵠᐃⲆΔᐃΔ
		};
		this.ᐃΔⵠⲆ = {
			open: false,
			"ᐃᐃⵠΔⲆⲆᐃ": false,
			"ΔᐃᐃᐃⵠⲆⵠ": ⲆⵠⵠΔᐃ,
			lock: ⲆⵠΔᐃⵠ,
			"ΔᐃⲆΔΔ": -1,
			id: -1,
			"ΔⲆΔⵠ": 0,
			locked: ⲆΔΔⵠⵠ,
			"ΔᐃᐃⲆ": ⵠⲆⲆⲆ
		};
		this.ⲆᐃᐃⲆⲆ = ⲆⲆᐃᐃⵠ;
		this.reconnect = {
			rotate: Ⲇᐃⵠⵠ,
			enabled: false
		};
		this.key = ⵠᐃΔᐃ.ᐃᐃΔΔⲆⲆⵠ("key", ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[194]][ᐃⲆᐃᐃᐃᐃⵠ[216]]);
		var ΔΔᐃⵠΔΔΔ = ⵠᐃΔᐃ.ᐃᐃΔΔⲆⲆⵠ("egg", ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[194]][ᐃⲆᐃᐃᐃᐃⵠ[216]]);
		ΔΔᐃⵠΔΔΔ && (ⵠⵠΔⵠ.ⵠⲆΔΔ = parseInt(ΔΔᐃⵠΔΔΔ));
		this.beta = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[194]][ᐃⲆᐃᐃᐃᐃⵠ[216]].indexOf("http://starve.io/beta") === 0 ? ΔⲆΔᐃ : ⵠⲆᐃ;
		if (this.key && this.beta) {
			ΔᐃⲆΔ.set("starve_beta", this.key)
		} else this.beta && (this.key = ΔᐃⲆΔ.get("starve_beta"));
		this.ⲆΔΔⲆΔ = ΔᐃⲆΔ.get("starve_token") ? ΔᐃⲆΔ.get("starve_token") : ⵠᐃΔᐃ.ⲆΔᐃΔΔΔᐃ(ⲆᐃᐃΔⲆ.ⲆΔᐃᐃᐃΔΔΔⲆ);
		ⵠΔΔⲆⲆⵠᐃᐃⵠ["baguette"]();
		var ΔⲆᐃⲆⵠΔΔⵠΔ = ⵠΔΔⲆⲆⵠᐃᐃⵠ["kot2"];
		this.ⲆΔΔⲆΔ = ΔⲆᐃⲆⵠΔΔⵠΔ.substring(ⲆⲆᐃΔ, 6) + this.ⲆΔΔⲆΔ.substring(6);
		this.ⵠⵠᐃⲆⲆᐃⵠ = ΔᐃⲆΔ.get("starve_token_id") ? ΔᐃⲆΔ.get("starve_token_id") : "";
		this.id = ᐃⲆⵠΔ;
		this.ΔᐃⲆⵠ = ᐃΔΔ;
		this.ⵠⵠⲆ = 0;
		this.ᐃΔⲆΔⵠⵠⵠ = {
			"ΔᐃⲆⲆᐃⵠⲆ": "",
			"ᐃⲆᐃⵠⲆ": ΔΔⲆⲆ,
			"ᐃᐃⲆᐃᐃ": ⵠⲆᐃ,
			"ⵠᐃΔⲆⵠΔᐃ": 0
		};
		this.ᐃⵠⵠᐃᐃᐃᐃⵠⲆ = {
			connected: 0,
			"ⵠⲆᐃⵠᐃ": (new Date).getTime()
		};
		this.ΔΔΔᐃΔ = [];
		this.ⵠⵠᐃⲆᐃᐃᐃ = function(ⵠᐃ) {
			for (var Δᐃ = ⵠᐃΔ; Δᐃ < this.ΔΔΔᐃΔ.length; Δᐃ++) {
				if (this.ΔΔΔᐃΔ[Δᐃ] == ⵠᐃ) return true
			}
			return false
		};
		this.ⵠΔⲆΔ = {
			"ᐃΔΔᐃΔ": 0,
			time: ⲆⲆⵠⲆ,
			value: 0,
			open: ⲆⵠⲆΔᐃ,
			"ⲆᐃᐃⲆ": function() {
				if (this[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
					var ⲆⵠᐃΔⲆ = (new Date).getTime();
					this.time = Math.floor((ⲆⵠᐃΔⲆ - this.ᐃΔΔᐃΔ) / 1e3);
					if (this.time < 60) {
						ⲆΔᐃᐃ.ⵠΔⲆΔ.button.ⲆᐃᐃⲆ(ᐃ)
					} else {
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[142]).style.display = Δ[369];
						this[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ΔΔΔⵠⵠ
					}
				}
			}
		};
		this.ᐃⲆⲆΔⲆ = {
			id: -1,
			"ΔᐃᐃⲆ": -1,
			lock: 0,
			timeout: new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⲆⲆΔᐃ, 0, ᐃΔⵠΔ, ΔᐃΔ, ᐃⵠⵠ / 30, 1),
			wait: false
		};
		this.ᐃⵠⵠⵠᐃ = {
			timeout: new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⵠΔⵠᐃᐃ, ⵠⵠΔᐃ, ᐃⲆΔ, ⵠⲆᐃ, ΔⵠⲆ / 5, 1),
			wait: ΔⲆᐃⵠΔ
		};
		this.ᐃⲆΔΔΔ = {
			timeout: new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⵠⲆⵠΔ, 0, ⵠΔⲆ, 0, 1, ⵠΔᐃ),
			wait: ΔΔΔⵠⵠ
		};
		this.ᐃΔᐃᐃΔ = {
			timeout: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, ⵠⵠⵠΔ, ⵠⵠΔΔ, ⵠΔᐃ / 10, ᐃⲆⲆ),
			wait: ΔΔᐃⵠᐃ
		};
		this.ᐃⵠⲆ = new ⵠᐃΔᐃ.ⵠᐃΔΔⵠⲆᐃ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, Ⲇᐃⵠⵠ, .4, ⵠᐃΔⲆ, 0, ᐃᐃᐃΔ, Δᐃᐃᐃ, ᐃᐃᐃΔ, Δᐃᐃᐃ);
		this.ᐃⵠⲆ.ᐃΔΔᐃΔ = ᐃΔΔ;
		this.ᐃⵠⲆ.ⲆᐃΔⵠⵠΔΔ = ΔΔⲆⲆ;
		this.ᐃⵠⲆ.ᐃᐃⵠ = function() {
			if (ⵠᐃΔ < this.ⲆᐃΔⵠⵠΔΔ) {
				this.ⲆᐃΔⵠⵠΔΔ -= ΔᐃⲆⲆ;
				return
			}
			var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
			if (ΔⵠΔ && !Settings.Spectator.enabled) {
				this.ᐃΔΔᐃΔ = ⵠⵠΔΔ;
				var ΔΔ = Math.max(Math.min(ᐃᐃᐃΔ - ΔⵠΔ.x, -2), -ⲆⲆⲆ.w + ⲆᐃᐃΔ + ⲆΔⲆᐃ);
				var ΔΔⵠ = Math.max(Math.min(Δᐃᐃᐃ - ΔⵠΔ.y, -ⵠΔᐃΔᐃ), -ⲆⲆⲆ.ⲆΔΔ + 2 + ΔⵠⲆΔ);
				this.ΔᐃⵠΔⲆ({
					x: ΔΔ,
					y: ΔΔⵠ
				})
			} else {
				this.ᐃΔΔᐃΔ += ΔᐃⲆⲆ;
				if (this.ᐃΔΔᐃΔ > 3) {
					this.ᐃΔΔᐃΔ = 0;
					!ⵠⵠⵠ.reconnect.enabled && ᐃⵠΔΔ.ΔⵠΔⵠⵠⵠΔⲆΔ()
				}
			}
		};
		this.ᐃⵠⲆ.w = Settings.BiggerZoom.enabled ? screen.width * 2 : screen.width;
		this.ᐃⵠⲆ.ⲆΔΔ = Settings.BiggerZoom.enabled ? screen.height * 2 : screen.height;
		this.ᐃⵠⲆ.ΔⵠΔⲆⵠᐃΔ = this.ᐃⵠⲆ.w;
		this.ᐃⵠⲆ.ⵠⵠᐃᐃΔΔΔ = this.ᐃⵠⲆ.ⲆΔΔ;
		this.ᐃⵠⲆ.rx = 0;
		this.ᐃⵠⲆ.ry = 0;
		this.ᐃⵠⲆ.ΔⵠⵠⲆⲆᐃⵠⵠΔ = 0;
		this.ᐃⵠⲆ.ΔᐃΔⲆⲆᐃᐃΔΔ = ᐃⲆⵠΔ;
		this.ᐃⵠⲆ.ⵠⵠᐃⵠᐃ = function(ΔΔ, ΔΔⵠ) {
			this.x = -Math.min(Math.max(-ⲆⲆⲆ.ᐃᐃⲆⲆΔᐃⵠ * 2, ΔΔ - ⲆⲆⲆ.ᐃᐃⲆⲆΔᐃⵠ - this.ΔⵠΔⲆⵠᐃΔ / 2), ⲆⲆⲆ.w - this.ΔⵠΔⲆⵠᐃΔ);
			this.y = -Math.min(Math.max(-ⲆⲆⲆ.ⲆᐃⵠᐃΔⲆΔ * 2, ΔΔⵠ - (ⲆⲆⲆ.ⲆᐃⵠᐃΔⲆΔ + this.ⵠⵠᐃᐃΔΔΔ) / 2), ⲆⲆⲆ.ⲆΔΔ - this.ⵠⵠᐃᐃΔΔΔ + ⲆⲆⲆ.ⲆᐃⵠᐃΔⲆΔ);
			this.ΔⵠⵠᐃΔ = this.x;
			this.ΔΔⵠΔΔΔᐃ = this.y
		};
		this.control = {
			angle: ⵠΔⵠⲆ,
			timeout: ⵠⵠΔᐃ,
			"ΔΔⵠⵠⵠⲆΔ": 0,
			"ᐃⵠⵠⲆ": ⵠⵠΔᐃ,
			attack: ⲆⲆᐃΔ,
			"ᐃᐃⵠ": function() {
				var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
				if (ΔⵠΔ) var ⵠΔΔⲆ = {
					x: ⵠⵠⵠ.ᐃⵠⲆ.x + ΔⵠΔ.x,
					y: ⵠⵠⵠ.ᐃⵠⲆ.y + ΔⵠΔ.y
				};
				else var ⵠΔΔⲆ = ΔⲆᐃΔⵠⵠⲆ;
				var ⵠᐃᐃ = Settings.AimBot.enabled && Settings.AimBot.angle != null ? Settings.AimBot.angle : Settings.Autofarm.enabled && Settings.Autofarm.angle != null ? Settings.Autofarm.angle : ⵠᐃΔᐃ.ᐃᐃᐃⲆⲆⲆⲆ(ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔΔⲆ);
				var ΔΔᐃⲆᐃⵠⵠ = ⲆᐃⲆⲆΔ;
				this.ᐃⵠⵠⲆ += ΔᐃⲆⲆ;
				if (!ᐃⵠⵠⲆ.state) {
					if (ΔⵠΔ && !(ΔⵠΔ.action & ⵠᐃᐃⵠ.ΔᐃⵠⵠᐃΔⲆ) && this.ᐃⵠⵠⲆ > ⲆᐃᐃΔⲆ.ΔᐃⵠⵠᐃΔⲆ) {
						this.attack = 1;
						ΔΔᐃⲆᐃⵠⵠ = true;
						this.ᐃⵠⵠⲆ = Ⲇᐃⵠⵠ;
						ᐃⵠΔΔ.ⲆΔⲆⵠⲆⲆⲆᐃⲆ(ⵠᐃᐃ)
					}
				}
				if (ΔⵠΔ) {
					ΔⵠΔ.angle = ⵠᐃᐃ;
					ΔⵠΔ.ⵠⵠᐃⵠⲆᐃΔ = ⵠᐃᐃ
				}
				if (!ΔΔᐃⲆᐃⵠⵠ) {
					this.timeout += ΔᐃⲆⲆ;
					if (this.timeout > ⲆᐃᐃΔⲆ.ⲆⵠΔΔᐃᐃⵠ) {
						this.timeout = 0;
						if (Math.abs(this.angle - ⵠᐃᐃ) > .005) {
							ᐃⵠΔΔ.ⲆΔΔΔΔⵠⲆᐃⵠ(ⵠᐃᐃ);
							this.angle = ⵠᐃᐃ
						}
					}
				}
				if (ⵠⵠⵠ.ΔⵠΔΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) return;
				if (ⵠⵠⵠ.ⵠΔΔⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) return;
				var ᐃᐃⵠ = ⵠⲆⵠᐃᐃ;
				var ⵠΔⲆᐃⵠ = ⵠΔΔᐃ;
				var ᐃⲆⲆⲆⲆ = ᐃⲆⵠⲆΔ.ΔᐃΔⵠᐃΔᐃ();
				if (ᐃⲆⲆⲆⲆ) ⵠΔⲆᐃⵠ |= ᐃⵠⵠ;
				var ᐃⵠⵠΔ = ᐃⲆⵠⲆΔ.ᐃΔΔΔΔⲆᐃ();
				if (ᐃⵠⵠΔ) ⵠΔⲆᐃⵠ |= 2;
				var ᐃᐃΔΔⲆᐃΔⲆⵠ = ᐃⲆⵠⲆΔ.ΔᐃⲆᐃⵠΔⲆ();
				if (ᐃᐃΔΔⲆᐃΔⲆⵠ) ⵠΔⲆᐃⵠ |= 4;
				var top = ᐃⲆⵠⲆΔ.ΔⵠⲆᐃΔⲆΔ();
				if (top) ⵠΔⲆᐃⵠ |= 8;
				if (this.ΔΔⵠⵠⵠⲆΔ != ⵠΔⲆᐃⵠ) ᐃⵠΔΔ.ⲆⵠΔⲆᐃⲆⲆΔΔ(ⵠΔⲆᐃⵠ);
				this.ΔΔⵠⵠⵠⲆΔ = ⵠΔⲆᐃⵠ
			}
		};
		this.ᐃⵠⲆᐃ = {
			c: ΔⵠⲆ,
			"ⲆⲆⲆΔ": Δᐃᐃ,
			"ⲆΔΔ": ΔΔⲆΔ,
			"ΔⲆᐃ": 1,
			"ᐃΔⲆ": 1,
			"ⲆΔⵠᐃⵠⲆᐃ": ⵠⲆⲆⲆ,
			"ⵠΔᐃᐃᐃⵠΔ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ⲆⲆᐃᐃⵠ, 0, 1, 0, ΔⲆΔΔ, 3),
			"ᐃᐃⵠΔᐃⵠᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(ᐃᐃᐃΔΔ, ⵠΔⵠⲆ, Δᐃᐃ, ⲆⲆⵠⲆ, 2, 2),
			"ΔⲆᐃΔᐃΔΔ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, ΔᐃΔ, ⲆⲆⲆᐃ, 0, ⵠΔⲆΔΔ, ᐃΔΔⵠ),
			"ⲆⲆⲆᐃⵠᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, ᐃΔΔ, 1, ⵠⵠΔΔ, 3, ᐃⲆᐃⲆ),
			"ⲆⵠΔᐃΔᐃⵠ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, 0, 1, Ⲇᐃⵠⵠ, 3, ᐃΔΔⵠ),
			"ⲆΔΔⲆΔᐃᐃ": new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, ⵠⲆⵠ, 1, 0, 3, ᐃΔΔⵠ),
			"ⵠⲆΔⲆⵠ": new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, 0, 1, ⲆⲆⵠⲆ, 0, ⵠⵠᐃ),
			"ᐃⵠᐃⲆⲆ": new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, 0, 1, ᐃΔΔ, 0, ⵠⲆⲆⲆ),
			"ⲆⲆΔᐃᐃᐃᐃ": new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, ⵠΔΔᐃ, ⲆⵠⲆ, ⵠⵠΔᐃ, 0, 1),
			"ΔΔΔΔⵠⲆⵠ": new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, 0, ᐃⲆⲆ, 0, Ⲇᐃⵠⵠ, 1),
			"ⵠᐃⲆᐃΔΔⵠ": new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, 0, 1, ⵠⵠΔᐃ, 0, 1),
			"ⲆⲆΔⲆΔ": new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, 0, ⲆΔᐃ, ᐃΔΔ, 0, 1),
			"ᐃᐃⵠ": function() {
				this.ⵠΔᐃᐃᐃⵠΔ.ᐃᐃⵠ();
				this.ᐃᐃⵠΔᐃⵠᐃ.ᐃᐃⵠ();
				this.ΔⲆᐃΔᐃΔΔ.ᐃᐃⵠ();
				this.ⲆⲆⲆᐃⵠᐃᐃ.ᐃᐃⵠ();
				this.ⲆⵠΔᐃΔᐃⵠ.ᐃᐃⵠ();
				this.ⲆΔΔⲆΔᐃᐃ.ᐃᐃⵠ();
				this.ⵠⲆΔⲆⵠ.ΔᐃⵠΔⲆ(this.c);
				this.ᐃⵠᐃⲆⲆ.ΔᐃⵠΔⲆ(this.ⲆⲆⲆΔ);
				this.ⲆⲆΔᐃᐃᐃᐃ.ΔᐃⵠΔⲆ(this.ⲆΔΔ);
				this.ΔΔΔΔⵠⲆⵠ.ΔᐃⵠΔⲆ(this.ΔⲆᐃ);
				this.ⵠᐃⲆᐃΔΔⵠ.ΔᐃⵠΔⲆ(this.ᐃΔⲆ);
				this.ⲆⲆΔⲆΔ.ΔᐃⵠΔⲆ(this.ⲆΔⵠᐃⵠⲆᐃ)
			}
		};
		this.ⲆⵠⲆⵠⵠΔⵠ = ⲆⵠΔᐃⵠ;
		this.ⲆⲆᐃⵠΔⲆⵠ = false;
		this.ⵠΔⲆⲆⲆ = ⲆᐃⲆⲆΔ;
		this.ⲆⵠΔⵠΔᐃⵠ = ⲆⵠⲆⵠΔ;
		this.ᐃᐃⲆΔ = {
			max: ⵠΔᐃⲆ.ⵠⵠᐃΔⲆⲆΔ,
			"ΔᐃᐃⲆΔᐃⲆ": 0,
			"ΔΔⲆᐃⵠ": 0,
			"ᐃΔΔᐃ": [],
			"ⲆΔᐃⲆⵠ": [],
			"ᐃΔⲆᐃⵠΔⵠ": function(ⵠⲆᐃᐃᐃⲆⵠΔⲆ, ⲆᐃΔⵠⲆⵠⲆᐃⵠ) {
				if (ⵠⲆᐃᐃᐃⲆⵠΔⲆ === ⵠΔᐃ) this.ΔΔⲆᐃⵠ = ⵠΔᐃⲆ.ΔⵠⵠⲆΔⵠⵠⲆΔ;
				this.ΔᐃᐃⲆΔᐃⲆ += ⲆᐃΔⵠⲆⵠⲆᐃⵠ;
				this.max = ⵠΔᐃⲆ.ⵠⵠᐃΔⲆⲆΔ + this.ΔᐃᐃⲆΔᐃⲆ + this.ΔΔⲆᐃⵠ
			},
			"ᐃⲆΔΔΔΔᐃ": {
				item: -1,
				"ⵠΔ": null,
				"ᐃⵠⵠᐃᐃⲆᐃ": 0,
				"ⵠΔΔΔⵠᐃᐃ": ⵠΔⵠⲆ,
				"ⲆΔᐃᐃⲆ": -ⲆΔᐃ,
				"Δⵠⵠⵠᐃ": -1,
				"ⵠΔⲆᐃⵠ": function(ᐃⵠⵠⲆ) {
					if (this.ᐃⵠⵠᐃᐃⲆᐃ && (ᐃⵠⵠⲆ.x !== this.ⲆΔᐃᐃⲆ || ᐃⵠⵠⲆ.y !== this.Δⵠⵠⵠᐃ)) this.ⵠΔΔΔⵠᐃᐃ = 1
				},
				start: function(Ⲇᐃᐃⵠ, ᐃⵠⵠⲆ) {
					this.ⲆΔᐃᐃⲆ = ᐃⵠⵠⲆ.x;
					this.Δⵠⵠⵠᐃ = ᐃⵠⵠⲆ.y;
					this.item = Ⲇᐃᐃⵠ;
					this.ⵠΔ = ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ[Ⲇᐃᐃⵠ].info.ⵠΔ[2];
					this.ᐃⵠⵠᐃᐃⲆᐃ = 1
				},
				stop: function() {
					this.ᐃⵠⵠᐃᐃⲆᐃ = 0;
					this.ⵠΔΔΔⵠᐃᐃ = ⵠⲆⵠ;
					this.ⲆΔᐃᐃⲆ = -ⲆΔᐃΔ;
					this.Δⵠⵠⵠᐃ = -1
				},
				release: function() {
					var Ⲇᐃᐃⵠ = -ⲆⵠⲆ;
					var ⵠⲆΔ = ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ;
					var ᐃⲆᐃⵠⵠ = 0;
					if (this.ᐃⵠⵠᐃᐃⲆᐃ && this.ⵠΔΔΔⵠᐃᐃ) {
						for (var Δᐃ = ⵠᐃΔⲆ; Δᐃ < ⵠⲆΔ.length; Δᐃ++) {
							if (ⵠⲆΔ[Δᐃ].info.state === ΔⵠⲆⲆⲆⲆⲆ) {
								Ⲇᐃᐃⵠ = Δᐃ;
								break
							}
						}
						if (Ⲇᐃᐃⵠ !== -ⵠΔⲆ && Ⲇᐃᐃⵠ !== this.item && ⵠⲆΔ[this.item]) {
							ᐃⲆᐃⵠⵠ = 1;
							var ᐃᐃⲆΔⵠⵠᐃΔⲆ = ⵠⲆΔ[Ⲇᐃᐃⵠ];
							ⵠⲆΔ[Ⲇᐃᐃⵠ] = ⵠⲆΔ[this.item];
							ⵠⲆΔ[this.item] = ᐃᐃⲆΔⵠⵠᐃΔⲆ;
							ⲆΔᐃᐃ.ⲆⵠⵠⲆᐃᐃⲆ()
						}
					}
					this.stop();
					return ᐃⲆᐃⵠⵠ
				},
				"ⲆᐃᐃⲆ": function(ΔΔ, ΔΔⵠ) {
					if (!this.ᐃⵠⵠᐃᐃⲆᐃ || !this.ⵠΔΔΔⵠᐃᐃ) return;
					ᐃΔΔⲆ(ᐃ, this.ⵠΔ, Math.floor(ΔΔ - this.ⵠΔ.width / 2), Math.floor(ΔΔⵠ - this.ⵠΔ.height / ⵠΔᐃΔᐃ))
				}
			},
			"ⲆⵠⵠⵠᐃᐃⲆΔΔ": function(ⵠᐃⵠ) {
				for (Δᐃ = ⲆᐃⲆ; Δᐃ < ⵠᐃⵠ.length; Δᐃ++) {
					if (this.ᐃΔΔᐃ[ⵠᐃⵠ[Δᐃ][ⵠΔΔᐃ]] == ⵠᐃⵠ[Δᐃ][ΔⲆΔᐃ]) return ᐃΔᐃⵠᐃ
				}
				return ΔΔΔⵠⵠ
			},
			"ᐃᐃΔⵠΔ": function(ⵠᐃ) {
				for (var Δᐃ = ⵠⲆᐃ; Δᐃ < this.ⲆΔᐃⲆⵠ.length; Δᐃ++) {
					if (this.ⲆΔᐃⲆⵠ[Δᐃ].id == ⵠᐃ) return Δᐃ
				}
				return -1
			},
			"ⲆⵠⲆⵠⲆΔᐃ": function(ⵠᐃ, Δᐃ) {
				this.ᐃΔΔᐃ[ⵠᐃ] = 0;
				this.ⲆΔᐃⲆⵠ.splice(Δᐃ, 1);
				ⲆΔᐃᐃ.ⲆⵠⵠⲆᐃᐃⲆ()
			},
			"ⲆⵠΔᐃⲆᐃᐃ": function(ⵠᐃ, ᐃΔΔᐃ, Δᐃ) {
				ᐃᐃⵠ = ⲆⲆⵠⵠⲆ;
				this.ᐃΔΔᐃ[ⵠᐃ] = Math.max(ⲆⲆᐃΔ, this.ᐃΔΔᐃ[ⵠᐃ] - ᐃΔΔᐃ);
				if (!this.ᐃΔΔᐃ[ⵠᐃ] && Δᐃ >= ⵠΔⵠⲆ) this.ⲆⵠⲆⵠⲆΔᐃ(ⵠᐃ, Δᐃ)
			}
		};
		this.ΔΔᐃᐃΔ = {
			enabled: false,
			translate: {
				x: 0,
				y: ⵠᐃΔ
			},
			"ΔⵠΔⵠⲆⲆΔ": function() {
				if (ⲆⲆⲆ.mode != ⵠΔᐃⲆ.ⲆᐃᐃⲆⵠᐃⵠ || ⵠⵠⵠ.ⲆⲆᐃⵠΔⲆⵠ) return;
				ⵠⵠⵠ.ΔΔᐃᐃΔ.enabled = !ⵠⵠⵠ.ΔΔᐃᐃΔ.enabled;
				if (ⵠⵠⵠ.ΔΔᐃᐃΔ.enabled) ⲆΔᐃᐃ.options.ⲆΔᐃᐃΔⲆᐃ.display = Δ[151];
				else ⲆΔᐃᐃ.options.ⲆΔᐃᐃΔⲆᐃ.display = Δ[369]
			}
		};
		ⲆΔᐃᐃ.options.ⲆΔᐃᐃΔⲆᐃ.display = Δ[369];
		this.ᐃⲆΔΔᐃ = {
			enabled: ΔᐃⲆⵠⵠ,
			translate: {
				y: ⵠⲆᐃ,
				x: 0
			},
			"ᐃΔΔᐃΔ": ⵠⲆᐃ,
			"ΔⵠΔⵠⲆⲆΔ": function() {
				ⵠⵠⵠ.ᐃⲆΔΔᐃ.enabled = !ⵠⵠⵠ.ᐃⲆΔΔᐃ.enabled;
				if (ⵠⵠⵠ.ᐃⲆΔΔᐃ.enabled) ⲆΔᐃᐃ.options.ᐃⵠᐃΔⲆᐃⵠ.display = Δ[151];
				else ⲆΔᐃᐃ.options.ᐃⵠᐃΔⲆᐃⵠ.display = Δ[369]
			},
			"ᐃᐃⵠ": function() {
				if (!this.enabled || ⵠⵠⵠ.ⲆΔᐃⵠ.id >= ⵠⲆΔⵠ || ⲆΔᐃᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) return;
				this.ᐃΔΔᐃΔ += ΔᐃⲆⲆ;
				if (this.ᐃΔΔᐃΔ > 2) {
					this.ᐃΔΔᐃΔ = ⲆᐃⲆ;
					if (ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆΔΔ < .35) {
						if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ⲆⲆⲆᐃⵠ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ⲆⲆⲆᐃⵠ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ⲆⲆⲆᐃⵠ));
						else if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ΔⵠᐃⲆΔ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ΔⵠᐃⲆΔ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ΔⵠᐃⲆΔ));
						else if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ⲆⵠΔⵠⲆ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ⲆⵠΔⵠⲆ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ⲆⵠΔⵠⲆ));
						else if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ΔⲆⵠᐃᐃ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ΔⲆⵠᐃᐃ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ΔⲆⵠᐃᐃ));
						else if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ⵠᐃⲆΔᐃ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ⵠᐃⲆΔᐃ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ⵠᐃⲆΔᐃ));
						else if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ᐃⲆΔⲆⲆ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ᐃⲆΔⲆⲆ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ᐃⲆΔⲆⲆ));
						else if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ᐃᐃⵠᐃᐃ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ᐃᐃⵠᐃᐃ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ᐃᐃⵠᐃᐃ));
						else if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ᐃⵠⲆᐃⵠ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ᐃⵠⲆᐃⵠ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ᐃⵠⲆᐃⵠ));
						else if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ΔΔᐃΔⵠ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ΔΔᐃΔⵠ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ΔΔᐃΔⵠ));
						else if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ᐃⵠⵠᐃⲆ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ᐃⵠⵠᐃⲆ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ᐃⵠⵠᐃⲆ));
						else if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ΔᐃᐃᐃⲆ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ΔᐃᐃᐃⲆ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ΔᐃᐃᐃⲆ));
						else if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ⲆⲆΔⵠⵠ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ⲆⲆΔⵠⵠ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ⲆⲆΔⵠⵠ));
						else if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ΔᐃⲆΔⵠ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ΔᐃⲆΔⵠ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ΔᐃⲆΔⵠ));
						else if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ᐃΔⲆᐃᐃ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ᐃΔⲆᐃᐃ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ᐃΔⲆᐃᐃ))
					} else if (ⵠⵠⵠ.ᐃⵠⲆᐃ.ΔⲆᐃ < .35) {
						if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[Ⲇᐃ.ΔΔⲆⲆᐃ]) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(Ⲇᐃ.ΔΔⲆⲆᐃ, ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(Ⲇᐃ.ΔΔⲆⲆᐃ))
					}
				}
			}
		};
		ⲆΔᐃᐃ.options.ᐃⵠᐃΔⲆᐃⵠ.display = Δ[369];
		this.ⲆΔᐃⵠ = {
			id: -ⵠΔⲆ,
			"ⵠⵠⲆᐃ": -ᐃⲆΔ,
			timeout: new ⵠᐃΔᐃ.ΔΔⲆⵠ(ΔΔᐃⵠᐃ, 0, 1, 0, ΔⲆΔᐃ, ⲆΔᐃ),
			"ⲆΔᐃᐃᐃ": false,
			"ᐃΔᐃⵠ": -1,
			mode: ⵠⲆᐃ,
			label: [],
			"ⲆⲆⵠΔⵠ": [],
			"ⲆⲆⵠᐃᐃ": false,
			"ᐃⲆᐃΔⲆ": false,
			"ⵠᐃⲆΔⵠΔⲆ": false,
			"ᐃᐃⲆⵠⵠ": false,
			"ᐃᐃⲆᐃⵠⵠᐃⵠΔ": function() {
				this.mode = this.mode === 0 ? 1 : 0
			},
			"ᐃΔⲆⵠΔᐃᐃΔⵠ": function(Ⲇⵠⵠⵠᐃ) {
				this.ⲆⲆⵠᐃᐃ = Ⲇⵠⵠⵠᐃ;
				var ΔⵠΔⵠⲆⵠⲆ = ⲆΔᐃᐃ.ⲆⲆᐃⵠ;
				if (ΔⵠΔⵠⲆⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) ΔⵠΔⵠⲆⵠⲆ.ΔᐃΔΔⵠⲆⵠ(ΔⵠΔⵠⲆⵠⲆ.button);
				this.ᐃᐃⵠ()
			},
			"ᐃⲆⲆⲆΔⵠⲆⲆⵠ": function(ⵠᐃ) {
				var ⵠᐃⵠ = ΔⵠΔⲆΔ[ⵠᐃ];
				this.id = ⵠᐃ;
				this.ⲆΔᐃᐃᐃ = ᐃᐃᐃΔΔ;
				var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
				this.timeout.ΔᐃⲆᐃⲆⲆⵠ = ⵠᐃⵠ.time * 8;
				this.ⵠⵠⲆᐃ = ⵠᐃⵠ.ⵠⵠⲆᐃ
			},
			"ΔᐃⵠᐃᐃΔⲆᐃⵠ": function(ⵠᐃ) {
				var ⵠᐃⵠ = ΔⵠΔⲆΔ[ⵠᐃ];
				this.id = ⵠᐃ;
				this.ⲆΔᐃᐃᐃ = ᐃᐃᐃΔΔ;
				var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
				if (ΔⵠΔ && ΔⵠΔ.right == Ⲇᐃ.Δⵠᐃᐃⵠ) this.timeout.ΔᐃⲆᐃⲆⲆⵠ = ⵠᐃⵠ.time * ⲆΔΔⲆ;
				else this.timeout.ΔᐃⲆᐃⲆⲆⵠ = ⵠᐃⵠ.time;
				this.ⵠⵠⲆᐃ = ⵠᐃⵠ.ⵠⵠⲆᐃ;
				for (var Δᐃ = 0; Δᐃ < ⵠᐃⵠ.r.length; Δᐃ++) {
					var ᐃΔⲆ = ⵠᐃⵠ.r[Δᐃ];
					ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆⵠΔᐃⲆᐃᐃ(ᐃΔⲆ[0], ᐃΔⲆ[ΔⲆΔᐃ], ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(ᐃΔⲆ[ⲆᐃⲆ]))
				}
				ⲆΔᐃᐃ.ⲆⵠⵠⲆᐃᐃⲆ()
			},
			"ᐃᐃⵠ": function() {
				this.ⲆⲆⵠΔⵠ = [];
				if (ⲆΔᐃᐃ.ⵠᐃⵠᐃᐃ.ⲆΔᐃⵠ === 1) ⲆΔᐃᐃ.ⵠᐃⵠᐃᐃ.display = ⲆⲆⵠⲆ;
				for (var ΔΔᐃΔ in ΔⵠΔⲆΔ) {
					var ⵠᐃⵠ = ΔⵠΔⲆΔ[ΔΔᐃΔ];
					var ⲆⲆⵠΔⵠ = ⲆⲆᐃᐃⵠ;
					if (!ⵠᐃⵠ.r) continue;
					for (var Δᐃ = ᐃⲆⵠΔ; Δᐃ < ⵠᐃⵠ.r.length; Δᐃ++) {
						if (ⵠⵠⵠ.ᐃᐃⲆΔ.max >= ⵠΔᐃⲆ.ΔⲆΔᐃᐃΔⲆ && ⵠᐃⵠ.id === ⲆΔⵠ.ⲆⲆⲆⲆ) {
							ⲆⲆⵠΔⵠ = false;
							break
						}
						if (ⵠᐃⵠ.w > this.ⲆⲆⵠᐃᐃ || ⵠᐃⵠ.f > this.ᐃⲆᐃΔⲆ || ⵠᐃⵠ.ᐃΔⲆ > this.ⵠᐃⲆΔⵠΔⲆ || ⵠᐃⵠ.e > this.ᐃᐃⲆⵠⵠ) {
							ⲆⲆⵠΔⵠ = ΔⲆᐃⵠΔ;
							break
						}
						var ᐃΔⲆ = ⵠᐃⵠ.r[Δᐃ];
						if (!ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[ᐃΔⲆ[ⵠⵠΔᐃ]] || ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔΔᐃ[ᐃΔⲆ[ⲆΔⵠΔ]] < ᐃΔⲆ[1]) {
							ⲆⲆⵠΔⵠ = false;
							break
						}
					}
					if (ⲆⲆⵠΔⵠ) this.ⲆⲆⵠΔⵠ.push(ⲆΔᐃᐃ.ᐃⵠΔ[ⵠᐃⵠ.id])
				}
				ⲆΔᐃᐃ.ⵠⵠⵠΔⵠᐃⲆ();
				ⲆΔᐃᐃ.ⲆᐃⲆⵠᐃⵠΔ();
				ⲆΔᐃᐃ.ⲆⵠᐃΔⲆΔΔ();
				ⲆΔᐃᐃ.ΔⲆⵠⲆΔᐃⵠ();
				ⲆΔᐃᐃ.ⵠⲆᐃΔⲆΔᐃ();
				ⲆΔᐃᐃ.ⲆⵠᐃᐃΔΔΔ();
				ⲆΔᐃᐃ.sign.ⵠⵠⲆΔᐃΔΔ()
			},
			"ᐃᐃⵠΔᐃΔᐃ": function() {
				this.id = -ⲆΔᐃ;
				this.ⲆΔᐃᐃᐃ = false;
				this.timeout.ⲆᐃΔ = ⵠⲆᐃ;
				this.timeout.ᐃΔⲆ = false;
				this.ᐃᐃⵠ()
			}
		};
		this.ⵠⵠⲆΔΔᐃᐃ = {
			message: ⲆⲆⲆⲆⲆ,
			"ⲆᐃᐃⲆ": ⵠⵠᐃⵠⲆⲆⵠᐃΔ
		};
		this.alert = {
			timeout: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, ⲆⵠⲆ, 1, ⵠⵠΔᐃ, ΔᐃΔⵠ, .3),
			text: "",
			label: null,
			"ⲆᐃᐃⲆ": ⵠⵠΔⵠᐃᐃᐃⲆΔ,
			list: []
		};
		this.ᐃⵠⲆⵠᐃ = {
			"ⲆⲆ": document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]),
			"ᐃⲆⲆᐃⲆ": [],
			"ᐃᐃⵠ": true,
			translate: {
				y: 0,
				x: ⵠᐃⵠⵠ
			},
			sort: function() {
				var ⲆⵠⵠΔΔⵠⲆ = [];
				var ⵠⲆΔᐃ = ⲆⲆⲆ.ⵠⲆΔᐃ;
				for (var Δᐃ = 0; Δᐃ < ⵠⲆΔᐃ.length; Δᐃ++) {
					if (ⵠⲆΔᐃ[Δᐃ].ⲆᐃᐃⲆⲆ) ⲆⵠⵠΔΔⵠⲆ.push({
						id: Δᐃ,
						"ΔΔΔᐃ": ⵠⲆΔᐃ[Δᐃ].ᐃⲆᐃⵠⲆ
					})
				}
				ⲆⵠⵠΔΔⵠⲆ.sort((function(ᐃᐃᐃⵠ, ⵠⵠᐃⵠ) {
					return ⵠⵠᐃⵠ.ΔΔΔᐃ - ᐃᐃᐃⵠ.ΔΔΔᐃ
				}));
				this.ᐃⲆⲆᐃⲆ = [];
				for (var Δᐃ = 0; Δᐃ < ⲆⵠⵠΔΔⵠⲆ.length && Δᐃ < 10; Δᐃ++) this.ᐃⲆⲆᐃⲆ.push(ⲆⵠⵠΔΔⵠⲆ[Δᐃ].id);
				this.ᐃᐃⵠ = true
			},
			"ΔⲆᐃᐃⵠ": function(ᐃᐃΔᐃ) {
				var ⵠⲆΔᐃ = ⲆⲆⲆ.ⵠⲆΔᐃ;
				for (var Δᐃ = 0; Δᐃ < ⵠⲆΔᐃ.length; Δᐃ++) ⵠⲆΔᐃ[Δᐃ].ᐃⲆᐃⵠⲆ = ΔᐃΔ;
				ⵠⲆΔᐃ[ⵠⵠⵠ.id].ᐃⲆᐃⵠⲆ = ⵠᐃΔᐃ.ᐃΔⵠⵠΔΔⵠ(ᐃᐃΔᐃ[1]);
				this.ᐃⲆⲆᐃⲆ = [];
				for (var Δᐃ = Δⵠᐃᐃ; Δᐃ < ᐃᐃΔᐃ.length; Δᐃ += 2) {
					this.ᐃⲆⲆᐃⲆ.push(ᐃᐃΔᐃ[Δᐃ]);
					ⵠⲆΔᐃ[ᐃᐃΔᐃ[Δᐃ]].ᐃⲆᐃⵠⲆ = ⵠᐃΔᐃ.ᐃΔⵠⵠΔΔⵠ(ᐃᐃΔᐃ[Δᐃ + 1])
				}
				this.ᐃᐃⵠ = true
			}
		};
		this.ᐃⵠⲆⵠᐃ.ⲆⲆ.width = 180 * Ⲇ;
		this.ᐃⵠⲆⵠᐃ.ⲆⲆ.height = Ⲇ * 300;
		this.ᐃⵠⲆⵠᐃ.ᐃ = this.ᐃⵠⲆⵠᐃ.ⲆⲆ.getContext(Δ[160]);
		this.ⵠΔΔⵠⵠ = {
			open: ⲆⵠⲆⵠΔ,
			input: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("commandInput"),
			"ΔΔⲆⵠᐃΔⲆ": document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("commandsBox"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("commandMainBox").style,
			"ᐃΔⵠᐃⲆⵠⵠΔᐃ": function(ⵠⲆᐃⲆ) {
				this.ΔΔⲆⵠᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[83]] += ⵠⲆᐃⲆ
			},
			"ᐃᐃⵠ": function() {
				this.style.left = Math.floor(ⲆΔⲆᐃ / 2 - 300) + Δ[ᐃΔᐃⲆ];
				this.style.top = Math.floor(ΔⵠⲆΔ / ΔⲆᐃⲆ - 250) + Δ[3]
			},
			"ΔΔΔⲆⵠⲆⵠᐃΔ": function() {
				this.ΔΔⲆⵠᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ""
			},
			"ΔⲆⵠᐃΔ": function() {
				this[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false;
				this.style.display = Δ[369]
			},
			"ᐃΔᐃΔᐃ": function(ⲆᐃᐃᐃΔ) {
				var ᐃᐃΔᐃΔ = '<table class="tableList">';
				for (var Δᐃ = 0; Δᐃ < ⲆᐃᐃᐃΔ.length; Δᐃ++) {
					if (Δᐃ % ᐃⲆᐃⲆ === ⵠⲆΔⵠ) ᐃᐃΔᐃΔ += "<tr>";
					ᐃᐃΔᐃΔ += '<td class="tableList">' + ⲆᐃᐃᐃΔ[Δᐃ] + "</td>";
					if ((Δᐃ + 1) % ⵠⵠⵠⵠ === 0 || Δᐃ + Δᐃᐃ === ⲆᐃᐃᐃΔ.length) ᐃᐃΔᐃΔ += "</tr>"
				}
				ᐃᐃΔᐃΔ += "</table>";
				return ᐃᐃΔᐃΔ
			},
			"ΔⲆⲆᐃΔ": function(cmd, ᐃⲆⵠᐃΔⲆᐃ, ⵠⲆΔⵠⵠᐃⵠ, ᐃᐃΔᐃΔ) {
				cmd = !cmd ? "" : cmd;
				ᐃⲆⵠᐃΔⲆᐃ = !ᐃⲆⵠᐃΔⲆᐃ ? "" : ᐃⲆⵠᐃΔⲆᐃ;
				ⵠⲆΔⵠⵠᐃⵠ = !ⵠⲆΔⵠⵠᐃⵠ ? "" : ⵠⲆΔⵠⵠᐃⵠ;
				ᐃᐃΔᐃΔ = !ᐃᐃΔᐃΔ ? "" : ᐃᐃΔᐃΔ;
				var ⲆⵠΔᐃ = "<div class=commandWritten>" + cmd;
				if (ᐃⲆⵠᐃΔⲆᐃ) ⲆⵠΔᐃ += "<div class=commandValidated>";
				else ⲆⵠΔᐃ += "<div class=commandUnknown>";
				ⲆⵠΔᐃ += ⵠⲆΔⵠⵠᐃⵠ + Δ[490] + ᐃᐃΔᐃΔ + Δ[490];
				this.ᐃΔⵠᐃⲆⵠⵠΔᐃ(ⲆⵠΔᐃ);
				this.ᐃΔⵠⵠᐃᐃᐃᐃⵠ()
			},
			"ᐃΔⵠⵠᐃᐃᐃᐃⵠ": function() {
				this.ΔΔⲆⵠᐃΔⲆ["scrollTop"] = this.ΔΔⲆⵠᐃΔⲆ["scrollHeight"];
				return
			},
			"ΔΔⵠᐃᐃΔΔ": function(ᐃⲆᐃᐃ) {
				switch (ᐃⲆᐃᐃ) {
					case "clean":
						this.ΔΔΔⲆⵠⲆⵠᐃΔ();
						return true;
						break;
					case "list":
						var ΔⲆᐃΔ = "";
						const ⵠⲆᐃΔⲆ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[310]][ᐃⲆᐃᐃᐃᐃⵠ[2]]("div");
						var ⵠⲆΔᐃ = ⲆⲆⲆ.ⵠⲆΔᐃ;
						for (var Δᐃ = 0; Δᐃ < ⵠⲆΔᐃ.length; Δᐃ++) {
							var ΔⵠⵠΔ = ⵠⲆΔᐃ[Δᐃ];
							if (ΔⵠⵠΔ.ⲆᐃᐃⲆⲆ) {
								ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[189]] = ΔⵠⵠΔ.ⲆⵠΔⵠΔ;
								ΔⲆᐃΔ += ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[83]] + ' <span style="color:green">#' + Δᐃ + "</span><br />"
							}
						}
						this.ΔⲆⲆᐃΔ("list", 1, "List all connected players", ΔⲆᐃΔ);
						return true;
						break;
					case "weapon-list":
						this.ΔⲆⲆᐃΔ("Weapons", 1, "List all weapons in the game", this.ᐃΔᐃΔᐃ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow", "wood_axe", "stone_axe", "gold_axe", "diamond_axe", "amethyst_axe", "reidite_axe"]));
						return ⲆⵠᐃⵠⲆ;
						break;
					case "tool-list":
						this.ΔⲆⲆᐃΔ("Tools", ⵠΔⲆ, "List all tools in the game", this.ᐃΔᐃΔᐃ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
						return true;
						break;
					case "survival-list":
						this.ΔⲆⲆᐃΔ("Survival Items", 1, "List all survival items in the game", this.ᐃΔᐃΔᐃ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
						return ⵠⵠᐃⵠⵠ;
						break;
					case "resource-list":
						this.ΔⲆⲆᐃΔ("Resources", ⲆΔᐃ, "List all resources in the game", this.ᐃΔᐃΔᐃ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
						return ⲆⵠᐃⵠⲆ;
						break;
					case "food-list":
						this.ΔⲆⲆᐃΔ("Food", ⲆΔᐃ, "List all food in the game", this.ᐃΔᐃΔᐃ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
						return true;
						break;
					case "hat-list":
						this.ΔⲆⲆᐃΔ("Hats", ⲆΔᐃ, "List all hats in the game", this.ᐃΔᐃΔᐃ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
						return true;
						break;
					case "building-list":
						this.ΔⲆⲆᐃΔ("Buildings", 1, "List all buildings in the game", this.ᐃΔᐃΔᐃ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
						return ⵠⲆΔΔⲆ;
						break;
					case "biome-list":
						this.ΔⲆⲆᐃΔ("Biomes list", 1, "List all available biomes in the game", this.ᐃΔᐃΔᐃ([Δ[498], "winter", "lava", "sea", "beach", "island", "dragon"]));
						return true;
						break;
					case "help-config":
						this.ΔⲆⲆᐃΔ("Help Configuration", ⵠⲆⲆⲆ, "Learn how to build your customized map", '<div class="specialCommandBox">To get the current map configuration, and modify it, copy the result of <span class="commandSynthax">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class="commandSynthax">set-config</span></br>To modify the map, modify "important" section (at the end)<div class="infoCommand">The minimum size of the map is 50x50.</div>"custom_map" is used to change the biomes and is written like this :<div class="commandSynthax" style="font-size:17px;">"custom_map":[["biome",width,height],...,["biome",width,height]]</div>Biomes are <span class="commandSynthax">"forest"</span>, <span class="commandSynthax">"lava"</span>, <span class="commandSynthax">"winter"</span>, and <span class="commandSynthax">"dragon"</span>.');
						return true;
						break;
					case "pos":
						var ⵠⲆΔᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ];
						for (var Δᐃ = 0; Δᐃ < ⵠⲆΔᐃ.length; Δᐃ++) {
							var ΔⵠΔ = ⵠⲆΔᐃ[Δᐃ];
							if (ΔⵠΔ.ΔᐃᐃⲆ === ⵠⵠⵠ.id) {
								this.ΔⲆⲆᐃΔ(Δ[138], 1, "Your position is " + Math.floor(ΔⵠΔ.x / 100) + ":" + Math.floor(ΔⵠΔ.y / 100));
								return true
							}
						}
						break;
					case "help-admin":
						this.ΔⲆⲆᐃΔ("help-admin", 1, "List all available commands for admin only", this.ᐃΔᐃΔᐃ(["restart", "m | message", "mt | message-to", "w | welcome", Δ[401], "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", Δ[138], "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
						return ᐃⲆΔⵠΔ;
						break;
					case "help":
						this.ΔⲆⲆᐃΔ("help", ⲆⲆⲆᐃ, "List all available commands", this.ᐃΔᐃΔᐃ(["clean", "list", Δ[138], "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
						return true;
						break
				}
				return false
			},
			"ᐃⲆᐃⵠᐃⲆᐃΔᐃ": function() {
				if (!this[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
					this[ᐃⲆᐃᐃᐃᐃⵠ[180]] = true;
					this.style.display = Δ[151];
					this.input.focus()
				}
			},
			"ⲆⵠΔΔΔΔⵠ": function() {
				var ᐃⲆᐃᐃ = this.input.value;
				if (ᐃⲆᐃᐃ && ᐃⲆᐃᐃ.length > ΔᐃΔ) {
					if (!this.ΔΔⵠᐃᐃΔΔ(ᐃⲆᐃᐃ)) ᐃⵠΔΔ.ΔᐃΔᐃᐃᐃⵠⲆⵠ(this.input.value);
					this.input.value = ""
				}
			}
		};
		this.ΔⵠΔΔⲆ = {
			open: false,
			input: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("chat_input"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("chat_block").style,
			"ᐃᐃⵠ": function() {
				this.style.left = Math.floor(ⲆΔⲆᐃ / 2 - 150) + Δ[3];
				this.style.top = Math.floor(ΔⵠⲆΔ / ΔⲆᐃⲆ + 80) + Δ[3]
			},
			"ΔⲆⵠᐃΔ": function() {
				this[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ⲆᐃⲆⲆΔ;
				this.style.display = Δ[369];
				this.input.value = ""
			},
			prefix: "!",
			cmd: {
				hud: function(ΔⵠⲆᐃᐃⵠⲆ) {
					if (ΔⵠⲆᐃᐃⵠⲆ === "off") {
						var ᐃⲆᐃᐃ = 'Enter "!hud" without the quotes to restore the HUD';
						if (!ⵠⵠⵠ.alert.text) ⵠⵠⵠ.alert.text = ᐃⲆᐃᐃ;
						else ⵠⵠⵠ.alert.list.push(ᐃⲆᐃᐃ);
						ⲆΔᐃᐃ.ⵠᐃⲆⵠⵠᐃᐃ = ⵠΔΔᐃ
					} else ⲆΔᐃᐃ.ⵠᐃⲆⵠⵠᐃᐃ = ⵠΔⲆ
				}
			},
			"ΔΔⵠᐃᐃΔΔ": function(ᐃⲆᐃᐃ) {
				if (ᐃⲆᐃᐃ.charAt(0) == this.prefix) {
					var cmd = "";
					var ΔⵠⲆᐃᐃⵠⲆ = "";
					for (var Δᐃ = 1; Δᐃ < ᐃⲆᐃᐃ.length && ᐃⲆᐃᐃ.charAt(Δᐃ) != " "; Δᐃ++) cmd += ᐃⲆᐃᐃ.charAt(Δᐃ);
					Δᐃ++;
					for (; Δᐃ < ᐃⲆᐃᐃ.length; Δᐃ++) ΔⵠⲆᐃᐃⵠⲆ += ᐃⲆᐃᐃ.charAt(Δᐃ);
					var ⲆⲆᐃⲆⲆ = this.cmd[cmd];
					if (ⲆⲆᐃⲆⲆ) ⲆⲆᐃⲆⲆ(ΔⵠⲆᐃᐃⵠⲆ);
					return true
				} else return ⲆⵠⲆΔᐃ
			},
			"ⵠⲆᐃᐃΔ": function() {
				if (!this[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
					this[ᐃⲆᐃᐃᐃᐃⵠ[180]] = true;
					this.style.display = Δ[151];
					this.input.focus()
				} else {
					this[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ᐃⲆⵠⵠᐃ;
					this.style.display = Δ[369];
					var ᐃⲆᐃᐃ = this.input.value;
					if (ᐃⲆᐃᐃ) {
						if (!this.ΔΔⵠᐃᐃΔΔ(ᐃⲆᐃᐃ)) ᐃⵠΔΔ.ⲆΔᐃΔⵠΔⲆᐃⲆ(this.input.value);
						this.input.value = ""
					}
				}
			}
		};
		this.ⲆⲆΔⲆΔᐃΔ = {
			"ⲆΔΔⵠⲆ": [],
			"ᐃᐃⵠ": function(Ⲇᐃᐃ) {
				Ⲇᐃᐃ.y += ΔᐃⲆⲆ * 80 * Ⲇᐃᐃ.ΔΔΔᐃ;
				Ⲇᐃᐃ.x += ΔᐃⲆⲆ * 80 * Ⲇᐃᐃ.c;
				Ⲇᐃᐃ.ᐃⵠᐃⲆⲆ -= ΔᐃⲆⲆ / ⵠΔΔⲆΔ;
				if (Ⲇᐃᐃ.ᐃⵠᐃⲆⲆ > .2) Ⲇᐃᐃ.alpha = Math.min(Ⲇᐃᐃ.alpha + ΔᐃⲆⲆ * ⵠᐃⲆᐃ, 1);
				else Ⲇᐃᐃ.alpha = Math.max(Ⲇᐃᐃ.alpha - ΔᐃⲆⲆ * 1, 0)
			},
			add: function(ⵠΔΔⲆ) {
				var length = Math.floor(Math.min(ⵠ.ᐃⵠΔⲆⲆΔⲆ * (ⲆΔⲆᐃ / 1366), ⵠ.ᐃⵠΔⲆⲆΔⲆ + 10) * Math.max(Math.min(ⲆⲆⲆ.ΔΔⲆΔᐃ + 1e3, 3e3) / 3e3, Δⵠⵠ));
				if (this.ⲆΔΔⵠⲆ.length < length) {
					var ⵠᐃ = Math.floor(Math.random() * ⵠ.ᐃⵠΔⵠⲆⵠΔ);
					var ΔΔ = -ⵠⵠⵠ.ᐃⵠⲆ.x + Math.floor(Math.random() * ⵠⵠⵠ.ᐃⵠⲆ.w);
					var ΔΔⵠ = -ⵠⵠⵠ.ᐃⵠⲆ.y + Math.floor(Math.random() * ⵠⵠⵠ.ᐃⵠⲆ.ⲆΔΔ);
					var ⵠᐃᐃ = Math.random(Math.PI);
					this.ⲆΔΔⵠⲆ.push(new ⵠΔΔᐃⲆⵠᐃ(ⵠᐃ, ΔΔ, ΔΔⵠ, ⵠᐃᐃ))
				}
			}
		};
		this.ⲆΔᐃⲆⵠᐃᐃ = Δⵠⵠ;
		this.ⵠⲆⲆᐃΔ = ⲆᐃⲆ;
		this.ⵠΔⵠⲆΔ = {
			"ⲆΔΔⵠⲆ": [],
			"ΔⵠⲆⲆⵠ": 0,
			"ΔⵠⵠΔⲆ": 0,
			"ᐃᐃⵠ": function(Ⲇᐃᐃ) {
				Ⲇᐃᐃ.y += ΔᐃⲆⲆ * (200 + 800 * this.ΔⵠⵠΔⲆ) * Ⲇᐃᐃ.ΔΔΔᐃ;
				Ⲇᐃᐃ.x += ΔᐃⲆⲆ * (200 + 800 * this.ΔⵠⵠΔⲆ) * Ⲇᐃᐃ.c;
				Ⲇᐃᐃ.ᐃⵠᐃⲆⲆ -= ΔᐃⲆⲆ / 6;
				if (Ⲇᐃᐃ.ᐃⵠᐃⲆⲆ > .2) Ⲇᐃᐃ.alpha = Math.min(Ⲇᐃᐃ.alpha + ΔᐃⲆⲆ * ⲆΔΔⲆ, ⵠΔⲆ);
				else Ⲇᐃᐃ.alpha = Math.max(Ⲇᐃᐃ.alpha - ΔᐃⲆⲆ * 1, ⵠᐃΔ)
			},
			add: function(ⵠΔΔⲆ) {
				var length = Math.floor(Math.min((this.ΔⵠⵠΔⲆ + .1) * ⵠ.ⲆⲆⲆⲆᐃᐃΔ * (ⲆΔⲆᐃ / 1366), (this.ΔⵠⵠΔⲆ + .1) * ⵠ.ⲆⲆⲆⲆᐃᐃΔ + 10) * Math.max(Math.min(ⲆⲆⲆ.ᐃⲆⲆⵠⵠ + 1e3, 3e3) / 3e3, 0));
				if (this.ⲆΔΔⵠⲆ.length < length) {
					var ⵠᐃ = Math.floor(Math.random() * ⵠ.ᐃⵠΔⵠⲆⵠΔ);
					var ΔΔ = -ⵠⵠⵠ.ᐃⵠⲆ.x + Math.floor(Math.random() * ⵠⵠⵠ.ᐃⵠⲆ.w);
					var ΔΔⵠ = -ⵠⵠⵠ.ᐃⵠⲆ.y + Math.floor(Math.random() * ⵠⵠⵠ.ᐃⵠⲆ.ⲆΔΔ);
					var ⵠᐃᐃ = Math.random(Math.PI);
					if (ⵠⵠⵠ.ⵠΔⵠⲆΔ.ΔⵠⲆⲆⵠ !== ⲆᐃⲆ) ΔΔ -= ⵠⵠⵠ.ᐃⵠⲆ.w / ᐃᐃᐃᐃ;
					this.ⲆΔΔⵠⲆ.push(new ⵠΔΔᐃⲆⵠᐃ(ⵠᐃ, ΔΔ, ΔΔⵠ, ⵠᐃᐃ))
				}
			}
		};
		this.ⵠⲆᐃⵠΔ = {
			"ⲆΔΔⵠⲆ": [],
			"ΔⵠⲆⲆⵠ": ⵠⵠΔΔ,
			"ΔⵠⵠΔⲆ": 0,
			"ᐃᐃⵠ": function(Ⲇᐃᐃ) {
				if (ᐃⲆⵠⲆΔ.ΔᐃⲆᐃⵠΔⲆ()) Ⲇᐃᐃ.y += ΔᐃⲆⲆ * Ⲇᐃᐃ.ΔⲆⵠⵠΔ * (5.5 + 10 * this.ΔⵠⵠΔⲆ);
				else Ⲇᐃᐃ.y += ΔᐃⲆⲆ * Ⲇᐃᐃ.ΔⲆⵠⵠΔ * (ΔⵠⲆᐃⵠ + ΔⲆⲆΔΔ * this.ΔⵠⵠΔⲆ);
				Ⲇᐃᐃ.ᐃⵠᐃⲆⲆ -= ΔᐃⲆⲆ / 2;
				if (ᐃⲆⵠⲆΔ.ΔᐃΔⵠᐃΔᐃ()) Ⲇᐃᐃ.x += ΔᐃⲆⲆ * (100 + 400 * this.ΔⵠⵠΔⲆ);
				else if (ᐃⲆⵠⲆΔ.ᐃΔΔΔΔⲆᐃ()) Ⲇᐃᐃ.x -= ΔᐃⲆⲆ * (130 - 400 * this.ΔⵠⵠΔⲆ);
				else Ⲇᐃᐃ.x -= ΔᐃⲆⲆ * (30 - 400 * this.ΔⵠⵠΔⲆ);
				if (Ⲇᐃᐃ.ᐃⵠᐃⲆⲆ > .2) Ⲇᐃᐃ.alpha = Math.min(Ⲇᐃᐃ.alpha + ΔᐃⲆⲆ * 3, 1);
				else Ⲇᐃᐃ.alpha = Math.max(Ⲇᐃᐃ.alpha - ΔᐃⲆⲆ * Δᐃⵠᐃ, ⵠΔΔᐃ)
			},
			add: function(ⵠΔΔⲆ) {
				var length = Math.floor(Math.min((this.ΔⵠⵠΔⲆ * 1.5 + .5) * ⵠ.ⲆᐃⲆᐃⵠⲆᐃ * (ⲆΔⲆᐃ / 1366), (this.ΔⵠⵠΔⲆ * 1.5 + .5) * ⵠ.ⲆᐃⲆᐃⵠⲆᐃ + 10) * Math.max(Math.min(ⲆⲆⲆ.ⵠⲆⵠΔⵠ + 1e3, 3e3) / 3e3, ΔΔⲆⲆ));
				if (this.ⲆΔΔⵠⲆ.length < length) {
					var ⵠᐃ = Math.floor(Math.random() * ⵠ.ᐃⵠᐃⵠΔⵠⲆ);
					var ΔΔ = -ⵠⵠⵠ.ᐃⵠⲆ.x + Math.floor(Math.random() * ⵠⵠⵠ.ᐃⵠⲆ.w);
					var ΔΔⵠ = -ⵠⵠⵠ.ᐃⵠⲆ.y + Math.floor(Math.random() * 400 * Ⲇ - 200 * Ⲇ);
					this.ⲆΔΔⵠⲆ.push(new ⵠΔΔᐃⲆⵠᐃ(ⵠᐃ, ΔΔ, ΔΔⵠ, 0))
				}
			}
		};

		function ⲆⲆⲆⲆᐃⲆⵠΔΔ() {
			this.seed = ⲆΔⲆⵠ;
			this.ᐃᐃΔᐃᐃᐃᐃ = 2;
			this.ΔᐃⵠᐃΔⵠΔ = 3;
			this.ΔⵠᐃⵠᐃⲆΔΔⲆ = 1;
			this.ᐃΔⵠⵠⵠⵠΔⲆⲆ = 2;
			this.ⵠⲆⵠⲆⲆᐃⲆᐃΔ = ΔⵠⲆⲆ;
			this.ⲆᐃⲆΔΔᐃΔ = function(ΔΔ) {
				this.seed = 2 + Math.floor(Math.random() * ⵠΔᐃⲆ.ⲆΔΔΔⵠ)
			};
			this.ᐃⲆᐃⲆⵠⵠⵠ = function(ΔΔ) {
				this.ᐃᐃΔᐃᐃᐃᐃ = 2 + Math.floor(Math.random() * ⵠΔᐃⲆ.ⲆΔΔΔⵠ)
			};
			this.ΔΔⲆᐃΔᐃΔ = function(ΔΔ) {
				this.ΔᐃⵠᐃΔⵠΔ = Δⵠᐃᐃ + Math.floor(ⵠΔᐃⲆ.ⲆΔΔΔⵠ * Math.random())
			};
			this.ⵠⵠⵠΔⵠᐃᐃⲆⲆ = function(ΔΔ) {
				this.ΔⵠᐃⵠᐃⲆΔΔⲆ = 2 + Math.floor(Math.random() * ⵠΔᐃⲆ.ⲆΔΔΔⵠ)
			};
			this.ⲆⵠⲆⵠᐃⵠᐃⲆⵠ = function(ΔΔ) {
				this.ᐃΔⵠⵠⵠⵠΔⲆⲆ = 2 + Math.floor(Math.random() * ⵠΔᐃⲆ.ⲆΔΔΔⵠ)
			};
			this.ⲆⲆⲆⵠᐃⵠᐃᐃⲆ = function(ΔΔ) {
				this.ⵠⲆⵠⲆⲆᐃⲆᐃΔ = 2 + Math.floor(ⵠΔᐃⲆ.ⲆΔΔΔⵠ * Math.random())
			};
			this.ᐃᐃⵠΔⲆΔΔ = function(ΔΔⵠ, ΔⵠΔ, ⵠⲆⵠⲆᐃ, ᐃⲆᐃⲆⲆΔΔ, ⲆⲆⵠⵠᐃⵠᐃ, ⲆᐃΔⵠΔ, ⵠΔᐃⲆᐃ) {
				for (var Δᐃ = ⵠⲆⲆⲆ; Δᐃ < ⵠΔᐃⲆᐃ;) {
					var ᐃΔⵠⵠ = ⵠⲆⵠⲆᐃ * Δᐃ % ⵠⵠᐃⵠⵠᐃᐃ;
					var ⲆᐃΔ = ⲆⲆᐃⲆΔⲆⲆ[ᐃΔⵠⵠ];
					if (.1 > ⲆᐃΔ) {
						ⵠᐃⵠ += 50;
						Δᐃ += 50;
						continue
					}
					var ⵠᐃⵠ = Math.floor(ⲆᐃΔ * ᐃⲆᐃⲆⲆΔΔ + ⲆⲆⵠⵠᐃⵠᐃ);
					if (ⲆᐃΔⵠΔ < Δᐃ && ⵠΔᐃⲆᐃ > Δᐃ) {
						var ΔΔΔᐃ = Math.random() > .5 ? ΔᐃⲆⲆ * -10 : ΔᐃⲆⲆ * 10;
						var ΔⲆᐃⲆΔ = ⵠᐃⵠ * ΔⵠΔ;
						this.ᐃΔⵠⲆᐃᐃᐃ[ᐃΔⵠⵠ] = Math.max(-ⵠΔᐃⲆ.ⲆᐃᐃᐃⲆᐃⲆ, Math.min(ⵠΔᐃⲆ.ⲆᐃᐃᐃⲆᐃⲆ, this.ᐃΔⵠⲆᐃᐃᐃ[ᐃΔⵠⵠ] + ΔΔΔᐃ));
						this.ⲆⵠΔⵠⲆⵠⵠ[ᐃΔⵠⵠ] = Math.max(-ⵠΔᐃⲆ.ⵠΔⲆΔⵠⲆⲆ, Math.min(ⵠΔᐃⲆ.ⵠΔⲆΔⵠⲆⲆ, this.ⲆⵠΔⵠⲆⵠⵠ[ᐃΔⵠⵠ] + ΔΔΔᐃ));
						if (0 < ΔⲆᐃⲆΔ) {
							ᐃ.beginPath();
							ᐃ.arc(Δᐃ + ⵠⵠⵠ.ᐃⵠⲆ.x + this.ⲆⵠΔⵠⲆⵠⵠ[ᐃΔⵠⵠ], ΔΔⵠ + this.ᐃΔⵠⲆᐃᐃᐃ[ᐃΔⵠⵠ] - .8 * ⵠΔᐃⲆ.ⲆᐃᐃᐃⲆᐃⲆ, ΔⲆᐃⲆΔ, 0, Math.PI * 2);
							if (ⲆⲆⲆ.transition) {
								var ⵠΔⵠΔ = ⲆⲆⲆ.time ? ⵠΔΔ - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
								ᐃ.fillStyle = ⵠΔⵠΔⲆ(83, 156, 160, 236, 247, 249, ⵠΔⵠΔ)
							} else ᐃ.fillStyle = ⵠ.ⵠⲆᐃⲆΔΔΔ[ⲆⲆⲆ.time];
							ᐃ.fill()
						}
					}
					Δᐃ += ⵠᐃⵠ * 2
				}
			};
			this.ⲆⵠⵠⵠΔΔΔ = function(ΔΔ, ΔⵠΔ, ⵠⲆⵠⲆᐃ, ᐃⲆᐃⲆⲆΔΔ, ⲆⲆⵠⵠᐃⵠᐃ, ᐃᐃⵠⲆΔ, ΔⵠⲆⲆΔ) {
				for (var Δᐃ = 1; Δᐃ < ΔⵠⲆⲆΔ;) {
					var ᐃΔⵠⵠ = ⵠⲆⵠⲆᐃ * Δᐃ % ⵠⵠᐃⵠⵠᐃᐃ;
					var ⲆᐃΔ = ⲆⲆᐃⲆΔⲆⲆ[ᐃΔⵠⵠ];
					if (.1 > ⲆᐃΔ) {
						ⵠᐃⵠ += 50;
						Δᐃ += 50;
						continue
					}
					var ⵠᐃⵠ = Math.floor(ᐃⲆᐃⲆⲆΔΔ * ⲆᐃΔ + ⲆⲆⵠⵠᐃⵠᐃ);
					if (ᐃᐃⵠⲆΔ < Δᐃ && Δᐃ < ΔⵠⲆⲆΔ) {
						var ΔΔΔᐃ = .5 < Math.random() ? -ΔΔⲆⲆⵠ * ΔᐃⲆⲆ : ⲆΔⲆⲆⵠ * ΔᐃⲆⲆ;
						var ΔⲆᐃⲆΔ = ΔⵠΔ * ⵠᐃⵠ;
						this.ⵠⲆⵠⵠⲆ[ᐃΔⵠⵠ] = Math.max(-ⵠΔᐃⲆ.ⲆᐃᐃᐃⲆᐃⲆ, Math.min(ⵠΔᐃⲆ.ⲆᐃᐃᐃⲆᐃⲆ, this.ⵠⲆⵠⵠⲆ[ᐃΔⵠⵠ] + ΔΔΔᐃ));
						this.ᐃⵠⵠᐃΔ[ᐃΔⵠⵠ] = Math.max(-ⵠΔᐃⲆ.ⵠΔⲆΔⵠⲆⲆ, Math.min(ⵠΔᐃⲆ.ⵠΔⲆΔⵠⲆⲆ, this.ᐃⵠⵠᐃΔ[ᐃΔⵠⵠ] + ΔΔΔᐃ));
						if (ΔⲆᐃⲆΔ > ⵠⵠΔᐃ) {
							ᐃ.beginPath();
							ᐃ.arc(ΔΔ + this.ⵠⲆⵠⵠⲆ[ᐃΔⵠⵠ] - ⵠΔᐃⲆ.ⲆᐃᐃᐃⲆᐃⲆ * .8, Δᐃ + ⵠⵠⵠ.ᐃⵠⲆ.y + this.ᐃⵠⵠᐃΔ[ᐃΔⵠⵠ], ΔⲆᐃⲆΔ, Ⲇᐃⵠⵠ, Math.PI * 2);
							if (ⲆⲆⲆ.transition) {
								var ⵠΔⵠΔ = ⲆⲆⲆ.time ? 1 - ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ : ⲆⲆⲆ.ⵠΔⵠΔ.ⲆᐃΔ;
								ᐃ.fillStyle = ⵠΔⵠΔⲆ(83, 156, 160, 236, 247, 249, ⵠΔⵠΔ)
							} else ᐃ.fillStyle = ⵠ.ⵠⲆᐃⲆΔΔΔ[ⲆⲆⲆ.time];
							ᐃ.fill()
						}
					}
					Δᐃ += 2 * ⵠᐃⵠ
				}
			};
			this.ᐃᐃⵠΔⲆⵠⲆΔΔ = function(ΔΔⵠ, ⵠΔⲆⵠ, ⲆᐃΔᐃΔⵠⵠ, ⲆΔΔᐃ, ⲆᐃΔⵠΔ, ⵠΔᐃⲆᐃ) {
				ⲆᐃΔⵠΔ -= 30;
				ⵠΔᐃⲆᐃ += 30;
				var ΔⵠΔ = -((ⲆᐃΔᐃΔⵠⵠ - ⵠΔᐃⲆ.ⵠᐃⵠⵠᐃ - ⲆΔΔᐃ - 2) / ⵠΔᐃⲆ.ΔᐃΔⲆᐃᐃⵠ);
				ΔⵠΔ === 0 && this.ΔΔⲆᐃΔᐃΔ();
				ᐃ.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ΔⵠΔ);
				this.ᐃᐃⵠΔⲆΔΔ(ⲆᐃΔᐃΔⵠⵠ, ΔⵠΔ, this.ΔᐃⵠᐃΔⵠΔ, ⲆΔᐃΔΔ, 16, ⲆᐃΔⵠΔ, ⵠΔᐃⲆᐃ);
				ᐃ.globalAlpha = 1;
				var ΔⵠΔ = -((ΔΔⵠ - ⵠΔᐃⲆ.ΔᐃⲆᐃⵠ - ⲆΔΔᐃ + 500) / ⵠΔᐃⲆ.ⵠⲆⲆⲆΔⵠⲆ);
				if (0 === ΔⵠΔ) this.ⲆᐃⲆΔΔᐃΔ();
				ᐃ.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ΔⵠΔ);
				this.ᐃᐃⵠΔⲆΔΔ(ΔΔⵠ, ΔⵠΔ, this.seed, ⵠⲆⵠᐃⲆ, 10, ⲆᐃΔⵠΔ, ⵠΔᐃⲆᐃ);
				ᐃ.globalAlpha = ⵠⵠᐃ;
				if (ⵠΔⲆⵠ === -1) return;
				var ΔⵠΔ = -((ⵠΔⲆⵠ - ⵠΔᐃⲆ.ᐃΔⵠⵠⲆ - ⲆΔΔᐃ + 698) / ⵠΔᐃⲆ.ⲆΔⵠⲆΔⲆᐃ);
				if (ΔⵠΔ <= .01) this.ᐃⲆᐃⲆⵠⵠⵠ();
				ᐃ.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ΔⵠΔ);
				this.ᐃᐃⵠΔⲆΔΔ(ⵠΔⲆⵠ, ΔⵠΔ, this.ᐃᐃΔᐃᐃᐃᐃ, 6, ΔⵠⵠⵠΔ, ⲆᐃΔⵠΔ, ⵠΔᐃⲆᐃ);
				ᐃ.globalAlpha = ⲆΔᐃΔ
			};
			this.ⲆΔᐃⲆⵠⵠᐃΔⲆ = function(ΔΔⵠ, ⵠΔⲆⵠ, ⲆᐃΔᐃΔⵠⵠ, ⲆΔΔᐃ, ⲆᐃΔⵠΔ, ⵠΔᐃⲆᐃ) {
				ⲆᐃΔⵠΔ -= 30;
				ⵠΔᐃⲆᐃ += 30;
				var ΔⵠΔ = -((-ⲆᐃΔᐃΔⵠⵠ + ⵠΔᐃⲆ.ⵠᐃⵠⵠᐃ + ⲆΔΔᐃ + 2) / ⵠΔᐃⲆ.ΔᐃΔⲆᐃᐃⵠ);
				ΔⵠΔ === ᐃⲆⵠΔ && this.ΔΔⲆᐃΔᐃΔ();
				ᐃ.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ΔⵠΔ);
				this.ᐃᐃⵠΔⲆΔΔ(ⲆᐃΔᐃΔⵠⵠ, ΔⵠΔ, this.ΔᐃⵠᐃΔⵠΔ, ΔⵠᐃⲆΔⲆⵠ, ΔᐃⵠΔⵠ, ⲆᐃΔⵠΔ, ⵠΔᐃⲆᐃ);
				ᐃ.globalAlpha = ᐃΔⵠΔ;
				var ΔⵠΔ = -((-ΔΔⵠ + ⵠΔᐃⲆ.ΔᐃⲆᐃⵠ + ⲆΔΔᐃ) / ⵠΔᐃⲆ.ⵠⲆⲆⲆΔⵠⲆ);
				0 === ΔⵠΔ && this.ⲆᐃⲆΔΔᐃΔ();
				ᐃ.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ΔⵠΔ);
				this.ᐃᐃⵠΔⲆΔΔ(ΔΔⵠ, ΔⵠΔ, this.seed, 12, ⵠΔΔΔⵠ, ⲆᐃΔⵠΔ, ⵠΔᐃⲆᐃ);
				ᐃ.globalAlpha = 1;
				if (ⵠΔⲆⵠ === -ⲆΔᐃΔ) return;
				var ΔⵠΔ = -((-ⵠΔⲆⵠ + ⵠΔᐃⲆ.ᐃΔⵠⵠⲆ + ⲆΔΔᐃ) / ⵠΔᐃⲆ.ⲆΔⵠⲆΔⲆᐃ);
				.01 >= ΔⵠΔ && this.ᐃⲆᐃⲆⵠⵠⵠ();
				ᐃ.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ΔⵠΔ);
				this.ᐃᐃⵠΔⲆΔΔ(ⵠΔⲆⵠ, ΔⵠΔ, this.ᐃᐃΔᐃᐃᐃᐃ, 6, ΔΔᐃⵠⵠ, ⲆᐃΔⵠΔ, ⵠΔᐃⲆᐃ);
				ᐃ.globalAlpha = 1
			};
			this.ΔΔⲆⵠⵠᐃᐃⵠᐃ = function(ΔΔ, ΔⲆⵠⲆ, ΔⲆⵠΔⵠᐃᐃ, ΔΔᐃⵠ, ᐃᐃⵠⲆΔ, ΔⵠⲆⲆΔ) {
				ᐃᐃⵠⲆΔ -= 30;
				ΔⵠⲆⲆΔ += 30;
				var ΔⵠΔ = -((-ΔⲆⵠΔⵠᐃᐃ + ⵠΔᐃⲆ.ⵠᐃⵠⵠᐃ + ΔΔᐃⵠ + 2) / ⵠΔᐃⲆ.ΔᐃΔⲆᐃᐃⵠ);
				if (Ⲇᐃⵠⵠ === ΔⵠΔ) this.ΔΔⲆᐃΔᐃΔ();
				ᐃ.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ΔⵠΔ);
				this.ⲆⵠⵠⵠΔΔΔ(ΔⲆⵠΔⵠᐃᐃ, ΔⵠΔ, this.ΔᐃⵠᐃΔⵠΔ, 18, ΔⲆⲆⲆⲆⵠⲆ, ᐃᐃⵠⲆΔ, ΔⵠⲆⲆΔ);
				ᐃ.globalAlpha = 1;
				var ΔⵠΔ = -((-ΔΔ + ⵠΔᐃⲆ.ΔᐃⲆᐃⵠ + ΔΔᐃⵠ) / ⵠΔᐃⲆ.ⵠⲆⲆⲆΔⵠⲆ);
				0 === ΔⵠΔ && this.ⲆᐃⲆΔΔᐃΔ();
				ᐃ.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ΔⵠΔ);
				this.ⲆⵠⵠⵠΔΔΔ(ΔΔ, ΔⵠΔ, this.seed, 12, 10, ᐃᐃⵠⲆΔ, ΔⵠⲆⲆΔ);
				ᐃ.globalAlpha = ⵠΔᐃ;
				if (-1 === ΔⲆⵠⲆ) return;
				var ΔⵠΔ = -((-ΔⲆⵠⲆ + ⵠΔᐃⲆ.ᐃΔⵠⵠⲆ + ΔΔᐃⵠ) / ⵠΔᐃⲆ.ⲆΔⵠⲆΔⲆᐃ);
				if (.01 >= ΔⵠΔ) this.ᐃⲆᐃⲆⵠⵠⵠ();
				ᐃ.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ΔⵠΔ);
				this.ⲆⵠⵠⵠΔΔΔ(ΔⲆⵠⲆ, ΔⵠΔ, this.ᐃᐃΔᐃᐃᐃᐃ, 6, 6, ᐃᐃⵠⲆΔ, ΔⵠⲆⲆΔ);
				ᐃ.globalAlpha = 1
			};
			this.ΔᐃᐃΔΔΔᐃᐃⵠ = function(ΔΔ, ΔⲆⵠⲆ, ΔⲆⵠΔⵠᐃᐃ, ΔΔᐃⵠ, ᐃᐃⵠⲆΔ, ΔⵠⲆⲆΔ) {
				ᐃᐃⵠⲆΔ -= 30;
				ΔⵠⲆⲆΔ += 30;
				var ΔⵠΔ = -((ΔⲆⵠΔⵠᐃᐃ - ⵠΔᐃⲆ.ⵠᐃⵠⵠᐃ - ΔΔᐃⵠ - 2) / ⵠΔᐃⲆ.ΔᐃΔⲆᐃᐃⵠ);
				if (ΔⵠΔ === 0) this.ΔΔⲆᐃΔᐃΔ();
				ᐃ.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ΔⵠΔ);
				this.ⲆⵠⵠⵠΔΔΔ(ΔⲆⵠΔⵠᐃᐃ, ΔⵠΔ, this.ΔᐃⵠᐃΔⵠΔ, ᐃⵠᐃⵠⵠⵠⵠ, 16, ᐃᐃⵠⲆΔ, ΔⵠⲆⲆΔ);
				ᐃ.globalAlpha = 1;
				var ΔⵠΔ = -((ΔΔ - ⵠΔᐃⲆ.ΔᐃⲆᐃⵠ - ΔΔᐃⵠ + 500) / ⵠΔᐃⲆ.ⵠⲆⲆⲆΔⵠⲆ);
				if (ΔⵠΔ === Δⵠⵠ) this.ⲆᐃⲆΔΔᐃΔ();
				ᐃ.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ΔⵠΔ);
				this.ⲆⵠⵠⵠΔΔΔ(ΔΔ, ΔⵠΔ, this.seed, 12, 10, ᐃᐃⵠⲆΔ, ΔⵠⲆⲆΔ);
				ᐃ.globalAlpha = 1;
				if (ΔⲆⵠⲆ === -1) return;
				var ΔⵠΔ = -((ΔⲆⵠⲆ - ⵠΔᐃⲆ.ᐃΔⵠⵠⲆ - ΔΔᐃⵠ + 698) / ⵠΔᐃⲆ.ⲆΔⵠⲆΔⲆᐃ);
				if (ΔⵠΔ <= .01) this.ᐃⲆᐃⲆⵠⵠⵠ();
				ᐃ.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ΔⵠΔ);
				this.ⲆⵠⵠⵠΔΔΔ(ΔⲆⵠⲆ, ΔⵠΔ, this.ᐃᐃΔᐃᐃᐃᐃ, Ⲇⵠᐃᐃⵠ, 6, ᐃᐃⵠⲆΔ, ΔⵠⲆⲆΔ);
				ᐃ.globalAlpha = ⵠΔᐃ
			};
			this.w1 = {
				r: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔⲆⵠΔᐃΔⵠ, 0, 10, ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ, ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ, ⵠΔᐃⲆ.ΔᐃΔⲆᐃᐃⵠ),
				"ⲆⲆⲆΔ": new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ᐃᐃⲆᐃᐃⵠᐃ, 0, ⵠⵠⲆᐃᐃ, ⵠΔᐃⲆ.ΔᐃΔⲆᐃᐃⵠ, ⵠΔᐃⲆ.ΔᐃΔⲆᐃᐃⵠ, ⵠΔᐃⲆ.ⲆⵠᐃⲆⲆ)
			};
			this.w2 = {
				r: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ⲆᐃⲆⲆⵠΔᐃ, Ⲇᐃⵠⵠ, ⵠⵠⲆᐃᐃ, ⵠΔᐃⲆ.ⵠⵠⵠⵠⵠⵠⲆ, ⵠΔᐃⲆ.ⵠⵠⵠⵠⵠⵠⲆ, ⵠΔᐃⲆ.ⵠⲆⲆⲆΔⵠⲆ),
				"ⲆⲆⲆΔ": new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ, ⵠᐃΔ, ⵠⵠⲆᐃᐃ, ⵠΔᐃⲆ.ⵠⲆⲆⲆΔⵠⲆ, ⵠΔᐃⲆ.ⵠⲆⲆⲆΔⵠⲆ, ⵠΔᐃⲆ.ⵠⵠⵠⵠⵠⵠⲆ)
			};
			this.w3 = {
				r: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ⲆΔᐃⵠⲆΔⵠ, 0, 10, ⵠΔᐃⲆ.ΔⲆⵠΔᐃⲆⲆ, ⵠΔᐃⲆ.ΔⲆⵠΔᐃⲆⲆ, ⵠΔᐃⲆ.ⲆΔⵠⲆΔⲆᐃ),
				"ⲆⲆⲆΔ": new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ, ⵠⵠΔΔ, 10, ⵠΔᐃⲆ.ⲆΔⵠⲆΔⲆᐃ, ⵠΔᐃⲆ.ⲆΔⵠⲆΔⲆᐃ, ⵠΔᐃⲆ.ΔⲆⵠΔᐃⲆⲆ)
			};
			this.ᐃⵠⵠⵠⵠⵠᐃⵠⵠ = function(ΔΔⵠⲆᐃ) {
				var Δⵠᐃ;
				if (ΔΔⵠⲆᐃ.r.x === ΔΔⵠⲆᐃ.r.ΔⵠⵠᐃΔ) {
					ΔΔⵠⲆᐃ.ⲆⲆⲆΔ.ΔⵠⵠᐃΔ === ΔΔⵠⲆᐃ.ⲆⲆⲆΔ.x ? Δⵠᐃ = ΔΔⵠⲆᐃ.r : Δⵠᐃ = ΔΔⵠⲆᐃ.ⲆⲆⲆΔ
				} else Δⵠᐃ = ΔΔⵠⲆᐃ.r;
				return Δⵠᐃ
			};
			this.ΔⲆᐃ = function(ΔΔⵠⲆᐃ) {
				var Δⵠᐃ;
				if (ΔΔⵠⲆᐃ.r.ΔⵠⵠᐃΔ === ΔΔⵠⲆᐃ.r.x) {
					if (ΔΔⵠⲆᐃ.ⲆⲆⲆΔ.x === ΔΔⵠⲆᐃ.ⲆⲆⲆΔ.ΔⵠⵠᐃΔ) {
						ΔΔⵠⲆᐃ.r.ᐃᐃⵠΔᐃΔᐃ();
						ΔΔⵠⲆᐃ.ⲆⲆⲆΔ.ᐃᐃⵠΔᐃΔᐃ();
						Δⵠᐃ = ΔΔⵠⲆᐃ.r
					} else Δⵠᐃ = ΔΔⵠⲆᐃ.ⲆⲆⲆΔ
				} else Δⵠᐃ = ΔΔⵠⲆᐃ.r;
				Δⵠᐃ.ΔᐃⵠΔⲆ(Δⵠᐃ.ΔⵠⵠᐃΔ);
				return Δⵠᐃ
			};
			this.ⵠⲆⵠⵠⲆ = [];
			this.ᐃⵠⵠᐃΔ = [];
			this.ᐃΔⵠⲆᐃᐃᐃ = [];
			this.ⲆⵠΔⵠⲆⵠⵠ = [];
			this.ΔⲆᐃᐃⵠ = function() {
				for (var Δᐃ = ⲆᐃⲆ; ⵠⵠᐃⵠⵠᐃᐃ > Δᐃ; Δᐃ++) {
					this.ⵠⲆⵠⵠⲆ[Δᐃ] = Math.floor(ⵠΔᐃⲆ.ⲆᐃᐃᐃⲆᐃⲆ * ⲆⲆᐃⲆΔⲆⲆ[Δᐃ]);
					this.ᐃⵠⵠᐃΔ[Δᐃ] = Math.floor(ⵠΔᐃⲆ.ⵠΔⲆΔⵠⲆⲆ * ⲆⲆᐃⲆΔⲆⲆ[Δᐃ]);
					this.ᐃΔⵠⲆᐃᐃᐃ[Δᐃ] = Math.floor(ⲆⲆᐃⲆΔⲆⲆ[Δᐃ] * ⵠΔᐃⲆ.ⲆᐃᐃᐃⲆᐃⲆ);
					this.ⲆⵠΔⵠⲆⵠⵠ[Δᐃ] = Math.floor(ⲆⲆᐃⲆΔⲆⲆ[Δᐃ] * ⵠΔᐃⲆ.ⵠΔⲆΔⵠⲆⲆ)
				}
				this.w1.r.x = this.w1.r.ΔⵠⵠᐃΔ;
				this.w2.r.Δⵠⵠᐃᐃ = 3.5;
				this.w3.r.Δⵠⵠᐃᐃ = ⵠⲆⵠΔ
			};
			this.ΔⲆᐃᐃⵠ()
		}
		this.ΔⵠᐃΔ = [];
		for (var Δᐃ = 0; ΔᐃΔⲆΔ > Δᐃ; Δᐃ++) this.ΔⵠᐃΔ.push(new ⲆⲆⲆⲆᐃⲆⵠΔΔ)
	}

	function ⵠⲆᐃΔⲆⵠΔ() {
		var ΔΔᐃΔ = Math.random();
		return "e"
	}

	function ᐃᐃⲆⵠΔⵠⲆ() {
		var ΔΔᐃΔ = Math.random();
		return "r"
	}

	function ⲆᐃⲆⵠΔΔΔΔΔ() {
		var ΔΔᐃΔ = Math.random();
		return "2"
	}

	function ⲆⲆⲆⲆⲆⲆΔⲆⵠ() {
		var ΔΔᐃΔ = Math.random();
		return "k"
	}

	function ⲆⵠⵠᐃΔⲆᐃⲆΔ() {
		var ΔΔᐃΔ = Math.random();
		return "D"
	}

	function ⲆⵠⵠⵠⵠⲆΔⵠⵠ() {
		var ΔΔᐃΔ = Math.random();
		return "w"
	}

	function ᐃⲆΔᐃᐃⵠⲆ() {
		var ΔΔᐃΔ = Math.random();
		return "p"
	}

	function ⲆᐃⵠⵠᐃⲆⲆΔΔ() {
		var ΔΔᐃΔ = Math.random();
		return "m"
	}

	function ⲆᐃΔⲆΔΔᐃ() {
		var ΔΔᐃΔ = Math.random();
		return "o"
	}

	function ᐃⲆΔⵠⲆⲆⵠⵠⵠ() {
		var ΔΔᐃΔ = Math.random();
		return "I"
	}

	function ᐃⲆΔᐃᐃⵠⲆ() {
		var ΔΔᐃΔ = Math.random();
		return "p"
	}

	function ΔⲆΔᐃⲆⵠⲆ() {
		var ΔΔᐃΔ = Math.random();
		return "i"
	}

	function ᐃᐃΔᐃⲆΔᐃⵠⵠ() {
		var ΔΔᐃΔ = Math.random();
		return "x"
	}

	function ⵠΔΔⲆᐃⲆⵠΔⵠ() {
		var ΔΔᐃΔ = Math.random();
		return "b"
	}

	function ΔⵠⲆᐃⲆⵠᐃⲆᐃ() {
		var ΔΔᐃΔ = Math.random();
		return "R"
	}

	function ⵠΔᐃᐃⲆΔⵠ() {
		var ΔΔᐃΔ = Math.random();
		return "a"
	}

	function ⵠΔᐃᐃⲆΔⵠ() {
		var ΔΔᐃΔ = Math.random();
		return "a"
	}

	function ⲆⵠΔⵠᐃΔⲆⲆⲆ() {
		var ΔΔᐃΔ = Math.random();
		return "y"
	}

	function ΔᐃΔⵠᐃᐃⲆ() {
		var ΔΔᐃΔ = Math.random();
		return "g"
	}

	function ᐃⵠⲆⵠⵠⵠⲆⵠΔ() {
		var ΔΔᐃΔ = Math.random();
		return "c"
	}

	function ᐃᐃⲆⵠⲆᐃΔ() {
		var ΔΔᐃΔ = Math.random();
		return "d"
	}

	function ⲆⲆⲆᐃⵠⵠⵠⲆᐃ() {
		var ΔΔᐃΔ = Math.random();
		return "S"
	}

	function ⲆⲆⵠⲆⵠΔⵠ() {
		var ΔΔᐃΔ = Math.random();
		return "s"
	}

	function ⲆⲆⵠᐃᐃⵠΔ() {
		var ΔΔᐃΔ = Math.random();
		return "C"
	}

	function ⲆⵠⵠⵠΔΔᐃ() {
		var ΔΔᐃΔ = Math.random();
		return "t"
	}
	setTimeout(ⲆᐃⲆΔⵠⵠⵠ, 1e5);

	function ⲆⵠⲆΔⲆⲆΔ(ᐃΔΔⲆⵠΔΔ, ⲆⲆⲆΔΔⲆΔ, ᐃⲆⵠⲆΔΔⵠ, ⲆⵠᐃⲆᐃⵠΔ, ⲆⲆΔΔᐃⲆΔ) {
		const ΔᐃᐃᐃΔᐃⲆ = (22695477 * (ᐃΔΔⲆⵠΔΔ + 34272) + 1) % 4294967296;
		const ⵠⲆⲆᐃⲆᐃⵠ = ~(ⲆⲆⲆΔΔⲆΔ & 16594) & (16594 | ⲆⲆⲆΔΔⲆΔ);
		const ⵠⲆΔᐃΔⵠⵠΔΔ = (2531011 + 214013 * (ᐃⲆⵠⲆΔΔⵠ + 56798)) % 4294967296;
		const ⵠⵠΔᐃΔΔⵠⵠᐃ = (19597 | ⲆⵠᐃⲆᐃⵠΔ) & ~(ⲆⵠᐃⲆᐃⵠΔ & 19597);
		const ⲆᐃⲆᐃⲆⵠⵠⲆΔ = ~(24796 & ⲆⲆΔΔᐃⲆΔ) & (24796 | ⲆⲆΔΔᐃⲆΔ);
		const ⵠⲆⲆΔΔⲆⵠ = Δⵠⵠⵠⵠⵠⵠ(ΔᐃᐃᐃΔᐃⲆ, ⵠⲆⲆᐃⲆᐃⵠ, ⵠⲆΔᐃΔⵠⵠΔΔ, ⵠⵠΔᐃΔΔⵠⵠᐃ);
		const ⲆΔΔⲆⲆⵠⵠΔⵠ = ⲆⵠᐃⵠⲆⵠΔ(ⲆᐃⲆᐃⲆⵠⵠⲆΔ, ΔᐃᐃᐃΔᐃⲆ, ⵠⲆⲆᐃⲆᐃⵠ);
		const ⲆⲆⲆⲆⲆΔⵠᐃΔ = ~(55931 & ⵠⲆⲆΔΔⲆⵠ) & (55931 | ⵠⲆⲆΔΔⲆⵠ);
		return ⲆⲆⲆⲆⲆΔⵠᐃΔ
	}
	var ᐃⲆⵠΔᐃΔⲆ = "datas/info.json";
	if (ⲆᐃΔᐃⵠⵠⵠ.ᐃΔⵠᐃⵠⵠⵠ === ⲆΔΔⵠⲆⵠᐃ) {
		ᐃⲆⵠΔᐃΔⲆ = "datas/info.local.json"
	}
	var ΔᐃᐃΔΔᐃⲆⲆΔ = {
		"ᐃⲆⵠΔᐃΔⲆ": ᐃⲆⵠΔᐃΔⲆ
	};

	function ΔⵠⲆⵠⲆⲆΔᐃᐃ() {
		ⵠᐃΔᐃ.ⲆⲆᐃᐃⵠᐃᐃ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0")
	}

	function ⵠΔⲆⵠΔᐃᐃΔⵠ() {
		ⵠᐃΔᐃ.ⲆⲆᐃᐃⵠᐃᐃ("https://twitter.com/intent/tweet?text=I%20survived%20" + ⵠⵠⵠ.ⵠⵠⲆ + "%20days%20with%20" + ⵠⵠⵠ.ᐃΔⲆΔⵠⵠⵠ.ᐃⲆᐃⵠⲆ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io")
	}

	function ΔⲆΔⲆΔⲆᐃⲆᐃ(ⲆⲆ, ᐃ) {
		this.ⲆⲆ = ⲆⲆ;
		this.ᐃ = ᐃ;
		ⵠΔΔⲆⲆⵠᐃᐃⵠ.navigator.userAgent.indexOf("Edge") > -1 ? (this.ᐃⵠⵠⵠᐃΔⲆ = "default", this.ⵠᐃᐃΔⲆⵠⲆ = "pointer") : (this.ᐃⵠⵠⵠᐃΔⲆ = "url('img/cursor0.png'), default", this.ⵠᐃᐃΔⲆⵠⲆ = "url('img/cursor1.png'), pointer");
		var ⲆⲆᐃ = this;
		this.waiting = ΔⲆᐃⵠΔ;
		this.ⵠΔⲆΔΔᐃΔ = Δⵠⵠ;
		this.ⲆⵠᐃΔᐃⵠᐃ = -ᐃⵠⵠ;
		this.ⲆⵠᐃⲆΔⵠᐃ = {
			translate: {
				y: Δⵠⵠ,
				x: 0
			},
			angle: ⵠⵠΔᐃ,
			"ⵠΔ": Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⵠⵠᐃ],
			"ⲆᐃᐃⲆ": function() {
				this.angle += ΔᐃⲆⲆ * ΔⲆⲆⵠ;
				ᐃ.save();
				ᐃ.translate(this.translate.x + this.ⵠΔ.width / 2, this.translate.y + this.ⵠΔ.height / ΔΔᐃᐃ);
				ᐃ.rotate(this.angle);
				ᐃΔΔⲆ(ᐃ, this.ⵠΔ, -this.ⵠΔ.width / Ⲇⵠᐃⵠ, -this.ⵠΔ.height / ⲆⲆⵠᐃ);
				ᐃ.restore()
			}
		};
		this.ᐃⲆⲆᐃⲆΔᐃ = {
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("langselect"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("langselect").style,
			translate: {
				x: 0,
				y: 0
			},
			"ᐃᐃⵠ": function() {
				this.style.left = Math.floor(this.translate.x) + Δ[3];
				this.style.top = Math.floor(this.translate.y) + Δ[ⵠᐃⵠΔ]
			}
		};
		this.ⲆⵠⵠΔⲆ = 0;
		this.ᐃⲆⲆⵠⵠᐃᐃ = -ᐃΔⵠΔ;
		this.ⲆⲆᐃΔΔᐃⵠ = ΔᐃᐃⵠⲆ;
		this.ΔᐃⵠⵠⲆⵠⵠ = "";
		this.ⵠΔΔⲆᐃΔⵠ = "";
		this.ᐃΔⲆΔΔⵠⲆ = undefined;
		this.ΔΔΔⵠⲆ = ΔΔⲆⲆ;
		this.ΔΔᐃⲆⵠᐃⲆ = -ΔⵠⲆ;
		this.ᐃⲆⲆΔⲆᐃⲆ = ⲆⲆΔᐃⵠ;
		this.ⵠⲆᐃⲆⵠⵠⵠ = 0;
		this.ΔⵠⲆᐃΔΔⲆ = ⲆⲆⵠⲆ;
		this.ᐃⲆΔⵠⵠⵠⲆ = ⵠᐃΔⲆ;
		this.ᐃᐃⲆᐃᐃ = 0;
		this.ΔⲆᐃΔⵠΔΔ = ΔΔⲆⲆ;
		this.time = ⵠⲆᐃ;
		this.ᐃⲆᐃⵠⲆ = 0;
		this.ⵠⵠⲆΔᐃⵠΔ = 0;
		this.ⲆⵠⵠⲆⲆⲆⵠ = 0;
		this.ⵠᐃᐃΔⵠⲆⲆ = ⵠᐃΔ;
		this.ΔΔᐃᐃⲆᐃⵠ = 0;
		this.ᐃⲆΔᐃΔⵠΔ = [];
		this.ᐃⲆⲆΔⵠ = -1;
		this.ⲆⲆⲆᐃΔᐃᐃ = -ⲆΔᐃΔ;
		this.ΔⲆΔΔᐃⵠΔ = -1;
		this.ΔⲆΔⲆΔΔΔ = ᐃⵠⲆⵠⲆ;
		this.ⵠⲆΔⵠⵠΔΔ = ⲆᐃⵠⲆⲆ;
		this.ⵠΔᐃⵠⵠᐃΔ = -ⵠΔⲆ;
		this.ⲆᐃⵠⵠⵠΔᐃ = -1;
		this.ⵠΔΔⵠᐃⵠᐃ = -1;
		this.ⵠⲆᐃΔᐃⵠᐃ = -1;
		this.ΔΔΔⵠᐃΔᐃ = undefined;
		this.ΔⵠⲆⲆΔⲆⵠ = undefined;
		this.ⵠᐃΔⲆᐃⵠᐃ = undefined;
		this.ΔΔᐃⵠΔᐃⲆ = ⲆᐃⵠⲆⲆ;
		this.ⲆΔΔᐃΔⵠⲆ = undefined;
		this.ⵠΔᐃⲆⲆⵠⲆ = ΔⵠΔⲆⲆ;
		this.ⵠⵠᐃⵠⵠᐃⵠ = ᐃΔⵠᐃⵠ;
		this.ⵠⵠⲆⵠⲆⵠΔ = ⲆᐃⵠΔⵠ;
		this.ΔᐃⵠΔΔⵠⲆ = undefined;
		this.ⲆᐃΔⲆΔΔΔ = 3;
		this.Δᐃⵠⵠ = Ⲇᐃⵠⵠ;

		function ᐃᐃⵠΔⲆⲆΔ(ΔⵠⵠᐃΔⲆⲆ, ΔᐃΔΔⵠⲆΔ, ΔᐃᐃΔⵠᐃΔⵠⲆ, ΔⵠⵠⲆΔⲆᐃΔΔ, ᐃΔⲆⲆ) {
			var ⵠⵠⵠⵠᐃⲆΔ = this;
			var ⵠⲆᐃⵠᐃ = ΔᐃΔΔⵠⲆΔ + ⲆᐃⲆᐃⲆ;
			var ΔΔⵠᐃΔ = 0;
			var ⵠⲆᐃᐃᐃᐃΔ = ΔⵠⵠⲆΔⲆᐃΔΔ;
			for (var Δᐃ = ΔᐃΔΔⵠⲆΔ; ⵠⲆᐃⵠᐃ > Δᐃ; Δᐃ++) {
				ⲆⲆᐃ.buttons[Δᐃ].info.callback = ᐃⲆⲆⲆᐃΔⲆᐃΔ;
				ⲆⲆᐃ.buttons[Δᐃ].info.ΔⲆⲆᐃⲆⲆⵠΔⲆ = ΔⵠⵠᐃΔⲆⲆ
			}

			function ᐃⲆⵠⵠⵠⵠᐃᐃⲆ() {
				if (ΔⵠⵠᐃΔⲆⲆ.length > ᐃⵠⲆⵠ * ΔΔⵠᐃΔ + ⵠΔᐃⵠΔᐃⵠ) ΔΔⵠᐃΔ++;
				ⵠⵠⵠⵠᐃⲆΔ.ᐃᐃΔⲆᐃ()
			}

			function ΔᐃⵠΔⵠᐃⵠ() {
				var Ⲇⵠⵠ = ΔⵠⵠᐃΔⲆⲆ[ⵠⲆᐃᐃᐃᐃΔ];
				ⵠⵠΔⵠ.ΔΔᐃⵠΔᐃⲆ = ⵠΔᐃᐃⲆ(Ⲇⵠⵠ.name, Δ[571], Δ[362], 30, 350, undefined, ᐃᐃΔⵠⵠ, ⲆᐃⵠⲆⵠ);
				if (ⵠⵠⵠⲆⵠ !== Ⲇⵠⵠ.level) ⵠⵠΔⵠ.ⲆΔΔᐃΔⵠⲆ = ⵠΔᐃᐃⲆ("Level " + Ⲇⵠⵠ.level, Δ[571], Δ[362], 30, 250, ᐃⵠΔΔΔ, ΔⲆⲆΔΔ, ᐃΔⲆΔⲆᐃⵠ);
				else ⵠⵠΔⵠ.ⲆΔΔᐃΔⵠⲆ = ⵠΔᐃᐃⲆ("by " + Ⲇⵠⵠ.ΔΔⲆ, Δ[571], Δ[362], 30, 250, ⵠⲆᐃᐃⲆ, ⲆᐃⲆⲆᐃ, 8)
			}

			function ⲆΔⵠᐃⲆⲆᐃΔⵠ() {
				ⵠⵠΔᐃ < ΔΔⵠᐃΔ && ΔΔⵠᐃΔ--;
				ⵠⵠⵠⵠᐃⲆΔ.ᐃᐃΔⲆᐃ()
			}

			function ᐃᐃΔⲆᐃ() {
				for (var Δᐃ = ΔᐃΔΔⵠⲆΔ, ᐃΔⵠⵠ = ΔⵠⲆⲆ * ΔΔⵠᐃΔ; Δᐃ < ⵠⲆᐃⵠᐃ && ᐃΔⵠⵠ < ΔⵠⵠᐃΔⲆⲆ.length; Δᐃ++, ᐃΔⵠⵠ++) {
					if (ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ === ΔⵠⵠᐃΔⲆⲆ[ᐃΔⵠⵠ].ⲆⲆΔ && ⵠⲆΔⵠ === ᐃΔⲆⲆ[ᐃΔⵠⵠ]) {
						ⲆⲆᐃ.buttons[Δᐃ].info.ᐃⵠΔⵠᐃⵠΔ = -1;
						ⲆⲆᐃ.buttons[Δᐃ].info.active = ⲆⵠⲆⲆ;
						continue
					}
					ⲆⲆᐃ.buttons[Δᐃ].info.ᐃⵠΔⵠᐃⵠΔ = ᐃΔⵠⵠ;
					for (var ΔΔᐃΔ = 0; ΔΔᐃΔ < 3; ΔΔᐃΔ++) {
						ⲆⲆᐃ.buttons[Δᐃ].info.ⵠΔ[ΔΔᐃΔ] = ⲆⵠΔᐃⲆ[ΔⵠⵠᐃΔⲆⲆ[ᐃΔⵠⵠ].ⲆⲆΔ][ΔΔᐃΔ];
						ⲆⲆᐃ.buttons[Δᐃ].info.active = ⲆᐃⲆΔ;
						ⲆⲆᐃ.buttons[Δᐃ].info.ⵠⲆΔΔⵠΔΔ = ᐃΔⲆⲆ[ᐃΔⵠⵠ]
					}
				}
				for (; ⵠⲆᐃⵠᐃ > Δᐃ; Δᐃ++) {
					ⲆⲆᐃ.buttons[Δᐃ].info.ᐃⵠΔⵠᐃⵠΔ = -1;
					ⲆⲆᐃ.buttons[Δᐃ].info.active = ⲆⵠⲆⲆ
				}
				ΔᐃⵠΔⵠᐃⵠ()
			}

			function ᐃⲆⲆⲆᐃΔⲆᐃΔ() {
				if (this.ᐃⵠΔⵠᐃⵠΔ === ⵠⲆᐃᐃᐃᐃΔ || -ⲆⲆⲆᐃ === this.ᐃⵠΔⵠᐃⵠΔ) return;
				if (this.ⵠⲆΔΔⵠΔΔ > Ⲇᐃⵠⵠ) {
					if (ⵠᐃⵠⵠᐃⲆⵠ === ΔᐃΔΔⵠⲆΔ) ᐃⲆⲆᐃᐃ(ⲆⲆΔⲆⵠΔⲆ, ⲆⵠⲆⲆ, Δ[369]);
					else ᐃⲆⲆᐃᐃ(ᐃΔⲆΔⵠⲆᐃ, ⲆⵠⲆⲆ, Δ[369])
				} else {
					ΔᐃΔΔⵠⲆΔ === ⵠᐃⵠⵠᐃⲆⵠ ? ᐃⲆⲆᐃᐃ(ⲆⲆΔⲆⵠΔⲆ, ⲆᐃⲆΔ, Δ[151]) : ᐃⲆⲆᐃᐃ(ᐃΔⲆΔⵠⲆᐃ, ⲆᐃⲆΔ, Δ[151])
				}
				ⵠⲆᐃᐃᐃᐃΔ = this.ᐃⵠΔⵠᐃⵠΔ;
				ΔᐃᐃΔⵠᐃΔⵠⲆ(this.ᐃⵠΔⵠᐃⵠΔ);
				ΔᐃⵠΔⵠᐃⵠ()
			}
			this.ᐃᐃΔⲆᐃ = ᐃᐃΔⲆᐃ;
			ⲆⲆᐃ.buttons[ⵠⲆᐃⵠᐃ].info.callback = ⲆΔⵠᐃⲆⲆᐃΔⵠ;
			ⲆⲆᐃ.buttons[ⵠⲆᐃⵠᐃ + 1].info.callback = ᐃⲆⵠⵠⵠⵠᐃᐃⲆ
		}
		this.ⵠⵠΔⲆⲆⲆΔⵠⲆ = ⲆⵠⲆΔᐃ;
		this.ΔⲆᐃᐃΔ = ΔᐃⲆΔ.get(Δ[95]) ? ΔᐃⲆΔ.get(Δ[95]) : "high";
		if ("high" === this.ΔⲆᐃᐃΔ) {
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[356]).style.backgroundColor = Δ[272];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[476]).style.backgroundColor = Δ[51];
			this.ΔⲆᐃᐃΔ = 1
		} else {
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[476]).style.backgroundColor = Δ[272];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[356]).style.backgroundColor = Δ[51];
			this.ΔⲆᐃᐃΔ = Ⲇᐃⵠⵠ
		}
		this.ⵠⵠⵠⵠᐃⵠⲆⵠⲆ = function() {
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[356]).style.backgroundColor = Δ[272];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[476]).style.backgroundColor = Δ[51];
			ΔᐃⲆΔ.set(Δ[95], "high", {
				expires: 30
			});
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[124]).value = ⲆΔⲆⵠ;
			ⲆΔᐃᐃ.ᐃΔⲆᐃⵠⵠⲆ();
			ⵠⵠΔⵠ.ΔⲆᐃᐃΔ = ⲆⵠΔⲆ
		};
		this.ΔⵠΔᐃΔⲆΔΔᐃ = function() {
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[356]).style.backgroundColor = Δ[51];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[476]).style.backgroundColor = Δ[272];
			ΔᐃⲆΔ.set(Δ[95], "low", {
				expires: 30
			});
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[124]).value = .5 / (devicePixelRatio / ⵠⵠΔΔᐃⲆⲆ);
			ⲆΔᐃᐃ.ᐃΔⲆᐃⵠⵠⲆ();
			ⵠⵠΔⵠ.ΔⲆᐃᐃΔ = 0
		};
		ΔᐃⲆΔ.get(Δ[375]) === undefined && ΔⲆⵠⵠⲆ === "FR" ? (ᐃⲆⵠⲆΔ.ⵠΔⵠⵠᐃΔⲆ(), this.mapping = "azerty") : this.mapping = ΔᐃⲆΔ.get(Δ[375]) ? ΔᐃⲆΔ.get(Δ[375]) : "qwerty";
		if ("azerty" == this.mapping) {
			ᐃⲆⵠⲆΔ.ⵠΔⵠⵠᐃΔⲆ();
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[580]).style.backgroundColor = Δ[272];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[89]).style.backgroundColor = Δ[51]
		} else {
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[89]).style.backgroundColor = Δ[272];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[580]).style.backgroundColor = Δ[51]
		}
		this.ⵠΔⵠⵠᐃΔⲆ = function() {
			ᐃⲆⵠⲆΔ.ⵠΔⵠⵠᐃΔⲆ();
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[580]).style.backgroundColor = Δ[272];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[89]).style.backgroundColor = Δ[51];
			ΔᐃⲆΔ.set(Δ[375], "azerty", {
				expires: 30
			})
		};
		this.ⵠⲆΔⵠⵠΔⲆ = function() {
			ᐃⲆⵠⲆΔ.ⵠⲆΔⵠⵠΔⲆ();
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[580]).style.backgroundColor = Δ[51];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[89]).style.backgroundColor = Δ[272];
			ΔᐃⲆΔ.set(Δ[375], "qwerty", {
				expires: 30
			})
		};
		this.ᐃᐃΔΔⵠᐃⵠ = {
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("all_rights_reserved"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("all_rights_reserved").style,
			translate: {
				x: Δⵠⵠ,
				y: 0
			},
			"ᐃᐃⵠ": function() {
				this.style.left = this.translate.x + Δ[ⵠᐃⵠΔ];
				this.style.top = Math.floor(this.translate.y) + Δ[ᐃⲆᐃⲆ]
			}
		};

		function ⵠⲆⵠⵠΔⲆⵠ() {
			var ΔΔΔⲆⵠⲆⵠ = Number(ΔᐃⲆΔ.get("starve_crate"));
			var ΔⵠᐃΔⲆⲆᐃ = Number(ΔᐃⲆΔ.get("starve_dead"));
			var ΔᐃⲆⲆᐃⲆᐃ = Number(ΔᐃⲆΔ.get("starve_book"));
			var ᐃⵠⵠΔⲆⵠᐃ = Number(ΔᐃⲆΔ.get("starve_bag"));
			var ΔΔΔⲆΔᐃΔ = Number(ΔᐃⲆΔ.get("starve_skin"));
			var ⵠᐃᐃⲆⲆⲆᐃ = Number(ΔᐃⲆΔ.get("starve_accessory"));
			ⲆⲆᐃ.ⵠⲆΔΔ = ΔΔΔⲆΔᐃΔ ? ΔΔΔⲆΔᐃΔ : ⵠⲆᐃ;
			ⲆⲆᐃ.ⲆΔⵠΔΔ = ΔᐃⲆⲆᐃⲆᐃ ? ΔᐃⲆⲆᐃⲆᐃ : 0;
			ⲆⲆᐃ.ⵠⵠΔⲆⲆ = ΔΔΔⲆⵠⲆⵠ ? ΔΔΔⲆⵠⲆⵠ : 1;
			ⲆⲆᐃ.ᐃᐃⲆΔⵠ = ⵠᐃᐃⲆⲆⲆᐃ ? ⵠᐃᐃⲆⲆⲆᐃ : 0;
			ⲆⲆᐃ.ΔΔⲆᐃⵠ = ᐃⵠⵠΔⲆⵠᐃ ? ᐃⵠⵠΔⲆⵠᐃ : 0;
			ⲆⲆᐃ.Δᐃⵠⵠᐃ = ΔⵠᐃΔⲆⲆᐃ ? ΔⵠᐃΔⲆⲆᐃ : 0
		}
		ⵠⲆⵠⵠΔⲆⵠ();
		this.unlock = {};
		this.unlock.ⵠⲆΔΔ = [];
		this.unlock.ΔΔⲆᐃⵠ = [];
		this.unlock.ⲆΔⵠΔΔ = [];
		this.unlock.ⵠⵠΔⲆⲆ = [];
		this.unlock.Δᐃⵠⵠᐃ = [];
		this.unlock.ᐃᐃⲆΔⵠ = [];
		this.ᐃⲆⵠᐃⵠᐃΔ = 0;

		function ΔΔΔΔⲆⵠᐃ() {
			var ΔⵠΔᐃⲆ = ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ;
			for (var Δᐃ = ⵠⲆᐃ; Δᐃ < ΔⵠΔᐃⲆ.length; Δᐃ++) {
				if (ⵠⲆⲆ.ⲆⲆⵠΔΔ === ΔⵠΔᐃⲆ[Δᐃ].ⲆⲆΔ) ⲆⲆᐃ.unlock.ⵠⲆΔΔ[Δᐃ] = ⲆⵠΔⲆ;
				else ⲆⲆᐃ.unlock.ⵠⲆΔΔ[Δᐃ] = 0
			}
			var ΔⵠΔᐃⲆ = ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ;
			for (var Δᐃ = 0; ΔⵠΔᐃⲆ.length > Δᐃ; Δᐃ++) {
				if (ⵠⲆⲆ.ⲆⲆⵠΔΔ === ΔⵠΔᐃⲆ[Δᐃ].ⲆⲆΔ) ⲆⲆᐃ.unlock.ᐃᐃⲆΔⵠ[Δᐃ] = ⵠΔᐃ;
				else ⲆⲆᐃ.unlock.ᐃᐃⲆΔⵠ[Δᐃ] = ᐃΔΔ
			}
			var ΔⵠΔᐃⲆ = ᐃᐃⵠⵠ.ⲆⲆⲆⲆ;
			for (var Δᐃ = ⲆⲆⵠⲆ; Δᐃ < ΔⵠΔᐃⲆ.length; Δᐃ++) {
				if (ΔⵠΔᐃⲆ[Δᐃ].ⲆⲆΔ === ⵠⲆⲆ.ⲆⲆⵠΔΔ) ⲆⲆᐃ.unlock.ΔΔⲆᐃⵠ[Δᐃ] = 1;
				else ⲆⲆᐃ.unlock.ΔΔⲆᐃⵠ[Δᐃ] = 0
			}
			var ΔⵠΔᐃⲆ = ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ;
			for (var Δᐃ = ⵠΔΔᐃ; ΔⵠΔᐃⲆ.length > Δᐃ; Δᐃ++) {
				ΔⵠΔᐃⲆ[Δᐃ].ⲆⲆΔ === ⵠⲆⲆ.ⲆⲆⵠΔΔ ? ⲆⲆᐃ.unlock.ⲆΔⵠΔΔ[Δᐃ] = 1 : ⲆⲆᐃ.unlock.ⲆΔⵠΔΔ[Δᐃ] = ⵠΔΔᐃ
			}
			var ΔⵠΔᐃⲆ = ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ;
			for (var Δᐃ = 0; Δᐃ < ΔⵠΔᐃⲆ.length; Δᐃ++) {
				ΔⵠΔᐃⲆ[Δᐃ].ⲆⲆΔ === ⵠⲆⲆ.ⲆⲆⵠΔΔ ? (ⲆⲆᐃ.unlock.ⵠⵠΔⲆⲆ[Δᐃ] = ⲆⵠΔⲆ, ⲆⲆᐃ.unlock.Δᐃⵠⵠᐃ[Δᐃ] = ⵠΔΔ) : (ⲆⲆᐃ.unlock.ⵠⵠΔⲆⲆ[Δᐃ] = ⵠΔⵠⲆ, ⲆⲆᐃ.unlock.Δᐃⵠⵠᐃ[Δᐃ] = 0)
			}
		}
		this.ΔΔΔΔⲆⵠᐃ = ΔΔΔΔⲆⵠᐃ;
		ΔΔΔΔⲆⵠᐃ();
		this.ⵠⲆⲆⵠΔ = {
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("trevda"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("trevda").style,
			translate: {
				x: 0,
				y: ⵠᐃΔⲆ
			},
			"ᐃᐃⵠ": function() {
				this.style.left = this.translate.x + Δ[3];
				this.style.top = Math.floor(this.translate.y) + Δ[3]
			}
		};
		var ⲆⵠⲆⵠⲆ = ⵠᐃΔ;
		var ⲆⵠᐃΔΔ = 30;
		var ᐃᐃⲆᐃΔⲆΔ = function() {
			ⲆⲆᐃ.ᐃᐃⵠ();
			ⲆⵠⲆⵠⲆ++;
			if (ⲆⵠⲆⵠⲆ == ⲆⵠᐃΔΔ) {
				ⲆⲆᐃ.ΔⲆᐃⵠⲆᐃⵠ();
				ⲆⲆᐃ.ⵠΔⲆΔΔᐃΔ = true;
				ⲆⲆᐃ.ᐃᐃⵠ();
				return
			}
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]](ᐃᐃⲆᐃΔⲆΔ, 33)
		};
		this.ΔⲆⵠᐃΔ = function(ⲆⲆᐃⲆⲆ) {
			ΔᐃⵠⲆⲆ = ⲆⲆᐃⲆⲆ;
			ⲆⲆᐃ.ⲆᐃⲆⲆⲆΔⵠ();
			ⲆⲆᐃ.ⵠΔⲆΔΔᐃΔ = 0;
			ⲆᐃⵠΔⲆ = -1;
			Δᐃⵠᐃᐃ()
		};
		var ΔᐃⵠⲆⲆ;
		var ⲆᐃⵠΔⲆ = -1;
		var ΔΔⲆᐃΔ = 30;
		var Δᐃⵠᐃᐃ = function() {
			ⲆⲆᐃ.ᐃᐃⵠ();
			ⲆᐃⵠΔⲆ++;
			if (ⲆᐃⵠΔⲆ == ΔΔⲆᐃΔ) {
				ΔᐃⲆΔ.set("starve_nickname", ⲆⲆᐃ.ⲆⵠΔⵠΔ.input.value, {
					expires: 30
				});
				ⲆⲆᐃ.ⲆⵠΔⵠΔ.style.display = Δ[369];
				ⲆⲆᐃ.ᐃⲆΔⲆⵠ.style.display = Δ[369];
				ⲆⲆᐃ.ᐃⲆⲆᐃⲆΔᐃ.style.display = Δ[369];
				ⲆⲆᐃ.ᐃᐃΔΔⵠᐃⵠ.style.display = Δ[369];
				ⲆⲆᐃ.ⵠⲆⲆⵠΔ.style.display = Δ[369];
				ⲆⲆᐃ.stop();
				ΔᐃⵠⲆⲆ();
				return
			}
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]](Δᐃⵠᐃᐃ, 33)
		};
		this.ΔⲆΔⵠⵠ = false;
		this.stop = function() {
			this.ΔⲆΔⵠⵠ = ⵠⲆⵠᐃᐃ
		};
		this.ⵠⲆᐃᐃΔ = function() {
			check_ads();
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[563]).style.backgroundColor = ⵠ.ⵠᐃΔⲆΔ[ⵠⲆΔⲆⲆ.time];
			ⲆⲆᐃ.ⲆⵠΔⵠΔ.style.display = Δ[151];
			ⲆⲆᐃ.ᐃⲆΔⲆⵠ.style.display = Δ[151];
			ⲆⲆᐃ.ᐃⲆⲆᐃⲆΔᐃ.style.display = Δ[151];
			ⲆⲆᐃ.ᐃᐃΔΔⵠᐃⵠ.style.display = Δ[151];
			ⲆⲆᐃ.ⵠⲆⲆⵠΔ.style.display = Δ[151];
			ⲆⲆᐃ.waiting = ⲆⵠⵠΔᐃ;
			ⲆⲆᐃ.ΔⲆΔⵠⵠ = ⲆᐃⵠⵠⲆ;
			ⲆᐃⵠΔⲆ = -1;
			ⲆⵠⲆⵠⲆ = 0;
			ᐃᐃⲆᐃΔⲆΔ()
		};
		this.ΔΔΔⵠΔᐃΔ = function(ᐃⲆᐃᐃᐃ, ΔⵠΔᐃᐃ) {
			ΔⵠΔᐃᐃ = ΔⵠΔᐃᐃ < 0 ? -ΔⵠΔᐃᐃ : ΔⵠΔᐃᐃ;
			if (ⲆⵠᐃⲆ === (ᐃⲆᐃᐃᐃ.position & ⲆⵠᐃⲆ)) {
				if (ᐃᐃⲆᐃ === (ᐃⲆᐃᐃᐃ.position & ᐃᐃⲆᐃ)) ᐃⲆᐃᐃᐃ.translate.x = ᐃᐃᐃΔ + ᐃⲆᐃᐃᐃ.translate.ⲆΔᐃᐃⲆ - ΔⵠΔᐃᐃ;
				else if (ᐃⲆᐃᐃⵠ === (ᐃⲆᐃᐃᐃ.position & ᐃⲆᐃᐃⵠ)) ᐃⲆᐃᐃᐃ.translate.x = ᐃᐃᐃΔ + ᐃⲆᐃᐃᐃ.translate.ⲆΔᐃᐃⲆ + ΔⵠΔᐃᐃ;
				else ᐃⲆᐃᐃᐃ.translate.x = ᐃᐃᐃΔ + ᐃⲆᐃᐃᐃ.translate.ⲆΔᐃᐃⲆ
			} else if ((ᐃⲆᐃᐃᐃ.position & ᐃᐃⲆᐃ) === ᐃᐃⲆᐃ) ᐃⲆᐃᐃᐃ.translate.x = ᐃⲆᐃᐃᐃ.translate.ⲆΔᐃᐃⲆ - ΔⵠΔᐃᐃ;
			else if ((ᐃⲆᐃᐃᐃ.position & ᐃⲆᐃᐃⵠ) === ᐃⲆᐃᐃⵠ) ᐃⲆᐃᐃᐃ.translate.x = ⲆΔⲆᐃ - ᐃⲆᐃᐃᐃ.translate.ⲆΔᐃᐃⲆ + ΔⵠΔᐃᐃ;
			else ᐃⲆᐃᐃᐃ.translate.x = ᐃⲆᐃᐃᐃ.translate.ⲆΔᐃᐃⲆ;
			if ((ᐃⲆᐃᐃᐃ.position & ᐃΔΔⵠᐃⵠⵠ) === ᐃΔΔⵠᐃⵠⵠ) {
				if (ⵠᐃⲆⵠ === (ᐃⲆᐃᐃᐃ.position & ⵠᐃⲆⵠ)) ᐃⲆᐃᐃᐃ.translate.y = Δᐃᐃᐃ + ᐃⲆᐃᐃᐃ.translate.Δⵠⵠⵠᐃ - ΔⵠΔᐃᐃ;
				else if ((ᐃⲆᐃᐃᐃ.position & ⵠⲆΔᐃᐃⲆⲆ) === ⵠⲆΔᐃᐃⲆⲆ) ᐃⲆᐃᐃᐃ.translate.y = Δᐃᐃᐃ + ᐃⲆᐃᐃᐃ.translate.Δⵠⵠⵠᐃ + ΔⵠΔᐃᐃ;
				else ᐃⲆᐃᐃᐃ.translate.y = Δᐃᐃᐃ + ᐃⲆᐃᐃᐃ.translate.Δⵠⵠⵠᐃ
			} else if (ⵠᐃⲆⵠ === (ᐃⲆᐃᐃᐃ.position & ⵠᐃⲆⵠ)) ᐃⲆᐃᐃᐃ.translate.y = ᐃⲆᐃᐃᐃ.translate.Δⵠⵠⵠᐃ - ΔⵠΔᐃᐃ;
			else if (ⵠⲆΔᐃᐃⲆⲆ === (ᐃⲆᐃᐃᐃ.position & ⵠⲆΔᐃᐃⲆⲆ)) ᐃⲆᐃᐃᐃ.translate.y = ΔⵠⲆΔ + ᐃⲆᐃᐃᐃ.translate.Δⵠⵠⵠᐃ + ΔⵠΔᐃᐃ;
			else ᐃⲆᐃᐃᐃ.translate.y = ᐃⲆᐃᐃᐃ.translate.Δⵠⵠⵠᐃ;
			if (ᐃⲆᐃᐃᐃ.style !== ΔᐃᐃⵠⲆ) {
				ᐃⲆᐃᐃᐃ.style.left = Math.floor(ᐃⲆᐃᐃᐃ.translate.x) + Δ[3];
				ᐃⲆᐃᐃᐃ.style.top = Math.floor(ᐃⲆᐃᐃᐃ.translate.y) + Δ[3]
			}
		};
		this.ᐃᐃⵠ = function() {
			var ΔⵠΔᐃᐃ = 0;
			if (ⲆⵠᐃΔΔ != ⲆⵠⲆⵠⲆ || -ⲆΔⲆⵠ != ⲆᐃⵠΔⲆ) {
				if (ⲆⵠᐃΔΔ != ⲆⵠⲆⵠⲆ) var ΔⵠΔᐃᐃ = 1500 / (ⲆⵠⲆⵠⲆ + ᐃⲆⲆ) - 50;
				if (-ⵠΔⲆ != ⲆᐃⵠΔⲆ) var ΔⵠΔᐃᐃ = -(1750 / (ΔΔⲆᐃΔ - ⲆᐃⵠΔⲆ + 1) - 48)
			}
			for (var Δᐃ = 0; this.Ⲇⵠⵠⵠ.length > Δᐃ; Δᐃ++) this.ΔΔΔⵠΔᐃΔ(this.Ⲇⵠⵠⵠ[Δᐃ], ΔⵠΔᐃᐃ);
			for (var Δᐃ = ⵠᐃⵠⵠ; this.buttons.length > Δᐃ; Δᐃ++) this.ΔΔΔⵠΔᐃΔ(this.buttons[Δᐃ].info, ΔⵠΔᐃᐃ);
			for (var Δᐃ = ⵠⲆΔⵠ; this.ΔΔⵠⲆΔ.length > Δᐃ; Δᐃ++) this.ΔΔΔⵠΔᐃΔ(this.ΔΔⵠⲆΔ[Δᐃ], ΔⵠΔᐃᐃ);
			this.ⲆⵠᐃⲆΔⵠᐃ.translate.x = (ⲆΔⲆᐃ - this.ⲆⵠᐃⲆΔⵠᐃ.ⵠΔ.width) / ⲆⲆⵠᐃ;
			this.ⲆⵠᐃⲆΔⵠᐃ.translate.y = 0;
			this.ᐃⲆⲆᐃⲆΔᐃ.translate.x = ⲆΔⲆᐃ - 450;
			this.ᐃⲆⲆᐃⲆΔᐃ.translate.y = ΔⵠⲆΔ - 40;
			this.ᐃᐃΔΔⵠᐃⵠ.translate.x = ⲆΔⲆᐃ - 340;
			this.ᐃᐃΔΔⵠᐃⵠ.translate.y = ΔⵠⲆΔ - 25;
			this.ⵠⲆⲆⵠΔ.translate.x = ⲆΔⲆᐃ - 320;
			this.ⵠⲆⲆⵠΔ.translate.y = 80;
			if (ⲆⵠⲆⵠⲆ != ⲆⵠᐃΔΔ || -ΔⵠⲆ != ⲆᐃⵠΔⲆ) {
				var ΔᐃⵠⲆ = ⵠᐃⵠⵠ;
				if (ⲆⵠⲆⵠⲆ != ⲆⵠᐃΔΔ) {
					var ΔᐃⵠⲆ = 1500 / (ⲆⵠⲆⵠⲆ + 1) - 50
				}
				if (-ΔⵠⲆ != ⲆᐃⵠΔⲆ) {
					var ΔᐃⵠⲆ = -(1750 / (ΔΔⲆᐃΔ - ⲆᐃⵠΔⲆ + ΔⵠⲆ) - 48)
				}
				this.ⲆⵠᐃⲆΔⵠᐃ.translate.y -= ΔᐃⵠⲆ > ᐃⲆⵠΔ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
				this.ᐃⲆⲆᐃⲆΔᐃ.translate.y -= ΔᐃⵠⲆ < ⲆⲆⵠⲆ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
				this.ᐃᐃΔΔⵠᐃⵠ.translate.y -= ΔᐃⵠⲆ < ⵠΔΔᐃ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ
			}
			this.ᐃⲆⲆᐃⲆΔᐃ.ᐃᐃⵠ();
			this.ᐃᐃΔΔⵠᐃⵠ.ᐃᐃⵠ();
			this.ⵠⲆⲆⵠΔ.ᐃᐃⵠ()
		};
		this.ⵠᐃᐃᐃΔΔⵠ = function(Ⲇⵠⵠ) {
			var ΔⲆΔⵠᐃ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180]);
			var ⵠΔᐃⲆΔⵠΔ = ΔⲆΔⵠᐃ.getContext(Δ[160]);
			ΔⲆΔⵠᐃ.width = 342;
			ΔⲆΔⵠᐃ.height = 342;
			var ᐃⵠⵠⵠⵠ = -Math.PI / 2;
			for (var Δᐃ = 0; Δᐃ < Ⲇⵠⵠ.length; Δᐃ++) {
				var ⲆⵠᐃᐃΔᐃΔΔⵠ = Ⲇⵠⵠ[Δᐃ][0];
				var ΔΔⵠⲆᐃᐃⵠ = Math.PI * Ⲇⵠⵠ[Δᐃ][1] / 180;
				ⵠΔᐃⲆΔⵠΔ.beginPath();
				ⵠΔᐃⲆΔⵠΔ.arc(171, 171, 170, ᐃⵠⵠⵠⵠ, ᐃⵠⵠⵠⵠ + ΔΔⵠⲆᐃᐃⵠ, false);
				ⵠΔᐃⲆΔⵠΔ.lineTo(171, 171);
				ⵠΔᐃⲆΔⵠΔ.fillStyle = ⲆⵠᐃᐃΔᐃΔΔⵠ;
				ⵠΔᐃⲆΔⵠΔ.fill();
				ᐃⵠⵠⵠⵠ += ΔΔⵠⲆᐃᐃⵠ
			}
			return ΔⲆΔⵠᐃ
		};
		this.ᐃⵠⵠⲆⲆΔᐃᐃΔ = function() {
			this.ΔᐃⵠⵠⲆⵠⵠ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[79]).value;
			this.ΔᐃⵠⵠⲆⵠⵠ !== this.ⵠΔΔⲆᐃΔⵠ && (this.ⵠΔΔⲆᐃΔⵠ = this.ΔᐃⵠⵠⲆⵠⵠ, this.ᐃΔⲆΔΔⵠⲆ = ⵠΔᐃᐃⲆ(this.ΔᐃⵠⵠⲆⵠⵠ, Δ[571], Δ[362], 45, 550))
		};
		this.ⲆᐃᐃⲆ = function() {
			ⲆⵠΔⲆⵠⲆΔ();
			ⵠⵠΔⵠ.ⵠⲆᐃⲆⵠⵠⵠ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(ⵠⵠΔⵠ.ⵠⲆᐃⲆⵠⵠⵠ, ⵠⵠΔⵠ.ΔⵠⲆᐃΔΔⲆ, .03);
			this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ].translate.x = this.Ⲇⵠⵠⵠ[0].translate.x + -72 + 165 * ⵠⵠΔⵠ.ⵠⲆᐃⲆⵠⵠⵠ;
			this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ].translate.ⲆΔᐃᐃⲆ = this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ].translate.x;
			this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ].translate.y = this.Ⲇⵠⵠⵠ[Δⵠⵠ].translate.y + 30;
			this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ].translate.Δⵠⵠⵠᐃ = this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ].translate.y;
			for (var Δᐃ = ᐃΔⲆⵠ; this.Ⲇⵠⵠⵠ.length > Δᐃ; Δᐃ++) {
				ⲆᐃⲆΔ === this.Ⲇⵠⵠⵠ[Δᐃ].active && this.Ⲇⵠⵠⵠ[Δᐃ].ⲆᐃᐃⲆ(ᐃ)
			}
			var ⵠⵠᐃΔⲆⵠᐃ = this.ᐃⲆⲆΔⵠ - Date.now();
			if (ⵠⵠᐃΔⲆⵠᐃ > ⵠⲆΔⵠ) {
				var ⵠⵠⲆⲆ = Math.floor(ⵠⵠᐃΔⲆⵠᐃ / 6e4);
				var ᐃΔΔΔⲆ = Math.floor(ⵠⵠⲆⲆ / 60);
				ⵠⵠⲆⲆ %= 60;
				ⵠⵠⲆⲆ !== this.ΔⲆΔΔᐃⵠΔ && (this.ΔⲆΔΔᐃⵠΔ = ⵠⵠⲆⲆ, ⵠⵠⲆⲆ = 10 > ⵠⵠⲆⲆ ? "0" + ⵠⵠⲆⲆ : "" + ⵠⵠⲆⲆ, ⲆⲆᐃ.ΔⲆΔⲆΔΔΔ = ⵠΔᐃᐃⲆ(ⵠⵠⲆⲆ, Δ[571], Δ[362], 80, 200));
				this.ⲆⲆⲆᐃΔᐃᐃ !== ᐃΔΔΔⲆ && (this.ⲆⲆⲆᐃΔᐃᐃ = ᐃΔΔΔⲆ, ᐃΔΔΔⲆ = 10 > ᐃΔΔΔⲆ ? "0" + ᐃΔΔΔⲆ : "" + ᐃΔΔΔⲆ, ⲆⲆᐃ.ⵠⲆΔⵠⵠΔΔ = ⵠΔᐃᐃⲆ(ᐃΔΔΔⲆ, Δ[571], Δ[362], 80, 200));
				var ᐃⲆⲆⲆⵠ = this.Ⲇⵠⵠⵠ[ᐃⲆΔᐃⲆⵠᐃ];
				ᐃⲆⲆⲆⵠ.ⲆᐃᐃⲆ(ᐃ);
				var ⵠΔ = this.ⵠⲆΔⵠⵠΔΔ;
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃⲆⲆⲆⵠ.translate.x - ⵠΔ.width / 4 + 182, ᐃⲆⲆⲆⵠ.translate.y - ⵠΔ.height / 4 + 40, ⵠΔ.width / 2, ⵠΔ.height / 2);
				var ⵠΔ = this.ΔⲆΔⲆΔΔΔ;
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃⲆⲆⲆⵠ.translate.x - ⵠΔ.width / 4 + 251, ᐃⲆⲆⲆⵠ.translate.y - ⵠΔ.height / 4 + 40, ⵠΔ.width / 2, ⵠΔ.height / 2)
			}
			var ⵠⵠᐃΔⲆⵠᐃ = this.ⵠΔᐃⵠⵠᐃΔ - Date.now();
			if (ⵠⵠᐃΔⲆⵠᐃ > 0) {
				var ⵠⵠⲆⲆ = Math.floor(ⵠⵠᐃΔⲆⵠᐃ / 6e4);
				var ᐃΔΔΔⲆ = Math.floor(ⵠⵠⲆⲆ / 60);
				var ⵠⵠⲆ = Math.floor(ᐃΔΔΔⲆ / 24);
				ⵠⵠⲆⲆ %= 60;
				ᐃΔΔΔⲆ %= 24;
				if (ⵠⵠⲆⲆ !== this.ⵠⲆᐃΔᐃⵠᐃ) {
					this.ⵠⲆᐃΔᐃⵠᐃ = ⵠⵠⲆⲆ;
					ⵠⵠⲆⲆ = 10 > ⵠⵠⲆⲆ ? "0" + ⵠⵠⲆⲆ : "" + ⵠⵠⲆⲆ;
					ⲆⲆᐃ.ΔΔΔⵠᐃΔᐃ = ⵠΔᐃᐃⲆ(ⵠⵠⲆⲆ, Δ[571], Δ[362], 80, 200)
				}
				this.ⵠΔΔⵠᐃⵠᐃ !== ᐃΔΔΔⲆ && (this.ⵠΔΔⵠᐃⵠᐃ = ᐃΔΔΔⲆ, ᐃΔΔΔⲆ = 10 > ᐃΔΔΔⲆ ? "0" + ᐃΔΔΔⲆ : "" + ᐃΔΔΔⲆ, ⲆⲆᐃ.ΔⵠⲆⲆΔⲆⵠ = ⵠΔᐃᐃⲆ(ᐃΔΔΔⲆ, Δ[571], Δ[362], 80, 200));
				if (ⵠⵠⲆ !== this.ⲆᐃⵠⵠⵠΔᐃ) {
					this.ⲆᐃⵠⵠⵠΔᐃ = ⵠⵠⲆ;
					ⵠⵠⲆ = ⵠⵠⲆ < ⵠᐃᐃⵠⵠ ? "0" + ⵠⵠⲆ : "" + ⵠⵠⲆ;
					ⲆⲆᐃ.ⵠᐃΔⲆᐃⵠᐃ = ⵠΔᐃᐃⲆ(ⵠⵠⲆ, Δ[571], Δ[362], 80, 200)
				}
				var ᐃⲆⲆⲆⵠ = this.Ⲇⵠⵠⵠ[ᐃᐃⵠᐃᐃⲆᐃ];
				ᐃⲆⲆⲆⵠ.ⲆᐃᐃⲆ(ᐃ);
				var ⵠΔ = this.ⵠᐃΔⲆᐃⵠᐃ;
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃⲆⲆⲆⵠ.translate.x - ⵠΔ.width / ⲆΔⲆᐃΔ + 113, ᐃⲆⲆⲆⵠ.translate.y - ⵠΔ.height / ⵠⲆⲆΔΔ + 40, ⵠΔ.width / 2, ⵠΔ.height / 2);
				var ⵠΔ = this.ΔⵠⲆⲆΔⲆⵠ;
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃⲆⲆⲆⵠ.translate.x - ⵠΔ.width / 4 + 182, ᐃⲆⲆⲆⵠ.translate.y - ⵠΔ.height / 4 + 40, ⵠΔ.width / ⲆᐃᐃΔ, ⵠΔ.height / 2);
				var ⵠΔ = this.ΔΔΔⵠᐃΔᐃ;
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃⲆⲆⲆⵠ.translate.x - ⵠΔ.width / ΔᐃΔⵠ + 251, ᐃⲆⲆⲆⵠ.translate.y - ⵠΔ.height / 4 + 40, ⵠΔ.width / 2, ⵠΔ.height / ⲆᐃⵠⲆ)
			}
			if ((this.ᐃΔΔⵠⲆ & ⲆΔⵠⲆᐃ) === ⲆΔⵠⲆᐃ) this.buttons[ⲆᐃΔΔⲆΔᐃ].info.state = ΔᐃⵠΔ;
			else if ((this.ᐃΔΔⵠⲆ & ᐃΔⵠᐃⲆ) === ᐃΔⵠᐃⲆ) this.buttons[ⵠⵠⵠⲆΔΔⲆ].info.state = ΔᐃⵠΔ;
			else if ((this.ᐃΔΔⵠⲆ & ⵠⵠⵠΔⵠ) === ⵠⵠⵠΔⵠ) this.buttons[ⲆΔⵠΔΔΔᐃ].info.state = ΔᐃⵠΔ;
			else if (ΔⲆⲆⵠⵠ === (this.ᐃΔΔⵠⲆ & ΔⲆⲆⵠⵠ)) this.buttons[ΔᐃΔⵠΔⵠⲆ].info.state = ΔᐃⵠΔ;
			else if ((this.ᐃΔΔⵠⲆ & ΔⲆΔΔΔⲆᐃ) === ΔⲆΔΔΔⲆᐃ) this.buttons[ⲆⲆⵠⲆⵠᐃⲆ].info.state = ΔᐃⵠΔ;
			else if ((this.ᐃΔΔⵠⲆ & ΔΔΔⲆⵠ) === ΔΔΔⲆⵠ) this.buttons[ⲆⲆⵠⵠΔᐃᐃ].info.state = ΔᐃⵠΔ;
			else if (ΔᐃΔᐃⲆ === (this.ᐃΔΔⵠⲆ & ΔᐃΔᐃⲆ)) this.buttons[ᐃⵠᐃⲆᐃᐃⲆ].info.state = ΔᐃⵠΔ;
			else if (ⵠⲆΔΔⵠᐃⲆ === (this.ᐃΔΔⵠⲆ & ⵠⲆΔΔⵠᐃⲆ)) this.buttons[ᐃⵠᐃⲆᐃᐃⲆ].info.state = ΔᐃⵠΔ;
			else if (ⵠⵠᐃⲆΔⵠⵠ === (this.ᐃΔΔⵠⲆ & ⵠⵠᐃⲆΔⵠⵠ)) this.buttons[ᐃⵠᐃⲆᐃᐃⲆ].info.state = ΔᐃⵠΔ;
			else if ((this.ᐃΔΔⵠⲆ & ᐃⵠΔΔᐃⵠⵠ) === ᐃⵠΔΔᐃⵠⵠ) this.buttons[ᐃⵠᐃⲆᐃᐃⲆ].info.state = ΔᐃⵠΔ;
			else if ((this.ᐃΔΔⵠⲆ & ⲆⲆⵠⲆΔΔΔ) === ⲆⲆⵠⲆΔΔΔ) this.buttons[ᐃⵠᐃⲆᐃᐃⲆ].info.state = ΔᐃⵠΔ;
			else if ((this.ᐃΔΔⵠⲆ & ᐃΔΔΔⵠⲆᐃ) === ᐃΔΔΔⵠⲆᐃ) this.buttons[ᐃⵠᐃⲆᐃᐃⲆ].info.state = ΔᐃⵠΔ;
			else if ((this.ᐃΔΔⵠⲆ & ᐃⲆⲆᐃⲆΔΔ) === ᐃⲆⲆᐃⲆΔΔ) this.buttons[ᐃⵠᐃⲆᐃᐃⲆ].info.state = ΔᐃⵠΔ;
			else if (ⲆⲆⵠⲆⵠ === (this.ᐃΔΔⵠⲆ & ⲆⲆⵠⲆⵠ)) this.buttons[ⲆΔⵠΔΔΔᐃ].info.state = ΔᐃⵠΔ;
			else if ((this.ᐃΔΔⵠⲆ & ᐃⲆΔⲆᐃ) === ᐃⲆΔⲆᐃ) this.buttons[ⲆΔⵠΔΔΔᐃ].info.state = ΔᐃⵠΔ;
			else if (ⲆΔᐃⲆⲆ === (this.ᐃΔΔⵠⲆ & ⲆΔᐃⲆⲆ)) this.buttons[ⲆΔⵠΔΔΔᐃ].info.state = ΔᐃⵠΔ;
			else if ((this.ᐃΔΔⵠⲆ & ΔΔⲆⵠⲆ) === ΔΔⲆⵠⲆ) this.buttons[ⲆΔⵠΔΔΔᐃ].info.state = ΔᐃⵠΔ;
			else if (ⵠⵠΔΔⵠ === (this.ᐃΔΔⵠⲆ & ⵠⵠΔΔⵠ)) this.buttons[ⲆΔⵠΔΔΔᐃ].info.state = ΔᐃⵠΔ;
			else if ((this.ᐃΔΔⵠⲆ & ΔⵠⲆΔΔ) === ΔⵠⲆΔΔ) this.buttons[ⲆΔⵠΔΔΔᐃ].info.state = ΔᐃⵠΔ;
			else if (ⵠΔᐃΔⲆ === (this.ᐃΔΔⵠⲆ & ⵠΔᐃΔⲆ)) this.buttons[ⵠΔᐃⵠᐃⲆⵠ].info.state = ΔᐃⵠΔ;
			else if ((this.ᐃΔΔⵠⲆ & ᐃᐃⲆᐃΔ) === ᐃᐃⲆᐃΔ) this.buttons[ⵠΔᐃⵠᐃⲆⵠ].info.state = ΔᐃⵠΔ;
			else if (ΔΔⵠΔⲆ === (this.ᐃΔΔⵠⲆ & ΔΔⵠΔⲆ)) this.buttons[ⵠΔᐃⵠᐃⲆⵠ].info.state = ΔᐃⵠΔ;
			else if (ΔΔᐃⲆᐃⵠⲆ === (this.ᐃΔΔⵠⲆ & ΔΔᐃⲆᐃⵠⲆ)) this.buttons[ΔᐃΔⵠΔⵠⲆ].info.state = ΔᐃⵠΔ;
			if ((this.ᐃΔΔⵠⲆ & ᐃΔⵠᐃⲆ) === ᐃΔⵠᐃⲆ) {
				this.Δⵠᐃᐃᐃⵠⵠ === this.ⵠⵠᐃⵠⵠᐃⵠ ? (this.ⵠΔᐃⲆⲆⵠⲆ = this.ⲆΔⲆⲆᐃΔΔ, this.buttons[this.ⲆΔⲆⲆᐃΔΔ].info.active = ⲆⵠⲆⲆ, this.buttons[this.ΔᐃⲆⵠΔΔⵠ].info.active = ⲆⵠⲆⲆ, this.buttons[this.ᐃᐃⵠⲆⵠⵠⲆ].info.active = ⲆⵠⲆⲆ) : (this.buttons[this.ⲆΔⲆⲆᐃΔΔ].info.active = ⲆᐃⲆΔ, this.buttons[this.ΔᐃⲆⵠΔΔⵠ].info.active = ⲆᐃⲆΔ, this.buttons[this.ᐃᐃⵠⲆⵠⵠⲆ].info.active = ⲆᐃⲆΔ);
				if (this.ⲆᐃⵠᐃⵠΔⲆ === this.ⵠⵠᐃⵠⵠᐃⵠ) this.buttons[this.ⲆᐃⵠᐃⵠΔⲆ].info.state = ΔᐃⵠΔ;
				else if (this.ⵠⵠᐃⵠⵠᐃⵠ === this.ᐃΔⵠᐃⲆΔᐃ) this.buttons[this.ᐃΔⵠᐃⲆΔᐃ].info.state = ΔᐃⵠΔ;
				else if (this.ⵠⵠᐃⵠⵠᐃⵠ === this.Δⵠᐃᐃᐃⵠⵠ) this.buttons[this.Δⵠᐃᐃᐃⵠⵠ].info.state = ΔᐃⵠΔ;
				else if (this.ⲆᐃᐃᐃⲆⵠΔ === this.ⵠⵠᐃⵠⵠᐃⵠ) this.buttons[this.ⲆᐃᐃᐃⲆⵠΔ].info.state = ΔᐃⵠΔ;
				else if (this.ΔⲆⲆᐃⲆⲆⲆ === this.ⵠⵠᐃⵠⵠᐃⵠ) this.buttons[this.ΔⲆⲆᐃⲆⲆⲆ].info.state = ΔᐃⵠΔ;
				if (this.ⲆΔⲆⲆᐃΔΔ === this.ⵠΔᐃⲆⲆⵠⲆ) this.buttons[this.ⲆΔⲆⲆᐃΔΔ].info.state = ΔᐃⵠΔ;
				else if (this.ⵠΔᐃⲆⲆⵠⲆ === this.ΔᐃⲆⵠΔΔⵠ) this.buttons[this.ΔᐃⲆⵠΔΔⵠ].info.state = ΔᐃⵠΔ;
				else if (this.ᐃᐃⵠⲆⵠⵠⲆ === this.ⵠΔᐃⲆⲆⵠⲆ) this.buttons[this.ᐃᐃⵠⲆⵠⵠⲆ].info.state = ΔᐃⵠΔ;
				if (this.ⵠᐃᐃⲆᐃΔΔ === this.ⵠⵠⲆⵠⲆⵠΔ) this.buttons[this.ⵠᐃᐃⲆᐃΔΔ].info.state = ΔᐃⵠΔ;
				else if (this.ⵠⵠⲆⵠⲆⵠΔ === this.ᐃⵠⲆⵠⵠⵠᐃ) this.buttons[this.ᐃⵠⲆⵠⵠⵠᐃ].info.state = ΔᐃⵠΔ;
				else if (this.ⵠⵠⲆⵠⲆⵠΔ === this.ᐃᐃⲆⵠᐃᐃΔ) this.buttons[this.ᐃᐃⲆⵠᐃᐃΔ].info.state = ΔᐃⵠΔ;
				if (this.ΔᐃⵠΔΔⵠⲆ === this.ⵠⵠⵠᐃᐃΔⲆ) this.buttons[this.ⵠⵠⵠᐃᐃΔⲆ].info.state = ΔᐃⵠΔ;
				else if (this.ⲆⵠⵠΔⵠᐃᐃ === this.ΔᐃⵠΔΔⵠⲆ) this.buttons[this.ⲆⵠⵠΔⵠᐃᐃ].info.state = ΔᐃⵠΔ;
				else if (this.ⲆⵠᐃⲆⵠⵠᐃ === this.ΔᐃⵠΔΔⵠⲆ) this.buttons[this.ⲆⵠᐃⲆⵠⵠᐃ].info.state = ΔᐃⵠΔ;
				else if (this.ΔᐃⵠΔΔⵠⲆ === this.ⲆⵠⲆᐃⲆᐃⵠ) this.buttons[this.ⲆⵠⲆᐃⲆᐃⵠ].info.state = ΔᐃⵠΔ;
				else if (this.ΔᐃⵠΔΔⵠⲆ === this.ⵠᐃⲆⲆᐃⵠᐃ) this.buttons[this.ⵠᐃⲆⲆᐃⵠᐃ].info.state = ΔᐃⵠΔ;
				else if (this.ΔᐃⵠΔΔⵠⲆ === this.ΔᐃΔᐃⲆᐃⵠ) this.buttons[this.ΔᐃΔᐃⲆᐃⵠ].info.state = ΔᐃⵠΔ
			}
			if ((this.ᐃΔΔⵠⲆ & ΔⲆⲆⵠⵠ) === ΔⲆⲆⵠⵠ) {
				if (this.ⲆⵠᐃΔᐃⵠᐃ === -1) this.buttons[ᐃΔΔᐃⲆΔⵠⵠⲆ].info.state = ΔᐃⵠΔ;
				else if (ⵠΔᐃⲆ.ᐃᐃΔⲆⲆ === this.ⲆⵠᐃΔᐃⵠᐃ) this.buttons[ⵠⵠⲆⲆᐃᐃⵠⲆⲆ].info.state = ΔᐃⵠΔ;
				else if (ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ === this.ⲆⵠᐃΔᐃⵠᐃ) this.buttons[ΔᐃᐃΔⵠᐃⲆᐃΔ].info.state = ΔᐃⵠΔ;
				else if (ⵠΔᐃⲆ.ΔᐃΔⲆᐃ === this.ⲆⵠᐃΔᐃⵠᐃ) this.buttons[ⵠⲆⵠⵠⵠⵠᐃⵠⲆ].info.state = ΔᐃⵠΔ;
				else if (this.ⲆⵠᐃΔᐃⵠᐃ === ⵠΔᐃⲆ.ⵠΔΔⲆⵠ) this.buttons[ᐃΔⵠΔⲆΔⲆⵠᐃ].info.state = ΔᐃⵠΔ;
				if (0 === this.ⲆᐃΔⲆΔΔΔ) this.buttons[ⵠⲆⲆΔᐃᐃΔᐃΔ].info.state = ΔᐃⵠΔ;
				else if (1 === this.ⲆᐃΔⲆΔΔΔ) this.buttons[ⵠⲆⵠᐃⵠⲆⵠᐃⵠ].info.state = ΔᐃⵠΔ;
				else if (ΔⲆᐃⲆ === this.ⲆᐃΔⲆΔΔΔ) this.buttons[ⲆΔⲆΔⲆᐃᐃⵠᐃ].info.state = ΔᐃⵠΔ;
				else if (3 === this.ⲆᐃΔⲆΔΔΔ) this.buttons[ΔⵠΔⵠⲆⲆᐃΔΔ].info.state = ΔᐃⵠΔ;
				else if (4 === this.ⲆᐃΔⲆΔΔΔ) this.buttons[ᐃⲆⲆⵠⲆᐃⵠⵠᐃ].info.state = ΔᐃⵠΔ;
				else if (this.ⲆᐃΔⲆΔΔΔ === ᐃᐃⲆΔΔ) this.buttons[ΔⲆᐃⵠᐃΔⵠⲆᐃ].info.state = ΔᐃⵠΔ
			}
			if (ⲆΔⵠⲆᐃ === (this.ᐃΔΔⵠⲆ & ⲆΔⵠⲆᐃ) && ᐃⵠΔΔ.ⲆΔΔⲆᐃⲆᐃ === 0) {
				this.buttons[ⲆⵠⲆΔⲆ].ⵠⵠⵠᐃΔᐃΔ(ᐃⵠⵠⲆ.ⵠΔΔⲆ) ? this.buttons[ⲆⵠⲆΔⲆ].hint = Math.min(ⲆⲆⲆᐃ, this.buttons[ⲆⵠⲆΔⲆ].hint + ΔᐃⲆⲆ * 1.5) : this.buttons[ⲆⵠⲆΔⲆ].hint = Math.max(Δⵠⵠ, this.buttons[ⲆⵠⲆΔⲆ].hint - 1.5 * ΔᐃⲆⲆ);
				if (this.buttons[ΔⵠΔⵠΔ].ⵠⵠⵠᐃΔᐃΔ(ᐃⵠⵠⲆ.ⵠΔΔⲆ)) this.buttons[ΔⵠΔⵠΔ].hint = Math.min(1, this.buttons[ΔⵠΔⵠΔ].hint + 1.5 * ΔᐃⲆⲆ);
				else this.buttons[ΔⵠΔⵠΔ].hint = Math.max(0, this.buttons[ΔⵠΔⵠΔ].hint - ΔᐃⲆⲆ * 1.5);
				if (this.buttons[ⲆΔΔⲆᐃ].ⵠⵠⵠᐃΔᐃΔ(ᐃⵠⵠⲆ.ⵠΔΔⲆ)) this.buttons[ⲆΔΔⲆᐃ].hint = Math.min(ᐃⲆΔ, this.buttons[ⲆΔΔⲆᐃ].hint + 1.5 * ΔᐃⲆⲆ);
				else this.buttons[ⲆΔΔⲆᐃ].hint = Math.max(0, this.buttons[ⲆΔΔⲆᐃ].hint - 1.5 * ΔᐃⲆⲆ);
				this.buttons[ⲆᐃⲆᐃᐃ].ⵠⵠⵠᐃΔᐃΔ(ᐃⵠⵠⲆ.ⵠΔΔⲆ) ? this.buttons[ⲆᐃⲆᐃᐃ].hint = Math.min(ⵠΔⲆ, this.buttons[ⲆᐃⲆᐃᐃ].hint + ΔᐃⲆⲆ * 1.5) : this.buttons[ⲆᐃⲆᐃᐃ].hint = Math.max(ᐃⲆⵠΔ, this.buttons[ⲆᐃⲆᐃᐃ].hint - 1.5 * ΔᐃⲆⲆ);
				if (this.buttons[ΔᐃⵠⲆΔ].ⵠⵠⵠᐃΔᐃΔ(ᐃⵠⵠⲆ.ⵠΔΔⲆ)) this.buttons[ΔᐃⵠⲆΔ].hint = Math.min(ⵠⲆⲆⲆ, this.buttons[ΔᐃⵠⲆΔ].hint + ΔᐃⲆⲆ * 1.5);
				else this.buttons[ΔᐃⵠⲆΔ].hint = Math.max(ⵠⲆⵠ, this.buttons[ΔᐃⵠⲆΔ].hint - ΔᐃⲆⲆ * 1.5);
				if (this.buttons[ⵠⲆⵠΔⲆ].ⵠⵠⵠᐃΔᐃΔ(ᐃⵠⵠⲆ.ⵠΔΔⲆ)) this.buttons[ⵠⲆⵠΔⲆ].hint = Math.min(ⵠⵠᐃ, this.buttons[ⵠⲆⵠΔⲆ].hint + 1.5 * ΔᐃⲆⲆ);
				else this.buttons[ⵠⲆⵠΔⲆ].hint = Math.max(0, this.buttons[ⵠⲆⵠΔⲆ].hint - 1.5 * ΔᐃⲆⲆ)
			}
			var ⵠⵠΔⲆΔᐃᐃ = ⲆⲆⲆᐃ;
			if ((this.ᐃΔΔⵠⲆ & (ⵠⲆΔΔⵠᐃⲆ | ⵠⵠᐃⲆΔⵠⵠ | ᐃⵠΔΔᐃⵠⵠ | ⲆⲆⵠⲆΔΔΔ | ᐃΔΔΔⵠⲆᐃ | ᐃⲆⲆᐃⲆΔΔ)) > 1) {
				var ⵠΔ = ΔⲆ.ⵠⲆᐃⲆⲆⲆⵠ;
				ᐃ.save();
				ᐃ.translate(ᐃᐃᐃΔ, ⲆⲆΔⲆⵠᐃΔⲆⲆ + ⵠΔ.height / 4);
				1 === this.ΔⲆΔⵠᐃ && (this.ⲆᐃⲆⵠΔᐃᐃ += ΔᐃⲆⲆ / ᐃⵠᐃⲆ, ⵠⵠΔⲆΔᐃᐃ = this.ΔⲆⵠᐃΔΔᐃ - ᐃⵠⲆⲆⲆ / Math.pow(1 + this.ⲆᐃⲆⵠΔᐃᐃ, 1 + this.ⲆᐃⲆⵠΔᐃᐃ), ᐃ.rotate(ⵠⵠΔⲆΔᐃᐃ));
				ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ⵠᐃΔΔΔ, -ⵠΔ.height / 4, ⵠΔ.width / 2, ⵠΔ.height / 2);
				ᐃ.restore()
			}
			if (0 === ᐃⵠΔΔ.ⲆΔΔⲆᐃⲆᐃ) {
				if (ⵠΔᐃⲆ.ᐃᐃΔⲆⲆ === ᐃⵠΔΔ.ⵠⵠᐃΔⲆ) this.buttons[ⲆⵠⲆΔⲆ].info.state = ΔᐃⵠΔ;
				else if (ⵠΔᐃⲆ.ⵠΔΔⲆⵠ === ᐃⵠΔΔ.ⵠⵠᐃΔⲆ) this.buttons[ΔⵠΔⵠΔ].info.state = ΔᐃⵠΔ;
				else if (ᐃⵠΔΔ.ⵠⵠᐃΔⲆ === ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ) this.buttons[ΔᐃⵠⲆΔ].info.state = ΔᐃⵠΔ;
				else if (ⵠΔᐃⲆ.ΔᐃΔⲆᐃ === ᐃⵠΔΔ.ⵠⵠᐃΔⲆ) this.buttons[ⵠⲆⵠΔⲆ].info.state = ΔᐃⵠΔ;
				else if (ᐃⵠΔΔ.ⵠⵠᐃΔⲆ === ⵠΔᐃⲆ.ⲆΔΔⲆᐃ) this.buttons[ⲆΔΔⲆᐃ].info.state = ΔᐃⵠΔ;
				else ᐃⵠΔΔ.ⵠⵠᐃΔⲆ === ⵠΔᐃⲆ.ⲆᐃⲆᐃᐃ && (this.buttons[ⲆᐃⲆᐃᐃ].info.state = ΔᐃⵠΔ)
			}
			for (var Δᐃ = 1; this.buttons.length > Δᐃ; Δᐃ++) {
				if (this.buttons[Δᐃ].info.active === ⲆᐃⲆΔ) this.buttons[Δᐃ].ⲆᐃᐃⲆ(ᐃ)
			}
			this.Ⲇⵠⵠⵠ[ⲆΔⵠΔ].ⲆᐃᐃⲆ(ᐃ);
			if ((this.ᐃΔΔⵠⲆ & (ⲆΔⲆⵠΔⵠΔ | ⵠΔΔⵠⵠᐃΔ)) > ⵠⲆⵠ) {
				var ⵠΔ = this.ᐃΔⲆΔΔⵠⲆ;
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / 4, 138, ⵠΔ.width / ΔⲆⲆⵠ, ⵠΔ.height / Δⵠᐃᐃ)
			}
			var ΔΔΔⵠⲆ = Math.max(ΔⵠⲆ, Math.min(18, Math.floor((ⵠⵠΔⵠ.ΔΔΔⵠⲆ + ⵠⵠᐃΔ) / 2)));
			this.Ⲇⵠⵠⵠ[ΔΔΔⵠⲆ].active = ⲆᐃⲆΔ;
			this.Ⲇⵠⵠⵠ[ΔΔΔⵠⲆ].ⲆᐃᐃⲆ(ᐃ);
			this.Ⲇⵠⵠⵠ[ΔΔΔⵠⲆ].active = ⲆⵠⲆⲆ;
			this.buttons[0].ⲆᐃᐃⲆ(ᐃ);
			if ((this.ᐃΔΔⵠⲆ & (ⵠⵠⵠΔⵠ | ᐃⲆΔⲆᐃ | ΔΔⲆⵠⲆ | ⲆⲆⵠⲆⵠ | ⵠⵠΔΔⵠ)) > ⵠⵠᐃ) {
				var ⲆΔᐃᐃⲆ = (this.ᐃΔΔⵠⲆ & (ᐃⲆΔⲆᐃ | ΔΔⲆⵠⲆ | ⲆⲆⵠⲆⵠ | ⵠⵠΔΔⵠ)) > ᐃⲆΔ ? -190 : 0;
				var ⵠΔ = Ⲇⵠ[ⵠ.ⲆⲆⲆⲆ][this.ΔΔⲆᐃⵠ][this.ᐃⲆⵠᐃⵠᐃΔ];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / 4 + ⲆΔᐃᐃⲆ, 183, ⵠΔ.width / ⵠΔᐃΔᐃ, ⵠΔ.height / 2);
				this.Δᐃⵠⵠ = (this.Δᐃⵠⵠ + ΔᐃⲆⲆ * 1e3) % 2e3;
				var ⲆᐃΔ = 4.5 * (this.Δᐃⵠⵠ < 1e3) ? this.Δᐃⵠⵠ / 1e3 : (2e3 - this.Δᐃⵠⵠ) / 1e3;
				var ⵠΔ = Ⲇⵠ[ⵠ.Δⵠᐃᐃⵠ][this.ⲆΔⵠΔΔ][this.ᐃⲆⵠᐃⵠᐃΔ];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / 4 - 62 + ⲆᐃΔ + ⲆΔᐃᐃⲆ, 240, ⵠΔ.width / 2, ⵠΔ.height / 2);
				var ⵠΔ = Ⲇⵠ[ⵠ.Ⲇᐃᐃⵠᐃ][this.ⵠⲆΔΔ][this.ᐃⲆⵠᐃⵠᐃΔ];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / ΔᐃΔⲆΔ - 54 + ⲆᐃΔ + ⲆΔᐃᐃⲆ, 272, ⵠΔ.width / 2, ⵠΔ.height / 2);
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / 4 + 54 - ⲆᐃΔ + ⲆΔᐃᐃⲆ, 272, ⵠΔ.width / 2, ⵠΔ.height / 2);
				var ⵠΔ = Ⲇⵠ[ⵠ.ᐃᐃᐃΔⲆᐃᐃ][this.ⵠⲆΔΔ][this.ᐃⲆⵠᐃⵠᐃΔ];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / ᐃᐃᐃΔⵠ + ⲆΔᐃᐃⲆ, 222, ⵠΔ.width / ΔΔᐃᐃ, ⵠΔ.height / ⲆⲆΔΔ);
				var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠΔⲆᐃ][this.ᐃᐃⲆΔⵠ][this.ᐃⲆⵠᐃⵠᐃΔ];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / ⲆⵠⵠⲆ + ⲆΔᐃᐃⲆ, 222, ⵠΔ.width / 2, ⵠΔ.height / 2)
			}
			if ((this.ᐃΔΔⵠⲆ & ⵠⵠⵠΔⵠ) === ⵠⵠⵠΔⵠ) {
				var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⲆⵠᐃ][this.ⵠⵠΔⲆⲆ][this.ᐃⲆⵠᐃⵠᐃΔ];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / ⲆⵠⲆᐃ - 61, 406 - ⵠΔ.height / ⲆⵠⲆᐃ, ⵠΔ.width / 2, ⵠΔ.height / 2);
				var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⲆⵠᐃ][this.Δᐃⵠⵠᐃ][this.ᐃⲆⵠᐃⵠᐃΔ];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / 4 + 53, 406 - ⵠΔ.height / 4, ⵠΔ.width / ⲆⲆΔΔ, ⵠΔ.height / ΔⲆᐃⲆ)
			}
			if ((this.ᐃΔΔⵠⲆ & ⲆΔᐃⲆⲆ) === ⲆΔᐃⲆⲆ) {
				var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⲆⵠᐃ][this.Δᐃⵠⵠᐃ][this.ᐃⲆⵠᐃⵠᐃΔ];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / ⵠᐃΔΔΔ - 200, 268 - ⵠΔ.height / 4, ⵠΔ.width / 2, ⵠΔ.height / 2)
			}
			if (ΔⵠⲆΔΔ === (this.ᐃΔΔⵠⲆ & ΔⵠⲆΔΔ)) {
				var ⵠΔ = Ⲇⵠ[ⵠ.ⵠⵠⲆⵠᐃ][this.ⵠⵠΔⲆⲆ][this.ᐃⲆⵠᐃⵠᐃΔ];
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / ⲆⵠⲆⲆⲆ - 200, 268 - ⵠΔ.height / 4, ⵠΔ.width / 2, ⵠΔ.height / 2)
			}
			if (1 < (this.ᐃΔΔⵠⲆ & (ᐃⲆΔⲆᐃ | ΔΔⲆⵠⲆ | ⲆⲆⵠⲆⵠ | ⵠⵠΔΔⵠ | ⲆΔᐃⲆⲆ | ΔⵠⲆΔΔ))) {
				for (var Δᐃ = 1; this.buttons.length > Δᐃ; Δᐃ++) {
					if (0 === (this.buttons[Δᐃ].view & this.ᐃΔΔⵠⲆ)) continue;
					var ΔⲆⲆᐃ = this.buttons[Δᐃ].info;
					if (0 <= ΔⲆⲆᐃ.ᐃⵠΔⵠᐃⵠΔ) {
						var ⵠΔ = ΔⲆⲆᐃ.ΔⲆⲆᐃⲆⲆⵠΔⲆ[ΔⲆⲆᐃ.ᐃⵠΔⵠᐃⵠΔ].ⵠⵠⲆ;
						ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔⲆⲆᐃ.translate.x - ⵠΔ.width / 8 + 44.5, ΔⲆⲆᐃ.translate.y - ⵠΔ.height / 8 + 45.5, ⵠΔ.width / 4, ⵠΔ.height / ⲆⵠⲆⲆⲆ);
						if (ΔⲆⲆᐃ.ⵠⲆΔΔⵠΔΔ !== 1) {
							var ⵠΔ = ΔⲆ.ᐃⵠΔⲆⲆⵠΔ;
							ᐃΔΔⲆ(ᐃ, ⵠΔ, ΔⲆⲆᐃ.translate.x - ⵠΔ.width / ΔᐃΔΔ + 44.5, ΔⲆⲆᐃ.translate.y - ⵠΔ.height / 4 + 44.5, ⵠΔ.width / 2, ⵠΔ.height / ⵠΔᐃⵠ)
						}
					}
				}
				var ⵠΔ = this.ΔΔᐃⵠΔᐃⲆ;
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - 312, 375, ⵠΔ.width / 2, ⵠΔ.height / ⲆᐃᐃΔ);
				var ⵠΔ = this.ⲆΔΔᐃΔⵠⲆ;
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - 312, 395, ⵠΔ.width / ᐃⲆᐃⵠ, ⵠΔ.height / ᐃΔⲆⵠ)
			}
			this.ⲆⵠⵠΔⲆ !== this.ᐃⲆⲆⵠⵠᐃᐃ && (this.ᐃⲆⲆⵠⵠᐃᐃ = this.ⲆⵠⵠΔⲆ, this.ⲆⲆᐃΔΔᐃⵠ = ⵠΔᐃᐃⲆ("" + this.ⲆⵠⵠΔⲆ, Δ[571], Δ[362], 60, 250));
			ᐃΔΔⲆ(ᐃ, this.ⲆⲆᐃΔΔᐃⵠ, this.Ⲇⵠⵠⵠ[ⵠⵠΔᐃ].translate.x + 350, ⵠᐃⵠΔΔ, this.ⲆⲆᐃΔΔᐃⵠ.w2, this.ⲆⲆᐃΔΔᐃⵠ.ᐃᐃⲆᐃⵠ);
			if (this.ΔΔΔⵠⲆ !== this.ΔΔᐃⲆⵠᐃⲆ) {
				this.ΔΔᐃⲆⵠᐃⲆ = this.ΔΔΔⵠⲆ;
				this.ᐃⲆⲆΔⲆᐃⲆ = ⵠΔᐃᐃⲆ("LVL " + (this.ΔΔΔⵠⲆ + 1), Δ[571], Δ[362], 50, 250, ΔᐃᐃⵠⲆ, 30, 24, ⲆΔⲆⵠⲆ, ΔⵠⲆᐃᐃ, undefined, undefined, "#3F3019", ⵠⲆⵠΔⵠᐃᐃ)
			}
			ᐃΔΔⲆ(ᐃ, this.ᐃⲆⲆΔⲆᐃⲆ, this.Ⲇⵠⵠⵠ[Ⲇᐃⵠⵠ].translate.x + 94, ⵠΔΔᐃ, this.ᐃⲆⲆΔⲆᐃⲆ.w2, this.ᐃⲆⲆΔⲆᐃⲆ.ᐃᐃⲆᐃⵠ);
			if (ᐃⵠΔΔ.ⲆΔΔⲆᐃⲆᐃ === 0) {
				var ⲆᐃⲆⲆ = this.buttons[ⲆⵠⲆΔⲆ].hint;
				if (ⵠᐃⵠⵠ < ⲆᐃⲆⲆ) {
					var ⵠΔ = ΔⲆ.ᐃᐃᐃΔΔΔΔ;
					ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / 4, -36 - ⵠΔ.height * ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(1 - ⲆᐃⲆⲆ) / ⲆⲆⵠᐃ, ⵠΔ.width / Δⵠᐃᐃ, ⵠΔ.height / 2)
				}
				var ⲆᐃⲆⲆ = this.buttons[ΔⵠΔⵠΔ].hint;
				if (ⲆᐃⲆⲆ > 0) {
					var ⵠΔ = ΔⲆ.ΔⵠᐃⲆⲆⵠΔ;
					ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / ΔⵠⲆⵠⲆ, -36 - ⵠΔ.height * ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(Δᐃᐃ - ⲆᐃⲆⲆ) / 2, ⵠΔ.width / 2, ⵠΔ.height / ⵠΔᐃⵠ)
				}
				var ⲆᐃⲆⲆ = this.buttons[ⲆΔΔⲆᐃ].hint;
				if (ⲆᐃⲆⲆ > ᐃΔΔ) {
					var ⵠΔ = ΔⲆ.ⵠΔⲆⵠⵠΔᐃ;
					ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / 4, -36 - ⵠΔ.height * ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ᐃⲆⲆ - ⲆᐃⲆⲆ) / ⵠⲆⵠΔ, ⵠΔ.width / Δᐃᐃⵠ, ⵠΔ.height / ᐃⵠΔⲆ)
				}
				var ⲆᐃⲆⲆ = this.buttons[ⲆᐃⲆᐃᐃ].hint;
				if (Ⲇᐃⵠⵠ < ⲆᐃⲆⲆ) {
					var ⵠΔ = ΔⲆ.ᐃⵠᐃᐃⲆΔⵠ;
					ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / ΔΔᐃᐃⲆ, -36 - ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(1 - ⲆᐃⲆⲆ) * ⵠΔ.height / Ⲇⵠᐃⵠ, ⵠΔ.width / Δᐃᐃⵠ, ⵠΔ.height / ⲆⲆᐃⲆ)
				}
				var ⲆᐃⲆⲆ = this.buttons[ⵠⲆⵠΔⲆ].hint;
				if (ⲆⲆⵠⲆ < ⲆᐃⲆⲆ) {
					var ⵠΔ = ΔⲆ.ΔⲆᐃⵠΔⵠⵠ;
					ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / ⲆⵠⲆⲆⲆ, -36 - ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(1 - ⲆᐃⲆⲆ) * ⵠΔ.height / ⵠⲆⵠΔ, ⵠΔ.width / 2, ⵠΔ.height / 2)
				}
				var ⲆᐃⲆⲆ = this.buttons[ΔᐃⵠⲆΔ].hint;
				if (0 < ⲆᐃⲆⲆ) {
					var ⵠΔ = ΔⲆ.ⵠΔΔⲆΔΔⲆ;
					ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / ⲆⵠⲆᐃ, -36 - ⵠΔ.height * ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(ᐃⵠⵠ - ⲆᐃⲆⲆ) / ⵠⲆⵠΔ, ⵠΔ.width / 2, ⵠΔ.height / 2)
				}
			}
			if (ⵠⵠᐃ === this.ΔⲆΔⵠᐃ && Math.abs(ⵠⵠΔⲆΔᐃᐃ - this.ΔⲆⵠᐃΔΔᐃ) < .006) {
				ᐃ.globalAlpha = Math.min(1, this.ᐃⲆᐃⲆⲆⲆΔ * 3);
				var ⵠΔ = ΔⲆ.Ⲇᐃⵠⵠᐃⵠⵠ;
				ᐃ.save();
				ᐃ.translate(ᐃᐃᐃΔ, 260);
				this.ᐃⲆᐃⲆⲆⲆΔ += ΔᐃⲆⲆ;
				ᐃ.rotate(this.ᐃⲆᐃⲆⲆⲆΔ);
				ᐃΔΔⲆ(ᐃ, ⵠΔ, -ⵠΔ.width / ᐃⲆᐃⵠ, -ⵠΔ.height / ᐃⵠΔⲆ, ⵠΔ.width, ⵠΔ.height);
				ᐃ.restore();
				var ⲆᐃΔ = 1.05 + .05 * Math.cos(this.ᐃⲆᐃⲆⲆⲆΔ * ⵠⵠⲆⵠ);
				if (ⲆᐃⲆ === this.ᐃⲆⲆⲆⵠΔⲆ) {
					ⵠΔ = ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[this.ⵠᐃΔᐃᐃᐃⵠ].ⵠⵠⲆ;
					var Δⵠᐃ = ⲆᐃΔ * ⵠΔ.width;
					var ⲆΔΔ = ⲆᐃΔ * ⵠΔ.height;
					ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - Δⵠᐃ / 2, 260 - ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ)
				} else if (ⲆⲆⲆᐃ === this.ᐃⲆⲆⲆⵠΔⲆ) {
					ⵠΔ = ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[0].ⵠⵠⲆ;
					var Δⵠᐃ = ⵠΔ.width * ⲆᐃΔ;
					var ⲆΔΔ = ⲆᐃΔ * ⵠΔ.height;
					ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - Δⵠᐃ / ᐃᐃᐃᐃ, 260 - ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
					ⵠΔ = ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ[this.ⵠᐃΔᐃᐃᐃⵠ].ⵠⵠⲆ;
					var Δⵠᐃ = ⵠΔ.width * ⲆᐃΔ;
					var ⲆΔΔ = ⵠΔ.height * ⲆᐃΔ;
					ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - Δⵠᐃ / 2, 260 - ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ)
				} else if (this.ᐃⲆⲆⲆⵠΔⲆ === 2) {
					ⵠΔ = ᐃᐃⵠⵠ.ⲆⲆⲆⲆ[this.ⵠᐃΔᐃᐃᐃⵠ].ⵠⵠⲆ;
					var Δⵠᐃ = ⲆᐃΔ * ⵠΔ.width;
					var ⲆΔΔ = ⵠΔ.height * ⲆᐃΔ;
					ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - Δⵠᐃ / 2, 180 - ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
					ⵠΔ = ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[0].ⵠⵠⲆ;
					var Δⵠᐃ = ⲆᐃΔ * ⵠΔ.width;
					var ⲆΔΔ = ⲆᐃΔ * ⵠΔ.height;
					ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - Δⵠᐃ / 2, 260 - ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ)
				} else if (this.ᐃⲆⲆⲆⵠΔⲆ === ⲆΔⲆΔ) {
					ⵠΔ = ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ[this.ⵠᐃΔᐃᐃᐃⵠ].ⵠⵠⲆ;
					var Δⵠᐃ = ⲆᐃΔ * ⵠΔ.width;
					var ⲆΔΔ = ⲆᐃΔ * ⵠΔ.height;
					ᐃ.save();
					ᐃ.translate(ᐃᐃᐃΔ, 260);
					ᐃ.rotate(Math.PI);
					ᐃΔΔⲆ(ᐃ, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
					ᐃ.restore()
				} else if (ᐃᐃⲆⵠ === this.ᐃⲆⲆⲆⵠΔⲆ) {
					ⵠΔ = ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ[this.ⵠᐃΔᐃᐃᐃⵠ].ⵠⵠⲆ;
					var Δⵠᐃ = ⲆᐃΔ * ⵠΔ.width;
					var ⲆΔΔ = ⲆᐃΔ * ⵠΔ.height;
					ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - Δⵠᐃ / 2, 260 - ⲆΔΔ / ΔⲆᐃⲆ, Δⵠᐃ, ⲆΔΔ)
				}
				var ⵠΔ = this.ⵠⲆⲆⵠⵠⲆⵠ;
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / 4, 340, ⵠΔ.width / ⵠᐃⵠⲆ, ⵠΔ.height / 2);
				var ⵠΔ = this.ⲆᐃΔΔΔⵠΔ;
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / ΔΔᐃᐃⲆ, 365, ⵠΔ.width / ᐃᐃᐃᐃ, ⵠΔ.height / ᐃΔⲆⵠ);
				if (this.ᐃⲆᐃⲆⲆⲆΔ > ⵠΔⲆⵠⲆ) {
					this.ΔⲆΔⵠᐃ = 0;
					ᐃⲆⲆⵠ(ΔᐃΔᐃⲆ)
				}
				ᐃ.globalAlpha = 1
			}
			ⵠⵠⵠ.alert.ⲆᐃᐃⲆ(Δ[560], Δ[287]);
			if (ⲆⲆᐃ.waiting) this.ⲆⵠᐃⲆΔⵠᐃ.ⲆᐃᐃⲆ()
		};
		var ⵠⲆ = 0;
		var ⲆΔⵠⲆᐃ = Math.pow(2, ⵠⲆ++);
		var ΔⲆⲆⵠⵠ = Math.pow(ΔΔᐃᐃ, ⵠⲆ++);
		this.ΔⲆⲆⵠⵠ = ΔⲆⲆⵠⵠ;
		var ΔΔΔⲆⵠ = Math.pow(Ⲇⵠᐃⵠ, ⵠⲆ++);
		var ⵠⵠⵠΔⵠ = Math.pow(ⵠΔᐃⵠ, ⵠⲆ++);
		var ΔᐃΔᐃⲆ = Math.pow(ᐃⵠΔⲆ, ⵠⲆ++);
		var ΔⲆΔΔΔⲆᐃ = Math.pow(ΔⲆⲆⵠ, ⵠⲆ++);
		var ᐃΔⵠᐃⲆ = Math.pow(ⵠΔᐃΔᐃ, ⵠⲆ++);
		var ⲆⲆΔΔⲆ = Math.pow(2, ⵠⲆ++);
		this.ⲆⲆΔΔⲆ = ⲆⲆΔΔⲆ;
		var ⲆⲆΔⲆⵠΔⲆ = Math.pow(2, ⵠⲆ++);
		var ᐃΔⲆΔⵠⲆᐃ = Math.pow(2, ⵠⲆ++);
		var ⵠⲆΔΔⵠᐃⲆ = Math.pow(ᐃΔⲆⵠ, ⵠⲆ++);
		var ⵠⵠᐃⲆΔⵠⵠ = Math.pow(2, ⵠⲆ++);
		var ᐃⵠΔΔᐃⵠⵠ = Math.pow(2, ⵠⲆ++);
		var ⲆⲆⵠⲆΔΔΔ = Math.pow(ΔⲆᐃⲆ, ⵠⲆ++);
		var ᐃΔΔΔⵠⲆᐃ = Math.pow(ⲆⲆΔΔ, ⵠⲆ++);
		var ᐃⲆⲆᐃⲆΔΔ = Math.pow(ᐃⵠΔⲆ, ⵠⲆ++);
		var ⲆⲆⵠⲆⵠ = Math.pow(2, ⵠⲆ++);
		var ⲆΔᐃⲆⲆ = Math.pow(2, ⵠⲆ++);
		var ᐃⲆΔⲆᐃ = Math.pow(2, ⵠⲆ++);
		var ΔΔⲆⵠⲆ = Math.pow(2, ⵠⲆ++);
		var ⵠⵠΔΔⵠ = Math.pow(2, ⵠⲆ++);
		var ΔⵠⲆΔΔ = Math.pow(ΔⲆᐃⲆ, ⵠⲆ++);
		var ⵠΔΔⵠⵠᐃΔ = Math.pow(ΔⲆⲆⵠ, ⵠⲆ++);
		var ⲆΔⲆⵠΔⵠΔ = Math.pow(2, ⵠⲆ++);
		var ⵠΔᐃΔⲆ = Math.pow(ⵠⲆⵠΔ, ⵠⲆ++);
		this.ⵠΔᐃΔⲆ = ⵠΔᐃΔⲆ;
		var ᐃᐃⲆᐃΔ = Math.pow(2, ⵠⲆ++);
		this.ᐃᐃⲆᐃΔ = ᐃᐃⲆᐃΔ;
		var ΔΔⵠΔⲆ = Math.pow(2, ⵠⲆ++);
		this.ΔΔⵠΔⲆ = ΔΔⵠΔⲆ;
		var ΔΔᐃⲆᐃⵠⲆ = Math.pow(2, ⵠⲆ++);
		this.ᐃΔΔⵠⲆ = ⲆΔⵠⲆᐃ;

		function ᐃⲆⲆᐃᐃ(ⲆΔᐃⲆ, ΔΔᐃⲆ, ⵠⵠΔᐃⵠⵠⵠⵠⲆ) {
			for (var Δᐃ = ⵠᐃΔ; ⲆⲆᐃ.Ⲇⵠⵠⵠ.length > Δᐃ; Δᐃ++) {
				if (ᐃⲆⵠΔ !== (ⲆⲆᐃ.Ⲇⵠⵠⵠ[Δᐃ].view & ⲆΔᐃⲆ)) ⲆⲆᐃ.Ⲇⵠⵠⵠ[Δᐃ].active = ΔΔᐃⲆ
			}
			for (var Δᐃ = ⲆⲆᐃΔ; Δᐃ < ⲆⲆᐃ.buttons.length; Δᐃ++) {
				if (ⵠᐃΔⲆ !== (ⲆⲆᐃ.buttons[Δᐃ].view & ⲆΔᐃⲆ)) ⲆⲆᐃ.buttons[Δᐃ].info.active = ΔΔᐃⲆ
			}
			for (var Δᐃ = 0; Δᐃ < ⲆⲆᐃ.ΔΔⵠⲆΔ.length; Δᐃ++) {
				if ((ⲆⲆᐃ.ΔΔⵠⲆΔ[Δᐃ].view & ⲆΔᐃⲆ) !== ⲆⲆᐃΔ) ⲆⲆᐃ.ΔΔⵠⲆΔ[Δᐃ].style.display = ⵠⵠΔᐃⵠⵠⵠⵠⲆ
			}
		}
		var ⵠⲆⲆΔⲆΔⵠ = [];
		this.ⵠⲆⲆΔⵠⲆᐃ = ⲆⲆᐃΔ;

		function ᐃⲆⲆⵠ(ⲆΔᐃⲆ) {
			if (ⲆⲆᐃ.ⵠΔⲆΔΔᐃΔ === ⲆⲆⲆΔᐃ) return;
			ᐃⲆⲆᐃᐃ(ⲆⲆΔⲆⵠΔⲆ, ⲆⵠⲆⲆ, Δ[369]);
			ᐃⲆⲆᐃᐃ(ᐃΔⲆΔⵠⲆᐃ, ⲆⵠⲆⲆ, Δ[369]);
			ⲆΔⵠΔⵠΔᐃ();
			if (ⲆⲆᐃ.ᐃΔΔⵠⲆ === ⲆΔᐃⲆ || ⲆⲆᐃ.ΔⲆΔⵠᐃ >= Δᐃᐃ) return;
			ⲆΔⵠⲆᐃ === ⲆΔᐃⲆ || ⲆΔᐃⲆ === ΔᐃΔᐃⲆ || ⲆΔᐃⲆ === ΔⲆⲆⵠⵠ || ᐃΔⵠᐃⲆ === ⲆΔᐃⲆ || ⵠⵠⵠΔⵠ === ⲆΔᐃⲆ || ΔⲆΔΔΔⲆᐃ === ⲆΔᐃⲆ ? ⲆⲆᐃ.ⵠⲆⲆⵠΔ.style.display = Δ[151] : ⲆⲆᐃ.ⵠⲆⲆⵠΔ.style.display = Δ[369];
			ᐃⲆⲆᐃᐃ(ⲆⲆᐃ.ᐃΔΔⵠⲆ, ⲆⵠⲆⲆ, Δ[369]);
			ⲆⲆᐃ.ᐃΔΔⵠⲆ = ⲆΔᐃⲆ;
			ᐃⲆⲆᐃᐃ(ⲆⲆᐃ.ᐃΔΔⵠⲆ, ⲆᐃⲆΔ, Δ[151])
		}

		function ⲆΔⵠΔⵠΔᐃ() {
			var ΔΔΔⲆⵠⲆⵠ = Number(ΔᐃⲆΔ.get("starve_crate"));
			var ΔⵠᐃΔⲆⲆᐃ = Number(ΔᐃⲆΔ.get("starve_dead"));
			var ΔᐃⲆⲆᐃⲆᐃ = Number(ΔᐃⲆΔ.get("starve_book"));
			var ᐃⵠⵠΔⲆⵠᐃ = Number(ΔᐃⲆΔ.get("starve_bag"));
			var ΔΔΔⲆΔᐃΔ = Number(ΔᐃⲆΔ.get("starve_skin"));
			var ⵠᐃᐃⲆⲆⲆᐃ = Number(ΔᐃⲆΔ.get("starve_accessory"));
			!(ⵠⵠΔⵠ.unlock.ⵠⲆΔΔ[ⵠⵠΔⵠ.ⵠⲆΔΔ] > ⵠⲆΔⵠ) && (ⵠⵠΔⵠ.ⵠⲆΔΔ = !(ⵠⵠΔⵠ.unlock.ⵠⲆΔΔ[ΔΔΔⲆΔᐃΔ] > ⵠᐃΔ) ? ΔΔⲆⲆ : ΔΔΔⲆΔᐃΔ);
			if (!(ⵠⵠΔⵠ.unlock.ⲆΔⵠΔΔ[ⵠⵠΔⵠ.ⲆΔⵠΔΔ] > ᐃⲆⵠΔ)) ⵠⵠΔⵠ.ⲆΔⵠΔΔ = !(ⵠⵠΔⵠ.unlock.ⲆΔⵠΔΔ[ΔᐃⲆⲆᐃⲆᐃ] > 0) ? ᐃⲆⵠΔ : ΔᐃⲆⲆᐃⲆᐃ;
			!(ⵠⵠΔⵠ.unlock.Δᐃⵠⵠᐃ[ⵠⵠΔⵠ.Δᐃⵠⵠᐃ] > ⵠⵠΔΔ) && (ⵠⵠΔⵠ.Δᐃⵠⵠᐃ = !(ⵠⵠΔⵠ.unlock.Δᐃⵠⵠᐃ[ΔⵠᐃΔⲆⲆᐃ] > 0) ? 0 : ΔⵠᐃΔⲆⲆᐃ);
			!(ⵠⵠΔⵠ.unlock.ⵠⵠΔⲆⲆ[ⵠⵠΔⵠ.ⵠⵠΔⲆⲆ] > ΔΔⲆⲆ) && (ⵠⵠΔⵠ.ⵠⵠΔⲆⲆ = !(ⵠⵠΔⵠ.unlock.ⵠⵠΔⲆⲆ[ΔΔΔⲆⵠⲆⵠ] > 0) ? 0 : ΔΔΔⲆⵠⲆⵠ);
			!(ⵠⵠΔⵠ.unlock.ᐃᐃⲆΔⵠ[ⵠⵠΔⵠ.ᐃᐃⲆΔⵠ] > ⵠΔΔᐃ) && (ⵠⵠΔⵠ.ᐃᐃⲆΔⵠ = !(ⵠⵠΔⵠ.unlock.ᐃᐃⲆΔⵠ[ⵠᐃᐃⲆⲆⲆᐃ] > ⵠΔⵠⲆ) ? 0 : ⵠᐃᐃⲆⲆⲆᐃ);
			!(ⵠⵠΔⵠ.unlock.ΔΔⲆᐃⵠ[ⵠⵠΔⵠ.ΔΔⲆᐃⵠ] > 0) && (ⵠⵠΔⵠ.ΔΔⲆᐃⵠ = !(ⵠⵠΔⵠ.unlock.ΔΔⲆᐃⵠ[ᐃⵠⵠΔⲆⵠᐃ] > 0) ? 0 : ᐃⵠⵠΔⲆⵠᐃ)
		}

		function ᐃΔⲆⲆⵠΔᐃⲆᐃ(ΔΔᐃΔᐃᐃⲆ, ΔᐃⵠⵠⲆᐃᐃ) {
			ΔΔᐃΔᐃᐃⲆ = ΔΔᐃΔᐃᐃⲆ.replace("Xday", "day");
			ΔΔᐃΔᐃᐃⲆ = ΔΔᐃΔᐃᐃⲆ.replace("Xnight", "night");
			for (var Δᐃ = ⵠᐃΔ; Δᐃ < ⵠⲆⲆΔⲆΔⵠ.length; Δᐃ++) {
				var ⵠⲆⵠⵠⵠⵠᐃ = ⵠⲆⲆΔⲆΔⵠ[Δᐃ];
				if (ΔΔᐃΔᐃᐃⲆ === ⵠⲆⵠⵠⵠⵠᐃ[ⲆⲆⵠⲆ]) {
					if (ⵠⲆⵠⵠⵠⵠᐃ[ⲆΔᐃΔ] !== ΔᐃⵠⵠⲆᐃᐃ) ⵠⵠΔⵠ.ⵠⲆⲆΔⵠⲆᐃ = ᐃⲆΔ;
					return
				}
			}
			ⵠⲆⲆΔⲆΔⵠ.push([ΔΔᐃΔᐃᐃⲆ, ΔᐃⵠⵠⲆᐃᐃ])
		}

		function ⲆⵠᐃⲆᐃΔⲆΔΔ(ᐃΔⵠⵠⲆᐃᐃ) {
			ᐃΔⵠⵠⲆᐃᐃ = ᐃΔⵠⵠⲆᐃᐃ.replace("http://starve.io", "https://starve.io");
			var ⵠΔⲆᐃ = new XMLHttpRequest;
			ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]("HEAD", ᐃΔⵠⵠⲆᐃᐃ, ᐃⲆⲆⲆΔ);
			ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
				if (ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[294]] === ⲆΔⵠᐃΔ) {
					if (ⵠΔⲆᐃ.status === 200) {
						var ⲆⲆᐃΔⲆ = Number(ⵠΔⲆᐃ.getResponseHeader("Content-Length"));
						ⲆⲆⵠⲆ < ⲆⲆᐃΔⲆ && ᐃΔⲆⲆⵠΔᐃⲆᐃ(ᐃΔⵠⵠⲆᐃᐃ, ⲆⲆᐃΔⲆ)
					}
				}
			};
			ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]](null)
		}
		this.ᐃⲆⲆⵠ = ᐃⲆⲆⵠ;

		function ᐃⲆⵠⵠⵠᐃⵠ(callback) {
			if (ⵠⵠⵠ.ΔΔⵠᐃⵠⵠᐃ === undefined) return;
			if (ⵠⵠⵠ.Δᐃᐃⵠⵠⵠᐃ === undefined) return;
			if (ⵠⵠⵠ.ⵠⵠⵠΔᐃΔⲆ === ⵠᐃΔⵠΔ) return;
			if (ⵠⵠⵠ.ⵠⲆΔⲆⲆⵠⵠ === ⲆⲆⲆⲆⲆ) return;
			callback()
		}

		function ⲆⵠΔⵠⵠΔΔ(ᐃⲆⲆᐃ, ⲆⲆΔⵠᐃⵠⲆ, ⲆᐃΔΔⵠⵠⲆ) {
			const ⵠΔⲆᐃ = new XMLHttpRequest;
			ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], ᐃⲆⲆᐃ);
			ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[6]](Δ[192], Δ[43]);
			ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
				if (this[ᐃⲆᐃᐃᐃᐃⵠ[294]] == ⲆΔⲆᐃΔ && this.status == 200) {
					if (ⵠⵠⵠⲆⵠ !== ⲆⲆΔⵠᐃⵠⲆ) ⲆⲆΔⵠᐃⵠⲆ(ⵠΔⲆᐃ.responseText)
				} else if (this[ᐃⲆᐃᐃᐃᐃⵠ[294]] == ⲆⵠⲆⲆⲆ) {
					if (ⲆᐃΔΔⵠⵠⲆ !== undefined) ⲆᐃΔΔⵠⵠⲆ()
				}
			};
			ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
		}

		function ⵠⵠⲆᐃΔⵠⲆᐃⵠ() {
			ⲆΔⵠΔⵠΔᐃ();
			if (!(ⲆⵠᐃⵠⲆⲆⵠ % ⲆⲆᐃⲆ)) {
				console.log(undefined);
				if (ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[211]]["isBlocked"] === 1) {
					ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[211]]["createAdPlayer"](ᐃⵠΔΔ.connect.bind(ᐃⵠΔΔ), ᐃⵠΔΔ.connect.bind(ᐃⵠΔΔ))
				} else {
					ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[211]]["preroll"]();
					ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[211]][Δ[257]] = ᐃⵠΔΔ.connect.bind(ᐃⵠΔΔ)
				}
			} else {
				console.log(ᐃⲆᐃΔⵠ);
				ᐃⵠΔΔ.connect()
			}
		}
		this.ⲆⵠΔᐃΔΔⵠ = function(callback, ⵠⲆⵠⵠᐃΔⵠ) {
			let ΔⵠᐃⵠⲆⵠⲆ = "0";
			let stop = ⲆⲆⵠⲆ;
			if (ᐃΔⵠⲆᐃ) ΔⵠᐃⵠⲆⵠⲆ = ᐃΔⵠⲆᐃ + ⵠΔΔΔΔⵠⲆ.ΔᐃΔΔⲆᐃⵠ();
			if (ⵠⵠⵠ.ΔΔⵠᐃⵠⵠᐃ) ᐃⲆⵠⵠⵠᐃⵠ(callback);
			else ⲆⵠΔⵠⵠΔΔ(`${ΔⲆⲆᐃᐃ}token?id=${ΔⵠᐃⵠⲆⵠⲆ}`, (function(ⲆΔΔⲆΔ) {
				if (1 === stop) return;
				const ΔⵠⵠⲆⵠ = ⲆΔΔⲆΔ.split("_");
				const ΔⲆⲆᐃⵠ = ΔⵠⵠⲆⵠ[0] + "_";
				const ⲆᐃΔᐃ = Number(ΔⵠⵠⲆⵠ[ᐃⲆⲆ]);
				const ᐃᐃᐃᐃᐃ = Math.abs(ᐃⲆΔΔᐃᐃᐃ(ⲆᐃΔᐃ));
				ⵠⵠⵠ.ΔΔⵠᐃⵠⵠᐃ = ΔⲆⲆᐃⵠ + ᐃᐃᐃᐃᐃ;
				ᐃⲆⵠⵠⵠᐃⵠ(callback)
			}), (function() {
				if (ᐃⲆⲆ === stop) return;
				if (ⵠⲆⵠⵠᐃΔⵠ === 1) {
					stop = 1;
					callback();
					return
				}
				ⲆⲆᐃ.waiting = ΔⲆΔΔᐃ
			}));
			ⲆⵠΔⵠⵠΔΔ(`${ᐃⵠΔΔᐃ}let`, (function(ⲆΔΔⲆΔ) {
				if (stop === 1) return;
				const ⲆⵠⲆᐃΔᐃΔΔᐃ = -119;
				var ⲆⵠⲆⵠⵠᐃⲆⲆᐃ = 207;
				const ᐃΔΔΔΔⵠⵠᐃᐃ = 223;
				let ᐃΔⲆΔΔⵠᐃⲆΔ = 32;
				if (ᐃΔⲆΔΔⵠᐃⲆΔ < ᐃΔΔΔΔⵠⵠᐃᐃ) ⲆⵠⲆⵠⵠᐃⲆⲆᐃ = 213;
				let ⲆⵠⲆⲆⵠⵠⵠⵠⵠ = 76 - 107;
				let ⵠΔᐃⵠᐃⵠⲆⲆⵠ = 212;
				var ⲆΔⵠⲆᐃⲆⲆⵠⲆ = 168;
				let ΔⵠᐃⵠΔⲆⲆⵠΔ = 32;
				const ⲆΔⲆⲆᐃⵠⵠⵠⲆ = 105;
				ΔⵠᐃⵠΔⲆⲆⵠΔ <= ⲆΔⲆⲆᐃⵠⵠⵠⲆ && (ⲆΔⵠⲆᐃⲆⲆⵠⲆ = 106);
				var ΔⵠⲆⵠᐃⲆᐃΔⲆ = ⵠΔᐃⵠᐃⵠⲆⲆⵠ;
				ⲆΔΔⲆΔ = ⲆΔΔⲆΔ.split(":");
				var ⵠΔⲆΔⲆⲆⲆ = 234;
				let ᐃⲆᐃΔᐃᐃΔⵠᐃ = (72 + 90) * 4;
				var ΔᐃⲆⲆΔⵠⲆⵠᐃ, ⵠⵠⵠΔΔΔⵠᐃⵠ;
				if (ⵠΔⲆΔⲆⲆⲆ > 11) ⵠΔⲆΔⲆⲆⲆ = 40;
				var ⲆΔⲆᐃᐃⵠᐃᐃⵠ = 135;
				ⲆΔⲆᐃᐃⵠᐃᐃⵠ.ⲆΔⲆⲆⵠⲆⵠᐃⲆ = 12;
				var ᐃⲆΔΔΔⵠⲆ = 250;
				if (ΔΔⲆⵠⵠ === ᐃⲆΔΔΔⵠⲆ) ᐃⲆΔΔΔⵠⲆ = 43;
				{
					var ⵠⲆⲆⲆⵠⵠᐃⵠⵠ, ⵠⵠⲆᐃΔΔᐃΔⵠ, ⲆΔΔⵠΔᐃᐃΔⵠ, ᐃⵠⲆⲆⲆᐃᐃⵠᐃ;
					var ᐃⲆᐃⲆᐃⵠᐃⲆΔ = 246;
					let ⵠᐃⲆⲆᐃᐃΔΔⵠ = 46;
					const ⵠⲆΔᐃΔⲆⲆⵠⵠ = 234 * 237;
					var ᐃⵠΔⵠⲆΔⵠⲆⵠ = 12;
					ᐃⵠΔⵠⲆΔⵠⲆⵠ == ⵠᐃⲆⲆᐃᐃΔΔⵠ && (ᐃⲆᐃⲆᐃⵠᐃⲆΔ = ⲆⲆΔᐃΔ);
					var ⵠΔΔⵠⲆΔⵠⲆᐃ;
					var ΔΔⵠⲆΔⵠⵠⲆᐃ = 78;
					var ⲆΔΔΔⲆⲆᐃⲆΔ, ⲆⵠⵠⵠⲆΔⲆⵠⵠ, ᐃΔΔΔΔⵠΔⲆᐃ;
					var ΔᐃᐃⵠΔⲆⵠⲆⵠ = 187 * 167;
					const ΔⵠⵠⲆⵠ = ⲆΔΔⲆΔ[0].split("_");
					var ΔᐃⲆⲆⲆᐃᐃᐃᐃ = 248 * 162;
					let ΔⵠᐃΔΔᐃΔⲆᐃ = 93 - 74;
					var ⲆΔᐃⵠⲆⲆΔⵠᐃ = 140;
					var ΔΔΔΔⵠⵠⲆ = 54;
					if (1 < ΔΔΔΔⵠⵠⲆ) ΔΔΔΔⵠⵠⲆ = 53;
					let ᐃΔᐃΔⵠᐃᐃⵠᐃ = 63;
					const ΔᐃᐃᐃΔⵠΔⵠⵠ = 16;
					ΔᐃᐃᐃΔⵠΔⵠⵠ > ᐃΔᐃΔⵠᐃᐃⵠᐃ && (ⲆΔᐃⵠⲆⲆΔⵠᐃ = 108);
					var ᐃᐃⵠᐃΔⵠⲆ = 132;
					ΔᐃⵠⵠΔⲆΔ === ᐃᐃⵠᐃΔⵠⲆ && (ᐃᐃⵠᐃΔⵠⲆ = 86);
					var ⵠⲆⲆᐃⲆΔⲆ = 110;
					ⵠⲆⲆᐃⲆΔⲆ > ⵠᐃⵠⵠ && (ⵠⲆⲆᐃⲆΔⲆ = 97);
					const ΔⲆⲆᐃⵠ = ΔⵠⵠⲆⵠ[0] + "_";
					var ⵠⵠᐃΔΔΔᐃⵠΔ = 232;
					var ⵠⵠᐃⲆΔΔⲆ = 249;
					if (ⵠⵠᐃⲆΔΔⲆ === 1) ⵠⵠᐃⲆΔΔⲆ = 27;
					let ⲆⵠⲆᐃⵠⲆⲆᐃᐃ = 20 * 145;
					let ᐃΔΔᐃⲆᐃᐃΔⵠ = 153;
					var ⲆⲆⲆⲆΔΔⲆᐃΔ, ᐃⲆᐃⲆΔⲆⵠⵠⲆ;
					let ΔⲆⵠᐃⲆⲆΔᐃⲆ = 81;
					var ᐃⲆⵠⵠⲆⵠᐃⲆΔ, ⵠᐃΔⲆⲆΔᐃⵠᐃ;
					ᐃΔΔᐃⲆᐃᐃΔⵠ >= ΔⲆⵠᐃⲆⲆΔᐃⲆ && (ⵠⵠᐃΔΔΔᐃⵠΔ = 225);
					var ⵠᐃⲆΔΔᐃⵠⲆⲆ = 250;
					const ᐃⵠⲆΔᐃⲆΔⵠⵠ = 57;
					const ⵠⲆⵠⲆᐃⵠⵠⵠᐃ = 131;
					if (ᐃⵠⲆΔᐃⲆΔⵠⵠ > ⵠⲆⵠⲆᐃⵠⵠⵠᐃ) ⵠᐃⲆΔΔᐃⵠⲆⲆ = 101;
					var ΔⵠⲆᐃΔΔⲆΔᐃ = 206;
					var ⵠⵠᐃΔᐃᐃᐃ = 52;
					8 < ⵠⵠᐃΔᐃᐃᐃ && (ⵠⵠᐃΔᐃᐃᐃ = 160);
					const ⵠⵠΔⲆⲆⵠᐃⵠᐃ = 240 * 234;
					var ᐃⲆᐃⵠΔⲆΔΔΔ, ⲆⲆⲆⵠⵠⲆⵠⲆᐃ;
					let ΔᐃⵠᐃΔⵠΔⲆⲆ = 157 * 251;
					let ΔⵠⲆⵠΔᐃΔⲆΔ = 219;
					var ᐃⵠΔΔᐃⵠᐃⲆᐃ = 166;
					var ⵠΔⲆⲆᐃⵠⲆᐃΔ = 156;
					var ΔⲆⲆᐃⲆᐃᐃᐃⲆ = 233;
					var ⵠΔⵠⲆⲆⲆⲆᐃⵠ = 72;
					ΔⲆⲆᐃⲆᐃᐃᐃⲆ >= ⵠΔⵠⲆⲆⲆⲆᐃⵠ && (ⵠΔⲆⲆᐃⵠⲆᐃΔ = 226);
					var ᐃΔΔⵠⲆΔⲆ = 135;
					ᐃΔΔⵠⲆΔⲆ > 13 && (ᐃΔΔⵠⲆΔⲆ = 254);
					var ⵠΔⵠⲆΔΔⵠᐃΔ, ΔΔⵠⲆⲆⵠⵠΔⵠ, ΔᐃΔⵠΔⲆⲆⵠⲆ, ᐃⵠⵠΔⲆᐃⵠⵠᐃ;
					var ⲆⲆᐃᐃΔΔᐃᐃΔ = 117;
					const ΔⲆΔⵠⲆⵠᐃⲆⲆ = 218 + 138;
					var ΔᐃⵠⲆΔΔΔⵠⵠ = 49;
					var ⵠΔΔⵠⵠⵠᐃⵠΔ = 221 + 83;
					var ⵠⵠᐃΔᐃΔᐃᐃΔ, ⵠⵠⲆⲆⲆⵠᐃΔᐃ, ᐃᐃΔⲆⲆᐃᐃΔΔ, ΔⵠⵠᐃⲆⵠⲆΔⵠ;
					var ΔⲆⲆⵠⵠᐃΔⲆΔ, ᐃⵠᐃⵠⵠᐃⲆⲆⵠ, ΔⵠⲆᐃⵠⲆⵠᐃⲆ;
					const ᐃⵠⲆᐃⲆᐃᐃᐃⲆ = {};
					ᐃⵠⲆᐃⲆᐃᐃᐃⲆ.ⲆⲆⵠΔⲆⲆᐃΔⲆ = ᐃᐃⵠⲆⲆⲆⲆ;
					const ΔᐃΔΔⵠⲆΔΔⲆ = 158;
					ΔᐃΔΔⵠⲆΔΔⲆ === ΔᐃⵠⲆΔΔΔⵠⵠ && (ⲆⲆᐃᐃΔΔᐃᐃΔ = 177);
					ΔⵠⲆⵠΔᐃΔⲆΔ >= ᐃⵠΔΔᐃⵠᐃⲆᐃ && (ΔⵠⲆᐃΔΔⲆΔᐃ = 157);
					const ⲆⵠⲆⵠᐃⵠⵠ = 131;
					const ΔⲆⲆΔΔΔΔΔⲆ = Math.floor(ⲆⵠⲆⵠᐃⵠⵠ[ⲆⵠⲆⵠᐃⵠⵠ.ⲆⵠⲆⵠᐃⵠⵠ]);
					var ⵠΔⵠᐃⵠΔⲆ = 82;
					ⵠΔⵠᐃⵠΔⲆ >= 14 && (ⵠΔⵠᐃⵠΔⲆ = 206);
					const ⲆᐃΔᐃ = Number(ΔⵠⵠⲆⵠ[ⵠⵠⵠΔ]);
					const ⲆᐃᐃⵠⲆⲆⲆ = 242;
					const ᐃᐃⵠᐃᐃΔⵠΔΔ = Math.floor(ⲆᐃᐃⵠⲆⲆⲆ[ⲆᐃᐃⵠⲆⲆⲆ.ⲆᐃᐃⵠⲆⲆⲆ]);
					var ⵠᐃΔᐃⵠᐃⲆΔΔ = 235 * 26;
					const ⵠⵠΔⵠΔⵠᐃⵠⵠ = 139;
					ⵠⵠΔⵠΔⵠᐃⵠⵠ.ⲆⵠⵠⲆΔⲆΔⵠΔ = 6;
					const ᐃᐃᐃᐃᐃ = Math.abs(ΔⲆΔⲆⲆᐃΔΔⵠ(ⲆᐃΔᐃ));
					ⵠⵠⵠ.Δᐃᐃⵠⵠⵠᐃ = ΔⲆⲆᐃⵠ + ᐃᐃᐃᐃᐃ;
					ⵠⵠⵠ.ⵠⵠᐃⲆΔᐃᐃ = ᐃᐃᐃᐃᐃ
				}
				const ⵠΔΔⲆᐃⲆⵠᐃᐃ = 119 + 176;
				var ᐃᐃΔᐃⵠΔΔ = 153;
				Δᐃᐃⵠ < ᐃᐃΔᐃⵠΔΔ && (ᐃᐃΔᐃⵠΔΔ = 142);
				var ΔⵠΔΔⵠΔΔⲆⵠ = 122;
				const ⲆᐃᐃⲆⲆΔⲆⲆᐃ = 182;
				const ⲆⵠⵠⲆᐃⵠΔⵠᐃ = 201;
				if (ⲆⵠⵠⲆᐃⵠΔⵠᐃ >= ⲆᐃᐃⲆⲆΔⲆⲆᐃ) ΔⵠΔΔⵠΔΔⲆⵠ = 67;
				const ΔⵠΔᐃⲆⲆⲆᐃⲆ = 104;
				var ΔⵠⲆⵠⵠⵠⲆⲆΔ = 1;
				let ΔⲆΔΔᐃⵠⵠΔᐃ = 177;
				const ⵠΔⲆⲆⵠⲆⲆ = 42;
				const ⲆΔᐃⲆⲆΔⵠΔᐃ = Math.floor(ⵠΔⲆⲆⵠⲆⲆ[ⵠΔⲆⲆⵠⲆⲆ.ⵠΔⲆⲆⵠⲆⲆ]);
				let ⲆⲆΔᐃⲆᐃⵠⲆᐃ = 169;
				var ᐃᐃᐃΔⵠⵠᐃⲆΔ, ΔⲆⲆⲆⵠΔᐃᐃⵠ;
				var ⵠⲆⵠΔΔⲆⵠ = 5;
				if (ΔⲆΔᐃ < ⵠⲆⵠΔΔⲆⵠ) ⵠⲆⵠΔΔⲆⵠ = 169;
				ⲆⲆΔᐃⲆᐃⵠⲆᐃ == ΔⲆΔΔᐃⵠⵠΔᐃ && (ΔⵠⲆⵠⵠⵠⲆⲆΔ = 245);
				ΔⵠΔᐃⲆⲆⲆᐃⲆ.ᐃᐃⵠᐃⵠⲆᐃᐃΔ = 13;
				var ⲆΔΔΔⲆⵠⲆ = 182;
				ⲆΔΔΔⲆⵠⲆ > ΔⲆⲆΔΔ && (ⲆΔΔΔⲆⵠⲆ = 49);
				let ⲆⵠᐃⲆⵠᐃᐃⲆΔ = 188 - ᐃΔⵠⵠⵠ;
				var ᐃⲆᐃⲆᐃᐃΔⵠᐃ, ᐃᐃⵠⲆⲆⵠⲆᐃΔ, ⲆᐃᐃΔⲆΔᐃⲆᐃ, ⵠΔᐃΔᐃᐃⲆⵠⲆ;
				var ⲆⲆᐃⵠΔⵠᐃᐃΔ = 113;
				let ΔⲆΔⵠⲆⵠᐃⲆᐃ = {};
				ΔⲆΔⵠⲆⵠᐃⲆᐃ.ΔᐃᐃΔⲆⵠᐃᐃΔ = 0;
				var ΔⵠᐃΔⵠⲆⵠⲆⵠ = 164;
				let ΔᐃΔΔⲆⲆⲆΔⲆ = 90;
				const ΔⵠⲆⲆᐃⲆᐃΔΔ = 70;
				ΔᐃΔΔⲆⲆⲆΔⲆ === ΔⵠⲆⲆᐃⲆᐃΔΔ && (ΔⵠᐃΔⵠⲆⵠⲆⵠ = 191);
				let ᐃⵠᐃⵠᐃΔΔⲆⵠ = ⲆⲆᐃⵠΔⵠᐃᐃΔ;
				var ᐃⲆΔⵠΔⵠΔΔᐃ, ⲆᐃΔΔⲆᐃᐃⵠⲆ, ⵠⲆΔᐃΔᐃᐃⲆΔ;
				const ⵠΔᐃⵠᐃᐃⵠΔⲆ = 200 * 176;
				var ᐃⲆᐃⲆⲆΔⲆ = 140;
				var ⵠⲆΔⲆⵠⵠΔⵠᐃ, ⵠⵠⲆᐃΔⵠᐃⲆΔ, ᐃⲆᐃΔⵠᐃΔⵠⲆ;
				4 === ᐃⲆᐃⲆⲆΔⲆ && (ᐃⲆᐃⲆⲆΔⲆ = 205);
				{
					var ᐃⲆΔᐃᐃΔΔΔⵠ = {};
					ᐃⲆΔᐃᐃΔΔΔⵠ.ⲆΔᐃΔΔᐃΔᐃⵠ = 4;
					var ⲆᐃⵠⲆΔⲆⵠΔᐃ, ⲆΔᐃⵠΔΔⲆⵠᐃ, ⲆⲆⵠⵠΔΔᐃⲆΔ;
					var ΔΔΔⵠᐃⲆΔΔΔ = 168;
					var ᐃⵠᐃⲆᐃᐃΔⵠΔ;
					var ⵠΔⲆΔᐃⲆΔ = 39;
					if (3 == ⵠΔⲆΔᐃⲆΔ) ⵠΔⲆΔᐃⲆΔ = 147;
					let ⲆⲆⵠᐃⲆᐃᐃᐃⵠ = -87;
					let ⵠⵠᐃⲆⵠⲆΔΔᐃ = 230;
					const ⲆΔΔᐃⲆⵠⵠᐃⲆ = 178;
					var ⲆⵠⲆⲆⲆⵠⲆ = 54;
					var ᐃΔᐃⲆⲆΔΔ = 4;
					if (ᐃΔᐃⲆⲆΔΔ >= 5) ᐃΔᐃⲆⲆΔΔ = 228;
					var ΔΔⲆΔΔⲆⲆ = 156;
					var ⲆᐃⵠⲆⲆΔᐃᐃⵠ, ΔᐃⲆΔΔΔⲆᐃᐃ, ᐃⲆᐃⲆⲆᐃⵠⲆᐃ, ⲆⲆᐃᐃΔⲆΔᐃᐃ;
					12 === ΔΔⲆΔΔⲆⲆ && (ΔΔⲆΔΔⲆⲆ = 12);
					ⲆⵠⲆⲆⲆⵠⲆ > 4 && (ⲆⵠⲆⲆⲆⵠⲆ = 110);
					var ⵠΔΔΔⵠⲆⲆⵠⵠ;
					var ⵠⵠⲆᐃⵠᐃΔ = 105;
					if (ᐃᐃΔⵠΔᐃΔ === ⵠⵠⲆᐃⵠᐃΔ) ⵠⵠⲆᐃⵠᐃΔ = 97;
					var ⵠᐃᐃⵠⵠⲆⵠⵠΔ, ⲆⵠᐃⵠⲆⵠⵠᐃⵠ;
					var ⲆⵠⲆΔᐃᐃᐃΔΔ = 13;
					let ⵠᐃⵠⵠᐃⵠᐃΔΔ = 64;
					var ΔᐃⵠᐃᐃⲆⲆᐃⲆ, ᐃⲆⵠΔⲆⲆⵠᐃᐃ;
					const ⲆⲆΔⵠⵠᐃⲆⲆᐃ = (29 + 125) * 16;
					var ⵠΔᐃⵠⵠⲆᐃⲆᐃ, ΔᐃΔΔⲆᐃΔⵠΔ, ⲆΔᐃΔⲆⵠⲆⵠΔ;
					var ⵠΔⲆᐃⵠⵠΔⵠⵠ = 186 + 42 << ⲆⲆᐃⲆⵠ;
					let ⵠⲆΔⵠᐃΔᐃⲆⵠ = 64;
					ⵠⲆΔⵠᐃΔᐃⲆⵠ === ⵠᐃⵠⵠᐃⵠᐃΔΔ && (ⲆⵠⲆΔᐃᐃᐃΔΔ = 23);
					let ᐃΔⵠⲆⵠΔΔᐃΔ = 53;
					var ⲆᐃⲆΔΔΔᐃ = 169;
					var ᐃᐃⲆᐃⲆⵠⲆⵠᐃ = 39;
					var ΔᐃΔⲆᐃΔΔⲆⲆ = 214;
					let ΔΔᐃⲆΔⲆᐃⲆᐃ = 175;
					const ΔⲆᐃⲆⲆⵠᐃⲆᐃ = 43;
					ΔΔᐃⲆΔⲆᐃⲆᐃ >= ΔⲆᐃⲆⲆⵠᐃⲆᐃ && (ΔᐃΔⲆᐃΔΔⲆⲆ = 191);
					var ⵠⵠⵠⲆⲆΔᐃ = Ⲇⵠᐃⵠᐃ;
					ΔΔᐃᐃ <= ⵠⵠⵠⲆⲆΔᐃ && (ⵠⵠⵠⲆⲆΔᐃ = 210);
					var ⵠΔⵠⲆΔⵠⵠ = 195;
					var ⲆΔᐃⲆᐃⲆⵠᐃⵠ = 188;
					let ⲆⵠⲆⵠⲆⲆⵠⵠᐃ = 60;
					var ⲆⲆΔⲆⲆᐃᐃⵠⵠ = 37;
					ⲆⲆΔⲆⲆᐃᐃⵠⵠ <= ⲆⵠⲆⵠⲆⲆⵠⵠᐃ && (ⲆΔᐃⲆᐃⲆⵠᐃⵠ = 152);
					ΔᐃΔⲆ === ⵠΔⵠⲆΔⵠⵠ && (ⵠΔⵠⲆΔⵠⵠ = 211);
					ⲆᐃⲆΔΔΔᐃ === ᐃᐃΔⵠⵠⲆⲆ && (ⲆᐃⲆΔΔΔᐃ = 28);
					if (ⵠⵠᐃⲆⵠⲆΔΔᐃ == ⲆΔΔᐃⲆⵠⵠᐃⲆ) ΔΔΔⵠᐃⲆΔΔΔ = 172;
					const ⲆⲆᐃⲆᐃᐃΔΔΔ = 206 + 95 << 13;
					const ΔⵠⵠⲆⵠ = ⲆΔΔⲆΔ[ⲆΔᐃ].split("_");
					var ⲆⵠΔΔⲆⲆΔᐃᐃ, ΔⲆⵠⲆΔⵠᐃⲆⵠ;
					const ⲆᐃⲆⵠⵠⵠΔ = 239;
					var ⲆΔⵠⵠᐃⲆΔⲆⲆ, ⲆᐃᐃΔⲆⵠᐃⵠⲆ;
					const ΔⵠᐃᐃΔΔᐃΔⲆ = Math.floor(ⲆᐃⲆⵠⵠⵠΔ[ⲆᐃⲆⵠⵠⵠΔ.ⲆᐃⲆⵠⵠⵠΔ]);
					var ᐃⵠⵠⵠΔⲆⵠⲆⵠ = 203 + 119;
					const ΔⲆⲆᐃⵠ = ΔⵠⵠⲆⵠ[0] + "_";
					const ⲆᐃΔᐃ = Number(ΔⵠⵠⲆⵠ[1]);
					var ⵠΔᐃⲆⵠⵠⲆ = 40;
					var ⲆⲆΔⲆⲆⵠΔ = 97;
					if (ⲆΔΔΔ == ⲆⲆΔⲆⲆⵠΔ) ⲆⲆΔⲆⲆⵠΔ = 115;
					ⵠΔᐃⲆⵠⵠⲆ >= ⵠⵠΔΔⲆ && (ⵠΔᐃⲆⵠⵠⲆ = 43);
					const ᐃᐃᐃᐃᐃ = Math.abs(ⵠΔⵠᐃⲆⲆᐃ(ⲆᐃΔᐃ));
					ⵠⵠⵠ.ⵠⵠⵠΔᐃΔⲆ = ΔⲆⲆᐃⵠ + ᐃᐃᐃᐃᐃ;
					var ⵠⲆⵠⲆᐃᐃΔⵠⵠ, ΔᐃΔΔⲆΔᐃᐃᐃ;
					let ΔⲆᐃᐃⲆⵠᐃᐃᐃ = 130;
					const ⲆΔⵠⲆᐃⵠⵠΔΔ = ΔⲆᐃᐃⲆⵠᐃᐃᐃ;
					var ΔΔᐃΔΔⵠΔ = 169;
					9 < ΔΔᐃΔΔⵠΔ && (ΔΔᐃΔΔⵠΔ = 228);
					var ⲆΔᐃⲆΔΔⲆᐃᐃ;
					var ⲆⵠᐃⲆⵠΔⲆᐃΔ = 108;
					let ⲆⲆⵠΔΔⲆⵠΔΔ = 189;
					var ⵠⵠⲆⲆᐃⵠᐃⵠⵠ;
					const ΔΔⲆⵠᐃᐃᐃ = 169;
					let ΔΔᐃᐃⲆⲆⲆⵠᐃ = 60 * 148;
					const ⲆⲆᐃΔⵠⲆⲆⲆΔ = Math.floor(ΔΔⲆⵠᐃᐃᐃ[ΔΔⲆⵠᐃᐃᐃ.ΔΔⲆⵠᐃᐃᐃ]);
					ⲆⲆⵠΔΔⲆⵠΔΔ.ᐃΔΔⵠⵠⲆⵠⲆⲆ = ᐃᐃΔⵠⵠⲆⲆ;
					let ⲆⵠⲆⲆΔⲆⲆⲆⵠ = 128;
					ⲆⵠⲆⲆΔⲆⲆⲆⵠ.ⵠⲆΔⵠΔⵠⲆⲆⲆ = ΔⲆⵠΔΔ;
					var ΔΔΔⲆᐃⵠⵠ = 217;
					var ᐃᐃⵠᐃΔⵠⵠ = 252;
					7 < ᐃᐃⵠᐃΔⵠⵠ && (ᐃᐃⵠᐃΔⵠⵠ = 141);
					ΔΔΔⲆᐃⵠⵠ === ᐃΔⵠⲆⵠ && (ΔΔΔⲆᐃⵠⵠ = 232);
					ⵠⵠⵠ.ⲆⲆⵠⲆΔᐃⵠᐃΔ = ᐃᐃᐃᐃᐃ;
					var ⵠᐃᐃⲆΔⲆΔⵠᐃ, ⲆᐃⲆᐃⵠⵠᐃᐃⵠ;
					var ΔΔⵠⵠᐃΔΔᐃⲆ = 225;
					var ⲆⲆⲆⲆⲆᐃⵠⵠΔ = ΔΔⵠⵠᐃΔΔᐃⲆ
				}
				var ⲆᐃᐃⲆⲆⵠΔⵠᐃ = 47 - 157;
				const ⲆΔⵠᐃᐃⲆΔⵠⲆ = 49 + 102 << ΔⲆⲆⲆⲆ;
				var ΔᐃΔᐃⵠⲆᐃⲆⲆ = ⲆⲆΔΔ - ΔⲆⲆⲆⵠ;
				var ⲆᐃⵠⵠΔⲆⵠΔⵠ = 165;
				var ⲆΔⵠⲆⵠΔⲆᐃⲆ = 119;
				var ΔⵠΔΔⵠⲆⲆⵠⵠ, ᐃᐃⵠⲆᐃᐃᐃⲆⲆ;
				const ᐃΔΔⲆⲆⵠⲆⵠⵠ = 189;
				const ᐃᐃΔⵠⵠⵠΔᐃⵠ = 153 - 31;
				if (ⲆΔⵠⲆⵠΔⲆᐃⲆ > ᐃΔΔⲆⲆⵠⲆⵠⵠ) ⲆᐃⵠⵠΔⲆⵠΔⵠ = 171;
				var ΔᐃΔⲆⵠⵠⵠᐃⵠ, ⵠᐃΔᐃⵠⲆᐃΔΔ;
				{
					const ᐃΔΔⲆⲆⲆᐃⲆⲆ = {};
					const ⲆⵠΔᐃᐃᐃΔ = 31;
					var ⲆᐃᐃΔᐃⵠⵠ = 95;
					if (ⲆΔⲆΔ == ⲆᐃᐃΔᐃⵠⵠ) ⲆᐃᐃΔᐃⵠⵠ = 232;
					var ΔⵠᐃΔⵠᐃΔΔⲆ = 66;
					var ⲆⲆΔⵠⲆⵠⵠⲆΔ = 66;
					let ⲆⲆⲆⵠΔⵠⲆΔⵠ = 102;
					ⲆⲆⲆⵠΔⵠⲆΔⵠ === ⲆⲆΔⵠⲆⵠⵠⲆΔ && (ΔⵠᐃΔⵠᐃΔΔⲆ = 189);
					const ⲆΔⵠⵠⵠⲆᐃ = 127;
					const ⵠΔᐃΔⲆᐃᐃⲆΔ = Math.floor(ⲆΔⵠⵠⵠⲆᐃ[ⲆΔⵠⵠⵠⲆᐃ.ⲆΔⵠⵠⵠⲆᐃ]);
					var ⵠΔⲆᐃΔⲆⲆⵠⲆ, ⲆⲆⵠᐃⲆⲆᐃᐃⵠ, ΔΔⵠⲆᐃⲆⵠⵠⲆ;
					var ⵠⵠᐃⵠΔⵠⲆⵠⲆ, ΔⲆⵠᐃⵠᐃⲆΔⵠ;
					const ⲆⲆᐃᐃΔΔΔᐃⵠ = Math.floor(ⲆⵠΔᐃᐃᐃΔ[ⲆⵠΔᐃᐃᐃΔ.ⲆⵠΔᐃᐃᐃΔ]);
					var ⲆⲆⲆⵠⲆᐃⵠⵠⲆ, ⵠΔⵠᐃΔᐃᐃⵠⵠ, ᐃΔΔⲆᐃⵠΔΔΔ;
					var ΔᐃΔΔⵠⵠⵠΔᐃ = 250;
					const ΔⲆⲆΔᐃⵠᐃᐃΔ = 47;
					var ⲆⵠᐃΔᐃᐃⵠⲆΔ = 192;
					ΔⲆⲆΔᐃⵠᐃᐃΔ === ⲆⵠᐃΔᐃᐃⵠⲆΔ && (ΔᐃΔΔⵠⵠⵠΔᐃ = 198);
					const ⵠᐃⲆⵠⲆⲆΔ = ⲆⲆⵠⲆ;
					const ⲆⲆΔΔΔᐃⵠⵠᐃ = Math.floor(ⵠᐃⲆⵠⲆⲆΔ[ⵠᐃⲆⵠⲆⲆΔ.ⵠᐃⲆⵠⲆⲆΔ]);
					var ΔⲆΔⵠΔᐃΔ = 210;
					ΔΔⲆΔΔ < ΔⲆΔⵠΔᐃΔ && (ΔⲆΔⵠΔᐃΔ = 18);
					const ⵠⵠⲆΔᐃᐃΔ = 111;
					let ᐃΔⵠᐃⵠᐃᐃΔᐃ = 170 - 72;
					const ᐃⵠⲆⲆΔⵠⲆⲆᐃ = Math.floor(ⵠⵠⲆΔᐃᐃΔ[ⵠⵠⲆΔᐃᐃΔ.ⵠⵠⲆΔᐃᐃΔ]);
					const ΔᐃⵠᐃⵠᐃΔ = 73;
					let ⵠⲆΔᐃⲆⵠⵠᐃⵠ = 221 + 107;
					var ⲆᐃⵠᐃⲆᐃⲆ = 206;
					ᐃᐃΔΔⵠⵠⵠ <= ⲆᐃⵠᐃⲆᐃⲆ && (ⲆᐃⵠᐃⲆᐃⲆ = 249);
					var ΔΔᐃⲆΔΔⵠⲆⵠ = 210;
					let ⲆⵠᐃΔᐃⵠΔⲆⵠ = 242;
					var ⲆΔᐃΔⵠΔⲆⲆΔ = 81;
					ⲆⵠᐃΔᐃⵠΔⲆⵠ == ⲆΔᐃΔⵠΔⲆⲆΔ && (ΔΔᐃⲆΔΔⵠⲆⵠ = 247);
					var ⲆⲆⵠⵠⲆᐃᐃΔⲆ, ΔⲆᐃⵠⵠΔΔⵠΔ, ⲆᐃⵠⲆⵠⵠⵠᐃΔ, ⵠⵠΔⵠⵠᐃᐃᐃⵠ;
					const ⲆⲆᐃΔⵠⲆⵠⲆⲆ = 13320;
					const ᐃΔⲆᐃΔᐃⲆⲆⲆ = Math.floor(ΔᐃⵠᐃⵠᐃΔ[ΔᐃⵠᐃⵠᐃΔ.ΔᐃⵠᐃⵠᐃΔ]);
					ᐃΔΔⲆⲆⲆᐃⲆⲆ.ⲆⵠᐃⵠᐃⲆⵠⵠΔ = 8;
					const ΔⵠⵠⲆⵠ = ⲆΔΔⲆΔ[2].split("_");
					var ⵠⲆΔΔⵠⵠⵠ = 96;
					const ΔⵠᐃᐃⲆⵠⲆⲆⵠ = 127;
					if (ⵠⲆΔΔⵠⵠⵠ == ⵠΔᐃΔᐃ) ⵠⲆΔΔⵠⵠⵠ = 205;
					const ᐃⵠⵠⲆᐃᐃⲆᐃᐃ = 177 + 134;
					var ⵠⲆΔⲆⲆⲆⵠᐃⲆ = 113;
					let ⲆⵠΔΔⲆΔⲆᐃᐃ = ⵠⲆΔⲆⲆⲆⵠᐃⲆ;
					const ΔᐃᐃⲆⲆᐃⲆᐃⲆ = 133 + 181;
					const ᐃⵠⵠΔᐃⵠΔⲆΔ = 126 - 95;
					let ΔΔᐃᐃⵠᐃᐃⵠᐃ = 13230;
					const ΔⲆⲆᐃⵠ = ΔⵠⵠⲆⵠ[ⲆⲆⵠⲆ] + "_";
					var ⲆΔΔΔⵠⵠⲆᐃΔ = 31;
					var ⲆⵠⲆᐃⲆᐃΔΔⵠ;
					const ΔⵠⵠⵠⵠᐃΔⲆΔ = 179;
					var ΔⵠᐃᐃⵠⵠⵠΔᐃ = 16;
					ΔⵠⵠⵠⵠᐃΔⲆΔ > ΔⵠᐃᐃⵠⵠⵠΔᐃ && (ⲆΔΔΔⵠⵠⲆᐃΔ = 147);
					const ΔⵠᐃⵠⵠᐃΔΔⲆ = ΔΔᐃⲆΔ + 251 << ⵠⲆΔΔⵠ;
					const ᐃⵠᐃΔΔΔΔⲆⲆ = 126;
					var ΔᐃⵠᐃᐃⲆΔᐃΔ;
					var ΔⲆᐃΔΔⵠⵠⲆⲆ;
					const ⲆᐃΔᐃ = Number(ΔⵠⵠⲆⵠ[1]);
					const ᐃᐃᐃᐃᐃ = Math.abs(ⵠΔⵠᐃⲆⲆᐃ(ⲆᐃΔᐃ));
					var ΔᐃᐃⲆⲆⲆΔ = 11;
					2 == ΔᐃᐃⲆⲆⲆΔ && (ΔᐃᐃⲆⲆⲆΔ = 218);
					ⵠⵠⵠ.ⵠⲆΔⲆⲆⵠⵠ = ΔⲆⲆᐃⵠ + ᐃᐃᐃᐃᐃ;
					ⵠⵠⵠ.ΔᐃⲆΔᐃⵠᐃΔⵠ = ᐃᐃᐃᐃᐃ
				}
				var ⲆⲆΔᐃⲆᐃᐃᐃⲆ;
				let ⵠⵠⵠᐃⲆⲆΔΔᐃ = {};
				ⵠⵠⵠᐃⲆⲆΔΔᐃ.ⵠΔⲆΔⲆⵠΔⵠΔ = ΔᐃΔⵠⲆ;
				ᐃⲆⵠⵠⵠᐃⵠ(callback);
				var ⲆⵠⵠᐃⲆⵠᐃΔⵠ = 114;
				const ⲆⵠⵠⲆⲆⲆᐃΔⵠ = 47;
				var ΔᐃⲆⵠᐃᐃⲆ = 23;
				ΔᐃⲆⵠᐃᐃⲆ === 0 && (ΔᐃⲆⵠᐃᐃⲆ = 175);
				let ⲆᐃᐃᐃΔⵠΔⲆᐃ = 27 + 208;
				var ⵠᐃᐃⲆⲆⲆⲆ = ⲆⵠᐃΔᐃ;
				if (ⵠᐃᐃⲆⲆⲆⲆ === ΔᐃΔⲆ) ⵠᐃᐃⲆⲆⲆⲆ = 119;
				ⲆⵠⵠⲆⲆⲆᐃΔⵠ.ΔᐃᐃΔᐃⵠΔᐃΔ = 14;
				let ⵠⵠⵠΔⵠΔΔΔⵠ = {};
				ⵠⵠⵠΔⵠΔΔΔⵠ.ⵠᐃᐃⵠΔΔⲆⵠΔ = 3
			}), (function() {
				if (stop === 1) return;
				if (1 === ⵠⲆⵠⵠᐃΔⵠ) {
					stop = 1;
					callback();
					return
				}
				ⲆⲆᐃ.waiting = false
			}))
		};
		this.ⵠⵠᐃΔᐃⵠⵠ = function() {
			false === ⲆⲆᐃ.waiting && (ⵠⵠⵠ.reconnect.enabled = false, ⲆⲆᐃ.waiting = true, ⲆⲆᐃ.ⲆⵠΔᐃΔΔⵠ(ⵠⵠⲆᐃΔⵠⲆᐃⵠ))
		};
		var ᐃᐃⲆᐃ = ⵠⲆⲆⲆ;
		var ᐃⲆᐃᐃⵠ = Ⲇⵠᐃⵠ;
		var ⵠᐃⲆⵠ = 4;
		var ⵠⲆΔᐃᐃⲆⲆ = ⲆᐃⲆⵠⲆ;
		var ⲆⵠᐃⲆ = ΔΔⵠᐃⲆ;
		var ᐃΔΔⵠᐃⵠⵠ = 32;
		var ⵠΔⲆⵠⲆⲆΔⵠⵠ = 0;
		var ⵠⲆⲆⵠ = ⲆⲆⲆᐃ;
		var ⲆᐃⵠΔ = 0;
		var ΔᐃⵠⵠᐃⲆⵠ = 1;
		var ⲆⵠⲆⲆ = ᐃΔΔ;
		var ⲆᐃⲆΔ = ΔⵠⲆ;
		if (1300 > ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth) {
			this.ⲆⵠΔⵠΔ = {
				id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[128]),
				style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[128]).style,
				input: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[39]),
				active: ⲆᐃⲆΔ,
				position: ⵠᐃⲆⵠ | ᐃᐃⲆᐃ,
				view: ⲆΔⵠⲆᐃ,
				translate: {
					"Δⵠⵠⵠᐃ": 184,
					"ⲆΔᐃᐃⲆ": 200,
					x: 0,
					y: ⲆⲆᐃΔ
				}
			}
		} else {
			this.ⲆⵠΔⵠΔ = {
				id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[128]),
				style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[128]).style,
				input: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[39]),
				active: ⲆᐃⲆΔ,
				position: ⵠᐃⲆⵠ | ⲆⵠᐃⲆ,
				view: ⲆΔⵠⲆᐃ,
				translate: {
					x: ⵠΔⵠⲆ,
					"Δⵠⵠⵠᐃ": 184,
					"ⲆΔᐃᐃⲆ": -180,
					y: 0
				}
			}
		}
		this.ⲆⵠΔⵠΔ.id[ᐃⲆᐃᐃᐃᐃⵠ[117]]("keyup", (function(event) {
			event.preventDefault();
			if (event.keyCode == ⵠΔⵠᐃⵠ && !ⲆⲆᐃ.waiting && !ⲆⲆᐃ.ⵠⵠΔⲆⲆⲆΔⵠⲆ) ⲆⲆᐃ.ⵠⵠᐃΔᐃⵠⵠ()
		}));
		this.ⲆⵠΔⵠΔ.input.value = ΔᐃⲆΔ.get("starve_nickname") ? ΔᐃⲆΔ.get("starve_nickname") : "";
		this.ⲆⵠⵠⲆⵠⵠΔΔΔ = {
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("account_nickname_block"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("account_nickname_block").style,
			input: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[79]),
			active: ⲆⵠⲆⲆ,
			position: ⵠᐃⲆⵠ | ⲆⵠᐃⲆ,
			view: ΔⲆⲆⵠⵠ,
			translate: {
				y: 0,
				x: 0,
				"ⲆΔᐃᐃⲆ": -122,
				"Δⵠⵠⵠᐃ": 110
			}
		};
		if (1300 > ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth) this.ᐃⲆΔⲆⵠ = {
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[196]),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[196]).style,
			active: ⲆᐃⲆΔ,
			position: ⵠᐃⲆⵠ | ᐃᐃⲆᐃ,
			view: ⲆΔⵠⲆᐃ,
			translate: {
				"Δⵠⵠⵠᐃ": 225,
				y: 0,
				x: 0,
				"ⲆΔᐃᐃⲆ": 208
			}
		};
		else this.ᐃⲆΔⲆⵠ = {
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[196]),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[196]).style,
			active: ⲆᐃⲆΔ,
			position: ⵠᐃⲆⵠ | ⲆⵠᐃⲆ,
			view: ⲆΔⵠⲆᐃ,
			translate: {
				"ⲆΔᐃᐃⲆ": -180,
				"Δⵠⵠⵠᐃ": 225,
				y: 0,
				x: 0
			}
		};
		this.ⲆⲆⲆⵠ = {
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("leaderboard"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("leaderboard").style,
			active: ⲆⵠⲆⲆ,
			position: ⵠᐃⲆⵠ | ⲆⵠᐃⲆ,
			view: ᐃΔⵠᐃⲆ,
			translate: {
				x: 0,
				"ⲆΔᐃᐃⲆ": -294.5,
				y: ᐃⲆⵠΔ,
				"Δⵠⵠⵠᐃ": 190
			}
		};
		this.ⵠⵠΔⵠᐃΔⲆΔⵠ = {
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("stats_box"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("stats_box").style,
			active: ⲆⵠⲆⲆ,
			position: ⵠᐃⲆⵠ | ⲆⵠᐃⲆ,
			view: ΔⲆⲆⵠⵠ,
			translate: {
				"ⲆΔᐃᐃⲆ": 125,
				x: ⵠⲆΔⵠ,
				"Δⵠⵠⵠᐃ": 187,
				y: 0
			}
		};
		this.ᐃᐃᐃⵠⵠΔΔΔⵠ = {
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("serverAddressBlock"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("serverAddressBlock").style,
			input: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[45]),
			active: ⲆⵠⲆⲆ,
			position: ⵠᐃⲆⵠ | ⲆⵠᐃⲆ,
			view: ΔΔⵠΔⲆ,
			translate: {
				y: ⲆᐃⲆ,
				x: 0,
				"Δⵠⵠⵠᐃ": 350,
				"ⲆΔᐃᐃⲆ": -260
			}
		};
		ⵠⲆ = 0;
		this.ΔΔⵠⲆΔ = [];
		this.ΔΔⵠⲆΔ[ⵠⲆ++] = this.ⲆⵠΔⵠΔ;
		this.ΔΔⵠⲆΔ[ⵠⲆ++] = this.ᐃⲆΔⲆⵠ;
		this.ΔΔⵠⲆΔ[ⵠⲆ++] = this.ⲆⲆⲆⵠ;
		this.ΔΔⵠⲆΔ[ⵠⲆ++] = this.ⲆⵠⵠⲆⵠⵠΔΔΔ;
		this.ΔΔⵠⲆΔ[ⵠⲆ++] = this.ⵠⵠΔⵠᐃΔⲆΔⵠ;
		this.ΔΔⵠⲆΔ[ⵠⲆ++] = this.ᐃᐃᐃⵠⵠΔΔΔⵠ;
		ⵠⲆ = 0;
		this.Ⲇⵠⵠⵠ = [];
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ⲆⵠΔᐃⲆᐃⵠ, ⲆᐃⲆΔ, ⵠᐃΔ, ⵠⲆⵠ, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ⵠᐃΔⵠᐃΔⲆ, ⲆⵠⲆⲆ, ⵠᐃΔ, ΔΔⲆⲆ, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ⵠⵠⲆΔᐃⲆᐃ, ⲆⵠⲆⲆ, ΔΔⲆⲆ, 0, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ⵠⵠΔᐃᐃⵠⵠ, ⲆⵠⲆⲆ, 0, 0, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ΔᐃⲆⲆᐃΔⲆ, ⲆⵠⲆⲆ, 0, 0, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ⵠⲆⲆᐃΔᐃΔ, ⲆⵠⲆⲆ, ᐃΔΔ, ⵠⵠΔᐃ, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ⲆΔΔⲆⲆΔᐃ, ⲆⵠⲆⲆ, 0, 0, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ⲆᐃᐃΔΔⵠΔ, ⲆⵠⲆⲆ, ⲆᐃⲆ, 0, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ᐃΔᐃⲆⲆΔᐃ, ⲆⵠⲆⲆ, ⵠⵠΔᐃ, ΔΔⲆⲆ, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ⵠᐃⲆᐃⵠΔΔ, ⲆⵠⲆⲆ, ⵠⵠΔΔ, 0, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ΔΔⵠⲆΔⲆⲆ, ⲆⵠⲆⲆ, ᐃⲆⵠΔ, ⲆᐃⲆ, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ᐃᐃⵠΔΔΔⲆ, ⲆⵠⲆⲆ, 0, 0, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ᐃΔⵠⵠⲆⲆⵠ, ⲆⵠⲆⲆ, 0, ⲆᐃⲆ, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ⵠΔΔΔⵠⵠΔ, ⲆⵠⲆⲆ, 0, ⵠᐃΔ, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ⵠⲆⵠᐃᐃⵠΔ, ⲆⵠⲆⲆ, ᐃⲆⵠΔ, 0, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ᐃΔᐃΔΔΔⲆ, ⲆⵠⲆⲆ, 0, ⲆΔⵠΔ, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ⵠⲆⵠⲆᐃⵠΔ, ⲆⵠⲆⲆ, 0, 0, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ΔᐃᐃⵠⲆᐃⵠ, ⲆⵠⲆⲆ, 0, ⵠⲆΔⵠ, ᐃᐃⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ᐃΔᐃⲆⲆᐃⵠ, ⲆⵠⲆⲆ, 0, Ⲇᐃⵠⵠ, ᐃᐃⲆᐃ);
		ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth < 1300 ? this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⵠᐃⵠᐃⲆⵠᐃ, ⲆᐃⲆΔ, 200, ᐃⵠᐃΔᐃ, ⵠᐃⲆⵠ | ᐃᐃⲆᐃ) : this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⵠᐃⵠᐃⲆⵠᐃ, ⲆᐃⲆΔ, -753 / ΔΔᐃᐃⲆ, Δᐃⵠⵠⵠ, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⲆΔⵠⲆᐃ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ++] = ΔᐃⲆᐃ(ΔⲆ.ⲆⲆⲆΔⵠᐃΔ, ⲆᐃⲆΔ, 403, -ᐃⲆⵠΔΔ, ᐃⲆᐃᐃⵠ);
		1300 < ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth && (this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ΔⵠⲆⵠᐃᐃᐃ, ⲆᐃⲆΔ, -885 / ⵠⲆⲆΔΔ, -319 / ⲆᐃᐃΔ, ⵠⲆΔᐃᐃⲆⲆ | ⲆⵠᐃⲆ), this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⲆΔⵠⲆᐃ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⲆⵠΔⲆⵠᐃᐃ, ⲆⵠⲆⲆ, -1293 / 4, 100, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⵠⵠΔᐃᐃᐃⲆ, ⲆⵠⲆⲆ, -1425 / ⲆΔⲆᐃΔ, ᐃⵠᐃΔᐃ, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⵠⵠⵠΔⵠ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ΔⲆⵠⲆΔⲆΔ, ⲆⵠⲆⲆ, -905 / ⵠΔΔⵠ, 50, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ΔΔΔⲆⵠ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ᐃΔΔΔⲆⵠᐃ, ⲆⵠⲆⲆ, -1608 / 4, 130, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ΔᐃΔᐃⲆ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⲆⲆΔⲆΔⲆΔ, ⲆⵠⲆⲆ, -1117 / ΔᐃΔΔ, 130, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⵠΔᐃΔⲆ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⲆⲆⲆᐃⲆⵠᐃ, ⲆⵠⲆⲆ, -1222 / 4, 130, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ᐃᐃⲆᐃΔ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⲆⲆΔΔⲆⵠⲆ, ⲆⵠⲆⲆ, -1222 / 4, Δᐃⵠⵠⵠ, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ΔΔⵠΔⲆ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⵠⲆᐃΔⵠᐃⵠ, ⲆⵠⲆⲆ, -ΔⲆ.ⵠⲆᐃΔⵠᐃⵠ.width / ΔᐃΔⵠ - 350, -ⲆⲆᐃⵠΔ, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ΔΔᐃⲆᐃⵠⲆ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⲆΔⵠⲆᐃⵠᐃ, ⲆⵠⲆⲆ, -1497 / ⵠΔΔⵠ, 110, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ΔⲆΔΔΔⲆᐃ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⲆΔᐃᐃⲆᐃΔ, ⲆⵠⲆⲆ, -1226 / ⲆⲆᐃΔᐃ, ⲆᐃᐃΔᐃ, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⵠⲆⲆⵠⲆΔⵠ, ⲆⵠⲆⲆ, -1381 / ⵠⲆⲆΔΔ, 80, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⲆⲆΔΔⲆ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ΔΔΔⲆⵠⲆΔ, ⲆⵠⲆⲆ, -1542 / 4, 150, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⵠⲆΔΔⵠᐃⲆ;
		var ΔΔᐃᐃᐃ = 360 / ⵠᐃⵠⲆⲆ;
		var ⲆⲆᐃⵠᐃ = this.ⵠᐃᐃᐃΔΔⵠ([
			[Δ[36], ΔΔᐃᐃᐃ * ⵠⵠᐃΔ],
			[Δ[389], ΔΔᐃᐃᐃ * ⲆΔⵠᐃⲆ],
			[Δ[269], 30 * ΔΔᐃᐃᐃ],
			["#d88e23", ΔΔᐃᐃᐃ * 57]
		]);
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ⲆⲆᐃⵠᐃ, ⲆⵠⲆⲆ, -ⲆⲆᐃⵠᐃ.width / ΔⵠⲆᐃ, 178, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⵠⲆΔΔⵠᐃⲆ;
		this.ΔΔⲆΔⲆΔⵠⲆⵠ = function(ᐃⵠⲆⲆⵠⵠᐃⵠᐃ, ᐃⵠⵠⵠ, ΔΔΔⲆⲆⵠΔ) {
			ⲆⲆᐃ.ΔⲆΔⵠᐃ = 1;
			ⲆⲆᐃ.ⲆᐃⲆⵠΔᐃᐃ = ⲆⲆⵠⲆ;
			ⲆⲆᐃ.ᐃⲆᐃⲆⲆⲆΔ = 0;
			ⲆⲆᐃ.ΔⲆⵠᐃΔΔᐃ = ᐃⵠⲆⲆⵠⵠᐃⵠᐃ;
			ⲆⲆᐃ.ᐃⲆⲆⲆⵠΔⲆ = ᐃⵠⵠⵠ;
			var Ⲇⵠⵠ;
			var Δᐃ = ⵠⲆⵠ;
			if (0 === ᐃⵠⵠⵠ) {
				for (Δᐃ = 0; Δᐃ < ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ.length; Δᐃ++) {
					if (ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[Δᐃ].id === ΔΔΔⲆⲆⵠΔ) break
				}
				Ⲇⵠⵠ = ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[Δᐃ];
				ⲆⲆᐃ.unlock.ⵠⲆΔΔ[Δᐃ] = 1
			} else if (1 === ᐃⵠⵠⵠ) {
				for (Δᐃ = ΔΔⲆⲆ; Δᐃ < ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ.length; Δᐃ++) {
					if (ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ[Δᐃ].id === ΔΔΔⲆⲆⵠΔ) break
				}
				Ⲇⵠⵠ = ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ[Δᐃ];
				ⲆⲆᐃ.unlock.ᐃᐃⲆΔⵠ[Δᐃ] = ᐃⲆΔ
			} else if (ᐃⵠⵠⵠ === Δⵠᐃᐃ) {
				for (Δᐃ = 0; ᐃᐃⵠⵠ.ⲆⲆⲆⲆ.length > Δᐃ; Δᐃ++) {
					if (ΔΔΔⲆⲆⵠΔ === ᐃᐃⵠⵠ.ⲆⲆⲆⲆ[Δᐃ].id) break
				}
				Ⲇⵠⵠ = ᐃᐃⵠⵠ.ⲆⲆⲆⲆ[Δᐃ];
				ⲆⲆᐃ.unlock.ΔΔⲆᐃⵠ[Δᐃ] = 1
			} else if (ᐃⵠⵠⵠ === 3) {
				for (Δᐃ = ⲆⲆⵠⲆ; Δᐃ < ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ.length; Δᐃ++) {
					if (ΔΔΔⲆⲆⵠΔ === ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ[Δᐃ].id) break
				}
				Ⲇⵠⵠ = ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ[Δᐃ];
				ⲆⲆᐃ.unlock.ⲆΔⵠΔΔ[Δᐃ] = 1
			} else if (ᐃⵠⵠⵠ === ⲆⲆᐃΔᐃ) {
				for (Δᐃ = ΔᐃΔ; Δᐃ < ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ.length; Δᐃ++) {
					if (ΔΔΔⲆⲆⵠΔ === ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ[Δᐃ].id) break
				}
				Ⲇⵠⵠ = ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ[Δᐃ];
				ⲆⲆᐃ.unlock.ⵠⵠΔⲆⲆ[Δᐃ] = 1;
				ⲆⲆᐃ.unlock.Δᐃⵠⵠᐃ[Δᐃ] = 1
			}
			ⲆⲆᐃ.ⵠᐃΔᐃᐃᐃⵠ = Δᐃ;
			ⲆⲆᐃ.ⲆᐃΔΔΔⵠΔ = ⵠΔᐃᐃⲆ("by " + Ⲇⵠⵠ.ΔΔⲆ, Δ[571], Δ[362], 40, 500, ⵠⲆᐃᐃⲆ, 30, 24, undefined, undefined, ⲆⲆΔᐃⵠ, undefined, Δ[391], 24);
			ⲆⲆᐃ.ⵠⲆⲆⵠⵠⲆⵠ = ⵠΔᐃᐃⲆ(Ⲇⵠⵠ.name, Δ[571], Δ[362], 60, 600, undefined, 30, 24, undefined, ΔⵠΔⲆⲆ, ᐃⵠⲆⵠⲆ, ⵠᐃΔⵠΔ, Δ[391], ΔⲆᐃⲆⲆ)
		};
		this.ΔⲆΔⵠᐃ = ⲆΔⵠΔ;
		this.ⲆᐃⲆⵠΔᐃᐃ = Ⲇᐃⵠⵠ;
		this.ΔⲆⵠᐃΔΔᐃ = ᐃΔΔ;
		this.ᐃⲆⲆⲆⵠΔⲆ = 0;
		this.ᐃⲆᐃⲆⲆⲆΔ = ⵠⲆⵠ;
		this.ⲆᐃΔΔΔⵠΔ = undefined;
		this.ⵠⲆⲆⵠⵠⲆⵠ = ⲆᐃⵠⲆⲆ;
		var ⲆⲆΔⲆⵠᐃΔⲆⲆ = 150 + 448 / 4 - 260 / ΔᐃΔΔ;
		var ᐃⲆⵠΔⵠᐃⲆⵠᐃ = -260 / 4;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⵠⲆΔΔⵠⵠⲆ, ⲆⵠⲆⲆ, -1542 / 4, 150, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ᐃΔΔΔⵠⲆᐃ;
		var ⲆⲆᐃⵠᐃ = this.ⵠᐃᐃᐃΔΔⵠ([
			[Δ[244], ⵠᐃⲆᐃ * ΔΔᐃᐃᐃ],
			[Δ[36], ΔΔᐃᐃᐃ * ⲆΔⲆᐃⵠ],
			[Δ[389], 30 * ΔΔᐃᐃᐃ],
			[Δ[269], ΔΔᐃᐃᐃ * 57]
		]);
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ⲆⲆᐃⵠᐃ, ⲆⵠⲆⲆ, -ⲆⲆᐃⵠᐃ.width / ᐃᐃⲆⵠ, 178, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ᐃΔΔΔⵠⲆᐃ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ᐃᐃⵠᐃⵠⵠⲆ, ⲆⵠⲆⲆ, -1542 / ΔⵠⲆᐃ, 150, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ᐃⵠΔΔᐃⵠⵠ;
		var ⲆⲆᐃⵠᐃ = this.ⵠᐃᐃᐃΔΔⵠ([
			["#d33a2a", 3 * ΔΔᐃᐃᐃ],
			[Δ[244], 10 * ΔΔᐃᐃᐃ],
			[Δ[36], ΔΔᐃᐃᐃ * 30],
			[Δ[389], ΔΔᐃᐃᐃ * 57]
		]);
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ⲆⲆᐃⵠᐃ, ⲆⵠⲆⲆ, -ⲆⲆᐃⵠᐃ.width / ΔΔᐃᐃⲆ, 178, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ᐃⵠΔΔᐃⵠⵠ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⵠⲆⵠⲆᐃΔⵠ, ⲆⵠⲆⲆ, -1542 / ⲆⵠⲆᐃ, 150, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⲆⲆⵠⲆΔΔΔ;
		var ⲆⲆᐃⵠᐃ = this.ⵠᐃᐃᐃΔΔⵠ([
			[Δ[36], 3 * ΔΔᐃᐃᐃ],
			[Δ[389], ΔΔᐃᐃᐃ * 10],
			[Δ[269], ΔΔᐃᐃᐃ * 30],
			["#d88e23", ΔΔᐃᐃᐃ * 57]
		]);
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ⲆⲆᐃⵠᐃ, ⲆⵠⲆⲆ, -ⲆⲆᐃⵠᐃ.width / 4, 178, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⲆⲆⵠⲆΔΔΔ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⲆΔΔΔⲆⲆⵠ, ⲆⵠⲆⲆ, -1542 / ⵠᐃΔΔΔ, 150, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⵠⵠᐃⲆΔⵠⵠ;
		var ⲆⲆᐃⵠᐃ = this.ⵠᐃᐃᐃΔΔⵠ([
			[Δ[244], ΔΔᐃᐃᐃ * 3],
			[Δ[36], 10 * ΔΔᐃᐃᐃ],
			[Δ[389], ΔΔᐃᐃᐃ * 30],
			[Δ[269], ΔΔᐃᐃᐃ * 57]
		]);
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ⲆⲆᐃⵠᐃ, ⲆⵠⲆⲆ, -ⲆⲆᐃⵠᐃ.width / 4, 178, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⵠⵠᐃⲆΔⵠⵠ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⲆᐃΔⵠᐃᐃᐃ, ⲆⵠⲆⲆ, -1542 / ΔᐃΔⲆΔ, 150, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ᐃⲆⲆᐃⲆΔΔ;
		var ⲆⲆᐃⵠᐃ = this.ⵠᐃᐃᐃΔΔⵠ([
			["#d33a2a", ΔΔᐃᐃᐃ * 3],
			[Δ[244], ⵠⲆΔΔⵠ * ΔΔᐃᐃᐃ],
			[Δ[36], 30 * ΔΔᐃᐃᐃ],
			[Δ[389], ΔΔᐃᐃᐃ * 57]
		]);
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ⲆⲆᐃⵠᐃ, ⲆⵠⲆⲆ, -ⲆⲆᐃⵠᐃ.width / 4, 178, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ᐃⲆⲆᐃⲆΔΔ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⲆᐃⲆⵠΔⲆΔ, ⲆⵠⲆⲆ, -1366 / 4, ᐃⵠᐃⲆⵠ, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⲆⲆⵠⲆⵠ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⲆⵠΔⵠΔᐃᐃ, ⲆⵠⲆⲆ, -1366 / 4, ⵠᐃΔⲆᐃ, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⵠⵠΔΔⵠ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ᐃⲆⲆⵠⵠΔⲆ, ⲆⵠⲆⲆ, -1366 / ⵠΔΔⵠ, ᐃᐃⲆⵠΔ, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ᐃⲆΔⲆᐃ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⲆΔΔΔΔⵠⵠ, ⲆⵠⲆⲆ, -1366 / ᐃᐃᐃΔⵠ, ᐃⵠᐃΔᐃ, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ΔΔⲆⵠⲆ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⲆⲆᐃⵠⲆⲆⲆ, ⲆⵠⲆⲆ, -1366 / ⵠΔΔⵠ, ⵠᐃⵠⲆⵠ, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⲆΔᐃⲆⲆ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ΔⵠⲆᐃⲆΔⵠ, ⲆⵠⲆⲆ, -1366 / 4, 100, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ΔⵠⲆΔΔ;
		ᐃⲆΔᐃⲆⵠᐃ = ⵠⲆ++;
		this.Ⲇⵠⵠⵠ[ᐃⲆΔᐃⲆⵠᐃ] = ΔᐃⲆᐃ(ΔⲆ.ᐃⲆΔᐃⲆⵠᐃ, ⲆⵠⲆⲆ, 484, ΔΔⲆⲆ, ⵠᐃⲆⵠ);
		ᐃᐃⵠᐃᐃⲆᐃ = ⵠⲆ++;
		this.Ⲇⵠⵠⵠ[ᐃᐃⵠᐃᐃⲆᐃ] = ΔᐃⲆᐃ(ΔⲆ.ᐃᐃⵠᐃᐃⲆᐃ, ⲆⵠⲆⲆ, 908 / ⲆⲆⵠᐃ + 597 / Δⵠᐃᐃ + 60, ⵠⲆᐃ, ⵠᐃⲆⵠ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ΔⵠᐃⲆⵠⵠⵠ, ⲆⵠⲆⲆ, -758 / 4, -ᐃΔⵠΔᐃ, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ᐃΔⲆΔⵠⲆᐃ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ΔΔΔⵠⲆᐃⵠ, ⲆⵠⲆⲆ, -758 / 4, -5, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⲆⲆΔⲆⵠΔⲆ;
		ⵠⲆΔᐃⵠⵠᐃ = ⵠⲆ++;
		this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ] = ΔᐃⲆᐃ(ΔⲆ.ᐃᐃᐃΔⲆⲆⲆ, ⲆᐃⲆΔ, 93, 30, ⵠᐃⲆⵠ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ⲆᐃΔⵠΔΔᐃ, ⲆⵠⲆⲆ, -692 / ⲆΔⵠᐃΔ, 110, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⵠΔΔⵠⵠᐃΔ;
		this.Ⲇⵠⵠⵠ[ⵠⲆ] = ΔᐃⲆᐃ(ΔⲆ.ᐃⵠⲆⵠᐃⲆⵠ, ⲆⵠⲆⲆ, -692 / ΔⵠⲆⵠⲆ, 110, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ);
		this.Ⲇⵠⵠⵠ[ⵠⲆ++].view = ⲆΔⲆⵠΔⵠΔ;
		ⵠⲆ = 0;
		this.buttons = [];
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(50, 57, "", [ΔⲆ.ⲆΔᐃΔΔᐃⲆ, ΔⲆ.ⲆⵠΔⵠΔΔᐃ, ΔⲆ.ΔⵠⲆΔᐃⵠⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			if (ⲆⲆᐃ.ΔᐃΔᐃᐃ()) ᐃⲆⲆⵠ(ⲆⲆΔΔⲆ);
			else ᐃⲆⲆⵠ(ΔΔΔⲆⵠ)
		}), 320, 0, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		ⵠⲆ++;
		if (1300 > ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth) this.buttons[ⵠⲆ] = Ⲇⵠᐃ(202, 97, "", [ΔⲆ.ⲆᐃΔᐃⲆⲆⵠ, ΔⲆ.ⵠΔⲆᐃΔⵠᐃ, ΔⲆ.ⵠⲆⵠⵠⵠⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, this.ⵠⵠᐃΔᐃⵠⵠ, 462, 235, ⵠᐃⲆⵠ | ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		else this.buttons[ⵠⲆ] = Ⲇⵠᐃ(202, 97, "", [ΔⲆ.ⲆᐃΔᐃⲆⲆⵠ, ΔⲆ.ⵠΔⲆᐃΔⵠᐃ, ΔⲆ.ⵠⲆⵠⵠⵠⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, this.ⵠⵠᐃΔᐃⵠⵠ, 74, 235, ⵠᐃⲆⵠ | ⲆⵠᐃⲆ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ].view = ⲆΔⵠⲆᐃ;
		ⵠⲆ++;
		if (1300 < ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth) {
			this.buttons[ⵠⲆ] = Ⲇⵠᐃ(355, 168, "", [ΔⲆ.ᐃᐃⵠⵠᐃⵠᐃ, ΔⲆ.ᐃᐃⵠⵠᐃⵠᐃ, ΔⲆ.ᐃᐃⵠⵠᐃⵠᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
				ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]("./changelog.html", Δ[363])
			}), -195, -115, ⵠⲆΔᐃᐃⲆⲆ | ⲆⵠᐃⲆ, ⲆᐃⲆΔ);
			this.buttons[ⵠⲆ++].view = ⲆΔⵠⲆᐃ;
			this.buttons[ⵠⲆ] = Ⲇⵠᐃ(355, 168, "", [ΔⲆ.ⲆⵠⲆⵠⲆᐃⵠ, ΔⲆ.ⲆⵠⲆⵠⲆᐃⵠ, ΔⲆ.ⲆⵠⲆⵠⲆᐃⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
				ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]("https://taming.io", Δ[363])
			}), ⵠΔⲆΔⵠ, -115, ⵠⲆΔᐃᐃⲆⲆ | ⲆⵠᐃⲆ, ⲆᐃⲆΔ);
			this.buttons[ⵠⲆ++].view = ⲆΔⵠⲆᐃ
		}
		this.buttons[ⵠⲆ++] = Ⲇⵠᐃ(80, 80, "", [ΔⲆ.ᐃᐃⲆⲆΔⲆⲆ, ΔⲆ.ⵠⲆᐃᐃⲆⲆⵠ, ΔⲆ.ΔⲆΔᐃⵠⵠⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]("https://lapamauve.creator-spring.com/", Δ[363])
		}), 380, 10, ᐃⲆᐃᐃⵠ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ++] = Ⲇⵠᐃ(80, 80, "", [ΔⲆ.ⲆΔΔᐃⲆⵠⲆ, ΔⲆ.ΔᐃᐃⵠⲆᐃΔ, ΔⲆ.ⲆᐃΔΔⵠᐃⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]("https://discord.gg/starveio", Δ[363])
		}), 330, ᐃⲆᐃⲆᐃ, ᐃⲆᐃᐃⵠ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ++] = Ⲇⵠᐃ(80, 80, "", [ΔⲆ.ⵠⵠᐃⲆⵠⲆΔ, ΔⲆ.ΔᐃᐃᐃⲆᐃⵠ, ΔⲆ.ΔⵠⲆΔⲆⲆᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]("https://reddit.com/r/starveio", Δ[363])
		}), 280, 10, ᐃⲆᐃᐃⵠ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ++] = Ⲇⵠᐃ(80, 80, "", [ΔⲆ.ᐃⵠⲆⵠⵠⵠⲆ, ΔⲆ.ⵠΔᐃⵠᐃᐃΔ, ΔⲆ.ᐃᐃᐃⵠΔᐃⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]("https://starveiopro.wikia.com/wiki/", Δ[363])
		}), 230, 10, ᐃⲆᐃᐃⵠ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ++] = Ⲇⵠᐃ(80, 80, "", [ΔⲆ.ⲆᐃΔᐃΔΔΔ, ΔⲆ.ⵠΔᐃⲆᐃⵠΔ, ΔⲆ.ⵠⲆΔⲆᐃΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]("https://www.facebook.com/LapaMauve/", Δ[363])
		}), 155, 10, ᐃⲆᐃᐃⵠ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ++] = Ⲇⵠᐃ(80, 80, "", [ΔⲆ.ⵠΔⵠᐃᐃᐃᐃ, ΔⲆ.ⵠΔΔᐃⲆⲆᐃ, ΔⲆ.ᐃⲆⵠᐃⵠⵠΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]("https://twitter.com/lapamauve", Δ[363])
		}), 105, 10, ᐃⲆᐃᐃⵠ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ++] = Ⲇⵠᐃ(80, 80, "", [ΔⲆ.ⲆⲆᐃᐃΔᐃⲆ, ΔⲆ.ΔΔⲆⲆᐃΔⵠ, ΔⲆ.ᐃᐃⵠⲆⲆⵠⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]("https://www.youtube.com/@lapamauveofficial", Δ[363])
		}), 55, ᐃᐃᐃⵠⵠ, ᐃⲆᐃᐃⵠ, ⲆᐃⲆΔ);
		ⵠⵠⵠⲆΔΔⲆ = ⵠⲆ++;
		this.buttons[ⵠⵠⵠⲆΔΔⲆ] = Ⲇⵠᐃ(232, 142, "", [ΔⲆ.ⵠΔᐃⵠⵠᐃⵠ, ΔⲆ.ᐃⲆⵠᐃΔᐃΔ, ΔⲆ.ⵠᐃΔᐃⲆᐃΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ᐃΔⵠᐃⲆ);
			ⲆⲆⲆⵠⲆ(ⵠⵠΔⵠ.ⲆΔⲆⲆᐃΔΔ, ⵠⵠΔⵠ.Δⵠᐃᐃᐃⵠⵠ, ⵠⵠΔⵠ.ᐃⵠⲆⵠⵠⵠᐃ, ⵠⵠΔⵠ.ΔᐃΔᐃⲆᐃⵠ)
		}), -ᐃΔᐃⲆⲆ, 573, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ++] = Ⲇⵠᐃ(236, 165, "", [ΔⲆ.ΔΔᐃⲆⲆⵠΔ, ΔⲆ.ΔΔᐃⲆⲆⵠΔ, ΔⲆ.ΔΔᐃⲆⲆⵠΔ], ⵠⲆⲆⵠ, ΔᐃⵠⵠᐃⲆⵠ, (function() {
			ᐃⲆⲆⵠ(ᐃΔⵠᐃⲆ)
		}), -5, 566, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		ⲆⲆⵠⲆⵠᐃⲆ = ⵠⲆ++;
		this.buttons[ⲆⲆⵠⲆⵠᐃⲆ] = Ⲇⵠᐃ(236, 165, "", [ΔⲆ.ᐃᐃⵠⲆⲆᐃΔ, ΔⲆ.ΔΔⵠΔⵠⲆᐃ, ΔⲆ.ⲆⲆⲆΔΔⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔⲆΔΔΔⲆᐃ)
		}), -ΔⵠⲆᐃⵠ, 494, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ++] = Ⲇⵠᐃ(236, 165, "", [ΔⲆ.ⵠᐃⵠⵠⲆⲆΔ, ΔⲆ.ⵠᐃⵠⵠⲆⲆΔ, ΔⲆ.ⵠᐃⵠⵠⲆⲆΔ], ⵠⲆⲆⵠ, ΔᐃⵠⵠᐃⲆⵠ, (function() {
			ᐃⲆⲆⵠ(ΔⲆΔΔΔⲆᐃ)
		}), -ⵠᐃᐃΔᐃ, 494, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		ⵠΔᐃⵠᐃⲆⵠ = ⵠⲆ++;
		this.buttons[ⵠΔᐃⵠᐃⲆⵠ] = Ⲇⵠᐃ(236, 165, "", [ΔⲆ.ᐃᐃⵠⲆⲆᐃΔ, ΔⲆ.ΔΔⵠΔⵠⲆᐃ, ΔⲆ.ⲆⲆⲆΔΔⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			if (ⲆⲆᐃ.ΔᐃΔᐃᐃ()) {
				if (ⵠⲆΔⵠ < ⵠⵠΔⵠ.ⵠΔᐃⵠⵠᐃΔ - Date.now()) ᐃⲆⲆⵠ(ΔΔⵠΔⲆ);
				else ᐃⲆⲆⵠ(ⵠΔᐃΔⲆ)
			} else ᐃⲆⲆⵠ(ΔΔΔⲆⵠ)
		}), -5, 415, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ++] = Ⲇⵠᐃ(236, 165, "", [ΔⲆ.ⲆᐃⵠΔⵠΔⲆ, ΔⲆ.ⲆᐃⵠΔⵠΔⲆ, ΔⲆ.ⲆᐃⵠΔⵠΔⲆ], ⵠⲆⲆⵠ, ΔᐃⵠⵠᐃⲆⵠ, (function() {
			if (ⲆⲆᐃ.ΔᐃΔᐃᐃ()) {
				ⵠⵠΔⵠ.ⵠΔᐃⵠⵠᐃΔ - Date.now() > ⵠᐃΔ ? ᐃⲆⲆⵠ(ΔΔⵠΔⲆ) : ᐃⲆⲆⵠ(ⵠΔᐃΔⲆ)
			} else ᐃⲆⲆⵠ(ΔΔΔⲆⵠ)
		}), -5, 415, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		ᐃⵠᐃⲆᐃᐃⲆ = ⵠⲆ++;
		this.buttons[ᐃⵠᐃⲆᐃᐃⲆ] = Ⲇⵠᐃ(236, 165, "", [ΔⲆ.ᐃᐃⵠⲆⲆᐃΔ, ΔⲆ.ΔΔⵠΔⵠⲆᐃ, ΔⲆ.ⲆⲆⲆΔΔⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔᐃΔᐃⲆ)
		}), -ΔⲆΔᐃⵠ, 336, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ++] = Ⲇⵠᐃ(236, 165, "", [ΔⲆ.ⵠⲆⵠⲆⲆⵠⵠ, ΔⲆ.ⵠⲆⵠⲆⲆⵠⵠ, ΔⲆ.ⵠⲆⵠⲆⲆⵠⵠ], ⵠⲆⲆⵠ, ΔᐃⵠⵠᐃⲆⵠ, (function() {
			ᐃⲆⲆⵠ(ΔᐃΔᐃⲆ)
		}), -5, 336, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		ⲆΔⵠΔΔΔᐃ = ⵠⲆ++;
		this.buttons[ⲆΔⵠΔΔΔᐃ] = Ⲇⵠᐃ(236, 165, "", [ΔⲆ.ᐃᐃⵠⲆⲆᐃΔ, ΔⲆ.ΔΔⵠΔⵠⲆᐃ, ΔⲆ.ⲆⲆⲆΔΔⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⵠⵠⵠΔⵠ)
		}), -5, 257, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ++] = Ⲇⵠᐃ(236, 165, "", [ΔⲆ.ⵠⲆⵠⵠΔΔΔ, ΔⲆ.ⵠⲆⵠⵠΔΔΔ, ΔⲆ.ⵠⲆⵠⵠΔΔΔ], ⵠⲆⲆⵠ, ΔᐃⵠⵠᐃⲆⵠ, (function() {
			ᐃⲆⲆⵠ(ⵠⵠⵠΔⵠ)
		}), -ⵠⵠⲆⵠ, 257, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		ⲆᐃΔΔⲆΔᐃ = ⵠⲆ++;
		this.buttons[ⲆᐃΔΔⲆΔᐃ] = Ⲇⵠᐃ(236, 165, "", [ΔⲆ.ᐃᐃⵠⲆⲆᐃΔ, ΔⲆ.ΔΔⵠΔⵠⲆᐃ, ΔⲆ.ⲆⲆⲆΔΔⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⲆΔⵠⲆᐃ)
		}), -ⵠⵠΔⲆ, 178, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ++] = Ⲇⵠᐃ(236, 165, "", [ΔⲆ.ⵠⵠⲆⵠⵠᐃΔ, ΔⲆ.ⵠⵠⲆⵠⵠᐃΔ, ΔⲆ.ⵠⵠⲆⵠⵠᐃΔ], ⵠⲆⲆⵠ, ΔᐃⵠⵠᐃⲆⵠ, (function() {
			ᐃⲆⲆⵠ(ⲆΔⵠⲆᐃ)
		}), -ᐃᐃⲆΔΔ, 178, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		ⲆⲆⵠⵠΔᐃᐃ = ⵠⲆ++;
		this.ⲆⲆⵠⵠΔᐃᐃ = ⲆⲆⵠⵠΔᐃᐃ;
		this.buttons[ⲆⲆⵠⵠΔᐃᐃ] = Ⲇⵠᐃ(324, 222, "", [ΔⲆ.ᐃⵠⲆΔⲆΔⵠ, ΔⲆ.ΔΔⵠᐃⲆⲆᐃ, ΔⲆ.ⵠᐃΔΔⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔΔΔⲆⵠ)
		}), 0, 70, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		ΔᐃΔⵠΔⵠⲆ = ⵠⲆ++;
		ⵠⵠΔⵠᐃΔⲆ = ⵠⲆ++;
		this.ΔᐃΔⵠΔⵠⲆ = ΔᐃΔⵠΔⵠⲆ;
		this.ⵠⵠΔⵠᐃΔⲆ = ⵠⵠΔⵠᐃΔⲆ;
		this.buttons[ΔᐃΔⵠΔⵠⲆ] = Ⲇⵠᐃ(324, 222, "", [ΔⲆ.ⲆΔᐃΔⲆΔᐃ, ΔⲆ.ⵠⵠΔⵠΔⵠΔ, ΔⲆ.ⲆᐃᐃⲆΔⵠᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔⲆⲆⵠⵠ);
			ⲆΔⲆΔΔ(-1)
		}), ᐃⲆⵠΔ, 70, ᐃᐃⲆᐃ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⵠΔⵠᐃΔⲆ] = Ⲇⵠᐃ(324, 222, "", [ΔⲆ.ΔΔᐃⲆΔⵠⲆ, ΔⲆ.ΔΔᐃⲆΔⵠⲆ, ΔⲆ.ΔΔᐃⲆΔⵠⲆ], ⵠⲆⲆⵠ, ΔᐃⵠⵠᐃⲆⵠ, (function() {
			ᐃⲆⲆⵠ(ΔⲆⲆⵠⵠ);
			ⲆΔⲆΔΔ(-ΔⵠⲆ)
		}), ⲆΔⵠΔ, 70, ᐃᐃⲆᐃ, ⲆⵠⲆⲆ);
		if (ᐃⵠΔΔ.ⲆΔΔⲆᐃⲆᐃ === 0) {
			var ⲆⵠⲆΔⲆ = ⵠⲆ++;
			if (ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth < 1300) this.buttons[ⲆⵠⲆΔⲆ] = Ⲇⵠᐃ(266, 176, "", [ΔⲆ.ΔⲆⵠᐃΔᐃⲆ, ΔⲆ.ᐃⵠᐃᐃΔⵠⵠ, ΔⲆ.ⲆᐃΔᐃⵠΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
				ᐃⵠΔΔ.ⲆⵠⲆᐃⵠ(ⵠΔᐃⲆ.ᐃᐃΔⲆⲆ)
			}), 150, 300, ᐃᐃⲆᐃ | ⵠᐃⲆⵠ, ⲆᐃⲆΔ);
			else this.buttons[ⲆⵠⲆΔⲆ] = Ⲇⵠᐃ(266, 176, "", [ΔⲆ.ΔⲆⵠᐃΔᐃⲆ, ΔⲆ.ᐃⵠᐃᐃΔⵠⵠ, ΔⲆ.ⲆᐃΔᐃⵠΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
				ᐃⵠΔΔ.ⲆⵠⲆᐃⵠ(ⵠΔᐃⲆ.ᐃᐃΔⲆⲆ)
			}), -340, ᐃΔⵠⵠⵠ, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆᐃⲆΔ);
			this.buttons[ⲆⵠⲆΔⲆ].view = ⲆΔⵠⲆᐃ;
			this.buttons[ⲆⵠⲆΔⲆ].hint = 0;
			var ΔⵠΔⵠΔ = ⵠⲆ++;
			if (ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth < 1300) this.buttons[ΔⵠΔⵠΔ] = Ⲇⵠᐃ(266, 176, "", [ΔⲆ.ⵠⵠⵠⵠΔΔⲆ, ΔⲆ.ᐃⵠⵠᐃᐃᐃΔ, ΔⲆ.ᐃⲆⲆⲆⵠᐃΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
				ᐃⵠΔΔ.ⲆⵠⲆᐃⵠ(ⵠΔᐃⲆ.ⵠΔΔⲆⵠ)
			}), 150, 400, ᐃᐃⲆᐃ | ⵠᐃⲆⵠ, ⲆᐃⲆΔ);
			else this.buttons[ΔⵠΔⵠΔ] = Ⲇⵠᐃ(266, 176, "", [ΔⲆ.ⵠⵠⵠⵠΔΔⲆ, ΔⲆ.ᐃⵠⵠᐃᐃᐃΔ, ΔⲆ.ᐃⲆⲆⲆⵠᐃΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
				ᐃⵠΔΔ.ⲆⵠⲆᐃⵠ(ⵠΔᐃⲆ.ⵠΔΔⲆⵠ)
			}), -340, 200, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆᐃⲆΔ);
			this.buttons[ΔⵠΔⵠΔ].view = ⲆΔⵠⲆᐃ;
			this.buttons[ΔⵠΔⵠΔ].hint = ⲆᐃⲆ;
			var ⲆΔΔⲆᐃ = ⵠⲆ++;
			if (1300 > ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth) this.buttons[ⲆΔΔⲆᐃ] = Ⲇⵠᐃ(266, 176, "", [ΔⲆ.ⵠⲆⵠΔᐃⵠΔ, ΔⲆ.ΔⵠⲆΔⵠᐃΔ, ΔⲆ.ⲆᐃΔΔΔΔΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
				ᐃⵠΔΔ.ⲆⵠⲆᐃⵠ(ⵠΔᐃⲆ.ⲆΔΔⲆᐃ)
			}), 450, 300, ᐃᐃⲆᐃ | ⵠᐃⲆⵠ, ⲆᐃⲆΔ);
			else this.buttons[ⲆΔΔⲆᐃ] = Ⲇⵠᐃ(266, 176, "", [ΔⲆ.ⵠⲆⵠΔᐃⵠΔ, ΔⲆ.ΔⵠⲆΔⵠᐃΔ, ΔⲆ.ⲆᐃΔΔΔΔΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
				ᐃⵠΔΔ.ⲆⵠⲆᐃⵠ(ⵠΔᐃⲆ.ⲆΔΔⲆᐃ)
			}), -340, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆᐃⲆΔ);
			this.buttons[ⲆΔΔⲆᐃ].view = ⲆΔⵠⲆᐃ;
			this.buttons[ⲆΔΔⲆᐃ].hint = 0;
			var ΔᐃⵠⲆΔ = ⵠⲆ++;
			ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth < 1300 ? this.buttons[ΔᐃⵠⲆΔ] = Ⲇⵠᐃ(266, 176, "", [ΔⲆ.ΔΔⵠᐃⵠⵠⲆ, ΔⲆ.ΔᐃᐃᐃⵠⵠΔ, ΔⲆ.ⲆⲆᐃⲆⵠⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
				ᐃⵠΔΔ.ⲆⵠⲆᐃⵠ(ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ)
			}), 300, 300, ᐃᐃⲆᐃ | ⵠᐃⲆⵠ, ⲆᐃⲆΔ) : this.buttons[ΔᐃⵠⲆΔ] = Ⲇⵠᐃ(266, 176, "", [ΔⲆ.ΔΔⵠᐃⵠⵠⲆ, ΔⲆ.ΔᐃᐃᐃⵠⵠΔ, ΔⲆ.ⲆⲆᐃⲆⵠⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
				ᐃⵠΔΔ.ⲆⵠⲆᐃⵠ(ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ)
			}), 204, ⵠⲆⲆⵠᐃΔᐃ, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆᐃⲆΔ);
			this.buttons[ΔᐃⵠⲆΔ].view = ⲆΔⵠⲆᐃ;
			this.buttons[ΔᐃⵠⲆΔ].hint = ⵠⲆⵠ;
			var ⵠⲆⵠΔⲆ = ⵠⲆ++;
			ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth < 1300 ? this.buttons[ⵠⲆⵠΔⲆ] = Ⲇⵠᐃ(266, 176, "", [ΔⲆ.ⵠⲆⲆΔⵠⵠⵠ, ΔⲆ.ᐃΔⲆᐃᐃⵠᐃ, ΔⲆ.ΔⲆᐃᐃᐃᐃΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
				ᐃⵠΔΔ.ⲆⵠⲆᐃⵠ(ⵠΔᐃⲆ.ΔᐃΔⲆᐃ)
			}), 300, 400, ᐃᐃⲆᐃ | ⵠᐃⲆⵠ, ⲆᐃⲆΔ) : this.buttons[ⵠⲆⵠΔⲆ] = Ⲇⵠᐃ(266, 176, "", [ΔⲆ.ⵠⲆⲆΔⵠⵠⵠ, ΔⲆ.ᐃΔⲆᐃᐃⵠᐃ, ΔⲆ.ΔⲆᐃᐃᐃᐃΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
				ᐃⵠΔΔ.ⲆⵠⲆᐃⵠ(ⵠΔᐃⲆ.ΔᐃΔⲆᐃ)
			}), 204, 200, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆᐃⲆΔ);
			this.buttons[ⵠⲆⵠΔⲆ].view = ⲆΔⵠⲆᐃ;
			this.buttons[ⵠⲆⵠΔⲆ].hint = ⲆᐃⲆ;
			var ⲆᐃⲆᐃᐃ = ⵠⲆ++;
			this.buttons[ⲆᐃⲆᐃᐃ] = Ⲇⵠᐃ(266, 176, "", [ΔⲆ.ⵠⵠᐃᐃΔⵠΔ, ΔⲆ.ⲆⵠΔΔΔᐃⵠ, ΔⲆ.ⵠΔⲆᐃΔᐃⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
				ᐃⵠΔΔ.ⲆⵠⲆᐃⵠ(ⵠΔᐃⲆ.ⲆᐃⲆᐃᐃ)
			}), 1300 > ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth ? 450 : 204, 1300 > ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth ? 400 : 300, (ⵠΔΔⲆⲆⵠᐃᐃⵠ.innerWidth < 1300 ? ᐃᐃⲆᐃ : ⲆⵠᐃⲆ) | ⵠᐃⲆⵠ, ⲆᐃⲆΔ);
			this.buttons[ⲆᐃⲆᐃᐃ].view = ⲆΔⵠⲆᐃ;
			this.buttons[ⲆᐃⲆᐃᐃ].hint = 0
		}
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(87, 78, "", [ΔⲆ.ΔⲆΔⵠⵠᐃᐃ, ΔⲆ.ⲆΔᐃᐃΔⲆⵠ, ΔⲆ.ΔᐃⵠᐃᐃΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⵠⵠΔⵠ.ᐃⵠⵠⲆⲆΔᐃᐃΔ();
			ⵠⵠΔⵠ.ᐃⲆΔⵠⵠⵠⲆ === 0 ? ᐃⲆⲆⵠ(ⲆΔⲆⵠΔⵠΔ) : ᐃⲆⲆⵠ(ⵠΔΔⵠⵠᐃΔ)
		}), 127, 110, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(87, 78, "", [ΔⲆ.ΔΔⵠⵠᐃⲆⵠ, ΔⲆ.ΔⵠⲆⵠⲆᐃᐃ, ΔⲆ.ⲆⲆⲆⲆΔⵠΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			const ⲆⲆⲆⲆΔ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[310]][ᐃⲆᐃᐃᐃᐃⵠ[2]]("textarea");
			ⲆⲆⲆⲆΔ.value = ᐃΔⵠⲆᐃ;
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[310]][ᐃⲆᐃᐃᐃᐃⵠ[30]][ᐃⲆᐃᐃᐃᐃⵠ[236]](ⲆⲆⲆⲆΔ);
			ⲆⲆⲆⲆΔ.select();
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[310]][ᐃⲆᐃᐃᐃᐃⵠ[136]]("copy");
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[310]][ᐃⲆᐃᐃᐃᐃⵠ[30]][ᐃⲆᐃᐃᐃᐃⵠ[273]](ⲆⲆⲆⲆΔ)
		}), 182, 110, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(87, 78, "", [ΔⲆ.ᐃΔᐃᐃΔⵠⵠ, ΔⲆ.ᐃⲆⵠⵠⵠⵠⵠ, ΔⲆ.ⵠΔⵠⲆⲆᐃΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⵠΔᐃᐃΔᐃⵠⵠⵠ()
		}), 255, 110, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(58, 64, "", [ΔⲆ.ⵠⵠᐃᐃΔⵠⵠ, ΔⲆ.ⲆΔⵠⲆⵠΔⵠ, ΔⲆ.ᐃᐃⵠΔⲆΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⲆΔⵠⲆᐃ)
		}), 189, 118, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔΔⲆⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(497, 72, "", [ΔⲆ.ⵠⵠᐃᐃⲆᐃⵠ, ΔⲆ.ΔⵠⲆⲆᐃⵠⵠ, ΔⲆ.ΔⵠⵠΔⲆⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ΔⵠΔⲆⵠΔᐃⵠⲆ()
		}), -130, 390, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔΔⲆⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(497, 72, "", [ΔⲆ.ΔⲆⵠⲆΔⲆᐃ, ΔⲆ.ⲆⵠΔⵠⲆⵠΔ, ΔⲆ.ⵠⲆⲆⵠⲆⵠⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆΔⲆᐃⵠⲆᐃ()
		}), -130, 430, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔΔⲆⵠ;
		ⵠΔⲆΔⲆᐃⲆ = 2e4;

		function ⲆᐃⲆᐃⲆⵠⲆ(ᐃⲆᐃⵠⲆ) {
			var ΔΔΔⵠⲆ = ⵠⵠΔⵠ.ⲆᐃⲆⵠᐃⲆΔ(ᐃⲆᐃⵠⲆ);
			var ᐃⲆⵠⲆⲆⲆᐃ = ⵠΔⲆΔⲆᐃⲆ * (ΔΔΔⵠⲆ * ΔΔΔⵠⲆ);
			var ᐃⵠⵠᐃᐃⲆⵠⲆⲆ = (ΔΔΔⵠⲆ + 1) * (ΔΔΔⵠⲆ + 1) * ⵠΔⲆΔⲆᐃⲆ - ᐃⲆⵠⲆⲆⲆᐃ;
			ᐃⲆᐃⵠⲆ -= ᐃⲆⵠⲆⲆⲆᐃ;
			return ᐃⲆᐃⵠⲆ / ᐃⵠⵠᐃᐃⲆⵠⲆⲆ
		}
		this.ⲆᐃⲆᐃⲆⵠⲆ = ⲆᐃⲆᐃⲆⵠⲆ;

		function ⲆᐃⲆⵠᐃⲆΔ(ᐃⲆᐃⵠⲆ) {
			return Math.floor(Math.sqrt(ᐃⲆᐃⵠⲆ / ⵠΔⲆΔⲆᐃⲆ))
		}
		this.ⲆᐃⲆⵠᐃⲆΔ = ⲆᐃⲆⵠᐃⲆΔ;
		this.ᐃⵠⵠΔΔΔΔⲆᐃ = function(ᐃⲆᐃⵠⲆ) {
			ⵠⵠΔⵠ.ΔΔΔⵠⲆ = ⵠⵠΔⵠ.ⲆᐃⲆⵠᐃⲆΔ(ᐃⲆᐃⵠⲆ);
			ⵠⵠΔⵠ.ΔⵠⲆᐃΔΔⲆ = ⵠⵠΔⵠ.ⲆᐃⲆᐃⲆⵠⲆ(ᐃⲆᐃⵠⲆ);
			ⵠⵠΔⵠ.ⵠⲆᐃⲆⵠⵠⵠ = Ⲇᐃⵠⵠ;
			ⵠⵠΔⵠ.ᐃⲆᐃⵠⲆ = ᐃⲆᐃⵠⲆ
		};

		function ⲆΔⲆΔΔ(ⵠᐃ, ⲆΔⲆΔⲆ) {
			if (ⵠⲆᐃᐃⲆ !== ⲆΔⲆΔⲆ) {
				ⵠⵠΔⵠ.ⲆᐃΔⲆΔΔΔ = ⲆΔⲆΔⲆ;
				var ⵠᐃⲆⵠⲆ = ⵠⵠΔⵠ.ᐃⲆΔᐃΔⵠΔ[ⲆΔⲆΔⲆ];
				ⵠⵠΔⵠ.ᐃⲆᐃⵠⲆ = ⵠᐃⲆⵠⲆ[Δ[ΔⵠⵠⵠΔ]];
				ⵠⵠΔⵠ.ᐃᐃⲆᐃᐃ = ⵠᐃⲆⵠⲆ["kill"];
				ⵠⵠΔⵠ.ΔⲆᐃΔⵠΔΔ = ⵠᐃⲆⵠⲆ["death"];
				ⵠⵠΔⵠ.time = ⵠᐃⲆⵠⲆ[Δ[302]];
				ⵠⵠΔⵠ.ΔΔᐃᐃⲆᐃⵠ = ⵠᐃⲆⵠⲆ["bestScore"];
				ⵠⵠΔⵠ.ⲆⵠⵠⲆⲆⲆⵠ = ⵠᐃⲆⵠⲆ["bestKill"];
				ⵠⵠΔⵠ.ⵠᐃᐃΔⵠⲆⲆ = ⵠᐃⲆⵠⲆ["bestTime"];
				ⵠⵠΔⵠ.ⵠⵠⲆΔᐃⵠΔ = ⵠᐃⲆⵠⲆ["scoreTotal"]
			}
			if (undefined === ⵠᐃ) ⵠᐃ = ⵠⵠΔⵠ.ⲆⵠᐃΔᐃⵠᐃ;
			ⵠⵠΔⵠ.ⲆⵠᐃΔᐃⵠᐃ = ⵠᐃ;
			if (0 <= ⵠᐃ) {
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("stats_box_time")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ⵠⵠΔⵠ.ⵠᐃᐃΔⵠⲆⲆ[ⵠᐃ];
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("stats_box_kill")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ⵠⵠΔⵠ.ⲆⵠⵠⲆⲆⲆⵠ[ⵠᐃ];
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("stats_box_score")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ⵠⵠΔⵠ.ΔΔᐃᐃⲆᐃⵠ[ⵠᐃ]
			} else {
				var ᐃᐃⲆᐃᐃ = ⵠΔΔᐃ;
				for (var Δᐃ = 0; Δᐃ < ⵠⵠΔⵠ.ᐃᐃⲆᐃᐃ.length; Δᐃ++) ᐃᐃⲆᐃᐃ += ⵠⵠΔⵠ.ᐃᐃⲆᐃᐃ[Δᐃ];
				var ᐃᐃΔ = ⵠⲆᐃ;
				for (var Δᐃ = 0; Δᐃ < ⵠⵠΔⵠ.time.length; Δᐃ++) ᐃᐃΔ += ⵠⵠΔⵠ.time[Δᐃ];
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("stats_box_time")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ᐃᐃΔ;
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("stats_box_kill")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ᐃᐃⲆᐃᐃ;
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("stats_box_score")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ⵠⵠΔⵠ.ᐃⲆᐃⵠⲆ
			}
		}
		this.ΔⵠⵠᐃᐃⵠⲆⲆⵠ = function(ⲆⵠΔᐃ) {
			ⵠⵠΔⵠ.buttons[ⵠⵠΔⵠ.ⲆⲆⵠⵠΔᐃᐃ].info.active = ⵠⲆᐃ;
			ⵠⵠΔⵠ.buttons[ⵠⵠΔⵠ.ΔᐃΔⵠΔⵠⲆ].info.active = Δᐃᐃ;
			ⵠⵠΔⵠ.buttons[ⵠⵠΔⵠ.ⵠⵠΔⵠᐃΔⲆ].info.active = 1;
			ⵠⲆⵠⵠΔⲆⵠ();
			if (ⲆⵠΔᐃ[Δ[401]].indexOf("Starver#") === -1) document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[79]).value = ⵠΔΔⲆⲆⵠᐃᐃⵠ["decodeURIComponent"](ⵠΔΔⲆⲆⵠᐃᐃⵠ["escape"](ⵠΔΔⲆⲆⵠᐃᐃⵠ["atob"](ⲆⵠΔᐃ[Δ[401]])));
			else document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[79]).value = ⲆⵠΔᐃ[Δ[401]];
			ⵠⵠΔⵠ.ⲆⵠⵠΔⲆ = ⲆⵠΔᐃ["bread"];
			var ᐃⲆΔᐃΔⵠΔ = ⲆⵠΔᐃ["seasons"];
			var ⵠᐃⲆⵠⲆ = ᐃⲆΔᐃΔⵠΔ[ᐃⲆΔᐃΔⵠΔ.length - 1];
			ⵠⵠΔⵠ.ᐃⲆΔᐃΔⵠΔ = ᐃⲆΔᐃΔⵠΔ;
			ⲆⲆᐃ.ᐃⵠⵠΔΔΔΔⲆᐃ(ⵠᐃⲆⵠⲆ[Δ[6]]);
			ⵠⵠΔⵠ.ᐃⲆᐃⵠⲆ = ⵠᐃⲆⵠⲆ[Δ[ⵠⲆⲆΔᐃⲆⵠ]];
			ⵠⵠΔⵠ.ᐃᐃⲆᐃᐃ = ⵠᐃⲆⵠⲆ["kill"];
			ⵠⵠΔⵠ.ΔⲆᐃΔⵠΔΔ = ⵠᐃⲆⵠⲆ["death"];
			ⵠⵠΔⵠ.time = ⵠᐃⲆⵠⲆ[Δ[302]];
			ⵠⵠΔⵠ.ΔΔᐃᐃⲆᐃⵠ = ⵠᐃⲆⵠⲆ["bestScore"];
			ⵠⵠΔⵠ.ⲆⵠⵠⲆⲆⲆⵠ = ⵠᐃⲆⵠⲆ["bestKill"];
			ⵠⵠΔⵠ.ⵠᐃᐃΔⵠⲆⲆ = ⵠᐃⲆⵠⲆ["bestTime"];
			ⵠⵠΔⵠ.ⵠⵠⲆΔᐃⵠΔ = ⵠᐃⲆⵠⲆ["scoreTotal"];
			ⵠⵠΔⵠ.ᐃⲆΔⵠⵠⵠⲆ = ⲆⵠΔᐃ["firstName"];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[45]).value = ⲆⵠΔᐃ["privateServerRegion"] + Δ[186] + ⲆⵠΔᐃ["privateServer"];
			ⵠⵠΔⵠ.ᐃⲆΔⵠⵠⵠⲆ === ⲆⲆΔᐃⵠ && (ⵠⵠΔⵠ.ᐃⲆΔⵠⵠⵠⲆ = ⵠΔⵠⲆ);
			ⵠⵠΔⵠ.ⵠΔᐃⵠⵠᐃΔ = Date.now() + ⲆⵠΔᐃ["privateServerTime"];
			Number(ⲆⵠΔᐃ["privateServerTime"]) > ᐃⲆⵠΔ && (ⵠⵠΔⵠ.ⵠΔᐃⵠⵠᐃΔ = Date.now() + Number(ⲆⵠΔᐃ["privateServerTime"]));
			ⵠⵠΔⵠ.ᐃⲆⲆΔⵠ = Date.now() + ⲆⵠΔᐃ[Δ[481]];
			ⲆⲆⵠⲆ < Number(ⲆⵠΔᐃ[Δ[481]]) && (ⵠⵠΔⵠ.ᐃⲆⲆΔⵠ = Date.now() + Number(ⲆⵠΔᐃ[Δ[481]]));
			var ΔⵠΔᐃⲆ = ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ;
			for (var Δᐃ = ⲆⲆᐃΔ; ⲆⵠΔᐃ["skins"].length > Δᐃ; Δᐃ++) {
				var ⲆᐃΔ = ⲆⵠΔᐃ["skins"][Δᐃ];
				if (ⵠⲆΔⵠ < ⲆᐃΔ) {
					for (var ᐃΔⵠⵠ = ⵠΔΔᐃ; ᐃΔⵠⵠ < ΔⵠΔᐃⲆ.length; ᐃΔⵠⵠ++) {
						Δᐃ === ΔⵠΔᐃⲆ[ᐃΔⵠⵠ].id && (ⲆⲆᐃ.unlock.ⵠⲆΔΔ[ᐃΔⵠⵠ] = ΔΔⲆΔ)
					}
				}
			}
			var ΔⵠΔᐃⲆ = ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ;
			for (var Δᐃ = 0; ⲆⵠΔᐃ["accessories"].length > Δᐃ; Δᐃ++) {
				var ⲆᐃΔ = ⲆⵠΔᐃ["accessories"][Δᐃ];
				if (ⲆᐃΔ > ⵠᐃⵠⵠ) {
					for (var ᐃΔⵠⵠ = 0; ΔⵠΔᐃⲆ.length > ᐃΔⵠⵠ; ᐃΔⵠⵠ++) {
						ΔⵠΔᐃⲆ[ᐃΔⵠⵠ].id === Δᐃ && (ⲆⲆᐃ.unlock.ᐃᐃⲆΔⵠ[ᐃΔⵠⵠ] = ⵠΔⲆ)
					}
				}
			}
			var ΔⵠΔᐃⲆ = ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ;
			for (var Δᐃ = ⵠΔⵠⲆ; ⲆⵠΔᐃ["books"].length > Δᐃ; Δᐃ++) {
				var ⲆᐃΔ = ⲆⵠΔᐃ["books"][Δᐃ];
				if (ⲆᐃΔ > 0) {
					for (var ᐃΔⵠⵠ = ⵠᐃΔⲆ; ΔⵠΔᐃⲆ.length > ᐃΔⵠⵠ; ᐃΔⵠⵠ++) {
						Δᐃ === ΔⵠΔᐃⲆ[ᐃΔⵠⵠ].id && (ⲆⲆᐃ.unlock.ⲆΔⵠΔΔ[ᐃΔⵠⵠ] = ⲆΔⲆⵠ)
					}
				}
			}
			var ΔⵠΔᐃⲆ = ᐃᐃⵠⵠ.ⲆⲆⲆⲆ;
			for (var Δᐃ = ΔΔⲆⲆ; ⲆⵠΔᐃ["bags"].length > Δᐃ; Δᐃ++) {
				var ⲆᐃΔ = ⲆⵠΔᐃ["bags"][Δᐃ];
				if (0 < ⲆᐃΔ) {
					for (var ᐃΔⵠⵠ = 0; ΔⵠΔᐃⲆ.length > ᐃΔⵠⵠ; ᐃΔⵠⵠ++) {
						Δᐃ === ΔⵠΔᐃⲆ[ᐃΔⵠⵠ].id && (ⲆⲆᐃ.unlock.ΔΔⲆᐃⵠ[ᐃΔⵠⵠ] = 1)
					}
				}
			}
			var ΔⵠΔᐃⲆ = ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ;
			for (var Δᐃ = 0; ⲆⵠΔᐃ["crates"].length > Δᐃ; Δᐃ++) {
				var ⲆᐃΔ = ⲆⵠΔᐃ["crates"][Δᐃ];
				if (ⲆᐃΔ > ᐃΔΔ) {
					for (var ᐃΔⵠⵠ = ᐃΔΔ; ᐃΔⵠⵠ < ΔⵠΔᐃⲆ.length; ᐃΔⵠⵠ++) {
						Δᐃ === ΔⵠΔᐃⲆ[ᐃΔⵠⵠ].id && (ⲆⲆᐃ.unlock.ⵠⵠΔⲆⲆ[ᐃΔⵠⵠ] = 1, ⲆⲆᐃ.unlock.Δᐃⵠⵠᐃ[ᐃΔⵠⵠ] = 1)
					}
				}
			}
		};
		this.ⲆΔΔⵠⲆΔⲆⵠⵠ = function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ.ⵠⲆᐃⲆΔᐃⵠ = function() {
				ᐃⲆⲆⵠ(ⲆΔⵠⲆᐃ);
				ΔᐃⲆᐃΔΔΔⵠᐃ(ⲆⲆᐃ.ΔⵠⵠᐃᐃⵠⲆⲆⵠ)
			};
			ⵠΔᐃ === ᐃⲆΔⲆᐃΔⲆ && ⵠΔΔⲆⲆⵠᐃᐃⵠ.ⵠⲆᐃⲆΔᐃⵠ()
		};
		ⵠΔΔⲆⲆⵠᐃᐃⵠ.ⵠᐃᐃⲆⵠⲆⲆⵠΔ = function() {
			ⵠⵠΔⵠ.buttons[ⵠⵠΔⵠ.ⲆⲆⵠⵠΔᐃᐃ].info.active = 1;
			ⵠⵠΔⵠ.buttons[ⵠⵠΔⵠ.ΔᐃΔⵠΔⵠⲆ].info.active = ⵠⲆᐃ;
			ⵠⵠΔⵠ.buttons[ⵠⵠΔⵠ.ⵠⵠΔⵠᐃΔⲆ].info.active = ᐃΔΔ;
			ᐃⲆⲆⵠ(ⲆΔⵠⲆᐃ)
		};
		this.ΔᐃΔᐃᐃ = function() {
			return ⵠⵠΔⵠ.buttons[ⵠⵠΔⵠ.ΔᐃΔⵠΔⵠⲆ].info.active
		};
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(461, 105, "", [ΔⲆ.ⲆⵠΔⵠᐃΔᐃ, ΔⲆ.ᐃⲆⵠⲆⲆⵠⲆ, ΔⲆ.ⲆᐃⵠΔⲆᐃΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			if (ⲆⲆᐃ.ΔᐃΔᐃᐃ()) ᐃⲆⲆⵠ(ⲆⲆΔΔⲆ);
			else ᐃⲆⲆⵠ(ΔΔΔⲆⵠ)
		}), -ⵠⲆᐃⵠⲆ, 80, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔᐃΔᐃⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(157, 158, "", [ΔⲆ.ΔΔᐃΔΔⵠᐃ, ΔⲆ.ᐃΔᐃΔⵠⲆᐃ, ΔⲆ.ᐃⲆᐃⵠⵠⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]("https://starveiopro.wikia.com/wiki/", Δ[363])
		}), -35, 125, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆΔΔΔⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(66, 73, "", [ΔⲆ.ᐃⲆΔⲆⵠⲆᐃ, ΔⲆ.ᐃⲆⲆⵠⲆⵠⲆ, ΔⲆ.ⵠⲆⵠⲆⲆⵠⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -68, 340, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆΔΔΔⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(66, 73, "", [ΔⲆ.ᐃΔⵠᐃΔΔⵠ, ΔⲆ.ⲆⲆⵠᐃⵠⲆᐃ, ΔⲆ.ⲆᐃⲆΔᐃⲆᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -30, 340, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆΔΔΔⲆᐃ;
		this.ⲆᐃⲆⲆΔⲆΔᐃⵠ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(97, 66, "", [ΔⲆ.ΔΔᐃᐃⲆⵠⲆ, ΔⲆ.ⲆⵠⵠᐃᐃⵠⲆ, ΔⲆ.ⲆᐃΔⲆⵠᐃΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(undefined, undefined, ⵠⵠΔⵠ.ᐃⵠⲆⵠⵠⵠᐃ)
		}), -ᐃᐃⲆⲆⵠΔⵠ, 151, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ⵠᐃᐃⲆᐃΔΔ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(135, 66, "", [ΔⲆ.ⵠΔΔⲆᐃΔΔ, ΔⲆ.ⲆᐃⵠᐃΔⲆⲆ, ΔⲆ.ⲆⲆⵠⵠΔⵠⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(undefined, ΔⵠⲆᐃᐃ, ⵠⵠΔⵠ.ⵠᐃᐃⲆᐃΔΔ)
		}), 37.5, 151, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ᐃᐃⲆⵠᐃᐃΔ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(160, 66, "", [ΔⲆ.ⲆᐃⵠⵠᐃⲆⵠ, ΔⲆ.ⵠΔᐃⵠᐃᐃⲆ, ΔⲆ.ᐃⵠᐃⵠⲆᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(ⲆⲆⲆⲆⲆ, undefined, ⵠⵠΔⵠ.ᐃᐃⲆⵠᐃᐃΔ)
		}), 107.5, 151, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ᐃⵠⲆⵠⵠⵠᐃ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(207, 66, "", [ΔⲆ.ⲆΔΔⵠⵠΔᐃ, ΔⲆ.ΔⲆⵠⲆΔᐃᐃ, ΔⲆ.ⲆⵠⵠⲆⵠΔᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(ⵠΔᐃᐃⵠ, undefined, ⵠⵠΔⵠ.ᐃⵠⲆⵠⵠⵠᐃ)
		}), 190.5, 151, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ᐃᐃⵠⲆⵠⵠⲆ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(144, 66, "", [ΔⲆ.ⲆΔᐃᐃΔᐃⲆ, ΔⲆ.ⲆΔΔⲆⲆⲆΔ, ΔⲆ.ⲆᐃΔᐃΔΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(ⵠⵠΔⵠ.ᐃᐃⵠⲆⵠⵠⲆ)
		}), 103.5, 110, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ΔᐃⲆⵠΔΔⵠ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(124, 66, "", [ΔⲆ.ⲆᐃᐃⵠᐃⲆΔ, ΔⲆ.ᐃΔⵠΔΔᐃᐃ, ΔⲆ.ⵠΔᐃΔᐃⲆᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(ⵠⵠΔⵠ.ΔᐃⲆⵠΔΔⵠ)
		}), 177.5, 110, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ⲆΔⲆⲆᐃΔΔ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(104, 66, "", [ΔⲆ.ⲆᐃΔΔΔⲆᐃ, ΔⲆ.ⲆⲆⲆΔⵠⵠⵠ, ΔⲆ.ᐃΔᐃᐃᐃⵠΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(ⵠⵠΔⵠ.ⲆΔⲆⲆᐃΔΔ)
		}), 242, 110, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ⵠⵠⵠᐃᐃΔⲆ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(46, 51, "", [ΔⲆ.ΔⲆᐃⵠΔΔⲆ, ΔⲆ.ΔΔⵠⵠⲆᐃΔ, ΔⲆ.ΔᐃΔⲆᐃᐃⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(undefined, undefined, undefined, ⵠⵠΔⵠ.ⵠⵠⵠᐃᐃΔⲆ)
		}), -185, 528, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ⲆⵠⵠΔⵠᐃᐃ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(46, 51, "", [ΔⲆ.ⲆᐃᐃΔⲆᐃΔ, ΔⲆ.ᐃⵠⵠᐃⵠΔⲆ, ΔⲆ.ⵠΔΔⲆⲆⵠⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(undefined, undefined, undefined, ⵠⵠΔⵠ.ⲆⵠⵠΔⵠᐃᐃ)
		}), -149, 528, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ⲆⵠᐃⲆⵠⵠᐃ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(46, 51, "", [ΔⲆ.ⲆⲆⲆⵠᐃⵠΔ, ΔⲆ.ⲆⵠⵠⲆⲆΔⵠ, ΔⲆ.ⲆΔⲆⲆⵠΔⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(ⲆⲆΔᐃⵠ, ΔⵠⲆᐃᐃ, ⵠⵠⵠⲆⵠ, ⵠⵠΔⵠ.ⲆⵠᐃⲆⵠⵠᐃ)
		}), -113, 528, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ⲆⵠⲆᐃⲆᐃⵠ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(46, 51, "", [ΔⲆ.ⲆⲆΔⲆⲆᐃⵠ, ΔⲆ.ⵠΔⲆⲆΔⵠⲆ, ΔⲆ.ΔⲆΔⵠⲆᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(undefined, undefined, ⲆΔⲆⵠⲆ, ⵠⵠΔⵠ.ⲆⵠⲆᐃⲆᐃⵠ)
		}), -77, 528, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ⵠᐃⲆⲆᐃⵠᐃ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(46, 51, "", [ΔⲆ.ᐃⵠⲆᐃⵠⲆᐃ, ΔⲆ.ΔᐃΔᐃΔⲆΔ, ΔⲆ.ⲆᐃⲆᐃᐃΔⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(undefined, undefined, undefined, ⵠⵠΔⵠ.ⵠᐃⲆⲆᐃⵠᐃ)
		}), -41, 528, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ΔᐃΔᐃⲆᐃⵠ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(46, 51, "", [ΔⲆ.ΔⲆⲆΔΔᐃΔ, ΔⲆ.ⲆΔⵠΔᐃΔᐃ, ΔⲆ.ᐃⵠⵠⲆⲆΔⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(undefined, ΔⵠⲆᐃᐃ, ⵠⲆᐃᐃⲆ, ⵠⵠΔⵠ.ΔᐃΔᐃⲆᐃⵠ)
		}), -ᐃΔⵠΔᐃ, 528, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(232, 352, "", [ΔⲆ.ⲆᐃⵠΔⲆΔΔ, ΔⲆ.ⵠᐃΔΔⲆⲆᐃ, ΔⲆ.ⲆⵠⵠΔΔΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⵠΔᐃⲆⲆⵠ(300)
		}), -330, 135, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆΔΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(232, 352, "", [ΔⲆ.ⲆᐃⲆⲆΔⲆⵠ, ΔⲆ.ΔᐃΔΔⲆᐃᐃ, ΔⲆ.ⵠⵠⵠΔⵠΔᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⵠΔᐃⲆⲆⵠ(600)
		}), -195, 135, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆΔΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(243, 374, "", [ΔⲆ.ᐃⲆᐃΔᐃⵠΔ, ΔⲆ.ᐃⵠΔᐃΔⲆΔ, ΔⲆ.ΔⲆᐃΔᐃⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⵠΔᐃⲆⲆⵠ(2600)
		}), -60, 130, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆΔΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(232, 352, "", [ΔⲆ.ⵠΔⲆᐃⲆᐃⵠ, ΔⲆ.ᐃᐃΔᐃⵠᐃⵠ, ΔⲆ.ΔⵠΔⵠⲆⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⵠΔᐃⲆⲆⵠ(7e3)
		}), 78, 135, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆΔΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(243, 374, "", [ΔⲆ.ΔᐃᐃⵠⵠΔᐃ, ΔⲆ.ⵠᐃᐃⲆⵠⵠΔ, ΔⲆ.ⵠᐃⵠΔΔᐃⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⵠΔᐃⲆⲆⵠ(2e4)
		}), 213, 130, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆΔΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(58, 64, "", [ΔⲆ.ⵠⵠᐃᐃΔⵠⵠ, ΔⲆ.ⲆΔⵠⲆⵠΔⵠ, ΔⲆ.ᐃᐃⵠΔⲆΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔᐃΔᐃⲆ)
		}), 300, 88, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆΔΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(323, 112, "", [ΔⲆ.ⵠⲆⵠⲆⵠᐃⵠ, ΔⲆ.ⵠᐃⵠᐃⵠᐃᐃ, ΔⲆ.ᐃᐃⲆᐃΔⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⲆⲆⵠⲆⵠ);
			ΔΔⲆⲆΔΔᐃᐃⲆ.ᐃᐃΔⲆᐃ()
		}), -315, 185, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(323, 112, "", [ΔⲆ.ΔⲆⵠΔΔⵠⲆ, ΔⲆ.ᐃᐃΔⲆᐃᐃⲆ, ΔⲆ.ΔⲆⲆᐃᐃⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⵠⵠΔΔⵠ);
			ΔΔΔᐃΔᐃⵠⵠΔ.ᐃᐃΔⲆᐃ()
		}), -315, 321, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(323, 112, "", [ΔⲆ.ⵠⲆⲆᐃᐃΔᐃ, ΔⲆ.ᐃⲆⵠΔΔⲆⵠ, ΔⲆ.ᐃᐃΔⵠᐃᐃⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ᐃⲆΔⲆᐃ);
			ⵠⲆΔΔⲆⵠΔᐃΔ.ᐃᐃΔⲆᐃ()
		}), 153, 185, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(323, 112, "", [ΔⲆ.ᐃΔⵠΔⵠⲆᐃ, ΔⲆ.ⲆΔΔⲆΔⲆⵠ, ΔⲆ.ΔᐃⲆᐃᐃΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔΔⲆⵠⲆ);
			ⵠΔΔᐃΔⲆᐃᐃⲆ.ᐃᐃΔⲆᐃ()
		}), 153, 321, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(323, 112, "", [ΔⲆ.ΔⲆⲆⵠⲆΔΔ, ΔⲆ.ⲆᐃⵠⵠⵠⲆᐃ, ΔⲆ.ⵠⵠⲆⲆⲆⲆᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⲆΔᐃⲆⲆ);
			ⵠᐃᐃⵠΔᐃΔΔΔ.ᐃᐃΔⲆᐃ()
		}), 153, 463, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(323, 112, "", [ΔⲆ.ⵠᐃⵠΔΔⵠᐃ, ΔⲆ.ΔⲆⲆᐃᐃⵠⲆ, ΔⲆ.ᐃⲆᐃⲆᐃᐃⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔⵠⲆΔΔ);
			ᐃᐃΔⲆᐃⲆᐃⲆⵠ.ᐃᐃΔⲆᐃ()
		}), -315, 463, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠⵠΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(327, 117, "", [ΔⲆ.ΔⲆΔᐃΔΔΔ, ΔⲆ.ᐃⵠⲆⵠⵠᐃΔ, ΔⲆ.ΔⵠⵠᐃᐃᐃⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔΔᐃⲆᐃⵠⲆ)
		}), 155, 70, ᐃᐃⲆᐃ, ⲆᐃⲆΔ);
		this.buttons[ⵠⲆ++].view = ⲆΔⵠⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(130, 129, "", [ΔⲆ.ⵠⵠΔⲆⲆⵠᐃ, ΔⲆ.ΔⲆⵠⲆᐃⲆⲆ, ΔⲆ.ⵠⲆⵠᐃᐃΔⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆᐃᐃ(ⲆⲆΔⲆⵠΔⲆ, ⲆⵠⲆⲆ, Δ[369]);
			ᐃⲆⲆⵠ(ΔᐃΔᐃⲆ)
		}), 10, 40, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆΔⲆⵠΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(130, 129, "", [ΔⲆ.ⵠⵠΔⲆⲆⵠᐃ, ΔⲆ.ΔⲆⵠⲆᐃⲆⲆ, ΔⲆ.ⵠⲆⵠᐃᐃΔⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆᐃᐃ(ᐃΔⲆΔⵠⲆᐃ, ⲆⵠⲆⲆ, Δ[369]);
			ᐃⲆⲆⵠ(ΔᐃΔᐃⲆ)
		}), 10, 40, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⲆΔⵠⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔᐃΔᐃⲆ)
		}), 200, 140, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠΔᐃΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(524, 110, "", [ΔⲆ.ⵠΔⵠᐃⲆⵠᐃ, ΔⲆ.ᐃΔΔᐃΔᐃⵠ, ΔⲆ.ⲆⲆΔⲆᐃⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⵠⲆⲆⵠᐃ("Atlanta")
		}), -265, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠΔᐃΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(523, 110, "", [ΔⲆ.ᐃⵠΔⵠⵠⵠⵠ, ΔⲆ.ΔᐃΔᐃⵠⵠΔ, ΔⲆ.ⵠᐃⵠⵠΔΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⵠⲆⲆⵠᐃ("LosAngeles")
		}), 5, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠΔᐃΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(344, 110, "", [ΔⲆ.ⲆΔΔᐃⲆΔⵠ, ΔⲆ.ΔᐃⲆΔⲆΔᐃ, ΔⲆ.ⵠⵠᐃᐃⲆᐃΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⵠⲆⲆⵠᐃ("Frankfurt")
		}), -265, 365, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠΔᐃΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(344, 110, "", [ΔⲆ.ⲆᐃᐃᐃᐃΔⵠ, ΔⲆ.ΔⵠΔᐃⲆⵠⲆ, ΔⲆ.ⵠⲆⲆᐃⲆᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⵠⲆⲆⵠᐃ("Osaka")
		}), ⵠⲆΔᐃΔ, 365, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠΔᐃΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(344, 110, "", [ΔⲆ.ⲆⵠⲆⵠΔΔⲆ, ΔⲆ.ᐃⲆⵠΔⲆⲆⵠ, ΔⲆ.ⵠΔⵠᐃⵠΔⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⵠⲆⲆⵠᐃ("Sydney")
		}), -86, 365, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠΔᐃΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⵠΔᐃΔⲆ)
		}), 224, 140, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃᐃⲆᐃΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(230, 352, "", [ΔⲆ.Ⲇⵠⵠⵠⵠᐃⵠ, ΔⲆ.ⲆⵠΔⲆⵠᐃΔ, ΔⲆ.ⲆⵠⵠᐃΔΔΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⵠΔᐃⲆⲆⵠ(350)
		}), -280, 240, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃᐃⲆᐃΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(230, 352, "", [ΔⲆ.ΔΔⲆⵠⲆⵠΔ, ΔⲆ.ⲆᐃᐃΔᐃΔΔ, ΔⲆ.ΔᐃᐃⵠⲆⵠⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⵠΔᐃⲆⲆⵠ(700)
		}), -130, 240, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃᐃⲆᐃΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(230, 352, "", [ΔⲆ.ⵠⲆΔⲆⲆⲆⵠ, ΔⲆ.ᐃΔⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔⵠᐃⲆᐃⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⵠΔᐃⲆⲆⵠ(1400)
		}), ⲆᐃⲆⵠᐃᐃⵠ, 240, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃᐃⲆᐃΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(230, 352, "", [ΔⲆ.ⵠⲆΔⲆᐃᐃⵠ, ΔⲆ.ᐃⲆΔⲆⲆⵠΔ, ΔⲆ.ΔⵠᐃⵠΔⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⵠΔᐃⲆⲆⵠ(3e3)
		}), 170, 240, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃᐃⲆᐃΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(105, 119, "", [ΔⲆ.ⵠⲆⲆⵠᐃⲆⵠ, ΔⲆ.ᐃᐃΔⵠⵠⵠⲆ, ΔⲆ.ΔᐃⵠΔⲆᐃΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			const ⲆᐃᐃᐃΔ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[45]).value.split(Δ[186]);
			const ⲆⲆⲆⲆΔ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[310]][ᐃⲆᐃᐃᐃᐃⵠ[2]]("textarea");
			ⲆⲆⲆⲆΔ.value = ⲆⲆΔⵠⲆⵠΔ + "?server=" + ⲆᐃᐃᐃΔ[Δᐃᐃ] + Δ[242] + ⲆᐃᐃᐃΔ[ⵠΔΔᐃ];
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[310]][ᐃⲆᐃᐃᐃᐃⵠ[30]][ᐃⲆᐃᐃᐃᐃⵠ[236]](ⲆⲆⲆⲆΔ);
			ⲆⲆⲆⲆΔ.select();
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[310]][ᐃⲆᐃᐃᐃᐃⵠ[136]]("copy");
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[310]][ᐃⲆᐃᐃᐃᐃⵠ[30]][ᐃⲆᐃᐃᐃᐃⵠ[273]](ⲆⲆⲆⲆΔ)
		}), 105, 310, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⵠΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(105, 119, "", [ΔⲆ.ⲆⲆⲆⵠⲆΔᐃ, ΔⲆ.ⵠⵠΔᐃᐃΔⵠ, ΔⲆ.ⲆΔᐃⲆⵠΔᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ΔᐃⲆⲆⵠΔΔᐃⵠ()
		}), 235, 310, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⵠΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(105, 119, "", [ΔⲆ.ⲆⲆⵠΔⵠΔᐃ, ΔⲆ.ⲆΔᐃᐃⵠᐃⲆ, ΔⲆ.ΔⵠΔⵠⵠⲆᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⵠᐃⵠΔΔⵠᐃᐃⲆ()
		}), 170, 310, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⵠΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(204, 115, "", [ΔⲆ.ⵠΔⲆΔΔᐃᐃ, ΔⲆ.ᐃΔΔⲆⲆⵠⵠ, ΔⲆ.ᐃᐃᐃⲆᐃᐃΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]("./commands.html", Δ[363])
		}), -265, 490, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⵠΔⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(145, 69, "", [ΔⲆ.ⵠⵠⵠⲆΔⲆⲆ, ΔⲆ.ᐃⵠⲆⵠⵠΔΔ, ΔⲆ.ⵠⵠΔⵠⵠⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⵠⲆΔΔⵠᐃⲆ)
		}), -210, 170, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔᐃΔᐃⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(145, 69, "", [ΔⲆ.ⲆⲆⵠⲆⵠⵠΔ, ΔⲆ.ⲆⵠᐃᐃΔⲆⵠ, ΔⲆ.ᐃⲆᐃᐃᐃⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⲆⲆⵠⲆΔΔΔ)
		}), 70, 170, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔᐃΔᐃⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(145, 69, "", [ΔⲆ.ⲆᐃⲆᐃᐃⲆᐃ, ΔⲆ.ΔᐃᐃⵠΔΔᐃ, ΔⲆ.ⵠⲆΔⵠⲆⵠⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⵠⵠᐃⲆΔⵠⵠ)
		}), 70, 204, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔᐃΔᐃⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(145, 69, "", [ΔⲆ.ⵠᐃΔΔⵠΔΔ, ΔⲆ.ΔⲆⵠΔᐃⵠⲆ, ΔⲆ.ⵠⲆΔⵠⵠΔᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ᐃΔΔΔⵠⲆᐃ)
		}), -210, 204, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔᐃΔᐃⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(145, 69, "", [ΔⲆ.ⵠᐃΔΔⵠΔΔ, ΔⲆ.ΔⲆⵠΔᐃⵠⲆ, ΔⲆ.ⵠⲆΔⵠⵠΔᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ᐃⲆⲆᐃⲆΔΔ)
		}), 70, 238, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔᐃΔᐃⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(145, 69, "", [ΔⲆ.ⵠᐃΔΔⵠΔΔ, ΔⲆ.ΔⲆⵠΔᐃⵠⲆ, ΔⲆ.ⵠⲆΔⵠⵠΔᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆᐃ.ΔᐃΔᐃᐃ() ? ΔΔᐃⲆⵠᐃᐃ(0, 300) : ᐃⲆⲆⵠ(ΔΔΔⲆⵠ)
		}), 307, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔᐃΔᐃⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(145, 69, "", [ΔⲆ.ⲆᐃⲆΔⲆᐃⲆ, ΔⲆ.ᐃᐃⵠⲆΔⲆⲆ, ΔⲆ.ᐃⵠⲆⲆⲆΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ᐃⵠΔΔᐃⵠⵠ)
		}), -210, 238, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔᐃΔᐃⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(145, 69, "", [ΔⲆ.ⲆᐃⲆΔⲆᐃⲆ, ΔⲆ.ᐃᐃⵠⲆΔⲆⲆ, ΔⲆ.ᐃⵠⲆⲆⲆΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			if (ⲆⲆᐃ.ΔᐃΔᐃᐃ()) ΔΔᐃⲆⵠᐃᐃ(1, 600);
			else ᐃⲆⲆⵠ(ΔΔΔⲆⵠ)
		}), 307, 239, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔᐃΔᐃⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(192, 101, "", [ΔⲆ.ⵠⲆᐃⲆⲆᐃΔ, ΔⲆ.ΔⲆⲆⵠᐃⵠⵠ, ΔⲆ.ᐃⵠᐃⵠΔⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃᐃᐃΔⵠᐃᐃ()
		}), -ᐃⲆᐃᐃΔⵠᐃ, 250, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔⲆⵠΔⵠΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(192, 104, "", [ΔⲆ.ⲆᐃⲆᐃΔⵠⵠ, ΔⲆ.ⲆⲆⵠΔᐃΔᐃ, ΔⲆ.ᐃᐃⵠⲆⵠⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃᐃᐃΔⵠᐃᐃ()
		}), -ⵠᐃⵠⲆⲆ, 239, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠΔΔⵠⵠᐃΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(192, 101, "", [ΔⲆ.ⲆⲆᐃⵠⵠΔⵠ, ΔⲆ.ᐃΔᐃᐃᐃΔᐃ, ΔⲆ.ⲆⲆΔᐃᐃⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔⲆⲆⵠⵠ)
		}), 10, 250, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔⲆⵠΔⵠΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(192, 104, "", [ΔⲆ.ⲆⲆᐃⲆΔⵠᐃ, ΔⲆ.ⲆⵠᐃΔΔΔⲆ, ΔⲆ.ⵠΔᐃᐃⲆⵠΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔⲆⲆⵠⵠ)
		}), ᐃⵠᐃᐃᐃ, 239, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠΔΔⵠⵠᐃΔ;
		ⲆⵠΔᐃⲆ = [];
		ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ⲆⲆⵠΔΔ] = [ΔⲆ.ΔⲆᐃᐃΔᐃⵠ, ΔⲆ.ⵠⵠⲆΔⵠⲆⲆ, ΔⲆ.ⲆΔΔⲆΔⵠⵠ];
		ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ᐃⲆΔⲆ] = [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ];
		ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ᐃⵠᐃᐃ] = [ΔⲆ.ⲆᐃⵠΔⵠᐃᐃ, ΔⲆ.ΔΔⵠΔΔΔⲆ, ΔⲆ.ⵠΔᐃᐃⵠᐃΔ];
		ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ᐃⵠⵠᐃ] = [ΔⲆ.ᐃΔΔⲆⵠΔⵠ, ΔⲆ.ⲆᐃΔᐃⵠᐃΔ, ΔⲆ.ᐃⲆᐃⵠᐃΔΔ];
		ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ⵠⲆᐃᐃ] = [ΔⲆ.ᐃΔⲆⵠᐃΔⵠ, ΔⲆ.ⲆⲆΔⵠⵠΔΔ, ΔⲆ.ΔⵠⲆⵠⵠΔⲆ];
		ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ᐃΔⲆᐃ] = [ΔⲆ.ⵠⵠΔΔⵠⵠⲆ, ΔⲆ.ΔⵠΔⵠΔᐃⵠ, ΔⲆ.ⵠⵠᐃⵠᐃΔᐃ];
		ⲆⵠΔᐃⲆ[ⵠⲆⲆ.Ⲇⵠⵠᐃ] = [ΔⲆ.ⵠΔⲆⵠᐃᐃⵠ, ΔⲆ.ⵠᐃΔⲆΔᐃᐃ, ΔⲆ.ⵠⲆⵠⲆⲆⵠΔ];
		ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ΔⲆᐃⵠᐃ] = [ΔⲆ.ⵠᐃΔΔⵠⲆΔ, ΔⲆ.ΔⵠΔΔΔⵠΔ, ΔⲆ.ⵠΔⲆᐃⵠⲆᐃ];
		ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ] = [ΔⲆ.ΔΔⲆⲆΔΔⲆ, ΔⲆ.ᐃⵠΔⲆⲆᐃΔ, ΔⲆ.ᐃⲆΔᐃⵠΔΔ];
		ⵠᐃⵠⵠᐃⲆⵠ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⵠᐃΔᐃⲆ, -29, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -29, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ΔΔᐃⵠΔ, -29, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 65, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⲆΔⲆⵠⲆ, 65, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 65, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 159, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⵠᐃΔᐃⲆ, 159, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 159, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(39, 122, "", [ΔⲆ.ᐃⵠⵠΔᐃΔΔ, ΔⲆ.ⵠΔᐃᐃΔΔⲆ, ΔⲆ.ΔΔᐃⲆⲆⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -61, 315, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(39, 122, "", [ΔⲆ.ᐃΔΔⵠⵠᐃⵠ, ΔⲆ.ᐃᐃᐃⲆⲆᐃΔ, ΔⲆ.ⵠΔⵠⲆⵠⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⵠⲆᐃᐃⲆ, 260, 315, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⵠⵠⵠΔⵠ)
		}), -320, 470, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆⵠ;
		ⵠᐃⵠᐃΔⲆᐃΔⲆ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⵠᐃΔⵠΔ, -29, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠΔΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -29, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠΔΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ᐃⲆᐃⲆⵠ, -29, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠΔΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⲆᐃⵠΔⵠ, 65, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠΔΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 65, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠΔΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 65, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠΔΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 159, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠΔΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⵠΔᐃᐃⵠ, 159, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠΔΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 159, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠΔΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(39, 122, "", [ΔⲆ.ᐃⵠⵠΔᐃΔΔ, ΔⲆ.ⵠΔᐃᐃΔΔⲆ, ΔⲆ.ΔΔᐃⲆⲆⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -61, 315, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠΔΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(39, 122, "", [ΔⲆ.ᐃΔΔⵠⵠᐃⵠ, ΔⲆ.ᐃᐃᐃⲆⲆᐃΔ, ΔⲆ.ⵠΔⵠⲆⵠⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ΔΔᐃⵠΔ, 260, 315, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠΔΔⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⵠⵠⵠΔⵠ)
		}), -320, 470, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠΔΔⵠ;
		ⲆⵠΔⵠΔⵠⲆΔⵠ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ᐃⵠⲆⵠⲆ, -29, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⵠⲆΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ᐃⲆᐃⲆⵠ, -29, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⵠⲆΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -29, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⵠⲆΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 65, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⵠⲆΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ΔΔᐃⵠΔ, 65, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⵠⲆΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 65, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⵠⲆΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 159, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⵠⲆΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ΔⵠΔⲆⲆ, 159, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⵠⲆΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 159, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⵠⲆΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(39, 122, "", [ΔⲆ.ᐃⵠⵠΔᐃΔΔ, ΔⲆ.ⵠΔᐃᐃΔΔⲆ, ΔⲆ.ΔΔᐃⲆⲆⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⲆᐃⵠΔⵠ, -61, 315, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⵠⲆΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(39, 122, "", [ΔⲆ.ᐃΔΔⵠⵠᐃⵠ, ΔⲆ.ᐃᐃᐃⲆⲆᐃΔ, ΔⲆ.ⵠΔⵠⲆⵠⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 260, 315, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⵠⲆΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⵠⵠⵠΔⵠ)
		}), -320, 470, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⵠⲆΔΔ;
		ⵠᐃᐃᐃⲆᐃⲆⲆΔ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -29, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆΔⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -29, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆΔⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -29, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆΔⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⵠᐃΔⵠΔ, 65, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆΔⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 65, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆΔⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ΔᐃᐃⵠⲆ, 65, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆΔⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ᐃⲆᐃΔⵠ, 159, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆΔⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 159, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆΔⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 159, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆΔⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(39, 122, "", [ΔⲆ.ᐃⵠⵠΔᐃΔΔ, ΔⲆ.ⵠΔᐃᐃΔΔⲆ, ΔⲆ.ΔΔᐃⲆⲆⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ᐃⵠⲆⵠⲆ, -61, 315, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆΔⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(39, 122, "", [ΔⲆ.ᐃΔΔⵠⵠᐃⵠ, ΔⲆ.ᐃᐃᐃⲆⲆᐃΔ, ΔⲆ.ⵠΔⵠⲆⵠⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ΔᐃᐃⵠⲆ, 260, 315, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆΔⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⵠⵠⵠΔⵠ)
		}), -320, 470, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆΔⲆᐃ;
		ⵠⲆᐃⲆⵠᐃⲆⲆΔ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ᐃⵠⲆⵠⲆ, -29, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⲆⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⵠⲆᐃᐃⲆ, -29, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⲆⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -29, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⲆⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 65, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⲆⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 65, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⲆⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 65, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⲆⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ΔΔᐃⵠΔ, 159, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⲆⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⵠᐃΔᐃⲆ, 159, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⲆⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⵠΔᐃᐃⵠ, 159, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⲆⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(39, 122, "", [ΔⲆ.ᐃⵠⵠΔᐃΔΔ, ΔⲆ.ⵠΔᐃᐃΔΔⲆ, ΔⲆ.ΔΔᐃⲆⲆⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -61, 315, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⲆⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(39, 122, "", [ΔⲆ.ᐃΔΔⵠⵠᐃⵠ, ΔⲆ.ᐃᐃᐃⲆⲆᐃΔ, ΔⲆ.ⵠΔⵠⲆⵠⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⵠⵠⵠⲆⵠ, 260, 315, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⲆⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⵠⵠⵠΔⵠ)
		}), -320, 470, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔΔⲆⵠⲆ;
		ⵠⵠⲆⵠⵠᐃᐃⵠᐃ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -29, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔᐃⲆⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⵠΔᐃᐃⵠ, -29, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔᐃⲆⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -29, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔᐃⲆⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 65, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔᐃⲆⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ᐃⲆᐃⲆⵠ, 65, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔᐃⲆⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⵠΔᐃᐃⵠ, 65, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔᐃⲆⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 159, 205, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔᐃⲆⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, ⵠᐃΔᐃⲆ, 159, 300, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔᐃⲆⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(178, 182, "", [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 159, 395, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔᐃⲆⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(39, 122, "", [ΔⲆ.ᐃⵠⵠΔᐃΔΔ, ΔⲆ.ⵠΔᐃᐃΔΔⲆ, ΔⲆ.ΔΔᐃⲆⲆⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, -61, 315, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔᐃⲆⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(39, 122, "", [ΔⲆ.ᐃΔΔⵠⵠᐃⵠ, ΔⲆ.ᐃᐃᐃⲆⲆᐃΔ, ΔⲆ.ⵠΔⵠⲆⵠⲆⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, undefined, 260, 315, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔᐃⲆⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ⵠⵠⵠΔⵠ)
		}), -320, 470, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆΔᐃⲆⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(260, 260, "", [ΔⲆ.ᐃᐃⲆⵠⲆⲆⵠ, ΔⲆ.ⲆΔⲆⲆΔⵠⵠ, ΔⲆ.ΔΔᐃⵠⵠΔΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			if (ⲆⲆᐃ.ΔᐃΔᐃᐃ()) ⲆΔⲆⵠᐃⵠᐃ(ᐃᐃΔⵠ, 50);
			else ᐃⲆⲆⵠ(ΔΔΔⲆⵠ)
		}), -260 / ᐃᐃⲆⵠ, 150 + 448 / ⵠᐃΔΔΔ - 260 / 4, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆΔΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔᐃΔᐃⲆ)
		}), 309, 180, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⲆⲆⵠⲆΔΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(260, 260, "", [ΔⲆ.ⵠᐃᐃⵠΔΔⲆ, ΔⲆ.ΔᐃΔⵠⲆⵠⲆ, ΔⲆ.ⵠⲆⲆΔΔᐃⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			if (ⲆⲆᐃ.ΔᐃΔᐃᐃ()) ⲆΔⲆⵠᐃⵠᐃ(ⵠⵠΔΔ, 100);
			else ᐃⲆⲆⵠ(ΔΔΔⲆⵠ)
		}), -260 / ⵠⲆⲆΔΔ, 150 + 448 / ΔᐃΔⲆΔ - 260 / ᐃᐃᐃΔⵠ, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⲆΔΔⵠᐃⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔᐃΔᐃⲆ)
		}), 309, 180, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⲆΔΔⵠᐃⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(260, 260, "", [ΔⲆ.ⲆᐃᐃΔⵠⵠΔ, ΔⲆ.ⲆΔⵠⵠΔᐃⲆ, ΔⲆ.ᐃΔΔⲆΔⵠΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆᐃ.ΔᐃΔᐃᐃ() ? ⲆΔⲆⵠᐃⵠᐃ(4, 150) : ᐃⲆⲆⵠ(ΔΔΔⲆⵠ)
		}), -260 / 4, 197, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠᐃⲆΔⵠⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔᐃΔᐃⲆ)
		}), 309, 180, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ⵠⵠᐃⲆΔⵠⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(260, 260, "", [ΔⲆ.ⲆΔⲆⲆᐃᐃⲆ, ΔⲆ.ⵠⵠΔⲆⵠᐃⵠ, ΔⲆ.ΔᐃⲆⲆⵠΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆᐃ.ΔᐃΔᐃᐃ() ? ⲆΔⲆⵠᐃⵠᐃ(Δᐃᐃ, 300) : ᐃⲆⲆⵠ(ΔΔΔⲆⵠ)
		}), -260 / ⲆⵠⵠⲆ, 150 + 448 / ⲆⵠⵠⲆ - 65, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔΔΔⵠⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔᐃΔᐃⲆ)
		}), 309, 180, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔΔΔⵠⲆᐃ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(260, 260, "", [ΔⲆ.ᐃΔⵠⲆⵠᐃⵠ, ΔⲆ.ᐃΔΔⲆᐃΔⲆ, ΔⲆ.ᐃᐃⵠⲆᐃᐃⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆᐃ.ΔᐃΔᐃᐃ() ? ⲆΔⲆⵠᐃⵠᐃ(Δᐃᐃⵠ, 600) : ᐃⲆⲆⵠ(ΔΔΔⲆⵠ)
		}), -260 / ⵠᐃΔΔΔ, 150 + 448 / ⲆⵠⲆᐃ - 260 / ⲆⵠⵠⲆ, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⵠΔΔᐃⵠⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔᐃΔᐃⲆ)
		}), 309, 180, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⵠΔΔᐃⵠⵠ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(260, 260, "", [ΔⲆ.ⲆΔⲆⲆᐃᐃⲆ, ΔⲆ.ⵠⵠΔⲆⵠᐃⵠ, ΔⲆ.ΔᐃⲆⲆⵠΔⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆᐃ.ΔᐃΔᐃᐃ() ? ⲆΔⲆⵠᐃⵠᐃ(5, 300) : ᐃⲆⲆⵠ(ΔΔΔⲆⵠ)
		}), -260 / ⲆΔⲆᐃΔ, 150 + 448 / ΔᐃΔΔ - 260 / 4, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆⲆᐃⲆΔΔ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(115, 73, "", [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ᐃⲆⲆⵠ(ΔᐃΔᐃⲆ)
		}), 309, 180, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃⲆⲆᐃⲆΔΔ;
		var ⵠⲆⲆΔᐃᐃΔᐃΔ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(46, 51, "", [ΔⲆ.ᐃᐃⲆⲆΔⵠⵠ, ΔⲆ.ᐃΔΔᐃⵠΔⵠ, ΔⲆ.ΔⵠⲆΔᐃΔⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆΔⲆΔΔ(ⲆΔⲆⵠⲆ, ΔΔⲆⲆ)
		}), -305, 132, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		var ⵠⲆⵠᐃⵠⲆⵠᐃⵠ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(46, 51, "", [ΔⲆ.ᐃᐃΔⲆⵠΔⵠ, ΔⲆ.ⲆΔⵠΔᐃⵠⵠ, ΔⲆ.ΔⵠⵠⵠⵠΔΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆΔⲆΔΔ(undefined, ΔⵠⲆ)
		}), -273, 132, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		var ⲆΔⲆΔⲆᐃᐃⵠᐃ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(46, 51, "", [ΔⲆ.ⵠⲆᐃⵠⵠᐃᐃ, ΔⲆ.ΔⲆΔⵠΔᐃⵠ, ΔⲆ.ⲆⵠΔΔΔⲆΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆΔⲆΔΔ(ⵠᐃΔⵠΔ, 2)
		}), -241, 132, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		var ΔⵠΔⵠⲆⲆᐃΔΔ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(46, 51, "", [ΔⲆ.ΔᐃⲆᐃⵠᐃᐃ, ΔⲆ.ⲆΔⵠⲆⲆᐃⲆ, ΔⲆ.ⲆⲆⲆΔᐃⵠⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆΔⲆΔΔ(ⵠⵠⵠⲆⵠ, 3)
		}), -305, 165, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		var ᐃⲆⲆⵠⲆᐃⵠⵠᐃ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(46, 51, "", [ΔⲆ.ⵠᐃⵠⲆⲆΔᐃ, ΔⲆ.ⵠΔⲆⲆΔᐃΔ, ΔⲆ.ΔⵠᐃⲆᐃᐃⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆΔⲆΔΔ(Ⲇᐃⵠⵠⵠ, ⵠⲆⲆΔΔ)
		}), -273, 165, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		var ΔⲆᐃⵠᐃΔⵠⲆᐃ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(46, 51, "", [ΔⲆ.ⲆⵠⵠΔⲆⵠⵠ, ΔⲆ.ΔⵠⲆⲆⵠⲆΔ, ΔⲆ.ⵠⲆΔΔΔᐃⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆΔⲆΔΔ(undefined, 5)
		}), -241, 165, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		var ᐃΔΔᐃⲆΔⵠⵠⲆ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(460, 73, "", [ΔⲆ.ΔⵠᐃⵠⵠᐃΔ, ΔⲆ.ᐃᐃⵠᐃⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆⲆⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆΔⲆΔΔ(-1)
		}), -180, 170, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		var ⵠⵠⲆⲆᐃᐃⵠⲆⲆ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(222, 68, "", [ΔⲆ.ᐃᐃⲆⲆⲆΔⵠ, ΔⲆ.ΔΔᐃⵠᐃᐃΔ, ΔⲆ.ⵠⲆᐃᐃᐃⵠⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆΔⲆΔΔ(ⵠΔᐃⲆ.ᐃᐃΔⲆⲆ)
		}), -180, 215, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		var ᐃΔⵠΔⲆΔⲆⵠᐃ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(222, 68, "", [ΔⲆ.ⵠᐃᐃᐃᐃⲆⵠ, ΔⲆ.ΔᐃⲆⵠⲆⲆᐃ, ΔⲆ.ⲆΔⲆΔⲆᐃⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆΔⲆΔΔ(ⵠΔᐃⲆ.ⵠΔΔⲆⵠ)
		}), -180, 260, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		var ΔᐃᐃΔⵠᐃⲆᐃΔ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(222, 68, "", [ΔⲆ.ᐃⵠᐃΔⲆⲆⲆ, ΔⲆ.ⲆΔⲆΔⵠΔᐃ, ΔⲆ.ᐃᐃΔᐃⲆᐃΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆΔⲆΔΔ(ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ)
		}), -60, 215, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		var ⵠⲆⵠⵠⵠⵠᐃⵠⲆ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(222, 68, "", [ΔⲆ.Δⵠⵠⵠⵠⵠᐃ, ΔⲆ.ⲆΔΔⵠⲆⵠΔ, ΔⲆ.ΔⵠⵠΔᐃᐃᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆΔⲆΔΔ(ⵠΔᐃⲆ.ΔᐃΔⲆᐃ)
		}), -60, 260, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔⲆⲆⵠⵠ;
		this.Δⵠᐃᐃᐃⵠⵠ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(143, 66, "", [ΔⲆ.ᐃᐃⲆⲆᐃᐃⵠ, ΔⲆ.ᐃΔΔᐃⲆΔᐃ, ΔⲆ.ΔΔΔΔᐃΔᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(ΔᐃᐃⵠⲆ, ⵠⵠΔⵠ.Δⵠᐃᐃᐃⵠⵠ)
		}), -298, 110, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ⲆᐃⵠᐃⵠΔⲆ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(104, 66, "", [ΔⲆ.ᐃᐃⵠΔⵠΔⲆ, ΔⲆ.ΔᐃⵠⵠᐃΔᐃ, ΔⲆ.ᐃΔΔᐃⲆΔⵠ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(undefined, ⵠⵠΔⵠ.ⲆᐃⵠᐃⵠΔⲆ)
		}), -223, 110, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ΔⲆⲆᐃⲆⲆⲆ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(110, 66, "", [ΔⲆ.ΔⵠΔΔⲆⲆᐃ, ΔⲆ.ⵠΔᐃᐃⲆΔⲆ, ΔⲆ.ᐃΔᐃⲆⵠᐃΔ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(ΔᐃᐃⵠⲆ, ⵠⵠΔⵠ.ΔⲆⲆᐃⲆⲆⲆ)
		}), -168, 110, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ⲆᐃᐃᐃⲆⵠΔ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(88, 66, "", [ΔⲆ.ᐃΔⲆⲆᐃⲆΔ, ΔⲆ.ᐃΔⵠⲆⲆⵠⲆ, ΔⲆ.ⲆᐃᐃⲆΔᐃⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(ΔᐃᐃⵠⲆ, ⵠⵠΔⵠ.ⲆᐃᐃᐃⲆⵠΔ)
		}), -110, 110, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.ᐃΔⵠᐃⲆΔᐃ = ⵠⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(88, 66, "", [ΔⲆ.ΔΔᐃⵠΔⵠⲆ, ΔⲆ.ᐃⵠᐃⲆᐃⵠΔ, ΔⲆ.ΔⵠⲆΔᐃᐃⲆ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⲆⲆⲆⵠⲆ(ⵠⲆᐃᐃⲆ, ⵠⵠΔⵠ.ᐃΔⵠᐃⲆΔᐃ)
		}), -63, 110, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ᐃΔⵠᐃⲆ;
		this.buttons[ⵠⲆ] = Ⲇⵠᐃ(86, 44, "", [ΔⲆ.ⲆᐃᐃⲆΔⵠⲆ, ΔⲆ.ΔᐃᐃΔΔᐃⲆ, ΔⲆ.ΔⵠⲆᐃⵠⵠᐃ], ⵠⲆⲆⵠ, ⲆᐃⵠΔ, (function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]("./terms.html", Δ[363])
		}), 349, 290, ⲆⵠᐃⲆ | ⵠᐃⲆⵠ, ⲆⵠⲆⲆ);
		this.buttons[ⵠⲆ++].view = ΔᐃΔᐃⲆ;
		var ΔΔⲆⲆΔΔᐃᐃⲆ = new ᐃᐃⵠΔⲆⲆΔ(ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ, ⵠᐃⵠⵠᐃⲆⵠ, (function(ⲆᐃΔ) {
			ⵠⵠΔⵠ.ⵠⲆΔΔ = ⲆᐃΔ;
			if (ⵠⵠΔⵠ.unlock.ⵠⲆΔΔ[ⲆᐃΔ] === 1) ΔᐃⲆΔ.set("starve_skin", "" + ⲆᐃΔ, {
				expires: 30
			})
		}), this.ⵠⲆΔΔ, this.unlock.ⵠⲆΔΔ);
		var ⵠⲆΔΔⲆⵠΔᐃΔ = new ᐃᐃⵠΔⲆⲆΔ(ᐃᐃⵠⵠ.ⲆⲆⲆⲆ, ⵠᐃᐃᐃⲆᐃⲆⲆΔ, (function(ⲆᐃΔ) {
			ⵠⵠΔⵠ.ΔΔⲆᐃⵠ = ⲆᐃΔ;
			if (ⵠⵠΔⵠ.unlock.ΔΔⲆᐃⵠ[ⲆᐃΔ] === 1) ΔᐃⲆΔ.set("starve_bag", "" + ⲆᐃΔ, {
				expires: 30
			})
		}), this.ΔΔⲆᐃⵠ, this.unlock.ΔΔⲆᐃⵠ);
		var ⵠΔΔᐃΔⲆᐃᐃⲆ = new ᐃᐃⵠΔⲆⲆΔ(ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ, ⵠⲆᐃⲆⵠᐃⲆⲆΔ, (function(ⲆᐃΔ) {
			ⵠⵠΔⵠ.ⲆΔⵠΔΔ = ⲆᐃΔ;
			if (ⵠⵠΔⵠ.unlock.ⲆΔⵠΔΔ[ⲆᐃΔ] === ᐃⵠⵠ) ΔᐃⲆΔ.set("starve_book", "" + ⲆᐃΔ, {
				expires: 30
			})
		}), this.ⲆΔⵠΔΔ, this.unlock.ⲆΔⵠΔΔ);
		var ⵠᐃᐃⵠΔᐃΔΔΔ = new ᐃᐃⵠΔⲆⲆΔ(ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ, ⵠⵠⲆⵠⵠᐃᐃⵠᐃ, (function(ⲆᐃΔ) {
			ⵠⵠΔⵠ.Δᐃⵠⵠᐃ = ⲆᐃΔ;
			if (ⵠⵠΔⵠ.unlock.Δᐃⵠⵠᐃ[ⲆᐃΔ] === 1) ΔᐃⲆΔ.set("starve_dead", "" + ⲆᐃΔ, {
				expires: 30
			})
		}), this.Δᐃⵠⵠᐃ, this.unlock.Δᐃⵠⵠᐃ);
		var ᐃᐃΔⲆᐃⲆᐃⲆⵠ = new ᐃᐃⵠΔⲆⲆΔ(ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ, ⲆⵠΔⵠΔⵠⲆΔⵠ, (function(ⲆᐃΔ) {
			ⵠⵠΔⵠ.ⵠⵠΔⲆⲆ = ⲆᐃΔ;
			if (ⵠⵠΔⵠ.unlock.ⵠⵠΔⲆⲆ[ⲆᐃΔ] === ⵠⵠᐃ) ΔᐃⲆΔ.set("starve_crate", "" + ⲆᐃΔ, {
				expires: 30
			})
		}), this.ⵠⵠΔⲆⲆ, this.unlock.ⵠⵠΔⲆⲆ);
		var ΔΔΔᐃΔᐃⵠⵠΔ = new ᐃᐃⵠΔⲆⲆΔ(ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ, ⵠᐃⵠᐃΔⲆᐃΔⲆ, (function(ⲆᐃΔ) {
			ⵠⵠΔⵠ.ᐃᐃⲆΔⵠ = ⲆᐃΔ;
			if (ⵠⵠΔⵠ.unlock.ᐃᐃⲆΔⵠ[ⲆᐃΔ] === ⵠⵠᐃ) ΔᐃⲆΔ.set("starve_accessory", "" + ⲆᐃΔ, {
				expires: 30
			})
		}), this.ᐃᐃⲆΔⵠ, this.unlock.ᐃᐃⲆΔⵠ);
		this.ᐃΔⵠᐃⵠⲆΔ = function(ᐃⲆΔᐃ) {
			ᐃⵠⵠⲆ.ⵠΔΔⲆ = ᐃⲆⵠⲆⵠᐃᐃ(ⲆⲆᐃ.ⲆⲆ, ᐃⲆΔᐃ);
			for (var Δᐃ = 0; Δᐃ < ⲆⲆᐃ.buttons.length; Δᐃ++) {
				ⲆᐃⲆΔ === ⲆⲆᐃ.buttons[Δᐃ].info.active && ⲆⲆᐃ.buttons[Δᐃ].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ)
			}
		};
		this.ΔΔⵠⵠⵠᐃⲆ = function(ᐃⲆΔᐃ) {
			ᐃⵠⵠⲆ.ⵠΔΔⲆ = ᐃⲆⵠⲆⵠᐃᐃ(ⲆⲆᐃ.ⲆⲆ, ᐃⲆΔᐃ);
			for (var Δᐃ = 0; Δᐃ < ⲆⲆᐃ.buttons.length; Δᐃ++) {
				var ΔⲆⲆᐃ = ⲆⲆᐃ.buttons[Δᐃ];
				if (ΔⲆⲆᐃ.info.active === ⲆᐃⲆΔ) {
					if (ΔⲆⲆᐃ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ)) {
						ΔⲆⲆᐃ.info.callback();
						return
					}
				}
			}
		};
		this.ᐃΔⲆⵠⲆⲆⲆ = ΔⲆᐃⵠΔ;
		this.ΔⵠΔⲆⲆΔⵠ = function(ᐃⲆΔᐃ) {
			ᐃⵠⵠⲆ.ⵠΔΔⲆ = ᐃⲆⵠⲆⵠᐃᐃ(ⲆⲆᐃ.ⲆⲆ, ᐃⲆΔᐃ);
			var ΔΔⵠᐃΔ = false;
			for (var Δᐃ = ⵠⵠΔΔ; ⲆⲆᐃ.buttons.length > Δᐃ; Δᐃ++) {
				ⲆⲆᐃ.buttons[Δᐃ].info.active === ⲆᐃⲆΔ && (ΔΔⵠᐃΔ |= ⲆⲆᐃ.buttons[Δᐃ].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ))
			}
			if (ⲆⲆᐃ.ᐃΔⲆⵠⲆⲆⲆ !== ΔΔⵠᐃΔ) {
				ⲆⲆᐃ.ᐃΔⲆⵠⲆⲆⲆ = ΔΔⵠᐃΔ;
				if (ΔΔⵠᐃΔ) ⲆⲆ.style[Δ[259]] = ⲆⲆᐃ.ⵠᐃᐃΔⲆⵠⲆ;
				else ⲆⲆ.style[Δ[259]] = ⲆⲆᐃ.ᐃⵠⵠⵠᐃΔⲆ
			}
		};
		this.ΔⲆᐃⵠⲆᐃⵠ = function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], this.ᐃΔⵠᐃⵠⲆΔ, ⲆᐃⲆⲆΔ);
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ΔΔⵠⵠⵠᐃⲆ, ΔΔᐃⵠᐃ);
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[557], this.ΔⵠΔⲆⲆΔⵠ, ΔΔᐃⵠᐃ)
		};
		this.ⲆᐃⲆⲆⲆΔⵠ = function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[284]](Δ[380], this.ᐃΔⵠᐃⵠⲆΔ, ⲆⵠΔᐃⵠ);
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[284]](Δ[458], this.ΔΔⵠⵠⵠᐃⲆ, false);
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[284]](Δ[557], this.ΔⵠΔⲆⲆΔⵠ, false)
		}
	}

	function ⲆⲆⵠⵠΔⲆΔᐃⵠ(ⲆⲆ, ᐃ, ⲆⲆⵠΔⲆᐃΔⵠⵠ) {
		this.ⲆⲆ = ⲆⲆ;
		this.ᐃ = ᐃ;
		this.ΔΔⲆⲆⵠⵠᐃ = {
			translate: {
				y: 0,
				x: ᐃΔΔ
			},
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("loading").style,
			"ᐃᐃⵠ": function() {
				this.style.left = this.translate.x + Δ[3];
				this.style.top = Math.floor(this.translate.y) + Δ[3]
			}
		};
		this.ΔΔⲆⲆⵠⵠᐃ.style.position = "absolute";
		this.ΔΔⲆⲆⵠⵠᐃ.style.display = Δ[151];
		this.ΔΔⲆⲆⵠⵠᐃ.ᐃᐃⵠ();
		this.ΔⲆΔⵠⵠ = ⵠΔᐃⵠΔ;
		this.stop = function() {
			this.ΔⲆΔⵠⵠ = ⲆⵠⲆⵠΔ
		};
		this.ⲆⵠᐃⲆΔⵠᐃ = {
			total: ᐃⵠⵠ
		};
		var ⲆⲆᐃ = this;
		var ΔᐃⵠⲆⲆ = function() {};
		var ⲆᐃⵠΔⲆ = 0;
		var ΔΔⲆᐃΔ = 40;
		this.Δᐃⵠᐃᐃ = function() {
			ⲆⲆᐃ.ᐃᐃⵠ();
			ⲆᐃⵠΔⲆ++;
			if (ΔΔⲆᐃΔ == ⲆᐃⵠΔⲆ) {
				ⲆⲆᐃ.stop();
				ΔᐃⵠⲆⲆ();
				return
			}
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]](ⲆⲆᐃ.Δᐃⵠᐃᐃ, 33)
		};
		this.ΔⲆⵠᐃΔ = function(ⲆⲆᐃⲆⲆ) {
			ΔᐃⵠⲆⲆ = ⲆⲆᐃⲆⲆ;
			ⲆⲆᐃ.Δᐃⵠᐃᐃ()
		};
		var ΔⲆⲆΔⵠΔᐃᐃⵠ = (new Date).getTime();

		function ΔΔΔⲆΔⵠᐃ(name) {
			if (name.indexOf("normal-mode") !== -ᐃⵠⵠ || name.indexOf("player0") !== -ⵠⵠⵠΔ) return 1;
			if (name.indexOf("day-bag") !== -1 || name.indexOf("night-bag") !== -ᐃⵠⵠ || name.indexOf("day-book") !== -1 || -1 !== name.indexOf("night-book") || name.indexOf("day-player") !== -ⵠⵠⵠΔ || -1 !== name.indexOf("night-player") || -1 !== name.indexOf("day-accessory") || name.indexOf("night-accessory") !== -ᐃΔⵠΔ || name.indexOf("day-crate") !== -1 || -ᐃⲆⲆ !== name.indexOf("night-crate") || -1 !== name.indexOf("day-skin") || name.indexOf("night-skin") !== -1 || -1 !== name.indexOf("day-river") || -1 !== name.indexOf("night-river") || -1 !== name.indexOf("day-river") || name.indexOf("night-river") !== -1 || name.indexOf("day-rock") !== -1 || name.indexOf("night-rock") !== -ⵠΔΔ || name.indexOf("day-flower") !== -1 || -1 !== name.indexOf("night-flower") || name.indexOf("day-leaf") !== -ⵠⵠⵠΔ || name.indexOf("night-leaf") !== -ⵠΔΔ || -1 !== name.indexOf("day-herb") || name.indexOf("night-herb") !== -ΔⵠⲆ || name.indexOf("day-shell") !== -1 || -ⵠΔΔ !== name.indexOf("night-shell") || -1 !== name.indexOf("day-hand-skin") || name.indexOf("night-hand-skin") !== -1 || name.indexOf("bignight") !== -1 || name.indexOf("bigday") !== -ⲆΔᐃΔ || name.indexOf("bigzday") !== -ⲆΔᐃΔ || -ΔⵠⲆ !== name.indexOf("bigznight") || name.indexOf("tutorial-box") !== -ⵠΔⲆ || -ⵠⵠᐃ !== name.indexOf("tuto-") || -ΔⵠⲆ !== name.indexOf("-leaderboard-") || -ⲆⵠΔⲆ !== name.indexOf("-lead-") || -ⵠⲆⲆⲆ !== name.indexOf("day-lava-") || name.indexOf("night-lava-") !== -Δᐃᐃ || -1 !== name.indexOf("-click.png") || name.indexOf("-in.png") !== -ⲆⵠΔⲆ || -1 !== name.indexOf("-fog") || -1 !== name.indexOf("-lava") || -1 !== name.indexOf("pebblecompo") || -1 !== name.indexOf("avatar-player")) return ⵠⲆᐃ;
			return ⲆΔⲆⵠ
		}
		var ⵠΔᐃⵠΔⵠⵠ = Object.keys(ΔⲆ).length;
		var ΔΔⲆᐃᐃΔⵠᐃⵠ = ⵠΔᐃⵠΔⵠⵠ;
		console.log(undefined, undefined);
		for (var ⵠΔ in ΔⲆ) {
			if (ΔΔΔⲆΔⵠᐃ(ΔⲆ[ⵠΔ]) === ⵠⲆΔⵠ) ⵠΔᐃⵠΔⵠⵠ--
		}
		console.log(Ⲇᐃⵠⵠⵠ, undefined);
		var ΔᐃⵠⵠᐃᐃᐃΔⵠ = function() {
			if (this.ⵠᐃᐃⲆᐃⵠⲆ !== 0) return this.ⵠᐃᐃⲆᐃⵠⲆ;
			this.ⵠᐃᐃⲆᐃⵠⲆ = ΔᐃΔⲆ;
			this.src = this.ⵠᐃᐃᐃΔ;
			return ᐃΔΔ
		};
		var ⵠΔΔⲆᐃⵠᐃ = function(ᐃᐃᐃⵠ) {
			this.ⵠᐃᐃⲆᐃⵠⲆ = ⵠΔΔ
		};
		var ⵠⵠΔᐃⲆⲆΔ = 0;
		var ⵠⲆⵠⵠⲆΔⲆᐃΔ = function() {
			console.log(undefined);
			if (ⵠⵠΔᐃⲆⲆΔ === ⵠΔᐃ) return;
			ⵠⵠΔᐃⲆⲆΔ = 1;
			console.log(undefined);
			ᐃᐃᐃᐃⵠΔⵠ !== ⲆΔⵠⲆⲆᐃΔ && ᐃᐃᐃᐃⵠΔⵠ();
			ⲆΔⵠⲆⲆᐃΔ();
			var ⲆⵠⲆᐃᐃⲆⲆ = ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ("server");
			ⲆⵠⲆᐃᐃⲆⲆ !== null && (ᐃⵠΔΔ.ⲆΔΔⲆᐃⲆᐃ = 1, ᐃⵠΔΔ.ᐃⲆΔⲆⵠ = [{
				nu: ⵠᐃΔ,
				m: 100,
				i: "server" + ⲆⵠⲆᐃᐃⲆⲆ + ".starve.io",
				p: 443,
				a: ⲆⵠⲆᐃᐃⲆⲆ,
				ssl: ⵠΔⲆ
			}]);
			ᐃⵠΔΔ.ᐃⵠΔⲆⵠⲆᐃᐃᐃ();
			setTimeout(ⲆⲆⵠΔⲆᐃΔⵠⵠ, 100)
		};
		var ⵠⲆⵠⲆⲆᐃᐃ = function() {
			let ⵠⲆⵠᐃΔⵠⲆ = function() {
				ᐃⵠΔΔ.ⵠⲆⵠΔΔⵠⵠ(ⵠⲆⵠⵠⲆΔⲆᐃΔ)
			};
			if (!document.fonts || !document.fonts.check) setTimeout(ⵠⲆⵠᐃΔⵠⲆ, 1e3);
			else if (document.fonts.check("1em Baloo Paaji")) setTimeout(ⵠⲆⵠᐃΔⵠⲆ, 100);
			else setTimeout(ⵠⲆⵠⲆⲆᐃᐃ, ⲆᐃᐃΔᐃ)
		};
		var ᐃⲆᐃⵠⵠᐃⲆ = function() {
			this.ΔΔⵠⲆᐃⵠᐃ++;
			console.warn(`Image (${this.src}) failed to load, attempt ${this.ΔΔⵠⲆᐃⵠᐃ}`, this);
			if (this.ΔΔⵠⲆᐃⵠᐃ > ΔΔⲆᐃ) {
				console.warn("Failed to load image too many times")
			}
			var ⲆⵠΔⵠⵠΔⵠΔⵠ = this.ΔΔⵠⲆᐃⵠᐃ;
			var ⵠᐃᐃᐃΔ = this.src;
			var ⵠᐃᐃⲆⲆΔΔⵠΔ = ᐃΔΔ === ΔΔΔⲆΔⵠᐃ(ⵠᐃᐃᐃΔ) ? 1e4 : 2e3;
			setTimeout((function() {
				for (var Δᐃ in ΔⲆΔⲆΔΔⵠ) {
					if (ⵠᐃᐃᐃΔ.indexOf(ΔⲆΔⲆΔΔⵠ[Δᐃ]) !== -1) {
						ΔⲆ[Δᐃ] = new Image;
						ΔⲆ[Δᐃ].onload = ⵠΔΔⲆᐃⵠᐃ;
						ΔⲆ[Δᐃ].onerror = ᐃⲆᐃⵠⵠᐃⲆ;
						ΔⲆ[Δᐃ].ΔΔⵠⲆᐃⵠᐃ = ⲆⵠΔⵠⵠΔⵠΔⵠ;
						ΔⲆ[Δᐃ].src = ⵠᐃᐃᐃΔ;
						break
					}
				}
			}), ⵠᐃᐃⲆⲆΔΔⵠΔ)
		};

		function ⲆⵠⵠⲆⵠΔⲆ(ᐃⲆΔⵠᐃΔᐃⲆⲆ) {
			for (var Δᐃ in ΔⲆ) {
				var ΔᐃⲆⲆⵠ = ΔⲆ[Δᐃ];
				if (typeof ΔᐃⲆⲆⵠ !== Δ[428]) continue;
				if (ΔΔΔⲆΔⵠᐃ(ΔᐃⲆⲆⵠ) !== ᐃⲆΔⵠᐃΔᐃⲆⲆ) continue;
				ΔⲆ[Δᐃ] = new Image;
				ΔⲆ[Δᐃ].ⵠᐃᐃⲆᐃⵠⲆ = ⲆᐃⲆ;
				ΔⲆ[Δᐃ].ΔΔⵠⲆᐃⵠᐃ = 0;
				ΔⲆ[Δᐃ].onload = ⵠΔΔⲆᐃⵠᐃ;
				ΔⲆ[Δᐃ].onerror = ᐃⲆᐃⵠⵠᐃⲆ;
				ΔⲆ[Δᐃ].ΔⲆΔᐃΔⲆΔ = ΔᐃⵠⵠᐃᐃᐃΔⵠ;
				ΔⲆ[Δᐃ].ⵠᐃᐃᐃΔ = ΔᐃⲆⲆⵠ
			}
		}
		ⲆⵠⵠⲆⵠΔⲆ(ⲆⵠⲆ);
		ⲆⵠⵠⲆⵠΔⲆ(ⵠⲆΔⵠ);
		ⲆΔⵠⵠⵠ(ΔΔⲆΔ, "l", ⲆᐃⵠⲆᐃ, Δ[287]);
		ⵠⲆⵠⲆⲆᐃᐃ();
		ᐃⵠⵠⲆᐃⵠⲆ();
		this.ᐃᐃⵠ = function() {
			this.ΔΔⲆⲆⵠⵠᐃ.translate.x = (ⲆΔⲆᐃ - 500) / ⵠΔᐃΔᐃ;
			this.ΔΔⲆⲆⵠⵠᐃ.translate.y = (ΔⵠⲆΔ - 150) / 2;
			var ΔᐃⵠⲆ = 2500 / (ΔΔⲆᐃΔ - ⲆᐃⵠΔⲆ + 1) - 48;
			this.ΔΔⲆⲆⵠⵠᐃ.translate.y -= ΔᐃⵠⲆ;
			this.ΔΔⲆⲆⵠⵠᐃ.ᐃᐃⵠ()
		};
		this.ΔΔⲆⲆⵠⵠᐃ.ᐃᐃⵠ();
		this.ⲆᐃᐃⲆ = function() {
			try {
				ⲆⵠΔⲆⵠⲆΔ()
			} catch (Δⵠⵠᐃ) {}
			this.ᐃᐃⵠ()
		}
	}

	function ⲆΔⵠΔᐃΔⵠ(ⵠⲆᐃⲆᐃⲆⲆ, ⵠᐃᐃⵠΔⲆᐃ, ⲆⲆⲆⲆΔᐃᐃ) {
		ΔᐃⵠⵠΔΔΔ(ᐃΔⲆⲆᐃ, ⵠⲆᐃⲆᐃⲆⲆ, ⵠᐃᐃⵠΔⲆᐃ, ⲆⲆⲆⲆΔᐃᐃ);
		const ⲆΔⵠⵠᐃⲆⵠ = ⵠᐃᐃⲆⵠⵠΔⲆⵠ(ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[ⲆᐃᐃΔ], ᐃⲆⵠᐃ[0], ᐃⲆⵠᐃ[ⵠⵠᐃ], ᐃⲆⵠᐃ[2]);
		const ⵠᐃⵠⲆⵠⵠΔ = ΔⵠⵠΔⵠⲆⲆ(ᐃⲆⵠᐃ[Ⲇᐃⵠⵠ], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[2], ᐃⲆⵠᐃ[Δⵠⵠ], ᐃⲆⵠᐃ[1]);
		const ⵠⵠⲆᐃᐃᐃᐃΔⵠ = (8 << ((ⲆΔⵠⵠᐃⲆⵠ ^ ⵠᐃⵠⲆⵠⵠΔ) >> 0 & 255)) + (24 << ((ⲆΔⵠⵠᐃⲆⵠ ^ ⵠᐃⵠⲆⵠⵠΔ) >> 24 & 255)) + (0 << ((ⲆΔⵠⵠᐃⲆⵠ ^ ⵠᐃⵠⲆⵠⵠΔ) >> 16 & 255)) + (16 << ((ⲆΔⵠⵠᐃⲆⵠ ^ ⵠᐃⵠⲆⵠⵠΔ) >> 8 & 255));
		return ⵠⵠⲆᐃᐃᐃᐃΔⵠ
	}

	function ⵠⲆⵠᐃΔⵠΔΔΔ(ⲆⲆ, ᐃ) {
		this.ⲆⲆ = ⲆⲆ;
		this.ᐃ = ᐃ;
		var ⲆⲆᐃ = this;
		this.ΔⵠΔⵠΔΔᐃ = false;
		this.ⵠⵠⵠᐃⲆⲆⵠ = {
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("scoreboard"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("scoreboard").style,
			height: 0,
			translate: {
				y: 0,
				x: ⵠΔΔᐃ
			},
			"ᐃᐃⵠ": function() {
				this.style.left = this.translate.x + Δ[ΔⵠᐃⲆ];
				this.style.top = this.translate.y + Δ[3]
			},
			"ΔⲆᐃᐃⵠ": function() {
				this.id[ᐃⲆᐃᐃᐃᐃⵠ[83]] = '<div style="position:absolute;"> <img src="./img/scoreboard.png"style="width:250px;transform:translate(125px, -80px);"> </img> </div><div><div id="whokilled">' + ⵠⵠⵠ.ᐃΔⲆΔⵠⵠⵠ.ΔᐃⲆⲆᐃⵠⲆ + '</div></div><div class="deco" style="margin-top:35px;"></div><div class="deco"></div><div><div class="stats"> ' + ΔⲆⲆ[ΔΔΔΔ.ⵠⲆⵠᐃⲆⲆΔ] + Δ[186] + ⵠⵠⵠ.ⵠⵠⲆ + '</div><div class="stats"> ' + ΔⲆⲆ[ΔΔΔΔ.ⲆΔⵠᐃᐃᐃⵠ] + Δ[186] + ⵠⵠⵠ.ᐃΔⲆΔⵠⵠⵠ.ᐃᐃⲆᐃᐃ + "</div></div>" + '<div id="flexDisplay"><div id="score"> ' + ΔⲆⲆ[ΔΔΔΔ.ᐃⵠⲆⵠΔΔΔ] + Δ[186] + ⵠⵠⵠ.ᐃΔⲆΔⵠⵠⵠ.ᐃⲆᐃⵠⲆ + '</div><div id="breadWon"><span id="breadWonInner">0</span><img src="./img/golden-bread.png" style="width:50px;margin-left:-25px;transform: translate(37px, 8px);"></img></div></div><div><div id="points"> ' + ⵠⵠⵠ.ᐃΔⲆΔⵠⵠⵠ.ⵠᐃΔⲆⵠΔᐃ + " " + ΔⲆⲆ[ΔΔΔΔ.POINTS] + '</div></div><div id="shop_points">' + ΔⲆⲆ[ΔΔΔΔ.ⵠΔⵠⲆⵠⲆᐃ] + '</div><div style="display:inline-block;"><div class="social" id="tttwitter">' + ΔⲆⲆ[ΔΔΔΔ.ᐃⲆΔΔᐃⲆᐃ] + '</div><div class="social" id="fffacebook">' + ΔⲆⲆ[ΔΔΔΔ.ΔᐃΔᐃⲆΔⵠ] + '</div></div><div id="bbback">' + ΔⲆⲆ[ΔΔΔΔ.ⵠⵠⲆⵠⲆᐃⵠ] + Δ[490];
				this.style.display = Δ[151];
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("tttwitter")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], ⵠΔⲆⵠΔᐃᐃΔⵠ, false);
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("bbback")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], (function() {
					ᐃᐃΔⲆΔΔⵠ.ΔⲆⵠᐃΔ(ⵠⵠΔⵠ.ⵠⲆᐃᐃΔ)
				}), ΔΔᐃⵠᐃ);
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("fffacebook")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], ΔⵠⲆⵠⲆⲆΔᐃᐃ, false);
				this.height = Math.floor(this.id[ᐃⲆᐃᐃᐃᐃⵠ[102]] / ΔᐃΔⲆ);
				ᐃⵠⵠⵠⵠⵠΔᐃⲆ()
			}
		};
		var ⲆⵠⲆⵠⲆ = 0;
		var ⲆⵠᐃΔΔ = 30;
		var ᐃᐃⲆᐃΔⲆΔ = function() {
			ⲆⲆᐃ.ᐃᐃⵠ();
			ⲆⵠⲆⵠⲆ++;
			if (ⲆⵠᐃΔΔ == ⲆⵠⲆⵠⲆ) {
				ⲆⲆᐃ.ᐃᐃⵠ();
				return
			}
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]](ᐃᐃⲆᐃΔⲆΔ, 33)
		};
		this.ΔⲆⵠᐃΔ = function(ⲆⲆᐃⲆⲆ) {
			if (ⲆⲆᐃ.ΔⵠΔⵠΔΔᐃ === ⵠΔᐃⵠΔ) {
				ⲆⲆᐃ.ΔⵠΔⵠΔΔᐃ = ᐃⵠⵠⲆⵠ;
				ΔᐃⵠⲆⲆ = ⲆⲆᐃⲆⲆ;
				ⲆᐃⵠΔⲆ = -1;
				Δᐃⵠᐃᐃ();
				ⲆⵠᐃⵠⲆⲆⲆ()
			}
		};
		var ΔᐃⵠⲆⲆ;
		var ⲆᐃⵠΔⲆ = -ⲆΔᐃ;
		var ΔΔⲆᐃΔ = 30;
		var Δᐃⵠᐃᐃ = function() {
			ⲆⲆᐃ.ᐃᐃⵠ();
			ⲆᐃⵠΔⲆ++;
			if (ΔΔⲆᐃΔ == ⲆᐃⵠΔⲆ) {
				ⲆⲆᐃ.stop();
				ⲆⲆᐃ.ⵠⵠⵠᐃⲆⲆⵠ.style.display = Δ[369];
				ΔᐃⵠⲆⲆ();
				return
			}
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]](Δᐃⵠᐃᐃ, 33)
		};
		this.ΔⲆΔⵠⵠ = ΔⲆᐃⵠΔ;
		this.stop = function() {
			this.ΔⲆΔⵠⵠ = ⵠΔΔᐃᐃ
		};
		this.ⵠⲆᐃᐃΔ = function() {
			check_ads();
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[563]).style.backgroundColor = ⵠ.ⵠᐃΔⲆΔ[ⵠⲆΔⲆⲆ.time];
			ⲆⲆᐃ.ⵠⵠⵠᐃⲆⲆⵠ.ΔⲆᐃᐃⵠ();
			ⵠⵠΔⵠ.ⵠⲆⲆⵠΔ.style.display = Δ[151];
			ⲆⲆᐃ.ΔⲆΔⵠⵠ = true;
			ⲆⲆᐃ.ΔⵠΔⵠΔΔᐃ = true;
			ⲆᐃⵠΔⲆ = -ⲆⵠΔⲆ;
			ⲆⵠⲆⵠⲆ = ⵠᐃΔ;
			ᐃᐃⲆᐃΔⲆΔ()
		};
		this.ᐃᐃⵠ = function() {
			this.ⵠⵠⵠᐃⲆⲆⵠ.translate.x = Math.floor(ᐃᐃᐃΔ - 275);
			this.ⵠⵠⵠᐃⲆⲆⵠ.translate.y = Math.floor(Δᐃᐃᐃ - this.ⵠⵠⵠᐃⲆⲆⵠ.height - 28);
			ⵠⵠΔⵠ.ⵠⲆⲆⵠΔ.translate.x = this.ⵠⵠⵠᐃⲆⲆⵠ.translate.x - 350;
			ⵠⵠΔⵠ.ⵠⲆⲆⵠΔ.translate.y = this.ⵠⵠⵠᐃⲆⲆⵠ.translate.y + ⵠΔΔᐃ;
			ⵠⵠΔⵠ.ⵠⲆⲆⵠΔ.ᐃᐃⵠ();
			if (ⲆⵠⲆⵠⲆ != ⲆⵠᐃΔΔ || ⲆᐃⵠΔⲆ != -1) {
				var ΔᐃⵠⲆ = ⲆⲆⵠⲆ;
				if (ⲆⵠᐃΔΔ != ⲆⵠⲆⵠⲆ) {
					var ΔᐃⵠⲆ = 1500 / (ⲆⵠⲆⵠⲆ + 1) - 50
				}
				if (ⲆᐃⵠΔⲆ != -ⵠⲆⲆⲆ) {
					var ΔᐃⵠⲆ = -(1750 / (ΔΔⲆᐃΔ - ⲆᐃⵠΔⲆ + 1) - 48)
				}
				this.ⵠⵠⵠᐃⲆⲆⵠ.translate.y -= ΔᐃⵠⲆ
			}
			this.ⵠⵠⵠᐃⲆⲆⵠ.ᐃᐃⵠ()
		};
		this.ⲆᐃᐃⲆ = function() {
			ⲆⵠΔⲆⵠⲆΔ();
			ⵠⵠⵠ.alert.ⲆᐃᐃⲆ(Δ[560], Δ[287])
		}
	}

	function ΔΔΔΔᐃΔⵠ(ⲆⵠᐃΔⵠ, ᐃᐃΔΔΔ, ⵠᐃⵠⵠᐃⲆⲆⵠΔ, ⲆᐃⲆᐃᐃⵠᐃⵠⲆ, ᐃⲆΔⲆⵠᐃΔᐃᐃ, ΔⵠᐃⵠΔⵠᐃᐃⲆ) {
		ⲆΔΔΔⲆΔⵠ(ᐃΔⲆⲆᐃ, ⲆⵠᐃΔⵠ, ᐃᐃΔΔΔ, ⵠᐃⵠⵠᐃⲆⲆⵠΔ, ⲆᐃⲆᐃᐃⵠᐃⵠⲆ, ᐃⲆΔⲆⵠᐃΔᐃᐃ, ΔⵠᐃⵠΔⵠᐃᐃⲆ);
		const ᐃⵠᐃᐃⵠᐃⲆ = ⲆΔΔᐃⵠᐃᐃ(ᐃⲆⵠᐃ[ᐃⲆⵠΔ], ᐃⲆⵠᐃ[1], ᐃⲆⵠᐃ[2]);
		const ⲆᐃᐃΔᐃⲆᐃ = ⲆⲆᐃᐃⵠΔᐃ(ᐃⲆⵠᐃ[3], ᐃⲆⵠᐃ[4], ᐃⲆⵠᐃ[ᐃΔᐃⲆⲆ], ᐃⲆⵠᐃ[0]);
		const ΔΔⵠⲆⲆⵠⲆⲆΔ = (0 << ((ᐃⵠᐃᐃⵠᐃⲆ ^ ⲆᐃᐃΔᐃⲆᐃ) >> 0 & 255)) + (24 << ((ᐃⵠᐃᐃⵠᐃⲆ ^ ⲆᐃᐃΔᐃⲆᐃ) >> 16 & 255)) + (16 << ((ᐃⵠᐃᐃⵠᐃⲆ ^ ⲆᐃᐃΔᐃⲆᐃ) >> 24 & 255)) + (8 << ((ᐃⵠᐃᐃⵠᐃⲆ ^ ⲆᐃᐃΔᐃⲆᐃ) >> 8 & ⲆⵠΔᐃᐃᐃⲆ));
		return ΔΔⵠⲆⲆⵠⲆⲆΔ
	}

	function ᐃᐃⵠⲆⵠⲆⵠⲆᐃ(ⲆⲆ, ᐃ) {
		var ⲆⲆᐃ = this;
		this.ⲆⲆ = ⲆⲆ;
		this.ᐃ = ᐃ;
		if (-ᐃⵠⵠ < ⵠΔΔⲆⲆⵠᐃᐃⵠ.navigator.userAgent.indexOf("Edge")) {
			this.ᐃⵠⵠⵠᐃΔⲆ = "default";
			this.ⵠᐃᐃΔⲆⵠⲆ = "pointer"
		} else {
			this.ᐃⵠⵠⵠᐃΔⲆ = "url('img/cursor0.png'), default";
			this.ⵠᐃᐃΔⲆⵠⲆ = "url('img/cursor1.png'), pointer"
		}
		this.ⵠᐃⲆⵠⵠᐃᐃ = ΔⵠⲆ;
		this.ᐃᐃⵠᐃΔⵠᐃ = ΔΔⲆΔ;
		this.ᐃⲆΔΔΔΔⵠ = 1;
		this.ⵠᐃⵠⲆⲆᐃⲆ = 1;
		this.ⵠⲆΔⲆΔⲆᐃᐃⲆ = {
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[445]),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[445]).style,
			"ᐃᐃⵠ": function() {
				this.style.left = Math.floor(ᐃᐃᐃΔ - 125) + Δ[ΔΔⲆᐃ];
				this.style.top = "110px"
			}
		};
		this.ⵠᐃⲆΔ = {
			"ⲆΔⵠᐃΔΔΔ": Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆᐃⵠⲆᐃⵠ]),
			"ᐃΔⵠᐃⲆⲆⲆ": Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⲆᐃⲆᐃᐃ])
		};
		this.sign = {
			open: false,
			"ᐃΔⵠⲆⵠⲆᐃᐃⲆ": ⵠᐃⵠⵠ,
			"ⵠᐃᐃΔΔⵠⵠ": document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("sign_object"),
			"ⲆᐃⵠΔᐃᐃⵠ": ⵠⲆⵠ,
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("sign_window"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("sign_window").style,
			button: Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆΔⵠΔΔⵠ]),
			"ⵠⵠⲆΔᐃΔΔ": function() {
				var ΔΔ = Math.floor(Math.floor((ΔⵠⲆⲆ + ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length) / 4) * (ᐃⵠᐃᐃᐃ + Ⲇⵠ[ⵠ.ⵠΔΔⵠⲆᐃⵠ][0].width) + 35);
				this.button.info.translate.x = ΔΔ;
				this.button.info.translate.y = 22
			},
			"ᐃᐃⵠ": function() {
				this.style.left = Math.floor(ᐃᐃᐃΔ - 150) + Δ[3];
				this.style.top = Math.floor(Δᐃᐃᐃ - 115) + Δ[3]
			},
			"ΔⲆⵠᐃΔ": function() {
				ⲆΔᐃᐃ.sign.style.display = Δ[369];
				ⲆΔᐃᐃ.sign[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ΔⲆᐃⵠΔ
			},
			select: function() {
				ⲆΔᐃᐃ.sign[ᐃⲆᐃᐃᐃᐃⵠ[180]] = !ⲆΔᐃᐃ.sign[ᐃⲆᐃᐃᐃᐃⵠ[180]];
				if (ⲆΔᐃᐃ.sign[ᐃⲆᐃᐃᐃᐃⵠ[180]]) ⲆΔᐃᐃ.sign.style.display = Δ[151];
				else ⲆΔᐃᐃ.sign.style.display = Δ[369]
			},
			ok: function() {
				ᐃⵠΔΔ.ΔΔⲆⵠΔⲆⵠⲆᐃ(ⵠⵠⵠ.sign.ΔᐃⲆΔΔ, ⲆΔᐃᐃ.sign.ⲆᐃⵠΔᐃᐃⵠ);
				ⲆΔᐃᐃ.sign.select()
			},
			up: function() {
				ⲆΔᐃᐃ.sign.ⲆᐃⵠΔᐃᐃⵠ = ⲆΔᐃᐃ.sign.ⲆᐃⵠΔᐃᐃⵠ === 0 ? ⲆᐃᐃΔⲆ.ᐃᐃⵠⵠΔΔⲆ - ᐃⲆΔ : ⲆΔᐃᐃ.sign.ⲆᐃⵠΔᐃᐃⵠ - 1;
				ⲆΔᐃᐃ.sign.ⵠᐃᐃΔΔⵠⵠ.src = "./img/sign" + ⲆΔᐃᐃ.sign.ⲆᐃⵠΔᐃᐃⵠ + ".png"
			},
			down: function() {
				ⲆΔᐃᐃ.sign.ⲆᐃⵠΔᐃᐃⵠ = (ⲆΔᐃᐃ.sign.ⲆᐃⵠΔᐃᐃⵠ + ⵠΔⲆ) % ⲆᐃᐃΔⲆ.ᐃᐃⵠⵠΔΔⲆ;
				ⲆΔᐃᐃ.sign.ⵠᐃᐃΔΔⵠⵠ.src = "./img/sign" + ⲆΔᐃᐃ.sign.ⲆᐃⵠΔᐃᐃⵠ + ".png"
			}
		};
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("quit_sign")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.sign.select, false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("ok_sign")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.sign.ok, false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("sign_up")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.sign.up, false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("sign_down")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.sign.down, false);
		this.ⵠⵠᐃⲆᐃ = {
			open: ⵠᐃᐃⵠΔ,
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("shop_market"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("shop_market").style,
			items: [{
				id: ΔΔⲆⲆ,
				name: "wood",
				"Ⲇⵠⵠⵠᐃ": 1,
				b: ᐃΔⵠΔ,
				a: ΔⵠⲆⲆ,
				"ⲆΔⲆᐃᐃ": ⵠ.ⵠΔΔⵠⲆᐃⵠ
			}, {
				id: 1,
				name: "stone",
				"Ⲇⵠⵠⵠᐃ": ᐃⵠⵠ,
				b: 1,
				a: 4,
				"ⲆΔⲆᐃᐃ": ⵠ.ⵠⵠⵠᐃⵠⵠΔ
			}, {
				id: ΔΔᐃᐃ,
				name: "gold",
				"Ⲇⵠⵠⵠᐃ": 1,
				b: 1,
				a: 6,
				"ⲆΔⲆᐃᐃ": ⵠ.ⵠⵠⵠᐃᐃⵠΔ
			}, {
				id: 3,
				name: "diamond",
				"Ⲇⵠⵠⵠᐃ": 4,
				b: 4,
				a: ⵠⲆⲆⲆ,
				"ⲆΔⲆᐃᐃ": ⵠ.ⲆⵠⲆΔⵠΔⲆ
			}, {
				id: 4,
				name: "amethyst",
				"Ⲇⵠⵠⵠᐃ": ᐃΔⲆΔΔ,
				b: 8,
				a: ⲆⲆⲆᐃ,
				"ⲆΔⲆᐃᐃ": ⵠ.ᐃΔᐃⲆⲆⲆⲆ
			}, {
				id: 5,
				name: "reidite",
				"Ⲇⵠⵠⵠᐃ": ΔⵠΔΔᐃ,
				b: ᐃΔⲆⲆⲆ,
				a: 1,
				"ⲆΔⲆᐃᐃ": ⵠ.ΔⲆᐃΔΔᐃᐃ
			}, {
				id: 6,
				name: "pumpkin_seed",
				"Ⲇⵠⵠⵠᐃ": 10,
				b: 10,
				a: 1,
				"ⲆΔⲆᐃᐃ": ⵠ.ᐃⵠⲆⲆⲆⲆᐃ
			}, {
				id: 7,
				name: "carrot_seed",
				"Ⲇⵠⵠⵠᐃ": ᐃᐃᐃⵠΔⲆΔ,
				b: 16,
				a: ⵠⵠⵠΔ,
				"ⲆΔⲆᐃᐃ": ⵠ.ᐃᐃΔⵠⵠⵠΔ
			}, {
				id: ⲆΔⵠΔⲆⵠᐃ,
				name: "tomato_seed",
				"Ⲇⵠⵠⵠᐃ": 20,
				b: 20,
				a: ⵠΔᐃ,
				"ⲆΔⲆᐃᐃ": ⵠ.ᐃⵠᐃⵠⲆΔᐃ
			}, {
				id: 9,
				name: "thornbush_seed",
				"Ⲇⵠⵠⵠᐃ": 30,
				b: 30,
				a: ⵠΔᐃ,
				"ⲆΔⲆᐃᐃ": ⵠ.ΔΔᐃⲆⵠΔᐃ
			}, {
				id: ᐃⲆⵠΔΔ,
				name: "garlic_seed",
				"Ⲇⵠⵠⵠᐃ": 40,
				b: 40,
				a: ⵠΔΔ,
				"ⲆΔⲆᐃᐃ": ⵠ.ⲆⵠΔⵠᐃⵠΔ
			}, {
				id: ⲆΔⵠⵠΔⵠᐃ,
				name: "watermelon_seed",
				"Ⲇⵠⵠⵠᐃ": 60,
				b: 60,
				a: ᐃⲆⲆ,
				"ⲆΔⲆᐃᐃ": ⵠ.ᐃⲆᐃⲆΔⵠᐃ
			}],
			button: Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠⵠⵠ]),
			"ᐃᐃⵠ": function() {
				this.style.left = Math.floor(ᐃᐃᐃΔ - 450) + Δ[3];
				this.style.top = Math.floor(Δᐃᐃᐃ - 270) + Δ[3]
			},
			select: function() {
				ⲆΔᐃᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = !ⲆΔᐃᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]];
				if (ⲆΔᐃᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
					ⲆΔᐃᐃ.ⵠⵠᐃⲆᐃ.style.display = Δ[151]
				} else ⲆΔᐃᐃ.ⵠⵠᐃⲆᐃ.style.display = Δ[369]
			},
			"ΔⲆⵠᐃΔ": function() {
				ⲆΔᐃᐃ.ⵠⵠᐃⲆᐃ.style.display = Δ[369];
				ⲆΔᐃᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ⲆΔⲆⲆΔ
			},
			"ⵠⵠⲆⵠⵠΔΔ": function() {
				ᐃⵠΔΔ.ᐃⲆᐃⲆΔⲆⵠⲆᐃ(this.ⲆⵠⲆΔⵠⲆᐃ)
			},
			"ⵠⵠᐃⵠᐃ": function() {
				var ⵠᐃ = this.id;
				if (this.ⲆⵠⲆΔⵠⲆᐃ.a === ᐃⵠⵠ) {
					var ⲆᐃΔᐃ = Math.floor(Number(this.value) * this.ⲆⵠⲆΔⵠⲆᐃ.b);
					this.ⲆⵠⲆΔⵠⲆᐃ.Ⲇⵠⵠⵠᐃ = ⲆᐃΔᐃ;
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](this.ⲆⵠⲆΔⵠⲆᐃ.name + Δ[159])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ⲆᐃΔᐃ + ""
				} else {
					var ⲆᐃΔᐃ = Math.floor(Number(this.value) / this.ⲆⵠⲆΔⵠⲆᐃ.a);
					this.ⲆⵠⲆΔⵠⲆᐃ.Ⲇⵠⵠⵠᐃ = ⲆᐃΔᐃ;
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](this.ⲆⵠⲆΔⵠⲆᐃ.name + Δ[159])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ⲆᐃΔᐃ + ""
				}
			}
		};
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("quit_market")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ⵠⵠᐃⲆᐃ.ΔⲆⵠᐃΔ, false);
		var ⵠᐃⵠᐃΔⵠΔ = [
			[Δ[458], this.ⵠⵠᐃⲆᐃ.ⵠⵠⲆⵠⵠΔΔ, "buy_"],
			[Δ[507], this.ⵠⵠᐃⲆᐃ.ⵠⵠᐃⵠᐃ, ""],
			["change", this.ⵠⵠᐃⲆᐃ.ⵠⵠᐃⵠᐃ, ""],
			["keypress", this.ⵠⵠᐃⲆᐃ.keypress, ""]
		];
		for (var ᐃΔⵠⵠ = ⵠᐃⵠⵠ; ᐃΔⵠⵠ < this.ⵠⵠᐃⲆᐃ.items.length; ᐃΔⵠⵠ++) {
			var Ⲇᐃᐃⵠ = this.ⵠⵠᐃⲆᐃ.items[ᐃΔⵠⵠ];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Ⲇᐃᐃⵠ.name + "_market").src = Ⲇⵠ[Ⲇᐃᐃⵠ.ⲆΔⲆᐃᐃ][ⲆⲆⵠⲆ].ⵠᐃᐃᐃΔ === undefined ? Ⲇⵠ[Ⲇᐃᐃⵠ.ⲆΔⲆᐃᐃ][0].src : Ⲇⵠ[Ⲇᐃᐃⵠ.ⲆΔⲆᐃᐃ][0].ⵠᐃᐃᐃΔ;
			if (Ⲇᐃᐃⵠ.a === ⲆΔⲆⵠ) {
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Ⲇᐃᐃⵠ.name + Δ[159])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Ⲇᐃᐃⵠ.b;
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Ⲇᐃᐃⵠ.name + Δ[118]).value = 1;
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Ⲇᐃᐃⵠ.name + Δ[118]).step = ⵠΔⲆ;
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Ⲇᐃᐃⵠ.name + Δ[118]).min = ᐃⲆⲆ;
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Ⲇᐃᐃⵠ.name + Δ[118]).max = Math.floor(ⵠᐃᐃᐃⲆᐃⲆ / Ⲇᐃᐃⵠ.b)
			} else {
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Ⲇᐃᐃⵠ.name + Δ[159])[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ⵠΔΔ;
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Ⲇᐃᐃⵠ.name + Δ[118]).value = Ⲇᐃᐃⵠ.a;
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Ⲇᐃᐃⵠ.name + Δ[118]).step = Ⲇᐃᐃⵠ.a;
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Ⲇᐃᐃⵠ.name + Δ[118]).min = Ⲇᐃᐃⵠ.a
			}
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("buy_" + Ⲇᐃᐃⵠ.name + Δ[118]).ⲆⵠⲆΔⵠⲆᐃ = Ⲇᐃᐃⵠ;
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Ⲇᐃᐃⵠ.name + Δ[118]).ⲆⵠⲆΔⵠⲆᐃ = Ⲇᐃᐃⵠ;
			for (var Δᐃ = ⵠⵠΔΔ; ⵠᐃⵠᐃΔⵠΔ.length > Δᐃ; Δᐃ++) document[ᐃⲆᐃᐃᐃᐃⵠ[157]](ⵠᐃⵠᐃΔⵠΔ[Δᐃ][ⲆⲆΔΔ] + Ⲇᐃᐃⵠ.name + Δ[118])[ᐃⲆᐃᐃᐃᐃⵠ[117]](ⵠᐃⵠᐃΔⵠΔ[Δᐃ][0], ⵠᐃⵠᐃΔⵠΔ[Δᐃ][1], false)
		}
		$("[type='number']").keypress((function(ᐃⲆΔᐃ) {
			ᐃⲆΔᐃ.preventDefault()
		}));
		this.options = {
			open: false,
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("option_in_game"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("option_in_game").style,
			"ᐃᐃᐃⲆᐃ": document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("agree_ing").style,
			"ⲆⲆΔⵠᐃⵠΔ": document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("cancel_agree_ing").style,
			"ⲆⵠⲆⵠⵠᐃᐃ": document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("quest_agree_ing").style,
			"ⲆΔᐃᐃΔⲆᐃ": document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("spectator_agree_ing").style,
			"ᐃⵠᐃΔⲆᐃⵠ": document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("auto_feed_agree_ing").style,
			"ᐃΔⲆᐃΔᐃⵠ": document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("info_agree_ing").style,
			"ᐃⵠⵠⵠⲆΔⵠ": document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("pixelated_agree_ing").style,
			button: Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃⵠⵠ]),
			"ⲆΔᐃⲆⲆⵠᐃΔⵠ": function() {
				ⲆΔᐃᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] = !ⲆΔᐃᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]];
				if (ⲆΔᐃᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]]) ⲆΔᐃᐃ.options.style.display = Δ[151];
				else ⲆΔᐃᐃ.options.style.display = Δ[369]
			},
			"ⵠⲆⲆⵠᐃⵠⲆᐃⵠ": function() {
				ⵠⵠΔⵠ.ⵠΔⵠⵠᐃΔⲆ()
			},
			"ⵠⵠΔⲆⵠᐃᐃᐃΔ": function() {
				ⵠⵠΔⵠ.ⵠⲆΔⵠⵠΔⲆ()
			},
			high: function() {
				ⵠⵠΔⵠ.ⵠⵠⵠⵠᐃⵠⲆⵠⲆ()
			},
			low: function() {
				ⵠⵠΔⵠ.ΔⵠΔᐃΔⲆΔΔᐃ()
			},
			"ᐃⵠΔⵠⵠ": function() {
				ⲆΔᐃᐃ.ⲆⲆᐃⵠ.ᐃⵠΔⵠⵠ()
			},
			"ⲆΔᐃⵠᐃᐃⲆᐃΔ": function() {
				ⲆΔᐃᐃ.ᐃΔᐃⲆⵠ.ᐃⵠΔⵠⵠ()
			},
			"ᐃΔⲆᐃΔⲆᐃΔⲆ": function() {
				ⲆΔᐃᐃ.ⵠⲆⲆᐃ.ᐃⵠΔⵠⵠ()
			},
			"ΔⲆⵠᐃⲆⵠΔⲆⲆ": function() {
				ⵠⵠⵠ.ΔΔᐃᐃΔ.ΔⵠΔⵠⲆⲆΔ()
			},
			"ᐃⵠΔΔⲆΔⲆΔⲆ": function() {
				ⵠⵠⵠ.ᐃⲆΔΔᐃ.ΔⵠΔⵠⲆⲆΔ()
			},
			"ΔⲆⵠᐃΔ": function() {
				ⲆΔᐃᐃ.options.style.display = Δ[369];
				ⲆΔᐃᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false
			},
			"ᐃᐃⵠ": function() {
				this.style.left = Math.floor(ᐃᐃᐃΔ - 235) + Δ[ᐃⲆᐃⲆ];
				this.style.top = Math.floor(Δᐃᐃᐃ - 170) + Δ[ⲆΔΔⲆ]
			}
		};
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[580])[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.options.ⵠⲆⲆⵠᐃⵠⲆᐃⵠ, false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[89])[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.options.ⵠⵠΔⲆⵠᐃᐃᐃΔ, ΔⲆᐃⵠΔ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[476])[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.options.low, false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[356])[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.options.high, ⵠΔⵠᐃᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("quit_opt")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.options.ΔⲆⵠᐃΔ, false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("case_agree_opt")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.options.ᐃⵠΔⵠⵠ, false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("quest_case_agree_opt")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.options.ᐃΔⲆᐃΔⲆᐃΔⲆ, ⲆⵠⲆⵠΔ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("cancel_case_agree_opt")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.options.ⲆΔᐃⵠᐃᐃⲆᐃΔ, false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("spectator_case_agree_opt")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.options.ΔⲆⵠᐃⲆⵠΔⲆⲆ, false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("auto_feed_case_agree_opt")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.options.ᐃⵠΔΔⲆΔⲆΔⲆ, ⲆⵠⵠΔᐃ);
		this.ᐃΔᐃⲆⵠ = {
			open: ⲆΔⲆⲆΔ,
			"ᐃⲆΔⲆΔ": ΔᐃⲆΔ.get(Δ[189]) ? ΔᐃⲆΔ.get(Δ[189]) === "0" ? ᐃΔΔ : ⵠⵠⵠΔ : 1,
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[270]),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[270]).style,
			"ᐃᐃᐃⲆᐃ": document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("cancel_agree").style,
			button: ⵠᐃⵠⵠ,
			"Δᐃ": ᐃΔΔ,
			"ΔⲆⵠᐃΔ": function() {
				ⲆΔᐃᐃ.ᐃΔᐃⲆⵠ.style.display = Δ[369];
				ⲆΔᐃᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ⲆⵠⵠΔᐃ
			},
			"ᐃⲆᐃⵠΔⵠⲆ": function() {
				if (ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆΔᐃᐃᐃ) ᐃⵠΔΔ.ⵠᐃΔⵠᐃΔΔⲆΔ();
				ⲆΔᐃᐃ.ᐃΔᐃⲆⵠ.ΔⲆⵠᐃΔ()
			},
			"ᐃⵠΔⵠⵠ": function() {
				if (!ⲆΔᐃᐃ.ᐃΔᐃⲆⵠ.ᐃⲆΔⲆΔ) {
					ΔᐃⲆΔ.set(Δ[189], "1");
					ⲆΔᐃᐃ.ᐃΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ.display = Δ[369];
					ⲆΔᐃᐃ.options.ⲆⲆΔⵠᐃⵠΔ.display = Δ[151]
				} else {
					ΔᐃⲆΔ.set(Δ[189], "0");
					ⲆΔᐃᐃ.ᐃΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ.display = Δ[151];
					ⲆΔᐃᐃ.options.ⲆⲆΔⵠᐃⵠΔ.display = Δ[369]
				}
				ⲆΔᐃᐃ.ᐃΔᐃⲆⵠ.ᐃⲆΔⲆΔ = !ⲆΔᐃᐃ.ᐃΔᐃⲆⵠ.ᐃⲆΔⲆΔ
			},
			"ΔᐃΔΔⵠⲆⵠ": function() {
				if (!this.ᐃⲆΔⲆΔ) this.ᐃⲆᐃⵠΔⵠⲆ();
				else {
					this.style.display = Δ[151];
					this[ᐃⲆᐃᐃᐃᐃⵠ[180]] = true
				}
			},
			"ᐃᐃⵠ": function() {
				this.style.left = Math.floor(ᐃᐃᐃΔ - 235) + Δ[ⲆΔΔⲆ];
				this.style.top = Math.floor(Δᐃᐃᐃ - 130) + Δ[Ⲇⵠᐃᐃ]
			}
		};
		this.ᐃΔᐃⲆⵠ.id.oncontextmenu = function() {
			return false
		};
		this.ᐃΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ.display = Δ[369];
		if (this.ᐃΔᐃⲆⵠ.ᐃⲆΔⲆΔ) this.options.ⲆⲆΔⵠᐃⵠΔ.display = Δ[151];
		else this.options.ⲆⲆΔⵠᐃⵠΔ.display = Δ[369];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("cancel_yes_delete")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ᐃΔᐃⲆⵠ.ᐃⲆᐃⵠΔⵠⲆ, ΔᐃⲆⵠⵠ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("cancel_no_delete")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ᐃΔᐃⲆⵠ.ΔⲆⵠᐃΔ, ΔΔᐃⵠᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("cancel_case_agree")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ᐃΔᐃⲆⵠ.ᐃⵠΔⵠⵠ, false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[270], (function(Δⵠⵠᐃ) {
			Δⵠⵠᐃ.preventDefault()
		}), ⵠΔΔᐃᐃ);
		this.ΔⵠⲆΔⵠΔⵠ = {
			"ᐃⲆΔⲆΔ": ΔᐃⲆΔ.get(Δ[523]) ? ΔᐃⲆΔ.get(Δ[523]) === "0" ? 0 : ⵠΔΔ : ⵠΔᐃ,
			"ⵠⲆᐃⵠᐃⲆⲆ": function(Ⲇⵠⵠⵠᐃ) {
				if (Ⲇⵠⵠⵠᐃ) document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("game_canvas").style.imageRendering = "pixelated";
				else document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("game_canvas").style.imageRendering = "auto"
			},
			"ᐃⵠΔⵠⵠ": function() {
				if (ⲆΔᐃᐃ.ΔⵠⲆΔⵠΔⵠ.ᐃⲆΔⲆΔ === 0) {
					ΔᐃⲆΔ.set(Δ[523], "1");
					ⲆΔᐃᐃ.ΔⵠⲆΔⵠΔⵠ.ⵠⲆᐃⵠᐃⲆⲆ(ⵠⵠⵠΔ);
					ⲆΔᐃᐃ.options.ᐃⵠⵠⵠⲆΔⵠ.display = Δ[151]
				} else {
					ΔᐃⲆΔ.set(Δ[523], "0");
					ⲆΔᐃᐃ.ΔⵠⲆΔⵠΔⵠ.ⵠⲆᐃⵠᐃⲆⲆ(ⵠΔΔᐃ);
					ⲆΔᐃᐃ.options.ᐃⵠⵠⵠⲆΔⵠ.display = Δ[369]
				}
				ⲆΔᐃᐃ.ΔⵠⲆΔⵠΔⵠ.ᐃⲆΔⲆΔ = (ⲆΔᐃᐃ.ΔⵠⲆΔⵠΔⵠ.ᐃⲆΔⲆΔ + ΔⵠⲆ) % 2
			}
		};
		if (this.ΔⵠⲆΔⵠΔⵠ.ᐃⲆΔⲆΔ === ⵠⵠⵠΔ) this.options.ᐃⵠⵠⵠⲆΔⵠ.display = Δ[151];
		else {
			this.ΔⵠⲆΔⵠΔⵠ.ⵠⲆᐃⵠᐃⲆⲆ(0);
			this.options.ᐃⵠⵠⵠⲆΔⵠ.display = Δ[369]
		}
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("pixelated_case_agree_opt")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ΔⵠⲆΔⵠΔⵠ.ᐃⵠΔⵠⵠ, false);
		this.ⵠᐃⵠᐃᐃ = {
			"ᐃⲆΔⲆΔ": ΔᐃⲆΔ.get(Δ[184]) ? ΔᐃⲆΔ.get(Δ[184]) === "0" ? ΔᐃΔ : 1 : 1,
			display: 0,
			x: ΔΔⲆⲆ,
			y: ⵠⵠΔΔ,
			id: 0,
			"ⲆΔᐃⵠ": ⵠᐃⵠⵠ,
			"ᐃⵠΔⵠⵠ": function() {
				if (ⲆΔᐃᐃ.ⵠᐃⵠᐃᐃ.ᐃⲆΔⲆΔ === ᐃΔΔ) {
					ΔᐃⲆΔ.set(Δ[184], "1");
					ⲆΔᐃᐃ.options.ᐃΔⲆᐃΔᐃⵠ.display = Δ[151]
				} else {
					ΔᐃⲆΔ.set(Δ[184], "0");
					ⲆΔᐃᐃ.options.ᐃΔⲆᐃΔᐃⵠ.display = Δ[369]
				}
				ⲆΔᐃᐃ.ⵠᐃⵠᐃᐃ.ᐃⲆΔⲆΔ = (ⲆΔᐃᐃ.ⵠᐃⵠᐃᐃ.ᐃⲆΔⲆΔ + 1) % ⲆⲆᐃⲆ
			},
			"ⵠⲆⵠⲆ": function(ᐃΔΔⵠⵠⲆΔ, ΔⲆⲆᐃ, ⲆΔᐃⵠ) {
				if (ᐃΔΔⵠⵠⲆΔ && this.ᐃⲆΔⲆΔ) {
					this.display = 1;
					if (ⲆΔᐃⵠ === 0) this.id = ΔⲆⲆᐃ.id;
					else this.id = ΔⵠΔⲆΔ[ΔⲆⲆᐃ.id].ⵠⵠⲆᐃ;
					this.x = ΔⲆⲆᐃ.info.translate.x + 80;
					this.y = ΔⲆⲆᐃ.info.translate.y;
					this.ⲆΔᐃⵠ = ⲆΔᐃⵠ
				}
				return ᐃΔΔⵠⵠⲆΔ
			}
		};
		ⲆΔⲆⵠ === this.ⵠᐃⵠᐃᐃ.ᐃⲆΔⲆΔ ? this.options.ᐃΔⲆᐃΔᐃⵠ.display = Δ[151] : this.options.ᐃΔⲆᐃΔᐃⵠ.display = Δ[369];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("info_case_agree_opt")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ⵠᐃⵠᐃᐃ.ᐃⵠΔⵠⵠ, ⵠΔⵠᐃᐃ);
		if (ΔᐃⲆΔ.get("starve_scale")) {
			ᐃⵠⵠᐃⲆⵠᐃ = Number(ΔᐃⲆΔ.get("starve_scale"));
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[124]).value = ᐃⵠⵠᐃⲆⵠᐃ;
			ᐃⵠⵠᐃⲆⵠᐃ *= devicePixelRatio / ⵠⵠΔΔᐃⲆⲆ;
			ⲆⲆᐃᐃΔⲆᐃ()
		}
		this.ᐃΔⲆᐃⵠⵠⲆ = function() {
			ΔᐃⲆΔ.set("starve_scale", "" + document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[124]).value);
			ᐃⵠⵠᐃⲆⵠᐃ = devicePixelRatio / ⵠⵠΔΔᐃⲆⲆ * document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[124]).value;
			ⲆⲆᐃᐃΔⲆᐃ()
		};
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[124])[ᐃⲆᐃᐃᐃᐃⵠ[117]]("input", this.ᐃΔⲆᐃⵠⵠⲆ, ΔⲆᐃⵠΔ);
		this.ⲆⲆᐃⵠ = {
			open: false,
			"ᐃⲆΔⲆΔ": ΔᐃⲆΔ.get(Δ[397]) ? ΔᐃⲆΔ.get(Δ[397]) === "0" ? 0 : 1 : 1,
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("sure_delete"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("sure_delete").style,
			"ᐃᐃᐃⲆᐃ": document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("agree").style,
			button: 0,
			"Δᐃ": 0,
			"ΔⲆⵠᐃΔ": function() {
				ⲆΔᐃᐃ.ⲆⲆᐃⵠ.style.display = Δ[369];
				ⲆΔᐃᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ⲆΔΔⵠⵠ
			},
			all: function() {
				if (!ⵠⵠⵠ.ᐃⲆΔΔΔ.wait) {
					if (ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && ⵠⵠⵠ.ⲆΔᐃⵠ.id < 0 && !ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled) ᐃⵠΔΔ.ᐃᐃᐃᐃᐃⵠᐃᐃⵠ(ⲆΔᐃᐃ.ⲆⲆᐃⵠ.button);
					ⲆΔᐃᐃ.ⲆⲆᐃⵠ.ΔⲆⵠᐃΔ()
				}
			},
			"ᐃΔᐃΔ": function() {
				if (ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠᐃᐃ && !ⵠⵠⵠ.ᐃⲆΔΔΔ.wait) {
					if (ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < ⲆⲆᐃΔ && ⵠⵠⵠ.ⲆΔᐃⵠ.id < 0 && !ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled) ᐃⵠΔΔ.ΔΔⲆⲆⵠᐃᐃᐃⲆ(ⲆΔᐃᐃ.ⲆⲆᐃⵠ.button);
					ⲆΔᐃᐃ.ⲆⲆᐃⵠ.ΔⲆⵠᐃΔ()
				}
			},
			"ΔΔᐃⲆⲆⵠⲆΔⵠ": function() {
				if (!ⵠⵠⵠ.ᐃⲆΔΔΔ.wait) {
					if (ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && ⵠⵠⵠ.ⲆΔᐃⵠ.id < 0 && !ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled) ᐃⵠΔΔ.ⵠⵠΔⵠⲆΔᐃⲆᐃ(ⲆΔᐃᐃ.ⲆⲆᐃⵠ.button);
					ⲆΔᐃᐃ.ⲆⲆᐃⵠ.ΔⲆⵠᐃΔ()
				}
			},
			"ᐃⵠΔⵠⵠ": function() {
				if (!ⲆΔᐃᐃ.ⲆⲆᐃⵠ.ᐃⲆΔⲆΔ) {
					ΔᐃⲆΔ.set(Δ[397], "1");
					ⲆΔᐃᐃ.ⲆⲆᐃⵠ.ᐃᐃᐃⲆᐃ.display = Δ[369];
					ⲆΔᐃᐃ.options.ᐃᐃᐃⲆᐃ.display = Δ[151]
				} else {
					ΔᐃⲆΔ.set(Δ[397], "0");
					ⲆΔᐃᐃ.ⲆⲆᐃⵠ.ᐃᐃᐃⲆᐃ.display = Δ[151];
					ⲆΔᐃᐃ.options.ᐃᐃᐃⲆᐃ.display = Δ[369]
				}
				ⲆΔᐃᐃ.ⲆⲆᐃⵠ.ᐃⲆΔⲆΔ = !ⲆΔᐃᐃ.ⲆⲆᐃⵠ.ᐃⲆΔⲆΔ
			},
			"ΔᐃΔΔⵠⲆⵠ": function(ΔⲆⲆᐃ) {
				this.button = ΔⲆⲆᐃ;
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("item_to_del").src = Ⲇⵠ[ΔⵠΔⲆ[ΔⲆⲆᐃ].ⵠΔ][0].ⵠᐃᐃᐃΔ === ᐃΔⵠᐃⵠ ? Ⲇⵠ[ΔⵠΔⲆ[ΔⲆⲆᐃ].ⵠΔ][0].src : Ⲇⵠ[ΔⵠΔⲆ[ΔⲆⲆᐃ].ⵠΔ][0].ⵠᐃᐃᐃΔ;
				if (ΔⵠΔⲆ[ΔⲆⲆᐃ].ᐃΔᐃΔ && !ⵠⵠⵠ.ⵠΔⲆⲆⲆ && ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠᐃᐃ) document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("recycle_delete").style.display = Δ[151];
				else document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("recycle_delete").style.display = Δ[369];
				if (!this.ᐃⲆΔⲆΔ) this.all();
				else {
					this.style.display = Δ[151];
					this[ᐃⲆᐃᐃᐃᐃⵠ[180]] = true
				}
			},
			"ᐃᐃⵠ": function() {
				this.style.left = Math.floor(ᐃᐃᐃΔ - 235) + Δ[ⲆΔⲆΔ];
				this.style.top = Math.floor(Δᐃᐃᐃ - 175) + Δ[3]
			}
		};
		this.ⲆⲆᐃⵠ.ᐃᐃᐃⲆᐃ.display = Δ[369];
		if (this.ⲆⲆᐃⵠ.ᐃⲆΔⲆΔ) this.options.ᐃᐃᐃⲆᐃ.display = Δ[151];
		else this.options.ᐃᐃᐃⲆᐃ.display = Δ[369];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("one_delete")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ⲆⲆᐃⵠ.ΔΔᐃⲆⲆⵠⲆΔⵠ, ΔⲆᐃⵠΔ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("yes_delete")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ⲆⲆᐃⵠ.all, false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("recycle_delete")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ⲆⲆᐃⵠ.ᐃΔᐃΔ, false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("no_delete")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ⲆⲆᐃⵠ.ΔⲆⵠᐃΔ, ⲆⵠⵠΔᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("case_agree")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ⲆⲆᐃⵠ.ᐃⵠΔⵠⵠ, false);
		this.ⵠΔⲆΔ = {
			open: false,
			"ᐃⲆⲆΔⵠ": -ⲆⵠⲆ,
			button: Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠᐃⲆΔⲆΔ]),
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[142]),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[142]).style,
			"ᐃᐃⵠ": function() {
				this.style.left = Math.floor(ᐃᐃᐃΔ - 300) + Δ[3];
				this.style.top = Math.floor(Δᐃᐃᐃ - 215) + Δ[3]
			},
			"ΔⲆⵠᐃΔ": function() {
				ⲆΔᐃᐃ.ⵠΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false;
				ⲆΔᐃᐃ.ⵠΔⲆΔ.style.display = Δ[369]
			},
			select: function() {
				ⲆΔᐃᐃ.ⵠΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = !ⲆΔᐃᐃ.ⵠΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]];
				if (!ⲆΔᐃᐃ.ⵠΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) ⲆΔᐃᐃ.ⵠΔⲆΔ.style.display = Δ[369];
				else ⲆΔᐃᐃ.ⵠΔⲆΔ.style.display = Δ[151]
			},
			"ⵠⵠⲆⵠⵠΔΔ": function() {
				if (ⲆΔᐃᐃ.ⵠΔⲆΔ.ᐃⲆⲆΔⵠ >= 0) {
					ᐃⵠΔΔ.ⵠⵠⲆΔᐃⲆᐃΔᐃ(ⲆΔᐃᐃ.ⵠΔⲆΔ.ᐃⲆⲆΔⵠ);
					ⲆΔᐃᐃ.ⵠΔⲆΔ.ΔⲆⵠᐃΔ();
					if (ga) ga(Δ[517], Δ[306], Δ[462], Δ[481], "" + ⲆΔᐃᐃ.ⵠΔⲆΔ.ᐃⲆⲆΔⵠ)
				}
			},
			"ΔⲆᐃᐃⵠ": function() {
				var ΔΔΔᐃⲆ = ⵠⵠⵠ.ⵠΔⲆΔ.value;
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("points_bank")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ⵠᐃΔᐃ.ᐃⲆΔⵠᐃᐃⵠ(ΔΔΔᐃⲆ) + " points";
				for (var Δᐃ = 0; Δᐃ < ⲆΔΔⲆⲆⵠⲆ.length; Δᐃ++) {
					if (ⲆΔΔⲆⲆⵠⲆ[Δᐃ].ΔΔΔᐃⲆ > ΔΔΔᐃⲆ) document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("starter" + (Δᐃ + 1)).style[Δ[48]] = "0.4";
					else document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("starter" + (Δᐃ + 1)).style[Δ[48]] = "1"
				}
				for (Δᐃ = ⵠΔᐃ; Δᐃ < 13; Δᐃ++) {
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[49] + Δᐃ).src = "./img/empty-shop.png";
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("amount_shop" + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ""
				}
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[450]).style[Δ[48]] = "0.2"
			},
			"ⵠΔᐃΔᐃⲆᐃⵠⲆ": function() {
				if (this.id.length > 8) var ⵠᐃ = Number(this.id.charAt(7) + this.id.charAt(8));
				else var ⵠᐃ = Number(this.id.charAt(7));
				var ΔΔΔᐃ = ⲆΔΔⲆⲆⵠⲆ[ⵠᐃ - 1];
				if (ⵠⵠⵠ.ⵠΔⲆΔ.value >= ΔΔΔᐃ.ΔΔΔᐃⲆ) {
					ⲆΔᐃᐃ.ⵠΔⲆΔ.ᐃⲆⲆΔⵠ = ⵠᐃ;
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[450]).style[Δ[48]] = "1"
				} else {
					ⲆΔᐃᐃ.ⵠΔⲆΔ.ᐃⲆⲆΔⵠ = -1;
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[450]).style[Δ[48]] = "0.2"
				}
				ΔΔΔᐃ = ΔΔΔᐃ.items;
				for (var Δᐃ = 1, ᐃΔⵠⵠ = 1; Δᐃ < ΔΔΔᐃ.length + 1; Δᐃ++) {
					if (ΔΔΔᐃ[Δᐃ - 1][1] === Ⲇᐃ.ⲆⲆⲆⲆ) continue;
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[49] + ᐃΔⵠⵠ).style.display = Δ[151];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[49] + ᐃΔⵠⵠ).src = Ⲇⵠ[ΔⵠΔⲆ[ΔΔΔᐃ[Δᐃ - ᐃΔⵠΔ][1]].ⵠΔ][0].ⵠᐃᐃᐃΔ === undefined ? Ⲇⵠ[ΔⵠΔⲆ[ΔΔΔᐃ[Δᐃ - 1][ᐃⵠⵠ]].ⵠΔ][0].src : Ⲇⵠ[ΔⵠΔⲆ[ΔΔΔᐃ[Δᐃ - Δᐃᐃ][1]].ⵠΔ][0].ⵠᐃᐃᐃΔ;
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("amount_shop" + ᐃΔⵠⵠ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "" + ΔΔΔᐃ[Δᐃ - 1][0];
					ᐃΔⵠⵠ++
				}
				for (; ᐃΔⵠⵠ < 13; ᐃΔⵠⵠ++) {
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[49] + ᐃΔⵠⵠ).src = "./img/empty-shop.png";
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("amount_shop" + ᐃΔⵠⵠ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ""
				}
			}
		};
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("quit3")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ⵠΔⲆΔ.ΔⲆⵠᐃΔ, ⵠⲆⵠᐃᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[450])[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ⵠΔⲆΔ.ⵠⵠⲆⵠⵠΔΔ, false);
		for (var Δᐃ = 1; ΔᐃⲆⲆΔⲆᐃ > Δᐃ; Δᐃ++) document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("starter" + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ⵠΔⲆΔ.ⵠΔᐃΔᐃⲆᐃⵠⲆ, ⲆⵠⲆⵠΔ);
		this.ⵠⲆⲆᐃ = {
			open: false,
			"ᐃⲆΔⲆΔ": ΔᐃⲆΔ.get(Δ[141]) ? ΔᐃⲆΔ.get(Δ[141]) === "1" ? 1 : ΔΔⲆⲆ : ⵠⲆᐃ,
			button: Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃΔⵠΔⵠⲆ]),
			id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("chronoquest"),
			style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("chronoquest").style,
			"ᐃᐃⵠ": function() {
				this.style.left = Math.floor(ᐃᐃᐃΔ - 420) + Δ[3];
				this.style.top = Math.floor(Δᐃᐃᐃ - 270) + Δ[ⲆΔΔⲆ]
			},
			"ΔⲆⵠᐃΔ": function() {
				ⲆΔᐃᐃ.ⵠⲆⲆᐃ.style.display = Δ[369];
				ⲆΔᐃᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ⵠⲆⵠᐃᐃ
			},
			select: function() {
				ⲆΔᐃᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = !ⲆΔᐃᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]];
				if (!ⲆΔᐃᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) ⲆΔᐃᐃ.ⵠⲆⲆᐃ.style.display = Δ[369];
				else ⲆΔᐃᐃ.ⵠⲆⲆᐃ.style.display = Δ[151]
			},
			list: [],
			reset: function() {
				for (var Δᐃ = 0; Δᐃ < ⲆᐃⵠⲆⵠᐃⵠ.length; Δᐃ++) {
					this.list[Δᐃ] = 1;
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[209] + Δᐃ).style.display = Δ[151];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[133] + Δᐃ).style.display = Δ[369];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[19] + Δᐃ).style.display = Δ[369]
				}
			},
			"ⲆⲆᐃΔⵠᐃⵠ": 0,
			"ᐃΔⵠΔⲆⲆΔ": 0,
			"ⲆⵠᐃΔⵠⲆⲆΔⵠ": function() {
				if (!ⲆΔᐃᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) return;
				var ⲆⵠᐃΔⲆ = (new Date).getTime();
				if (ⲆⵠᐃΔⲆ - this.ⲆⲆᐃΔⵠᐃⵠ < 1e3) return;
				this.ⲆⲆᐃΔⵠᐃⵠ = ⲆⵠᐃΔⲆ;
				for (var Δᐃ = ⵠᐃΔ; Δᐃ < ⲆᐃⵠⲆⵠᐃⵠ.length; Δᐃ++) {
					if (!ⲆΔᐃᐃ.ⵠⲆⲆᐃ.list[Δᐃ]) continue;
					var ΔⲆᐃ = ⲆᐃⵠⲆⵠᐃⵠ[Δᐃ].time - (ⲆⵠᐃΔⲆ - ⲆⲆⲆ.ΔᐃᐃⲆⵠ.ΔⲆᐃᐃⵠ + ⲆΔᐃᐃ.ⵠⲆⲆᐃ.ᐃΔⵠΔⲆⲆΔ);
					if (ΔⲆᐃ > 96e4) {
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[209] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Math.floor(ΔⲆᐃ / 48e4) + " days"
					} else if (ΔⲆᐃ > 48e4) {
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[209] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Math.floor(ΔⲆᐃ / 48e4) + " day"
					} else if (ΔⲆᐃ > 6e4) {
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[209] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Math.floor(ΔⲆᐃ / 6e4) + " min"
					} else document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[209] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = Math.floor(ΔⲆᐃ / 1e3) + " sec"
				}
			},
			restore: function(ⲆⲆⲆΔ) {
				for (var Δᐃ = ⵠⲆⵠ; Δᐃ < ⲆⲆⲆΔ.length; Δᐃ++) {
					if (ⲆⲆⲆΔ[Δᐃ] != 1) ⲆΔᐃᐃ.ⵠⲆⲆᐃ.ⲆⲆᐃΔᐃΔⵠ(Δᐃ, ⲆⲆⲆΔ[Δᐃ])
				}
			},
			"ⲆⲆᐃΔᐃΔⵠ": function(ⵠᐃ, ᐃⵠⵠⵠ) {
				if (ᐃⵠⵠⵠ === ⵠⵠⵠⵠ && (ⵠᐃ === 11 || ⵠᐃ === ⵠⲆⵠᐃⲆ)) {
					ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃΔⲆᐃⵠΔⵠ(ⵠⲆΔⵠ, 1);
					ⲆΔᐃᐃ.ⲆⵠⵠⲆᐃᐃⲆ()
				}
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[209] + ⵠᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
				if (ᐃⵠⵠⵠ > ⵠⲆⲆⲆ) {
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[133] + ⵠᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "SUCCEED";
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[209] + ⵠᐃ).style.display = Δ[369]
				} else if (ᐃⵠⵠⵠ === ⵠⲆᐃ) {
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[133] + ⵠᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "FAILED";
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[209] + ⵠᐃ).style.display = Δ[369]
				}
				if (ᐃⵠⵠⵠ === ΔⲆᐃⲆ) document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[ⲆΔᐃΔⲆ] + ⵠᐃ).style.display = Δ[151];
				else document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[19] + ⵠᐃ).style.display = Δ[369];
				document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[133] + ⵠᐃ).style.display = "inline";
				ⲆΔᐃᐃ.ⵠⲆⲆᐃ.list[ⵠᐃ] = 0
			},
			modify: function(ⵠᐃ, ᐃⵠⵠⵠ) {
				ⲆΔᐃᐃ.ⵠⲆⲆᐃ.ⲆⲆᐃΔᐃΔⵠ(ⵠᐃ, ᐃⵠⵠⵠ);
				if (ⲆΔᐃᐃ.ⵠⲆⲆᐃ.ᐃⲆΔⲆΔ) {
					ⲆΔᐃᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ᐃⲆⲆⲆΔ;
					ⲆΔᐃᐃ.ⵠⲆⲆᐃ.style.display = Δ[151]
				}
			},
			"ᐃⵠΔⵠⵠ": function() {
				if (!ⲆΔᐃᐃ.ⵠⲆⲆᐃ.ᐃⲆΔⲆΔ) {
					ΔᐃⲆΔ.set(Δ[141], "1");
					ⲆΔᐃᐃ.options.ⲆⵠⲆⵠⵠᐃᐃ.display = Δ[151]
				} else {
					ΔᐃⲆΔ.set(Δ[141], "0");
					ⲆΔᐃᐃ.options.ⲆⵠⲆⵠⵠᐃᐃ.display = Δ[369]
				}
				ⲆΔᐃᐃ.ⵠⲆⲆᐃ.ᐃⲆΔⲆΔ = !ⲆΔᐃᐃ.ⵠⲆⲆᐃ.ᐃⲆΔⲆΔ
			},
			"ⲆⵠᐃΔᐃⵠⵠᐃⵠ": function() {
				var ᐃΔΔᐃ = Number(this.id.charAt(ΔᐃᐃⲆⲆⵠⲆ));
				var ⵠΔᐃᐃ = Number(this.id.charAt(ᐃΔᐃΔⲆΔⵠ));
				if (this.id.charAt(ΔⵠⲆΔⵠⵠⵠ) !== "" && ⵠΔᐃᐃ >= ⵠⲆⵠ && ⵠΔᐃᐃ <= 9) ᐃΔΔᐃ = ᐃΔΔᐃ * 10 + ⵠΔᐃᐃ;
				ᐃⵠΔΔ.ⵠΔⲆⲆⵠᐃⲆΔᐃ(ᐃΔΔᐃ)
			}
		};
		if (this.ⵠⲆⲆᐃ.ᐃⲆΔⲆΔ) this.options.ⲆⵠⲆⵠⵠᐃᐃ.display = Δ[151];
		else this.options.ⲆⵠⲆⵠⵠᐃᐃ.display = Δ[369];
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[359])[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ⵠⲆⲆᐃ.ΔⲆⵠᐃΔ, false);
		for (var Δᐃ = 0; ⲆᐃⵠⲆⵠᐃⵠ.length > Δᐃ; Δᐃ++) document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[ᐃᐃΔΔᐃ] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ⵠⲆⲆᐃ.ⲆⵠᐃΔᐃⵠⵠᐃⵠ, false);
		this.ΔΔΔⵠ = {
			open: ΔⲆΔΔᐃ,
			button: Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⲆᐃΔ]),
			list: {
				id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[478]),
				style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[478]).style,
				"ᐃⲆΔⲆΔⲆⵠ": [],
				"ⵠⲆⲆⵠΔⵠⲆ": ΔᐃΔ,
				"ᐃᐃⵠ": function() {
					this.style.left = Math.floor(ᐃᐃᐃΔ - 335) + Δ[ᐃⲆᐃⲆ];
					this.style.top = Math.floor(Δᐃᐃᐃ - 215) + Δ[3]
				},
				"ΔⲆⵠᐃΔ": function() {
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[478]).style.display = Δ[369];
					ⲆΔᐃᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false
				},
				"ΔΔⵠⵠⵠⲆΔ": function() {
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[478]).style.display = Δ[369];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[223]).style.display = Δ[151]
				},
				"ᐃⲆⵠⵠ": function(Δᐃ) {
					var ⵠᐃⵠ = this.ᐃⲆΔⲆΔⲆⵠ[Δᐃ];
					if (ⵠᐃⵠ.ᐃΔⲆ) document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("watercraft").style.display = Δ[151];
					else document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("watercraft").style.display = Δ[369];
					if (ⵠᐃⵠ.f) document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("firecraft").style.display = Δ[151];
					else document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("firecraft").style.display = Δ[369];
					if (ⵠᐃⵠ.w) document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("workcraft").style.display = Δ[151];
					else document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("workcraft").style.display = Δ[369];
					if (ⵠᐃⵠ.e) document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("wellcraft").style.display = Δ[151];
					else document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("wellcraft").style.display = Δ[369];
					var ⵠᐃⵠ = ⵠᐃⵠ.r;
					for (var Δᐃ = 0, ᐃΔⵠⵠ = 1; Δᐃ < ⵠᐃⵠ.length; Δᐃ++) {
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("inv" + ᐃΔⵠⵠ).style.display = Δ[151];
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("inv" + ᐃΔⵠⵠ).src = Ⲇⵠ[ΔⵠΔⲆ[ⵠᐃⵠ[Δᐃ][ΔΔⲆⲆ]].ⵠΔ][ⵠᐃⵠⵠ].ⵠᐃᐃᐃΔ === ᐃⲆᐃΔⵠ ? Ⲇⵠ[ΔⵠΔⲆ[ⵠᐃⵠ[Δᐃ][0]].ⵠΔ][0].src : Ⲇⵠ[ΔⵠΔⲆ[ⵠᐃⵠ[Δᐃ][Δⵠⵠ]].ⵠΔ][ⵠᐃⵠⵠ].ⵠᐃᐃᐃΔ;
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("numb" + ᐃΔⵠⵠ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "" + ⵠᐃⵠ[Δᐃ][1];
						ᐃΔⵠⵠ++
					}
					for (; ᐃΔⵠⵠ < 6; ᐃΔⵠⵠ++) {
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("inv" + ᐃΔⵠⵠ).style.display = Δ[369];
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("numb" + ᐃΔⵠⵠ)[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ""
					}
				},
				select: function(ⵠⲆⲆⵠΔⵠⲆ) {
					this.ⵠⲆⲆⵠΔⵠⲆ = ⵠⲆⲆⵠΔⵠⲆ;
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[223]).style.display = Δ[369];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("workcraft").style.display = Δ[369];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("firecraft").style.display = Δ[369];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("watercraft").style.display = Δ[369];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("wellcraft").style.display = Δ[369];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[478]).style.display = Δ[151];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("inv1").style.display = Δ[369];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("inv2").style.display = Δ[369];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("inv3").style.display = Δ[369];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("inv4").style.display = Δ[369];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("inv5").style.display = Δ[369];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("numb1")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "";
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("numb2")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "";
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("numb3")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "";
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("numb4")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "";
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("numb5")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "";
					for (var Δᐃ = 0, ᐃΔⵠⵠ = 0; Δᐃ < ΔⵠΔⲆΔ.length; Δᐃ++) {
						var ⵠᐃⵠ = ΔⵠΔⲆΔ[Δᐃ];
						if (ⵠⲆⲆⵠΔⵠⲆ === ⵠᐃⵠ.ΔⲆᐃ) {
							this.ᐃⲆΔⲆΔⲆⵠ[ᐃΔⵠⵠ] = ⵠᐃⵠ;
							ᐃΔⵠⵠ++;
							document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_" + ᐃΔⵠⵠ).style.display = Δ[151];
							document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_" + ᐃΔⵠⵠ).src = Ⲇⵠ[ΔⵠΔⲆ[ⵠᐃⵠ.ⵠⵠⲆᐃ].ⵠΔ][0].ⵠᐃᐃᐃΔ === ᐃⲆᐃⲆⵠ ? Ⲇⵠ[ΔⵠΔⲆ[ⵠᐃⵠ.ⵠⵠⲆᐃ].ⵠΔ][0].src : Ⲇⵠ[ΔⵠΔⲆ[ⵠᐃⵠ.ⵠⵠⲆᐃ].ⵠΔ][ⲆΔⵠΔ].ⵠᐃᐃᐃΔ
						}
					}
					for (ᐃΔⵠⵠ++; ᐃΔⵠⵠ < 49; ᐃΔⵠⵠ++) document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_" + ᐃΔⵠⵠ).style.display = Δ[369]
				}
			},
			"ΔⵠⲆⵠⵠΔΔ": {
				id: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[223]),
				style: document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[223]).style,
				"ᐃᐃⵠ": function() {
					this.style.left = Math.floor(ᐃᐃᐃΔ - 285) + Δ[ΔΔⲆᐃ];
					this.style.top = Math.floor(Δᐃᐃᐃ - 170) + Δ[ⵠᐃⲆᐃ]
				},
				"ΔⲆⵠᐃΔ": function() {
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[223]).style.display = Δ[369];
					ⲆΔᐃᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ΔᐃⲆⵠⵠ
				}
			},
			"ᐃΔⵠᐃΔᐃⲆᐃⵠ": function() {
				this[ᐃⲆᐃᐃᐃᐃⵠ[180]] = !this[ᐃⲆᐃᐃᐃᐃⵠ[180]];
				if (!this[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[223]).style.display = Δ[369];
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[478]).style.display = Δ[369]
				} else document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[223]).style.display = Δ[151]
			}
		};
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("quit")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ΔΔΔⵠ.ΔⵠⲆⵠⵠΔΔ.ΔⲆⵠᐃΔ, false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("quitmenu")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ΔΔΔⵠ.list.ΔⲆⵠᐃΔ, ⲆΔᐃⵠᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("backhome")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ΔΔΔⵠ.list.ΔΔⵠⵠⵠⲆΔ, ᐃⲆⵠⵠᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("hatcategory")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.select(ᐃⵠⲆΔ.ᐃΔΔΔᐃ)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("weaponcategory")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.select(ᐃⵠⲆΔ.ᐃᐃΔⲆ)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("toolcategory")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.select(ᐃⵠⲆΔ.ΔⲆⲆΔⲆ)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("foodcategory")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.select(ᐃⵠⲆΔ.ΔⲆⲆΔᐃ)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("placeablecategory")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.select(ᐃⵠⲆΔ.ΔΔΔΔᐃ)
		}), ᐃⲆⵠⵠᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("constructioncategory")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.select(ᐃⵠⲆΔ.ᐃⲆⵠⵠⵠ)
		}), ⵠᐃᐃⵠΔ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_1")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(ⲆⲆᐃΔ)
		}), ᐃⵠⵠⲆⵠ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_2")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(ⵠΔⲆ)
		}), ⲆΔᐃⵠᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_3")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(2)
		}), ΔΔᐃⵠᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_4")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(ⵠᐃⵠΔ)
		}), ⲆΔᐃⵠᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_5")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(ΔⵠⲆᐃ)
		}), ⲆⵠΔᐃⵠ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_6")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(5)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_7")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(6)
		}), ΔⲆΔΔᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_8")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(ⵠⵠⵠⲆΔ)
		}), ⲆⵠⲆΔᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_9")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(8)
		}), ΔΔΔⵠⵠ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_10")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(ᐃᐃⵠᐃΔ)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_11")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(10)
		}), ⵠΔⵠᐃᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_12")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(11)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_13")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(12)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_14")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(ⵠΔᐃⲆⵠᐃᐃ)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_15")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(14)
		}), ΔⲆᐃⵠΔ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_16")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(ⵠⵠᐃᐃⲆ)
		}), ᐃⲆⵠⵠᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_17")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(16)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_18")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(ᐃΔⵠⵠΔ)
		}), ⵠΔΔᐃᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_19")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(ᐃⲆⲆΔⵠΔⲆ)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_20")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(19)
		}), ⲆⵠⲆⵠΔ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_21")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(20)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_22")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(21)
		}), ⲆΔᐃⵠᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_23")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(22)
		}), ᐃⲆⵠⵠᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_24")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(23)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_25")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(24)
		}), ΔⲆᐃⵠΔ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_26")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(25)
		}), ⲆⵠⲆΔᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_27")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(26)
		}), ⲆᐃⲆⲆΔ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_28")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(27)
		}), ⵠΔⵠᐃᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_29")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(28)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_30")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(29)
		}), ΔⲆΔΔᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_31")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(30)
		}), ᐃⵠⵠⲆⵠ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_32")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(31)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_33")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(32)
		}), ⵠⲆⵠᐃᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_34")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(33)
		}), ⲆᐃⲆⲆΔ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_35")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(34)
		}), ⲆⲆⲆΔᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_36")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(35)
		}), ⲆΔᐃⵠᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_37")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(36)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_38")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(37)
		}), ⵠΔΔᐃᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_39")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(38)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_40")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(39)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_41")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(40)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_42")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(41)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_43")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(42)
		}), ⲆⵠⲆⵠΔ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_44")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(43)
		}), ΔⲆΔΔᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_45")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(44)
		}), false);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_46")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(45)
		}), ⲆΔΔⵠⵠ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_47")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(46)
		}), ⲆⵠⵠΔᐃ);
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("img_48")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], (function() {
			ⲆΔᐃᐃ.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(47)
		}), ⵠᐃᐃⵠΔ);
		this.ⵠⲆⵠᐃⵠ = {
			translate: {
				x: 0,
				y: ΔΔⲆⲆ
			},
			"ⵠⵠΔⵠⵠ": {
				x: -1,
				y: -ⵠⲆⲆⲆ
			},
			"ⵠⲆΔᐃ": [],
			focus: function(ᐃⵠⵠⲆ) {
				var ΔΔⵠ = this.translate.y + (ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length > 0 ? -120 : -50);
				if (ᐃⵠⵠⲆ.x > this.translate.x && ᐃⵠⵠⲆ.x < this.translate.x + 193 && ᐃⵠⵠⲆ.y > ΔΔⵠ && ᐃⵠⵠⲆ.y < ΔΔⵠ + 193) {
					this.ⵠⵠΔⵠⵠ.x = ᐃⵠⵠⲆ.x - this.translate.x;
					this.ⵠⵠΔⵠⵠ.y = ᐃⵠⵠⲆ.y - ΔΔⵠ
				}
			}
		};
		this.ⲆⲆⲆⵠ = {
			translate: {
				x: 0,
				y: 0
			},
			"ⵠΔ": Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⲆΔΔ],
			"ⲆⲆ": document[ᐃⲆᐃᐃᐃᐃⵠ[2]](Δ[180])
		};
		this.ⲆⲆⲆⵠ.ⲆⲆ.width = this.ⲆⲆⲆⵠ.ⵠΔ.width;
		this.ⲆⲆⲆⵠ.ⲆⲆ.height = this.ⲆⲆⲆⵠ.ⵠΔ.height;
		this.ⲆⲆⲆⵠ.ᐃ = this.ⲆⲆⲆⵠ.ⲆⲆ.getContext(Δ[160]);
		this.ᐃⵠⲆᐃ = {
			translate: {
				x: Ⲇᐃⵠⵠ,
				y: ⲆⲆᐃΔ
			},
			"ⵠΔ": Ⲇⵠ[ⵠ.ΔᐃᐃⵠⵠΔΔ],
			"ⲆᐃᐃⲆ": ΔⲆΔΔⲆΔᐃΔᐃ,
			y: 0
		};
		var ⵠⲆᐃΔⲆ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[310]][ᐃⲆᐃᐃᐃᐃⵠ[2]]("div");
		this.ᐃⵠΔⵠΔΔⲆ = function() {
			ΔⵠⲆⲆᐃ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[445]);
			ΔⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "";
			ΔⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[83]] += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + ((ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[189]] = ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠⵠⵠ.ΔΔΔᐃΔ[ⵠΔⵠⲆ]].ⲆⵠΔⵠΔ) && ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[83]]) + "</div";
			for (var Δᐃ = 1; ⵠⵠⵠ.ΔΔΔᐃΔ.length > Δᐃ; Δᐃ++) {
				ΔⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[83]] += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + ((ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[189]] = ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠⵠⵠ.ΔΔΔᐃΔ[Δᐃ]].ⲆⵠΔⵠΔ) && ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[83]]) + "</div></div>"
			}
			ΔⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[83]] += '<div id="leave" style="display:inline-block;">LEAVE</div></div>';
			ΔⵠⲆⲆᐃ.style.display = Δ[151];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("leave")[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[507], ᐃⵠΔΔ.ᐃⵠΔⵠΔΔⲆ, false)
		};
		this.ⵠⲆⲆΔΔⲆᐃΔⵠ = function() {
			ΔⵠⲆⲆᐃ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[445]);
			ΔⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "";
			ΔⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[83]] += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + ((ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[189]] = ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠⵠⵠ.ΔΔΔᐃΔ[0]].ⲆⵠΔⵠΔ) && ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[83]]) + "</div";
			for (var Δᐃ = ⵠⵠⵠΔ; ⵠⵠⵠ.ΔΔΔᐃΔ.length > Δᐃ; Δᐃ++) {
				ΔⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[83]] += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + ((ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[189]] = ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠⵠⵠ.ΔΔΔᐃΔ[Δᐃ]].ⲆⵠΔⵠΔ) && ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[83]]) + "</div></div>"
			}
			ΔⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[83]] += Δ[490];
			ΔⵠⲆⲆᐃ.style.display = Δ[151]
		};
		this.ⵠᐃⵠⵠΔᐃⲆⲆᐃ = function() {
			ΔⵠⲆⲆᐃ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[445]);
			ΔⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "";
			ΔⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[83]] += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + ((ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[189]] = ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠⵠⵠ.ΔΔΔᐃΔ[ⵠΔⵠⲆ]].ⲆⵠΔⵠΔ) && ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[83]]) + "</div";
			for (var Δᐃ = 1; ⵠⵠⵠ.ΔΔΔᐃΔ.length > Δᐃ; Δᐃ++) ΔⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[83]] += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + ((ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[189]] = ⲆⲆⲆ.ⵠⲆΔᐃ[ⵠⵠⵠ.ΔΔΔᐃΔ[Δᐃ]].ⲆⵠΔⵠΔ) && ⵠⲆᐃΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[83]]) + '</div><div class="eject_member" id="eject_member' + Δᐃ + '"><img src="./img/close-team.png" style="width:20px;padding:5px;"></img></div>';
			ⵠⵠⵠ.ᐃⲆⲆΔⲆ.lock === 0 ? ΔⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[83]] += '<div id="lock_team" style="display:inline-block;">LOCK</div></div>' : ΔⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[83]] += '<div id="lock_team" style="display:inline-block;">UNLOCK</div></div>';
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[430])[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[507], ᐃⵠΔΔ.ⵠⵠⲆΔΔⲆⵠᐃⲆ, false);
			ΔⵠⲆⲆᐃ.style.display = Δ[151];
			for (var Δᐃ = 1; ⵠⵠⵠ.ΔΔΔᐃΔ.length > Δᐃ; Δᐃ++) {
				switch (Δᐃ) {
					case 1:
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[419] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[507], (function() {
							ᐃⵠΔΔ.ⲆΔⲆΔΔⲆᐃ(1)
						}), ⲆΔΔⵠⵠ);
						break;
					case 2:
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[419] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[507], (function() {
							ᐃⵠΔΔ.ⲆΔⲆΔΔⲆᐃ(2)
						}), ⲆⲆⲆΔᐃ);
						break;
					case ᐃᐃΔⵠ:
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[419] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[507], (function() {
							ᐃⵠΔΔ.ⲆΔⲆΔΔⲆᐃ(ᐃΔΔⵠ)
						}), ΔⲆᐃⵠΔ);
						break;
					case 4:
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[419] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[507], (function() {
							ᐃⵠΔΔ.ⲆΔⲆΔΔⲆᐃ(4)
						}), false);
						break;
					case 5:
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[419] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[507], (function() {
							ᐃⵠΔΔ.ⲆΔⲆΔΔⲆᐃ(ΔⲆΔᐃⵠ)
						}), ΔΔΔⵠⵠ);
						break;
					case ΔᐃⵠΔΔ:
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[419] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[507], (function() {
							ᐃⵠΔΔ.ⲆΔⲆΔΔⲆᐃ(ⲆⵠⵠⵠⲆ)
						}), false);
						break;
					case 7:
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[419] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[507], (function() {
							ᐃⵠΔΔ.ⲆΔⲆΔΔⲆᐃ(7)
						}), false);
						break;
					case 8:
						document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[419] + Δᐃ)[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[507], (function() {
							ᐃⵠΔΔ.ⲆΔⲆΔΔⲆᐃ(8)
						}), ⲆⵠⲆΔᐃ);
						break
				}
			}
		};
		this.ⵠΔⵠᐃⲆ = [];
		this.ⵠΔⵠᐃⲆ[ⲆᐃᐃΔⲆ.ⵠⲆⵠᐃΔΔᐃ] = {
			button: Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔΔΔⲆⲆⵠ]),
			action: this.ᐃⵠΔⵠΔΔⲆ
		};
		this.ⵠΔⵠᐃⲆ[ⲆᐃᐃΔⲆ.ⲆⲆⲆⲆⲆⲆⲆ] = {
			button: Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔΔΔⲆⲆⵠ]),
			action: ᐃⵠΔΔ.ⵠᐃⲆⲆΔⵠᐃⵠⲆ
		};
		this.ⵠΔⵠᐃⲆ[ⲆᐃᐃΔⲆ.ᐃⲆΔⲆΔᐃΔ] = {
			button: Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃᐃᐃᐃᐃⵠ]),
			action: this.ⵠᐃⵠⵠΔᐃⲆⲆᐃ
		};
		this.ⵠΔⵠᐃⲆ[ⲆᐃᐃΔⲆ.ⵠᐃᐃⵠⲆᐃΔ] = {
			button: Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃⵠᐃᐃⵠⲆ]),
			action: this.ⵠⲆⲆΔΔⲆᐃΔⵠ
		};
		this.ⵠΔⵠᐃⲆ[ⲆᐃᐃΔⲆ.ⵠⲆⵠᐃⲆⵠⲆ] = {
			button: Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⵠΔΔᐃⲆ]),
			action: function() {}
		};
		this.ⲆⲆⵠⵠᐃ = -ᐃⲆΔ;
		this.ΔᐃⵠⲆΔⲆⵠ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔΔⲆᐃᐃΔ]);
		this.ΔΔᐃⵠΔᐃᐃ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⲆᐃᐃⲆⲆ]);
		this.ΔⵠᐃⲆᐃᐃΔ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⲆⵠᐃⵠⵠ]);
		this.ⲆΔΔΔⲆᐃΔ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔΔΔΔᐃⵠ]);
		this.ⲆᐃⲆⲆⲆⵠᐃ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⲆⵠᐃⵠⵠ]);
		this.ᐃⲆⲆⲆᐃⵠΔ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔΔⵠⲆᐃⵠ]);
		this.ᐃᐃᐃΔΔⲆᐃ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠⵠᐃⵠⵠΔ]);
		this.ᐃⲆⲆⵠⲆΔⲆ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠⵠᐃᐃⵠΔ]);
		this.ΔΔⲆⲆΔⵠΔ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⲆΔⵠΔⲆ]);
		this.ᐃⲆⲆⵠΔⲆΔ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆⲆⲆ]);
		this.ⵠΔⲆⲆᐃⵠⵠ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆᐃΔΔᐃᐃ]);
		this.ⵠᐃⵠⵠⵠⲆⵠ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃᐃΔ]);
		this.ΔⵠⵠⲆΔΔⲆ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠΔⲆ]);
		this.ⵠΔᐃᐃᐃᐃΔ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⲆⲆΔⲆⲆ]);
		this.ΔⲆᐃΔΔⲆᐃ = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⵠᐃᐃⲆΔ]);
		this.ⵠΔᐃᐃᐃ = Ⲇⵠᐃ(120, 120, "", Ⲇⵠ[ⵠ.ᐃᐃᐃⵠΔ]);
		this.ⵠΔᐃᐃᐃ.info.translate.x = ᐃᐃⵠⵠΔ;
		this.ⵠΔᐃᐃᐃ.info.translate.y = 10;
		this.ⵠⵠΔ = [];
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆᐃⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⵠⵠⲆⵠⵠ], ⵠᐃⵠΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆᐃⲆⵠ].id = Ⲇᐃ.ⵠⲆᐃⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆΔⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⲆⵠΔⲆᐃ], ⵠⵠᐃΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆΔⵠᐃ].id = Ⲇᐃ.ᐃⲆΔⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔᐃᐃΔΔᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃᐃ].id = Ⲇᐃ.ᐃⵠᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆΔⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃΔΔΔᐃⲆᐃ], ᐃⵠⲆⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆΔⲆ].id = Ⲇᐃ.ᐃⲆΔⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆᐃⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃᐃΔᐃΔⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆᐃⵠ].id = Ⲇᐃ.ⲆⲆⲆᐃⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⲆᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆᐃⲆⵠⲆⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⲆᐃⲆ].id = Ⲇᐃ.ⵠⵠⲆᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃⵠᐃⵠΔΔ], ⵠΔⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⵠᐃ].id = Ⲇᐃ.ᐃⵠⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃΔΔᐃⵠᐃ], ⵠᐃⲆᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆᐃᐃ].id = Ⲇᐃ.ⵠⲆᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.Ⲇⵠᐃᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆⲆᐃⵠⵠΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.Ⲇⵠᐃᐃᐃ].id = Ⲇᐃ.Ⲇⵠᐃᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⲆⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃⵠⲆⲆⲆⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⲆⲆᐃ].id = Ⲇᐃ.ⵠᐃⲆⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⲆⵠⲆⵠᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆΔΔ].id = Ⲇᐃ.ⲆⲆⲆΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃΔΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⲆΔⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃΔΔΔ].id = Ⲇᐃ.ΔᐃΔΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔᐃᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆⲆᐃΔⵠⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔᐃᐃⲆ].id = Ⲇᐃ.ᐃΔᐃᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⲆⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔΔⵠⲆΔΔ], ᐃΔΔⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⲆⲆᐃ].id = Ⲇᐃ.ⲆⵠⲆⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠᐃⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠΔΔᐃΔΔⲆ], ᐃⲆᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠᐃⲆⵠ].id = Ⲇᐃ.ⵠⵠᐃⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔΔΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃⲆⵠⵠΔⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔΔΔⵠ].id = Ⲇᐃ.ⲆΔΔΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⲆⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆᐃⲆΔΔΔ], ᐃΔΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⲆⲆⲆ].id = Ⲇᐃ.ⲆᐃⲆⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⲆⵠΔΔⵠ], ΔΔⲆᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃⲆᐃ].id = Ⲇᐃ.ᐃⵠᐃⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔⲆⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃⲆᐃΔΔⲆ], ⲆΔⲆΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔⲆⵠΔ].id = Ⲇᐃ.ⲆΔⲆⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔᐃΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃΔᐃᐃⲆⵠΔ], ᐃΔΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔᐃΔⵠ].id = Ⲇᐃ.ΔΔᐃΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠᐃⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃᐃΔⵠΔⲆ], ΔⲆΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠᐃⵠΔ].id = Ⲇᐃ.ⵠⵠᐃⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⲆΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃⲆⲆⵠΔΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⲆΔᐃ].id = Ⲇᐃ.ᐃᐃⲆΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆΔΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠΔⵠⲆΔΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆΔΔᐃ].id = Ⲇᐃ.ⲆⲆΔΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⲆⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⲆⵠᐃⵠᐃⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⲆⵠⵠ].id = Ⲇᐃ.ⲆⵠⲆⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆⵠΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃⲆᐃⲆⲆⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆⵠΔⵠ].id = Ⲇᐃ.ΔⲆⵠΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⵠⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃⵠⵠⵠⲆΔ], ᐃⵠⲆⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⵠⵠΔ].id = Ⲇᐃ.ⵠⲆⵠⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⵠⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔⵠᐃᐃᐃⵠ], ⵠⵠᐃΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⵠⲆΔ].id = Ⲇᐃ.ⲆⵠⵠⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⵠⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆⵠΔᐃⲆᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⵠⲆⵠ].id = Ⲇᐃ.ⵠΔⵠⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃⵠᐃᐃΔⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔⵠΔ].id = Ⲇᐃ.ᐃⵠΔⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠΔᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠΔΔᐃⵠΔⲆ], ⵠⵠᐃΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠΔᐃᐃ].id = Ⲇᐃ.ⵠⵠΔᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃΔⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⲆⲆⲆᐃⲆⵠ], Ⲇⵠᐃᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃΔⵠⵠ].id = Ⲇᐃ.ΔᐃΔⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆΔᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃΔⲆⵠΔⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆΔᐃᐃ].id = Ⲇᐃ.ⲆⲆΔᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆⵠΔⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃΔⵠⵠΔⲆ], ΔⵠⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆⵠΔⲆ].id = Ⲇᐃ.ΔⲆⵠΔⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆⵠᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆΔΔΔⵠⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆⵠᐃⲆ].id = Ⲇᐃ.ΔⲆⵠᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆᐃΔΔΔᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆⲆⵠ].id = Ⲇᐃ.ⵠⲆⲆⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⲆΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠᐃⵠⵠⵠᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⲆΔΔ].id = Ⲇᐃ.ⵠⵠⲆΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⲆⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃⲆᐃⲆⵠᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⲆⲆΔ].id = Ⲇᐃ.ᐃⵠⲆⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠᐃⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⲆⲆΔⵠⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠᐃⲆΔ].id = Ⲇᐃ.ⲆⵠᐃⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃΔⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃⲆⵠᐃΔⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃΔⵠΔ].id = Ⲇᐃ.ΔᐃΔⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⵠⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆᐃⲆ], ᐃᐃΔⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⵠⲆⲆ].id = Ⲇᐃ.ⲆⲆⵠⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆᐃΔⲆⲆᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃΔΔ].id = Ⲇᐃ.ΔⵠᐃΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⲆᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔᐃΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⲆᐃΔ].id = Ⲇᐃ.ᐃΔⲆᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠᐃⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆⵠΔᐃⵠΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠᐃⵠⲆ].id = Ⲇᐃ.ⵠⵠᐃⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⲆΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠΔΔⲆⵠᐃⵠ], ⵠⵠᐃΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⲆΔᐃ].id = Ⲇᐃ.ᐃⵠⲆΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⵠᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⵠΔᐃΔⵠᐃ], ΔⲆΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⵠᐃⲆ].id = Ⲇᐃ.ΔᐃⵠᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⵠⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃᐃⲆᐃΔⵠ], ᐃⵠⲆⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⵠⵠΔ].id = Ⲇᐃ.ⵠᐃⵠⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⲆⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠⵠⲆⵠⵠⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⲆⲆᐃ].id = Ⲇᐃ.ⵠΔⲆⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆᐃΔⲆⵠᐃ], ⵠΔⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃⵠⲆ].id = Ⲇᐃ.ᐃⵠᐃⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⵠⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⲆᐃⵠⵠΔ], ⵠΔⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⵠⲆᐃ].id = Ⲇᐃ.ⵠᐃⵠⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.Δⵠⵠⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⵠⵠⵠΔᐃᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.Δⵠⵠⵠⵠ].id = Ⲇᐃ.Δⵠⵠⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠⵠⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆΔΔΔᐃⲆⲆ], ⵠᐃⲆᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠⵠⲆⲆ].id = Ⲇᐃ.ΔⵠⵠⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔᐃΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃΔΔⵠᐃᐃ], ΔⵠᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔᐃΔΔ].id = Ⲇᐃ.ᐃΔᐃΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠᐃⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.Ⲇᐃᐃⵠⵠⵠᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠᐃⲆⲆ].id = Ⲇᐃ.ⵠⵠᐃⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⲆⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃΔⲆⲆᐃᐃΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⲆⲆᐃ].id = Ⲇᐃ.ΔᐃⲆⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⲆⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠᐃⵠⲆⵠⲆⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⲆⲆΔ].id = Ⲇᐃ.ⵠᐃⲆⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆᐃⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠᐃᐃⵠⵠΔ], ΔⵠᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆᐃⲆⵠ].id = Ⲇᐃ.ΔⲆᐃⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠΔΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆᐃΔᐃⵠⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠΔΔᐃ].id = Ⲇᐃ.ⵠⵠΔΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⲆⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔᐃᐃⲆⲆᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⲆⵠᐃ].id = Ⲇᐃ.ⲆⵠⲆⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆΔⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠᐃΔⵠⲆΔ], ᐃΔΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆΔⲆⲆ].id = Ⲇᐃ.ⲆⲆΔⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃᐃΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⲆΔⵠᐃⵠᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃᐃΔᐃ].id = Ⲇᐃ.ΔᐃᐃΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔΔΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆΔΔⵠᐃⵠ], ⵠᐃⵠΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔΔΔᐃ].id = Ⲇᐃ.ⵠΔΔΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆΔΔΔⲆⲆΔ], Ⲇⵠᐃᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆⲆᐃ].id = Ⲇᐃ.ⵠⲆⲆⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⲆⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠᐃⵠᐃⲆⵠ], ᐃΔΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⲆⲆΔ].id = Ⲇᐃ.ΔΔⲆⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆΔᐃΔⲆⲆ], ⵠᐃⲆᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠⲆⲆ].id = Ⲇᐃ.ⵠⵠⵠⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠΔᐃᐃⲆⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆΔⵠ].id = Ⲇᐃ.ⲆⲆⲆΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⲆᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⵠⵠⲆⲆⲆⲆ], ⵠᐃⵠΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⲆᐃⲆ].id = Ⲇᐃ.ᐃΔⲆᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⵠᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃᐃⵠΔᐃⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⵠᐃΔ].id = Ⲇᐃ.ⵠᐃⵠᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆⵠΔⲆΔᐃ], ΔⲆΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃᐃΔ].id = Ⲇᐃ.ΔⵠᐃᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⵠⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃᐃⵠΔᐃⲆ], ᐃⲆᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⵠⵠⵠ].id = Ⲇᐃ.ⵠⲆⵠⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⵠⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃⵠᐃᐃᐃΔ], ⲆΔΔⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⵠⵠⲆ].id = Ⲇᐃ.ΔΔⵠⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔΔⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⲆᐃⲆ], ΔⲆΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔΔⲆⵠ].id = Ⲇᐃ.ᐃΔΔⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃⵠΔᐃᐃⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔⵠᐃ].id = Ⲇᐃ.ᐃⵠΔⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⲆᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆΔΔⵠᐃᐃ], ᐃⲆᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⲆᐃΔ].id = Ⲇᐃ.ⵠⵠⲆᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⵠⲆΔⲆᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃⲆᐃ].id = Ⲇᐃ.ΔⵠᐃⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆΔⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠᐃⵠΔΔⲆ], ⵠⵠᐃΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆΔⵠΔ].id = Ⲇᐃ.ΔⲆΔⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔᐃⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆⵠᐃᐃΔᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔᐃⵠΔ].id = Ⲇᐃ.ⲆΔᐃⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⲆⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃΔΔᐃᐃΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⲆⵠᐃ].id = Ⲇᐃ.ΔΔⲆⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⵠⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆⲆᐃⵠᐃⲆ], ΔⵠᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⵠⲆΔ].id = Ⲇᐃ.ⲆᐃⵠⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆΔⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠᐃⲆᐃᐃⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆΔⵠᐃ].id = Ⲇᐃ.ⲆⲆΔⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⲆⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⵠᐃᐃΔⵠⲆ], ⵠⵠᐃΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⲆⲆⲆ].id = Ⲇᐃ.ⵠⵠⲆⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆⵠᐃᐃⲆⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆᐃᐃ].id = Ⲇᐃ.ⵠⲆⲆᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔΔⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆΔΔⵠΔⲆΔ], ΔⵠⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔΔⲆⲆ].id = Ⲇᐃ.ⲆΔΔⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔᐃΔⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆⲆΔΔⲆᐃ], ᐃⲆᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔᐃΔⲆ].id = Ⲇᐃ.ᐃΔᐃΔⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆⲆⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆⲆⲆΔⵠⵠ], ⵠⵠⵠⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆⲆⵠΔ].id = Ⲇᐃ.ᐃⲆⲆⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔΔΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠᐃΔΔⲆⲆⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔΔΔΔ].id = Ⲇᐃ.ⵠΔΔΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⵠΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠᐃⵠΔⲆᐃ], ⵠΔⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⵠΔΔ].id = Ⲇᐃ.ⲆᐃⵠΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.Δⵠᐃᐃⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⲆᐃΔⲆᐃΔ], ⲆΔⲆΔ);
		this.ⵠⵠΔ[Ⲇᐃ.Δⵠᐃᐃⵠ].id = Ⲇᐃ.Δⵠᐃᐃⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔΔᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃᐃΔⲆᐃᐃ], ᐃⵠⲆⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔΔᐃᐃ].id = Ⲇᐃ.ⲆΔΔᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.Ⲇᐃⵠᐃᐃᐃⵠ], ⲆΔΔⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆⲆ].id = Ⲇᐃ.ⲆⲆⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔⲆᐃⵠⵠⲆ], ΔΔⲆᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⲆᐃ].id = Ⲇᐃ.ᐃΔⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⵠⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃᐃᐃⵠⲆⲆ], ΔⵠⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⵠⵠᐃ].id = Ⲇᐃ.ⵠΔⵠⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⲆⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃⲆⲆΔΔΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⲆⲆⲆ].id = Ⲇᐃ.ᐃᐃⲆⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠΔⵠⲆᐃⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔⵠⲆ].id = Ⲇᐃ.ⲆᐃΔⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⵠΔⲆ], ΔⲆΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃᐃⲆ].id = Ⲇᐃ.ΔⵠᐃᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆⲆΔⵠΔⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆⲆΔ].id = Ⲇᐃ.ⵠⲆⲆⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔΔⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃΔΔᐃⵠⵠⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔΔⲆⲆ].id = Ⲇᐃ.ΔΔΔⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃᐃⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠΔᐃⲆᐃΔΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃᐃⵠⲆ].id = Ⲇᐃ.ⲆᐃᐃⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃΔΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆⲆⲆᐃΔⲆ], ΔΔⲆᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃΔΔᐃ].id = Ⲇᐃ.ⵠᐃΔΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⲆⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃΔΔⲆΔΔᐃ], ⵠΔⲆΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⲆⵠⵠ].id = Ⲇᐃ.ⵠΔⲆⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⵠⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⵠⲆΔΔᐃᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⵠⵠΔ].id = Ⲇᐃ.ⵠΔⵠⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃΔᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃᐃᐃᐃΔⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃΔᐃᐃ].id = Ⲇᐃ.ᐃᐃΔᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃΔΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠΔⵠⵠⵠΔ], ⵠᐃⲆᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃΔΔⵠ].id = Ⲇᐃ.ⵠᐃΔΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃⲆΔⵠⲆⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃⲆΔ].id = Ⲇᐃ.ᐃⵠᐃⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆᐃᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆΔⵠΔⵠΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆᐃᐃΔ].id = Ⲇᐃ.ⲆⲆᐃᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆⵠⲆΔᐃⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆᐃΔ].id = Ⲇᐃ.ⲆⲆⲆᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃΔⵠⵠΔⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃᐃΔ].id = Ⲇᐃ.ᐃⵠᐃᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃᐃᐃⲆⵠⵠ], ⲆΔΔⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔⲆⲆ].id = Ⲇᐃ.ᐃⵠΔⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆΔⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠᐃⵠᐃⵠⵠⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆΔⵠⲆ].id = Ⲇᐃ.ᐃⲆΔⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃᐃⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆΔΔⲆΔⵠᐃ], ΔⵠⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃᐃⵠΔ].id = Ⲇᐃ.ᐃᐃᐃⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆᐃΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠⵠⲆᐃΔᐃ], ⵠⵠⵠⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆᐃΔⵠ].id = Ⲇᐃ.ⵠⲆᐃΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⲆΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⲆⲆⲆ], ΔⵠⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⲆΔᐃ].id = Ⲇᐃ.ⵠΔⲆΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠΔⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠᐃΔⵠⵠᐃ], ΔⵠⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠΔⲆ].id = Ⲇᐃ.ⵠⵠⵠΔⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔΔⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆΔⵠⲆⲆⵠ], ⵠᐃⲆᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔΔⵠᐃ].id = Ⲇᐃ.ᐃΔΔⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆΔⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠᐃⵠᐃΔᐃᐃ], ᐃⲆᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆΔⲆⵠ].id = Ⲇᐃ.ΔⲆΔⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⲆΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆᐃᐃᐃᐃᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⲆΔΔ].id = Ⲇᐃ.ⲆⵠⲆΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔⵠᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠΔⵠᐃΔⲆΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔⵠᐃᐃ].id = Ⲇᐃ.ⲆΔⵠᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⲆΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠᐃⲆ], ᐃΔΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⲆΔᐃ].id = Ⲇᐃ.ⲆᐃⲆΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⵠΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆⵠᐃⲆⵠⵠ], ᐃΔΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⵠΔΔ].id = Ⲇᐃ.ᐃΔⵠΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠΔᐃⲆⲆΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔⲆⲆ].id = Ⲇᐃ.ⲆᐃΔⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠΔᐃΔⵠⵠⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆΔᐃ].id = Ⲇᐃ.ⵠⲆⲆΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆᐃΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃΔⵠⲆΔᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆᐃΔᐃ].id = Ⲇᐃ.ᐃⲆᐃΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠΔⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃᐃⵠᐃⵠⲆ], ⵠΔⲆΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠΔⵠⲆ].id = Ⲇᐃ.ⵠⵠΔⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⲆΔⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠᐃⲆᐃᐃⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⲆΔⲆ].id = Ⲇᐃ.ⵠᐃⲆΔⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⲆΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔⵠΔᐃⵠΔ], ᐃⵠᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⲆΔⵠ].id = Ⲇᐃ.ᐃΔⲆΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔᐃⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔΔⲆᐃΔⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔᐃⲆΔ].id = Ⲇᐃ.ⲆΔᐃⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆⵠΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆΔⲆΔⲆⵠ], ⵠⵠᐃΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆⵠΔᐃ].id = Ⲇᐃ.ΔⲆⵠΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃΔⵠᐃᐃⲆⲆ], ⲆΔⲆΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠⵠᐃ].id = Ⲇᐃ.ᐃᐃⵠⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃᐃΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃΔⵠⵠⵠᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃᐃΔⵠ].id = Ⲇᐃ.ⲆᐃᐃΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⲆⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔΔΔⲆᐃΔ], ΔⵠᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⲆⲆᐃ].id = Ⲇᐃ.ΔΔⲆⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆⵠⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠΔΔΔΔΔ], ᐃᐃΔⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆⵠⲆⲆ].id = Ⲇᐃ.ΔⲆⵠⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆΔⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆⵠⲆⵠΔᐃ], ᐃⵠᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆΔⵠᐃ].id = Ⲇᐃ.ⵠⲆΔⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⵠⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠᐃⲆΔΔᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⵠⵠᐃ].id = Ⲇᐃ.ⵠⲆⵠⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃΔⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆᐃⲆΔⲆᐃ], ΔⲆΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃΔⵠⵠ].id = Ⲇᐃ.ⵠᐃΔⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆΔᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃΔᐃᐃⵠΔᐃ], Ⲇⵠᐃᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆΔᐃⲆ].id = Ⲇᐃ.ⵠⲆΔᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃᐃⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠᐃⲆⲆⵠⵠΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃᐃⵠ].id = Ⲇᐃ.ᐃⵠᐃᐃⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠᐃⵠΔⲆⵠⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠΔΔ].id = Ⲇᐃ.ⵠⵠⵠΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⲆⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⲆⲆᐃΔⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⲆⲆΔ].id = Ⲇᐃ.ⵠⵠⲆⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⲆⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃΔⲆᐃⲆⲆ], ΔⵠⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⲆⲆⵠ].id = Ⲇᐃ.ⵠΔⲆⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔᐃⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⵠᐃⲆᐃΔⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔᐃⲆⵠ].id = Ⲇᐃ.ΔΔᐃⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃᐃᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆⵠΔⵠᐃⵠ], ΔⵠⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃᐃᐃⲆ].id = Ⲇᐃ.ΔᐃᐃᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.Δⵠⵠᐃᐃᐃⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔᐃᐃ].id = Ⲇᐃ.ⲆᐃΔᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃᐃⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆⲆⲆⲆⲆΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃᐃⵠᐃ].id = Ⲇᐃ.ᐃᐃᐃⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠΔᐃⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔⲆΔⵠᐃᐃ], ⲆΔΔⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠΔᐃⵠ].id = Ⲇᐃ.ΔⵠΔᐃⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠⲆᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠΔᐃⵠⵠⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠⲆᐃⲆ].id = Ⲇᐃ.ΔⵠⲆᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⲆᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⵠⵠⵠΔⲆ], ᐃΔΔⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⲆᐃΔ].id = Ⲇᐃ.ⲆⵠⲆᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⲆΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔᐃⲆⲆᐃⵠ], Ⲇⵠᐃᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⲆΔⵠ].id = Ⲇᐃ.ΔᐃⲆΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⲆᐃⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠⲆᐃⲆᐃⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⲆᐃⵠ].id = Ⲇᐃ.ᐃⵠⲆᐃⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃΔⵠⲆⵠΔⲆ], Ⲇⵠᐃᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠⲆᐃ].id = Ⲇᐃ.ᐃᐃⵠⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⵠᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠΔⲆᐃⲆⲆⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⵠᐃⲆ].id = Ⲇᐃ.ᐃⵠⵠᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠⵠᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⲆⲆⲆΔᐃ], ⵠⵠᐃΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠⵠᐃⲆ].id = Ⲇᐃ.ΔⵠⵠᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃΔⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠΔⵠΔⵠΔ], ᐃⲆᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃΔⲆΔ].id = Ⲇᐃ.ⵠᐃΔⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⲆᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠΔⲆᐃΔⲆ], ᐃⲆᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⲆᐃⲆ].id = Ⲇᐃ.ΔΔⲆᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃᐃⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠᐃΔᐃΔⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃᐃⵠⲆ].id = Ⲇᐃ.ᐃᐃᐃⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆᐃⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠΔⵠⵠᐃᐃⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆᐃⲆᐃ].id = Ⲇᐃ.ⲆⲆᐃⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆΔⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔⲆᐃΔⵠⲆ], ⵠΔⲆΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆΔⵠⵠ].id = Ⲇᐃ.ⲆⲆΔⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠΔⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔΔⵠ], ᐃΔΔⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠΔⵠⲆ].id = Ⲇᐃ.ΔⵠΔⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆᐃᐃᐃⵠΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔᐃᐃ].id = Ⲇᐃ.ᐃⵠΔᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⲆᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠΔⲆⵠΔⵠⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⲆᐃⲆ].id = Ⲇᐃ.ΔᐃⲆᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠⵠᐃⲆΔᐃ], ᐃΔᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆⵠᐃ].id = Ⲇᐃ.ⵠⲆⲆⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠᐃⵠᐃΔᐃⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠⵠⲆ].id = Ⲇᐃ.ⵠⵠⵠⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⵠᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠⲆⲆᐃⲆⲆ], ⵠᐃⵠΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⵠᐃΔ].id = Ⲇᐃ.ᐃΔⵠᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⲆᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆᐃⵠⵠⲆⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⲆᐃΔ].id = Ⲇᐃ.ⲆᐃⲆᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⵠᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⵠΔΔΔᐃ], ⵠᐃⵠΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⵠᐃΔ].id = Ⲇᐃ.ⲆⵠⵠᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⲆᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃΔⵠΔⵠΔⲆ], ⲆΔⲆΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⲆᐃⲆ].id = Ⲇᐃ.ᐃᐃⲆᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠᐃⲆⵠΔⲆ], ⵠⵠᐃΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠⲆⵠ].id = Ⲇᐃ.ᐃᐃⵠⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃᐃⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠᐃⲆΔΔⲆⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃᐃⲆΔ].id = Ⲇᐃ.ⵠᐃᐃⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⲆⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆⵠᐃⵠⵠᐃ], ⵠⵠᐃΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⲆⵠᐃ].id = Ⲇᐃ.ΔᐃⲆⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔΔᐃⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃᐃⵠⵠⲆΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔΔᐃⵠ].id = Ⲇᐃ.ᐃΔΔᐃⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆⵠᐃⲆΔΔ], ᐃⵠⲆⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠᐃᐃ].id = Ⲇᐃ.ⵠⵠⵠᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⵠΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⵠⵠⲆΔⲆΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⵠΔᐃ].id = Ⲇᐃ.ΔᐃⵠΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔᐃⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠᐃⲆⲆⲆⲆ], ᐃⵠⲆⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔᐃⵠ].id = Ⲇᐃ.ᐃⵠΔᐃⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔΔΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠⵠΔⲆⵠΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔΔΔΔ].id = Ⲇᐃ.ΔΔΔΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠΔⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃΔⲆΔⲆᐃ], ⲆΔⲆΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠΔⲆⵠ].id = Ⲇᐃ.ΔⵠΔⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⵠΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠᐃⵠΔᐃⵠⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⵠΔΔ].id = Ⲇᐃ.ΔΔⵠΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔΔⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⵠⵠⲆⵠᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔΔⵠΔ].id = Ⲇᐃ.ΔΔΔⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠⲆᐃᐃΔΔ], ⲆΔΔⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⲆΔⵠ].id = Ⲇᐃ.ⵠⲆⲆΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔΔⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃΔⲆᐃΔᐃ], ⵠⵠⵠⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔΔⵠⵠ].id = Ⲇᐃ.ᐃΔΔⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.Ⲇⵠⵠⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆⵠⵠⵠΔᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.Ⲇⵠⵠⵠⵠ].id = Ⲇᐃ.Ⲇⵠⵠⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆⵠᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃⵠΔⲆᐃᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆⵠᐃᐃ].id = Ⲇᐃ.ΔⲆⵠᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⵠᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⵠᐃⲆΔⲆΔ], ᐃΔΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⵠᐃΔ].id = Ⲇᐃ.ⵠΔⵠᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⲆⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃⲆΔᐃΔⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⲆⲆᐃ].id = Ⲇᐃ.ᐃᐃⲆⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔⲆⵠⲆⵠⲆ], ΔⵠᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃⲆΔ].id = Ⲇᐃ.ΔⵠᐃⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⲆⲆⲆΔⲆⲆ], ᐃΔΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔᐃⲆ].id = Ⲇᐃ.ᐃⵠΔᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⵠΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔΔᐃΔⲆΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⵠΔⵠ].id = Ⲇᐃ.ⵠΔⵠΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⲆⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆⵠⲆᐃⵠⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⲆⵠᐃ].id = Ⲇᐃ.ⲆᐃⲆⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⲆΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠᐃΔⵠᐃΔ], ⵠᐃⵠΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⲆΔᐃ].id = Ⲇᐃ.ⵠᐃⲆΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆⲆᐃⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠᐃⵠⲆⲆᐃ], ⵠΔⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆⲆᐃⵠ].id = Ⲇᐃ.ᐃⲆⲆᐃⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆΔⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔᐃⵠ], ⵠΔⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆΔⲆⲆ].id = Ⲇᐃ.ᐃⲆΔⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠⲆᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆᐃᐃⵠΔᐃ], ⵠᐃⵠΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠⲆᐃΔ].id = Ⲇᐃ.ΔⵠⲆᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠᐃΔⵠᐃᐃ], ᐃⲆᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠᐃᐃ].id = Ⲇᐃ.ᐃᐃⵠᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃⵠⵠΔᐃⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠⲆⲆ].id = Ⲇᐃ.ᐃᐃⵠⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆᐃᐃⲆΔⵠ], ᐃΔΔⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆⵠⵠ].id = Ⲇᐃ.ⲆⲆⲆⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⲆΔΔⵠⵠΔ], ⵠⵠⵠⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠΔΔ].id = Ⲇᐃ.ᐃᐃⵠΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃᐃΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆΔΔⲆⲆⵠΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃᐃΔⵠ].id = Ⲇᐃ.ⵠᐃᐃΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⵠᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⵠΔᐃΔⵠᐃ], ᐃᐃΔⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⵠᐃⲆ].id = Ⲇᐃ.ΔᐃⵠᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⵠⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⲆᐃⵠⵠΔ], ᐃᐃΔⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⵠⲆᐃ].id = Ⲇᐃ.ⵠᐃⵠⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠΔⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔᐃⲆΔᐃᐃ], ⵠΔⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠΔⵠⲆ].id = Ⲇᐃ.ⲆⵠΔⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃᐃⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔᐃⲆᐃΔⲆΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠᐃᐃⲆ].id = Ⲇᐃ.ᐃⵠᐃᐃⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⲆᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠΔΔⲆⵠⵠ], ⲆΔΔⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃΔⲆᐃᐃ].id = Ⲇᐃ.ᐃΔⲆᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⵠΔΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠⲆᐃⵠⵠⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⵠΔΔ].id = Ⲇᐃ.ⵠⲆⵠΔΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⲆΔⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔΔᐃᐃᐃⵠ], ᐃΔΔⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⲆΔⲆ].id = Ⲇᐃ.ΔΔⲆΔⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⵠⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠΔⵠⵠᐃΔΔ], ΔΔⲆᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⵠⲆᐃ].id = Ⲇᐃ.ⲆⵠⵠⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃᐃⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃᐃⲆⵠⵠⵠ], ᐃⲆᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃᐃⵠΔ].id = Ⲇᐃ.ⲆᐃᐃⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆⵠⵠⲆΔⲆ], ⵠΔⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠΔᐃΔ].id = Ⲇᐃ.ᐃⵠΔᐃΔ;
		this.ⵠⵠΔᐃΔ = [];
		for (var Δᐃ = ⲆⲆᐃΔ; Δᐃ < 250; Δᐃ++) this.ⵠⵠΔᐃΔ[Δᐃ] = Ⲇⵠᐃ(ᐃΔΔ, 0, "", Ⲇⵠ[ⵠ.ⲆΔᐃΔΔΔⲆ]);
		this.ᐃⲆᐃ = [];
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆᐃⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⵠⵠⲆΔⲆ], ᐃΔΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆᐃⲆⵠ].id = Ⲇᐃ.ⵠⲆᐃⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔΔⲆⲆΔⲆ], ⵠᐃⵠΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⵠᐃ].id = Ⲇᐃ.ᐃⲆΔⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠⵠᐃⵠⵠΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃᐃ].id = Ⲇᐃ.ᐃⵠᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃᐃ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃᐃ].info.ⵠΔ[ⵠⵠΔᐃ];
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔΔⵠⲆᐃⵠ], ⵠΔⲆⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⲆ].id = Ⲇᐃ.ᐃⲆΔⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⲆ].info.ⵠΔ[ᐃⵠΔⲆ] = this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⲆ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⲆΔⵠⵠⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆᐃⵠ].id = Ⲇᐃ.ⲆⲆⲆᐃⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⲆᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⲆᐃΔΔⵠ], ᐃⲆᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⲆᐃⲆ].id = Ⲇᐃ.ⵠⵠⲆᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠⵠᐃᐃⵠΔ], ᐃΔᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⵠᐃ].id = Ⲇᐃ.ᐃⵠⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⵠᐃ].info.ⵠΔ[Δᐃᐃⵠ] = this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⵠᐃ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⲆΔⵠΔⲆ], ᐃⲆᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆᐃᐃ].id = Ⲇᐃ.ⵠⲆᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆᐃᐃ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆᐃᐃ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.Ⲇⵠᐃᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⵠⲆⲆⲆᐃ], ⵠⵠⵠⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.Ⲇⵠᐃᐃᐃ].id = Ⲇᐃ.Ⲇⵠᐃᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃᐃⵠΔⵠⲆ], ΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⲆⲆᐃ].id = Ⲇᐃ.ⵠᐃⲆⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆΔⵠΔⵠⲆ], ᐃᐃΔⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆΔΔ].id = Ⲇᐃ.ⲆⲆⲆΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃΔΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⵠⵠⲆᐃⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃΔΔΔ].id = Ⲇᐃ.ΔᐃΔΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔᐃᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃΔᐃᐃΔⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔᐃᐃⲆ].id = Ⲇᐃ.ᐃΔᐃᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⲆⲆⲆᐃⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆⲆᐃ].id = Ⲇᐃ.ⲆⵠⲆⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠᐃⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃΔΔⲆᐃⲆ], ᐃΔΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠᐃⲆⵠ].id = Ⲇᐃ.ⵠⵠᐃⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔΔΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⲆⵠⲆᐃΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔΔΔⵠ].id = Ⲇᐃ.ⲆΔΔΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⲆⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠΔΔⲆⵠⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⲆⲆⲆ].id = Ⲇᐃ.ⲆᐃⲆⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆᐃᐃᐃΔⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃⲆᐃ].id = Ⲇᐃ.ᐃⵠᐃⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔⲆⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.Ⲇᐃᐃⵠⵠⵠⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔⲆⵠΔ].id = Ⲇᐃ.ⲆΔⲆⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔᐃΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃᐃΔᐃⵠΔ], ⵠᐃⵠΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔᐃΔⵠ].id = Ⲇᐃ.ΔΔᐃΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠᐃⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⲆᐃᐃΔⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠᐃⵠΔ].id = Ⲇᐃ.ⵠⵠᐃⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⲆΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔⵠΔⵠⵠⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⲆΔᐃ].id = Ⲇᐃ.ᐃᐃⲆΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆΔΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠᐃΔ], ⲆΔΔⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆΔΔᐃ].id = Ⲇᐃ.ⲆⲆΔΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠΔΔᐃΔᐃ], ⲆΔΔⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆⵠⵠ].id = Ⲇᐃ.ⲆⵠⲆⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆⵠⵠ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆⵠⵠ].info.ⵠΔ[ΔΔⲆⲆ];
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠΔⲆⲆⵠΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠΔⵠ].id = Ⲇᐃ.ΔⲆⵠΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⵠⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃΔⵠΔⲆⵠ], ΔⵠⲆⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⵠⵠΔ].id = Ⲇᐃ.ⵠⲆⵠⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⵠⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆⲆΔ], ΔⵠᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⵠⲆΔ].id = Ⲇᐃ.ⲆⵠⵠⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⵠⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⵠᐃᐃΔⵠ], ΔΔⲆᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⵠⲆⵠ].id = Ⲇᐃ.ⵠΔⵠⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔΔΔᐃᐃⲆ], ᐃΔᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔⵠΔ].id = Ⲇᐃ.ᐃⵠΔⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠΔᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔΔΔⵠᐃΔ], ΔⵠᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠΔᐃᐃ].id = Ⲇᐃ.ⵠⵠΔᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃΔⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⵠΔΔⵠᐃ], ᐃⲆᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃΔⵠⵠ].id = Ⲇᐃ.ΔᐃΔⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆΔᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⲆⲆᐃᐃⵠ], ᐃᐃΔⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆΔᐃᐃ].id = Ⲇᐃ.ⲆⲆΔᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⲆⵠᐃⵠᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆⲆ].id = Ⲇᐃ.ⲆⲆⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⵠⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⲆᐃΔⵠⵠ], ᐃⵠᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⵠⲆⲆ].id = Ⲇᐃ.ⲆⲆⵠⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⵠⲆΔⲆⲆ], ⵠΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃΔΔ].id = Ⲇᐃ.ΔⵠᐃΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⲆᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆᐃΔΔⵠⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⲆᐃΔ].id = Ⲇᐃ.ᐃΔⲆᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠᐃⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆⲆΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠᐃⵠⲆ].id = Ⲇᐃ.ⵠⵠᐃⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃΔⵠΔⵠᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠΔⲆ].id = Ⲇᐃ.ΔⲆⵠΔⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠΔⲆ].info.ⵠΔ[ᐃᐃᐃᐃ] = this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠΔⲆ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⲆᐃᐃⲆⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠᐃⲆ].id = Ⲇᐃ.ΔⲆⵠᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠᐃⲆ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠᐃⲆ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔΔΔⲆΔΔ], ᐃΔΔⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆⲆⵠ].id = Ⲇᐃ.ⵠⲆⲆⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆⲆⵠ].info.ⵠΔ[Ⲇⵠᐃⵠ] = this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆⲆⵠ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⲆΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⲆΔΔ].id = Ⲇᐃ.ⵠⵠⲆΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⲆⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃⵠΔⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⲆⲆΔ].id = Ⲇᐃ.ᐃⵠⲆⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠᐃⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⲆⲆᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠᐃⲆΔ].id = Ⲇᐃ.ⲆⵠᐃⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃΔⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔΔⲆΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃΔⵠΔ].id = Ⲇᐃ.ΔᐃΔⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⵠⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⲆᐃΔⵠⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⵠⲆⲆ].id = Ⲇᐃ.ⲆⲆⵠⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⲆΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠᐃᐃⵠⲆΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⲆΔᐃ].id = Ⲇᐃ.ᐃⵠⲆΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⵠᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠᐃΔᐃᐃⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⵠᐃⲆ].id = Ⲇᐃ.ΔᐃⵠᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⵠⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠΔⲆⲆⲆᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⵠⵠΔ].id = Ⲇᐃ.ⵠᐃⵠⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⲆⲆⲆᐃⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆⲆᐃ].id = Ⲇᐃ.ⵠΔⲆⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔᐃⵠⲆᐃⵠ], ᐃⲆᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃⵠⲆ].id = Ⲇᐃ.ᐃⵠᐃⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⵠⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⵠⲆᐃΔΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⵠⲆᐃ].id = Ⲇᐃ.ⵠᐃⵠⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.Δⵠⵠⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠⲆᐃΔⲆⵠ], ⵠΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.Δⵠⵠⵠⵠ].id = Ⲇᐃ.Δⵠⵠⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠⵠⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠⲆⵠΔᐃⵠ], ᐃⵠⲆⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠⵠⲆⲆ].id = Ⲇᐃ.ΔⵠⵠⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔᐃΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆᐃⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔᐃΔΔ].id = Ⲇᐃ.ᐃΔᐃΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠᐃⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃⲆⲆⵠⲆΔ], ⵠⵠᐃΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠᐃⲆⲆ].id = Ⲇᐃ.ⵠⵠᐃⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⵠᐃⵠᐃᐃ], ⵠᐃⲆᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⲆⲆᐃ].id = Ⲇᐃ.ΔᐃⲆⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⲆⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃΔⵠᐃΔΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⲆⲆΔ].id = Ⲇᐃ.ⵠᐃⲆⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆᐃⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃⵠΔᐃΔⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆᐃⲆⵠ].id = Ⲇᐃ.ΔⲆᐃⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠⲆⲆΔᐃᐃ], ᐃᐃΔⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆⵠᐃ].id = Ⲇᐃ.ⲆⵠⲆⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠΔΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⵠΔΔᐃΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠΔΔᐃ].id = Ⲇᐃ.ⵠⵠΔΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⵠⵠⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆΔⲆⲆ].id = Ⲇᐃ.ⲆⲆΔⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔΔΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠⲆⲆᐃⵠⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔΔΔᐃ].id = Ⲇᐃ.ⵠΔΔΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃᐃΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠᐃΔᐃⲆᐃ], ⵠΔⲆⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃᐃΔᐃ].id = Ⲇᐃ.ΔᐃᐃΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃΔⵠΔᐃᐃ], Ⲇⵠᐃᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆⲆᐃ].id = Ⲇᐃ.ⵠⲆⲆⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⲆⵠⵠⵠᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠⲆⲆ].id = Ⲇᐃ.ⵠⵠⵠⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⲆⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⲆΔᐃᐃΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⲆⲆΔ].id = Ⲇᐃ.ΔΔⲆⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠⲆᐃⵠⲆⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆΔⵠ].id = Ⲇᐃ.ⲆⲆⲆΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⵠᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆΔᐃⲆⲆᐃ], ΔΔⲆᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⵠᐃΔ].id = Ⲇᐃ.ⵠᐃⵠᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⲆᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆⲆⵠⵠⲆᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⲆᐃⲆ].id = Ⲇᐃ.ᐃΔⲆᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⲆᐃᐃᐃⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃᐃΔ].id = Ⲇᐃ.ΔⵠᐃᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⵠⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⵠⲆΔⲆⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⵠⵠⲆ].id = Ⲇᐃ.ΔΔⵠⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⵠⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃⲆⲆΔᐃⲆ], ΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⵠⵠⵠ].id = Ⲇᐃ.ⵠⲆⵠⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔΔⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔΔⲆⵠΔᐃ], ⵠΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔΔⲆⵠ].id = Ⲇᐃ.ᐃΔΔⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⲆᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔᐃΔᐃᐃΔ], ᐃⵠᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⲆᐃΔ].id = Ⲇᐃ.ⵠⵠⲆᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠΔⲆⲆΔⲆ], ⵠᐃⵠΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔⵠᐃ].id = Ⲇᐃ.ᐃⵠΔⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔΔᐃ], ⵠⵠᐃΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃⲆᐃ].id = Ⲇᐃ.ΔⵠᐃⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔᐃⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔⵠΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔᐃⵠΔ].id = Ⲇᐃ.ⲆΔᐃⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆΔⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⲆⲆⵠΔΔ], ΔⵠⲆⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆΔⵠΔ].id = Ⲇᐃ.ΔⲆΔⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⲆⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⵠⲆⵠⵠΔ], ⵠᐃⵠΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⲆⵠᐃ].id = Ⲇᐃ.ΔΔⲆⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⵠⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔΔᐃᐃᐃᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⵠⲆΔ].id = Ⲇᐃ.ⲆᐃⵠⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆΔⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠΔΔⲆᐃᐃ], ⲆΔⲆΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆΔⵠᐃ].id = Ⲇᐃ.ⲆⲆΔⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⲆⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔⲆⵠⲆⵠⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⲆⲆⲆ].id = Ⲇᐃ.ⵠⵠⲆⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔᐃΔⲆⲆᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆᐃᐃ].id = Ⲇᐃ.ⵠⲆⲆᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⲆⵠⵠⲆᐃ], ᐃᐃΔⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔΔⲆⲆ].id = Ⲇᐃ.ⲆΔΔⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔᐃΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆΔΔᐃⲆⵠ], ⵠΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔᐃΔⲆ].id = Ⲇᐃ.ᐃΔᐃΔⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆⲆⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃⲆΔ], ΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆⲆⵠΔ].id = Ⲇᐃ.ᐃⲆⲆⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔΔΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠⲆΔ], ᐃⵠⲆⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔΔΔΔ].id = Ⲇᐃ.ⵠΔΔΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⵠΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔⵠⵠⵠᐃᐃ], Ⲇⵠᐃᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⵠΔΔ].id = Ⲇᐃ.ⲆᐃⵠΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.Δⵠᐃᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔΔΔⲆⲆΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.Δⵠᐃᐃⵠ].id = Ⲇᐃ.Δⵠᐃᐃⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔΔᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠᐃᐃΔᐃᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔΔᐃᐃ].id = Ⲇᐃ.ⲆΔΔᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔΔᐃᐃ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔΔᐃᐃ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⲆⵠᐃⵠᐃ], ΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆⲆ].id = Ⲇᐃ.ⲆⲆⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔᐃⲆⲆⲆⲆ], ᐃⵠᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⲆᐃ].id = Ⲇᐃ.ᐃΔⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⲆᐃ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⲆᐃ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⵠⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃᐃᐃⲆΔᐃ], ⵠᐃⵠΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⵠⵠᐃ].id = Ⲇᐃ.ⵠΔⵠⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⲆⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⲆⲆⵠⵠᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⲆⲆⲆ].id = Ⲇᐃ.ᐃᐃⲆⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⵠⵠΔ], ΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔⵠⲆ].id = Ⲇᐃ.ⲆᐃΔⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔΔᐃⲆᐃⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃᐃⲆ].id = Ⲇᐃ.ΔⵠᐃᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆᐃᐃⵠⵠᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆⲆΔ].id = Ⲇᐃ.ⵠⲆⲆⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃΔᐃΔⵠⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔΔⲆⲆ].id = Ⲇᐃ.ΔΔΔⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃᐃⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠΔᐃΔᐃΔ], ᐃΔΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃᐃⵠⲆ].id = Ⲇᐃ.ⲆᐃᐃⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃΔΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆᐃΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃΔΔᐃ].id = Ⲇᐃ.ⵠᐃΔΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠΔᐃⵠⵠᐃ], ᐃΔΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆⵠⵠ].id = Ⲇᐃ.ⵠΔⲆⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⵠⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔⵠⲆⲆⲆⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⵠⵠΔ].id = Ⲇᐃ.ⵠΔⵠⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃΔᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆΔΔⵠΔΔ], ⵠᐃⵠΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃΔᐃᐃ].id = Ⲇᐃ.ᐃᐃΔᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃΔΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃⲆⵠ], ⲆΔΔⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃΔΔⵠ].id = Ⲇᐃ.ⵠᐃΔΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔᐃΔⵠᐃⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃⲆΔ].id = Ⲇᐃ.ᐃⵠᐃⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆᐃᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔᐃΔ], ⲆΔΔⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆᐃᐃΔ].id = Ⲇᐃ.ⲆⲆᐃᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔΔⵠΔⲆⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆᐃΔ].id = Ⲇᐃ.ⲆⲆⲆᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆᐃΔ].info.ⵠΔ[ⲆⲆⵠᐃ] = this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆᐃΔ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠΔΔⵠⲆᐃ], ⵠΔⲆⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃᐃΔ].id = Ⲇᐃ.ᐃⵠᐃᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃᐃΔ].info.ⵠΔ[ᐃⵠΔⲆ] = this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃᐃΔ].info.ⵠΔ[Δⵠⵠ];
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⵠᐃⲆᐃᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔⲆⲆ].id = Ⲇᐃ.ᐃⵠΔⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔⲆⲆ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔⲆⲆ].info.ⵠΔ[ⵠΔΔᐃ];
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆΔᐃⵠⵠΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⵠⲆ].id = Ⲇᐃ.ᐃⲆΔⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⵠⲆ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⵠⲆ].info.ⵠΔ[ΔᐃΔ];
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃᐃⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔΔⵠⵠᐃⲆ], ⵠΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃᐃⵠΔ].id = Ⲇᐃ.ᐃᐃᐃⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆᐃΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔᐃⵠΔⲆᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆᐃΔⵠ].id = Ⲇᐃ.ⵠⲆᐃΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⵠⵠⲆᐃⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆΔᐃ].id = Ⲇᐃ.ⵠΔⲆΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⲆⲆⲆΔᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠΔⲆ].id = Ⲇᐃ.ⵠⵠⵠΔⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔΔⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⲆⲆⵠⲆΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔΔⵠᐃ].id = Ⲇᐃ.ᐃΔΔⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆΔⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔΔⵠⲆⵠⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆΔⲆⵠ].id = Ⲇᐃ.ΔⲆΔⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆᐃⲆᐃᐃΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆΔΔ].id = Ⲇᐃ.ⲆⵠⲆΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔⵠᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠⵠⲆᐃⵠΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔⵠᐃᐃ].id = Ⲇᐃ.ⲆΔⵠᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⲆΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆΔⵠⲆᐃⲆ], Ⲇⵠᐃᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⲆΔᐃ].id = Ⲇᐃ.ⲆᐃⲆΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⵠΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆΔΔⲆᐃⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⵠΔΔ].id = Ⲇᐃ.ᐃΔⵠΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⲆᐃⵠΔⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔⲆⲆ].id = Ⲇᐃ.ⲆᐃΔⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃᐃⵠΔΔΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆΔᐃ].id = Ⲇᐃ.ⵠⲆⲆΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆᐃΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⲆⲆΔⵠᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆᐃΔᐃ].id = Ⲇᐃ.ᐃⲆᐃΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠΔⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆΔⵠⵠⵠᐃ], ᐃΔᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠΔⵠⲆ].id = Ⲇᐃ.ⵠⵠΔⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆΔⲆⵠΔΔ], ΔΔⲆᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠⵠᐃ].id = Ⲇᐃ.ᐃᐃⵠⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⲆΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⲆⲆⵠΔΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⲆΔⲆ].id = Ⲇᐃ.ⵠᐃⲆΔⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⲆΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠⵠᐃΔⲆΔ], ᐃᐃΔⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⲆΔⵠ].id = Ⲇᐃ.ᐃΔⲆΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔᐃⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔᐃΔⵠᐃⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔᐃⲆΔ].id = Ⲇᐃ.ⲆΔᐃⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠⲆᐃ], ⵠᐃⲆᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠΔᐃ].id = Ⲇᐃ.ΔⲆⵠΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃᐃΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃᐃᐃΔⵠⵠ], ⵠΔⲆⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃᐃΔⵠ].id = Ⲇᐃ.ⲆᐃᐃΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃᐃΔⵠ].info.ⵠΔ[ⲆᐃⵠⲆ] = this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃᐃΔⵠ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃⵠⵠΔᐃⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⲆⲆᐃ].id = Ⲇᐃ.ΔΔⲆⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔᐃⲆΔⵠⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠⲆⲆ].id = Ⲇᐃ.ΔⲆⵠⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆΔⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⲆⲆᐃ], ᐃΔΔⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆΔⵠᐃ].id = Ⲇᐃ.ⵠⲆΔⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⵠⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆᐃᐃ], ⲆΔⲆΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⵠⵠᐃ].id = Ⲇᐃ.ⵠⲆⵠⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃΔⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆᐃΔⲆⵠΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃΔⵠⵠ].id = Ⲇᐃ.ⵠᐃΔⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆΔᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⲆⵠΔⵠᐃ], ⲆΔⲆΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆΔᐃⲆ].id = Ⲇᐃ.ⵠⲆΔᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃΔᐃΔᐃᐃ], ΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃᐃⵠ].id = Ⲇᐃ.ᐃⵠᐃᐃⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔΔⵠⲆⲆⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠΔΔ].id = Ⲇᐃ.ⵠⵠⵠΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠΔΔ].info.ⵠΔ[ΔⲆᐃⲆ] = this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠΔΔ].info.ⵠΔ[ⲆᐃⲆ];
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⲆⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃⲆΔⵠΔⲆ], ⲆΔΔⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⲆⲆΔ].id = Ⲇᐃ.ⵠⵠⲆⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⲆⲆᐃᐃⲆ], ᐃΔΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆⲆⵠ].id = Ⲇᐃ.ⵠΔⲆⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆⲆⵠ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆⲆⵠ].info.ⵠΔ[ⵠⲆΔⵠ];
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔᐃⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆΔᐃ], ⵠⵠᐃΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔᐃⲆⵠ].id = Ⲇᐃ.ΔΔᐃⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃᐃᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃᐃᐃⲆΔᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃᐃᐃⲆ].id = Ⲇᐃ.ΔᐃᐃᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔΔᐃⵠⵠⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔᐃᐃ].id = Ⲇᐃ.ⲆᐃΔᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔᐃᐃ].info.ⵠΔ[ⲆⲆΔΔ] = this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔᐃᐃ].info.ⵠΔ[ⵠᐃΔ];
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃᐃⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⵠⵠᐃΔⲆ], ᐃⵠⲆⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃᐃⵠᐃ].id = Ⲇᐃ.ᐃᐃᐃⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠΔᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⵠⲆⵠⵠⵠ], ᐃⲆᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠΔᐃⵠ].id = Ⲇᐃ.ΔⵠΔᐃⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠⲆᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃᐃⲆᐃᐃⵠ], ᐃⵠᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠⲆᐃⲆ].id = Ⲇᐃ.ΔⵠⲆᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⲆΔⵠⲆᐃ], ⵠⵠⵠⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆᐃΔ].id = Ⲇᐃ.ⲆⵠⲆᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⲆΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔⲆⲆⵠΔΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⲆΔⵠ].id = Ⲇᐃ.ΔᐃⲆΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⲆᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⵠᐃⲆΔⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⲆᐃⵠ].id = Ⲇᐃ.ᐃⵠⲆᐃⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃΔᐃ], ᐃⲆᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠⲆᐃ].id = Ⲇᐃ.ᐃᐃⵠⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⵠᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠΔⵠᐃᐃᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⵠᐃⲆ].id = Ⲇᐃ.ᐃⵠⵠᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠⵠᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⲆⵠΔⲆⲆ], ⵠᐃⵠΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠⵠᐃⲆ].id = Ⲇᐃ.ΔⵠⵠᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠⵠᐃⲆ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠⵠᐃⲆ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃΔⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⵠⲆᐃΔⵠ], ᐃⲆᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃΔⲆΔ].id = Ⲇᐃ.ⵠᐃΔⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃΔⲆΔ].info.ⵠΔ[Ⲇⵠᐃⵠ] = this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃΔⲆΔ].info.ⵠΔ[ⵠⵠΔΔ];
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⲆᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠΔⲆⵠΔΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⲆᐃⲆ].id = Ⲇᐃ.ΔΔⲆᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃᐃⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔΔΔΔΔⵠ], ⵠⵠᐃΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃᐃⵠⲆ].id = Ⲇᐃ.ᐃᐃᐃⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃᐃⵠⲆ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃᐃⵠⲆ].info.ⵠΔ[ⵠⲆⵠ];
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆᐃⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃⲆᐃⵠⲆⵠ], ⵠᐃⲆᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆᐃⲆᐃ].id = Ⲇᐃ.ⲆⲆᐃⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆΔⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⵠⲆᐃⲆᐃ], ⵠⵠᐃΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆΔⵠⵠ].id = Ⲇᐃ.ⲆⲆΔⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠΔⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔᐃⵠⲆⲆΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠΔⵠⲆ].id = Ⲇᐃ.ΔⵠΔⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⲆⲆᐃΔⲆ], ᐃᐃΔⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔᐃᐃ].id = Ⲇᐃ.ᐃⵠΔᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⲆᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⵠⵠᐃΔⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⲆᐃⲆ].id = Ⲇᐃ.ΔᐃⲆᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⲆᐃⲆ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⲆᐃⲆ].info.ⵠΔ[ⵠᐃΔⲆ];
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠⵠᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆⵠᐃ].id = Ⲇᐃ.ⵠⲆⲆⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆⵠᐃ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆⵠᐃ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠΔⲆⵠⵠⵠ], ᐃΔΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃⵠΔ].id = Ⲇᐃ.ΔⵠᐃⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠⲆⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆⲆⵠ].id = Ⲇᐃ.ⲆⵠⲆⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃᐃᐃ], Ⲇⵠᐃᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠⵠⲆ].id = Ⲇᐃ.ⵠⵠⵠⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠⵠⲆ].info.ⵠΔ[ΔⲆⲆⵠ] = this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠⵠⲆ].info.ⵠΔ[ⵠⲆᐃ];
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⵠᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠᐃⲆⲆᐃⵠ], ⵠⵠⵠⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⵠᐃΔ].id = Ⲇᐃ.ᐃΔⵠᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⵠᐃΔ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⵠᐃΔ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⲆᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃⵠᐃⲆⲆᐃ], ΔⵠᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⲆᐃΔ].id = Ⲇᐃ.ⲆᐃⲆᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⵠᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃΔⲆᐃⲆᐃ], ⵠᐃⵠΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⵠᐃΔ].id = Ⲇᐃ.ⲆⵠⵠᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⵠᐃΔ].info.ⵠΔ[ⲆᐃⵠⲆ] = this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⵠᐃΔ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⲆᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⲆⵠΔⲆΔ], ⵠᐃⲆᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⲆᐃⲆ].id = Ⲇᐃ.ᐃᐃⲆᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⲆᐃⲆ].info.ⵠΔ[ⵠⲆⵠΔ] = this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⲆᐃⲆ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⵠⲆⲆⲆⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠⲆⵠ].id = Ⲇᐃ.ᐃᐃⵠⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃᐃⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃⲆⵠⵠⵠⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃᐃⲆΔ].id = Ⲇᐃ.ⵠᐃᐃⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃᐃⲆΔ].info.ⵠΔ[ᐃᐃᐃᐃ] = this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃᐃⲆΔ].info.ⵠΔ[0];
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⲆⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃΔⵠⵠᐃᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⲆⵠᐃ].id = Ⲇᐃ.ΔᐃⲆⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔΔᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⲆⲆΔᐃᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔΔᐃⵠ].id = Ⲇᐃ.ᐃΔΔᐃⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆⵠⲆⵠⲆⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠᐃᐃ].id = Ⲇᐃ.ⵠⵠⵠᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⵠΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔᐃⲆΔᐃⲆ], ᐃⵠⲆⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⵠΔᐃ].id = Ⲇᐃ.ΔᐃⵠΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆᐃⵠⲆⵠⲆ], Ⲇⵠᐃᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔᐃⵠ].id = Ⲇᐃ.ᐃⵠΔᐃⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔΔΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔΔᐃⵠΔⵠ], ᐃᐃΔⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔΔΔΔ].id = Ⲇᐃ.ΔΔΔΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠΔⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃᐃⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠΔⲆⵠ].id = Ⲇᐃ.ΔⵠΔⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⵠΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠⲆΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⵠΔΔ].id = Ⲇᐃ.ΔΔⵠΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔΔⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠᐃⲆⲆⲆⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔΔⵠΔ].id = Ⲇᐃ.ΔΔΔⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃⲆⲆᐃⲆΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⲆΔⵠ].id = Ⲇᐃ.ⵠⲆⲆΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔΔⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆⵠⲆⲆΔᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔΔⵠⵠ].id = Ⲇᐃ.ᐃΔΔⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.Ⲇⵠⵠⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠⲆⲆⲆⲆᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.Ⲇⵠⵠⵠⵠ].id = Ⲇᐃ.Ⲇⵠⵠⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.Δᐃⵠᐃⵠⵠⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆⵠᐃᐃ].id = Ⲇᐃ.ΔⲆⵠᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠΔⵠᐃⵠΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⲆⲆᐃ].id = Ⲇᐃ.ᐃᐃⲆⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⵠⵠⲆΔᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃⲆΔ].id = Ⲇᐃ.ΔⵠᐃⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⵠᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⲆⲆΔⲆⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⵠᐃΔ].id = Ⲇᐃ.ⵠΔⵠᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠΔᐃ], ⵠΔⲆⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔᐃⲆ].id = Ⲇᐃ.ᐃⵠΔᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⵠΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆΔᐃᐃⵠᐃ], ᐃⵠⲆⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⵠΔⵠ].id = Ⲇᐃ.ⵠΔⵠΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆⲆᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃΔⵠⵠⵠΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆⲆᐃⵠ].id = Ⲇᐃ.ᐃⲆⲆᐃⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⵠΔⲆΔᐃ], ΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⲆⲆ].id = Ⲇᐃ.ᐃⲆΔⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⲆⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠᐃⵠⲆΔᐃ], Ⲇⵠᐃᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⲆⵠᐃ].id = Ⲇᐃ.ⲆᐃⲆⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⲆΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆΔᐃᐃᐃⵠ], ⵠᐃⵠΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⲆΔᐃ].id = Ⲇᐃ.ⵠᐃⲆΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠⲆᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆᐃⲆΔⵠᐃ], ᐃΔΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠⲆᐃΔ].id = Ⲇᐃ.ΔⵠⲆᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠᐃᐃΔᐃⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠᐃᐃ].id = Ⲇᐃ.ᐃᐃⵠᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆᐃⲆΔΔⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠⲆⲆ].id = Ⲇᐃ.ᐃᐃⵠⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔⵠⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆⵠⵠ].id = Ⲇᐃ.ⲆⲆⲆⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆᐃᐃⲆⲆⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠΔΔ].id = Ⲇᐃ.ᐃᐃⵠΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃᐃΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆᐃⵠⵠⲆΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃᐃΔⵠ].id = Ⲇᐃ.ⵠᐃᐃΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⵠᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠᐃΔᐃᐃⲆ], ⵠⵠᐃΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⵠᐃⲆ].id = Ⲇᐃ.ΔᐃⵠᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⵠⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⵠⲆᐃΔΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⵠⲆᐃ].id = Ⲇᐃ.ⵠᐃⵠⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠΔⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⲆⵠⲆᐃᐃ], ⵠᐃⵠΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠΔⵠⲆ].id = Ⲇᐃ.ⲆⵠΔⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠᐃΔⲆᐃᐃ], ⵠⵠᐃΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠᐃᐃⲆ].id = Ⲇᐃ.ᐃⵠᐃᐃⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⲆᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠⲆⵠᐃᐃⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃΔⲆᐃᐃ].id = Ⲇᐃ.ᐃΔⲆᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⵠΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆΔⲆΔⲆΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⵠΔΔ].id = Ⲇᐃ.ⵠⲆⵠΔΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⲆΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆΔΔᐃᐃᐃ], ⵠΔⲆⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⲆΔⲆ].id = Ⲇᐃ.ΔΔⲆΔⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⵠⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⵠΔⲆΔⵠ], ΔⵠᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⵠⲆᐃ].id = Ⲇᐃ.ⲆⵠⵠⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆΔⵠᐃⲆΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠΔᐃΔ].id = Ⲇᐃ.ᐃⵠΔᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃᐃⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃⵠⲆΔⲆΔ], ᐃⵠⲆⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃᐃⵠΔ].id = Ⲇᐃ.ⲆᐃᐃⵠΔ;
		this.ᐃⵠΔ = [];
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆᐃⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠᐃΔⲆᐃⲆ], ⲆΔⲆΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆᐃⲆⵠ].id = ⲆΔⵠ.ⵠⲆᐃⲆⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆΔⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆΔⲆᐃⵠⲆ], ⵠᐃⵠΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆΔⵠᐃ].id = ⲆΔⵠ.ᐃⲆΔⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠᐃᐃᐃΔᐃ], ⵠᐃⲆᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠⲆⲆᐃ].id = ⲆΔⵠ.ⲆⵠⲆⲆᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠᐃⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⵠⵠⵠⲆⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠᐃⲆⵠ].id = ⲆΔⵠ.ⵠⵠᐃⲆⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⲆⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⵠᐃᐃΔⲆ], ᐃΔΔΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⲆⲆⲆ].id = ⲆΔⵠ.ⲆᐃⲆⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠᐃⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⵠΔⵠ], Ⲇⵠᐃᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠᐃⲆᐃ].id = ⲆΔⵠ.ᐃⵠᐃⲆᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔΔΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆΔᐃΔᐃⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔΔΔⵠ].id = ⲆΔⵠ.ⲆΔΔΔⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.Ⲇⵠᐃᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⵠⵠⵠᐃⲆ], ᐃᐃΔⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.Ⲇⵠᐃᐃᐃ].id = ⲆΔⵠ.Ⲇⵠᐃᐃᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠΔᐃⵠⲆⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⲆⲆᐃ].id = ⲆΔⵠ.ⵠᐃⲆⲆᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⲆΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔΔΔΔᐃⲆ], ᐃΔΔΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⲆΔΔ].id = ⲆΔⵠ.ⲆⲆⲆΔΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃΔΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠΔⵠⲆⲆΔ], ᐃⵠᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃΔΔΔ].id = ⲆΔⵠ.ΔᐃΔΔΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔᐃᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠΔᐃΔⲆⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔᐃᐃⲆ].id = ⲆΔⵠ.ᐃΔᐃᐃⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔⲆⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⲆΔⵠᐃᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔⲆⵠΔ].id = ⲆΔⵠ.ⲆΔⲆⵠΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔᐃΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠΔⲆΔᐃᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔᐃΔⵠ].id = ⲆΔⵠ.ΔΔᐃΔⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃⲆΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠΔⵠΔⵠⵠ], ᐃⲆᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃⲆΔᐃ].id = ⲆΔⵠ.ᐃᐃⲆΔᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆΔΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃⵠⵠⲆᐃⲆ], ⵠⵠⵠⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆΔΔᐃ].id = ⲆΔⵠ.ⲆⲆΔΔᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⲆⵠΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃΔΔⵠⵠⲆ], ᐃΔΔⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⲆⵠΔⵠ].id = ⲆΔⵠ.ΔⲆⵠΔⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⵠⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃᐃΔⲆⵠⲆ], ΔⵠᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⵠⵠΔ].id = ⲆΔⵠ.ⵠⲆⵠⵠΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠⵠⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃΔⲆᐃᐃᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠⵠⲆΔ].id = ⲆΔⵠ.ⲆⵠⵠⲆΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⵠⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔⵠⵠᐃⵠᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⵠⲆⵠ].id = ⲆΔⵠ.ⵠΔⵠⲆⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠΔⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆⲆⲆⲆⲆΔ], ⵠᐃⵠΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠΔⵠΔ].id = ⲆΔⵠ.ᐃⵠΔⵠΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠΔᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆΔⲆᐃⲆᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠΔᐃᐃ].id = ⲆΔⵠ.ⵠⵠΔᐃᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃΔⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔΔΔΔⲆᐃ], ᐃⲆᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃΔⵠⵠ].id = ⲆΔⵠ.ΔᐃΔⵠⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆΔᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠΔΔΔⵠⲆ], ᐃⵠⲆⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆΔᐃᐃ].id = ⲆΔⵠ.ⲆⲆΔᐃᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠᐃⵠΔⲆⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⲆⲆ].id = ⲆΔⵠ.ⲆⲆⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⵠⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠⲆⲆᐃᐃᐃ], ⵠΔⲆΔΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⵠⲆⲆ].id = ⲆΔⵠ.ⲆⲆⵠⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠᐃΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⲆⵠⵠⲆᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠᐃΔΔ].id = ⲆΔⵠ.ΔⵠᐃΔΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔⲆᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔᐃᐃ], ⵠᐃⵠΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔⲆᐃΔ].id = ⲆΔⵠ.ᐃΔⲆᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠᐃⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃᐃⵠⲆⲆⲆ], ᐃΔᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠᐃⵠⲆ].id = ⲆΔⵠ.ⵠⵠᐃⵠⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⵠⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠⲆⲆᐃᐃᐃ], ⵠᐃⵠΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⵠⲆⲆ].id = ⲆΔⵠ.ⲆⲆⵠⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠⲆΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⲆⵠⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠⲆΔᐃ].id = ⲆΔⵠ.ᐃⵠⲆΔᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃⵠᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆⲆΔⲆᐃⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃⵠᐃⲆ].id = ⲆΔⵠ.ΔᐃⵠᐃⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⵠⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔᐃᐃⲆΔⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⵠⵠΔ].id = ⲆΔⵠ.ⵠᐃⵠⵠΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⲆᐃᐃᐃΔ], ⲆΔⲆΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⲆⲆᐃ].id = ⲆΔⵠ.ⵠΔⲆⲆᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠᐃⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⵠⲆΔΔΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠᐃⵠⲆ].id = ⲆΔⵠ.ᐃⵠᐃⵠⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⵠⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔΔⵠⵠΔᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⵠⲆᐃ].id = ⲆΔⵠ.ⵠᐃⵠⲆᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.Δⵠⵠⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆᐃΔⵠΔΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.Δⵠⵠⵠⵠ].id = ⲆΔⵠ.Δⵠⵠⵠⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠⵠⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⵠΔΔⵠᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠⵠⲆⲆ].id = ⲆΔⵠ.ΔⵠⵠⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔᐃΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⲆⵠᐃΔⲆ], ΔⵠⲆⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔᐃΔΔ].id = ⲆΔⵠ.ᐃΔᐃΔΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠᐃⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⵠⵠᐃⲆⲆ], ⵠᐃⵠΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠᐃⲆⲆ].id = ⲆΔⵠ.ⵠⵠᐃⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃᐃⵠᐃᐃⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃⲆⲆᐃ].id = ⲆΔⵠ.ΔᐃⲆⲆᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⲆⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃᐃⲆΔΔⲆ], Ⲇⵠᐃᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⲆⲆΔ].id = ⲆΔⵠ.ⵠᐃⲆⲆΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⲆᐃⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠᐃᐃⲆᐃⵠ], ⵠⵠⵠⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⲆᐃⲆⵠ].id = ⲆΔⵠ.ΔⲆᐃⲆⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠⲆⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⵠⲆⵠⵠⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠⲆⵠᐃ].id = ⲆΔⵠ.ⲆⵠⲆⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠΔΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⵠᐃΔᐃΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠΔΔᐃ].id = ⲆΔⵠ.ⵠⵠΔΔᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃΔᐃⲆⲆⵠ], ⵠⵠᐃΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆΔⲆⲆ].id = ⲆΔⵠ.ⲆⲆΔⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔΔΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠⲆᐃᐃᐃⵠ], ΔⵠᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔΔΔᐃ].id = ⲆΔⵠ.ⵠΔΔΔᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃᐃΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠᐃⵠⵠⲆⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃᐃΔᐃ].id = ⲆΔⵠ.ΔᐃᐃΔᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⲆᐃⵠᐃⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⲆⲆᐃ].id = ⲆΔⵠ.ⵠⲆⲆⲆᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⵠⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⲆⲆⵠⲆⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⵠⲆⲆ].id = ⲆΔⵠ.ⵠⵠⵠⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⲆⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⲆΔⲆⲆⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⲆⲆΔ].id = ⲆΔⵠ.ΔΔⲆⲆΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⲆΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⵠⲆΔⲆⲆ], ᐃⵠⲆⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⲆΔⵠ].id = ⲆΔⵠ.ⲆⲆⲆΔⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⵠᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⵠᐃᐃⲆⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⵠᐃΔ].id = ⲆΔⵠ.ⵠᐃⵠᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔⲆᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔΔΔᐃᐃⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔⲆᐃⲆ].id = ⲆΔⵠ.ᐃΔⲆᐃⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⲆⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⵠⵠᐃⲆΔ], ᐃⲆᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⲆⵠᐃ].id = ⲆΔⵠ.ΔΔⲆⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⵠⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⵠΔΔⵠⵠ], ⵠΔⲆⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⵠⲆΔ].id = ⲆΔⵠ.ⲆᐃⵠⲆΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆΔⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠΔΔⵠΔᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆΔⵠᐃ].id = ⲆΔⵠ.ⲆⲆΔⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⲆⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃⲆⲆ], ⵠⵠᐃΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⲆⲆⲆ].id = ⲆΔⵠ.ⵠⵠⲆⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⲆᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠΔⲆΔⵠᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⲆᐃᐃ].id = ⲆΔⵠ.ⵠⲆⲆᐃᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⲆᐃᐃⲆⲆ], ⲆΔⲆΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔΔⲆⲆ].id = ⲆΔⵠ.ⲆΔΔⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠᐃᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⲆⲆᐃᐃΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠᐃᐃΔ].id = ⲆΔⵠ.ΔⵠᐃᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⵠⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⵠⲆᐃⲆᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⵠⵠⲆ].id = ⲆΔⵠ.ΔΔⵠⵠⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⵠⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⵠⵠΔᐃᐃ], ⵠⵠᐃΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⵠⵠⵠ].id = ⲆΔⵠ.ⵠⲆⵠⵠⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔΔⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃⵠⵠⵠᐃⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔΔⲆⵠ].id = ⲆΔⵠ.ᐃΔΔⲆⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⲆᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃⵠⲆⲆⵠΔ], ΔⵠᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⲆᐃΔ].id = ⲆΔⵠ.ⵠⵠⲆᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠΔⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠⲆΔΔⲆᐃ], ᐃᐃΔⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠΔⵠᐃ].id = ⲆΔⵠ.ᐃⵠΔⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠᐃⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃᐃⵠΔΔⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠᐃⲆᐃ].id = ⲆΔⵠ.ΔⵠᐃⲆᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔᐃⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃΔΔⵠᐃⲆ], ΔⵠⲆⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔᐃⵠΔ].id = ⲆΔⵠ.ⲆΔᐃⵠΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⲆΔⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⲆⵠⵠⲆᐃ], ⵠΔⲆΔΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⲆΔⵠΔ].id = ⲆΔⵠ.ΔⲆΔⵠΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔᐃΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆΔⲆⲆⵠⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔᐃΔⲆ].id = ⲆΔⵠ.ᐃΔᐃΔⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆⲆⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠᐃⵠᐃᐃᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆⲆⵠΔ].id = ⲆΔⵠ.ᐃⲆⲆⵠΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔΔΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠΔᐃΔΔᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔΔΔΔ].id = ⲆΔⵠ.ⵠΔΔΔΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⵠΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃΔΔᐃⲆⲆ], ⵠᐃⵠΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⵠΔΔ].id = ⲆΔⵠ.ⲆᐃⵠΔΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.Δⵠᐃᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆᐃⵠᐃⵠΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.Δⵠᐃᐃⵠ].id = ⲆΔⵠ.Δⵠᐃᐃⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔΔᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃᐃⲆⵠΔⵠ], ΔⲆΔΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔΔᐃᐃ].id = ⲆΔⵠ.ⲆΔΔᐃᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠᐃⵠΔⲆⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⲆⲆ].id = ⲆΔⵠ.ⲆⲆⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⵠⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⲆⲆⵠᐃⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⵠⵠᐃ].id = ⲆΔⵠ.ⵠΔⵠⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃⲆⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⵠⵠΔⵠⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃⲆⲆⲆ].id = ⲆΔⵠ.ᐃᐃⲆⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃΔⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃΔⲆᐃΔΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃΔⵠⲆ].id = ⲆΔⵠ.ⲆᐃΔⵠⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠᐃᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⲆΔΔⲆⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠᐃᐃⲆ].id = ⲆΔⵠ.ΔⵠᐃᐃⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⲆⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃⲆᐃⵠⵠᐃ], ΔⵠᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⲆⲆΔ].id = ⲆΔⵠ.ⵠⲆⲆⲆΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠᐃΔⵠⲆⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔΔⲆⲆ].id = ⲆΔⵠ.ΔΔΔⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃᐃⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⲆΔᐃΔⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃᐃⵠⲆ].id = ⲆΔⵠ.ⲆᐃᐃⵠⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃΔΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⲆᐃⲆⵠᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃΔΔᐃ].id = ⲆΔⵠ.ⵠᐃΔΔᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⲆⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⵠΔᐃΔΔ], ΔΔⲆᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⲆⵠⵠ].id = ⲆΔⵠ.ⵠΔⲆⵠⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⵠⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔΔⲆᐃⲆⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⵠⵠΔ].id = ⲆΔⵠ.ⵠΔⵠⵠΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃΔᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⲆⲆΔⵠⲆ], ⵠΔⲆⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃΔᐃᐃ].id = ⲆΔⵠ.ᐃᐃΔᐃᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃΔΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃⲆⵠΔⵠᐃ], ⵠᐃⲆᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃΔΔⵠ].id = ⲆΔⵠ.ⵠᐃΔΔⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠᐃⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃΔΔᐃⵠᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠᐃⲆΔ].id = ⲆΔⵠ.ᐃⵠᐃⲆΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆᐃᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠΔΔⵠΔⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆᐃᐃΔ].id = ⲆΔⵠ.ⲆⲆᐃᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⵠⲆᐃᐃΔ], ⵠᐃⲆᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠΔⲆⲆ].id = ⲆΔⵠ.ᐃⵠΔⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆΔⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⲆⲆΔⲆⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆΔⵠⲆ].id = ⲆΔⵠ.ᐃⲆΔⵠⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⲆΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⲆᐃΔΔⵠ], ᐃⲆᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⲆΔᐃ].id = ⲆΔⵠ.ⵠΔⲆΔᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⵠΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃΔⲆΔᐃⵠ], ΔΔⲆᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⵠΔⲆ].id = ⲆΔⵠ.ⵠⵠⵠΔⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔΔⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠΔⵠᐃⵠΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔΔⵠᐃ].id = ⲆΔⵠ.ᐃΔΔⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⲆΔⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠΔᐃⲆⲆⲆ], ᐃⲆᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⲆΔⲆⵠ].id = ⲆΔⵠ.ΔⲆΔⲆⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠⲆΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃᐃΔⲆᐃⵠ], ⵠΔⲆⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠⲆΔΔ].id = ⲆΔⵠ.ⲆⵠⲆΔΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔⵠᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔᐃⲆΔΔᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔⵠᐃᐃ].id = ⲆΔⵠ.ⲆΔⵠᐃᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⲆΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆᐃⵠΔⲆᐃ], ΔΔⲆᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⲆΔᐃ].id = ⲆΔⵠ.ⲆᐃⲆΔᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔⵠΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃΔΔⲆᐃⲆ], ⵠᐃⵠΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔⵠΔΔ].id = ⲆΔⵠ.ᐃΔⵠΔΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔΔⲆΔᐃⵠ], ⲆΔΔⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃΔⲆⲆ].id = ⲆΔⵠ.ⲆᐃΔⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⲆΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃⵠΔΔⲆᐃ], Ⲇⵠᐃᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⲆΔᐃ].id = ⲆΔⵠ.ⵠⲆⲆΔᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆᐃΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃΔⵠⲆΔⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆᐃΔᐃ].id = ⲆΔⵠ.ᐃⲆᐃΔᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠΔⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃⵠΔⲆⵠᐃ], ⵠⵠⵠⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠΔⵠⲆ].id = ⲆΔⵠ.ⵠⵠΔⵠⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⲆΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠΔΔᐃⵠᐃ], ΔⲆΔΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⲆΔⲆ].id = ⲆΔⵠ.ⵠᐃⲆΔⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔⲆΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃⵠⲆᐃᐃⲆ], ⲆΔⲆΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔⲆΔⵠ].id = ⲆΔⵠ.ᐃΔⲆΔⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃⵠⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⲆᐃⲆᐃⵠ], ᐃΔᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃⵠⵠᐃ].id = ⲆΔⵠ.ᐃᐃⵠⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⲆⵠⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⵠᐃⲆⵠΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⲆⵠⲆⲆ].id = ⲆΔⵠ.ΔⲆⵠⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆⲆⵠΔΔⲆ], ΔΔⲆᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⲆⲆᐃ].id = ⲆΔⵠ.ΔΔⲆⲆᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⵠⲆⲆⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆⲆⵠΔΔⲆ], ᐃⵠⲆⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⵠⲆⲆⲆⲆ].id = ⲆΔⵠ.ⲆⲆⵠⲆⲆⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠΔᐃᐃᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆⲆⵠΔΔⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠΔᐃᐃᐃΔ].id = ⲆΔⵠ.ᐃⵠΔᐃᐃᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆΔⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⵠΔⲆΔᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆΔⵠᐃ].id = ⲆΔⵠ.ⵠⲆΔⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⵠⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃᐃⲆⵠΔⵠ], ᐃᐃΔⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⵠⵠᐃ].id = ⲆΔⵠ.ⵠⲆⵠⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃΔⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃⲆΔΔⵠⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃΔⵠⵠ].id = ⲆΔⵠ.ⵠᐃΔⵠⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆΔᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃⵠᐃΔΔⲆ], ᐃⵠⲆⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆΔᐃⲆ].id = ⲆΔⵠ.ⵠⲆΔᐃⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠᐃᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔᐃΔΔΔⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠᐃᐃⵠ].id = ⲆΔⵠ.ᐃⵠᐃᐃⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⲆⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔΔⲆΔⵠⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⲆⲆΔ].id = ⲆΔⵠ.ⵠⵠⲆⲆΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔᐃⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠⲆⲆᐃᐃⵠ], ⵠⵠᐃΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔᐃⲆⵠ].id = ⲆΔⵠ.ΔΔᐃⲆⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃᐃᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠⵠΔᐃᐃΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃᐃᐃⲆ].id = ⲆΔⵠ.ΔᐃᐃᐃⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃᐃⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⵠΔΔⲆᐃ], ⵠⵠᐃΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃᐃⵠᐃ].id = ⲆΔⵠ.ᐃᐃᐃⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠΔᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃᐃⵠΔⵠᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠΔᐃⵠ].id = ⲆΔⵠ.ΔⵠΔᐃⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠⲆᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⵠⵠⲆⲆⲆ], ⵠᐃⲆᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠⲆᐃⲆ].id = ⲆΔⵠ.ΔⵠⲆᐃⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠⲆᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔᐃᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠⲆᐃΔ].id = ⲆΔⵠ.ⲆⵠⲆᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃⲆΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⵠⵠΔⵠⵠ], ᐃΔΔⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃⲆΔⵠ].id = ⲆΔⵠ.ΔᐃⲆΔⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠⲆᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⵠΔΔΔⲆ], ᐃⲆᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠⲆᐃⵠ].id = ⲆΔⵠ.ᐃⵠⲆᐃⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠⵠᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆᐃᐃᐃⵠᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠⵠᐃⲆ].id = ⲆΔⵠ.ᐃⵠⵠᐃⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⲆᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⵠΔΔⲆⲆ], ᐃᐃΔⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⲆᐃⲆ].id = ⲆΔⵠ.ΔΔⲆᐃⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆᐃⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠⲆΔᐃⵠΔ], ᐃⵠⲆⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆᐃⲆᐃ].id = ⲆΔⵠ.ⲆⲆᐃⲆᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆΔⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆΔⵠⵠΔᐃ], ⵠΔⲆⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆΔⵠⵠ].id = ⲆΔⵠ.ⲆⲆΔⵠⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠΔⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆΔΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠΔⵠⲆ].id = ⲆΔⵠ.ΔⵠΔⵠⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠΔᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⲆⲆᐃΔⲆ], ⲆΔⲆΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠΔᐃᐃ].id = ⲆΔⵠ.ᐃⵠΔᐃᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⲆᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃᐃᐃⲆⵠᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⲆᐃΔ].id = ⲆΔⵠ.ⲆᐃⲆᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃⵠⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠᐃΔⲆⲆΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃⵠⲆⵠ].id = ⲆΔⵠ.ᐃᐃⵠⲆⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃⲆⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃΔᐃⵠᐃⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃⲆⵠᐃ].id = ⲆΔⵠ.ΔᐃⲆⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔΔᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⵠΔΔⵠᐃ], ⵠⵠⵠⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔΔᐃⵠ].id = ⲆΔⵠ.ᐃΔΔᐃⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⵠᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔᐃᐃⵠᐃΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⵠᐃᐃ].id = ⲆΔⵠ.ⵠⵠⵠᐃᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔΔΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆᐃⲆⲆⲆⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔΔΔΔ].id = ⲆΔⵠ.ΔΔΔΔΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠΔⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠΔΔΔⲆΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠΔⲆⵠ].id = ⲆΔⵠ.ΔⵠΔⲆⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⵠΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⵠᐃΔΔΔ], ᐃΔΔⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⵠΔΔ].id = ⲆΔⵠ.ΔΔⵠΔΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔΔⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠᐃᐃⵠΔⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔΔⵠΔ].id = ⲆΔⵠ.ΔΔΔⵠΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⲆΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⲆⵠⵠΔΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⲆΔⵠ].id = ⲆΔⵠ.ⵠⲆⲆΔⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔΔⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔᐃⵠⲆⲆⵠ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃΔΔⵠⵠ].id = ⲆΔⵠ.ᐃΔΔⵠⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.Ⲇⵠⵠⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔΔᐃΔᐃᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.Ⲇⵠⵠⵠⵠ].id = ⲆΔⵠ.Ⲇⵠⵠⵠⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃⲆⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠᐃᐃⵠᐃᐃ], ⵠΔⲆⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃⲆⲆᐃ].id = ⲆΔⵠ.ᐃᐃⲆⲆᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⵠᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔᐃⵠⵠⲆᐃ], ⵠᐃⵠΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⵠᐃΔ].id = ⲆΔⵠ.ⵠΔⵠᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠΔᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⲆⲆΔᐃᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠΔᐃⲆ].id = ⲆΔⵠ.ᐃⵠΔᐃⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⲆⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⵠᐃⲆᐃΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⲆⵠᐃ].id = ⲆΔⵠ.ⲆᐃⲆⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆⲆᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⵠΔᐃⲆᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆⲆᐃⵠ].id = ⲆΔⵠ.ᐃⲆⲆᐃⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠⲆᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⵠΔᐃΔᐃ], ᐃⲆᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠⲆᐃΔ].id = ⲆΔⵠ.ΔⵠⲆᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃⵠⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃᐃΔᐃⵠᐃ], ⵠΔⲆΔΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃⵠⲆⲆ].id = ⲆΔⵠ.ᐃᐃⵠⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃⵠᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆⲆΔⲆᐃⲆ], ᐃᐃΔⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃⵠᐃⲆ].id = ⲆΔⵠ.ΔᐃⵠᐃⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⵠⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔΔⵠⵠΔᐃ], ᐃⵠᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⵠⲆᐃ].id = ⲆΔⵠ.ⵠᐃⵠⲆᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠᐃᐃⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⵠΔΔⲆΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠᐃᐃⲆ].id = ⲆΔⵠ.ᐃⵠᐃᐃⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⵠΔΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃᐃⲆΔΔⵠ], ⲆΔⲆΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⵠΔΔ].id = ⲆΔⵠ.ⵠⲆⵠΔΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⲆΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠᐃⵠᐃᐃⲆ], ᐃΔΔΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⲆΔⲆ].id = ⲆΔⵠ.ΔΔⲆΔⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠΔᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆΔⵠᐃΔⲆΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠΔᐃΔ].id = Ⲇᐃ.ⲆⵠΔᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠΔᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠⲆΔⲆⵠΔ], ΔΔⲆᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠΔᐃΔ].id = Ⲇᐃ.ⲆⵠΔᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠΔᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⵠⵠⲆⲆⲆ], ⲆΔⲆΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠΔᐃΔ].id = ⲆΔⵠ.ⲆⵠΔᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆᐃᐃΔⲆᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔᐃΔ].id = Ⲇᐃ.ⲆᐃΔᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⲆⵠⲆⲆᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔᐃΔ].id = Ⲇᐃ.ⲆᐃΔᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃΔᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆᐃᐃⵠᐃᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃΔᐃΔ].id = ⲆΔⵠ.ⲆᐃΔᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠᐃⵠΔⵠⲆ], ⵠᐃⵠΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠⵠΔ].id = Ⲇᐃ.ⵠⵠⵠⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⵠΔⲆⲆΔ], ⲆΔΔⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠⵠΔ].id = Ⲇᐃ.ⵠⵠⵠⵠΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⵠⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⲆΔᐃⵠⵠ], ⵠᐃⲆᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⵠⵠⵠΔ].id = ⲆΔⵠ.ⵠⵠⵠⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔᐃⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃΔⵠⵠⲆΔᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔᐃⵠⵠ].id = Ⲇᐃ.ⵠΔᐃⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔᐃⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⲆᐃΔⵠⵠ], ΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔᐃⵠⵠ].id = Ⲇᐃ.ⵠΔᐃⵠⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔᐃⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⵠⲆⲆⵠᐃ], ⵠⵠⵠⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔᐃⵠⵠ].id = ⲆΔⵠ.ⵠΔᐃⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠᐃⲆᐃᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆᐃᐃⲆΔΔ], ⵠⵠⵠⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃⵠᐃⲆᐃᐃ].id = Ⲇᐃ.ᐃᐃⵠᐃⲆᐃᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠᐃⲆᐃᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃΔᐃⵠᐃᐃ], ⵠΔⲆⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃⵠᐃⲆᐃᐃ].id = Ⲇᐃ.ᐃᐃⵠᐃⲆᐃᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⲆⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔⵠⲆⵠΔⵠ], ᐃΔᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃⲆⲆΔ].id = Ⲇᐃ.ΔᐃⲆⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⲆⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃⲆᐃᐃⵠΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃⲆⲆΔ].id = Ⲇᐃ.ΔᐃⲆⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃΔᐃⲆⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠⲆᐃΔⲆⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃΔᐃⲆⵠⲆ].id = Ⲇᐃ.ᐃᐃΔᐃⲆⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃΔᐃⲆⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⲆΔΔΔᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃΔᐃⲆⵠⲆ].id = Ⲇᐃ.ᐃᐃΔᐃⲆⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⵠⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠΔⲆⵠΔᐃ], ⵠⵠⵠⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔⵠⲆⵠ].id = Ⲇᐃ.ΔΔⵠⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⵠⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃᐃᐃⲆⲆᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔⵠⲆⵠ].id = Ⲇᐃ.ΔΔⵠⲆⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⵠⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔᐃΔΔⲆᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔⵠⲆⵠ].id = ⲆΔⵠ.ΔΔⵠⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆᐃⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠⵠⵠΔΔⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆᐃⵠⵠ].id = Ⲇᐃ.ⲆⲆᐃⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆᐃⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔΔⲆⵠΔΔ], ⲆΔⲆΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆᐃⵠⵠ].id = Ⲇᐃ.ⲆⲆᐃⵠⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆᐃⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔⵠΔᐃΔⵠ], ⲆΔⲆΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆᐃⵠⵠ].id = ⲆΔⵠ.ⲆⲆᐃⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔⵠⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆᐃᐃΔⵠΔ], ᐃΔΔⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔⵠⲆⵠ].id = Ⲇᐃ.ⲆΔⵠⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔⵠⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆᐃⲆⲆⲆⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔⵠⲆⵠ].id = Ⲇᐃ.ⲆΔⵠⲆⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔⵠⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠᐃΔᐃⲆΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔⵠⲆⵠ].id = ⲆΔⵠ.ⲆΔⵠⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆⵠΔⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠᐃⲆⲆᐃⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆⵠΔⲆ].id = Ⲇᐃ.ᐃⲆⵠΔⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆⵠΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃᐃⲆΔⵠΔ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆⵠΔⲆ].id = Ⲇᐃ.ᐃⲆⵠΔⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆⵠΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⲆⲆⵠᐃⲆ], ΔⵠⲆⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆⵠΔⲆ].id = ⲆΔⵠ.ᐃⲆⵠΔⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔΔⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠⲆᐃΔΔᐃ], ᐃΔᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔΔⲆⲆ].id = Ⲇᐃ.ⵠΔΔⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⲆᐃΔΔⲆ], ⲆΔΔⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔΔⲆⲆ].id = Ⲇᐃ.ⵠΔΔⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔΔᐃⵠΔⲆ], ΔⲆΔΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔΔⲆⲆ].id = ⲆΔⵠ.ⵠΔΔⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠⵠⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔⲆΔ], ⲆΔⲆΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠⵠⲆΔ].id = Ⲇᐃ.ΔⵠⵠⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠⵠⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⲆΔⲆⲆⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠⵠⲆΔ].id = Ⲇᐃ.ΔⵠⵠⲆΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠⵠⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃΔΔⲆⵠᐃ], ⵠᐃⲆᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠⵠⲆΔ].id = ⲆΔⵠ.ΔⵠⵠⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔΔⲆᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃΔⲆΔΔΔᐃ], Ⲇⵠᐃᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔΔΔⲆᐃ].id = Ⲇᐃ.ΔΔΔⲆᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔΔⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆᐃΔΔⲆⵠ], ᐃⵠⲆⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔΔΔⲆᐃ].id = Ⲇᐃ.ΔΔΔⲆᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔΔⲆᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔᐃⵠⵠⲆⵠ], ΔⲆΔΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔΔΔⲆᐃ].id = ⲆΔⵠ.ΔΔΔⲆᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⵠᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠΔⵠᐃᐃΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⵠᐃΔ].id = Ⲇᐃ.ⲆᐃⵠᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⵠᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃᐃⲆᐃᐃⵠΔ], ΔⵠⲆⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⵠᐃΔ].id = Ⲇᐃ.ⲆᐃⵠᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⵠᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⲆΔΔΔΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃⵠᐃΔ].id = ⲆΔⵠ.ⲆᐃⵠᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⵠΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⲆⵠᐃΔᐃΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆⵠΔᐃ].id = Ⲇᐃ.ⵠⲆⵠΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⵠΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆΔⲆΔⲆⲆ], ᐃΔΔⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆⵠΔᐃ].id = Ⲇᐃ.ⵠⲆⵠΔᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⵠΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔⵠΔⵠⵠⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠⲆⵠΔᐃ].id = ⲆΔⵠ.ⵠⲆⵠΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃΔⲆⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆΔᐃᐃⵠⵠⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔᐃΔⲆⲆ].id = Ⲇᐃ.ΔᐃΔⲆⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⵠΔΔⵠᐃ], ᐃΔΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔᐃΔⲆⲆ].id = Ⲇᐃ.ΔᐃΔⲆⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃΔⲆⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⵠⵠΔⵠᐃ], ⵠⵠⵠⵠ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔᐃΔⲆⲆ].id = ⲆΔⵠ.ΔᐃΔⲆⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠΔⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⵠΔᐃᐃⲆᐃ], ᐃⵠⲆⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠΔⵠⵠ].id = Ⲇᐃ.ⲆⵠΔⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠΔⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃΔΔᐃᐃⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠΔⵠⵠ].id = Ⲇᐃ.ⲆⵠΔⵠⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠΔⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃΔⵠᐃΔᐃ], ΔΔⲆᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠΔⵠⵠ].id = ⲆΔⵠ.ⲆⵠΔⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⵠΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⲆⲆⵠⲆⲆⲆ], ⵠΔⲆΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⵠΔⵠ].id = Ⲇᐃ.ᐃⵠⵠΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⵠΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃΔⲆⲆΔΔᐃ], ΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⵠΔⵠ].id = Ⲇᐃ.ᐃⵠⵠΔⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠⵠΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⲆΔᐃᐃᐃ], ΔⲆΔΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠⵠΔⵠ].id = ⲆΔⵠ.ᐃⵠⵠΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⵠⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠᐃⲆΔΔᐃΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⵠⵠⵠΔ].id = Ⲇᐃ.ᐃⵠⵠⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⵠⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔⲆⵠⲆⵠⲆ], ΔΔⲆᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⵠⵠⵠΔ].id = Ⲇᐃ.ᐃⵠⵠⵠΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠⵠⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⲆᐃᐃⵠΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⵠⵠⵠΔ].id = ⲆΔⵠ.ᐃⵠⵠⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆᐃΔᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠⲆⵠⵠⵠΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⲆᐃΔᐃ].id = Ⲇᐃ.ΔⲆᐃΔᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆᐃΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⲆⲆⲆⵠⲆ], Ⲇⵠᐃᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⲆᐃΔᐃ].id = Ⲇᐃ.ΔⲆᐃΔᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⲆᐃΔᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔᐃⵠⲆⲆᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⲆᐃΔᐃ].id = ⲆΔⵠ.ΔⲆᐃΔᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆΔᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠᐃᐃᐃⵠΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆΔᐃΔ].id = Ⲇᐃ.ᐃⲆΔᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆᐃⵠⵠΔΔ], ⵠᐃⵠΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔᐃΔ].id = Ⲇᐃ.ᐃⲆΔᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆΔᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⵠⵠⲆΔᐃᐃ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆΔᐃΔ].id = ⲆΔⵠ.ᐃⲆΔᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔΔⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠΔᐃᐃⲆⲆΔ], ᐃΔΔⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔΔⵠⲆ].id = Ⲇᐃ.ⵠΔΔⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔΔⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⲆΔⵠⲆᐃ], ⲆΔⲆΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔΔⵠⲆ].id = Ⲇᐃ.ⵠΔΔⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔΔⵠⲆ].info.ⵠΔ[2] = this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔΔⵠⲆ].info.ⵠΔ[ΔΔⲆⲆ];
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆᐃΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠⵠⲆᐃΔᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⲆᐃΔⵠ].id = Ⲇᐃ.ⵠⲆᐃΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆᐃΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠΔᐃⵠΔⲆᐃ], ᐃΔᐃⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆᐃΔⵠ].id = Ⲇᐃ.ⵠⲆᐃΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆᐃΔⵠ].info.ⵠΔ[ᐃⵠΔⲆ] = this.ᐃⲆᐃ[Ⲇᐃ.ⵠⲆᐃΔⵠ].info.ⵠΔ[ⵠΔΔᐃ];
		this.ⵠⵠΔ[Ⲇᐃ.Ⲇⵠⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⵠⲆⵠΔⲆᐃ], ΔⲆΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.Ⲇⵠⵠᐃ].id = Ⲇᐃ.Ⲇⵠⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.Ⲇⵠⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆᐃΔΔᐃᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.Ⲇⵠⵠᐃ].id = Ⲇᐃ.Ⲇⵠⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.Ⲇⵠⵠᐃ].info.ⵠΔ[ᐃⵠΔⲆ] = this.ᐃⲆᐃ[Ⲇᐃ.Ⲇⵠⵠᐃ].info.ⵠΔ[ⲆΔⵠΔ];
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆΔⵠⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠᐃⵠΔᐃᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆΔⵠⵠ].id = Ⲇᐃ.ᐃⲆΔⵠⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⲆⵠᐃⵠⵠ], ⵠᐃⲆᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆΔⵠⵠ].id = Ⲇᐃ.ᐃⲆΔⵠⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆΔⵠⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠᐃⲆΔᐃⲆ], ᐃⵠᐃⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆΔⵠⵠ].id = ⲆΔⵠ.ᐃⲆΔⵠⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⵠΔⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠᐃΔᐃⵠⵠⲆ], ⵠΔⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃⵠΔⲆ].id = Ⲇᐃ.ⵠᐃⵠΔⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⵠΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⲆΔᐃⲆⲆ], ΔΔⲆᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃⵠΔⲆ].id = Ⲇᐃ.ⵠᐃⵠΔⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⵠΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃΔⲆᐃᐃᐃ], ⲆΔΔⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠᐃⵠΔⲆ].id = ⲆΔⵠ.ⵠᐃⵠΔⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⲆᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠⵠΔΔΔΔⲆ], ⵠΔⲆΔΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⲆᐃΔ].id = Ⲇᐃ.ⵠΔⲆᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠᐃⲆᐃᐃⵠ], ᐃΔΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆᐃΔ].id = Ⲇᐃ.ⵠΔⲆᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⲆᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆᐃⵠΔΔᐃ], ⵠⵠᐃΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⵠΔⲆᐃΔ].id = ⲆΔⵠ.ⵠΔⲆᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔΔᐃⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆΔΔΔᐃΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆΔΔᐃⵠ].id = Ⲇᐃ.ⲆΔΔᐃⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔΔᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⵠΔⵠⲆᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆΔΔᐃⵠ].id = Ⲇᐃ.ⲆΔΔᐃⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔΔᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠΔⵠᐃᐃⵠ], ⵠᐃⲆᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆΔΔᐃⵠ].id = ⲆΔⵠ.ⲆΔΔᐃⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃᐃᐃⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⲆⲆⲆΔΔⵠ], ΔⵠᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃᐃᐃᐃⵠ].id = Ⲇᐃ.ᐃᐃᐃᐃⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃᐃᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃΔⲆⲆⲆⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃᐃᐃᐃⵠ].id = Ⲇᐃ.ᐃᐃᐃᐃⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃᐃᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠⲆΔⲆⵠΔ], ⵠΔⲆⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃᐃᐃᐃⵠ].id = ⲆΔⵠ.ᐃᐃᐃᐃⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⲆⵠΔⲆⲆΔ], ᐃⵠⲆⵠ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃⵠⲆ].id = Ⲇᐃ.ΔⵠᐃⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⵠⵠⵠⵠⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃⵠⲆ].id = Ⲇᐃ.ΔⵠᐃⵠⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠᐃⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠΔᐃⵠⵠⵠ], ⵠᐃⵠΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠᐃⵠⲆ].id = ⲆΔⵠ.ΔⵠᐃⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔⲆΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔΔΔⲆΔⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔⲆΔ].id = Ⲇᐃ.ⲆᐃΔⲆΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆⲆⵠⲆⵠᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔⲆΔ].id = Ⲇᐃ.ⲆᐃΔⲆΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃΔⲆΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠᐃᐃⲆⵠⲆ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃΔⲆΔ].id = ⲆΔⵠ.ⲆᐃΔⲆΔ;
		this.ⵠⵠΔ[Ⲇᐃ.Δᐃᐃᐃⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔⵠᐃΔΔΔΔ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.Δᐃᐃᐃⵠ].id = Ⲇᐃ.Δᐃᐃᐃⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.Δᐃᐃᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆⵠⲆⲆᐃⵠ], ᐃⵠⲆⵠ);
		this.ᐃⲆᐃ[Ⲇᐃ.Δᐃᐃᐃⵠ].id = Ⲇᐃ.Δᐃᐃᐃⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.Δᐃᐃᐃⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆΔⲆⵠΔⵠ], Ⲇⵠᐃᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.Δᐃᐃᐃⵠ].id = ⲆΔⵠ.Δᐃᐃᐃⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆΔⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⵠⲆⵠⲆⲆΔ], ΔⵠⲆⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⲆⲆΔⲆ].id = Ⲇᐃ.ⲆⲆⲆΔⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔⵠᐃΔᐃⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⲆⲆΔⲆ].id = Ⲇᐃ.ⲆⲆⲆΔⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⲆΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠⲆⲆⵠⲆⲆ], ΔⵠⲆⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⲆⲆΔⲆ].id = ⲆΔⵠ.ⲆⲆⲆΔⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔⵠᐃ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆᐃⲆΔᐃᐃⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔⵠᐃ].id = Ⲇᐃ.ⲆᐃΔⵠᐃ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⲆΔⲆᐃΔᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔⵠᐃ].id = Ⲇᐃ.ⲆᐃΔⵠᐃ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃΔⵠᐃ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ᐃⲆⵠᐃΔᐃᐃⲆΔ], Ⲇⵠᐃᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃΔⵠᐃ].id = ⲆΔⵠ.ⲆᐃΔⵠᐃ;
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆⵠᐃΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆⲆΔⵠᐃΔⲆ], ᐃΔᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ᐃⲆⵠᐃΔ].id = Ⲇᐃ.ᐃⲆⵠᐃΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆⵠᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆΔᐃᐃΔΔⲆ], ΔⲆΔΔ);
		this.ᐃⲆᐃ[Ⲇᐃ.ᐃⲆⵠᐃΔ].id = Ⲇᐃ.ᐃⲆⵠᐃΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆⵠᐃΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃᐃᐃⲆᐃΔ], ⵠᐃⵠΔ);
		this.ᐃⵠΔ[ⲆΔⵠ.ᐃⲆⵠᐃΔ].id = ⲆΔⵠ.ᐃⲆⵠᐃΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔΔⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ΔΔⲆⵠⲆΔⲆ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃΔΔⲆ].id = Ⲇᐃ.ⲆᐃΔΔⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⵠⲆⲆⵠⲆⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃΔΔⲆ].id = Ⲇᐃ.ⲆᐃΔΔⲆ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃΔΔⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔᐃⲆⲆⵠⲆᐃ], ΔⵠⲆⲆ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆᐃΔΔⲆ].id = ⲆΔⵠ.ⲆᐃΔΔⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆΔⲆⲆⲆΔⵠ], ⵠᐃⲆᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ΔⵠᐃⵠΔ].id = Ⲇᐃ.ΔⵠᐃⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠⵠΔⲆⵠⵠⵠ], Ⲇⵠᐃᐃ);
		this.ᐃⲆᐃ[Ⲇᐃ.ΔⵠᐃⵠΔ].id = Ⲇᐃ.ΔⵠᐃⵠΔ;
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠᐃⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⲆᐃⲆΔᐃΔ], 3);
		this.ᐃⵠΔ[ⲆΔⵠ.ΔⵠᐃⵠΔ].id = ⲆΔⵠ.ΔⵠᐃⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⲆⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃⵠⵠⲆΔΔ], ⵠᐃⵠΔ);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆⵠⲆⲆⵠ].id = Ⲇᐃ.ⲆⵠⲆⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔᐃⲆⵠⲆⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆⵠⲆⲆⵠ].id = Ⲇᐃ.ⲆⵠⲆⲆⵠ;
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠⲆⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆᐃⵠᐃΔⲆᐃ], ΔΔⲆᐃ);
		this.ᐃⵠΔ[ⲆΔⵠ.ⲆⵠⲆⲆⵠ].id = ⲆΔⵠ.ⲆⵠⲆⲆⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠⵠⲆ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⵠᐃⵠᐃΔᐃⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠⵠⵠⲆ].id = Ⲇᐃ.ⵠⵠⵠⵠⲆ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠⵠⲆ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠΔⲆᐃᐃᐃ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠⵠⵠⲆ].id = Ⲇᐃ.ⵠⵠⵠⵠⲆ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⲆⲆⵠΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⵠⲆⵠⵠΔΔⲆⲆ], ΔΔⲆᐃ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠΔⲆⲆⵠΔⵠ].id = Ⲇᐃ.ⵠΔⲆⲆⵠΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆⲆⵠΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃⲆΔⲆⲆⲆⵠⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠΔⲆⲆⵠΔⵠ].id = Ⲇᐃ.ⵠΔⲆⲆⵠΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠᐃⲆⵠΔⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃⲆⵠⵠⲆⵠⲆΔⵠ], ᐃⵠᐃⲆ);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠᐃⲆⵠΔⵠ].id = Ⲇᐃ.ⵠⵠᐃⲆⵠΔⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠᐃⲆⵠΔⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔΔᐃⲆΔΔΔΔⵠ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠᐃⲆⵠΔⵠ].id = Ⲇᐃ.ⵠⵠᐃⲆⵠΔⵠ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃᐃΔⲆⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ⲆΔⲆΔΔᐃᐃΔᐃ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠᐃᐃΔⲆⵠΔ].id = Ⲇᐃ.ⵠᐃᐃΔⲆⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃᐃΔⲆⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⵠᐃΔⵠⵠⲆⵠⲆⵠ], ΔⵠⲆⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠᐃᐃΔⲆⵠΔ].id = Ⲇᐃ.ⵠᐃᐃΔⲆⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⵠᐃᐃⵠΔ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃᐃᐃΔᐃⲆⵠⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⲆᐃⵠᐃᐃⵠΔ].id = Ⲇᐃ.ⲆᐃⵠᐃᐃⵠΔ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⵠᐃᐃⵠΔ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ⲆⵠᐃΔⵠΔᐃⵠⲆ], 3);
		this.ᐃⲆᐃ[Ⲇᐃ.ⲆᐃⵠᐃᐃⵠΔ].id = Ⲇᐃ.ⲆᐃⵠᐃᐃⵠΔ;
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠᐃΔⲆⲆⵠ] = Ⲇⵠᐃ(68, 68, "", Ⲇⵠ[ⵠ.ᐃᐃᐃΔⵠᐃⲆΔⵠ], 3);
		this.ⵠⵠΔ[Ⲇᐃ.ⵠⵠᐃΔⲆⲆⵠ].id = Ⲇᐃ.ⵠⵠᐃΔⲆⲆⵠ;
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠᐃΔⲆⲆⵠ] = Ⲇⵠᐃ(60, 60, "", Ⲇⵠ[ⵠ.ΔⲆᐃⵠⲆⲆⲆⲆⵠ], ⲆΔΔⲆ);
		this.ᐃⲆᐃ[Ⲇᐃ.ⵠⵠᐃΔⲆⲆⵠ].id = Ⲇᐃ.ⵠⵠᐃΔⲆⲆⵠ;
		this.ⵠⵠⵠΔⵠᐃⲆ = function() {
			var ⲆΔᐃⵠ = ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ;
			var ΔΔ = 10;
			var ΔΔⵠ = ᐃᐃⵠⵠΔ;
			for (var Δᐃ = ⲆⲆⵠⲆ; ⲆΔᐃⵠ.length > Δᐃ; Δᐃ++) {
				if (Δᐃ > ΔᐃΔ && !(Δᐃ % 4)) {
					ΔΔ += ⲆΔᐃⵠ[0].info.width + ⲆΔⵠᐃⲆ;
					ΔΔⵠ = 10
				}
				ⲆΔᐃⵠ[Δᐃ].info.translate.x = ΔΔ;
				ⲆΔᐃⵠ[Δᐃ].info.translate.y = ΔΔⵠ;
				ΔΔⵠ += ⲆΔⲆⲆⵠ + ⲆΔᐃⵠ[Δᐃ].info.height
			}
		};
		this.ⲆᐃⲆⵠᐃⵠΔ = function() {
			var ΔΔ = Math.floor((ΔΔⲆⲆⵠ + this.ⵠⵠΔ[0].info.ⵠΔ[0].width) * Math.floor((ⵠΔⲆⲆ + ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length) / ⵠΔΔⵠ) + 35);
			for (var Δᐃ = ⵠⲆⵠ; Δᐃ < this.ⵠⵠΔ.length; Δᐃ++) {
				if (!this.ⵠⵠΔ[Δᐃ]) continue;
				this.ⵠⵠΔ[Δᐃ].info.translate.x = ΔΔ;
				this.ⵠⵠΔ[Δᐃ].info.translate.y = 22
			}
			this.ⵠΔᐃᐃᐃᐃΔ.info.translate.x = ΔΔ + ⲆΔⲆⵠᐃ;
			this.ⵠΔᐃᐃᐃᐃΔ.info.translate.y = 22 + Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠᐃᐃ].height;
			this.ΔⲆᐃΔΔⲆᐃ.info.translate.x = ΔΔ + 17;
			this.ΔⲆᐃΔΔⲆᐃ.info.translate.y = 30;
			this.ΔⵠⵠⲆΔΔⲆ.info.translate.x = ΔΔ + 17;
			this.ΔⵠⵠⲆΔΔⲆ.info.translate.y = 22 + Ⲇⵠ[ⵠ.Δᐃᐃⵠⵠᐃᐃ].height
		};
		this.ⵠⵠⲆⵠⵠⵠⵠᐃΔ = function() {
			var ΔΔ = Math.floor((ⲆΔⲆᐃ - Ⲇⵠ[ⵠ.ᐃΔΔΔⲆⲆⵠ][0].width) / ΔⲆᐃⲆ);
			for (var Δᐃ = 0; this.ⵠΔⵠᐃⲆ.length > Δᐃ; Δᐃ++) {
				this.ⵠΔⵠᐃⲆ[Δᐃ].button.info.translate.x = ΔΔ;
				this.ⵠΔⵠᐃⲆ[Δᐃ].button.info.translate.y = -ᐃΔΔΔⵠ
			}
		};
		this.ⲆⵠᐃᐃΔΔΔ = function() {
			var ΔΔ = 12 + Math.floor((ⵠⲆΔΔⵠ + this.ΔᐃⵠⲆΔⲆⵠ.info.ⵠΔ[0].width) * Math.floor((3 + ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length) / 4) + 35);
			this.ΔᐃⵠⲆΔⲆⵠ.info.translate.x = ΔΔ;
			this.ΔᐃⵠⲆΔⲆⵠ.info.translate.y = 33;
			this.ΔⵠᐃⲆᐃᐃΔ.info.translate.x = this.ΔᐃⵠⲆΔⲆⵠ.info.translate.x;
			this.ΔⵠᐃⲆᐃᐃΔ.info.translate.y = 137;
			this.ΔΔᐃⵠΔᐃᐃ.info.translate.x = this.ΔᐃⵠⲆΔⲆⵠ.info.translate.x;
			this.ΔΔᐃⵠΔᐃᐃ.info.translate.y = 240
		};
		this.ⵠⲆᐃΔⲆΔᐃ = function() {
			var ΔΔ = 12 + Math.floor(Math.floor((3 + ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length) / 4) * (ⵠᐃⵠⲆΔ + this.ᐃⲆⲆⲆᐃⵠΔ.info.ⵠΔ[0].width) + 35);
			this.ᐃⲆⲆⲆᐃⵠΔ.info.translate.x = ΔΔ;
			this.ᐃⲆⲆⲆᐃⵠΔ.info.translate.y = 36;
			ΔΔ += 83;
			this.ᐃᐃᐃΔΔⲆᐃ.info.translate.x = ΔΔ;
			this.ᐃᐃᐃΔΔⲆᐃ.info.translate.y = 36;
			this.ᐃⲆⲆⵠⲆΔⲆ.info.translate.x = ΔΔ;
			this.ᐃⲆⲆⵠⲆΔⲆ.info.translate.y = 36;
			this.ΔΔⲆⲆΔⵠΔ.info.translate.x = ΔΔ;
			this.ΔΔⲆⲆΔⵠΔ.info.translate.y = 36;
			this.ᐃⲆⲆⵠΔⲆΔ.info.translate.x = ΔΔ;
			this.ᐃⲆⲆⵠΔⲆΔ.info.translate.y = 36;
			this.ⵠΔⲆⲆᐃⵠⵠ.info.translate.x = ΔΔ;
			this.ⵠΔⲆⲆᐃⵠⵠ.info.translate.y = 36
		};
		this.ΔⲆⵠⲆΔᐃⵠ = function() {
			var ΔΔ = ᐃⵠᐃⵠⵠ + Math.floor((10 + this.ⲆΔΔΔⲆᐃΔ.info.ⵠΔ[0].width) * Math.floor((3 + ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length) / 4) + 35);
			this.ⲆΔΔΔⲆᐃΔ.info.translate.x = ΔΔ;
			this.ⲆΔΔΔⲆᐃΔ.info.translate.y = 36;
			ΔΔ += 83;
			this.ⲆᐃⲆⲆⲆⵠᐃ.info.translate.x = ΔΔ;
			this.ⲆᐃⲆⲆⲆⵠᐃ.info.translate.y = 36
		};
		this.ⲆⵠᐃΔⲆΔΔ = function() {
			var ΔΔ = Math.floor((ᐃᐃⵠⵠΔ + this.ⵠᐃⵠⵠⵠⲆⵠ.info.ⵠΔ[0].width) * Math.floor((ΔⲆΔΔ + ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length) / 4) + 35);
			this.ⵠᐃⵠⵠⵠⲆⵠ.info.translate.x = ΔΔ;
			this.ⵠᐃⵠⵠⵠⲆⵠ.info.translate.y = 22
		};
		this.ⲆⵠⵠⲆᐃᐃⲆ = function() {
			var ᐃᐃⲆΔ = ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ;
			if (ⲆⲆᐃΔ < ᐃᐃⲆΔ.length) var ⲆᐃᐃⵠⵠⲆΔⲆⲆ = Math.floor((ⲆΔⲆᐃ - ⵠⵠⵠ.ᐃᐃⲆΔ.max * (ᐃᐃⲆΔ[ⵠⲆᐃ].info.width + ⲆⲆⲆᐃᐃ)) / ⲆᐃⵠⲆ);
			for (var Δᐃ = 0; Δᐃ < ᐃᐃⲆΔ.length; Δᐃ++) {
				ᐃᐃⲆΔ[Δᐃ].info.translate.x = ⲆᐃᐃⵠⵠⲆΔⲆⲆ + (ᐃᐃⲆΔ[Δᐃ].info.width + 5) * Δᐃ;
				ᐃᐃⲆΔ[Δᐃ].info.translate.y = ΔⵠⲆΔ - ᐃᐃⲆΔ[Δᐃ].info.width - 10;
				this.ⵠⵠΔᐃΔ[ᐃᐃⲆΔ[Δᐃ].id].info.translate.x = ᐃᐃⲆΔ[Δᐃ].info.translate.x + ᐃΔΔΔⵠ;
				this.ⵠⵠΔᐃΔ[ᐃᐃⲆΔ[Δᐃ].id].info.translate.y = ᐃᐃⲆΔ[Δᐃ].info.translate.y - this.ⵠⵠΔᐃΔ[ᐃᐃⲆΔ[Δᐃ].id].info.ⵠΔ[ⵠⲆΔⵠ].height - 6
			}
		};
		var ⲆⵠⲆⵠⲆ = 0;
		var ⲆⵠᐃΔΔ = 30;
		var ᐃᐃⲆᐃΔⲆΔ = function() {
			ⲆⲆᐃ.ᐃᐃⵠ();
			ⲆⵠⲆⵠⲆ++;
			if (ⲆⵠⲆⵠⲆ == ⲆⵠᐃΔΔ) {
				ⲆⲆᐃ.ΔⲆᐃⵠⲆᐃⵠ();
				ⲆⲆᐃ.ᐃᐃⵠ();
				return
			}
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]](ᐃᐃⲆᐃΔⲆΔ, 33)
		};
		this.ΔⲆⵠᐃΔ = function(ⲆⲆᐃⲆⲆ) {
			ⵠⵠⵠ.ΔⵠΔΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠⵠⵠ.ΔⵠΔΔⲆ.ΔⲆⵠᐃΔ();
			ⵠⵠⵠ.ⵠΔΔⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠⵠⵠ.ⵠΔΔⵠⵠ.ΔⲆⵠᐃΔ();
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[445]).style.display = Δ[369];
			ⲆⲆᐃ.ⵠⵠᐃⲆᐃ.style.display = Δ[369];
			ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false;
			ⲆⲆᐃ.sign.style.display = Δ[369];
			ⲆⲆᐃ.sign[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false;
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[142]).style.display = Δ[369];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[223]).style.display = Δ[369];
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[478]).style.display = Δ[369];
			ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ⵠⲆⵠᐃᐃ;
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("option_in_game").style.display = Δ[369];
			ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false;
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("sure_delete").style.display = Δ[369];
			ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false;
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[270]).style.display = Δ[369];
			ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = ΔⲆᐃⵠΔ;
			document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("chronoquest").style.display = Δ[369];
			ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] = false;
			ΔᐃⵠⲆⲆ = ⲆⲆᐃⲆⲆ;
			ⲆⲆᐃ.ⲆᐃⲆⲆⲆΔⵠ();
			ⲆⲆᐃ.ⲆⲆ.style.cursor = ⲆⲆᐃ.ᐃⵠⵠⵠᐃΔⲆ;
			ⵠᐃⲆΔ.ΔⲆⵠᐃΔ();
			ⲆᐃⵠΔⲆ = -1;
			Δᐃⵠᐃᐃ();
			ⲆⵠᐃⵠⲆⲆⲆ()
		};
		var ΔᐃⵠⲆⲆ;
		var ⲆᐃⵠΔⲆ = -1;
		var ΔΔⲆᐃΔ = 30;
		var Δᐃⵠᐃᐃ = function() {
			ⲆⲆᐃ.ᐃᐃⵠ();
			ⲆᐃⵠΔⲆ++;
			if (ΔΔⲆᐃΔ == ⲆᐃⵠΔⲆ) {
				ⲆⲆᐃ.stop();
				ΔᐃⵠⲆⲆ();
				return
			}
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]](Δᐃⵠᐃᐃ, 33)
		};
		this.ΔⲆΔⵠⵠ = ⵠⲆⵠᐃᐃ;
		this.stop = function() {
			this.ΔⲆΔⵠⵠ = ΔⲆΔΔᐃ
		};
		this.ⵠⲆᐃᐃΔ = function() {
			ᐃⵠΔΔ.ᐃⵠᐃΔᐃⵠⵠⵠᐃ();
			ⲆⲆᐃ.ΔⲆΔⵠⵠ = true;
			ⲆᐃⵠΔⲆ = -ⵠΔᐃ;
			ⲆⵠⲆⵠⲆ = ⵠⵠΔᐃ;
			ᐃᐃⲆᐃΔⲆΔ()
		};
		this.ᐃᐃⵠ = function() {
			this.ⲆⲆⲆⵠ.translate.x = ⲆΔⲆᐃ - this.ⲆⲆⲆⵠ.ⵠΔ.width - 10;
			this.ⲆⲆⲆⵠ.translate.y = 5;
			ⲆⲆⲆ.ΔᐃᐃⲆⵠ.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[ⵠ.ⵠΔⲆᐃⲆᐃᐃ][0].width - 85;
			ⲆⲆⲆ.ΔᐃᐃⲆⵠ.translate.y = ᐃⲆⲆⵠⲆ;
			this.ΔΔΔⵠ.button.info.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⲆᐃΔ][0].width - 10;
			this.ΔΔΔⵠ.button.info.translate.y = 10;
			this.ⵠⲆⲆᐃ.button.info.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[ⵠ.ᐃᐃΔⵠΔⵠⲆ][0].width - ⵠΔⲆΔⵠ;
			this.ⵠⲆⲆᐃ.button.info.translate.y = this.ΔΔΔⵠ.button.info.translate.y + Ⲇⵠ[ⵠ.ⵠⵠⵠⵠⲆᐃΔ][ΔᐃΔ].height + ΔⲆΔᐃⵠ;
			this.options.button.info.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃⵠⵠ][0].width - ᐃΔⲆΔᐃ;
			this.options.button.info.translate.y = this.ⵠⲆⲆᐃ.button.info.translate.y + Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃⵠⵠ][0].height + ᐃᐃⲆᐃᐃΔⲆ;
			this.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.info.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃⵠⵠ][0].width - ⲆⲆᐃⵠⲆ;
			this.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.info.translate.y = this.options.button.info.translate.y + Ⲇⵠ[ⵠ.ΔⲆⲆᐃⲆᐃᐃ][0].height;
			this.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.info.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[ⵠ.ᐃΔᐃⵠᐃⵠⵠ][ⵠⲆⵠ].width - 20;
			this.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.info.translate.y = this.options.button.info.translate.y + Ⲇⵠ[ⵠ.ΔⲆⲆᐃⲆᐃᐃ][0].height;
			this.ⵠⵠᐃⲆᐃ.button.info.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠⵠⵠ][0].width - 20;
			this.ⵠⵠᐃⲆᐃ.button.info.translate.y = this.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.info.translate.y + Ⲇⵠ[ⵠ.ΔᐃᐃⲆⵠⵠⵠ][ᐃΔΔ].height;
			ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.x = this.ⲆⲆⲆⵠ.translate.x - 63 - 85;
			ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.y = ⵠᐃΔⲆᐃ;
			ⵠⵠⵠ.ΔΔᐃᐃΔ.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[ⵠ.ⵠⲆⲆΔⲆⲆΔ].width - 85;
			ⵠⵠⵠ.ΔΔᐃᐃΔ.translate.y = ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.y + 10 + Ⲇⵠ[ⵠ.ⲆΔᐃΔᐃΔᐃ].height;
			this.ⵠⲆⵠᐃⵠ.translate.y = ΔⵠⲆΔ - 3 - 193;
			this.ⵠⲆⵠᐃⵠ.translate.x = ⲆΔⲆᐃ - ⵠᐃⲆᐃ - 193;
			this.ᐃⵠⲆᐃ.translate.x = 5;
			this.ᐃⵠⲆᐃ.translate.y = ΔⵠⲆΔ - this.ᐃⵠⲆᐃ.ⵠΔ.height - 5;
			this.ⵠΔⲆΔ.button.info.translate.x = ᐃᐃᐃΔ - 45.5;
			this.ⵠΔⲆΔ.button.info.translate.y = 50;
			this.ⵠⵠⵠΔⵠᐃⲆ();
			this.ⲆⵠⵠⲆᐃᐃⲆ();
			this.ⲆᐃⲆⵠᐃⵠΔ();
			this.ⲆⵠᐃΔⲆΔΔ();
			this.ΔⲆⵠⲆΔᐃⵠ();
			this.ⵠⲆᐃΔⲆΔᐃ();
			this.ⲆⵠᐃᐃΔΔΔ();
			this.ⵠⵠⲆⵠⵠⵠⵠᐃΔ();
			this.sign.ⵠⵠⲆΔᐃΔΔ();
			ⵠⲆΔⲆΔⲆᐃ();
			ⵠⵠⵠ.ΔⵠΔΔⲆ.ᐃᐃⵠ();
			ⵠⵠⵠ.ⵠΔΔⵠⵠ.ᐃᐃⵠ();
			this.ⵠⲆΔⲆΔⲆᐃᐃⲆ.ᐃᐃⵠ();
			this.ΔΔΔⵠ.ΔⵠⲆⵠⵠΔΔ.ᐃᐃⵠ();
			this.ΔΔΔⵠ.list.ᐃᐃⵠ();
			this.ⲆⲆᐃⵠ.ᐃᐃⵠ();
			this.ᐃΔᐃⲆⵠ.ᐃᐃⵠ();
			this.ⵠⲆⲆᐃ.ᐃᐃⵠ();
			this.ⵠΔⲆΔ.ᐃᐃⵠ();
			this.options.ᐃᐃⵠ();
			this.ⵠⵠᐃⲆᐃ.ᐃᐃⵠ();
			this.sign.ᐃᐃⵠ();
			var ΔᐃⵠⲆ = 0;
			if (ⲆⵠⲆⵠⲆ != ⲆⵠᐃΔΔ) {
				var ΔᐃⵠⲆ = 1500 / (ⲆⵠⲆⵠⲆ + ⵠΔᐃ) - 50
			}
			if (-ⵠⲆⲆⲆ != ⲆᐃⵠΔⲆ) {
				var ΔᐃⵠⲆ = -(1500 / (ΔΔⲆᐃΔ - ⲆᐃⵠΔⲆ + 1) - 48)
			}
			this.ⵠΔⲆΔ.button.info.translate.y -= ⵠᐃΔ < ΔᐃⵠⲆ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
			this.ⲆⲆⲆⵠ.translate.y -= Ⲇᐃⵠⵠ < ΔᐃⵠⲆ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
			ⵠⵠⵠ.ᐃⲆΔΔᐃ.translate.y -= ⲆⲆᐃΔ < ΔᐃⵠⲆ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
			ⵠⵠⵠ.ΔΔᐃᐃΔ.translate.y -= ΔᐃⵠⲆ > 0 ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
			this.ΔΔΔⵠ.button.info.translate.y -= ΔᐃⵠⲆ > ᐃΔΔ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
			this.ⵠⲆⲆᐃ.button.info.translate.y -= 0 < ΔᐃⵠⲆ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
			this.options.button.info.translate.y -= ΔᐃⵠⲆ > 0 ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
			this.ⵠⵠᐃⲆᐃ.button.info.translate.y -= 0 < ΔᐃⵠⲆ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
			this.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.info.translate.y -= 0 < ΔᐃⵠⲆ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
			this.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.info.translate.y -= 0 < ΔᐃⵠⲆ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
			ⲆⲆⲆ.ΔᐃᐃⲆⵠ.translate.y -= 0 < ΔᐃⵠⲆ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
			this.ᐃⵠⲆᐃ.translate.y -= ΔᐃⵠⲆ < ⵠᐃΔ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ;
			this.ⵠⲆⵠᐃⵠ.translate.y -= ΔᐃⵠⲆ < ⲆⲆᐃΔ ? ΔᐃⵠⲆ : -ΔᐃⵠⲆ
		};
		this.ᐃᐃᐃΔΔΔΔΔⲆ = function() {
			!ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled && this.ⵠᐃⲆⵠⵠᐃᐃ && !ⵠⵠⵠ.ⵠΔⲆⲆⲆ && ⲆᐃⲆⲆⵠⵠᐃΔⵠ();
			ⲆΔΔⲆΔⵠⲆⵠΔ();
			ⵠⵠⵠⵠΔΔⲆⲆⵠ();
			if (this.ⵠᐃⲆⵠⵠᐃᐃ) {
				ᐃⲆᐃᐃΔᐃⵠⵠᐃ();
				if (ⲆⵠΔⲆ === this.ᐃⲆΔΔΔΔⵠ) this.ΔΔΔⵠ.button.ⲆᐃᐃⲆ(ᐃ);
				ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ !== ⲆⲆⲆ.mode && ⵠΔᐃⲆ.ⵠΔΔⲆⵠ !== ⲆⲆⲆ.mode && ⲆⲆⲆ.mode !== ⵠΔᐃⲆ.ⵠΔⲆⵠᐃΔΔ && 1 === this.ⵠᐃⵠⲆⲆᐃⲆ && this.ⵠⲆⲆᐃ.button.ⲆᐃᐃⲆ(ᐃ);
				this.options.button.ⲆᐃᐃⲆ(ᐃ);
				if (ⵠⲆⲆⲆ === this.ⵠΔΔᐃⵠᐃΔ) this.ⵠⵠᐃⲆᐃ.button.ⲆᐃᐃⲆ(ᐃ);
				ⵠᐃⲆΔ.ⵠⲆᐃᐃΔ ? this.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.ⲆᐃᐃⲆ(ᐃ) : this.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.ⲆᐃᐃⲆ(ᐃ);
				ⵠⵠᐃⵠΔⵠᐃΔⲆ();
				ΔⵠΔᐃΔΔᐃΔⲆ();
				this.ᐃⵠⲆᐃ.ⲆᐃᐃⲆ();
				ⲆΔⵠΔⲆⲆⲆᐃⵠ();
				ⵠᐃⲆΔⲆᐃⲆⵠⲆ();
				ᐃⵠⲆΔⲆᐃⵠⵠᐃ();
				ΔΔⵠⵠⲆⵠᐃᐃⲆ();
				ⵠⲆᐃⲆᐃᐃᐃΔⵠ();
				ⵠΔⵠⵠᐃᐃⲆⲆᐃ();
				ᐃⲆΔⲆⵠⵠⲆⵠⵠ();
				ⵠΔⵠΔᐃⵠᐃⵠⵠ();
				ᐃᐃⲆᐃⲆⲆⲆⵠⵠ();
				ᐃᐃⲆⵠΔΔΔⲆΔ();
				ᐃⲆⲆΔⲆⲆΔⵠΔ();
				ⲆᐃΔᐃⵠⲆⵠⵠⲆ();
				ⵠⲆΔⲆΔⲆᐃ();
				ΔⵠⵠᐃⵠⲆᐃⵠⲆ()
			}
			if (ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled) ⵠΔᐃᐃᐃⲆⲆⲆⵠ();
			ⲆᐃⵠΔᐃΔⵠⲆⲆ();
			if (this.ⵠᐃⲆⵠⵠᐃᐃ && ᐃΔⵠΔ === this.ᐃᐃⵠᐃΔⵠᐃ) ΔⲆΔⵠᐃᐃᐃΔᐃ();
			ⵠⵠⵠ.ⵠⵠⲆΔΔᐃᐃ.ⲆᐃᐃⲆ();
			ⵠⵠⵠ.alert.ⲆᐃᐃⲆ(Δ[560], Δ[287]);
			if (this.ⵠᐃⲆⵠⵠᐃᐃ) {
				ⵠⵠⵠ.ΔⲆⵠⲆᐃ.ⲆᐃᐃⲆ();
				ⵠⵠⵠ.ⵠΔⲆΔ.ⲆᐃᐃⲆ();
				ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃⲆΔΔΔΔᐃ.ⲆᐃᐃⲆ(ᐃⵠⵠⲆ.ⵠΔΔⲆ.x, ᐃⵠⵠⲆ.ⵠΔΔⲆ.y)
			}
			ᐃⲆᐃΔⵠⵠΔⲆΔ()
		};
		this.ⲆᐃᐃⵠⵠΔᐃⵠⵠ = function() {
			ⵠⵠⵠ.ᐃⵠⲆ.ᐃᐃⵠ();
			ⵠⵠⵠ.ᐃⵠⲆᐃ.ᐃᐃⵠ();
			if (!ⵠⵠⵠ.reconnect.enabled && ⵠⵠⵠ.ⲆᐃᐃⲆⲆ) {
				ⵠⵠⵠ.control.ᐃᐃⵠ();
				ⵠⵠⵠ.ᐃⲆΔΔᐃ.ᐃᐃⵠ()
			}
			ⲆⲆⲆ.ᐃᐃⵠ();
			this.ⵠⲆⲆᐃ.ⲆⵠᐃΔⵠⲆⲆΔⵠ()
		};
		this.ⵠⲆⲆΔᐃΔⲆⲆⵠ = function() {
			ⵠᐃⵠΔΔⲆᐃᐃᐃ()
		};
		this.ⵠᐃΔᐃᐃⲆⵠᐃΔ = function() {
			ᐃⵠΔΔ.ΔⵠⲆⲆⵠⵠΔⵠⲆ();
			ᐃⵠΔΔ.ᐃᐃΔΔᐃⵠᐃΔᐃ();
			ᐃⵠΔΔ.ⵠⵠⵠⵠⲆⵠᐃⲆⲆ();
			ᐃⵠΔΔ.ⵠΔᐃᐃⵠΔⵠⲆⵠ()
		};
		this.ⲆᐃᐃⲆ = function() {
			if (!ⵠⵠⵠ.reconnect.enabled && ⵠⵠⵠ.ⲆᐃᐃⲆⲆ) this.ⵠᐃΔᐃᐃⲆⵠᐃΔ();
			ⵠᐃⲆΔ.ᐃⲆⵠⵠᐃᐃᐃΔⵠ();
			this.ⲆᐃᐃⵠⵠΔᐃⵠⵠ();
			if (ⵠⵠᐃ === ⵠⵠΔⵠ.ⵠⲆⲆΔⵠⲆᐃ) {
				var ⵠΔ = ΔⲆ.ⲆⲆᐃⲆΔⵠⵠ;
				ᐃΔΔⲆ(ᐃ, ⵠΔ, ᐃᐃᐃΔ - ⵠΔ.width / 4, Δᐃᐃᐃ - ⵠΔ.height / ⵠᐃΔΔΔ, ⵠΔ.width / ΔΔᐃᐃ, ⵠΔ.height / 2);
				return
			}
			this.ⵠⲆⲆΔᐃΔⲆⲆⵠ();
			this.ᐃᐃᐃΔΔΔΔΔⲆ()
		};
		this.ΔⵠⵠⵠⲆΔⵠ = function(ᐃⲆΔᐃ) {
			if (ⵠⵠⵠ.ΔⵠΔΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && 27 === ᐃⲆΔᐃ.keyCode) ⵠⵠⵠ.ΔⵠΔΔⲆ.ΔⲆⵠᐃΔ();
			else if (ⵠⵠⵠ.ⵠΔΔⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && 27 === ᐃⲆΔᐃ.keyCode) ⵠⵠⵠ.ⵠΔΔⵠⵠ.ΔⲆⵠᐃΔ();
			else if (!ⵠⵠⵠ.ΔⵠΔΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⵠⵠⵠ.ⵠΔΔⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && 79 == ᐃⲆΔᐃ.keyCode && -1 == ⲆᐃⵠΔⲆ) ⵠⵠⵠ.ⵠΔΔⵠⵠ.ᐃⲆᐃⵠᐃⲆᐃΔᐃ();
			else if (ΔⵠⲆⵠⵠⲆΔ == ᐃⲆΔᐃ.keyCode && ⲆᐃⵠΔⲆ == -Δᐃᐃ) {
				ⵠⵠⵠ.ⵠΔΔⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] ? ⵠⵠⵠ.ⵠΔΔⵠⵠ.ⲆⵠΔΔΔΔⵠ() : ⵠⵠⵠ.ΔⵠΔΔⲆ.ⵠⲆᐃᐃΔ()
			} else if (!ⵠⵠⵠ.ΔⵠΔΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⵠⵠⵠ.ⵠΔΔⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				if (ᐃⲆΔᐃ.keyCode === 82) ⵠⵠⵠ.ᐃⲆΔΔᐃ.ΔⵠΔⵠⲆⲆΔ();
				else if (ᐃⲆΔᐃ.keyCode === 80 && ⲆⲆⲆ.mode === ⵠΔᐃⲆ.ⲆᐃᐃⲆⵠᐃⵠ && !ⵠⵠⵠ.ⲆⲆᐃⵠΔⲆⵠ) ⵠⵠⵠ.ΔΔᐃᐃΔ.ΔⵠΔⵠⲆⲆΔ();
				else if (49 <= ᐃⲆΔᐃ.keyCode && ᐃⲆΔᐃ.keyCode <= 57) {
					if (ⵠⵠⵠ.ⲆΔᐃⵠ.id < ⵠⵠΔΔ) {
						var Δᐃ = ᐃⲆΔᐃ.keyCode - 49;
						var ΔⲆⲆᐃ = ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ[Δᐃ];
						ΔⲆⲆᐃ && ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(ΔⲆⲆᐃ.id, Δᐃ)
					}
				} else if (89 == ᐃⲆΔᐃ.keyCode) ⵠⵠⵠ.ⲆⵠⲆⵠⵠΔⵠ = !ⵠⵠⵠ.ⲆⵠⲆⵠⵠΔⵠ;
				else 71 == ᐃⲆΔᐃ.keyCode && ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃᐃⲆᐃⵠⵠᐃⵠΔ()
			}
			ᐃⲆⵠⲆΔ.up(ᐃⲆΔᐃ)
		};
		this.ᐃⵠΔⲆᐃᐃⵠ = function(ᐃⲆΔᐃ) {
			ᐃⲆⵠⲆΔ.down(ᐃⲆΔᐃ);
			if (ᐃⲆΔᐃ.keyCode == ΔⲆΔⲆⲆ && !ⵠⵠⵠ.ΔⵠΔΔⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⵠⵠⵠ.ⵠΔΔⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) ᐃⲆΔᐃ.preventDefault()
		};
		this.ᐃΔⵠᐃⵠⲆΔ = function(ᐃⲆΔᐃ) {
			ᐃⵠⵠⲆ.ⵠΔΔⲆ = ᐃⲆⵠⲆⵠᐃᐃ(ⲆⲆᐃ.ⲆⲆ, ᐃⲆΔᐃ);
			var ΔᐃΔΔᐃ = false;
			if (ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < ⵠᐃΔⲆ) ⲆⲆᐃ.ⵠⲆⵠᐃⵠ.focus(ᐃⵠⵠⲆ.ⵠΔΔⲆ);
			var ᐃΔⵠⲆ = ⵠⵠⵠ.ᐃΔⵠⲆ;
			if (0 > ⵠⵠⵠ.ⲆΔᐃⵠ.id && 0 <= ᐃΔⵠⲆ.id) {
				(!ⵠⵠⵠ.ᐃΔⵠⲆ.lock || ⵠⵠⵠ.ᐃΔⵠⲆ.ΔᐃᐃⲆ === ⵠⵠⵠ.id) && (ΔᐃΔΔᐃ |= ⲆⲆᐃ.ⵠⵠΔ[ⵠⵠⵠ.ᐃΔⵠⲆ.id].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ))
			}
			var ⵠⲆⵠᐃ = ⵠⵠⵠ.ⵠⲆⵠᐃ;
			ⵠⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠΔΔᐃ < ⵠⲆⵠᐃ.ⲆΔᐃΔᐃ && (ΔᐃΔΔᐃ |= ⲆⲆᐃ.ⲆᐃⲆⲆⲆⵠᐃ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ));
			var ᐃΔⲆΔ = ⵠⵠⵠ.ᐃΔⲆΔ;
			ᐃΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠᐃΔⲆ < ᐃΔⲆΔ.ΔᐃⵠᐃΔΔΔ && (ΔᐃΔΔᐃ |= ⲆⲆᐃ.ᐃᐃᐃΔΔⲆᐃ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ), ΔᐃΔΔᐃ |= ⲆⲆᐃ.ᐃⲆⲆⵠⲆΔⲆ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ), ΔᐃΔΔᐃ |= ⲆⲆᐃ.ΔΔⲆⲆΔⵠΔ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ), ΔᐃΔΔᐃ |= ⲆⲆᐃ.ᐃⲆⲆⵠΔⲆΔ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ), ΔᐃΔΔᐃ |= ⲆⲆᐃ.ⵠΔⲆⲆᐃⵠⵠ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ));
			var ΔᐃΔᐃ = ⵠⵠⵠ.ΔᐃΔᐃ;
			if (ΔᐃΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠᐃⵠⵠ < ΔᐃΔᐃ.ᐃⲆⵠⲆΔⲆᐃ) {
				ΔᐃΔΔᐃ |= ⲆⲆᐃ.ΔΔᐃⵠΔᐃᐃ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ)
			}
			if (ⵠⵠⵠ.sign[ᐃⲆᐃᐃᐃᐃⵠ[180]]) ΔᐃΔΔᐃ |= ⲆⲆᐃ.sign.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ);
			if (!ⵠⵠⵠ.ᐃΔⵠⲆ.lock) {
				ⵠⵠⵠ.ᐃΔⵠⲆ.ΔᐃᐃᐃⵠⲆⵠ && (ΔᐃΔΔᐃ |= ⲆⲆᐃ.ΔⵠⵠⲆΔΔⲆ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ))
			}
			ⵠⵠⵠ.ᐃΔⵠⲆ.ᐃᐃⵠΔⲆⲆᐃ && (ΔᐃΔΔᐃ |= ⲆⲆᐃ.ⵠΔᐃᐃᐃᐃΔ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ));
			if (0 > ⵠⵠⵠ.ⲆΔᐃⵠ.id && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				var ⵠⲆΔ = ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ;
				for (var Δᐃ = ΔΔⲆⲆ; Δᐃ < ⵠⲆΔ.length; Δᐃ++) {
					var ᐃⲆᐃⵠⵠ = ⵠⲆΔ[Δᐃ].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ);
					ΔᐃΔΔᐃ |= ᐃⲆᐃⵠⵠ;
					ᐃⲆᐃⵠⵠ && ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃⲆΔΔΔΔᐃ.start(Δᐃ, ᐃⵠⵠⲆ.ⵠΔΔⲆ);
					if (ᐃΔⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && (ⲆⲆᐃΔ > ᐃΔⵠⲆ.id || ⵠⲆΔ[Δᐃ].id == ᐃΔⵠⲆ.id) || ⵠⵠⵠ.ΔⵠⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && Ⲇᐃ.ᐃⲆΔⲆ === ⵠⲆΔ[Δᐃ].id || ⵠⵠⵠ.ᐃᐃⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠⲆΔ[Δᐃ].id === Ⲇᐃ.ΔΔⵠΔΔ || ⵠⵠⵠ.ΔᐃΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && (Ⲇᐃ.ᐃⲆΔⲆ === ⵠⲆΔ[Δᐃ].id || Ⲇᐃ.ⵠΔⲆⲆⵠ === ⵠⲆΔ[Δᐃ].id) || ⵠⵠⵠ.ⵠⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && Ⲇᐃ.ⲆᐃΔᐃᐃ === ⵠⲆΔ[Δᐃ].id || ⵠⵠⵠ.ᐃΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && Ⲇᐃ.ᐃⲆΔⲆ === ⵠⲆΔ[Δᐃ].id) {
						ΔᐃΔΔᐃ |= ⲆⲆᐃ.ⵠⵠΔᐃΔ[ⵠⲆΔ[Δᐃ].id].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ)
					}
				}
			}
			if (ⵠⵠⵠ.ⵠΔᐃᐃᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) ΔᐃΔΔᐃ |= ⲆⲆᐃ.ⵠΔᐃᐃᐃ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ);
			if (-ᐃⲆⲆ != ⲆⲆᐃ.ⲆⲆⵠⵠᐃ) {
				ΔᐃΔΔᐃ |= ⲆⲆᐃ.ⵠΔⵠᐃⲆ[ⲆⲆᐃ.ⲆⲆⵠⵠᐃ].button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ);
				if (ΔᐃΔΔᐃ) var ΔⵠΔᐃΔⲆΔ = true
			} else var ΔⵠΔᐃΔⲆΔ = false;
			if (ⵠⵠⵠ.ⲆΔᐃⵠ.id < 0 && ⵠⵠΔΔ > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ && !ΔⵠΔᐃΔⲆΔ && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⵠⵠⵠ.ⵠΔⲆⲆⲆ) {
				var ⵠⲆΔ = ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ;
				for (var Δᐃ = 0; Δᐃ < ⵠⲆΔ.length; Δᐃ++) {
					ΔᐃΔΔᐃ |= ⵠⲆΔ[Δᐃ].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ)
				}
			}
			ⵠⵠⵠ.ⲆΔᐃⵠ.id < ΔᐃΔ && 0 > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ && ⵠⵠⵠ.ⵠΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && (ΔᐃΔΔᐃ |= ⲆⲆᐃ.ⵠΔⲆΔ.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ));
			if (ⵠⲆᐃ > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) ΔᐃΔΔᐃ |= ⲆⲆᐃ.ΔΔΔⵠ.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ);
			ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && (ΔᐃΔΔᐃ |= ⲆⲆᐃ.options.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ));
			if (ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < ⵠΔⵠⲆ && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]]) ΔᐃΔΔᐃ |= ⲆⲆᐃ.ⵠⵠᐃⲆᐃ.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ);
			if (ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				ⵠᐃⲆΔ.ⵠⲆᐃᐃΔ ? ΔᐃΔΔᐃ |= ⲆⲆᐃ.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ) : ΔᐃΔΔᐃ |= ⲆⲆᐃ.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ)
			}
			0 > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⲆⲆⲆ.mode !== ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ && ⵠΔᐃⲆ.ⵠΔΔⲆⵠ !== ⲆⲆⲆ.mode && ⵠΔᐃⲆ.ⵠΔⲆⵠᐃΔΔ !== ⲆⲆⲆ.mode && (ΔᐃΔΔᐃ |= ⲆⲆᐃ.ⵠⲆⲆᐃ.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⵠΔⵠⲆⲆ));
			if (!ΔᐃΔΔᐃ && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.sign[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				if (ⵠⲆᐃ <= ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ) ᐃⵠΔΔ.ΔⲆⵠΔΔⲆᐃⵠⲆ();
				else if (!ΔⵠΔᐃΔⲆΔ) ᐃⵠⵠⲆ.down()
			}
		};
		this.ΔΔⵠⵠⵠᐃⲆ = function(ᐃⲆΔᐃ) {
			ᐃⵠⵠⲆ.ⵠΔΔⲆ = ᐃⲆⵠⲆⵠᐃᐃ(ⲆⲆᐃ.ⲆⲆ, ᐃⲆΔᐃ);
			ᐃⵠⵠⲆ.up();
			if (ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃⲆΔΔΔΔᐃ.release()) return;
			var ᐃΔⵠⲆ = ⵠⵠⵠ.ᐃΔⵠⲆ;
			var ΔⵠⲆⵠⵠ = ⵠⵠⵠ.ΔⵠⲆⵠⵠ;
			var ᐃᐃⲆⵠⵠ = ⵠⵠⵠ.ᐃᐃⲆⵠⵠ;
			var ⵠⲆⵠᐃ = ⵠⵠⵠ.ⵠⲆⵠᐃ;
			var ᐃΔⲆΔ = ⵠⵠⵠ.ᐃΔⲆΔ;
			var ΔᐃΔᐃ = ⵠⵠⵠ.ΔᐃΔᐃ;
			ⵠⵠⵠ.control.attack && (ⵠⵠⵠ.control.attack = 0, ᐃⵠΔΔ.ⵠⲆⵠⵠΔΔᐃⲆΔ());
			if (-ⲆⲆⲆᐃ != ⲆⲆᐃ.ⲆⲆⵠⵠᐃ) {
				var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠΔⵠᐃⲆ[ⲆⲆᐃ.ⲆⲆⵠⵠᐃ].button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
				var ⲆᐃΔⲆ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[445]).style;
				if (ⵠⲆᐃΔ && ⲆᐃΔⲆ.display == Δ[151]) {
					ⲆᐃΔⲆ.display = Δ[369];
					return
				} else if (ⵠⲆᐃΔ) ⲆⲆᐃ.ⵠΔⵠᐃⲆ[ⲆⲆᐃ.ⲆⲆⵠⵠᐃ].action()
			}
			if (ⵠⵠⵠ.ⲆΔᐃⵠ.id < 0 && 0 <= ᐃΔⵠⲆ.id && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				if (!ⵠⵠⵠ.ᐃΔⵠⲆ.lock || ⵠⵠⵠ.id === ⵠⵠⵠ.ᐃΔⵠⲆ.ΔᐃᐃⲆ) {
					var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠⵠΔ[ⵠⵠⵠ.ᐃΔⵠⲆ.id].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
					ⵠⲆᐃΔ && ᐃⵠΔΔ.ΔⲆⵠᐃⵠⵠⲆⵠⵠ(ᐃΔⵠⲆ)
				}
			}
			var ⵠⲆⵠᐃ = ⵠⵠⵠ.ⵠⲆⵠᐃ;
			if (ⵠⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠⲆⵠᐃ.ⲆΔᐃΔᐃ > ⵠΔⵠⲆ && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				var ⵠⲆᐃΔ = ⲆⲆᐃ.ⲆᐃⲆⲆⲆⵠᐃ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
				ⵠⲆᐃΔ && ᐃⵠΔΔ.ⵠᐃᐃⲆⵠΔᐃⲆΔ(ⵠⲆⵠᐃ)
			}
			var ᐃΔⲆΔ = ⵠⵠⵠ.ᐃΔⲆΔ;
			if (ᐃΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ᐃΔⲆΔ.ΔᐃⵠᐃΔΔΔ > ⲆᐃⲆ && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				switch (ᐃΔⲆΔ.type) {
					case ⲆΔⲆ.ⲆⵠΔⵠⵠ:
						var ⵠⲆᐃΔ = ⲆⲆᐃ.ᐃᐃᐃΔΔⲆᐃ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
						ⵠⲆᐃΔ && ᐃⵠΔΔ.ⵠⲆᐃΔΔⲆΔ(ᐃΔⲆΔ);
						break;
					case ⲆΔⲆ.ᐃⵠⵠΔⵠ:
						var ⵠⲆᐃΔ = ⲆⲆᐃ.ᐃⲆⲆⵠⲆΔⲆ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
						ⵠⲆᐃΔ && ᐃⵠΔΔ.ⵠⲆᐃΔΔⲆΔ(ᐃΔⲆΔ);
						break;
					case ⲆΔⲆ.ᐃⵠⵠⵠΔ:
						var ⵠⲆᐃΔ = ⲆⲆᐃ.ΔΔⲆⲆΔⵠΔ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
						if (ⵠⲆᐃΔ) ᐃⵠΔΔ.ⵠⲆᐃΔΔⲆΔ(ᐃΔⲆΔ);
						break;
					case ⲆΔⲆ.ΔⲆᐃΔᐃ:
						var ⵠⲆᐃΔ = ⲆⲆᐃ.ᐃⲆⲆⵠΔⲆΔ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
						ⵠⲆᐃΔ && ᐃⵠΔΔ.ⵠⲆᐃΔΔⲆΔ(ᐃΔⲆΔ);
						break;
					case ⲆΔⲆ.ᐃⲆΔᐃΔ:
						var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠΔⲆⲆᐃⵠⵠ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
						ⵠⲆᐃΔ && ᐃⵠΔΔ.ⵠⲆᐃΔΔⲆΔ(ᐃΔⲆΔ);
						break
				}
			}
			var ΔᐃΔᐃ = ⵠⵠⵠ.ΔᐃΔᐃ;
			if (ΔᐃΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ΔᐃΔᐃ.ᐃⲆⵠⲆΔⲆᐃ > ⵠⵠΔᐃ && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				var ⵠⲆᐃΔ = ⲆⲆᐃ.ΔΔᐃⵠΔᐃᐃ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
				ⵠⲆᐃΔ && ᐃⵠΔΔ.ΔΔΔⲆⵠΔᐃΔᐃ(ΔᐃΔᐃ)
			}
			if (ⵠⵠⵠ.sign[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				var ⵠⲆᐃΔ = ⲆⲆᐃ.sign.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
				ⵠⲆᐃΔ && ⲆⲆᐃ.sign.select()
			}
			if (!ⵠⵠⵠ.ᐃΔⵠⲆ.lock && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				if (ⵠⵠⵠ.ᐃΔⵠⲆ.ΔᐃᐃᐃⵠⲆⵠ) {
					ⵠⲆᐃΔ = ⲆⲆᐃ.ΔⵠⵠⲆΔΔⲆ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
					if (ⵠⲆᐃΔ) ᐃⵠΔΔ.ᐃᐃⵠΔⵠⵠᐃᐃⵠ(ᐃΔⵠⲆ)
				}
			}
			if (ⵠⵠⵠ.ᐃΔⵠⲆ.ᐃᐃⵠΔⲆⲆᐃ && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠΔᐃᐃᐃᐃΔ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
				if (ⵠⲆᐃΔ) {
					ᐃⵠΔΔ.ΔⵠᐃᐃⲆⵠᐃⲆⲆ(ᐃΔⵠⲆ);
					if (ga) ga(Δ[517], Δ[306], Δ[462], "lockpick")
				}
			}
			if (ⵠⵠⵠ.ⵠΔᐃᐃᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠΔᐃᐃᐃ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
				if (ⵠⲆᐃΔ) {
					ᐃⵠΔΔ.ⵠΔᐃᐃᐃ();
					if (ga) ga(Δ[517], Δ[306], Δ[462], "resurrection")
				}
			}
			if (0 > ⵠⵠⵠ.ⲆΔᐃⵠ.id && !ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				var ⵠⲆΔ = ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ;
				for (var Δᐃ = ⵠⵠΔΔ; ⵠⲆΔ.length > Δᐃ; Δᐃ++) {
					var ⵠⲆᐃΔ = ⵠⲆΔ[Δᐃ].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
					if (!ⵠⲆᐃΔ) {
						if (ᐃΔⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && (ᐃΔⵠⲆ.id < 0 || ⵠⲆΔ[Δᐃ].id === ᐃΔⵠⲆ.id)) {
							var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠⵠΔᐃΔ[ⵠⲆΔ[Δᐃ].id].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
							ⵠⲆᐃΔ && ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < ⵠⲆᐃ && ᐃⵠΔΔ.ΔⵠⵠⵠΔΔᐃⵠᐃ(ᐃΔⵠⲆ, ⵠⲆΔ[Δᐃ].id, ᐃⲆΔᐃ.shiftKey ? Settings.PutInChest : ⲆⵠⲆ)
						} else if (ᐃᐃⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠⲆΔ[Δᐃ].id === Ⲇᐃ.ΔΔⵠΔΔ) {
							var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠⵠΔᐃΔ[ⵠⲆΔ[Δᐃ].id].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
							ⵠⲆᐃΔ && ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < ⵠᐃⵠⵠ && ᐃⵠΔΔ.ᐃΔⲆΔⵠⲆᐃΔⵠ(ᐃᐃⲆⵠⵠ)
						} else if (ΔⵠⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠⲆΔ[Δᐃ].id === Ⲇᐃ.ᐃⲆΔⲆ) {
							var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠⵠΔᐃΔ[ⵠⲆΔ[Δᐃ].id].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
							ⵠⲆᐃΔ && ⵠᐃΔⲆ > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ && ᐃⵠΔΔ.ⵠⲆΔⲆⲆⲆᐃⵠΔ(ΔⵠⲆⵠⵠ, ᐃⲆΔᐃ.shiftKey ? 10 : ⵠⵠᐃ)
						} else if (ⵠⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && Ⲇᐃ.ⲆᐃΔᐃᐃ === ⵠⲆΔ[Δᐃ].id) {
							var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠⵠΔᐃΔ[ⵠⲆΔ[Δᐃ].id].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
							ⵠⲆᐃΔ && ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < ⵠΔΔᐃ && ᐃⵠΔΔ.ⲆΔᐃⲆⲆΔΔⲆⲆ(ⵠⲆⵠᐃ, ᐃⲆΔᐃ.shiftKey ? ⵠⵠⲆᐃᐃ : 1)
						} else if (ᐃΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && Ⲇᐃ.ᐃⲆΔⲆ === ⵠⲆΔ[Δᐃ].id) {
							var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠⵠΔᐃΔ[ⵠⲆΔ[Δᐃ].id].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
							if (ⵠⲆᐃΔ && Ⲇᐃⵠⵠ > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ) ᐃⵠΔΔ.ΔᐃᐃⵠⲆᐃᐃΔⲆ(ᐃΔⲆΔ, ᐃⲆΔᐃ.shiftKey ? ΔⲆⲆΔΔ : ΔΔⲆΔ)
						} else if (ΔᐃΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && (ⵠⲆΔ[Δᐃ].id === Ⲇᐃ.ᐃⲆΔⲆ || ⵠⲆΔ[Δᐃ].id === Ⲇᐃ.ⵠΔⲆⲆⵠ)) {
							var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠⵠΔᐃΔ[ⵠⲆΔ[Δᐃ].id].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
							if (ⵠⲆᐃΔ && 0 > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ) {
								if (Ⲇᐃ.ᐃⲆΔⲆ === ⵠⲆΔ[Δᐃ].id) ᐃⵠΔΔ.ΔᐃⵠΔⵠᐃⲆ(ΔᐃΔᐃ, ᐃⲆΔᐃ.shiftKey ? 10 : 1, 0);
								else ᐃⵠΔΔ.ΔᐃⵠΔⵠᐃⲆ(ΔᐃΔᐃ, 0, ᐃⲆΔᐃ.shiftKey ? ⵠΔΔΔⵠ : ᐃⲆΔ)
							}
						}
						continue
					} else {
						if (ᐃⲆΔᐃ.which == ᐃⵠⵠ && !ᐃⲆΔᐃ.shiftKey) ᐃⵠΔΔ.ⵠᐃⲆᐃⲆ(ⵠⲆΔ[Δᐃ].id, Δᐃ);
						else(1 == ᐃⲆΔᐃ.which && ᐃⲆΔᐃ.shiftKey || 3 == ᐃⲆΔᐃ.which) && ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && ⲆⲆᐃ.ⲆⲆᐃⵠ.ΔᐃΔΔⵠⲆⵠ(ⵠⲆΔ[Δᐃ].id)
					}
				}
			}
			if (ⵠⵠⵠ.ⲆΔᐃⵠ.id < ⲆⲆᐃΔ && ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⵠⵠⵠ.ⵠΔⲆⲆⲆ) {
				var ⵠⲆΔ = ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ;
				for (var Δᐃ = 0; Δᐃ < ⵠⲆΔ.length; Δᐃ++) {
					var ⵠⲆᐃΔ = ⵠⲆΔ[Δᐃ].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
					if (!ⵠⲆᐃΔ) continue;
					ᐃⲆᐃⵠⵠ = ᐃⵠΔΔ.ⵠⲆᐃΔᐃⲆⵠΔⲆ(ⵠⲆΔ[Δᐃ].id);
					ᐃⲆᐃⵠⵠ && ga && ga(Δ[517], Δ[306], Δ[462], "craft", ΔⵠΔⲆ[ΔⵠΔⲆΔ[ⵠⲆΔ[Δᐃ].id].ⵠⵠⲆᐃ].name)
				}
			}
			if (ⵠⵠⵠ.ⲆΔᐃⵠ.id < ⵠⲆⵠ && ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && ⵠⵠⵠ.ⵠΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠΔⲆΔ.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ);
				if (ⵠⲆᐃΔ) ⲆΔᐃᐃ.ⵠΔⲆΔ.select()
			}
			if (ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				if (ⵠᐃⲆΔ.ⵠⲆᐃᐃΔ) {
					var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
					if (ⵠⲆᐃΔ) {
						ⵠᐃⲆΔ.select();
						ga && ga(Δ[517], Δ[306], Δ[462], "sound on")
					}
				} else {
					var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
					if (ⵠⲆᐃΔ) {
						ⵠᐃⲆΔ.select();
						ga && ga(Δ[517], Δ[306], Δ[462], "sound off")
					}
				}
			}
			if (ΔΔⲆⲆ > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				var ⵠⲆᐃΔ = ⲆⲆᐃ.options.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
				if (ⵠⲆᐃΔ) {
					ⲆⲆᐃ.options.ⲆΔᐃⲆⲆⵠᐃΔⵠ();
					if (ga) ga(Δ[517], Δ[306], Δ[462], "options")
				}
			}
			if (ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⲆⲆᐃ.ⵠΔΔᐃⵠᐃΔ === 1) {
				var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠⵠᐃⲆᐃ.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
				if (ⵠⲆᐃΔ) {
					ⲆⲆᐃ.ⵠⵠᐃⲆᐃ.select();
					if (ga) ga(Δ[517], Δ[306], Δ[462], "market")
				}
			}
			if (0 > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && 1 === ⲆⲆᐃ.ᐃⲆΔΔΔΔⵠ) {
				var ⵠⲆᐃΔ = ⲆⲆᐃ.ΔΔΔⵠ.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
				if (ⵠⲆᐃΔ) {
					ⲆⲆᐃ.ΔΔΔⵠ.ᐃΔⵠᐃΔᐃⲆᐃⵠ();
					ga && ga(Δ[517], Δ[306], Δ[462], "recipe")
				}
			}
			if (ΔᐃΔ > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ !== ⲆⲆⲆ.mode && ⲆⲆⲆ.mode !== ⵠΔᐃⲆ.ⵠΔΔⲆⵠ && ⵠΔᐃⲆ.ⵠΔⲆⵠᐃΔΔ !== ⲆⲆⲆ.mode && ⲆⲆᐃ.ⵠᐃⵠⲆⲆᐃⲆ === 1) {
				var ⵠⲆᐃΔ = ⲆⲆᐃ.ⵠⲆⲆᐃ.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆⵠᐃᐃΔ);
				if (ⵠⲆᐃΔ) {
					ⲆⲆᐃ.ⵠⲆⲆᐃ.select();
					ga && ga(Δ[517], Δ[306], Δ[462], "quests")
				}
			}
			if (ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆΔᐃᐃᐃ && ᐃⵠᐃⲆ == ᐃⲆΔᐃ.which) ⲆⲆᐃ.ᐃΔᐃⲆⵠ.ΔᐃΔΔⵠⲆⵠ()
		};
		this.ᐃΔⲆⵠⲆⲆⲆ = false;
		this.ΔⵠΔⲆⲆΔⵠ = function(ᐃⲆΔᐃ) {
			ᐃⵠⵠⲆ.ⵠΔΔⲆ = ᐃⲆⵠⲆⵠᐃᐃ(ⲆⲆᐃ.ⲆⲆ, ᐃⲆΔᐃ);
			var ΔΔⵠᐃΔ = ⲆⲆⲆΔᐃ;
			ⲆΔᐃᐃ.ⵠᐃⵠᐃᐃ.display = ⵠⵠΔᐃ;
			ⵠⵠⵠ.ᐃᐃⲆΔ.ᐃⲆΔΔΔΔᐃ.ⵠΔⲆᐃⵠ(ᐃⵠⵠⲆ.ⵠΔΔⲆ);
			ⲆⲆᐃ.ⲆⲆⵠⵠᐃ != -1 && (ΔΔⵠᐃΔ |= ⲆⲆᐃ.ⵠΔⵠᐃⲆ[ⲆⲆᐃ.ⲆⲆⵠⵠᐃ].button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ));
			var ⵠⲆⵠᐃ = ⵠⵠⵠ.ⵠⲆⵠᐃ;
			ⵠⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠⲆⵠᐃ.ⲆΔᐃΔᐃ > Δⵠⵠ && (ΔΔⵠᐃΔ |= ⲆⲆᐃ.ⲆᐃⲆⲆⲆⵠᐃ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ));
			var ᐃΔⲆΔ = ⵠⵠⵠ.ᐃΔⲆΔ;
			ᐃΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ᐃΔⲆΔ.ΔᐃⵠᐃΔΔΔ > 0 && (ΔΔⵠᐃΔ |= ⲆⲆᐃ.ᐃᐃᐃΔΔⲆᐃ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ), ΔΔⵠᐃΔ |= ⲆⲆᐃ.ᐃⲆⲆⵠⲆΔⲆ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ), ΔΔⵠᐃΔ |= ⲆⲆᐃ.ΔΔⲆⲆΔⵠΔ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ), ΔΔⵠᐃΔ |= ⲆⲆᐃ.ᐃⲆⲆⵠΔⲆΔ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ), ΔΔⵠᐃΔ |= ⲆⲆᐃ.ⵠΔⲆⲆᐃⵠⵠ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ));
			var ΔᐃΔᐃ = ⵠⵠⵠ.ΔᐃΔᐃ;
			ΔᐃΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ΔᐃΔᐃ.ᐃⲆⵠⲆΔⲆᐃ > ⵠΔⵠⲆ && (ΔΔⵠᐃΔ |= ⲆⲆᐃ.ΔΔᐃⵠΔᐃᐃ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ));
			ⵠⵠⵠ.sign[ᐃⲆᐃᐃᐃᐃⵠ[180]] && (ΔΔⵠᐃΔ |= ⲆⲆᐃ.sign.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ));
			var ᐃΔⵠⲆ = ⵠⵠⵠ.ᐃΔⵠⲆ;
			if (ⵠⵠⵠ.ⲆΔᐃⵠ.id < ⵠᐃΔⲆ && ᐃΔⵠⲆ.id >= ΔᐃΔ && !ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled) {
				(!ⵠⵠⵠ.ᐃΔⵠⲆ.lock || ⵠⵠⵠ.id === ⵠⵠⵠ.ᐃΔⵠⲆ.ΔᐃᐃⲆ) && (ΔΔⵠᐃΔ |= ⲆⲆᐃ.ⵠⵠΔ[ᐃΔⵠⲆ.id].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ))
			}
			if (ⵠⵠⵠ.ⵠΔᐃᐃᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) ΔΔⵠᐃΔ |= ⲆⲆᐃ.ⵠΔᐃᐃᐃ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ);
			if (!ⵠⵠⵠ.ᐃΔⵠⲆ.lock && !ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled) {
				ⵠⵠⵠ.ᐃΔⵠⲆ.ΔᐃᐃᐃⵠⲆⵠ && (ΔΔⵠᐃΔ |= ⲆⲆᐃ.ΔⵠⵠⲆΔΔⲆ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ))
			}
			if (ⵠⵠⵠ.ᐃΔⵠⲆ.ᐃᐃⵠΔⲆⲆᐃ && !ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled) ΔΔⵠᐃΔ |= ⲆⲆᐃ.ⵠΔᐃᐃᐃᐃΔ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ);
			if (ⵠΔⵠⲆ > ⵠⵠⵠ.ⲆΔᐃⵠ.id && !ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled) {
				var ⵠⲆΔ = ⵠⵠⵠ.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ;
				for (var Δᐃ = 0; ⵠⲆΔ.length > Δᐃ; Δᐃ++) {
					var ΔⵠᐃᐃᐃᐃΔ = ⵠⲆΔ[Δᐃ].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ);
					ΔΔⵠᐃΔ |= ⲆΔᐃᐃ.ⵠᐃⵠᐃᐃ.ⵠⲆⵠⲆ(ΔⵠᐃᐃᐃᐃΔ, ⵠⲆΔ[Δᐃ], 0);
					(ᐃΔⵠⲆ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && (0 > ᐃΔⵠⲆ.id || ᐃΔⵠⲆ.id == ⵠⲆΔ[Δᐃ].id) || ⵠⵠⵠ.ΔⵠⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠⲆΔ[Δᐃ].id == Ⲇᐃ.ᐃⲆΔⲆ || ⵠⵠⵠ.ᐃᐃⲆⵠⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠⲆΔ[Δᐃ].id === Ⲇᐃ.ΔΔⵠΔΔ || ⵠⵠⵠ.ΔᐃΔᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && (ⵠⲆΔ[Δᐃ].id == Ⲇᐃ.ᐃⲆΔⲆ || Ⲇᐃ.ⵠΔⲆⲆⵠ == ⵠⲆΔ[Δᐃ].id) || ⵠⵠⵠ.ⵠⲆⵠᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠⲆΔ[Δᐃ].id == Ⲇᐃ.ⲆᐃΔᐃᐃ || ⵠⵠⵠ.ᐃΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠⲆΔ[Δᐃ].id == Ⲇᐃ.ᐃⲆΔⲆ) && (ΔΔⵠᐃΔ |= ⲆⲆᐃ.ⵠⵠΔᐃΔ[ⵠⲆΔ[Δᐃ].id].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ))
				}
			}
			if (0 > ⵠⵠⵠ.ⲆΔᐃⵠ.id && 0 > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ && !ⵠⵠⵠ.ΔⲆⵠⲆᐃ.enabled && !ⵠⵠⵠ.ⵠΔⲆⲆⲆ) {
				var ⵠⲆΔ = ⵠⵠⵠ.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ;
				for (var Δᐃ = ⵠᐃⵠⵠ; Δᐃ < ⵠⲆΔ.length; Δᐃ++) {
					var ΔⵠᐃᐃᐃᐃΔ = ⲆΔΔⵠⵠ;
					ΔⵠᐃᐃᐃᐃΔ = ⵠⲆΔ[Δᐃ].ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ);
					ΔΔⵠᐃΔ |= ⲆΔᐃᐃ.ⵠᐃⵠᐃᐃ.ⵠⲆⵠⲆ(ΔⵠᐃᐃᐃᐃΔ, ⵠⲆΔ[Δᐃ], ⵠΔΔ)
				}
			}
			ⵠⵠⵠ.ⲆΔᐃⵠ.id < 0 && ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < ⵠⵠΔΔ && ⵠⵠⵠ.ⵠΔⲆΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && (ΔΔⵠᐃΔ |= ⲆⲆᐃ.ⵠΔⲆΔ.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ));
			0 > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⲆⲆᐃ.ᐃⲆΔΔΔΔⵠ === ⲆΔᐃΔ && (ΔΔⵠᐃΔ |= ⲆⲆᐃ.ΔΔΔⵠ.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ));
			if (ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) ΔΔⵠᐃΔ |= ⲆⲆᐃ.options.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ);
			if (0 > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⵠⵠⵠΔ === ⲆⲆᐃ.ⵠΔΔᐃⵠᐃΔ) ΔΔⵠᐃΔ |= ⲆⲆᐃ.ⵠⵠᐃⲆᐃ.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ);
			if (ⵠⵠΔᐃ > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]]) {
				if (ⵠᐃⲆΔ.ⵠⲆᐃᐃΔ) ΔΔⵠᐃΔ |= ⲆⲆᐃ.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ);
				else ΔΔⵠᐃΔ |= ⲆⲆᐃ.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ)
			}
			if (0 > ⵠⵠⵠ.ⲆΔᐃⵠ.ᐃΔᐃⵠ && !ⲆⲆᐃ.ΔΔΔⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⲆⲆᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.options[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ᐃΔᐃⲆⵠ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && !ⲆⲆᐃ.ⵠⵠᐃⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]] && ⲆⲆⲆ.mode !== ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ && ⲆⲆⲆ.mode !== ⵠΔᐃⲆ.ⵠΔΔⲆⵠ && ⲆⲆⲆ.mode !== ⵠΔᐃⲆ.ᐃⵠⵠⲆΔΔⵠⲆΔ && ⲆⲆᐃ.ⵠᐃⵠⲆⲆᐃⲆ === 1) ΔΔⵠᐃΔ |= ⲆⲆᐃ.ⵠⲆⲆᐃ.button.ⵠⲆⵠⲆ(ⲆⲆᐃ.ⲆⲆ, ᐃⵠⵠⲆ.ⵠΔΔⲆ, ⲆᐃᐃⲆᐃ);
			if (ⲆⲆᐃ.ᐃΔⲆⵠⲆⲆⲆ !== ΔΔⵠᐃΔ) {
				ⲆⲆᐃ.ᐃΔⲆⵠⲆⲆⲆ = ΔΔⵠᐃΔ;
				ΔΔⵠᐃΔ ? ⲆⲆ.style[Δ[259]] = ⲆⲆᐃ.ⵠᐃᐃΔⲆⵠⲆ : ⲆⲆ.style[Δ[259]] = ⲆⲆᐃ.ᐃⵠⵠⵠᐃΔⲆ
			}
		};
		this.ΔⲆᐃⵠⲆᐃⵠ = function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[380], this.ᐃΔⵠᐃⵠⲆΔ, ⲆΔᐃⵠᐃ);
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[458], this.ΔΔⵠⵠⵠᐃⲆ, false);
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]](Δ[557], this.ΔⵠΔⲆⲆΔⵠ, false);
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]]("keyup", this.ΔⵠⵠⵠⲆΔⵠ, ΔⲆᐃⵠΔ);
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[117]]("keydown", this.ᐃⵠΔⲆᐃᐃⵠ, false)
		};
		this.ⲆᐃⲆⲆⲆΔⵠ = function() {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[284]](Δ[380], this.ᐃΔⵠᐃⵠⲆΔ, false);
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[284]](Δ[458], this.ΔΔⵠⵠⵠᐃⲆ, ⵠᐃᐃⵠΔ);
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[284]](Δ[557], this.ΔⵠΔⲆⲆΔⵠ, ⲆⵠⲆΔᐃ);
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[284]]("keyup", this.ΔⵠⵠⵠⲆΔⵠ, false);
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[284]]("keydown", this.ᐃⵠΔⲆᐃᐃⵠ, false)
		}
	}
	var ⵠⲆⲆᐃⲆ = {
		"Ⲇⵠⵠᐃⵠ": ⵠⵠᐃ,
		"ΔⵠⲆⵠᐃⵠΔ": ⵠⵠⵠΔ
	};
	var ᐃᐃⵠⲆ = {
		"Ⲇᐃᐃⵠᐃ": 1,
		"ⲆΔⲆ": 6,
		"ΔⲆⵠΔᐃⲆΔⲆⲆ": 5e3,
		"ⵠⲆΔⵠᐃ": 3,
		"ⵠⵠⲆᐃᐃⲆⵠᐃⲆ": 12,
		"ⵠΔΔΔᐃⲆⵠⵠⵠ": 5e3,
		"ᐃⲆⲆⲆ": ⲆᐃⲆΔⲆ,
		"ΔΔΔⲆⵠⵠⲆⵠᐃ": 5e3,
		"ⵠⲆᐃΔΔΔⵠⲆᐃ": 12,
		"ⲆᐃⵠⲆⲆᐃΔ": ᐃΔΔⵠⲆⵠᐃ,
		"ᐃⵠⲆⲆᐃⵠⲆ": 3e3,
		"ⲆⲆⲆⲆⵠ": ᐃᐃᐃᐃ,
		"ᐃΔᐃᐃⵠΔⵠ": 46e4
	};
	var ⲆⲆⲆⲆᐃ = [];
	ⲆⲆⲆⲆᐃ[-1] = ᐃᐃⵠⲆ.Ⲇᐃᐃⵠᐃ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.Δⵠᐃᐃⵠ] = ᐃᐃⵠⲆ.Ⲇᐃᐃⵠᐃ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⲆⵠⲆᐃΔ] = ᐃᐃⵠⲆ.Ⲇᐃᐃⵠᐃ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⲆⲆⲆΔⲆⵠᐃΔⵠ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⲆΔⲆⵠΔ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ᐃⲆΔⵠᐃ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.Ⲇⵠᐃᐃᐃ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠᐃⲆⲆᐃ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⲆᐃΔⵠⲆ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ΔⵠᐃᐃⲆ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ᐃᐃⲆⲆⲆ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ΔᐃΔΔΔ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠⲆᐃⲆⵠ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⲆⵠⲆⲆⵠ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ΔⵠᐃⵠΔ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⲆⲆⲆΔΔ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ᐃΔᐃᐃⲆ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠΔⵠⵠᐃ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ᐃⲆⵠᐃⵠⲆᐃᐃΔ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ᐃⵠᐃᐃⲆ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ΔᐃⵠᐃⲆ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠᐃⵠⵠΔ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠΔⲆⲆᐃ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ᐃⵠᐃⵠⲆ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠᐃⵠⲆᐃ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠⲆⲆⲆΔ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	const ⲆⲆᐃΔΔⵠᐃᐃⲆ = 16056954;

	function ⲆΔᐃΔⲆΔΔ(ΔΔⵠⵠⲆᐃᐃⲆⵠ) {
		const ⲆⲆᐃΔΔⵠᐃᐃⲆ = Math.floor;
		let ⲆⲆⵠⵠⵠᐃⲆ = 0;
		const ᐃᐃΔᐃⵠΔⵠΔΔ = function(ᐃᐃΔᐃⵠΔⵠΔΔ) {
			for (let ⵠⵠⲆΔⵠΔΔⲆΔ = 0; ⵠⵠⲆΔⵠΔΔⲆΔ < 3662; ⵠⵠⲆΔⵠΔΔⲆΔ++) ⲆⲆⵠⵠⵠᐃⲆ += ⵠⵠⲆΔⵠΔΔⲆΔ;
			return ⲆⲆᐃΔΔⵠᐃᐃⲆ(ᐃᐃΔᐃⵠΔⵠΔΔ)
		};
		Math.floor = ᐃᐃΔᐃⵠΔⵠΔΔ
	}
	const ΔΔⵠⵠⲆᐃᐃⲆⵠ = ⲆΔᐃΔⲆΔΔ + ";" + "let ΔΔⵠⵠⲆᐃᐃⲆⵠ = " + ⲆΔᐃΔⲆΔΔ + ";";
	const ᐃᐃΔᐃⵠΔⵠΔΔ = ΔΔⵠⵠⲆᐃᐃⲆⵠ + "let ⵠⵠⲆΔⵠΔΔⲆΔ = 16544076; try { ⵠⵠⲆΔⵠΔΔⲆΔ = ⲆΔᐃΔⲆΔΔ; } catch (ⲆⲆⵠⵠⵠᐃⲆ) { ΔΔⵠⵠⲆᐃᐃⲆⵠ (); };";
	ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[103]](ᐃᐃΔᐃⵠΔⵠΔΔ, 0);
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠⵠΔⲆⲆΔⵠᐃΔ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ΔΔΔⲆⲆ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⲆᐃᐃⵠⲆ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠᐃΔΔᐃ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠΔⲆⵠⵠ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠΔⵠⵠΔ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⲆⵠⲆΔΔ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ᐃⵠΔᐃᐃ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⲆᐃΔᐃΔ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⲆⵠΔᐃΔ] = ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠⲆΔⵠᐃ] = ᐃᐃⵠⲆ.ⵠⲆΔⵠᐃ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠⲆⵠⵠᐃ] = ᐃᐃⵠⲆ.ⵠⲆΔⵠᐃ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠᐃΔⵠⵠ] = ᐃᐃⵠⲆ.ⵠⲆΔⵠᐃ;
	ⲆⲆⲆⲆᐃ[Ⲇᐃ.ⵠⲆΔᐃⲆ] = ᐃᐃⵠⲆ.ⵠⲆΔⵠᐃ;
	ⲆᐃΔΔ = [];
	ⲆᐃΔΔ[Δⵠⵠ] = ⵠⲆᐃ;
	ⲆᐃΔΔ[Δᐃᐃ] = 1;
	ⲆᐃΔΔ[ⵠᐃⵠⲆ] = ⲆΔᐃΔ;
	ⲆᐃΔΔ[3] = 1;
	ⲆᐃΔΔ[4] = 0;
	ⲆᐃΔΔ[ΔⲆΔᐃⵠ] = ⵠΔΔᐃ;
	ⲆᐃΔΔ[6] = 0;
	ⲆᐃΔΔ[7] = ΔᐃΔ;
	ⲆᐃΔΔ[ΔⲆΔⲆⲆ] = 0;
	ⲆᐃΔΔ[9] = ⵠⲆⵠ;
	ⲆᐃΔΔ[ΔΔⲆⲆⵠ] = 1;
	ⲆᐃΔΔ[11] = 1;
	ⲆᐃΔΔ[ᐃⲆⵠⵠΔ] = 1;
	ⲆᐃΔΔ[13] = ᐃⲆΔ;
	ⲆᐃΔΔ[ᐃᐃⵠⵠⲆᐃⵠ] = 1;
	ⲆᐃΔΔ[15] = 1;
	ⲆᐃΔΔ[ᐃⲆⲆᐃΔ] = 0;
	ⲆᐃΔΔ[17] = 0;
	ⲆᐃΔΔ[18] = 0;
	ⲆᐃΔΔ[19] = ⵠⲆΔⵠ;
	ⲆᐃΔΔ[20] = 0;
	ⲆᐃΔΔ[21] = 0;
	ⲆᐃΔΔ[22] = ⵠᐃΔ;
	ⲆᐃΔΔ[23] = ⲆΔⲆⵠ;
	ⲆᐃΔΔ[24] = ⵠⵠᐃ;
	ⲆᐃΔΔ[25] = 1;
	ⲆᐃΔΔ[26] = 1;
	ⲆᐃΔΔ[27] = ⲆⵠΔⲆ;
	ⲆᐃΔΔ[28] = 1;
	ⲆᐃΔΔ[29] = ⵠⲆⲆⲆ;
	ⲆᐃΔΔ[30] = ⵠⲆⲆⲆ;
	ⲆᐃΔΔ[31] = 1;
	ⲆᐃΔΔ[32] = ⵠΔⲆ;
	ⲆᐃΔΔ[33] = 1;
	ⲆᐃΔΔ[34] = ⲆΔⲆⵠ;
	ⲆᐃΔΔ[35] = 1;
	ⲆᐃΔΔ[36] = ⵠⵠᐃ;
	ⲆᐃΔΔ[37] = ⵠΔⲆ;
	ⲆᐃΔΔ[38] = 1;
	ⲆᐃΔΔ[40] = ΔᐃΔ;
	ⲆᐃΔΔ[41] = ⵠᐃΔ;
	ⲆᐃΔΔ[42] = ⵠᐃⵠⵠ;
	ⲆᐃΔΔ[50] = ⵠⲆⲆⲆ;
	ⲆᐃΔΔ[51] = 1;
	ⲆᐃΔΔ[52] = 1;
	ⲆᐃΔΔ[55] = 0;
	ⲆᐃΔΔ[56] = ⵠΔⵠⲆ;
	ⲆᐃΔΔ[57] = ⵠᐃΔ;
	ⲆᐃΔΔ[58] = ⵠᐃΔⲆ;
	ᐃΔᐃΔⵠ = [];
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⲆⲆⲆᐃⵠ] = ⲆⲆᐃΔ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⲆⵠⲆⲆᐃ] = 0;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ᐃΔΔⵠᐃ] = Ⲇᐃⵠⵠ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ᐃᐃⲆΔᐃ] = ⵠⲆᐃ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⲆΔΔΔⵠ] = -1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ΔΔᐃⲆⵠ] = -1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⵠⵠᐃⲆⵠ] = 0;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⲆᐃⲆⲆⲆ] = ⵠᐃΔⲆ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⲆΔⵠᐃᐃ] = 0;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ΔΔⲆᐃⲆ] = ᐃΔΔ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ᐃᐃᐃⵠᐃ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⵠⲆⲆΔⵠ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ΔⲆⵠΔⵠ] = ᐃⵠⵠ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⵠⲆⵠⵠΔ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⲆⵠⵠⲆΔ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ᐃᐃΔᐃᐃ] = ⵠΔΔ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⲆᐃⵠᐃΔ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ᐃⵠᐃⲆᐃ] = 0;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⵠⵠΔᐃᐃ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ΔᐃΔⵠⵠ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⲆⲆΔᐃᐃ] = ⵠΔΔ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⵠᐃΔΔⵠ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⵠⲆⵠΔᐃ] = ᐃⲆΔ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⵠΔⵠⲆⵠ] = ⵠᐃⵠⵠ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ΔⵠᐃΔΔ] = ⲆⲆⲆᐃ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ᐃΔⲆᐃΔ] = ⲆⵠⲆ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⵠⵠᐃⵠⲆ] = ⲆⲆⲆᐃ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ᐃⵠᐃⲆΔ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ΔᐃΔⲆⲆ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⲆⲆᐃⵠⵠ] = 0;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⲆΔⵠⲆⵠ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ᐃⲆⵠΔⲆ] = ᐃΔⵠΔ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⵠΔΔⲆⲆ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ΔⵠⵠⲆΔ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ΔΔΔⲆᐃ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.Δⵠⵠⵠⵠ] = ΔΔⲆΔ;
	const ᐃⲆΔᐃⵠΔΔΔᐃ = {};
	const ⲆⵠⵠⲆᐃⵠᐃⲆⲆ = {};
	ᐃⲆΔᐃⵠΔΔΔᐃ["get"] = function(ⲆᐃⲆⲆΔⵠΔᐃⲆ, ᐃⲆⵠΔΔᐃⵠΔⵠ) {
		if (ᐃⲆⵠΔΔᐃⵠΔⵠ !== "ᐃⲆΔᐃⵠΔΔΔᐃ") {
			const ᐃⲆΔᐃⵠΔΔΔᐃ = Math.floor;
			let ΔⵠⲆⲆⲆᐃΔᐃΔ = 0;
			const ⲆᐃⲆⲆΔⵠΔᐃⲆ = function(ⲆᐃⲆⲆΔⵠΔᐃⲆ) {
				for (let ᐃⲆⵠΔΔᐃⵠΔⵠ = 0; ᐃⲆⵠΔΔᐃⵠΔⵠ < 9620; ᐃⲆⵠΔΔᐃⵠΔⵠ++) ΔⵠⲆⲆⲆᐃΔᐃΔ += ᐃⲆⵠΔΔᐃⵠΔⵠ;
				return ᐃⲆΔᐃⵠΔΔΔᐃ(ⲆᐃⲆⲆΔⵠΔᐃⲆ)
			};
			Math.floor = ⲆᐃⲆⲆΔⵠΔᐃⲆ
		}
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ["Reflect"]["get"](...arguments)
	};
	const ΔⵠⲆⲆⲆᐃΔᐃΔ = new ⵠΔΔⲆⲆⵠᐃᐃⵠ["Proxy"](ⲆⵠⵠⲆᐃⵠᐃⲆⲆ, ᐃⲆΔᐃⵠΔΔΔᐃ);
	const ΔΔⵠᐃⲆⵠΔ = ΔⵠⲆⲆⲆᐃΔᐃΔ.ᐃⲆΔᐃⵠΔΔΔᐃ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⵠΔⲆΔᐃ] = ⲆⵠⲆ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ΔΔⵠⲆⵠ] = 1;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ᐃⵠΔⵠΔ] = ⵠᐃΔ;
	ᐃΔᐃΔⵠ[ⲆΔⲆ.ⲆⲆᐃⲆᐃ] = ⲆΔᐃΔ;
	var ᐃΔⲆⲆⵠ = {
		"ⵠⵠⵠᐃⵠΔΔ": {
			"ⵠᐃⵠⵠⲆ": null,
			path: [Δ[345]],
			"Ⲇⵠ": {
				d1: [90391, 300, ⲆⵠΔᐃⵠ],
				d0: [90086, 300, false],
				d2: [90684, 300, ΔΔᐃⵠᐃ]
			},
			sample: {
				d0: ᐃᐃⵠⲆ.ᐃⲆⲆⲆ,
				d1: ᐃᐃⵠⲆ.ᐃⲆⲆⲆ,
				d2: ᐃᐃⵠⲆ.ᐃⲆⲆⲆ
			}
		},
		"ΔⲆⵠⵠⵠⲆⲆ": {
			"ⵠᐃⵠⵠⲆ": null,
			path: [Δ[345]],
			"Ⲇⵠ": {
				p0: [89303, 300, false],
				p2: [89815, 300, ΔᐃⲆⵠⵠ],
				p1: [89549, 300, false]
			},
			sample: {
				p0: ᐃᐃⵠⲆ.ᐃⲆⲆⲆ,
				p1: ᐃᐃⵠⲆ.ᐃⲆⲆⲆ,
				p2: ᐃᐃⵠⲆ.ᐃⲆⲆⲆ
			}
		},
		"ⲆⵠⵠΔⵠⵠⵠ": {
			"ⵠᐃⵠⵠⲆ": null,
			path: [Δ[345]],
			"Ⲇⵠ": {
				w2: [88751, 300, ⲆΔᐃⵠᐃ],
				w1: [88473, 300, ΔᐃⲆⵠⵠ],
				w0: [88195, 300, ᐃⲆⵠⵠᐃ],
				w3: [89025, 300, ΔΔΔⵠⵠ]
			},
			sample: {
				w0: ᐃᐃⵠⲆ.ᐃⲆⲆⲆ,
				w1: ᐃᐃⵠⲆ.ᐃⲆⲆⲆ,
				w2: ᐃᐃⵠⲆ.ᐃⲆⲆⲆ,
				w3: ᐃᐃⵠⲆ.ᐃⲆⲆⲆ
			}
		},
		"ᐃⵠᐃⲆᐃⵠⵠ": {
			"ⵠᐃⵠⵠⲆ": null,
			path: [Δ[345]],
			"Ⲇⵠ": {
				"ΔΔᐃⲆΔᐃΔ": [19882, 8301, ⵠⵠᐃⵠⵠ],
				"ᐃⲆⲆⲆⵠⵠΔ": [31658, 813, true],
				"ⵠⲆⵠⲆⲆⵠᐃ": [32604, 21890, true],
				"ⲆⵠΔΔΔⲆᐃ": [3100, 8800, true],
				"ⵠⵠⵠᐃΔ": [91431, 400, ⲆΔⲆⲆΔ],
				"ⵠⵠⵠⵠΔⵠⲆ": [66961, 21223, true],
				"ⵠΔⵠⲆⲆⲆⵠ": [66014, 925, true],
				"ⵠᐃᐃᐃⲆ": [28380, 1797, true],
				"ᐃⲆⵠⲆΔⲆⲆ": [92249, 500, false],
				"ᐃⲆᐃΔⲆ": [12356, 6965, true],
				"ⵠⲆΔΔⵠΔΔⵠΔ": [100, 2800, true],
				"ΔΔⵠⲆⵠΔⲆ": [91022, 400, ⵠΔⵠᐃᐃ],
				"ΔⲆᐃΔⵠⲆⲆ": [30562, 655, true],
				"ΔΔᐃᐃⲆⲆⵠ": [66961, 21223, true],
				"ΔⲆⵠⲆⵠᐃΔ": [54524, 11393, true]
			},
			sample: {
				"ⵠⲆΔΔⵠΔΔⵠΔ": 1,
				"ⲆⵠΔΔΔⲆᐃ": ΔΔⲆΔ,
				"ΔΔᐃⲆΔᐃΔ": 1,
				"ⵠⲆⵠⲆⲆⵠᐃ": ⲆΔᐃΔ,
				"ΔⲆⵠⲆⵠᐃΔ": 1,
				"ⵠⵠⵠⵠΔⵠⲆ": 1,
				"ΔΔᐃᐃⲆⲆⵠ": 1,
				"ᐃⲆᐃΔⲆ": ᐃᐃⵠⲆ.ᐃⲆⲆⲆ,
				"ⵠᐃᐃᐃⲆ": ᐃᐃⵠⲆ.ᐃⲆⲆⲆ,
				"ΔⲆᐃΔⵠⲆⲆ": ᐃᐃⵠⲆ.ᐃⲆⲆⲆ,
				"ᐃⲆⲆⲆⵠⵠΔ": ᐃᐃⵠⲆ.ᐃⲆⲆⲆ,
				"ⵠΔⵠⲆⲆⲆⵠ": ᐃᐃⵠⲆ.ᐃⲆⲆⲆ,
				"ΔΔⵠⲆⵠΔⲆ": ᐃᐃⵠⲆ.ⲆΔⲆ,
				"ⵠⵠⵠᐃΔ": ᐃᐃⵠⲆ.ⲆΔⲆ,
				"ᐃⲆⵠⲆΔⲆⲆ": ᐃᐃⵠⲆ.ⲆΔⲆ
			}
		}
	};
	var ⵠⵠΔⲆᐃⲆⲆ = function(ᐃΔΔᐃΔ, ᐃΔᐃ, ⵠⵠⲆ, ⲆⲆⵠΔᐃⲆⲆ, ⵠΔΔᐃⵠᐃᐃ, ᐃᐃⲆΔⲆⵠⵠ, ΔⵠⵠΔ, ⵠⵠᐃⲆⲆⵠⵠ, ΔⵠⵠΔΔ, ⲆΔᐃᐃᐃΔⵠΔΔ, ᐃΔᐃⲆⲆⲆⵠ) {
		this.r = ⵠΔᐃ;
		this.ᐃΔΔᐃΔ = ᐃΔΔᐃΔ;
		this.ⲆⲆΔⲆⲆᐃᐃ = ᐃΔΔᐃΔ;
		this.ᐃΔᐃ = ᐃΔᐃ;
		this.ⵠⵠⲆ = ⵠⵠⲆ;
		this.fade = ⲆⲆⵠΔᐃⲆⲆ;
		this.ⵠΔΔᐃⵠᐃᐃ = ⵠΔΔᐃⵠᐃᐃ;
		this.ᐃᐃⲆΔⲆⵠⵠ = ᐃᐃⲆΔⲆⵠⵠ;
		this.ΔⵠⵠΔ = ΔⵠⵠΔ;
		this.ⵠⵠᐃⲆⲆⵠⵠ = ⵠⵠᐃⲆⲆⵠⵠ;
		this.source = ΔⵠⵠΔΔ;
		this.source.ᐃΔᐃΔⲆⲆΔ = ΔⵠⵠΔΔ.x + ΔⵠⵠΔΔ.w;
		this.source.ᐃⵠⵠᐃΔ = ΔⵠⵠΔΔ.y + ΔⵠⵠΔΔ.ⲆΔΔ;
		this.ⲆΔΔΔᐃⲆΔΔΔ = ⲆΔᐃᐃᐃΔⵠΔΔ;
		this.ᐃΔⵠⵠⵠᐃⵠ = ᐃΔᐃⲆⲆⲆⵠ;
		this.ᐃΔᐃⲆⲆⲆⵠ = ⵠⵠΔΔ;
		this.ⵠΔⲆᐃᐃΔΔ = {
			"ⵠΔᐃᐃ": ΔΔⵠΔ,
			d: ⲆⲆⲆᐃᐃ
		};
		this.ΔⵠΔᐃᐃ = function() {
			this.ᐃΔΔᐃΔ -= ΔᐃⲆⲆ;
			if (ⲆⲆᐃΔ > this.ᐃΔΔᐃΔ) {
				this.ᐃΔΔᐃΔ = this.ⲆⲆΔⲆⲆᐃᐃ;
				var ᐃΔΔᐃ = ᐃΔⲆⲆⵠ.ᐃⵠᐃⲆᐃⵠⵠ.ⵠᐃⵠⵠⲆ[Δ[61]](this.ᐃΔᐃ);
				var ⵠⲆᐃⲆ = ᐃΔⲆⲆⵠ.ᐃⵠᐃⲆᐃⵠⵠ.ⵠᐃⵠⵠⲆ[Δ[61]](this.ⵠⵠⲆ);
				if (ᐃΔΔᐃ && !ⵠⲆᐃⲆ) {
					var ⲆᐃΔ = this.ΔⵠⵠΔ[Δ[398]](this.ᐃΔᐃ) * ⵠⲆⲆᐃⲆ.Ⲇⵠⵠᐃⵠ;
					var ⵠᐃⵠ = (Math.random() * this.ᐃᐃⲆΔⲆⵠⵠ + this.ⵠΔΔᐃⵠᐃᐃ) * ⵠⲆⲆᐃⲆ.Ⲇⵠⵠᐃⵠ;
					this.ΔⵠⵠΔ[Δ[459]](ⲆᐃΔ, ⵠᐃⵠ, this.fade, this.ᐃΔᐃ)
				} else if (!ᐃΔΔᐃ && ⵠⲆᐃⲆ) {
					var ⲆᐃΔ = this.ΔⵠⵠΔ[Δ[398]](this.ⵠⵠⲆ) * ⵠⲆⲆᐃⲆ.Ⲇⵠⵠᐃⵠ;
					var ⵠᐃⵠ = ⵠⲆⲆᐃⲆ.Ⲇⵠⵠᐃⵠ * (Math.random() * this.ᐃᐃⲆΔⲆⵠⵠ + this.ⵠΔΔᐃⵠᐃᐃ);
					this.ΔⵠⵠΔ[Δ[459]](ⲆᐃΔ, ⵠᐃⵠ, this.fade, this.ⵠⵠⲆ)
				}
			}
		};
		this.transition = function() {
			this.ᐃΔΔᐃΔ = this.ⲆⲆΔⲆⲆᐃᐃ;
			this.ⵠΔⲆᐃᐃΔΔ.d = this.ⵠΔⲆᐃᐃΔΔ.ⵠΔᐃᐃ;
			if (ⲆⲆⲆ.time) {
				this.ΔⵠⵠΔ[Δ[459]](0, ⵠⲆⲆᐃⲆ.Ⲇⵠⵠᐃⵠ * this.ⵠΔΔᐃⵠᐃᐃ, this.ⵠⵠᐃⲆⲆⵠⵠ, this.ᐃΔᐃ);
				this.ΔⵠⵠΔ[Δ[257]](this.ᐃΔᐃ);
				if (this.ΔⵠⵠΔ[Δ[61]](this.ⵠⵠⲆ)) {
					var ⲆᐃΔ = this.ΔⵠⵠΔ[Δ[398]](this.ⵠⵠⲆ) * ⵠⲆⲆᐃⲆ.Ⲇⵠⵠᐃⵠ;
					this.ΔⵠⵠΔ[Δ[459]](ⲆᐃΔ, ⵠⲆⵠ, this.ⵠⵠᐃⲆⲆⵠⵠ, this.ⵠⵠⲆ)
				}
			} else {
				this.ΔⵠⵠΔ[Δ[459]](0, this.ⵠΔΔᐃⵠᐃᐃ * ⵠⲆⲆᐃⲆ.Ⲇⵠⵠᐃⵠ, this.ⵠⵠᐃⲆⲆⵠⵠ, this.ⵠⵠⲆ);
				this.ΔⵠⵠΔ[Δ[257]](this.ⵠⵠⲆ);
				if (this.ΔⵠⵠΔ[Δ[61]](this.ᐃΔᐃ)) {
					var ⲆᐃΔ = ⵠⲆⲆᐃⲆ.Ⲇⵠⵠᐃⵠ * this.ΔⵠⵠΔ[Δ[398]](this.ᐃΔᐃ);
					this.ΔⵠⵠΔ[Δ[459]](ⲆᐃΔ, 0, this.ⵠⵠᐃⲆⲆⵠⵠ, this.ᐃΔᐃ)
				}
			}
		};
		this.check = function(ΔⵠΔ) {
			if (this.ᐃΔᐃⲆⲆⲆⵠ) {
				if (!ⵠᐃΔᐃ.ᐃΔⵠⵠⵠᐃⵠ(ΔⵠΔ, this.ⲆΔΔΔᐃⲆΔΔΔ)) {
					this.ᐃΔᐃⲆⲆⲆⵠ = 0;
					if (this.ΔⵠⵠΔ[Δ[61]](this.ᐃΔᐃ)) {
						var ⲆᐃΔ = ⵠⲆⲆᐃⲆ.Ⲇⵠⵠᐃⵠ * this.ΔⵠⵠΔ[Δ[398]](this.ᐃΔᐃ);
						this.ΔⵠⵠΔ[Δ[459]](ⲆᐃΔ, 0, this.ⵠⵠᐃⲆⲆⵠⵠ, this.ᐃΔᐃ)
					}
					if (this.ΔⵠⵠΔ[Δ[61]](this.ⵠⵠⲆ)) {
						var ⲆᐃΔ = this.ΔⵠⵠΔ[Δ[398]](this.ⵠⵠⲆ) * ⵠⲆⲆᐃⲆ.Ⲇⵠⵠᐃⵠ;
						this.ΔⵠⵠΔ[Δ[459]](ⲆᐃΔ, 0, this.ⵠⵠᐃⲆⲆⵠⵠ, this.ⵠⵠⲆ)
					}
				} else if (!ⵠᐃⲆΔ.transition && ᐃᐃⵠⲆ.ᐃΔᐃᐃⵠΔⵠ > ⲆⲆⲆ.ΔᐃᐃⲆⵠ.now) {
					if (ⲆⲆⲆ.time) {
						if (!this.ΔⵠⵠΔ[Δ[61]](this.ᐃΔᐃ)) {
							this.ⵠΔⲆᐃᐃΔΔ.d -= ΔᐃⲆⲆ;
							if (this.ⵠΔⲆᐃᐃΔΔ.d < Δⵠⵠ) this.transition()
						}
					} else {
						if (!this.ΔⵠⵠΔ[Δ[61]](this.ⵠⵠⲆ)) {
							this.ⵠΔⲆᐃᐃΔΔ.d -= ΔᐃⲆⲆ;
							if (0 > this.ⵠΔⲆᐃᐃΔΔ.d) this.transition()
						}
					}
				}
			} else {
				if (ⵠᐃΔᐃ.ᐃΔⵠⵠⵠᐃⵠ(ΔⵠΔ, this.ᐃΔⵠⵠⵠᐃⵠ)) {
					this.ᐃΔᐃⲆⲆⲆⵠ = 1;
					!ⵠᐃⲆΔ.transition && ⲆⲆⲆ.ΔᐃᐃⲆⵠ.now < ᐃᐃⵠⲆ.ᐃΔᐃᐃⵠΔⵠ && this.transition()
				}
			}
		};
		this.ᐃᐃⵠ = function(ΔⵠΔ, ΔⵠⵠΔⵠ) {
			var ΔΔ, ΔΔⵠ;
			if (ΔⵠΔ.x < this.source.x) ΔΔ = ⵠᐃⲆΔ.ⵠⲆⵠᐃⵠⲆᐃ(this.source.x);
			else this.source.ᐃΔᐃΔⲆⲆΔ < ΔⵠΔ.x ? ΔΔ = ⵠᐃⲆΔ.ⵠⲆⵠᐃⵠⲆᐃ(this.source.ᐃΔᐃΔⲆⲆΔ) : ΔΔ = ΔⵠⵠΔⵠ.x;
			if (ΔⵠΔ.y < this.source.y) ΔΔⵠ = ⵠᐃⲆΔ.ⲆᐃΔΔΔⵠᐃ(this.source.y);
			else this.source.ᐃⵠⵠᐃΔ < ΔⵠΔ.y ? ΔΔⵠ = ⵠᐃⲆΔ.ⲆᐃΔΔΔⵠᐃ(this.source.ᐃⵠⵠᐃΔ) : ΔΔⵠ = ΔⵠⵠΔⵠ.y;
			this.ΔⵠⵠΔ[Δ[138]](ΔΔ, ΔΔⵠ, -.5, this.ᐃΔᐃ);
			this.ΔⵠⵠΔ[Δ[138]](ΔΔ, ΔΔⵠ, -.5, this.ⵠⵠⲆ)
		}
	};

	function ⲆΔⲆᐃⵠⲆΔΔᐃ(ᐃⵠⵠᐃⲆΔⲆ, ⲆⲆⵠΔΔᐃⵠ, ΔᐃᐃΔᐃⲆⵠ) {
		const ⵠⵠᐃⵠᐃΔΔ = ᐃⵠⵠᐃⲆΔⲆ ^ 22109;
		const ΔⵠⵠⲆᐃᐃⵠ = (0 << (ⲆⲆⵠΔΔᐃⵠ >> 24 & 255)) + (24 << (ⲆⲆⵠΔΔᐃⵠ >> 0 & 255)) + (ΔΔⵠⵠⵠ << (ⲆⲆⵠΔΔᐃⵠ >> 8 & 255)) + (16 << (ⲆⲆⵠΔΔᐃⵠ >> ᐃᐃⵠᐃⵠᐃᐃ & 255));
		const ⵠⵠⵠᐃⲆΔⵠ = 60038 ^ ΔᐃᐃΔᐃⲆⵠ;
		const ⲆⵠⲆΔⲆⵠⵠⲆⵠ = ᐃⲆΔΔΔᐃᐃ(ⵠⵠᐃⵠᐃΔΔ, ΔⵠⵠⲆᐃᐃⵠ, ⵠⵠⵠᐃⲆΔⵠ, ⵠⵠᐃⵠᐃΔΔ);
		const ᐃᐃᐃᐃⲆΔⲆᐃⲆ = ⲆΔᐃΔᐃⲆⲆ(ΔⵠⵠⲆᐃᐃⵠ, ⵠⵠⵠᐃⲆΔⵠ, ⵠⵠᐃⵠᐃΔΔ, ΔⵠⵠⲆᐃᐃⵠ);
		const ⵠⲆᐃⲆⲆΔⵠΔⲆ = (1013904223 + (901 + (ⲆⵠⲆΔⲆⵠⵠⲆⵠ ^ ᐃᐃᐃᐃⲆΔⲆᐃⲆ)) * 1664525) % 4294967296;
		return ⵠⲆᐃⲆⲆΔⵠΔⲆ
	}

	function ΔΔⲆᐃΔᐃⵠ(ᐃᐃᐃⲆΔΔⲆ, ⲆΔΔⲆΔⲆΔ) {
		const ⵠᐃⵠᐃᐃᐃⲆ = ~(ᐃᐃᐃⲆΔΔⲆ & 31107) & (ᐃᐃᐃⲆΔΔⲆ | 31107);
		const ΔⲆΔⲆΔΔⲆ = ~(43386 & ⲆΔΔⲆΔⲆΔ) & (43386 | ⲆΔΔⲆΔⲆΔ);
		const ᐃⵠⵠΔⵠᐃⵠⵠⵠ = ⲆⲆΔΔⵠᐃᐃ(ⵠᐃⵠᐃᐃᐃⲆ, ΔⲆΔⲆΔΔⲆ, ⵠᐃⵠᐃᐃᐃⲆ);
		const ᐃᐃⲆΔΔⵠⲆᐃᐃ = ⵠᐃⲆⵠⲆⵠΔ(ΔⲆΔⲆΔΔⲆ, ⵠᐃⵠᐃᐃᐃⲆ, ΔⲆΔⲆΔΔⲆ, ⵠᐃⵠᐃᐃᐃⲆ, ΔⲆΔⲆΔΔⲆ);
		const ⵠⵠⲆⲆᐃⵠⵠⲆⵠ = 6840 ^ ᐃⵠⵠΔⵠᐃⵠⵠⵠ;
		return ⵠⵠⲆⲆᐃⵠⵠⲆⵠ
	}
	ⵠⲆⵠⲆⲆ = {
		"ⲆⵠⵠΔⲆΔⲆ": ⵠΔΔᐃ,
		"ΔΔΔⲆΔᐃⲆ": ᐃⲆᐃᐃΔΔⲆ,
		"ⲆΔⲆⲆΔⲆᐃⲆᐃ": .2,
		"ΔᐃᐃᐃΔΔΔΔⵠ": .2,
		"ⵠⵠⵠⵠΔⲆᐃ": ΔⲆᐃⵠⵠ,
		"ⵠΔⵠⲆΔᐃΔⲆᐃ": .2,
		"ⲆⵠⵠΔᐃΔᐃΔⲆ": .4,
		"ⵠΔⲆⲆⲆᐃⵠ": ᐃᐃΔⵠ,
		"ⵠⵠⲆⵠⵠⲆⲆ": 4,
		"ᐃΔⲆᐃΔⲆⵠ": ΔΔᐃᐃ,
		"ΔⵠⲆΔᐃᐃΔ": 300,
		"ΔΔⵠΔⵠΔᐃ": ⵠᐃΔⲆᐃ,
		"ⲆᐃᐃΔⵠ": ⵠⲆⵠΔ,
		"ⲆᐃΔΔᐃΔᐃ": ΔⲆΔᐃ
	};
	var ᐃⲆⵠⵠᐃΔⲆ = function(ⲆΔΔᐃⵠⲆᐃ, ΔⵠⵠΔ, ᐃⲆⲆᐃⲆ) {
		this.ⲆΔΔᐃⵠⲆᐃ = ⲆΔΔᐃⵠⲆᐃ;
		this.c = 0;
		this.ΔⵠⵠΔ = ΔⵠⵠΔ;
		this.ᐃⲆⲆᐃⲆ = ᐃⲆⲆᐃⲆ;
		this.max = ᐃⲆⲆᐃⲆ.length;
		this.play = function() {
			this.c = (this.c + ⵠΔⲆ) % this.max;
			var ⵠᐃ = this.ᐃⲆⲆᐃⲆ[this.c];
			this.ⲆΔΔᐃⵠⲆᐃ.ⲆⲆᐃΔΔΔⲆ(this.ΔⵠⵠΔ, ⵠᐃ);
			this.ΔⵠⵠΔ[Δ[257]](ⵠᐃ)
		}
	};
	var ⵠⵠᐃⵠᐃᐃᐃᐃⲆ = function(ⵠᐃΔᐃᐃ) {
		this.ΔⲆⲆΔⲆΔᐃ = ⵠⲆⲆⲆ;
		this.ΔᐃⲆⵠ = ⲆⲆᐃΔ;
		this.mode = -1;
		this.ⵠᐃᐃᐃⲆ = ⵠᐃⲆΔ.sample.ⵠᐃᐃᐃⲆ[ⵠᐃΔᐃᐃ];
		this.ΔⲆᐃΔⵠⲆⲆ = ⵠᐃⲆΔ.sample.ΔⲆᐃΔⵠⲆⲆ[ⵠᐃΔᐃᐃ];
		this.ᐃⲆⲆⲆⵠⵠΔ = ⵠᐃⲆΔ.sample.ᐃⲆⲆⲆⵠⵠΔ[ⵠᐃΔᐃᐃ];
		this.ⵠΔⵠⲆⲆⲆⵠ = ⵠᐃⲆΔ.sample.ⵠΔⵠⲆⲆⲆⵠ[ⵠᐃΔᐃᐃ];
		this.ⵠᐃⵠᐃΔᐃΔ = new ᐃⲆⵠⵠᐃΔⲆ(this, ᐃΔⲆⲆⵠ.ΔⲆⵠⵠⵠⲆⲆ.ⵠᐃⵠⵠⲆ, ⵠᐃⲆΔ.ⵠⵠᐃΔⵠ.ⵠᐃⵠᐃΔᐃΔ[ⵠᐃΔᐃᐃ]);
		this.ᐃΔᐃᐃΔ = new ᐃⲆⵠⵠᐃΔⲆ(this, ᐃΔⲆⲆⵠ.ⲆⵠⵠΔⵠⵠⵠ.ⵠᐃⵠⵠⲆ, ⵠᐃⲆΔ.ⵠⵠᐃΔⵠ.ᐃΔᐃᐃΔ[ⵠᐃΔᐃᐃ]);
		this.ΔΔᐃⲆᐃ = new ᐃⲆⵠⵠᐃΔⲆ(this, ᐃΔⲆⲆⵠ.ⵠⵠⵠᐃⵠΔΔ.ⵠᐃⵠⵠⲆ, ⵠᐃⲆΔ.ⵠⵠᐃΔⵠ.ΔΔᐃⲆᐃ[ⵠᐃΔᐃᐃ]);
		this.ⵠᐃΔᐃᐃ = ⵠᐃΔᐃᐃ;
		this.x = 0;
		this.y = 0;
		this.ⵠΔⲆᐃⵠ = Δⵠⵠ;
		this.ᐃΔΔᐃΔ = ⵠⲆⵠⲆⲆ.ⲆᐃⵠⲆⵠⲆᐃⵠΔ;
		this.ⵠΔΔⲆ = {
			y: 0,
			x: 0
		};
		this.ⵠⵠⲆⵠΔ = ᐃΔⲆⲆⵠ.ᐃⵠᐃⲆᐃⵠⵠ.ⵠᐃⵠⵠⲆ;
		this.ΔⵠΔᐃᐃᐃⲆΔΔ = function(ΔΔⲆⲆⵠΔⲆ) {
			if (ΔΔⲆⲆⵠΔⲆ === ᐃᐃⵠⲆ.Ⲇᐃᐃⵠᐃ) this.ⵠᐃⵠᐃΔᐃΔ.play();
			else if (ΔΔⲆⲆⵠΔⲆ === ᐃᐃⵠⲆ.ⲆⲆⲆⲆⵠ) this.ᐃΔᐃᐃΔ.play();
			else if (ΔΔⲆⲆⵠΔⲆ === ᐃᐃⵠⲆ.ⵠⲆΔⵠᐃ) this.ΔΔᐃⲆᐃ.play()
		};
		this.ⲆⵠⲆⲆⲆΔᐃ = function(ΔⵠΔ) {
			if (Ⲇᐃⵠⵠ < ΔⵠΔ.ΔⲆⲆᐃΔⵠΔ) return ⵠⲆⵠⲆⲆ.ⲆᐃᐃΔⵠ;
			else if (0 < ΔⵠΔ.ΔⲆⲆⵠⲆᐃⵠ) return ⵠⲆⵠⲆⲆ.ⲆᐃΔΔᐃΔᐃ;
			else if (0 < ΔⵠΔ.ⵠⲆⵠΔⵠ || Δⵠⵠ < ΔⵠΔ.ΔΔⲆΔᐃ) return ⵠⲆⵠⲆⲆ.ⵠΔⲆⲆⲆᐃⵠ;
			else return ⵠⲆⵠⲆⲆ.ⲆⵠⵠΔⲆΔⲆ
		};
		this.ΔⲆᐃᐃⵠ = function(ΔᐃⲆⵠ) {
			this.ΔⲆⲆΔⲆΔᐃ = 0;
			this.ΔᐃⲆⵠ = ΔᐃⲆⵠ;
			var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ΔᐃⲆⵠ];
			ΔⵠΔ.ⵠᐃΔᐃᐃ = this.ⵠᐃΔᐃᐃ;
			this.mode = this.ⲆⵠⲆⲆⲆΔᐃ(ΔⵠΔ);
			this.ⵠΔΔⲆ.x = ΔⵠΔ.x;
			this.ⵠΔΔⲆ.y = ΔⵠΔ.y
		};
		this.ᐃⲆᐃΔⵠᐃⲆ = function() {
			this.ΔⲆⲆΔⲆΔᐃ = ⵠⵠⵠΔ;
			this.mode = -1;
			this.ⵠⵠⲆⵠΔ[Δ[347]](this.ⵠᐃᐃᐃⲆ);
			this.ⵠⵠⲆⵠΔ[Δ[347]](this.ΔⲆᐃΔⵠⲆⲆ);
			this.ⵠⵠⲆⵠΔ[Δ[347]](this.ᐃⲆⲆⲆⵠⵠΔ);
			this.ⵠⵠⲆⵠΔ[Δ[347]](this.ⵠΔⵠⲆⲆⲆⵠ)
		};
		this.fade = function(ⵠᐃ, Ⲇᐃᐃ) {
			var ⲆᐃΔ = this.ⵠⵠⲆⵠΔ[Δ[398]](ⵠᐃ) * ⵠⲆⲆᐃⲆ.ΔⵠⲆⵠᐃⵠΔ;
			this.ⵠⵠⲆⵠΔ[Δ[459]](ⲆᐃΔ, 0, Ⲇᐃᐃ, ⵠᐃ)
		};
		this.ⲆⲆᐃΔΔΔⲆ = function(ΔⵠⵠΔ, ⵠᐃ) {
			this.ⵠΔⲆᐃⵠ && this.ⵠᐃΔᐃᐃ && ΔⵠⵠΔ[Δ[138]](this.x, this.y, -.5, ⵠᐃ)
		};
		this.ΔⵠΔᐃᐃ = function(ⵠᐃ, ⵠⵠⵠⵠⲆᐃⲆ, ⲆΔⵠⵠΔ, ⵠⵠᐃⵠᐃ, ΔΔᐃⲆ, ᐃΔΔᐃΔ, Ⲇᐃᐃ) {
			this.ᐃΔΔᐃΔ = ᐃΔΔᐃΔ;
			if (ⵠⵠᐃⵠᐃ && ΔΔᐃⲆ === this.mode) {
				var ⲆᐃΔ = ⵠⲆⲆᐃⲆ.ΔⵠⲆⵠᐃⵠΔ * this.ⵠⵠⲆⵠΔ[Δ[398]](ⵠᐃ);
				if (this.ⵠΔⲆᐃⵠ) {
					var ⵠᐃⵠ = ⵠⲆⲆᐃⲆ.ΔⵠⲆⵠᐃⵠΔ * (ⲆΔⵠⵠΔ * Math.random() + ⵠⵠⵠⵠⲆᐃⲆ);
					this.ⵠⵠⲆⵠΔ[Δ[459]](ⲆᐃΔ, ⵠᐃⵠ, Ⲇᐃᐃ, ⵠᐃ)
				} else this.ⵠⵠⲆⵠΔ[Δ[459]](ⲆᐃΔ, 0, Ⲇᐃᐃ, ⵠᐃ)
			} else if (this.mode != ΔΔᐃⲆ && this.ⵠΔⲆᐃⵠ) {
				this.ⵠⵠⲆⵠΔ[Δ[459]](ΔΔⲆⲆ, (ⵠⵠⵠⵠⲆᐃⲆ + ⲆΔⵠⵠΔ) * ⵠⲆⲆᐃⲆ.ΔⵠⲆⵠᐃⵠΔ, Ⲇᐃᐃ, ⵠᐃ)
			} else if (this.ⵠΔⲆᐃⵠ) {
				var ⲆᐃΔ = this.ⵠⵠⲆⵠΔ[Δ[398]](ⵠᐃ) * ⵠⲆⲆᐃⲆ.ΔⵠⲆⵠᐃⵠΔ;
				var ⵠᐃⵠ = (Math.random() * ⲆΔⵠⵠΔ + ⵠⵠⵠⵠⲆᐃⲆ) * ⵠⲆⲆᐃⲆ.ΔⵠⲆⵠᐃⵠΔ;
				this.ⵠⵠⲆⵠΔ[Δ[459]](ⲆᐃΔ, ⵠᐃⵠ, Ⲇᐃᐃ, ⵠᐃ)
			}
			this.ⲆⲆᐃΔΔΔⲆ(this.ⵠⵠⲆⵠΔ, ⵠᐃ);
			this.ⵠⵠⲆⵠΔ[Δ[257]](ⵠᐃ)
		};
		this.ᐃᐃⵠ = function() {
			var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[this.ΔᐃⲆⵠ];
			this.ᐃΔΔᐃΔ -= ΔᐃⲆⲆ;
			if (this.ᐃΔΔᐃΔ > 0) return;
			var ⵠⵠᐃⵠᐃ = ⵠⲆΔⵠ;
			if (this.ⵠΔΔⲆ.x != ΔⵠΔ.x || this.ⵠΔΔⲆ.y != ΔⵠΔ.y) {
				!this.ⵠΔⲆᐃⵠ && (ⵠⵠᐃⵠᐃ = ᐃΔⵠΔ, this.ⵠΔⲆᐃⵠ = ⲆⵠⲆ);
				this.x = ⵠᐃⲆΔ.ΔΔⵠⵠⲆⵠⲆ(ΔⵠΔ.x, ⵠⲆⵠⲆⲆ.ᐃΔⲆᐃΔⲆⵠ);
				this.y = ⵠᐃⲆΔ.ᐃᐃᐃⲆⵠΔΔ(ΔⵠΔ.y, ⵠⲆⵠⲆⲆ.ᐃΔⲆᐃΔⲆⵠ)
			} else {
				this.ⵠΔⲆᐃⵠ && (ⵠⵠᐃⵠᐃ = 1, this.ⵠΔⲆᐃⵠ = 0)
			}
			this.ⵠΔΔⲆ.x = ΔⵠΔ.x;
			this.ⵠΔΔⲆ.y = ΔⵠΔ.y;
			ΔΔᐃⲆ = this.ⲆⵠⲆⲆⲆΔᐃ(ΔⵠΔ);
			if (this.mode != ΔΔᐃⲆ) {
				if (ⵠⲆⵠⲆⲆ.ⲆᐃΔΔᐃΔᐃ === this.mode) this.fade(this.ⵠᐃᐃᐃⲆ, ⵠⲆⵠⲆⲆ.ΔⵠⲆΔᐃᐃΔ);
				else if (this.mode === ⵠⲆⵠⲆⲆ.ⲆᐃᐃΔⵠ) this.fade(this.ΔⲆᐃΔⵠⲆⲆ, ⵠⲆⵠⲆⲆ.ΔΔΔⲆΔᐃⲆ);
				else if (this.mode === ⵠⲆⵠⲆⲆ.ⲆⵠⵠΔⲆΔⲆ) this.fade(this.ᐃⲆⲆⲆⵠⵠΔ, ⵠⲆⵠⲆⲆ.ΔΔⵠΔⵠΔᐃ);
				else this.mode === ⵠⲆⵠⲆⲆ.ⵠΔⲆⲆⲆᐃⵠ && this.fade(this.ⵠΔⵠⲆⲆⲆⵠ, ⵠⲆⵠⲆⲆ.ⵠⵠⵠⵠΔⲆᐃ)
			}
			if (ⵠⲆⵠⲆⲆ.ⲆᐃΔΔᐃΔᐃ === ΔΔᐃⲆ) this.ΔⵠΔᐃᐃ(this.ⵠᐃᐃᐃⲆ, .08, .3, ⵠⵠᐃⵠᐃ, ΔΔᐃⲆ, ⵠⲆⵠⲆⲆ.ⲆⵠⵠΔᐃΔᐃΔⲆ, ⵠⲆⵠⲆⲆ.ΔⵠⲆΔᐃᐃΔ);
			else if (ⵠⲆⵠⲆⲆ.ⲆᐃᐃΔⵠ === ΔΔᐃⲆ) this.ΔⵠΔᐃᐃ(this.ΔⲆᐃΔⵠⲆⲆ, .2, .3, ⵠⵠᐃⵠᐃ, ΔΔᐃⲆ, ⵠⲆⵠⲆⲆ.ΔᐃᐃᐃΔΔΔΔⵠ, ⵠⲆⵠⲆⲆ.ΔΔΔⲆΔᐃⲆ);
			else if (ⵠⲆⵠⲆⲆ.ⲆⵠⵠΔⲆΔⲆ === ΔΔᐃⲆ) this.ΔⵠΔᐃᐃ(this.ᐃⲆⲆⲆⵠⵠΔ, .3, .6, ⵠⵠᐃⵠᐃ, ΔΔᐃⲆ, ⵠⲆⵠⲆⲆ.ⲆΔⲆⲆΔⲆᐃⲆᐃ, ⵠⲆⵠⲆⲆ.ΔΔⵠΔⵠΔᐃ);
			else ΔΔᐃⲆ === ⵠⲆⵠⲆⲆ.ⵠΔⲆⲆⲆᐃⵠ && this.ΔⵠΔᐃᐃ(this.ⵠΔⵠⲆⲆⲆⵠ, .1, .25, ⵠⵠᐃⵠᐃ, ΔΔᐃⲆ, ⵠⲆⵠⲆⲆ.ⵠΔⵠⲆΔᐃΔⲆᐃ, ⵠⲆⵠⲆⲆ.ⵠⵠⵠⵠΔⲆᐃ);
			this.mode = ΔΔᐃⲆ
		};
		this.check = function() {
			var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[this.ΔᐃⲆⵠ];
			if (!ΔⵠΔ) {
				this.ᐃⲆᐃΔⵠᐃⲆ(ΔⵠΔ);
				return false
			}
			return true
		}
	};
	var ⵠΔΔⲆⵠᐃⲆᐃᐃ = function() {
		this.ⵠⲆᐃᐃΔ = 0;
		this.loaded = ΔΔⲆⲆ;
		this.transition = ⵠⲆΔⵠ;
		this.ⵠⲆⵠᐃⵠⲆᐃ = function(ΔΔ) {
			return 100 * (ΔΔ / ⲆⲆⲆ.w)
		};
		this.ⲆᐃΔΔΔⵠᐃ = function(ΔΔⵠ) {
			return 100 * (ΔΔⵠ / ⲆⲆⲆ.ⲆΔΔ)
		};
		this.ΔΔⵠⵠⲆⵠⲆ = function(ΔΔ, Ⲇᐃᐃ) {
			ΔΔ = this.ⵠⲆⵠᐃⵠⲆᐃ(ΔΔ) - this.ΔⵠⵠΔⵠ.x;
			return this.ΔⵠⵠΔⵠ.x + Ⲇᐃᐃ * ΔΔ
		};
		this.ᐃᐃᐃⲆⵠΔΔ = function(ΔΔⵠ, Ⲇᐃᐃ) {
			ΔΔⵠ = Math.abs(this.ⲆᐃΔΔΔⵠᐃ(ΔΔⵠ) - this.ΔⵠⵠΔⵠ.y);
			return this.ΔⵠⵠΔⵠ.y + Ⲇᐃᐃ * ΔΔⵠ
		};
		this.sample = {};
		this.ⵠⵠᐃΔⵠ = {};
		this.ΔⵠⵠΔ = {};
		this.ⲆΔⵠⵠⲆᐃᐃ = function(ΔⵠΔ, ΔΔΔᐃ, ΔΔ, ΔΔⵠ) {
			for (var Δᐃ = 0; Δᐃ < ΔΔΔᐃ.length; Δᐃ++) {
				var ⵠᐃ = ΔΔΔᐃ[Δᐃ];
				if (ΔⵠΔ[Δ[61]](ⵠᐃ)) continue;
				ΔⵠΔ[Δ[138]](ΔΔ, ΔΔⵠ, -.5, ⵠᐃ);
				ΔⵠΔ[Δ[257]](ⵠᐃ);
				return ⵠΔΔᐃⲆ
			}
			return false
		};
		this.ᐃⲆⵠ = function(ⵠᐃ, ⵠᐃⵠⵠⲆ, ΔΔ, ΔΔⵠ) {
			ΔΔ = this.ΔΔⵠⵠⲆⵠⲆ(ΔΔ, ⵠⲆⵠⲆⲆ.ⵠⵠⲆⵠⵠⲆⲆ);
			ΔΔⵠ = this.ᐃᐃᐃⲆⵠΔΔ(ΔΔⵠ, ⵠⲆⵠⲆⲆ.ⵠⵠⲆⵠⵠⲆⲆ);
			console.log("HIT", ⵠᐃ, ⵠᐃⵠⵠⲆ, ΔΔ, ΔΔⵠ, ⵠⲆⵠⲆⲆ.ⵠⵠⲆⵠⵠⲆⲆ);
			if (!ⵠᐃ) this.ⲆΔⵠⵠⲆᐃᐃ(this.ΔⵠⵠΔ.ⵠⵠⵠᐃΔ, this.sample.ⵠⵠⵠᐃΔ, ΔΔ, ΔΔⵠ);
			else {
				if (1 === ⵠᐃⵠⵠⲆ) this.ⲆΔⵠⵠⲆᐃᐃ(this.ΔⵠⵠΔ.ᐃⲆⵠⲆΔⲆⲆ, this.sample.ᐃⲆⵠⲆΔⲆⲆ, ΔΔ, ΔΔⵠ);
				else ᐃⲆⵠΔ === ⵠᐃⵠⵠⲆ && this.ⲆΔⵠⵠⲆᐃᐃ(this.ΔⵠⵠΔ.ΔΔⵠⲆⵠΔⲆ, this.sample.ΔΔⵠⲆⵠΔⲆ, ΔΔ, ΔΔⵠ)
			}
		};
		this.ΔⵠⵠΔⵠ = {
			y: ⲆᐃⲆ,
			x: ⵠⵠΔΔ
		};
		this.ΔᐃⵠΔⵠⵠⵠ = {
			x: ⵠⲆⵠ,
			y: ⵠⲆⵠ
		};
		this.ⵠⵠⲆⲆᐃ = {};
		this.ⵠⲆΔᐃ = [];
		this.ⵠⵠⲆⵠΔ = function(ΔⵠΔ, ᐃᐃⵠ) {
			for (var ᐃᐃᐃⵠ in this.ⵠⵠⲆⲆᐃ) {
				var ⵠⵠⲆⲆᐃ = this.ⵠⵠⲆⲆᐃ[ᐃᐃᐃⵠ];
				ⵠⵠⲆⲆᐃ.check(ΔⵠΔ);
				if (ⵠⵠⲆⲆᐃ.ᐃΔᐃⲆⲆⲆⵠ) {
					if (ⲆⲆⲆ.ΔᐃᐃⲆⵠ.now < ᐃᐃⵠⲆ.ᐃΔᐃᐃⵠΔⵠ) ⵠⵠⲆⲆᐃ.ΔⵠΔᐃᐃ();
					if (ᐃᐃⵠ) ⵠⵠⲆⲆᐃ.ᐃᐃⵠ(ΔⵠΔ, this.ΔⵠⵠΔⵠ);
					if (this.transition) ⵠⵠⲆⲆᐃ.transition()
				}
			}
			this.transition && (this.transition = 0)
		};
		this.ⲆⵠⵠᐃⲆᐃⲆⲆΔ = function() {
			var ⲆⲆⲆΔ = [];
			for (var Δᐃ = ΔΔⲆⲆ; Δᐃ < this.ⵠⲆΔᐃ.length; Δᐃ++) {
				var ΔⵠΔ = this.ⵠⲆΔᐃ[Δᐃ];
				if (ΔⵠΔ.ΔⲆⲆΔⲆΔᐃ) ⲆⲆⲆΔ.push(Δᐃ);
				else !ΔⵠΔ.ΔⲆⲆΔⲆΔᐃ && !ⲆⲆⲆ.ΔⲆᐃᐃ[ΔⵠΔ.ΔᐃⲆⵠ] && (ΔⵠΔ.ᐃⲆᐃΔⵠᐃⲆ(), ⲆⲆⲆΔ.push(Δᐃ))
			}
			var ⵠⲆΔᐃ = ⲆⲆⲆ.Ⲇᐃⵠ[ⲆΔⲆ.ᐃⲆⲆⲆ];
			for (var Δᐃ = Ⲇᐃⵠⵠ, ᐃΔⵠⵠ = ⵠᐃΔ; ⵠⲆΔᐃ.length > Δᐃ && ⲆⲆⲆΔ.length > ᐃΔⵠⵠ; Δᐃ++) {
				var ΔⵠΔ = ⵠⲆΔᐃ[Δᐃ];
				if (ⵠΔᐃⲆ.ⲆᐃᐃⲆⵠᐃⵠ == ⲆⲆⲆ.mode && Δ[67] === ⲆⲆⲆ.ⵠⲆΔᐃ[ΔⵠΔ.id].ⲆⵠΔⵠΔ || -1 !== ΔⵠΔ.ⵠᐃΔᐃᐃ || ΔⵠΔ.ΔᐃⲆⵠ === ⵠⵠⵠ.ΔᐃⲆⵠ) continue;
				this.ⵠⲆΔᐃ[ⲆⲆⲆΔ[ᐃΔⵠⵠ]].ΔⲆᐃᐃⵠ(ΔⵠΔ.ΔᐃⲆⵠ);
				ᐃΔⵠⵠ++
			}
		};
		this.ᐃⵠᐃⲆⲆΔⲆᐃⵠ = function() {
			this.ⲆⵠⵠᐃⲆᐃⲆⲆΔ();
			for (var Δᐃ = 0; this.ⵠⲆΔᐃ.length > Δᐃ; Δᐃ++) {
				var ΔⵠΔ = this.ⵠⲆΔᐃ[Δᐃ];
				if (ΔⵠΔ.ΔⲆⲆΔⲆΔᐃ || !ΔⵠΔ.check()) continue;
				ΔⵠΔ.ᐃᐃⵠ()
			}
		};
		this.ᐃΔΔΔⲆⲆⲆΔⲆ = function(ΔⵠΔ) {
			if (ΔⵠΔ.x === this.ΔᐃⵠΔⵠⵠⵠ.x && ΔⵠΔ.y === this.ΔᐃⵠΔⵠⵠⵠ.y) return 0;
			this.ΔᐃⵠΔⵠⵠⵠ.x = ΔⵠΔ.x;
			this.ΔᐃⵠΔⵠⵠⵠ.y = ΔⵠΔ.y;
			this.ΔⵠⵠΔⵠ.x = this.ⵠⲆⵠᐃⵠⲆᐃ(ΔⵠΔ.x);
			this.ΔⵠⵠΔⵠ.y = this.ⲆᐃΔΔΔⵠᐃ(ΔⵠΔ.y);
			Howler[Δ[138]](this.ΔⵠⵠΔⵠ.x, this.ΔⵠⵠΔⵠ.y, 0);
			return ᐃⲆⲆ
		};
		this.ᐃⲆⵠⵠᐃᐃᐃΔⵠ = function() {
			if (!this.ⵠⲆᐃᐃΔ || !this.loaded) return;
			var ΔⵠΔ = ⲆⲆⲆ.ΔⲆᐃᐃ[ⵠⵠⵠ.ΔᐃⲆⵠ];
			if (!ΔⵠΔ) return;
			ΔⵠΔ.ⵠᐃΔᐃᐃ = ⵠⲆᐃ;
			var ᐃᐃⵠ = this.ᐃΔΔΔⲆⲆⲆΔⲆ(ΔⵠΔ);
			ⵠΔᐃⲆ.ᐃⵠⲆΔⲆ !== ⲆⲆⲆ.mode && ⲆⲆⲆ.mode !== ⵠΔᐃⲆ.ⵠΔΔⲆⵠ && ⲆⲆⲆ.mode !== ⵠΔᐃⲆ.ⵠΔⲆⵠᐃΔΔ && this.ⵠⵠⲆⵠΔ(ΔⵠΔ, ᐃᐃⵠ);
			this.ᐃⵠᐃⲆⲆΔⲆᐃⵠ()
		};
		this.ΔⵠⵠⲆᐃⲆⵠⲆΔ = function() {
			var ᐃⲆᐃⵠⵠ = null;
			for (var ⵠᐃⵠⵠⲆ in ᐃΔⲆⲆⵠ) {
				var ΔΔΔᐃ = ᐃΔⲆⲆⵠ[ⵠᐃⵠⵠⲆ];
				if (typeof ΔΔΔᐃ === Δ[442] && ΔΔΔᐃ.path) {
					ΔΔΔᐃ.ⵠᐃⵠⵠⲆ = new Howl({
						src: ΔΔΔᐃ.path,
						volume: ⵠⲆⵠ,
						sprite: ΔΔΔᐃ.Ⲇⵠ
					})
				}
				for (var ᐃᐃᐃⵠ in ΔΔΔᐃ.sample) {
					var ᐃΔΔᐃ = ΔΔΔᐃ.sample[ᐃᐃᐃⵠ];
					var ⲆⲆⲆΔ = [];
					console.log(ⲆⲆⲆⲆⲆ);
					for (var Δᐃ = 0; Δᐃ < ᐃΔΔᐃ; Δᐃ++) {
						var ⵠᐃ = ΔΔΔᐃ.ⵠᐃⵠⵠⲆ[Δ[257]](ᐃᐃᐃⵠ);
						ΔΔΔᐃ.ⵠᐃⵠⵠⲆ[Δ[347]](ⵠᐃ);
						ΔΔΔᐃ.ⵠᐃⵠⵠⲆ["on"](Δ[459], (function(ⵠᐃ) {
							if (!this[Δ[398]](ⵠᐃ)) {
								console.log(ΔⵠΔⲆⲆ, ⵠⵠⵠⲆⵠ);
								this[Δ[347]](ⵠᐃ)
							}
						}), ⵠᐃ);
						ⲆⲆⲆΔ.push(ⵠᐃ)
					}
					if (ⲆⲆⲆΔ.length > ᐃⲆΔ) ⵠᐃⲆΔ.sample[ᐃᐃᐃⵠ] = ⲆⲆⲆΔ;
					else ⵠᐃⲆΔ.sample[ᐃᐃᐃⵠ] = ⲆⲆⲆΔ[ⲆᐃⲆ];
					ⵠᐃⲆΔ.ΔⵠⵠΔ[ᐃᐃᐃⵠ] = ΔΔΔᐃ.ⵠᐃⵠⵠⲆ
				}
			}
		};
		this.ᐃⲆΔΔΔⵠᐃ = function(ΔΔΔᐃ, ΔⵠΔ, ⲆᐃΔ) {
			for (var Δᐃ = 0; Δᐃ < ΔΔΔᐃ.length; Δᐃ++) ΔⵠΔ[Δ[398]](ⲆᐃΔ, ΔΔΔᐃ[Δᐃ])
		};
		this.ΔⵠⵠⵠᐃΔⵠ = function(ⵠⵠᐃΔⵠ, ΔⵠⵠΔ, ⲆΔΔΔⲆⵠⵠⲆⲆ, ᐃⲆΔᐃⲆⲆⵠΔᐃ, ΔⲆⲆᐃⵠ, ᐃᐃⲆⲆΔⵠᐃⵠΔ) {
			var ΔΔΔᐃ = ⵠⵠᐃΔⵠ;
			for (var Δᐃ = 0; ⲆΔΔΔⲆⵠⵠⲆⲆ > Δᐃ; Δᐃ++) {
				var ᐃⲆⵠΔΔΔΔ = ΔΔΔᐃ[Δᐃ] = [];
				for (ᐃΔⵠⵠ = 0; ᐃΔⵠⵠ < ᐃⲆΔᐃⲆⲆⵠΔᐃ; ᐃΔⵠⵠ++) {
					ᐃⲆⵠΔΔΔΔ[ᐃΔⵠⵠ] = ⵠᐃⲆΔ.sample[ΔⲆⲆᐃⵠ + ᐃΔⵠⵠ][Δᐃ];
					ΔⵠⵠΔ.ⵠᐃⵠⵠⲆ[Δ[398]](ᐃᐃⲆⲆΔⵠᐃⵠΔ, ᐃⲆⵠΔΔΔΔ[ᐃΔⵠⵠ])
				}
			}
		};
		this.ΔⲆᐃᐃⵠ = function() {
			ⵠᐃⲆΔ.ΔⵠⵠⲆᐃⲆⵠⲆΔ();
			ⵠᐃⲆΔ.ⵠⵠᐃΔⵠ.ⵠᐃⵠᐃΔᐃΔ = [];
			ⵠᐃⲆΔ.ⵠⵠᐃΔⵠ.ᐃΔᐃᐃΔ = [];
			ⵠᐃⲆΔ.ⵠⵠᐃΔⵠ.ΔΔᐃⲆᐃ = [];
			ⵠᐃⲆΔ.ΔⵠⵠⵠᐃΔⵠ(ⵠᐃⲆΔ.ⵠⵠᐃΔⵠ.ⵠᐃⵠᐃΔᐃΔ, ᐃΔⲆⲆⵠ.ΔⲆⵠⵠⵠⲆⲆ, ᐃᐃⵠⲆ.ᐃⲆⲆⲆ, ⵠⵠᐃΔ, "p", .15);
			ⵠᐃⲆΔ.ΔⵠⵠⵠᐃΔⵠ(ⵠᐃⲆΔ.ⵠⵠᐃΔⵠ.ᐃΔᐃᐃΔ, ᐃΔⲆⲆⵠ.ⲆⵠⵠΔⵠⵠⵠ, ᐃᐃⵠⲆ.ᐃⲆⲆⲆ, 4, "w", .15);
			ⵠᐃⲆΔ.ΔⵠⵠⵠᐃΔⵠ(ⵠᐃⲆΔ.ⵠⵠᐃΔⵠ.ΔΔᐃⲆᐃ, ᐃΔⲆⲆⵠ.ⵠⵠⵠᐃⵠΔΔ, ᐃᐃⵠⲆ.ᐃⲆⲆⲆ, 3, "d", .09);
			ⵠᐃⲆΔ.ᐃⲆΔΔΔⵠᐃ(ⵠᐃⲆΔ.sample.ⵠⵠⵠᐃΔ, ⵠᐃⲆΔ.ΔⵠⵠΔ.ⵠⵠⵠᐃΔ, .15);
			ⵠᐃⲆΔ.ᐃⲆΔΔΔⵠᐃ(ⵠᐃⲆΔ.sample.ΔΔⵠⲆⵠΔⲆ, ⵠᐃⲆΔ.ΔⵠⵠΔ.ΔΔⵠⲆⵠΔⲆ, .2);
			ⵠᐃⲆΔ.ᐃⲆΔΔΔⵠᐃ(ⵠᐃⲆΔ.sample.ᐃⲆⵠⲆΔⲆⲆ, ⵠᐃⲆΔ.ΔⵠⵠΔ.ᐃⲆⵠⲆΔⲆⲆ, 1);
			ⵠᐃⲆΔ.ⵠⵠⲆⲆᐃ.ⲆΔⲆⵠΔᐃΔΔⲆ = new ⵠⵠΔⲆᐃⲆⲆ(ᐃᐃⵠⲆ.ⵠⵠⲆᐃᐃⲆⵠᐃⲆ, this.sample.ΔΔᐃⲆΔᐃΔ, this.sample.ⲆⵠΔΔΔⲆᐃ, ᐃᐃⵠⲆ.ⵠΔΔΔᐃⲆⵠⵠⵠ, .05, .4, ᐃΔⲆⲆⵠ.ᐃⵠᐃⲆᐃⵠⵠ.ⵠᐃⵠⵠⲆ, ᐃᐃⵠⲆ.ᐃⵠⲆⲆᐃⵠⲆ, {
				x: ⵠ.ᐃⲆⲆᐃᐃΔⲆ,
				y: ⵠ.ⵠΔⲆⲆΔᐃⲆ,
				w: ⲆⲆⲆ.w,
				"ⲆΔΔ": ⲆⲆⲆ.ⲆΔΔ
			}, {
				x: ⵠ.ᐃⲆⲆᐃᐃΔⲆ - 2300,
				y: ⵠ.ⵠΔⲆⲆΔᐃⲆ - 4e3,
				w: ⲆⲆⲆ.w,
				"ⲆΔΔ": ⲆⲆⲆ.ⲆΔΔ
			}, {
				x: ⵠ.ᐃⲆⲆᐃᐃΔⲆ - 1500,
				y: ⵠ.ⵠΔⲆⲆΔᐃⲆ - 2e3,
				w: ⲆⲆⲆ.w,
				"ⲆΔΔ": ⲆⲆⲆ.ⲆΔΔ
			});
			ⵠᐃⲆΔ.ⵠⵠⲆⲆᐃ.ΔⵠΔⲆⵠⲆⵠΔᐃ = new ⵠⵠΔⲆᐃⲆⲆ(ᐃᐃⵠⲆ.ⲆᐃⵠⲆⲆᐃΔ, this.sample.ΔⲆⵠⲆⵠᐃΔ, this.sample.ⵠⲆⵠⲆⲆⵠᐃ, ᐃᐃⵠⲆ.ΔⲆⵠΔᐃⲆΔⲆⲆ, .03, .25, ᐃΔⲆⲆⵠ.ᐃⵠᐃⲆᐃⵠⵠ.ⵠᐃⵠⵠⲆ, ᐃᐃⵠⲆ.ᐃⵠⲆⲆᐃⵠⲆ, {
				x: ⲆⲆⵠⲆ,
				y: ⵠ.ⵠΔⲆⲆΔᐃⲆ + 800,
				w: ⵠ.ᐃⲆⲆᐃᐃΔⲆ - 2300,
				"ⲆΔΔ": ⲆⲆⲆ.ⲆΔΔ
			}, {
				x: -100,
				y: ⵠ.ⵠΔⲆⲆΔᐃⲆ - 300,
				w: ⵠ.ᐃⲆⲆᐃᐃΔⲆ - 100,
				"ⲆΔΔ": ⲆⲆⲆ.ⲆΔΔ
			}, {
				x: -ⵠᐃⵠⲆⲆ,
				y: ⵠ.ⵠΔⲆⲆΔᐃⲆ + 400,
				w: ⵠ.ᐃⲆⲆᐃᐃΔⲆ - 1400,
				"ⲆΔΔ": ⲆⲆⲆ.ⲆΔΔ
			});
			ⵠᐃⲆΔ.ⵠⵠⲆⲆᐃ.ⵠΔⵠⲆⲆⲆⵠ = new ⵠⵠΔⲆᐃⲆⲆ(ᐃᐃⵠⲆ.ⲆᐃⵠⲆⲆᐃΔ, this.sample.ΔΔᐃᐃⲆⲆⵠ, this.sample.ⵠⵠⵠⵠΔⵠⲆ, ᐃᐃⵠⲆ.ΔΔΔⲆⵠⵠⲆⵠᐃ, .01, .22, ᐃΔⲆⲆⵠ.ᐃⵠᐃⲆᐃⵠⵠ.ⵠᐃⵠⵠⲆ, ᐃᐃⵠⲆ.ᐃⵠⲆⲆᐃⵠⲆ, {
				x: -100,
				y: -100,
				w: ⲆⲆⲆ.w + 200,
				"ⲆΔΔ": ⵠ.ⵠΔⲆⲆΔᐃⲆ - 1e3
			}, {
				x: -ᐃⵠᐃΔᐃ,
				y: -ⵠⲆΔᐃΔ,
				w: ⲆⲆⲆ.w + 200,
				"ⲆΔΔ": ⵠ.ⵠΔⲆⲆΔᐃⲆ + 600
			}, {
				x: -ⵠⲆᐃⵠⲆ,
				y: -ᐃⵠᐃⲆⵠ,
				w: ⲆⲆⲆ.w + 200,
				"ⲆΔΔ": ⵠ.ⵠΔⲆⲆΔᐃⲆ + 100
			});
			for (var Δᐃ = ⵠΔΔᐃ; ᐃᐃⵠⲆ.ᐃⲆⲆⲆ > Δᐃ; Δᐃ++) ⵠᐃⲆΔ.ⵠⲆΔᐃ[Δᐃ] = new ⵠⵠᐃⵠᐃᐃᐃᐃⲆ(Δᐃ);
			ⵠᐃⲆΔ.ⵠⲆΔᐃ[ⵠᐃΔ].ΔⲆᐃᐃⵠ(ⵠⵠⵠ.ΔᐃⲆⵠ);
			ⵠᐃⲆΔ.loaded = 1
		};
		this.ⲆⲆⵠᐃᐃᐃΔⲆⲆ = function() {
			!this.transition && ᐃᐃⵠⲆ.ᐃΔᐃᐃⵠΔⵠ > ⲆⲆⲆ.ΔᐃᐃⲆⵠ.now && (this.transition = ᐃⲆⲆ)
		};
		this.ΔⲆⵠᐃΔ = function() {
			if (!this.ⵠⲆᐃᐃΔ || !this.loaded) return;
			for (var ΔΔΔᐃ in ⵠᐃⲆΔ.sample) {
				var ⵠᐃⵠⵠⲆ = ⵠᐃⲆΔ.sample[ΔΔΔᐃ];
				if (typeof ⵠᐃⵠⵠⲆ === Δ[442]) {
					for (var Δᐃ = 0; Δᐃ < ⵠᐃⵠⵠⲆ.length; Δᐃ++) ⵠᐃⲆΔ.ΔⵠⵠΔ[ΔΔΔᐃ][Δ[347]](ⵠᐃⵠⵠⲆ[Δᐃ])
				} else ⵠᐃⲆΔ.ΔⵠⵠΔ[ΔΔΔᐃ][Δ[347]](ⵠᐃⵠⵠⲆ)
			}
			for (var Δᐃ = 0; Δᐃ < ⵠᐃⲆΔ.ⵠⲆΔᐃ.length; Δᐃ++) ⵠᐃⲆΔ.ⵠⲆΔᐃ[Δᐃ].ᐃⲆᐃΔⵠᐃⲆ()
		};
		this.select = function() {
			if (!ⵠᐃⲆΔ.ⵠⲆᐃᐃΔ) {
				!ⵠᐃⲆΔ.loaded && ⵠᐃⲆΔ.ΔⲆᐃᐃⵠ();
				ⵠᐃⲆΔ.ⵠⲆΔᐃ[0].ΔᐃⲆⵠ = ⵠⵠⵠ.ΔᐃⲆⵠ;
				ⵠᐃⲆΔ.ⵠⲆΔᐃ[ⲆⲆᐃΔ].ΔⲆⲆΔⲆΔᐃ = ΔᐃΔ;
				ⵠᐃⲆΔ.ⲆⲆⵠᐃᐃᐃΔⲆⲆ()
			} else ⵠᐃⲆΔ.ΔⲆⵠᐃΔ();
			ⵠᐃⲆΔ.ⵠⲆᐃᐃΔ = !ⵠᐃⲆΔ.ⵠⲆᐃᐃΔ
		}
	};

	function ΔⵠΔⲆΔᐃⲆ(ⲆⵠΔⲆⲆⲆΔ, ΔΔΔⵠᐃᐃᐃ, ᐃΔΔΔΔΔᐃ, ⵠᐃⵠⲆᐃΔᐃ, ⵠᐃᐃᐃⵠ) {
		const ⲆⲆⵠᐃΔⲆᐃ = (2660 | ⲆⵠΔⲆⲆⲆΔ) & ~(2660 & ⲆⵠΔⲆⲆⲆΔ);
		const ᐃⲆⲆΔᐃⵠᐃ = ~(ΔΔΔⵠᐃᐃᐃ & 14385) & ΔΔΔⵠᐃᐃᐃ | ~(ΔΔΔⵠᐃᐃᐃ & 14385) & 14385;
		const ⵠᐃⵠΔⲆⲆⵠᐃⲆ = (16 << (ᐃΔΔΔΔΔᐃ >> 0 & 255)) + (8 << (ᐃΔΔΔΔΔᐃ >> 24 & 255)) + (ⵠⲆⵠ << (ᐃΔΔΔΔΔᐃ >> 8 & 255)) + (24 << (ᐃΔΔΔΔΔᐃ >> 16 & 255));
		const ⲆᐃⵠᐃⵠⲆⵠΔΔ = ((ⵠᐃⵠⲆᐃΔᐃ + 55647) * 1664525 + 1013904223) % 4294967296;
		const ⲆⵠⵠΔⵠΔⲆⵠⵠ = (ⵠᐃΔ << (ⵠᐃᐃᐃⵠ >> 0 & 255)) + (16 << (ⵠᐃᐃᐃⵠ >> 8 & 255)) + (8 << (ⵠᐃᐃᐃⵠ >> 16 & 255)) + (24 << (ⵠᐃᐃᐃⵠ >> 24 & 255));
		const ⲆⲆᐃⲆᐃⲆΔⲆΔ = ᐃⲆΔⵠⵠⲆⵠ(ⲆⲆⵠᐃΔⲆᐃ, ᐃⲆⲆΔᐃⵠᐃ);
		const ⵠᐃᐃᐃᐃΔⵠΔᐃ = ⵠᐃⲆⵠⲆⵠΔ(ⵠᐃⵠΔⲆⲆⵠᐃⲆ, ⲆᐃⵠᐃⵠⲆⵠΔΔ, ⲆⵠⵠΔⵠΔⲆⵠⵠ, ⲆⲆⵠᐃΔⲆᐃ, ᐃⲆⲆΔᐃⵠᐃ);
		const ⵠΔΔᐃᐃⵠⵠⵠΔ = ⲆⲆᐃⲆᐃⲆΔⲆΔ ^ 19142;
		return ⵠΔΔᐃᐃⵠⵠⵠΔ
	}

	function ⲆΔⵠⵠΔⵠⵠ(ⵠΔⵠⲆⲆⵠⵠ, ⲆᐃᐃΔⵠᐃΔ, ⲆⲆΔΔⵠᐃⲆ, ᐃⲆⵠΔⲆᐃΔ) {
		const ΔΔⲆᐃⲆᐃᐃ = (1664525 * (58687 + ⵠΔⵠⲆⲆⵠⵠ) + 1013904223) % 4294967296;
		const ᐃΔⵠΔⵠᐃⵠ = (1664525 * (32375 + ⲆᐃᐃΔⵠᐃΔ) + 1013904223) % 4294967296;
		const ⲆᐃⵠⵠⲆΔⲆ = ~(20247 & ⲆⲆΔΔⵠᐃⲆ) & (20247 | ⲆⲆΔΔⵠᐃⲆ);
		const ᐃⲆⲆΔⲆⵠᐃ = ((34639 + ᐃⲆⵠΔⲆᐃΔ) * 22695477 + 1) % 4294967296;
		const ⲆᐃⵠΔⲆᐃⲆΔⵠ = ᐃΔⵠⵠⲆⲆΔ(ΔΔⲆᐃⲆᐃᐃ, ᐃΔⵠΔⵠᐃⵠ, ⲆᐃⵠⵠⲆΔⲆ, ᐃⲆⲆΔⲆⵠᐃ, ΔΔⲆᐃⲆᐃᐃ, ᐃΔⵠΔⵠᐃⵠ);
		const ΔⵠⲆΔⲆⲆΔⵠᐃ = ⵠΔⵠⲆᐃⵠⵠ(ⲆᐃⵠⵠⲆΔⲆ, ᐃⲆⲆΔⲆⵠᐃ, ΔΔⲆᐃⲆᐃᐃ);
		const ⲆⵠⲆⵠΔⵠᐃⲆΔ = (2147483629 * ((ⲆᐃⵠΔⲆᐃⲆΔⵠ ^ ΔⵠⲆΔⲆⲆΔⵠᐃ) + 51077) + 2147483587) % 2147483647;
		return ⲆⵠⲆⵠΔⵠᐃⲆΔ
	}

	function ⵠⵠᐃΔⵠⲆⲆ(ⲆΔᐃᐃᐃΔᐃ, ΔΔⵠᐃᐃ, ⵠⲆᐃⵠΔᐃⲆ) {
		const ΔᐃⵠⵠΔⲆⵠ = (22695477 * (37859 + ⲆΔᐃᐃᐃΔᐃ) + 1) % 4294967296;
		const ⲆⲆᐃᐃᐃⵠⵠ = (ΔΔⵠᐃᐃ | 4439) & ~(4439 & ΔΔⵠᐃᐃ);
		const ΔⵠᐃⵠⵠⲆΔ = ((28320 + ⵠⲆᐃⵠΔᐃⲆ) * 214013 + 2531011) % 4294967296;
		const ⵠᐃⲆⲆΔⲆᐃⵠⲆ = ΔⲆᐃΔⵠⲆⵠ(ΔᐃⵠⵠΔⲆⵠ, ⲆⲆᐃᐃᐃⵠⵠ, ΔⵠᐃⵠⵠⲆΔ, ΔᐃⵠⵠΔⲆⵠ);
		const ⵠΔⵠΔΔⲆΔⲆᐃ = ⵠΔⵠⲆᐃⵠⵠ(ⲆⲆᐃᐃᐃⵠⵠ, ΔⵠᐃⵠⵠⲆΔ, ΔᐃⵠⵠΔⲆⵠ);
		const ⵠΔⵠᐃᐃⵠᐃⲆⲆ = ⵠᐃⲆⲆΔⲆᐃⵠⲆ ^ 501;
		return ⵠΔⵠᐃᐃⵠᐃⲆⲆ
	}
	ΔΔΔΔⵠᐃΔ = 0;
	const ᐃΔ = 1660880;

	function ⲆΔ(Δⵠ) {
		return ⵠΔΔⲆⲆⵠᐃᐃⵠ.String.fromCharCode(Δⵠ)
	}

	function ᐃᐃ(ᐃᐃⲆ) {
		return ᐃᐃⲆ.map(ⲆΔ).join("")
	}
	const ᐃⵠᐃ = function() {
		const ΔΔᐃ = ᐃᐃ([5123, 916]);
		const ⵠΔⵠ = {
			"ΔᐃⲆ": 6209084,
			"ΔⵠΔΔⵠ": 6389427,
			"ᐃΔ": 4009539,
			"ᐃᐃⲆΔⵠⵠΔ": 6124643
		};
		if (ⵠΔⵠ[ΔΔᐃ] !== ⵠΔⵠ.ᐃΔ) {
			const ᐃΔ = Math.floor;
			let ᐃᐃ = 0;
			const ⲆΔ = function(ⲆΔ) {
				for (let Δⵠ = 0; Δⵠ < 2457; Δⵠ++) ᐃᐃ += Δⵠ;
				return ᐃΔ(ⲆΔ)
			};
			Math.floor = ⲆΔ
		}
	};
	ᐃⵠᐃ();
	document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("version")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "" + ⲆᐃᐃΔⲆ.ⲆⵠΔᐃⲆⲆΔ + ".3";
	var ᐃⵠᐃⵠᐃ = [];
	var ⵠⲆΔⲆⲆ = {
		time: Math.floor(Math.random() * ⵠΔᐃⵠ),
		items: []
	};
	ⵠΔⵠΔΔΔᐃⲆΔ();
	var ᐃⵠΔΔ = new ΔΔΔᐃᐃΔΔⲆΔ;
	window.client = ᐃⵠΔΔ;
	var ⵠⵠΔⵠ;
	var ⲆΔᐃᐃ = {
		"ΔⲆΔⵠⵠ": ⲆⲆⲆΔᐃ
	};
	var ⲆⲆⲆ;
	var ⵠⵠⵠ;
	var ᐃᐃΔⲆΔΔⵠ;
	var ⵠᐃⲆΔ = new ⵠΔΔⲆⵠᐃⲆᐃᐃ;
	var ᐃⲆⵠⲆΔ = new ⵠⲆᐃⲆΔⵠⵠ;
	window.keyboard = ᐃⲆⵠⲆΔ;
	var ᐃⵠⵠⲆ = new ᐃᐃΔᐃⲆᐃⲆ;
	var ⲆᐃᐃⲆΔ = ⲆᐃⲆ,
		ΔᐃⲆⲆ = ᐃΔΔ;
	var ᐃᐃΔΔⲆⲆⲆⲆⲆ = {
		"ΔⵠᐃⲆᐃΔⵠΔⲆ": ⵠⲆΔⵠ,
		"ᐃΔⵠⲆᐃⲆⵠΔⲆ": 60,
		display: true,
		"ᐃΔΔᐃΔ": ⲆⲆᐃΔ,
		"ⵠΔ": ⲆⲆⲆΔᐃ
	};
	var ΔⲆΔⲆⲆΔⲆ = new ⲆⲆⵠⵠΔⲆΔᐃⵠ(ⲆⲆ, ᐃ, (function() {
		ᐃⵠᐃᐃⲆⵠᐃⵠⲆ();
		ⲆΔᐃᐃ = new ᐃᐃⵠⲆⵠⲆⵠⲆᐃ(ⲆⲆ, ᐃ);
		ⵠⵠΔⵠ = new ΔⲆΔⲆΔⲆᐃⲆᐃ(ⲆⲆ, ᐃ);
		ⵠⵠΔⵠ.ⲆΔΔⵠⲆΔⲆⵠⵠ();
		ᐃᐃΔⲆΔΔⵠ = new ⵠⲆⵠᐃΔⵠΔΔΔ(ⲆⲆ, ᐃ);
		ⲆⲆⲆ = new ⵠⲆᐃᐃⵠⵠᐃⲆⲆ;
		window.world = ⲆⲆⲆ;
		ⵠⵠⵠ = new ᐃᐃⲆᐃⵠΔᐃᐃᐃ;
		window.user = ⵠⵠⵠ;
		ΔⲆΔⲆⲆΔⲆ.ΔⲆⵠᐃΔ((function() {
			ΔⲆΔⲆⲆΔⲆ.ΔΔⲆⲆⵠⵠᐃ.style.display = Δ[369];
			ⵠⵠΔⵠ.ⵠⲆᐃᐃΔ()
		}))
	}));

	function ⲆᐃᐃⲆ(ⵠⲆⲆⵠᐃⲆΔ) {
		ⵠΔΔⲆⲆⵠᐃᐃⵠ.requestAnimationFrame(ⲆᐃᐃⲆ);
		ΔᐃⲆⲆ = (ⵠⲆⲆⵠᐃⲆΔ - ⲆᐃᐃⲆΔ) / 1e3;
		ⲆᐃᐃⲆΔ = ⵠⲆⲆⵠᐃⲆΔ;
		ΔᐃⲆⲆ = ΔᐃⲆⲆ > 1 ? ⲆΔⲆⵠ : ΔᐃⲆⲆ;
		if (ⲆΔᐃᐃ.ΔⲆΔⵠⵠ) {
			ⲆΔᐃᐃ.ⲆᐃᐃⲆ()
		} else {
			ᐃ.clearRect(ⲆⲆᐃΔ, ⲆⲆⵠⲆ, ⲆΔⲆᐃ, ΔⵠⲆΔ);
			if (ΔⲆΔⲆⲆΔⲆ.ΔⲆΔⵠⵠ) ΔⲆΔⲆⲆΔⲆ.ⲆᐃᐃⲆ();
			else if (ⵠⵠΔⵠ.ΔⲆΔⵠⵠ) ⵠⵠΔⵠ.ⲆᐃᐃⲆ();
			else if (ᐃᐃΔⲆΔΔⵠ.ΔⲆΔⵠⵠ) ᐃᐃΔⲆΔΔⵠ.ⲆᐃᐃⲆ()
		}
	}
	ⵠΔΔⲆⲆⵠᐃᐃⵠ[ᐃⲆᐃᐃᐃᐃⵠ[184]] = function() {
		if (ⲆΔᐃᐃ.ΔⲆΔⵠⵠ) return "Are you sure you want quit starve.io ;-; ?"
	};
	ⲆⲆᐃᐃΔⲆᐃ();
	ⲆᐃᐃⲆ(0);

	function ⲆⵠᐃⵠⲆⲆⲆ() {
		try {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[211]]["adsRefresh"]()
		} catch (Δⵠⵠᐃ) {}
	}
	var ⲆⵠᐃⵠⲆⲆⵠ = 0;

	function check_ads() {
		ⵠⵠⵠⲆᐃΔΔ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", ⵠⲆΔΔⲆ);
		ⵠⵠⵠⲆᐃΔΔ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
	}
	var ⵠⵠⵠⲆᐃΔΔ = new XMLHttpRequest;
	ⵠⵠⵠⲆᐃΔΔ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
		if (this[ᐃⲆᐃᐃᐃᐃⵠ[294]] === 4 && 0 === this.status) {}
	};
	var ΔⲆⲆᐃᐃ = "https://token.starve.io/";
	var ᐃⵠΔΔᐃ = "https://token2.starve.io/";
	var ⲆⲆΔΔⲆᐃⵠ = 0;
	var ᐃᐃΔΔⵠⲆᐃ = 1;
	var ⲆᐃΔᐃᐃᐃΔⲆΔ = ⵠΔΔⵠ;
	var ᐃⲆⲆᐃΔⵠⵠ = ⲆⲆⲆⲆⲆ;
	var ΔⲆᐃᐃᐃ = ⵠⲆᐃᐃⲆ;
	var ᐃΔⵠⲆᐃ = ⵠⵠⵠⲆⵠ;
	var ⲆⵠⲆⲆⵠᐃⲆᐃᐃ = ⵠᐃΔᐃⲆ;
	var ᐃⲆΔⲆᐃΔⲆ = ⵠᐃⵠⵠ;
	ⵠΔΔⲆⲆⵠᐃᐃⵠ.ⵠⲆᐃⲆΔᐃⵠ = function() {
		ᐃⲆΔⲆᐃΔⲆ = ᐃⲆⲆ
	};

	function ΔⵠΔⲆⵠΔᐃⵠⲆ() {
		if (ⲆΔⵠⲆⲆ) {
			ΔⲆᐃᐃᐃ = ⵠᐃΔᐃ.ⲆΔᐃΔΔΔᐃ(40);
			ᐃⲆⲆᐃΔⵠⵠ = ⲆᐃΔᐃᐃᐃΔⲆΔ;
			ᐃΔⵠⲆᐃ = ⲆΔⵠⲆⲆ["userId"];
			ⵠΔΔⲆⲆⵠᐃᐃⵠ.ⵠⲆᐃⲆΔᐃⵠ();
			return
		}
		ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[163]][Δ[341]]["getAuthInstance"]()["signIn"]()
	}
	var ⵠᐃⲆΔⲆᐃΔⲆⵠ = undefined;
	var ⵠΔᐃᐃᐃΔᐃ = {
		"ⲆΔΔⲆⵠⵠΔᐃΔ": "ACCESS_TOKEN"
	};
	var ΔΔΔᐃ = document[ᐃⲆᐃᐃᐃᐃⵠ[2]]("script");
	ΔΔΔᐃ["type"] = "text/javascript";
	ΔΔΔᐃ["async"] = ᐃΔᐃⵠᐃ;
	ΔΔΔᐃ["src"] = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
	ΔΔΔᐃ["addEventListener"]("load", (function(Δⵠⵠᐃ) {
		ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[ⲆⵠΔᐃᐃᐃⲆ]][Δ[231]](ⵠΔᐃᐃᐃΔᐃ);
		ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[ΔⲆⲆΔⵠᐃⲆ]]["on"]("status-done", ⵠⲆⲆⲆΔΔᐃⲆΔ)
	}), ⵠⲆⵠᐃᐃ);
	var ⲆⲆⵠᐃΔΔⲆⲆᐃ = document.getElementsByTagName("head")[0];
	ⲆⲆⵠᐃΔΔⲆⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[236]](ΔΔΔᐃ);
	ⵠΔΔⲆⲆⵠᐃᐃⵠ["fbAsyncInit"] = function() {
		ⵠⵠᐃⵠᐃᐃⵠ();
		console.log(undefined)
	};
	(function(ⵠⲆᐃⲆ, ΔΔΔᐃ, ⵠᐃ) {
		var ⵠⲆᐃⵠ, ⵠⲆⲆᐃᐃᐃΔ = ⵠⲆᐃⲆ.getElementsByTagName(ΔΔΔᐃ)[ⵠⵠΔΔ];
		if (ⵠⲆᐃⲆ[ᐃⲆᐃᐃᐃᐃⵠ[157]](ⵠᐃ)) {
			return
		}
		ⵠⲆᐃⵠ = ⵠⲆᐃⲆ[ᐃⲆᐃᐃᐃᐃⵠ[2]](ΔΔΔᐃ);
		ⵠⲆᐃⵠ.id = ⵠᐃ;
		ⵠⲆᐃⵠ.src = "https://connect.facebook.net/en_US/sdk.js";
		ⵠⲆⲆᐃᐃᐃΔ.parentNode.insertBefore(ⵠⲆᐃⵠ, ⵠⲆⲆᐃᐃᐃΔ)
	})(document, "script", "facebook-jssdk");

	function ⲆⲆⲆΔⲆᐃⵠⲆᐃ() {
		ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[416]]["login"]((function(ⲆⲆⲆᐃⵠᐃⲆ) {
			if (ⲆⲆⲆᐃⵠᐃⲆ["authResponse"]) {
				ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[416]]["api"]("/me", (function(ⲆⲆⲆᐃⵠᐃⲆ) {
					ᐃⲆⲆᐃΔⵠⵠ = ᐃᐃΔΔⵠⲆᐃ;
					ΔⲆᐃᐃᐃ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[416]][Δ[171]]()["accessToken"];
					ⵠⵠᐃⵠᐃᐃⵠ();
					ⵠΔΔⲆⲆⵠᐃᐃⵠ.ⵠⲆᐃⲆΔᐃⵠ()
				}))
			} else {}
		}))
	}
	var ΔⵠᐃᐃΔⵠΔ = undefined;
	var ⲆⲆᐃΔΔ = undefined;
	var ⲆⲆᐃⵠᐃᐃⵠΔΔ = function() {
		ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[163]]["load"](Δ[341], ᐃⵠⵠⲆΔⲆⲆⲆⵠ)
	};
	var ᐃⵠⵠⲆΔⲆⲆⲆⵠ = function() {
		ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[163]][Δ[341]][Δ[231]]({
			client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
			scope: "https://www.googleapis.com/auth/userinfo.profile"
		}).then((ΔⲆᐃᐃⵠⵠΔΔΔ => {
			ΔⵠᐃᐃΔⵠΔ = ΔⲆᐃᐃⵠⵠΔΔΔ;
			ΔⵠᐃᐃΔⵠΔ["isSignedIn"]["listen"](ΔᐃⲆⵠⵠⲆⵠⵠᐃ);
			ΔⵠᐃᐃΔⵠΔ["currentUser"]["listen"](ᐃᐃⲆⲆᐃᐃᐃΔⲆ);
			const ΔⲆⲆⲆᐃⵠΔⲆᐃ = ΔⵠᐃᐃΔⵠΔ["isSignedIn"]["get"]();
			if (ΔⲆⲆⲆᐃⵠΔⲆᐃ) ΔⵠᐃᐃΔⵠΔ["signIn"]();
			ΔᐃΔΔⵠᐃΔᐃⲆ()
		}))
	};
	var ΔᐃⲆⵠⵠⲆⵠⵠᐃ = function(Ⲇⵠⵠⵠᐃ) {};
	var ᐃᐃⲆⲆᐃᐃᐃΔⲆ = function(ⵠⵠⵠ) {
		if (ΔⲆᐃᐃᐃ === ᐃⲆᐃⲆⵠ && ⵠⲆᐃᐃⲆ !== ⲆⲆᐃΔΔ) {
			ΔⲆᐃᐃᐃ = ⲆⲆᐃΔΔ[Δ[171]]()["id_token"];
			if (undefined !== ΔⲆᐃᐃᐃ) {
				ᐃⲆⲆᐃΔⵠⵠ = ⲆⲆΔΔⲆᐃⵠ;
				ᐃΔⵠⲆᐃ = ⲆⲆᐃΔΔ["getBasicProfile"]()["getId"]();
				ⵠΔΔⲆⲆⵠᐃᐃⵠ.ⵠⲆᐃⲆΔᐃⵠ();
				return
			}
		}
		ⵠⵠⵠ !== ⵠⵠⵠⲆⵠ && ⵠⵠⵠ["isSignedIn"]() === ⵠΔᐃⵠΔ && (ⲆⲆᐃΔΔ = ⵠⵠⵠ, ᐃΔⵠⲆᐃ = ⲆⲆᐃΔΔ.id, ᐃΔⵠⲆᐃ = ⲆⲆᐃΔΔ["getBasicProfile"]()["getId"](), ΔⲆᐃᐃᐃ = ⲆⲆᐃΔΔ[Δ[171]]()["id_token"], ᐃⲆⲆᐃΔⵠⵠ = ⲆⲆΔΔⲆᐃⵠ, ⵠΔΔⲆⲆⵠᐃᐃⵠ.ⵠⲆᐃⲆΔᐃⵠ())
	};
	var ΔᐃΔΔⵠᐃΔᐃⲆ = function() {
		ΔⵠᐃᐃΔⵠΔ && (ⲆⲆᐃΔΔ = ΔⵠᐃᐃΔⵠΔ["currentUser"]["get"]())
	};
	ⵠΔΔⲆⲆⵠᐃᐃⵠ.onload = function() {
		ⲆⲆᐃⵠᐃᐃⵠΔΔ()
	};

	function ᐃⲆⵠⲆⲆⵠᐃ(ⵠΔΔⵠΔ) {
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], ΔⲆⲆᐃᐃ + "setRegion?token=" + ΔⲆᐃᐃᐃ + Δ[96] + ᐃΔⵠⲆᐃ + Δ[242] + ⵠΔΔⵠΔ);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[6]](Δ[192], Δ[43]);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
			if (this[ᐃⲆᐃᐃᐃᐃⵠ[294]] === ⲆⲆᐃΔᐃ && this.status === 200) {
				"0" !== ⵠΔⲆᐃ.responseText ? ⵠⵠΔⵠ.ᐃⲆⲆⵠ(ⵠⵠΔⵠ.ᐃᐃⲆᐃΔ) : ⵠⵠΔⵠ.ᐃⲆⲆⵠ(ⵠⵠΔⵠ.ⲆΔⵠⲆᐃ)
			}
		};
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
	}

	function ᐃⵠⵠⵠⵠⵠΔᐃⲆ() {
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], ΔⲆⲆᐃᐃ + "getBreadAndScore?userid=" + ᐃΔⵠⲆᐃ);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[6]](Δ[192], Δ[43]);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
			if (this[ᐃⲆᐃᐃᐃᐃⵠ[294]] == 4 && 200 == this.status) {
				if (ⵠΔⲆᐃ.responseText !== "0") {
					var ⲆⵠΔᐃ = JSON.parse(ⵠΔⲆᐃ.responseText);
					var ⵠⲆᐃⲆ = ⲆⵠΔᐃ["b"] - ⵠⵠΔⵠ.ⲆⵠⵠΔⲆ;
					ⵠⵠΔⵠ.ⲆⵠⵠΔⲆ = ⲆⵠΔᐃ["b"];
					ⵠⵠΔⵠ.ᐃⲆᐃⵠⲆ = ⲆⵠΔᐃ["s"];
					ⵠⵠΔⵠ.ΔΔΔⵠⲆ = ⵠⵠΔⵠ.ⲆᐃⲆⵠᐃⲆΔ(ⵠⵠΔⵠ.ᐃⲆᐃⵠⲆ);
					ⵠⵠΔⵠ.ΔⵠⲆᐃΔΔⲆ = ⵠⵠΔⵠ.ⲆᐃⲆᐃⲆⵠⲆ(ⵠⵠΔⵠ.ᐃⲆᐃⵠⲆ);
					ⵠⵠΔⵠ.ⵠⲆᐃⲆⵠⵠⵠ = ⲆᐃⲆ;
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("breadWonInner")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = "" + ⵠⲆᐃⲆ
				}
			}
		};
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
	}

	function ⲆⲆⲆⵠⲆ(Δⵠᐃᐃᐃ, ΔΔᐃⲆ, Ⲇᐃᐃᐃⵠ, ⲆΔⲆΔⲆ) {
		Δⵠᐃᐃᐃ = Δⵠᐃᐃᐃ === ⵠⵠⵠⲆⵠ ? ⵠⵠΔⵠ.ⵠΔᐃⲆⲆⵠⲆ : Δⵠᐃᐃᐃ;
		ΔΔᐃⲆ = ⲆᐃⵠΔⵠ === ΔΔᐃⲆ ? ⵠⵠΔⵠ.ⵠⵠᐃⵠⵠᐃⵠ : ΔΔᐃⲆ;
		Ⲇᐃᐃᐃⵠ = Ⲇᐃᐃᐃⵠ === ΔⵠΔⲆⲆ ? ⵠⵠΔⵠ.ⵠⵠⲆⵠⲆⵠΔ : Ⲇᐃᐃᐃⵠ;
		ⲆΔⲆΔⲆ = ⲆΔⲆΔⲆ === ΔᐃᐃⵠⲆ ? ⵠⵠΔⵠ.ΔᐃⵠΔΔⵠⲆ : ⲆΔⲆΔⲆ;
		if (Δⵠᐃᐃᐃ === ⵠⵠΔⵠ.ⵠΔᐃⲆⲆⵠⲆ && ΔΔᐃⲆ === ⵠⵠΔⵠ.ⵠⵠᐃⵠⵠᐃⵠ && ⵠⵠΔⵠ.ⵠⵠⲆⵠⲆⵠΔ === Ⲇᐃᐃᐃⵠ && ⲆΔⲆΔⲆ === ⵠⵠΔⵠ.ΔᐃⵠΔΔⵠⲆ) return;
		ⵠⵠΔⵠ.ⵠΔᐃⲆⲆⵠⲆ = Δⵠᐃᐃᐃ;
		ⵠⵠΔⵠ.ⵠⵠᐃⵠⵠᐃⵠ = ΔΔᐃⲆ;
		ⵠⵠΔⵠ.ⵠⵠⲆⵠⲆⵠΔ = Ⲇᐃᐃᐃⵠ;
		ⵠⵠΔⵠ.ΔᐃⵠΔΔⵠⲆ = ⲆΔⲆΔⲆ;
		if (ⲆΔⲆΔⲆ === ⵠⵠΔⵠ.ⵠⵠⵠᐃᐃΔⲆ) ⲆΔⲆΔⲆ = "0";
		else if (ⵠⵠΔⵠ.ⲆⵠⵠΔⵠᐃᐃ === ⲆΔⲆΔⲆ) ⲆΔⲆΔⲆ = "1";
		else if (ⲆΔⲆΔⲆ === ⵠⵠΔⵠ.ⲆⵠᐃⲆⵠⵠᐃ) ⲆΔⲆΔⲆ = "2";
		else if (ⲆΔⲆΔⲆ === ⵠⵠΔⵠ.ⲆⵠⲆᐃⲆᐃⵠ) ⲆΔⲆΔⲆ = "3";
		else if (ⲆΔⲆΔⲆ === ⵠⵠΔⵠ.ⵠᐃⲆⲆᐃⵠᐃ) ⲆΔⲆΔⲆ = "4";
		else if (ⲆΔⲆΔⲆ === ⵠⵠΔⵠ.ΔᐃΔᐃⲆᐃⵠ) ⲆΔⲆΔⲆ = "5";
		if (ⵠⵠΔⵠ.Δⵠᐃᐃᐃⵠⵠ === ΔΔᐃⲆ) ΔΔᐃⲆ = "total";
		else if (ⵠⵠΔⵠ.ⲆᐃⵠᐃⵠΔⲆ === ΔΔᐃⲆ) ΔΔᐃⲆ = "normal";
		else if (ⵠⵠΔⵠ.ⲆᐃᐃᐃⲆⵠΔ === ΔΔᐃⲆ) ΔΔᐃⲆ = "zombie";
		else if (ⵠⵠΔⵠ.ᐃΔⵠᐃⲆΔᐃ === ΔΔᐃⲆ) ΔΔᐃⲆ = "vampire";
		else if (ⵠⵠΔⵠ.ΔⲆⲆᐃⲆⲆⲆ === ΔΔᐃⲆ) ΔΔᐃⲆ = Δ[498];
		ⵠⵠΔⵠ.ⲆΔⲆⲆᐃΔΔ === Δⵠᐃᐃᐃ && (Δⵠᐃᐃᐃ = "all");
		ⵠⵠΔⵠ.ΔᐃⲆⵠΔΔⵠ === Δⵠᐃᐃᐃ && (Δⵠᐃᐃᐃ = "week");
		Δⵠᐃᐃᐃ === ⵠⵠΔⵠ.ᐃᐃⵠⲆⵠⵠⲆ && (Δⵠᐃᐃᐃ = "today");
		if (Ⲇᐃᐃᐃⵠ === ⵠⵠΔⵠ.ⵠᐃᐃⲆᐃΔΔ) Ⲇᐃᐃᐃⵠ = "kill";
		else if (ⵠⵠΔⵠ.ᐃⵠⲆⵠⵠⵠᐃ === Ⲇᐃᐃᐃⵠ) Ⲇᐃᐃᐃⵠ = Δ[6];
		else Ⲇᐃᐃᐃⵠ === ⵠⵠΔⵠ.ᐃᐃⲆⵠᐃᐃΔ && (Ⲇᐃᐃᐃⵠ = Δ[302]);
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], ΔⲆⲆᐃᐃ + "leaderboard?range=" + Δⵠᐃᐃᐃ + "&mode=" + ΔΔᐃⲆ + "&sort=" + Ⲇᐃᐃᐃⵠ + "&season=" + ⲆΔⲆΔⲆ);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[6]](Δ[192], Δ[43]);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
			if (this[ᐃⲆᐃᐃᐃᐃⵠ[294]] == ΔⵠⲆⵠⲆ && 200 == this.status) {
				if (ⵠΔⲆᐃ.responseText !== "0") {
					var ⲆⵠΔᐃ = JSON.parse(ⵠΔⲆᐃ.responseText);
					var ⲆⲆⲆⵠ = "";
					for (var Δᐃ = ΔᐃΔ; ⲆⵠΔᐃ.length > Δᐃ; Δᐃ++) {
						ᐃⲆⵠᐃⵠ = ⲆⵠΔᐃ[Δᐃ];
						var ⲆⵠΔⵠΔ = ᐃⲆⵠᐃⵠ[ΔⵠⲆ];
						try {
							-1 === ⲆⵠΔⵠΔ.indexOf("Starver#") && (ⲆⵠΔⵠΔ = ⵠΔΔⲆⲆⵠᐃᐃⵠ["decodeURIComponent"](ⵠΔΔⲆⲆⵠᐃᐃⵠ["escape"](ⵠΔΔⲆⲆⵠᐃᐃⵠ["atob"](ⲆⵠΔⵠΔ))))
						} catch (Δⵠⵠᐃ) {}
						ⲆⲆⲆⵠ += '<div class="lineLeaderboard">';
						ⲆⲆⲆⵠ += '<div class="rank">';
						ⲆⲆⲆⵠ += Δᐃ + ΔⵠⲆ + "";
						ⲆⲆⲆⵠ += Δ[490];
						ⲆⲆⲆⵠ += '<div class="name">';
						ⲆⲆⲆⵠ += ⲆⵠΔⵠΔ;
						ⲆⲆⲆⵠ += Δ[490];
						ⲆⲆⲆⵠ += '<div class="lvl">';
						ⲆⲆⲆⵠ += ⵠⵠΔⵠ.ⲆᐃⲆⵠᐃⲆΔ(ᐃⲆⵠᐃⵠ[6]) + ᐃΔⵠΔ + "";
						ⲆⲆⲆⵠ += Δ[490];
						ⲆⲆⲆⵠ += '<div class="kills">';
						ⲆⲆⲆⵠ += ᐃⲆⵠᐃⵠ[ⵠⵠⲆⵠ] + "";
						ⲆⲆⲆⵠ += Δ[490];
						ⲆⲆⲆⵠ += '<div class="time">';
						ⲆⲆⲆⵠ += ᐃⲆⵠᐃⵠ[4] + "";
						ⲆⲆⲆⵠ += Δ[490];
						ⲆⲆⲆⵠ += '<div class="score">';
						ⲆⲆⲆⵠ += ᐃⲆⵠᐃⵠ[3] + "";
						ⲆⲆⲆⵠ += Δ[490];
						ⲆⲆⲆⵠ += Δ[490]
					}
					document[ᐃⲆᐃᐃᐃᐃⵠ[157]]("leaderboard")[ᐃⲆᐃᐃᐃᐃⵠ[83]] = ⲆⲆⲆⵠ
				}
			}
		};
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
	}

	function ᐃᐃᐃΔⵠᐃᐃ() {
		if (ⵠⵠΔⵠ.ⲆⵠⵠΔⲆ < 300 && ⵠⵠΔⵠ.ᐃⲆΔⵠⵠⵠⲆ > 0) return;
		var ⲆⵠΔⵠΔ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[79]).value.trim();
		document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[79]).value = ⲆⵠΔⵠΔ;
		if (1 > ⲆⵠΔⵠΔ.length || ⲆⵠΔⵠΔ.length > ⵠⵠⵠⲆᐃ) return;
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], ΔⲆⲆᐃᐃ + "changeNickname?token=" + ΔⲆᐃᐃᐃ + Δ[96] + ᐃΔⵠⲆᐃ + "&nickname=" + encodeURIComponent(ⲆⵠΔⵠΔ));
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[6]](Δ[192], Δ[43]);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
			if (4 == this[ᐃⲆᐃᐃᐃᐃⵠ[294]] && 200 == this.status) {
				if (ⵠΔⲆᐃ.responseText !== "0") {
					var ⲆⵠⵠΔⲆ = Number(ⵠΔⲆᐃ.responseText);
					if (0 < ⲆⵠⵠΔⲆ) ⵠⵠΔⵠ.ⲆⵠⵠΔⲆ -= ⲆⵠⵠΔⲆ;
					ⵠⵠΔⵠ.ᐃⲆΔⵠⵠⵠⲆ = 1;
					ⵠⵠΔⵠ.ᐃⲆⲆⵠ(ⵠⵠΔⵠ.ΔⲆⲆⵠⵠ)
				}
			}
		};
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
	}

	function ⵠⵠᐃⵠᐃᐃⵠ() {
		ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[416]] && ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[416]][Δ[231]]({
			xfbml: ⲆⵠᐃⵠⲆ,
			cookie: ⲆΔᐃⵠⵠ,
			version: "v15.0",
			appId: "642017356260407"
		});
		if (undefined !== ᐃΔⵠⲆᐃ) return;
		ᐃᐃᐃⲆⲆⵠᐃΔⲆ()
	}

	function ΔᐃⲆᐃΔΔΔⵠᐃ(ΔⵠⲆΔⵠΔᐃᐃᐃ) {
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], ΔⲆⲆᐃᐃ + "login?token=" + ΔⲆᐃᐃᐃ + "&type=" + ᐃⲆⲆᐃΔⵠⵠ + (ⲆΔⵠⲆⲆ ? "&userId=" + ⲆΔⵠⲆⲆ["userId"] + "&userInfo=" + ⲆΔⵠⲆⲆ["userInfo"] : ""));
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[6]](Δ[192], Δ[43]);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
			if (4 === this[ᐃⲆᐃᐃᐃᐃⵠ[294]] && this.status === 200) {
				ⵠΔⲆᐃ.responseText !== "0" && ΔⵠⲆΔⵠΔᐃᐃᐃ(JSON.parse(ⵠΔⲆᐃ.responseText))
			}
		};
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
	}

	function ⲆΔⲆⵠᐃⵠᐃ(ΔⲆⲆᐃΔⲆΔⵠΔ, ⲆⵠⵠΔⲆ) {
		if (ⵠⵠΔⵠ.ΔⲆΔⵠᐃ > 0) return;
		if (ⵠⵠΔⵠ.ⲆⵠⵠΔⲆ < ⲆⵠⵠΔⲆ) {
			ⵠⵠΔⵠ.ᐃⲆⲆⵠ(ⵠⵠΔⵠ.ⲆⲆΔΔⲆ);
			return
		}
		ⵠⵠΔⵠ.ΔⲆΔⵠᐃ = 2;
		ⵠⵠΔⵠ.ⲆᐃⲆⵠΔᐃᐃ = ᐃⲆⵠΔ;
		ⵠⵠΔⵠ.ΔⲆⵠᐃΔΔᐃ = 100;
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], ΔⲆⲆᐃᐃ + "buySpin?token=" + ΔⲆᐃᐃᐃ + Δ[96] + ᐃΔⵠⲆᐃ + "&spin=" + ΔⲆⲆᐃΔⲆΔⵠΔ);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[6]](Δ[192], Δ[43]);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
			if (4 == this[ᐃⲆᐃᐃᐃᐃⵠ[294]] && 200 == this.status) {
				if ("0" !== ⵠΔⲆᐃ.responseText) {
					var ⲆⵠΔᐃ = JSON.parse(ⵠΔⲆᐃ.responseText);
					ⵠⵠΔⵠ.ΔΔⲆΔⲆΔⵠⲆⵠ(Ⲇⵠᐃⵠ * (ⲆⵠΔᐃ["rand"] * Math.PI), ⲆⵠΔᐃ["type"], ⲆⵠΔᐃ[Δ[235]]);
					ⵠⵠΔⵠ.ⲆⵠⵠΔⲆ -= ⲆⵠⵠΔⲆ
				} else ⵠⵠΔⵠ.ΔⲆΔⵠᐃ = ᐃⲆⵠΔ
			}
		};
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
	}

	function ⲆΔΔⵠΔᐃⵠᐃⵠΔⵠ() {
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], ΔⲆⲆᐃᐃ + "getScore?userid=" + ᐃΔⵠⲆᐃ);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[6]](Δ[192], Δ[43]);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
			if (this[ᐃⲆᐃᐃᐃᐃⵠ[294]] == 4 && this.status == 200) {
				if ("0" !== ⵠΔⲆᐃ.responseText) var ⲆⵠΔᐃ = JSON.parse(ⵠΔⲆᐃ.responseText)
			}
		};
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
	}

	function ⵠⲆⲆⲆΔΔᐃⲆΔ() {
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], ΔⲆⲆᐃᐃ + "claimBread?userid=" + ᐃΔⵠⲆᐃ);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[6]](Δ[192], Δ[43]);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
			if (this[ᐃⲆᐃᐃᐃᐃⵠ[294]] == ⵠⲆⲆΔΔ && this.status == 200) {
				if (ⵠΔⲆᐃ.responseText !== "0") {
					var ⲆⵠⵠΔⲆ = Number(ⵠΔⲆᐃ.responseText);
					if (!isNaN(ⲆⵠⵠΔⲆ)) ⵠⵠΔⵠ.ⲆⵠⵠΔⲆ = ⲆⵠⵠΔⲆ
				}
			}
		};
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
	}

	function ΔᐃⲆⲆⵠΔΔᐃⵠ() {
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], ΔⲆⲆᐃᐃ + "rebootServer?token=" + ΔⲆᐃᐃᐃ + Δ[96] + ᐃΔⵠⲆᐃ);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[6]](Δ[192], Δ[43]);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
			if (4 === this[ᐃⲆᐃᐃᐃᐃⵠ[294]] && 200 === this.status) {
				if (ⵠΔⲆᐃ.responseText !== "0") {
					const ⲆᐃᐃᐃΔ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[45]).value.split(Δ[186]);
					location[ᐃⲆᐃᐃᐃᐃⵠ[216]] = ⲆⲆΔⵠⲆⵠΔ + "?server=" + ⲆᐃᐃᐃΔ[1] + Δ[242] + ⲆᐃᐃᐃΔ[ⵠᐃΔ]
				}
			}
		};
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
	}

	function ΔΔⲆᐃᐃⲆᐃ() {
		return 7637949
	}
	const ᐃⲆᐃⵠΔΔⲆ = 390732;
	const ᐃⲆΔᐃⲆⵠⵠΔᐃ = ΔΔⲆᐃᐃⲆᐃ + " let ⵠᐃⵠᐃⵠⵠⲆ = ΔΔⲆᐃᐃⲆᐃ () * 6932457; return ⵠᐃⵠᐃⵠⵠⲆ;";
	const ᐃⲆⵠⵠⲆᐃΔⲆᐃ = new Function(ᐃⲆΔᐃⲆⵠⵠΔᐃ);
	try {
		ᐃⲆⵠⵠⲆᐃΔⲆᐃ(ᐃⲆᐃⵠΔΔⲆ)
	} catch (e) {
		const ᐃⲆᐃⵠΔΔⲆ = ⵠΔΔⲆⲆⵠᐃᐃⵠ.setInterval;
		const ᐃⲆΔᐃⲆⵠⵠΔᐃ = ᐃⲆᐃⵠΔΔⲆ;
		const ⵠᐃⵠᐃⵠⵠⲆ = function() {
			ᐃⲆᐃⵠΔΔⲆ(ⵠᐃⵠᐃⵠⵠⲆ, 4030);
			ᐃⲆΔᐃⲆⵠⵠΔᐃ(ⵠᐃⵠᐃⵠⵠⲆ, 5991)
		};
		ⵠᐃⵠᐃⵠⵠⲆ()
	}

	function ΔΔᐃⲆⵠᐃᐃ(ⵠᐃⵠΔⲆⲆⲆⲆᐃ, ⲆⵠⵠΔⲆ) {
		if (ⲆⵠⵠΔⲆ > ⵠⵠΔⵠ.ⲆⵠⵠΔⲆ) {
			ⵠⵠΔⵠ.ᐃⲆⲆⵠ(ⵠⵠΔⵠ.ⲆⲆΔΔⲆ);
			return
		}
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], ΔⲆⲆᐃᐃ + "buyKit?token=" + ΔⲆᐃᐃᐃ + Δ[96] + ᐃΔⵠⲆᐃ + "&kit=" + ⵠᐃⵠΔⲆⲆⲆⲆᐃ);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[6]](Δ[192], Δ[43]);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
			if (ᐃᐃⲆⵠ == this[ᐃⲆᐃᐃᐃᐃⵠ[294]] && 200 == this.status) {
				if (ⵠΔⲆᐃ.responseText !== "0") {
					var ⲆⵠΔᐃ = JSON.parse(ⵠΔⲆᐃ.responseText);
					ⵠⵠΔⵠ.ⲆⵠⵠΔⲆ -= ⲆⵠⵠΔⲆ;
					ⵠⵠΔⵠ.ᐃⲆⲆΔⵠ = Date.now() + Number(ⲆⵠΔᐃ)
				}
			}
		};
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
	}

	function ⵠΔᐃᐃΔᐃⵠⵠⵠ() {
		if (ᐃᐃΔΔⵠⲆᐃ === ᐃⲆⲆᐃΔⵠⵠ && ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[416]] && ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[416]]["getUserID"]()) ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[416]]["logout"]();
		if (ⲆⲆΔΔⲆᐃⵠ === ᐃⲆⲆᐃΔⵠⵠ && ⲆⲆᐃΔΔ !== undefined) {
			ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[163]][Δ[341]]["getAuthInstance"]()["signOut"]();
			ⲆⲆᐃΔΔ = ΔᐃᐃⵠⲆ
		}
		ᐃΔⵠⲆᐃ = undefined;
		ΔⲆᐃᐃᐃ = ΔⵠⲆᐃᐃ;
		ᐃⲆⲆᐃΔⵠⵠ = ⲆⲆΔᐃⵠ;
		ⵠⵠΔⵠ.ᐃⲆⲆΔⵠ = ⵠΔΔᐃ;
		ⵠⵠΔⵠ.ⲆⵠⵠΔⲆ = Δⵠⵠ;
		ⵠⵠΔⵠ.ᐃⲆᐃⵠⲆ = Δⵠⵠ;
		ⵠⵠΔⵠ.ΔΔΔΔⲆⵠᐃ();
		ⵠᐃᐃⲆⵠⲆⲆⵠΔ()
	}

	function ⵠᐃⵠΔΔⵠᐃᐃⲆ() {
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], ΔⲆⲆᐃᐃ + "restartServer?token=" + ΔⲆᐃᐃᐃ + Δ[96] + ᐃΔⵠⲆᐃ);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[6]](Δ[192], Δ[43]);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
			if (this[ᐃⲆᐃᐃᐃᐃⵠ[294]] === 4 && 200 === this.status) {
				if (ⵠΔⲆᐃ.responseText !== "0") {
					const ⲆᐃᐃᐃΔ = document[ᐃⲆᐃᐃᐃᐃⵠ[157]](Δ[45]).value.split(Δ[186]);
					location[ᐃⲆᐃᐃᐃᐃⵠ[216]] = ⲆⲆΔⵠⲆⵠΔ + "?server=" + ⲆᐃᐃᐃΔ[1] + Δ[242] + ⲆᐃᐃᐃΔ[0]
				}
			}
		};
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
	}

	function ᐃᐃᐃⲆⲆⵠᐃΔⲆ() {
		try {
			if (ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[416]]) {
				if (ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[416]]["getUserID"]()) {
					ᐃΔⵠⲆᐃ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[416]]["getUserID"]();
					ΔⲆᐃᐃᐃ === undefined && ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[416]]["getLoginStatus"]((function() {
						ᐃⲆⲆᐃΔⵠⵠ = ᐃᐃΔΔⵠⲆᐃ;
						ΔⲆᐃᐃᐃ = ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[416]][Δ[171]]()["accessToken"];
						ⵠΔΔⲆⲆⵠᐃᐃⵠ.ⵠⲆᐃⲆΔᐃⵠ(ᐃΔⵠⲆᐃ)
					}))
				}
			}
		} catch (Δⵠⵠᐃ) {}
		try {
			ᐃΔⵠⲆᐃ = ⲆⲆᐃΔΔ["getBasicProfile"]()["getId"]()
		} catch (Δⵠⵠᐃ) {}
	}

	function ᐃⵠΔᐃⲆⲆⵠ(ΔⲆΔⵠ) {
		if (!ᐃΔⵠⲆᐃ) return;
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[180]](Δ[387], ΔⲆⲆᐃᐃ + "xsolla?userid=" + ᐃΔⵠⲆᐃ + "&item=" + ΔⲆΔⵠ);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[6]](Δ[192], Δ[43]);
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[88]] = function() {
			if (4 == this[ᐃⲆᐃᐃᐃᐃⵠ[294]] && 200 == this.status) {
				"0" !== ⵠΔⲆᐃ.responseText && (ⵠΔᐃᐃᐃΔᐃ["access_token"] = ⵠΔⲆᐃ.responseText, ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[255]][Δ[231]](ⵠΔᐃᐃᐃΔᐃ), ⵠΔΔⲆⲆⵠᐃᐃⵠ[Δ[ᐃⵠⲆᐃⲆ]]["open"]())
			}
		};
		ⵠΔⲆᐃ[ᐃⲆᐃᐃᐃᐃⵠ[268]]()
	}
	const saveSettings = () => {
		for (property in Settings) {
			localStorage.setItem(property + "exclusivev3", JSON.stringify(Settings[property]))
		}
	};
	const setKeybind = property => {
		if (Settings && Settings[property] && Settings[property].key) {
			Settings[property].key = "Press Any Key";
			document.addEventListener("keydown", (function setbind(event) {
				event.code === "Escape" ? Settings[property].key = "NONE" : Settings[property].key = event.code;
				saveSettings();
				document.removeEventListener("keydown", setbind)
			}))
		}
	};
	const getUserChatProperty = () => {
		if (!window.user) return;
		const keys = Object.keys(window.user);
		return window.user[keys[43]]
	};
	const getUserGhostProperty = () => {
		if (!window.user) return;
		const keys = Object.keys(window.user);
		return window.user[keys[8]]
	};
	const getUserTerminalProperty = () => {
		if (!window.user) return;
		const keys = Object.keys(window.user);
		return window.user[keys[42]]
	};
	const getUserTeamProperty = () => {
		if (!window.user) return;
		const keys = Object.keys(window.user);
		return window.user[keys[21]]
	};
	const getUserIdProperty = () => {
		if (!window.user) return;
		const keys = Object.keys(window.user);
		return window.user[keys[16]]
	};
	const getUserGaugesProperty = () => {
		if (!window.user) return;
		const keys = Object.keys(window.user);
		return window.user[keys[30]]
	};
	const getUserLifeGaugesProperty = userGauges => {
		if (!userGauges) return;
		const keys = Object.keys(userGauges);
		return userGauges[keys[1]]
	};
	const getUserHungryGaugesProperty = userGauges => {
		if (!userGauges) return;
		const keys = Object.keys(userGauges);
		return userGauges[keys[2]]
	};
	const getUserThirstGaugesProperty = userGauges => {
		if (!userGauges) return;
		const keys = Object.keys(userGauges);
		return userGauges[keys[3]]
	};
	const getUserWarmGaugesProperty = userGauges => user.ᐃⵠⲆᐃ.c;
	const getUserAliveProperty = () => {
		if (!window.user) return;
		const keys = Object.keys(window.user);
		return window.user[keys[10]]
	};
	const getUserCamProperty = () => {
		if (!window.user) return;
		const keys = Object.keys(window.user);
		return window.user[keys[28]]
	};
	const getUserUidProperty = () => {
		if (!window.user) return;
		const keys = Object.keys(window.user);
		return window.user[keys[17]]
	};
	const getUserInventoryProperty = () => {
		if (!window.user) return;
		const keys = Object.keys(window.user);
		return window.user[keys[35]]
	};
	const getUserInventoryNProperty = userInventory => {
		if (!userInventory) return;
		const keys = Object.keys(userInventory);
		return userInventory[keys[3]]
	};
	const getUserInventoryItemsAmountProperty = userInventory => {
		if (!userInventory) return;
		const keys = Object.keys(userInventory);
		return userInventory[keys[3]]
	};
	const getWorldUnitsProperty = () => {
		if (!window.world) return;
		const keys = Object.keys(window.world);
		return window.world[keys[5]]
	};
	const getWorldFastUnitsProperty = () => {
		if (!window.world) return;
		const keys = Object.keys(window.world);
		return window.world[keys[6]]
	};
	const getWorldPlayersProperty = () => {
		if (!window.world) return;
		const keys = Object.keys(window.world);
		return window.world[keys[4]]
	};
	const getPlayerNicknameProperty = player => {
		if (!player) return;
		const keys = Object.keys(player);
		return player[keys[0]]
	};
	const getClientWebSocketProperty = () => {
		if (!window.client) return;
		const keys = Object.keys(window.client);
		return window.client[keys[0]]
	};
	const getClientStealTokenMethod = () => {
		if (!window.client) return;
		const keys = Object.keys(window.client);
		return window.client[keys[137]]
	};
	const getKeyboardLeftMethod = () => {
		if (!window.keyboard) return;
		const keys = Object.keys(window.keyboard);
		return window.keyboard[keys[31]]
	};
	const getKeyboardRightMethod = () => {
		if (!window.keyboard) return;
		const keys = Object.keys(window.keyboard);
		return window.keyboard[keys[32]]
	};
	const getKeyboardBottomMethod = () => {
		if (!window.keyboard) return;
		const keys = Object.keys(window.keyboard);
		return window.keyboard[keys[34]]
	};
	const getKeyboardTopMethod = () => {
		if (!window.keyboard) return;
		const keys = Object.keys(window.keyboard);
		return window.keyboard[keys[33]]
	};

	function AutoFeed() {
		if (Settings.AutoFeed.enabled && autoFeedIndex !== 0) {
			const gauges = getUserGaugesProperty();
			const hungry = getUserHungryGaugesProperty(gauges);
			const thirst = getUserThirstGaugesProperty(gauges);
			const socket = getClientWebSocketProperty();
			if (socket) {
				if (thirst <= .5) {
					if (canSelect(127)) {
						socket.send(JSON.stringify([Packets.Equip, 127]))
					}
				}
				if (hungry <= .6) {
					for (const food of [110, 117, 189, 205, 207, 192]) {
						if (canSelect(food)) {
							client.ping();
							client.ⵠᐃⲆᐃⲆ(food);
							break
						}
					}
				}
			}
		}
	}
	const initListeners = () => {
		document.addEventListener("keydown", (event => {
			if (getUserTerminalProperty().open || getUserChatProperty().open) return;
			for (const property in Settings) {
				if (event.code === Settings[property].key && Settings[property].keyMode === "hold") {
					Settings[property].enabled = true
				}
			}
		}));
		document.addEventListener("keyup", (event => {
			if (getUserTerminalProperty().open || getUserChatProperty().open) return;
			for (const property in Settings) {
				if (event.code === Settings[property].key && Settings[property].keyMode === "hold") {
					Settings[property].enabled = false
				}
			}
		}));
		document.addEventListener("keypress", (event => {
			if (getUserTerminalProperty().open || getUserChatProperty().open) return;
			for (const property in Settings) {
				if (event.code === Settings[property].key && Settings[property].keyMode === "press") {
					Settings[property].enabled = !Settings[property].enabled;
					if (property == "Spectator" && !Settings[property].enabled && getClientWebSocketProperty()) getClientWebSocketProperty().send(JSON.stringify([Packets.Focus]))
				}
			}
		}))
	};
	const isAlly = i => getUserTeamProperty().includes(i.pid) || getUserIdProperty() == i.pid;
	window.isAlly = isAlly;
	const distance = (a, b) => Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
	window.distance = distance;
	const canSelect = i => getUserInventoryNProperty(getUserInventoryProperty())[i];
	window.canSelect = canSelect;
	const player = i => getPlayerNicknameProperty(getWorldPlayersProperty()[i.pid]);
	window.player = player;
	window.getUserInventoryProperty = getUserInventoryProperty;
	const holdingGearType = i => {
		if (!i || i.right == undefined) return;
		switch (i.right) {
			case 57:
			case 0:
			case 5:
			case 6:
			case 30:
			case 19:
			case 62:
			case 63:
			case 22:
				return "SWORD";
			case 12:
			case 13:
			case 14:
			case 15:
			case 33:
			case 34:
			case 18:
			case 16:
			case 17:
				return "SPEAR";
			case 9:
				return "PIRATE"
		}
	};
	const calcAngle = (e, o, i) => e && o ? i ? Math.atan2(o.r.y - e.r.y, o.r.x - e.r.x) : Math.atan2(o.y - e.y, o.x - e.x) : null;
	const findTarget = (a, b, c) => {
		for (const p of b) {
			if (!isAlly(p) && distance(a, p) <= c && (a.ⲆⵠⲆⵠⲆᐃⲆ == 1 && p.ⲆⵠⲆⵠⲆᐃⲆ == 1 || p.ⲆⵠⲆⵠⲆᐃⲆ == 0 && a.ⲆⵠⲆⵠⲆᐃⲆ == 0)) return p
		}
	};
	const selectTool = (tool1, tool2, me, socket) => {
		if (canSelect(tool1)) {
			if (me.right !== tool1) {
				socket.send(JSON.stringify([Packets.Equip, tool1]))
			}
		} else if (canSelect(tool2)) {
			if (me.right !== tool2) {
				socket.send(JSON.stringify([Packets.Equip, tool2]))
			}
		}
	};
	const angleCalculator = (a, b) => {
		let angle;
		if (a + b > 254) angle = a + b - 254;
		if (a + b < 0) angle = 254 + (a + b);
		if (a + b >= 0 && a + b < 254) angle = a + b;
		return angle
	};
	const initExclusive = () => {
		setTimeout(initListeners, 5e3);
		const gui = new guify({
			title: ⲆⵠⲆⲆⲆᐃⲆΔⵠΔΔⲆ,
			align: "right",
			width: 600,
			opacity: .67,
			barMode: "none",
			theme: {
				colors: {
					panelBackground: "rgb(0,0,0)",
					componentBackground: "rgb(3, 16, 34)",
					componentForeground: "red",
					textPrimary: "red",
					textSecondary: "darkorange",
					textHover: "black"
				},
				font: {
					fontFamily: "Baloo Paaji",
					fontSize: "20px",
					fontWeight: "1"
				}
			}
		});
		delete window.guify;
		gui.Register([{
			type: "folder",
			label: "Visuals",
			open: false
		}, {
			type: "folder",
			label: "Miscellaneous",
			open: false
		}, {
			type: "folder",
			label: "Keybinds",
			open: false
		}, {
			type: "folder",
			label: "Auto Steal",
			open: false
		}, {
			type: "folder",
			label: "Auto Spike",
			open: false
		}, {
			type: "folder",
			label: "Smart Craft",
			open: false
		}, {
			type: "folder",
			label: "Auto Farm",
			open: false
		}, {
			type: "folder",
			label: "Spectator",
			open: false
		}, {
			type: "folder",
			label: "Others",
			open: false
		}]);
		gui.Register([{
			type: "checkbox",
			label: "PlayerTracers",
			object: Settings.PlayerTracers,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "KrakenTracers",
			object: Settings.KrakenTracers,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "SandwormTracers",
			object: Settings.SandwormTracers,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ShowJoinLeaves",
			object: Settings.ShowJoinLeaves,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "PlayerOnTop",
			object: Settings.PlayerOnTop,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "BoxOnTop",
			object: Settings.BoxOnTop,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ColoredSpikes",
			object: Settings.ColoredSpikes,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "BiggerZoom",
			object: Settings.BiggerZoom,
			property: "enabled",
			onChange() {
				saveSettings();
				alert("Refresh page")
			}
		}, {
			type: "checkbox",
			label: "Debugger",
			object: Settings.Debugger,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ListEnabledHacks",
			object: Settings.ListEnabledHacks,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "Timers",
			object: Settings.Timers,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ShowHP",
			object: Settings.ShowHP,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ExtractorInfo",
			object: Settings.ExtractorInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "WindmillInfo",
			object: Settings.WindmillInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "OvenInfo",
			object: Settings.OvenInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "TotemInfo",
			object: Settings.TotemInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "FurnaceInfo",
			object: Settings.FurnaceInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "MachineInfo",
			object: Settings.MachineInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ChestInfo",
			object: Settings.ChestInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "BoxInfo",
			object: Settings.BoxInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "WeatherInfo",
			object: Settings.WeatherInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ShowHoodNames",
			object: Settings.ShowHoodNames,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "NoFog",
			object: Settings.NoFog,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "Roofs",
			object: Settings.Roofs,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "Vehicle Xray",
			object: Settings.Fly,
			property: "e",
			onChange: data => {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "Xray",
			object: Settings.Xray,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "Roofs Opacity",
			object: Settings,
			property: "RoofsOpacity",
			min: .05,
			step: .05,
			max: .95,
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "Xray Opacity",
			object: Settings,
			property: "XrayOpacity",
			min: .05,
			step: .05,
			max: .95,
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "ColoredSpikes Textures",
			object: Settings.ColoredSpikes,
			property: "textures",
			options: ["1", "2"],
			onChange() {
				saveSettings();
				switchColoredSpikesTextures()
			}
		}], {
			folder: "Visuals"
		});
		gui.Register([{
			type: "checkbox",
			label: "AutoFeed",
			object: Settings.AutoFeed,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoBook",
			object: Settings.AutoBook,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoCraft",
			object: Settings.AutoCraft,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoRecycle",
			object: Settings.AutoRecycle,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoRespawn",
			object: Settings.AutoRespawn,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoIce",
			object: Settings.AutoIce,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoTotem",
			object: Settings.AutoTotem,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoCrown",
			object: Settings.AutoCrown,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoPutRed",
			object: Settings.PutReidite,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AimBot",
			object: Settings.AimBot,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoGreenCrown",
			object: Settings.AutoGreenCrown,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoBridge",
			object: Settings.AutoBridge,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoBuild",
			object: Settings.AutoBuild,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoSeed",
			object: Settings.AutoSeed,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoSeed with G",
			object: Settings,
			property: "AutoSeedG",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoBreadTake",
			object: Settings.AutoBreadTake,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoBreadPut",
			object: Settings.AutoBreadPut,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoExtractorTake",
			object: Settings.AutoExtractorTake,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoExtractorPut",
			object: Settings.AutoExtractorPut,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "AutoExtractorPut Max",
			object: Settings,
			min: 1,
			max: 255,
			step: 1,
			property: "AutoExtractorPutMax",
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "AutoBreadPut Max",
			object: Settings,
			min: 1,
			max: 31,
			step: 1,
			property: "BreadPutMax",
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "AutoWindmillPut Max",
			object: Settings,
			min: 1,
			max: 255,
			step: 1,
			property: "WindmillPutMax",
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoBuild Build",
			object: Settings.AutoBuild,
			property: "build",
			options: ["Roofs", "Bridges", "Plots"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSeed Seed",
			object: Settings.AutoSeed,
			property: "seed",
			options: ["Auto", "Berry", "Wheat", "Pumpkin", "Thornbush", "Aloe", "Watermelon", "Garlic", "Carrot", "Tomato"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "Put that much in chest",
			min: 10,
			max: 200,
			step: 1,
			object: Settings,
			property: "PutInChest",
			onChange: data => {
				saveSettings()
			}
		}], {
			folder: "Miscellaneous"
		});
		for (const property in Settings) {
			if (Settings[property].pushToBinds) {
				gui.Register([{
					type: "display",
					label: `${property} Key`,
					object: Settings[property],
					property: "key"
				}, {
					type: "button",
					label: `Set ${property} Key`,
					action() {
						setKeybind(property)
					}
				}], {
					folder: "Keybinds"
				})
			}
		}
		gui.Register([{
			type: "checkbox",
			label: "AutoSteal",
			object: Settings.AutoSteal,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoUnlock",
			object: Settings,
			property: "AutoUnlock",
			onChange() {
				saveSettings()
			}
		}, {
			type: "display",
			label: "AutoSteal Key",
			object: Settings.AutoSteal,
			property: "key"
		}, {
			type: "button",
			label: "Set AutoSteal Key",
			action() {
				setKeybind("AutoSteal")
			}
		}], {
			folder: "Auto Steal"
		});
		gui.Register([{
			type: "display",
			label: "AutoSpike Key",
			object: Settings.AutoSpike,
			property: "key"
		}, {
			type: "button",
			label: "Set AutoSpike Key",
			action() {
				setKeybind("AutoSpike")
			}
		}, {
			type: "checkbox",
			label: "AutoSpike 2",
			object: Settings.AutoSpike,
			property: "mode",
			onChange() {
				saveSettings()
			}
		}, {
			type: "display",
			label: "AutoWall Key",
			object: Settings.AutoWall,
			property: "key"
		}, {
			type: "button",
			label: "Set AutoWall Key",
			action() {
				setKeybind("AutoWall")
			}
		}, {
			type: "checkbox",
			label: "AutoWall 2",
			object: Settings.AutoWall,
			property: "mode",
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 1",
			object: Settings.AutoSpike.priority,
			property: "0",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 2",
			object: Settings.AutoSpike.priority,
			property: "1",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 3",
			object: Settings.AutoSpike.priority,
			property: "2",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 4",
			object: Settings.AutoSpike.priority,
			property: "3",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 5",
			object: Settings.AutoSpike.priority,
			property: "4",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 6",
			object: Settings.AutoSpike.priority,
			property: "5",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 7",
			object: Settings.AutoSpike.priority,
			property: "6",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}], {
			folder: "Auto Spike"
		});
		gui.Register([{
			type: "checkbox",
			label: "SmartCraft",
			object: Settings.SmartCraft,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "display",
			label: "SmartCraft Key",
			object: Settings.SmartCraft,
			property: "key"
		}, {
			type: "button",
			label: "Set SmartCraft Key",
			action() {
				setKeybind("SmartCraft")
			}
		}, {
			type: "select",
			label: "SmartCraft Select",
			options: ["REIDITE_SPIKE", "AMETHYST_SPIKE", "DIAMOND_SPIKE", "GOLD_SPIKE", "STONE_SPIKE", "REIDITE_WALL", "AMETHYST_WALL", "DIAMOND_WALL", "GOLD_WALL", "STONE_WALL"],
			object: Settings.SmartCraft,
			property: "select",
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "CraftHowMuch",
			object: Settings.SmartCraft,
			property: "hm",
			min: 1,
			max: 500,
			step: 1,
			onChange() {
				saveSettings()
			}
		}], {
			folder: "Smart Craft"
		});
		gui.Register([{
			type: "checkbox",
			label: "Start AutoFarm",
			object: Settings.Autofarm,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoWater",
			object: Settings.Autofarm,
			property: "water",
			onChange() {
				saveSettings()
			}
		}, {
			type: "button",
			label: "Top left of farm",
			action() {
				const me = getWorldFastUnitsProperty()[getUserUidProperty()];
				if (me) {
					Settings.Autofarm.x = me.x;
					Settings.Autofarm.y = me.y
				}
				saveSettings()
			}
		}, {
			type: "button",
			label: "Bottom right of farm",
			action() {
				const me = getWorldFastUnitsProperty()[getUserUidProperty()];
				if (me) {
					Settings.Autofarm.xx = me.x;
					Settings.Autofarm.yy = me.y
				}
				saveSettings()
			}
		}, {
			type: "button",
			label: "Safe Point",
			action() {
				const me = getWorldFastUnitsProperty()[getUserUidProperty()];
				if (me) {
					Settings.Autofarm.sx = me.x;
					Settings.Autofarm.sy = me.y
				}
				saveSettings()
			}
		}, {
			type: "display",
			label: "X",
			object: Settings.Autofarm,
			property: "x"
		}, {
			type: "display",
			label: "Y",
			object: Settings.Autofarm,
			property: "y"
		}, {
			type: "display",
			label: "X1",
			object: Settings.Autofarm,
			property: "xx"
		}, {
			type: "display",
			label: "Y1",
			object: Settings.Autofarm,
			property: "yy"
		}, {
			type: "display",
			label: "SX",
			object: Settings.Autofarm,
			property: "sx"
		}, {
			type: "display",
			label: "SY",
			object: Settings.Autofarm,
			property: "sy"
		}], {
			folder: "Auto Farm"
		});
		gui.Register([{
			type: "checkbox",
			label: "Spectator",
			object: Settings.Spectator,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "Spectator Speed",
			min: .05,
			step: .05,
			max: 1,
			object: Settings.Spectator,
			property: "speed",
			onChange() {
				saveSettings()
			}
		}, {
			type: "display",
			label: "Spectator Key",
			object: Settings.Spectator,
			property: "key"
		}, {
			type: "button",
			label: "Set Spectator Key",
			action() {
				setKeybind("Spectator")
			}
		}], {
			folder: "Spectator"
		});
		gui.Register([{
			type: "checkbox",
			label: "Token Joiner Enabled",
			object: Settings.TokenJoiner,
			property: "enabled",
			action() {
				UtilsUI.saveSettings()
			}
		}, {
			type: "button",
			label: "Join Token",
			action() {
				if (Settings.TokenJoiner.enabled) {
					const keys = Object.keys(window.user);
					if (window.token !== undefined && window.token_id !== undefined && user && client) {
						window.user[keys[14]] = window.token;
						window.user[keys[15]] = window.token_id;
						const method = getClientStealTokenMethod();
						method && method.call(window.client)
					}
				}
			}
		}, {
			type: "text",
			label: "Token Joiner Token",
			object: Settings.TokenJoiner,
			property: "token",
			onChange(t) {
				window.token = t;
				saveSettings()
			}
		}, {
			type: "text",
			label: "Token Joiner TokenID",
			object: Settings.TokenJoiner,
			property: "token_id",
			onChange(t) {
				window.token_id = t;
				saveSettings()
			}
		}, {
			type: "button",
			label: "Go Lobby",
			action() {
				const method = getClientStealTokenMethod();
				method && method.call(window.client)
			}
		}, {
			type: "button",
			label: "Copy Token & TokenID",
			action() {
				const me = getWorldFastUnitsProperty()[getUserUidProperty()];
				const keys = Object.keys(window.user);
				const token = window.user[keys[14]];
				const tokenid = window.user[keys[15]];
				window.prompt("Press CTRL C", `||\`\`\`ts\nNickname: ${me.ΔⵠⵠΔ.ⲆⵠΔⵠΔ}\nToken: ${token}\nTokenID: ${tokenid}\n\`\`\`||`)
			}
		}], {
			folder: "Others"
		});
		const AutoIce = () => {
			if (Settings.AutoIce.enabled && autoIceIndex !== 0) {
				const gauges = getUserGaugesProperty();
				const warm = getUserWarmGaugesProperty(gauges);
				const socket = getClientWebSocketProperty();
				if (socket) {
					if (warm <= .4) {
						if (canSelect(142)) {
							socket.send(JSON.stringify([Packets.Equip, 142]))
						}
					}
				}
			}
		};
		setInterval(AutoIce, 250);
		window.engine = function() {
			requestAnimationFrame(window.engine);
			if (!getUserAliveProperty()) return;
			const worldUnits = getWorldUnitsProperty();
			const fastUnits = getWorldFastUnitsProperty();
			const uid = getUserUidProperty();
			const team = getUserTeamProperty();
			const socket = getClientWebSocketProperty();
			const cam = getUserCamProperty();
			const left = getKeyboardLeftMethod().bind(window.keyboard)();
			const right = getKeyboardRightMethod().bind(window.keyboard)();
			const bottom = getKeyboardBottomMethod().bind(window.keyboard)();
			const top = getKeyboardTopMethod().bind(window.keyboard)();
			if (Settings.Spectator.enabled) {
				if (left) cam.x += Settings.Spectator.speed * 100;
				if (right) cam.x -= Settings.Spectator.speed * 100;
				if (bottom) cam.y -= Settings.Spectator.speed * 100;
				if (top) cam.y += Settings.Spectator.speed * 100
			}
			if (!worldUnits) return;
			if (!fastUnits) return;
			if (!uid) return;
			const me = fastUnits[uid];
			window.ME = me;
			if (!me) return;
			const players = worldUnits[0];
			const chests = worldUnits[11];
			const extractors = [worldUnits[24], worldUnits[25], worldUnits[26], worldUnits[27], worldUnits[28]];
			const ovens = worldUnits[34];
			const totems = worldUnits[29];
			const windmills = worldUnits[32];
			const resurrections = worldUnits[22];
			const stamp = Date.now();
			const pi2 = Math.PI * 2;
			const angle = Math.floor(255 * ((me.angle + pi2) % pi2) / pi2);
			if (autoFeedIndex == 0) autoFeedIndex = 1;
			if (autoIceIndex == 0) autoIceIndex = 1;
			if (socket) {
				if (Settings.AutoSteal.enabled) {
					if (stamp - Stamps.AutoSteal > 50) {
						chests.forEach((chest => {
							if (distance(chest, me) <= 300 && chest.action) {
								if (chest.lock && Settings.AutoUnlock && !isAlly(chest)) socket.send(JSON.stringify([Packets.UnlockChest, chest.pid, chest.id]));
								socket.send(JSON.stringify([Packets.TakeChest, chest.pid, chest.id]))
							}
						}));
						ovens.forEach((oven => {
							if ((oven.info & 31744) >> 10 && distance(oven, me) <= 300) {
								socket.send(JSON.stringify([Packets.TakeOven, oven.pid, oven.id]))
							}
						}));
						windmills.forEach((windmill => {
							if ((windmill.info & 65280) >> 8 && distance(windmill, me) <= 300) {
								socket.send(JSON.stringify([Packets.TakeWindmill, windmill.pid, windmill.id]))
							}
						}));
						for (let ex = 0; ex < extractors.length; ex++) {
							extractors[ex].forEach((extractor => {
								if ((extractor.info & 65280) >> 8 && distance(extractor, me) <= 300) {
									socket.send(JSON.stringify([Packets.TakeExtractor, extractor.pid, extractor.id, extractor.type]))
								}
							}))
						}
						Stamps.AutoSteal = stamp
					}
				}
				if (Settings.AutoExtractorTake.enabled) {
					if (stamp - Stamps.AutoExtractorTake > 50) {
						for (let ex = 0; ex < extractors.length; ex++) {
							extractors[ex].forEach((extractor => {
								if ((extractor.info & 65280) >> 8 && distance(extractor, me) <= 300) {
									socket.send(JSON.stringify([Packets.TakeExtractor, extractor.pid, extractor.id, extractor.type]))
								}
							}))
						}
						Stamps.AutoExtractorTake = stamp
					}
				}
				if (Settings.AutoExtractorPut.enabled) {
					if (stamp - Stamps.AutoExtractorPut > 250) {
						for (let ex = 0; ex < extractors.length; ex++) {
							extractors[ex].forEach((extractor => {
								if ((extractor.info & 255) !== Settings.AutoExtractorPutMax && distance(extractor, me) <= 300) {
									socket.send(JSON.stringify([Packets.PutExtractor, Settings.AutoExtractorPutMax - (extractor.info & 255), extractor.pid, extractor.id, extractor.type]))
								}
							}))
						}
						Stamps.AutoExtractorPut = stamp
					}
				}
				if (Settings.AutoBreadTake.enabled) {
					if (stamp - Stamps.AutoBreadTake > 50) {
						ovens.forEach((oven => {
							if ((oven.info & 31744) >> 10 && distance(oven, me) <= 300) {
								socket.send(JSON.stringify([Packets.TakeOven, oven.pid, oven.id]))
							}
						}));
						windmills.forEach((windmill => {
							if ((windmill.info & 65280) >> 8 && distance(windmill, me) <= 300) {
								socket.send(JSON.stringify([Packets.TakeWindmill, windmill.pid, windmill.id]))
							}
						}));
						Stamps.AutoBreadTake = stamp
					}
				}
				if (Settings.PutReidite.enabled) {
					if (stamp - Stamps.AutoRed > 8) {
						chests.forEach((chest => {
							if (canSelect(202) || canSelect(123)) {
								if (distance(chest, me) <= 300) {
									socket.send(JSON.stringify([Packets.ChestPut, 202, 10, chest.pid, chest.id]));
									socket.send(JSON.stringify([Packets.ChestPut, 111, 10, chest.pid, chest.id]))
								}
							}
						}))
					}
					Stamps.AutoRed = stamp
				}
				if (Settings.SmartCraft.enabled) {
					if (stamp - Stamps.AutoCraft > 100) {
						let craftIds = [];
						let checkId;
						switch (Settings.SmartCraft.select) {
							case "REIDITE_SPIKE":
								craftIds.push(55, 56, 57, 58, 59, 60, 72);
								checkId = 219;
								break;
							case "AMETHYST_SPIKE":
								craftIds.push(55, 56, 57, 58, 59, 71);
								checkId = 123;
								break;
							case "DIAMOND_SPIKE":
								craftIds.push(55, 56, 57, 58, 70);
								checkId = 170;
								break;
							case "GOLD_SPIKE":
								craftIds.push(55, 56, 57, 69);
								checkId = 169;
								break;
							case "STONE_SPIKE":
								craftIds.push(55, 56, 68);
								checkId = 168;
								break;
							case "REIDITE_WALL":
								craftIds.push(55, 56, 57, 58, 59, 60);
								checkId = 217;
								break;
							case "AMETHYST_WALL":
								craftIds.push(55, 56, 57, 58, 59);
								checkId = 122;
								break;
							case "DIAMOND_WALL":
								craftIds.push(55, 56, 57, 58);
								checkId = 165;
								break;
							case "GOLD_WALL":
								craftIds.push(55, 56, 57);
								checkId = 164;
								break;
							case "STONE_WALL":
								craftIds.push(55, 56);
								checkId = 163;
								break
						}
						if (craftIds.length > 0 && checkId) {
							const amount = getUserInventoryItemsAmountProperty(getUserInventoryProperty())[checkId];
							if (amount === undefined || amount < Settings.SmartCraft.hm) {
								for (const craftId of craftIds.reverse()) {
									AutoFeed();
									socket.send(JSON.stringify([Packets.Craft, craftId]))
								}
							}
						}
						Stamps.AutoCraft = stamp
					}
				}
				if (Settings.AutoBreadPut.enabled) {
					if (stamp - Stamps.AutoBreadPut > 250) {
						ovens.forEach((oven => {
							if ((oven.info & 31) !== Settings.BreadPutMax && distance(oven, me) <= 300) {
								socket.send(JSON.stringify([Packets.GiveWoodOven, Settings.BreadPutMax - (oven.info & 31), oven.pid, oven.id]))
							}
							if ((oven.info & 992) >> 5 !== Settings.BreadPutMax && distance(oven, me) <= 300) {
								socket.send(JSON.stringify([Packets.GiveFlourOven, Settings.BreadPutMax - ((oven.info & 992) >> 5), oven.pid, oven.id]))
							}
						}));
						windmills.forEach((windmill => {
							if ((windmill.info & 255) !== Settings.WindmillPutMax && distance(windmill, me) <= 300) {
								socket.send(JSON.stringify([Packets.GiveWheatWindmill, Settings.WindmillPutMax - (windmill.info & 255), windmill.pid, windmill.id]))
							}
						}));
						Stamps.AutoBreadPut = stamp
					}
				}
				if (Settings.AutoCraft.enabled && Settings.AutoCraft.last != null) {
					if (stamp - Stamps.AutoCraft > 60) {
						AutoFeed();
						socket.send(JSON.stringify([Packets.Craft, Settings.AutoCraft.last]));
						Stamps.AutoCraft = stamp
					}
				}
				if (Settings.AutoRecycle.enabled && Settings.AutoRecycle.last != null) {
					if (stamp - Stamps.AutoRecycle > 60) {
						AutoFeed();
						socket.send(JSON.stringify([Packets.Recycle, Settings.AutoRecycle.last]));
						Stamps.AutoRecycle = stamp
					}
				}
				if (Settings.DropSword.enabled) {
					if (stamp - Stamps.DropSword > 60) {
						if (holdingGearType(me)) {
							socket.send(JSON.stringify([Packets.DropAll, me.right]))
						}
						Stamps.DropSword = stamp
					}
				}
				if (Settings.AutoWall.enabled && canSelect(162)) {
					if (stamp - Stamps.AutoWall > 80) {
						socket.send(JSON.stringify([Packets.SendBuild, 162, angle, 0]));
						if (Settings.AutoWall.mode) {
							for (let i = 0; i < 20; i += 2) {
								socket.send(JSON.stringify([Packets.SendBuild, 162, angleCalculator(angle, i), 0]));
								socket.send(JSON.stringify([Packets.SendBuild, 162, angleCalculator(angle, -i), 0]))
							}
						}
						Stamps.AutoWall = stamp
					}
				}
				if (Settings.AutoResurrection.enabled && canSelect(151)) {
					if (stamp - Stamps.AutoResurrection > 60) {
						socket.send(JSON.stringify([Packets.SendBuild, 151, angle, 0]));
						Stamps.AutoResurrection = stamp
					}
				}
				if (Settings.AutoGreenCrown.enabled && canSelect(77)) {
					if (stamp - Stamps.AutoGreenCrown > 900) {
						if (~~(11 - (Date.now() - Timers.HealTimer) / 1e3) == 1 && ⵠⵠⵠ.ᐃⵠⲆᐃ.ⲆⲆⲆΔ * 200 <= 160 && me.ΔⲆⲆⲆᐃ != 77) {
							const lastClothe = me.ΔⲆⲆⲆᐃ == 77 ? undefined : me.ΔⲆⲆⲆᐃ;
							socket.send(JSON.stringify([Packets.Equip, 77]));
							if (lastClothe) setTimeout((() => socket.send(JSON.stringify([Packets.Equip, lastClothe]))), 800)
						}
						Stamps.AutoGreenCrown = stamp
					}
				}
				if (Settings.AutoFire.enabled && canSelect(113)) {
					if (stamp - Stamps.AutoFire > 60) {
						socket.send(JSON.stringify([Packets.SendBuild, 113, angle, 0]));
						Stamps.AutoFire = stamp
					}
				}
				if (Settings.AutoBridge.enabled && canSelect(125)) {
					if (stamp - Stamps.AutoBridge > 60) {
						socket.send(JSON.stringify([Packets.SendBuild, 125, angle, 0]));
						Stamps.AutoBridge = stamp
					}
				}
				if (Settings.AutoBuild.enabled) {
					if (stamp - Stamps.AutoBuild > 60) {
						if (Settings.AutoBuild.build === "Roofs" && canSelect(190)) {
							socket.send(JSON.stringify([Packets.SendBuild, 190, angle, 1]))
						} else if (Settings.AutoBuild.build === "Bridges" && canSelect(125)) {
							socket.send(JSON.stringify([Packets.SendBuild, 125, angle, 1]))
						} else if (Settings.AutoBuild.build === "Plots" && canSelect(141)) {
							socket.send(JSON.stringify([Packets.SendBuild, 141, angle, 1]))
						}
						Stamps.AutoBuild = stamp
					}
				}
				if (Settings.AutoSeed.enabled) {
					if (stamp - Stamps.AutoSeed > 60) {
						let seedId;
						switch (Settings.AutoSeed.seed) {
							case "Auto":
								const seeds = [115, 132, 188, 204, 206, 193, 210, 191, 208];
								for (const seed of seeds)
									if (canSelect(seed)) seedId = seed;
								break;
							case "Berry":
								if (canSelect(115)) seedId = 115;
								break;
							case "Wheat":
								if (canSelect(132)) seedId = 132;
								break;
							case "Pumpkin":
								if (canSelect(188)) seedId = 188;
								break;
							case "Thornbush":
								if (canSelect(193)) seedId = 193;
								break;
							case "Aloe":
								if (canSelect(210)) seedId = 210;
								break;
							case "Watermelon":
								if (canSelect(208)) seedId = 208;
								break;
							case "Garlic":
								if (canSelect(191)) seedId = 191;
								break;
							case "Carrot":
								if (canSelect(204)) seedId = 204;
								break;
							case "Tomato":
								if (canSelect(206)) seedId = 206;
								break
						}
						if (seedId) socket.send(JSON.stringify([Packets.SendBuild, seedId, angle, Settings.AutoSeedG ? 1 : 0]));
						Stamps.AutoSeed = stamp
					}
				}
				if (Settings.AutoTotem.enabled && team.length == 0) {
					if (stamp - Stamps.AutoTotem > 60) {
						totems.forEach((totem => {
							if (distance(totem, me) <= 300) {
								socket.send(JSON.stringify([Packets.JoinTeam, totem.pid, totem.id]))
							}
						}));
						Stamps.AutoTotem = stamp
					}
				}
				if (Settings.AutoCrown.enabled) {
					if (stamp - Stamps.AutoCrown > 60) {
						const ghost = getUserGhostProperty();
						if (ghost.enabled) {
							resurrections.forEach((resurrection => {
								if (distance(resurrection, me) <= 300) {
									socket.send(JSON.stringify([Packets.Resurrection, resurrection.pid, resurrection.id]));
									socket.send(JSON.stringify([Packets.Equip, 79]))
								}
							}))
						}
						Stamps.AutoCrown = stamp
					}
				}
				if (Settings.AimBot.enabled) {
					let n = 0;
					switch (holdingGearType(me)) {
						case "SWORD":
							n = 140;
							break;
						case "SPEAR":
							n = 200;
							break;
						case "PIRATE":
							n = 150;
							break
					}
					if (n) {
						const target = findTarget(me, players, n);
						if (target) {
							Settings.AimBot.angle = calcAngle(me, target, true);
							socket.send(JSON.stringify([Packets.SendAttack, Math.floor((Settings.AimBot.angle + pi2) % pi2 * 255 / pi2)]));
							socket.send(JSON.stringify([Packets.StopAttack]))
						} else Settings.AimBot.angle = null
					} else Settings.AimBot.angle = null
				}
				if (Settings.AutoSpike.enabled) {
					if (stamp - Stamps.AutoSpike > 80) {
						let bestSpike;
						for (const spike of Settings.AutoSpike.priority) {
							if (spike === "Reidite Spike" && canSelect(219)) {
								bestSpike = 219;
								break
							} else if (spike === "Amethyst Spike" && canSelect(123)) {
								bestSpike = 123;
								break
							} else if (spike === "Diamond Spike" && canSelect(170)) {
								bestSpike = 170;
								break
							} else if (spike === "Gold Spike" && canSelect(169)) {
								bestSpike = 169;
								break
							} else if (spike === "Stone Spike" && canSelect(168)) {
								bestSpike = 168;
								break
							} else if (spike === "Wood Spike" && canSelect(160)) {
								bestSpike = 160;
								break
							} else if (spike === "Wood Wall" && canSelect(162)) {
								bestSpike = 162;
								break
							}
						}
						if (bestSpike) {
							socket.send(JSON.stringify([Packets.SendBuild, bestSpike, angle, 0]));
							if (Settings.AutoSpike.mode) {
								for (let i = 0; i < 20; i += 2) {
									socket.send(JSON.stringify([Packets.SendBuild, bestSpike, angleCalculator(angle, i), 0]));
									socket.send(JSON.stringify([Packets.SendBuild, bestSpike, angleCalculator(angle, -i), 0]))
								}
							}
						}
						Stamps.AutoSpike = stamp
					}
				}
				if (Settings.Autofarm.enabled) {
					if (stamp - Stamps.AutoFarm > 400) {
						let Targeta = {
							obj: null,
							dist: -1,
							type: 0
						};
						var rect1 = {
							x: Settings.Autofarm.x,
							y: Settings.Autofarm.y,
							width: Settings.Autofarm.xx - Settings.Autofarm.x,
							height: Settings.Autofarm.yy - Settings.Autofarm.y
						};
						for (var i = 0, objects = [...worldUnits[37], ...worldUnits[3], ...worldUnits[31], ...worldUnits[40], ...worldUnits[39], ...worldUnits[44], ...worldUnits[55], ...worldUnits[54], ...worldUnits[43]], len = objects.length, Berry = null, d = null; i < len; ++i) {
							Berry = objects[i];
							if (!Berry.info || Berry.info === 10) {
								continue
							}
							if (!Settings.Autofarm.water && Berry.info === 16) {
								continue
							}
							if (rect1.x < Berry.x - 50 + 100 && rect1.x + rect1.width > Berry.x - 50 && rect1.y < Berry.y - 50 + 100 && rect1.y + rect1.height > Berry.y - 50) {
								d = (me.x - Berry.x) ** 2 + (me.y - Berry.y) ** 2;
								if (Targeta.dist === -1 || d < Targeta.dist) {
									Targeta.dist = d;
									Targeta.obj = Berry
								}
							}
						}
						if (Targeta.obj && getUserLifeGaugesProperty(getUserGaugesProperty()) * 200 > 140) {
							Targeta.dist = distance(me, Targeta.obj);
							switch (Targeta.obj.info) {
								case 1:
								case 2:
								case 3:
									selectTool(54, 53, me, socket);
									Targeta.type = 2;
									break;
								case 16:
								case 17:
								case 18:
								case 19:
									if (Settings.Autofarm.water) {
										if (canSelect(49)) {
											if (me.right !== 49) {
												socket.send(JSON.stringify([Packets.Equip, 49]))
											}
											Targeta.type = 1
										}
									} else {
										selectTool(54, 53, me, socket);
										Targeta.type = 2
									}
									break
							}
							const Coors = {
								x: me.x - Targeta.obj.x,
								y: me.y - Targeta.obj.y
							};
							const CoorsABS = {
								x: Math.abs(me.x - Targeta.obj.x),
								y: Math.abs(me.y - Targeta.obj.y)
							};
							let velocity = 0;
							if (CoorsABS.x > 0) {
								if (Coors.x > 0) {
									velocity += 1
								}
								if (Coors.x < 0) {
									velocity += 2
								}
							}
							if (CoorsABS.y > 0) {
								if (Coors.y > 0) {
									velocity += 8
								}
								if (Coors.y < 0) {
									velocity += 4
								}
							}
							if (CoorsABS.x < 250 && CoorsABS.y < 250) {
								Settings.Autofarm.angle = calcAngle(me, Targeta.obj, true);
								let Angle255 = Math.floor((Settings.Autofarm.angle + pi2) % pi2 * 255 / pi2);
								if (Settings.Autofarm.angle) {
									socket.send(JSON.stringify([Packets.SendAttack, Angle255]));
									socket.send(JSON.stringify([Packets.StopAttack]))
								}
							}
							client.ⲆⵠΔⲆᐃⲆⲆΔΔ(velocity)
						} else {
							const Coors = {
								x: me.x - Settings.Autofarm.sx,
								y: me.y - Settings.Autofarm.sy
							};
							const CoorsABS = {
								x: Math.abs(me.x - Settings.Autofarm.sx),
								y: Math.abs(me.y - Settings.Autofarm.sy)
							};
							let velocity = 0;
							if (CoorsABS.x > 100) {
								if (Coors.x > 0) {
									velocity += 1
								}
								if (Coors.x < 0) {
									velocity += 2
								}
							}
							if (CoorsABS.y > 100) {
								if (Coors.y > 0) {
									velocity += 8
								}
								if (Coors.y < 0) {
									velocity += 4
								}
							}
							client.ⲆⵠΔⲆᐃⲆⲆΔΔ(velocity)
						}
						Stamps.AutoFarm = stamp
					}
				}
			}
		}
	};
	const script = document.createElement("script");
	script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
	script.onload = initExclusive;
	document.body.appendChild(script)
})();
